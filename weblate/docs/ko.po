# Godot Engine Documentation in Korean
# Copyright (C) 2014-2020, Juan Linietsky, Ariel Manzur and the Godot community (CC-BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
#
# Alegruz <alegruz@khu.ac.kr>, 2018.
# Brian M. Son <sonmg00@gmail.com>, 2018.
# bulldak <jun98518@naver.com>, 2018.
# cbj0523 <ccbj0523@gmail.com>, 2019.
# Ch <ccwpc@hanmail.net>, 2018, 2020.
# deviancekr <day@live.co.kr>, 2020.
# Eunwoo Lee <eunwoo123@gmail.com>, 2018.
# geun-tak Jeong <beroberos@gmail.com>, 2018.
# Hyun Cho (C.H) <uncaose@gmail.com>, 2018.
# icecream28 <asdff2828@naver.com>, 2020.
# Jesse Y. Cho <jesse.cho@protonmail.ch>, 2018.
# Jiyoon Kim <kimjiy@dickinson.edu>, 2019.
# Junho Jang <mibe.jjh@gmail.com>, 2019.
# Kim <kimthaehoon@nate.com>, 2020.
# Kuiprux <kuiprux@gmail.com>, 2018.
# LeeJiWon <minie0324@naver.com>, 2018.
# leesang0612 <onessidotti@gmail.com>, 2018.
# lptprjh <lptprjh@gmail.com>, 2018.
# MJ Kim <mjnkim@protonmail.com>, 2018.
# moolow <copyhyeon@gmail.com>, 2019.
# Octopus ET <sjmoon2001@gmail.com>, 2019.
# pgyage3263 <pgyage3263@naver.com>, 2018.
# pjh37 <jjjj1352@naver.com>, 2018.
# Sun Kim <perplexingsun@gmail.com>, 2018.
# Taehun Yun <yooontehoon@naver.com>, 2018.
# Yeonho Jang <siabard@gmail.com>, 2018.
# Yongsung Kang <yongsung.kang@gmail.com>, 2019.
# 이용현 <dldydgus1995@naver.com>, 2020.
# 한상철 <hanburn@naver.com>, 2018.
# 이용재 <lyj7339@gmail.com>, 2018.
# 박한얼 <volzhs@gmail.com>, 2018.
# 송태섭 <xotjq237@gmail.com>, 2018-2020.
#
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine latest\n"
"Report-Msgid-Bugs-To: https://github.com/godotengine/godot-docs-l10n\n"
"POT-Creation-Date: 2020-03-13 17:49+0100\n"
"PO-Revision-Date: 2020-03-01 05:53+0000\n"
"Last-Translator: Kim <kimthaehoon@nate.com>\n"
"Language-Team: Korean <https://hosted.weblate.org/projects/godot-engine/"
"godot-docs/ko/>\n"
"Language: ko\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"X-Generator: Weblate 4.0-dev\n"

#: ../../docs/index.rst:2
msgid "Godot Docs – *master* branch"
msgstr "Godot 문서 – *master* 브랜치"

#: ../../docs/index.rst:6
msgid ""
"Godot's documentation is available in various languages and versions. Expand "
"the \"Read the Docs\" panel at the bottom of the sidebar to see the list."
msgstr ""
"Godot의 문서는 다양한 언어와 버전으로 이용할 수 있습니다. 사이드바의 아래쪽 "
"\"Read the Docs\" 패널에서 그 목록을 확인해보세요."

#: ../../docs/index.rst:10
msgid ""
"This is the documentation for the development (master) branch. Looking for "
"the documentation of the current **stable** branch? `Have a look here "
"<https://docs.godotengine.org/en/stable>`_."
msgstr ""
"이 문서는 개발 (master) 브랜치 입니다. 현재 **stable** 브랜치 문서를 찾으시나"
"요? `여기로 가세요 <http://docs.godotengine.org/en/stable>`_."

#: ../../docs/index.rst:16
msgid ""
"This documentation is translated from the `original English one <https://"
"docs.godotengine.org/en/latest>`_ by community members on `Weblate <https://"
"hosted.weblate.org/projects/godot-engine/godot-docs>`_."
msgstr ""
"이 문서는 `Weblate <https://hosted.weblate.org/projects/godot-engine/godot-"
"docs>`_\\ 에서 커뮤니티 회원들이 `원본 영어 문서 <https://docs.godotengine."
"org/en/latest>`_\\ 를 번역한 것입니다."

#: ../../docs/index.rst:20
msgid ""
"Depending on the translation effort's completion level, you may find "
"paragraphs or whole pages which are still in English. You can help the "
"community by providing new translations or reviewing existing ones on "
"Weblate."
msgstr ""
"번역의 완성도에 따라 아직 영어로 된 페이지나 단락을 찾을 수도 있습니다. "
"Weblate에서 새 번역을 제공하거나 기존의 번역을 검토하여 커뮤니티를 도울 수 있"
"습니다."

#: ../../docs/index.rst:25
msgid ""
"For the time being, localized translations are only available for the "
"\"latest\" (development) branch, but should be suitable to learn how to use "
"stable Godot releases nevertheless."
msgstr ""
"당분간 현지화된 번역은 \"최신\" (개발) 분기에서만 이용할 수 있습니다. 하지만 "
"개발 브랜치의 내용으로도 안정 버전 Godot을 배우기에는 무리가 없을 것입니다."

#: ../../docs/index.rst:29
msgid ""
"Welcome to the official documentation of Godot Engine, the free and open "
"source community-driven 2D and 3D game engine! If you are new to this "
"documentation, we recommend that you read the :ref:`introduction page "
"<doc_about_intro>` to get an overview of what this documentation has to "
"offer."
msgstr ""
"커뮤니티 기반으로 개발되는 자유 오픈소스 2D & 3D 게임 엔진 Godot 엔진의 공식 "
"문서에 온 것을 환영합니다! 처음이라면 :ref:`소개 페이지<doc_about_intro>`\\ "
"에서 이 문서에 대한 개요를 읽어보는 것을 추천합니다."

#: ../../docs/index.rst:34
msgid ""
"The table of contents below and in the sidebar should let you easily access "
"the documentation for your topic of interest. You can also use the search "
"function in the top left corner."
msgstr ""
"본문 아래나 좌측 사이드 바의 목차에서 원하는 문서를 열람할 수 있습니다. 또한 "
"좌측 상단의 검색을 할 수 있습니다."

#: ../../docs/index.rst:38
msgid ""
"Godot Engine is an open source project developed by a community of "
"volunteers. The documentation team can always use your feedback and help to "
"improve the tutorials and class reference. If you don't understand "
"something, or cannot find what you are looking for in the docs, help us make "
"the documentation better by letting us know!"
msgstr ""
"Godot 엔진은 사용자들에 의해 자발적으로 개발되는 오픈 소스 프로젝트입니다. 문"
"서화 팀은 튜토리얼과 클래스 참조 등을 개선하기 위해 여러분의 의견을 받고 있습"
"니다. 만약 튜토리얼 중 이해가 가지 않는 부분이나 설명이 애매하거나 부족한 부"
"분이 있다면, 부디 저희에게 알려줘서 더 나은 문서를 만들 수 있게 도와주세요!"

#: ../../docs/index.rst:45
msgid ""
"Submit an issue or pull request on the `GitHub repository <https://github."
"com/godotengine/godot-docs/issues>`_, help us `translate the documentation "
"<https://hosted.weblate.org/engage/godot-engine/>`_ into your language, or "
"talk to us on either the ``#documentation`` channel on `Discord <https://"
"discord.gg/zH7NUgz>`_, or the ``#godotengine-doc`` channel on `irc.freenode."
"net <http://webchat.freenode.net/?channels=#godotengine-doc>`_!"
msgstr ""
"`GitHub 저장소 <https://github.com/godotengine/godot-docs/issues>`_\\ 에 "
"Issue를 제출하고 Pull Request를 하거나, `문서 현지화 <https://hosted.weblate."
"org/engage/godot-engine/>`_\\ 를 돕거나, `Discord <https://discord.gg/"
"zH7NUgz>`_\\ 의 ``#documentation``\\ 이나 `irc.freenode.net <http://webchat."
"freenode.net/?channels=#godotengine-doc>`_\\ 의 ``#godotengine-doc``\\ 에서 "
"저희와 함께 논의를 할 수 있습니다!"

#: ../../docs/index.rst:55
msgid "weblate_widget"
msgstr "weblate_widget"

#: ../../docs/index.rst:56
msgid ""
"The main documentation for the site is organized into the following sections:"
msgstr "이 사이트의 주요 문서는 다음과 같이 구성되어 있습니다:"

#: ../../docs/index.rst:58
msgid "General"
msgstr "일반"

#: ../../docs/index.rst:66
msgid "Getting started"
msgstr "시작하기"

#: ../../docs/index.rst:77
msgid "Tutorials"
msgstr "튜토리얼"

#: ../../docs/index.rst:107
msgid "Development"
msgstr "개발"

#: ../../docs/index.rst:118
msgid "Community"
msgstr "커뮤니티"

#: ../../docs/about/index.rst:2
#: ../../docs/getting_started/scripting/gdscript/gdscript_advanced.rst:7
#: ../../docs/tutorials/inputs/mouse_and_input_coordinates.rst:7
#: ../../docs/development/cpp/variant_class.rst:7
msgid "About"
msgstr "정보"

#: ../../docs/about/introduction.rst:4
#: ../../docs/getting_started/step_by_step/scenes_and_nodes.rst:7
#: ../../docs/getting_started/step_by_step/instancing.rst:7
#: ../../docs/getting_started/step_by_step/scripting.rst:7
#: ../../docs/getting_started/step_by_step/signals.rst:7
#: ../../docs/getting_started/step_by_step/animations.rst:7
#: ../../docs/getting_started/step_by_step/filesystem.rst:7
#: ../../docs/getting_started/step_by_step/scene_tree.rst:7
#: ../../docs/getting_started/step_by_step/singletons_autoload.rst:7
#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:7
#: ../../docs/getting_started/scripting/c_sharp/c_sharp_basics.rst:4
#: ../../docs/getting_started/workflow/project_setup/project_organization.rst:7
#: ../../docs/getting_started/workflow/export/feature_tags.rst:7
#: ../../docs/getting_started/workflow/best_practices/introduction_best_practices.rst:4
#: ../../docs/tutorials/2d/2d_transforms.rst:7
#: ../../docs/tutorials/2d/using_tilemaps.rst:7
#: ../../docs/tutorials/2d/2d_movement.rst:7
#: ../../docs/tutorials/2d/2d_lights_and_shadows.rst:7
#: ../../docs/tutorials/2d/2d_meshes.rst:7
#: ../../docs/tutorials/2d/2d_sprite_animation.rst:7
#: ../../docs/tutorials/3d/using_transforms.rst:7
#: ../../docs/tutorials/3d/3d_performance_and_limitations.rst:7
#: ../../docs/tutorials/3d/spatial_material.rst:7
#: ../../docs/tutorials/3d/lights_and_shadows.rst:7
#: ../../docs/tutorials/3d/reflection_probes.rst:7
#: ../../docs/tutorials/3d/gi_probes.rst:7
#: ../../docs/tutorials/3d/baked_lightmaps.rst:7
#: ../../docs/tutorials/3d/high_dynamic_range.rst:7
#: ../../docs/tutorials/3d/using_gridmaps.rst:7
#: ../../docs/tutorials/3d/using_multi_mesh_instance.rst:7
#: ../../docs/tutorials/audio/audio_buses.rst:7
#: ../../docs/tutorials/audio/audio_streams.rst:7
#: ../../docs/tutorials/audio/sync_with_audio.rst:7
#: ../../docs/tutorials/physics/using_area_2d.rst:7
#: ../../docs/tutorials/physics/using_kinematic_body_2d.rst:7
#: ../../docs/tutorials/physics/ray-casting.rst:7
#: ../../docs/tutorials/physics/ragdoll_system.rst:7
#: ../../docs/tutorials/physics/kinematic_character_2d.rst:7
#: ../../docs/tutorials/math/vector_math.rst:7
#: ../../docs/tutorials/math/matrices_and_transforms.rst:7
#: ../../docs/tutorials/animation/2d_skeletons.rst:7
#: ../../docs/tutorials/animation/animation_tree.rst:7
#: ../../docs/tutorials/inputs/input_examples.rst:7
#: ../../docs/tutorials/io/saving_games.rst:7
#: ../../docs/tutorials/i18n/internationalizing_games.rst:7
#: ../../docs/tutorials/gui/bbcode_in_richtextlabel.rst:7
#: ../../docs/tutorials/viewports/viewports.rst:7
#: ../../docs/tutorials/viewports/using_viewport_as_texture.rst:7
#: ../../docs/tutorials/viewports/custom_postprocessing.rst:7
#: ../../docs/tutorials/shading/shading_reference/shaders.rst:7
#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:7
#: ../../docs/tutorials/shading/your_first_shader/what_are_shaders.rst:7
#: ../../docs/tutorials/shading/your_first_shader/your_first_canvasitem_shader.rst:7
#: ../../docs/tutorials/shading/shader_materials.rst:7
#: ../../docs/tutorials/shading/screen-reading_shaders.rst:7
#: ../../docs/tutorials/shading/migrating_to_godot_shader_language.rst:7
#: ../../docs/tutorials/shading/advanced_postprocessing.rst:7
#: ../../docs/tutorials/networking/ssl_certificates.rst:7
#: ../../docs/tutorials/assetlib/uploading_to_assetlib.rst:7
#: ../../docs/tutorials/vr/vr_starter_tutorial/vr_starter_tutorial_part_one.rst:7
#: ../../docs/tutorials/vr/vr_starter_tutorial/vr_starter_tutorial_part_two.rst:7
#: ../../docs/tutorials/plugins/editor/import_plugins.rst:11
#: ../../docs/tutorials/plugins/editor/spatial_gizmos.rst:7
#: ../../docs/tutorials/plugins/gdnative/gdnative-c-example.rst:7
#: ../../docs/tutorials/plugins/gdnative/gdnative-cpp-example.rst:7
#: ../../docs/tutorials/plugins/android/android_plugin.rst:7
#: ../../docs/tutorials/misc/binary_serialization_api.rst:7
#: ../../docs/tutorials/misc/state_design_pattern.rst:7
#: ../../docs/development/cpp/custom_resource_format_loaders.rst:7
#: ../../docs/development/cpp/custom_audiostreams.rst:7
#: ../../docs/development/cpp/custom_godot_servers.rst:7
#: ../../docs/development/editor/introduction.rst:4
#: ../../docs/community/contributing/best_practices_for_engine_contributors.rst:7
msgid "Introduction"
msgstr "소개"

#: ../../docs/about/introduction.rst:11
msgid ""
"Welcome to the official documentation of Godot Engine, the free and open "
"source community-driven 2D and 3D game engine! Behind this mouthful, you "
"will find a powerful yet user-friendly tool that you can use to develop any "
"kind of game, for any platform and with no usage restriction whatsoever."
msgstr ""
"무료이자 오픈 소스로 커뮤니티가 만들어가는 2D 및 3D 게임 엔진 Godot 엔진의 공"
"식 문서에 어서 오세요! 다시 말해 Godot 엔진은 아무런 사용 제한 없이 모든 플랫"
"폼으로 어떤 종류의 게임이든 개발할 수 있는 강력하면서도 사용자 친화적인 도구"
"입니다."

#: ../../docs/about/introduction.rst:16
msgid ""
"This page gives a broad presentation of the engine and of the contents of "
"this documentation, so that you know where to start if you are a beginner or "
"where to look if you need info on a specific feature."
msgstr ""
"이 페이지에서는 엔진과 이 문서 내용에 관해 소개하는 것으로, 초보자가 시작하"
"는 곳이자, 특정 기능을 찾을 수 있는 곳입니다."

#: ../../docs/about/introduction.rst:21
msgid "Before you start"
msgstr "시작하기에 앞서"

#: ../../docs/about/introduction.rst:23
msgid ""
"The :ref:`Tutorials and resources <doc_community_tutorials>` page lists "
"video tutorials contributed by the community. If you prefer video to text, "
"those may be worth a look."
msgstr ""
":ref:`튜토리얼과 리소스 <doc_community_tutorials>` 페이지에는 커뮤니티가 기여"
"한 영상 튜토리얼이 있습니다. 문자보다 영상이 더 끌린다면, 아마 이것도 좋을 것"
"입니다."

#: ../../docs/about/introduction.rst:27
msgid ""
"In case you have trouble with one of the tutorials or your project, you can "
"find help on the various :ref:`Community channels <doc_community_channels>`, "
"especially the Godot Discord community, Q&A, and IRC."
msgstr ""
"튜토리얼을 따라가거나 프로젝트를 하는 도중 문제가 발생했다면, 다양한 :ref:`커"
"뮤니티 채널 <doc_community_channels>`, 특히 Godot Discord 커뮤니티, Q&A와 IRC"
"에서 도움을 받을 수 있습니다."

#: ../../docs/about/introduction.rst:32
msgid "About Godot Engine"
msgstr "Godot 엔진에 대하여"

#: ../../docs/about/introduction.rst:34
msgid ""
"A game engine is a complex tool, and it is therefore difficult to present "
"Godot in a few words. Here's a quick synopsis, which you are free to reuse "
"if you need a quick writeup about Godot Engine."
msgstr ""
"게임 엔진은 복잡한 도구입니다, 고로 Godot를 단 몇 마디로 표현하기는 어렵습니"
"다. 간단한 소개문을 적어보았습니다, Godot 엔진에 대한 간단한 기삿거리를 적고 "
"싶다면 이걸 사용해 보세요."

#: ../../docs/about/introduction.rst:38
msgid ""
"Godot Engine is a feature-packed, cross-platform game engine to create 2D "
"and 3D games from a unified interface. It provides a comprehensive set of "
"common tools, so users can focus on making games without having to reinvent "
"the wheel. Games can be exported in one click to a number of platforms, "
"including the major desktop platforms (Linux, macOS, Windows) as well as "
"mobile (Android, iOS) and web-based (HTML5) platforms."
msgstr ""
"Godot 엔진은 통일된 하나의 인터페이스 안에서 2D 및 3D 게임을 만들 수 있는, 기"
"능이 포장된 크로스 플랫폼 게임 엔진입니다. 이 엔진은 사용자가 바퀴를 재 발명"
"할 필요 없이 게임을 만드는 데 집중할 수 있도록 종합적인 도구들을 제공합니다. "
"만든 게임은 클릭 한 번으로 주요 데스크톱 플랫폼(Linux, macOS, Windows)은 물"
"론 모바일(Android, iOS) 및 웹 기반(HTML 5) 플랫폼으로 내보낼 수 있습니다."

#: ../../docs/about/introduction.rst:45
msgid ""
"Godot is completely free and open source under the permissive MIT license. "
"No strings attached, no royalties, nothing. Users' games are theirs, down to "
"the last line of engine code. Godot's development is fully independent and "
"community-driven, empowering users to help shape their engine to match their "
"expectations. It is supported by the `Software Freedom Conservancy <https://"
"sfconservancy.org>`_ not-for-profit."
msgstr ""
"Godot는 완전히 무료이고 아주 관대한 MIT 라이선스로 배포되는 오픈 소스입니다. "
"다른 조건도 없고 로열티 요구도 없습니다. 엔진 사용자가 만든 게임은 엔진 코드"
"의 마지막 줄까지 사용자의 것입니다. Godot의 개발은 독립적이고 커뮤니티가 주도"
"하기 때문에 사용자들 스스로 원하는 대로 엔진의 발전을 도울 수 있습니다. Godot"
"는 `소프트웨어 자유 단체 <https://sfconservancy.org>`_\\ 으로부터 비영리 운"
"영 지원을 받습니다."

#: ../../docs/about/introduction.rst:52
msgid ""
"For a more in-depth view of the engine, you are encouraged to read this "
"documentation further, especially the :ref:`Step by step <toc-learn-"
"step_by_step>` tutorial."
msgstr ""
"이 엔진을 더 깊이 알고 싶다면 이 문서의 다른 부분을, 특히 :ref:`단계별 <toc-"
"learn-step_by_step>` 튜토리얼을 읽어보길 바랍니다."

#: ../../docs/about/introduction.rst:57
msgid "About the documentation"
msgstr "문서에 대하여"

#: ../../docs/about/introduction.rst:59
msgid ""
"This documentation is continuously written, corrected, edited, and revamped "
"by members of the Godot Engine community. It is edited via text files in the "
"`reStructuredText <http://www.sphinx-doc.org/en/stable/rest.html>`_ markup "
"language and then compiled into a static website/offline document using the "
"open source `Sphinx <http://www.sphinx-doc.org>`_ and `ReadTheDocs <https://"
"readthedocs.org/>`_ tools."
msgstr ""
"이 문서는 Godot 엔진 커뮤니티 구성원들이 지속적으로 쓰고, 교정하고, 편집하"
"고, 개정하고 있습니다. 문서는 `reStructuredText <http://www.sphinx-doc.org/"
"en/stable/rest.html>`_ 마크업 언어로 된 텍스트 파일로 편집한 뒤 오픈 소스인 "
"`Sphinx <http://www.sphinx-doc.org>`_\\ 와 `ReadTheDocs <https://readthedocs."
"org/>`_\\ 를 사용해 정적 웹사이트/오프라인 문서로 컴파일됩니다."

#: ../../docs/about/introduction.rst:66
msgid ""
"You can contribute to Godot's documentation by opening issue tickets or "
"sending patches via pull requests on its GitHub `source repository <https://"
"github.com/godotengine/godot-docs>`_, or translating it into your language "
"on `Hosted Weblate <https://hosted.weblate.org/projects/godot-engine/godot-"
"docs/>`_."
msgstr ""
"Godot 문서에 기여하려면 GitHub `소스 저장소 <https://github.com/godotengine/"
"godot-docs>`_\\ 에서 이슈를 열거나 Pull Requests로 패치를 보내거나, `Hosted "
"Weblate <https://hosted.weblate.org/projects/godot-engine/godot-docs/>`_\\ 에"
"서 자국의 언어로 번역할 수 있습니다."

#: ../../docs/about/introduction.rst:72
msgid ""
"All the contents are under the permissive Creative Commons Attribution 3.0 "
"(`CC-BY 3.0 <https://creativecommons.org/licenses/by/3.0/>`_) license, with "
"attribution to \"Juan Linietsky, Ariel Manzur and the Godot Engine community"
"\"."
msgstr ""
"문서의 모든 내용은 크리에이티브 커먼스 저작자 표시 3.0 (`CC-BY 3.0 <https://"
"creativecommons.org/licenses/by/3.0/>`_) 라이선스로 사용할 수 있고, 저작자 표"
"시는 \"Juan Linietsky, Ariel Manzur, Godot Engine community\"로 하면 됩니다."

#: ../../docs/about/introduction.rst:77
msgid "Organization of the documentation"
msgstr "문서의 구조"

#: ../../docs/about/introduction.rst:79
msgid ""
"This documentation is organised in five sections with an impressively "
"unbalanced distribution of contents – but the way it is split up should be "
"relatively intuitive:"
msgstr ""
"이 문서는 크게 다섯 개 섹션으로 구성되어 있고 섹션마다 분량이 크게 다르지만 "
"구분 자체는 꽤 직관적으로 되어 있습니다:"

#: ../../docs/about/introduction.rst:83
msgid ""
"The :ref:`sec-general` section contains this introduction as well as "
"information about the engine, its history, its licensing, authors, etc. It "
"also contains the :ref:`doc_faq`."
msgstr ""
":ref:`sec-general` 섹션은 이 소개문과 엔진의 역사, 라이선스, 제작자 등 기본적"
"인 정보를 담고 있습니다. :ref:`doc_faq`\\ 도 여기 속합니다."

#: ../../docs/about/introduction.rst:86
msgid ""
"The :ref:`sec-learn` section is the *raison d'être* of this documentation, "
"as it contains all the necessary information on using the engine to make "
"games. It starts with the :ref:`Step by step <toc-learn-step_by_step>` "
"tutorial which should be the entry point for all new users."
msgstr ""
":ref:`sec-learn` 섹션은 이 문서의 주된 *존재 이유*\\ 로, 이 엔진을 사용해 게"
"임을 만드는 데 필요한 모든 정보를 담고 있습니다. :ref:`단계별 <toc-learn-"
"step_by_step>` 튜토리얼로 시작합니다. 이 부분은 새로운 사용자 모두에게 입문 "
"지점이 될 것입니다."

#: ../../docs/about/introduction.rst:91
msgid ""
"The :ref:`sec-tutorials` section can be read as needed, in any order. It "
"contains feature-specific tutorials and documentation."
msgstr ""
"반면 :ref:`sec-tutorials` 섹션은 순서에 상관없이 필요에 맞춰 읽을 수 있습니"
"다. 이 섹션에는 특정 기능 관련 튜토리얼과 문서가 있습니다."

#: ../../docs/about/introduction.rst:93
msgid ""
"The :ref:`sec-devel` section is intended for advanced users and contributors "
"to the engine development, with information on compiling the engine, "
"developing C++ modules or editor plugins."
msgstr ""
":ref:`sec-devel` 섹션은 고급 사용자와 엔진 개발 기여자들을 위한 섹션으로 엔"
"진 컴파일, C++ 모듈 혹은 편집기 플러그인 개발에 대한 정보를 담고 있습니다."

#: ../../docs/about/introduction.rst:96
msgid ""
"The :ref:`sec-community` section gives information related to contributing "
"to engine development and the life of its community, e.g. how to report "
"bugs, help with the documentation, etc. It also points to various community "
"channels like IRC and Discord and contains a list of recommended third-party "
"tutorials outside of this documentation."
msgstr ""
":ref:`sec-community`\\ 는 엔진 개발과 커뮤니티 기여에 관련된 정보를 제공합니"
"다, 예를 들어 버그 제보하는 방법, 문서에 기여하는 방법 등이 있습니다. 또 IRC"
"와 Discord 등 여러 커뮤니티 채널이나 이 문서 밖에 있는 제 3자의 튜토리얼 추"
"천 목록도 있습니다."

#: ../../docs/about/introduction.rst:101
msgid ""
"Finally, the :ref:`sec-class-ref` is the documentation of the Godot API, "
"which is also available directly within the engine's script editor. It is "
"generated automatically from a file in the main source repository, therefore "
"the generated files of the documentation are not meant to be modified. See :"
"ref:`doc_updating_the_class_reference` for details."
msgstr ""
"마지막으로 :ref:`sec-class-ref`\\ 는 Godot API 문서로 엔진의 스크립트 편집기"
"에서도 바로 읽어볼 수 있습니다. 이 섹션은 엔진 소스 저장소에 있는 파일에서 자"
"동으로 생성되기 때문에 생성된 문서 파일은 직접 수정하지 않습니다. 자세한 내용"
"은 :ref:`doc_updating_the_class_reference`\\ 을 확인하세요."

#: ../../docs/about/introduction.rst:107
msgid ""
"In addition to this documentation you may also want to take a look at the "
"various `Godot demo projects <https://github.com/godotengine/godot-demo-"
"projects>`_."
msgstr ""
"이 문서 외에 여러가지 `Godot 데모 프로젝트들 <https://github.com/godotengine/"
"godot-demo-projects>`_\\ 도 살펴보면 좋습니다."

#: ../../docs/about/introduction.rst:110
msgid "Have fun reading and making games with Godot Engine!"
msgstr "재미있게 읽고 Godot 엔진으로 즐겁게 게임 개발하세요!"

#: ../../docs/about/faq.rst:1
msgid "FAQ"
msgstr "자주 묻는 질문(FAQ)"

#: ../../docs/about/faq.rst:7
#: ../../docs/tutorials/assetlib/what_is_assetlib.rst:42
msgid "Frequently asked questions"
msgstr "자주 묻는 질문들(FAQ)"

#: ../../docs/about/faq.rst:10
msgid ""
"What can I do with Godot? How much does it cost? What are the license terms?"
msgstr ""
"Godot로 무엇을 할 수 있나요? 가격은 얼마인가요? 라이선스 조항은 어떻게 되나"
"요?"

#: ../../docs/about/faq.rst:12
msgid ""
"Godot is `Free and Open-Source Software <https://en.wikipedia.org/wiki/"
"Free_and_open-source_software>`_ available under the `OSI-approved <https://"
"opensource.org/licenses/MIT>`_ MIT license. This means it is free as in "
"\"free speech\" as well as in \"free beer.\""
msgstr ""
"Godot는 `OSI가 인정한 <https://opensource.org/licenses/MIT>`_ MIT 라이선스로 "
"사용할 수 있는 `무료이자 오픈 소스 소프트웨어 <https://ko.wikipedia.org/wiki/"
"자유-오픈_소스_소프트웨어>`_\\ 입니다. 이 말인 즉, Godot는 \"언론의 자유"
"(Free)\"라는 뜻과 \"무료(Free) 맥주\"라는 뜻을 모두 지니고 있다는 것이죠."

#: ../../docs/about/faq.rst:14
msgid "In short:"
msgstr "간단히 말해서:"

#: ../../docs/about/faq.rst:16
msgid ""
"You are free to download and use Godot for any purpose, personal, non-"
"profit, commercial, or otherwise."
msgstr ""
"개인적으로, 비영리로, 사업 목적으로, 그 외 어떤 이유든지 자유롭게 Godot를 다"
"운로드하고 사용할 수 있습니다."

#: ../../docs/about/faq.rst:17
msgid ""
"You are free to modify, distribute, redistribute, and remix Godot to your "
"heart's content, for any reason, both non-commercially and commercially."
msgstr ""
"Godot를 마음대로 자유롭게 수정하고, 배포하고, 재배포하고 수정할 수 있습니다. "
"그 이유가 비상업적이든지 상업적이든지 말이죠."

#: ../../docs/about/faq.rst:19
msgid ""
"All the contents of this accompanying documentation are published under the "
"permissive Creative Commons Attribution 3.0 (`CC-BY 3.0 <https://"
"creativecommons.org/licenses/by/3.0/>`_) license, with attribution to \"Juan "
"Linietsky, Ariel Manzur and the Godot Engine community.\""
msgstr ""
"이 문서의 모든 내용은 크리에이티브 커먼스 저작자 표시 3.0 (`CC-BY 3.0 "
"<https://creativecommons.org/licenses/by/3.0/deed.ko>`_) 라이선스 하에, "
"\"Juan Linietsky, Ariel Manzur, Godot Engine community\"에 속합니다."

#: ../../docs/about/faq.rst:23
msgid ""
"Logos and icons are generally under the same Creative Commons license. Note "
"that some third-party libraries included with Godot's source code may have "
"different licenses."
msgstr ""
"로고와 아이콘은 일반적으로 동일한 크리에이티브 커먼스 라이선스 하에 속합니"
"다. Godot의 소스 코드에 포함된 일부 제 3자 라이브러리는 다른 라이선스가 적용"
"될 수 있으므로 유의하세요."

#: ../../docs/about/faq.rst:27
msgid ""
"For full details, look at the `COPYRIGHT.txt <https://github.com/godotengine/"
"godot/blob/master/COPYRIGHT.txt>`_ as well as the `LICENSE.txt <https://"
"github.com/godotengine/godot/blob/master/LICENSE.txt>`_ and `LOGO_LICENSE."
"txt <https://github.com/godotengine/godot/blob/master/LOGO_LICENSE.md>`_ "
"files in the Godot repository."
msgstr ""
"전체 세부 사항은 Godot 저장소에 있는 `COPYRIGHT.txt <https://github.com/"
"godotengine/godot/blob/master/COPYRIGHT.txt>`_\\ 와 `LICENSE.txt <https://"
"github.com/godotengine/godot/blob/master/LICENSE.txt>`_, `LOGO_LICENSE.txt "
"<https://github.com/godotengine/godot/blob/master/LOGO_LICENSE.md>`_ 파일을 "
"참고하세요."

#: ../../docs/about/faq.rst:31
msgid ""
"Also, see `the license page on the Godot website <https://godotengine.org/"
"license>`_."
msgstr ""
"`Godot 웹 사이트의 라이선스 페이지 <https://godotengine.org/license>`_\\ 도 "
"참고하세요."

#: ../../docs/about/faq.rst:34
msgid "Which platforms are supported by Godot?"
msgstr "Godot는 어떤 플랫폼을 지원하나요?"

#: ../../docs/about/faq.rst:36
msgid "**For the editor:**"
msgstr "**편집기의 경우:**"

#: ../../docs/about/faq.rst:38
#: ../../docs/getting_started/scripting/c_sharp/c_sharp_basics.rst:39
#: ../../docs/tutorials/misc/jitter_stutter.rst:53
msgid "Windows"
msgstr "Windows"

#: ../../docs/about/faq.rst:39 ../../docs/about/faq.rst:45
#: ../../docs/tutorials/misc/jitter_stutter.rst:78
msgid "macOS"
msgstr "macOS"

#: ../../docs/about/faq.rst:40 ../../docs/about/faq.rst:46
msgid "X11 (Linux, \\*BSD)"
msgstr "X11 (Linux, \\*BSD)"

#: ../../docs/about/faq.rst:42
msgid "**For exporting your games:**"
msgstr "**내보내는 게임의 경우:**"

#: ../../docs/about/faq.rst:44
msgid "Windows (and UWP)"
msgstr "Windows (그리고 UWP)"

#: ../../docs/about/faq.rst:47
#: ../../docs/getting_started/step_by_step/exporting.rst:316
#: ../../docs/tutorials/misc/jitter_stutter.rst:84
msgid "Android"
msgstr "Android"

#: ../../docs/about/faq.rst:48
#: ../../docs/getting_started/step_by_step/exporting.rst:369
#: ../../docs/tutorials/misc/jitter_stutter.rst:90
msgid "iOS"
msgstr "iOS"

#: ../../docs/about/faq.rst:49
msgid "Web"
msgstr "웹"

#: ../../docs/about/faq.rst:51
msgid ""
"Both 32- and 64-bit binaries are supported where it makes sense, with 64 "
"being the default."
msgstr "64비트가 기본이지만 32비트와 64비트 모두 지원합니다."

#: ../../docs/about/faq.rst:54
msgid ""
"Some users also report building and using Godot successfully on ARM-based "
"systems with Linux, like the Raspberry Pi."
msgstr ""
"일부 사용자들은 Linux로 Raspberry Pi와 같은 ARM 기반 시스템에 Godot를 성공적"
"으로 빌드하고 사용했다고 말합니다."

#: ../../docs/about/faq.rst:57
msgid ""
"Additionally, there is some unofficial third-party work being done on "
"building for some consoles. However, none of this is included in the default "
"build scripts or export templates at this time."
msgstr ""
"추가적으로 콘솔로 빌드하기 위한 비공식적인 제 3자의 작업이 있습니다. 하지만 "
"아직 그 중 기본 빌드 스크립트나 내보내기 템플릿을 포함한 것은 없습니다."

#: ../../docs/about/faq.rst:61
msgid ""
"For more on this, see the sections on :ref:`exporting <toc-learn-workflow-"
"export>` and :ref:`compiling Godot yourself <toc-devel-compiling>`."
msgstr ""
"자세한 정보는 :ref:`내보내기 <toc-learn-workflow-export>`\\ 와 :ref:`Godot를 "
"직접 컴파일하기 <toc-devel-compiling>`\\ 를 다루는 섹션을 참고하세요."

#: ../../docs/about/faq.rst:65
msgid "Which programming languages are supported in Godot?"
msgstr "Godot는 어떤 프로그래밍 언어를 지원하나요?"

#: ../../docs/about/faq.rst:67
msgid ""
"The officially supported languages for Godot are GDScript, Visual Scripting, "
"C#, and C++. See the subcategories for each language in the :ref:`scripting "
"<toc-learn-scripting>` section."
msgstr ""
"Godot가 공식으로 지원하는 언어는 GDScript, Visual Scripting, C#, 그리고 C++입"
"니다. :ref:`스크립팅 <toc-learn-scripting>` 섹션에서 각 언어 별 하위 카테고리"
"를 참고하세요."

#: ../../docs/about/faq.rst:71
msgid ""
"If you are just starting out with either Godot or game development in "
"general, GDScript is the recommended language to learn and use since it is "
"native to Godot. While scripting languages tend to be less performant than "
"lower-level languages in the long run, for prototyping, developing Minimum "
"Viable Products (MVPs), and focusing on Time-To-Market (TTM), GDScript will "
"provide a fast, friendly, and capable way of developing your games."
msgstr ""
"대개 Godot 개발이나 게임 개발을 목적으로 엔진을 켜게 된다면, Godot에 네이티브"
"로 동작하는 GDScript를 배우고 사용하는데 추천하는 언어입니다. 스크립트 언어"
"는 장기적인 면에서 다른 로우 레벨 언어보다 퍼포먼스가 떨어지는 경향이 있습니"
"다. 하지만 시제품 제작이나 최소 기능 제품(MVP)을 개발하기 위해서, 그리고 판매"
"할 때까지 걸리는 시간(TTM)에 중점을 둔다면, GDScript는 게임을 개발하는데 빠르"
"고, 친절하고, 유능한 방법을 제공할 것입니다."

#: ../../docs/about/faq.rst:78
msgid ""
"Note that C# support is still relatively new, and as such, you may encounter "
"some issues along the way. Our friendly and hard-working development "
"community is always ready to tackle new problems as they arise, but since "
"this is an open-source project, we recommend that you first do some due "
"diligence yourself. Searching through discussions on `open issues <https://"
"github.com/godotengine/godot/issues>`_ is a great way to start your "
"troubleshooting."
msgstr ""
"C# 지원은 비교적 최근에 시작했기 때문에 오류를 발견할 수 있습니다. 우리의 친"
"절하고 부지런한 개발 커뮤니티는 언제나 새 문제를 해결할 준비가 되어있습니다. "
"하지만 이것은 오픈 소스 프로젝트이므로 스스로 해결해 보는 것을 추천합니다. "
"`Open Issues <https://github.com/godotengine/godot/issues>`_\\ 에서 토론을 찾"
"아보는 것도 문제를 해결하는데 좋은 출발점이 될 것입니다."

#: ../../docs/about/faq.rst:85
msgid ""
"As for new languages, support is possible via third parties using the "
"GDNative / NativeScript / PluginScript facilities. (See the question about "
"plugins below.) Work is currently underway, for example, on unofficial "
"bindings for Godot to `Python <https://github.com/touilleMan/godot-python>`_ "
"and `Nim <https://github.com/pragmagic/godot-nim>`_."
msgstr ""
"GDNative / NativeScript / PluginScript 기능을 사용한 제 3자를 통해 새로운 언"
"어를 지원할 수 있습니다. (아래에 플러그인에 관한 질문을 참고하세요.) 예를 들"
"어 Godot에 `Python <https://github.com/touilleMan/godot-python>`_\\ 과 `Nim "
"<https://github.com/pragmagic/godot-nim>`_\\ 의 비공식 바인딩 개발이 진행 중"
"입니다."

#: ../../docs/about/faq.rst:91
msgid "What is GDScript and why should I use it?"
msgstr "GDScript는 무엇이고 왜 이것을 써야 하나요?"

#: ../../docs/about/faq.rst:93
msgid ""
"GDScript is Godot's integrated scripting language. It was built from the "
"ground up to maximize Godot's potential in the least amount of code, "
"affording both novice and expert developers alike to capitalize on Godot's "
"strengths as fast as possible. If you've ever written anything in a language "
"like Python before then you'll feel right at home. For examples, history, "
"and a complete overview of the power GDScript offers you, check out the :ref:"
"`GDScript scripting guide <doc_gdscript>`."
msgstr ""
"GDScript는 Godot에 통합된 스크립트 언어입니다. 이것은 초심자와 전문 개발자가 "
"동등하게 Godot의 강점을 가능한 빨리 활용할 수 있도록, 짧은 코드로도 Godot의 "
"잠재력을 극대화할 수 있도록 바닥부터 지어졌습니다. 이전에 Python 비슷한 언어"
"를 사용해 보신 적이 있다면 익숙할 것입니다. 예제, 역사, 그리고 GDScript가 가"
"진 힘의 전체 개요는 :ref:`GDScript 스크립팅 가이드 <doc_gdscript>`\\ 를 참고"
"하세요."

#: ../../docs/about/faq.rst:100
msgid ""
"There are several reasons to use GDScript--especially when you are "
"prototyping, in alpha/beta stages of your project, or are not creating the "
"next AAA title--but the most salient reason is the overall **reduction of "
"complexity.**"
msgstr ""
"GDScript를 사용하는 여러 이유가 있습니다--특히 프로토타입을 만드는 경우, 프로"
"젝트의 알파/베타 수준의 스테이지를 만드는 경우에, 혹은 만드는 게임이 AAA급이 "
"아니라면 말이죠--그러나 전체적으로 가장 두드러진 이유는 **복잡성 감소**\\ 입"
"니다"

#: ../../docs/about/faq.rst:104
msgid ""
"The original intent of creating a tightly integrated, custom scripting "
"language for Godot was two-fold: first, it reduces the amount of time "
"necessary to get up and running with Godot, giving developers a rapid way of "
"exposing themselves to the engine with a focus on productivity; second, it "
"reduces the overall burden of maintenance, attenuates the dimensionality of "
"issues, and allows the developers of the engine to focus on squashing bugs "
"and improving features related to the engine core--rather than spending a "
"lot of time trying to get a small set of incremental features working across "
"a large set of languages."
msgstr ""
"Godot를 위한 맞춤 스크립트 언어를 만들게 된 원래 의도는 두 가지 입니다: 먼저 "
"Godot를 켜고 실행하는 많은 시간을 줄입니다. 개발자는 생산성에 중점을 두고 엔"
"진에 빠르게 접근할 수 있습니다; 두 번째로 전반적인 유지 보수의 부담을 줄여줍"
"니다. 문제의 어려움을 줄이고 엔진 개발자는 엔진 핵심 버그를 없애고 기능을 개"
"선하는데 집중할 수 있습니다--많은 언어에서 작동하는 자잘한 기능들을 얻으려고 "
"많은 시간을 소모하는 일이 없게 됩니다."

#: ../../docs/about/faq.rst:112
msgid ""
"Since Godot is an open-source project, it was imperative from the start to "
"prioritize a more integrated and seamless experience over attracting "
"additional users by supporting more familiar programming languages--"
"especially when supporting those more familiar languages would result in a "
"worse experience. We understand if you would rather use another language in "
"Godot (see the list of supported options above). That being said, if you "
"haven't given GDScript a try, try it for **three days**. Just like Godot, "
"once you see how powerful it is and rapid your development becomes, we think "
"GDScript will grow on you."
msgstr ""
"Godot가 오픈 소스 프로젝트가 되면서 부터, 처음부터 더 통합되고 완벽한 경험까"
"지 우선 순위를 정했을 때, 추가 사용자 유치를 위한 더 친근한 프로그래밍 언어"
"를 지원하는 것이 최우선이었습니다--특히 더 친근한 언어를 지원하는 것이 더 나"
"쁜 결과로 이어질 때 그랬습니다. Godot에서 다른 언어를 사용하는 것을 이해합니"
"다 (아래에 지원하는 옵션을 참고하세요). GDScript를 사용하지 않아봤다면, **3 "
"일** 동안 한번 사용해보세요. Godot처럼 GDScript가 강력하고 개발하는 것을 빠르"
"게 하는 것을 보게 된다면, 우리는 GDScript가 성장할 것이라고 생각합니다."

#: ../../docs/about/faq.rst:121
msgid ""
"More information about getting comfortable with GDScript or dynamically "
"typed languages can be found in the :ref:`doc_gdscript_more_efficiently` "
"tutorial."
msgstr ""
"GDScript 또는 동적 타입 언어에 익숙해지는 더 자세한 정보는 :ref:"
"`doc_gdscript_more_efficiently` 튜토리얼을 참고하세요."

#: ../../docs/about/faq.rst:125
msgid "What were the motivations behind creating GDScript?"
msgstr "GDScript를 제작하게 된 동기가 무엇입니까?"

#: ../../docs/about/faq.rst:127
msgid ""
"The main reasons for creating a custom scripting language for Godot were:"
msgstr "Godot를 위한 맞춤 스크립트 언어를 개발하게 된 주요 이유는 이러합니다:"

#: ../../docs/about/faq.rst:129
msgid ""
"Poor thread support in most script VMs, and Godot uses threads (Lua, Python, "
"Squirrel, JS, AS, etc.)."
msgstr ""
"대부분의 스크립트 가상 머신에서 스레드 지원이 좋지 않습니다. 하지만 Godot는 "
"스레드를 사용합니다 (Lua, Python, Squirrel, JS, AS 등)."

#: ../../docs/about/faq.rst:131
msgid ""
"Poor class-extending support in most script VMs, and adapting to the way "
"Godot works is highly inefficient (Lua, Python, JS)."
msgstr ""
"대부분의 스크립트 가상 머신은 클래스 확장 지원이 부족하고 Godot의 작동 방식"
"에 맞춰 변형하자면 너무 비효율적입니다 (Lua, Python, JS)."

#: ../../docs/about/faq.rst:133
msgid ""
"Many existing languages have horrible interfaces for binding to C++, "
"resulting in large amount of code, bugs, bottlenecks, and general "
"inefficiency (Lua, Python, Squirrel, JS, etc.) We wanted to focus on a great "
"engine, not a great amount of integrations."
msgstr ""
"많은 존재하는 언어들은 C++ 바인딩을 위한 끔찍한 인터페이스를 갖고 있습니다. "
"코드 양이 많아지고 버그, 병목, 그리고 전반적으로 비효율적입니다 (Lua, "
"Python, Squirrel, JS 등.) 우리는 많은 통합이 아닌 좋은 엔진에 중점을 두고 싶"
"었습니다."

#: ../../docs/about/faq.rst:136
msgid ""
"No native vector types (vector3, matrix4, etc.), resulting in highly reduced "
"performance when using custom types (Lua, Python, Squirrel, JS, AS, etc.)."
msgstr ""
"자체적인 벡터 유형이 없어서 (vector3, matrix4 등) 맞춤 유형을 사용하게 되고 "
"성능이 크게 감소합니다 (Lua, Python, Squirrel, JS, AS 등)."

#: ../../docs/about/faq.rst:139
msgid ""
"Garbage collector results in stalls or unnecessarily large memory usage "
"(Lua, Python, JS, AS, etc.)."
msgstr ""
"가비지 컬렉터는 처리 지연과 쓸데없이 큰 메모리 사용을 초래합니다 (Lua, "
"Python, JS, AS 등)."

#: ../../docs/about/faq.rst:141
msgid ""
"Difficulty to integrate with the code editor for providing code completion, "
"live editing, etc. (all of them). This is well supported by GDScript."
msgstr ""
"코드 완성, 실시간 편집 등 (이 전부를) 지원하기 위한 코드 편집기 통합이 까다롭"
"습니다. GDScript는 이 부분을 잘 지원합니다."

#: ../../docs/about/faq.rst:145
msgid "GDScript was designed to curtail the issues above and more."
msgstr "GDScript는 위와 같은 문제들을 줄이고자 설계되었습니다."

#: ../../docs/about/faq.rst:148
msgid "What type of 3D model formats does Godot support?"
msgstr "Godot는 무슨 유형의 3D 모델을 지원하나요?"

#: ../../docs/about/faq.rst:150
#, fuzzy
msgid ""
"Godot supports Collada via the `OpenCollada <https://github.com/KhronosGroup/"
"OpenCOLLADA/wiki/OpenCOLLADA-Tools>`_ exporter (Maya, 3DSMax). If you are "
"using Blender, take a look at our own `Better Collada Exporter <https://"
"godotengine.org/download>`_."
msgstr ""
"그렇지만 고도의 Collada 지원이 정말 좋기 때문에 Maya나 3DS Max를 사용한다면 "
"가장 호환성이 좋은 `OpenCollada <https://github.com/KhronosGroup/OpenCOLLADA/"
"wiki/OpenCOLLADA-Tools>`_ 내보내기 도구를 사용해주세요. Blender를 사용한다면 "
"우리가 만든 `Better Collada Exporter <https://godotengine.org/download>`_ 를 "
"살펴보세요."

#: ../../docs/about/faq.rst:153
msgid "As of Godot 3.0, glTF is supported."
msgstr "Godot 3.0부터 glTF를 지원합니다."

#: ../../docs/about/faq.rst:155
msgid ""
"FBX is supported via the Open Asset Import library. However, FBX is "
"proprietary so we recommend using other formats listed above, if suitable "
"for your workflow."
msgstr ""

#: ../../docs/about/faq.rst:159
msgid ""
"Will [insert closed SDK such as FMOD, GameWorks, etc.] be supported in Godot?"
msgstr "Godot에서 [FMOD, GameWorks 등 클로즈 SDK]가 지원될까요?"

#: ../../docs/about/faq.rst:161
msgid ""
"The aim of Godot is to create a free and open-source MIT-licensed engine "
"that is modular and extendable. There are no plans for the core engine "
"development community to support any third-party, closed-source/proprietary "
"SDKs, as integrating with these would go against Godot's ethos."
msgstr ""
"Godot의 목표는 모듈 방식이고 확장 가능한 무료이자 오픈 소스 MIT 라이선스 엔진"
"을 만드는 것입니다. 핵심 엔진 개발 커뮤니티가 클로즈 소스/독점 SDK를 지원하도"
"록 하는 계획은 없습니다. 이것들을 통합하는 것은 Godot의 정신에 반대되는 것입"
"니다."

#: ../../docs/about/faq.rst:166
msgid ""
"That said, because Godot is open-source and modular, nothing prevents you or "
"anyone else interested in adding those libraries as a module and shipping "
"your game with them--as either open- or closed-source."
msgstr ""
"즉, Godot는 오픈 소스이고 모듈화 되어있으므로, 어느 누구라도 클로즈 SDK를 모"
"듈로 추가해서 여러분의 게임에 사용해 출시해도 무방합니다--오픈 소스든지 클로"
"즈 소스든지 말이죠."

#: ../../docs/about/faq.rst:170
msgid ""
"To see how support for your SDK of choice could still be provided, look at "
"the Plugins question below."
msgstr ""
"선택한 SDK에 대한 지원이 어떻게 제공되는지 알아보려면 아래 플러그인 질문을 참"
"고하세요."

#: ../../docs/about/faq.rst:173
msgid ""
"If you know of a third-party SDK that is not supported by Godot but that "
"offers free and open-source integration, consider starting the integration "
"work yourself. Godot is not owned by one person; it belongs to the "
"community, and it grows along with ambitious community contributors like you."
msgstr ""
"혹시 Godot가 지원하진 않지만 무료이고 오픈 소스로 제공하는 다른 SDK를 안다면 "
"직접 통합 작업을 시작해보세요. Godot는 한 사람의 것이 아닙니다; 커뮤니티에 속"
"해 있고 당신과 같은 야심 찬 커뮤니티 기여자들과 함께 자랍니다."

#: ../../docs/about/faq.rst:179
msgid ""
"How should assets be created to handle multiple resolutions and aspect "
"ratios?"
msgstr ""
"다양한 해상도와 화면 비율에 맞도록 하려면 어떻게 애셋을 만들어야 할까요?"

#: ../../docs/about/faq.rst:181
msgid ""
"This question pops up often and it's probably thanks to the misunderstanding "
"created by Apple when they originally doubled the resolution of their "
"devices. It made people think that having the same assets in different "
"resolutions was a good idea, so many continued towards that path. That "
"originally worked to a point and only for Apple devices, but then several "
"Android and Apple devices with different resolutions and aspect ratios were "
"created, with a very wide range of sizes and DPIs."
msgstr ""
"이 질문은 자주 나타났습니다. 다행이라면 Apple이 기기의 해상도를 원래 두 배로 "
"했기 때문에 나온 오해에서 비롯되었습니다. 이 때문에 사람들이 같은 애셋을 다"
"른 해상도로 만드는 것이 좋은 생각으로 여기고, 많은 사람들이 그렇게 했습니다. "
"이 작업은 원래 Apple 기기에 초점을 맞췄습니다. 하지만 다양한 해상도와 화면 비"
"율을 가진 여러 Android와 Apple 기기가 만들어졌습니다. 그들은 매우 넓은 화면"
"과 DPI를 갖고 있었죠."

#: ../../docs/about/faq.rst:189
msgid ""
"The most common and proper way to achieve this is to, instead, use a single "
"base resolution for the game and only handle different screen aspect ratios. "
"This is mostly needed for 2D, as in 3D it's just a matter of Camera XFov or "
"YFov."
msgstr ""
"가장 일반적이고 적합한 방법은 게임을 위한 하나의 기본 해상도를 사용하고 가로 "
"세로 비율 만을 다르게 하는 것입니다. 2D라면 이 작업이 필요하겠지만, 3D에서는 "
"카메라 X시야나 Y시야의 단순한 문제입니다."

#: ../../docs/about/faq.rst:193
msgid ""
"Choose a single base resolution for your game. Even if there are devices "
"that go up to 2K and devices that go down to 400p, regular hardware scaling "
"in your device will take care of this at little or no performance cost. Most "
"common choices are either near 1080p (1920x1080) or 720p (1280x720). Keep in "
"mind the higher the resolution, the larger your assets, the more memory they "
"will take and the longer the time it will take for loading."
msgstr ""
"게임을 위한 기본 해상도를 고르세요. 해상도가 2K까지 올라가는 기기나 400p까지 "
"내려가는 기기가 있더라도, 기기 안에 있는 균형 하드웨어 스케일링은 이 점을 성"
"능 비용으로 다루진 않을 것입니다. 대부분의 선택은 1080p (1920x1080)이나 720p "
"(1280x720) 근처입니다. 해상도가 높으면 애셋은 더 커지고 더 많은 메모리를 먹"
"고 더 긴 로딩이 걸릴 것이니 명심하세요."

#: ../../docs/about/faq.rst:201
msgid ""
"Use the stretch options in Godot; 2D stretching while keeping aspect ratios "
"works best. Check the :ref:`doc_multiple_resolutions` tutorial on how to "
"achieve this."
msgstr ""
"Godot에서 Stretch 설정을 사용해보세요; 화면 비율을 유지하는 2D Stretch가 좋습"
"니다. 사용하는 방법은 :ref:`doc_multiple_resolutions` 튜토리얼에서 확인해보세"
"요."

#: ../../docs/about/faq.rst:205
msgid ""
"Determine a minimum resolution and then decide if you want your game to "
"stretch vertically or horizontally for different aspect ratios, or if there "
"is one aspect ratio and you want black bars to appear instead. This is also "
"explained in :ref:`doc_multiple_resolutions`."
msgstr ""
"최소 해상도를 선택한 다음, 게임의 화면을 다른 화면 비율에 맞게 수직이나 수평"
"으로 펼칠 수 있습니다. 아니면 화면 비율을 유지하는 대신 검은 여백이 나타나게 "
"할 수 있습니다. 이 또한 :ref:`doc_multiple_resolutions`\\ 에서 설명합니다."

#: ../../docs/about/faq.rst:210
msgid ""
"For user interfaces, use the :ref:`anchoring <doc_size_and_anchors>` to "
"determine where controls should stay and move. If UIs are more complex, "
"consider learning about Containers."
msgstr ""
"사용자 인터페이스에 대해서는 :ref:`앵커 <doc_size_and_anchors>`\\ 를 사용해"
"서 Control이 이동하거나 정지해야 할 위치를 결정하세요. UI가 더 복잡하다면 "
"Container 사용을 고려해보세요."

#: ../../docs/about/faq.rst:214
msgid "And that's it! Your game should work in multiple resolutions."
msgstr "다 됐습니다! 게임이 이제 다양한 해상도에서 작동합니다."

#: ../../docs/about/faq.rst:216
msgid ""
"If there is a desire to make your game also work on ancient devices with "
"tiny screens (fewer than 300 pixels in width), you can use the export option "
"to shrink images, and set that build to be used for certain screen sizes in "
"the App Store or Google Play."
msgstr ""
"(가로 300화소도 안되는) 오래된 기기의 작은 화면에서도 게임이 작동하기를 정말 "
"원한다면, 내보내기 설정으로 이미지를 압축해서 App Store나 구글 플레이에 적합"
"한 화면으로 만들 수 있습니다."

#: ../../docs/about/faq.rst:222
msgid "How can I extend Godot?"
msgstr "어떻게 Godot를 확장할 수 있나요?"

#: ../../docs/about/faq.rst:224
msgid ""
"For extending Godot, like creating Godot Editor plugins or adding support "
"for additional languages, take a look at :ref:`EditorPlugins "
"<doc_making_plugins>` and tool scripts."
msgstr ""
"Godot 편집기 플러그인 제작이나 추가적인 언어 지원을 하고 싶다면 :ref:`편집기 "
"플러그인 <doc_making_plugins>`\\ 과 tool 스크립트를 참고하세요."

#: ../../docs/about/faq.rst:228
msgid "Also, see the official blog posts on these topics:"
msgstr "또한 이 주제에 관한 공식 블로그 게시물도 참고하세요:"

#: ../../docs/about/faq.rst:230
msgid ""
"`A look at the GDNative architecture <https://godotengine.org/article/look-"
"gdnative-architecture>`_"
msgstr ""
"`A look at the GDNative architecture <https://godotengine.org/article/look-"
"gdnative-architecture>`_"

#: ../../docs/about/faq.rst:231
msgid "`GDNative is here! <https://godotengine.org/article/dlscript-here>`_"
msgstr "`GDNative is here! <https://godotengine.org/article/dlscript-here>`_"

#: ../../docs/about/faq.rst:233
msgid ""
"You can also take a look at the GDScript implementation, the Godot modules, "
"as well as the `unofficial Python support <https://github.com/touilleMan/"
"godot-python>`_ for Godot. This would be a good starting point to see how "
"another third-party library integrates with Godot."
msgstr ""
"GDScript 구현, Godot 모듈, Godot를 위한 `비공식 Python 지원 <https://github."
"com/touilleMan/godot-python>`_\\ 을 살펴볼 수도 있습니다. 이것이 Godot가 어떻"
"게 제 3자 라이브러리와 통합하는 지를 보여주는 좋은 출발점이 될 것입니다."

#: ../../docs/about/faq.rst:239
msgid "I would like to contribute! How can I get started?"
msgstr "저도 기여하고 싶어요! 어떻게 시작해야 하나요?"

#: ../../docs/about/faq.rst:241
msgid ""
"Awesome! As an open-source project, Godot thrives off of the innovation and "
"ambition of developers like you."
msgstr ""
"멋집니다! 오픈 소스 프로젝트인 만큼 Godot는 당신같이 혁신적이고 야심 찬 개발"
"자들에 의해 번창합니다."

#: ../../docs/about/faq.rst:244
msgid ""
"The first place to get started is in the `issues <https://github.com/"
"godotengine/godot/issues>`_. Find an issue that resonates with you, then "
"proceed to the `How to Contribute <https://github.com/godotengine/godot/blob/"
"master/CONTRIBUTING.md#contributing-pull-requests>`_ guide to learn how to "
"fork, modify, and submit a Pull Request (PR) with your changes."
msgstr ""
"처음으로 시작해야 할 부분은 `Issues <https://github.com/godotengine/godot/"
"issues>`_\\ 입니다. 당신이 공감하는 이슈를 찾은 다음, `기여하는 방법 "
"<https://github.com/godotengine/godot/blob/master/CONTRIBUTING."
"md#contributing-pull-requests>`_ 가이드를 따라가세요. 변경 사항과 함께 Pull "
"Request (PR)를 포크 요청, 수정 및 제출하는 법을 배울 수 있습니다."

#: ../../docs/about/faq.rst:249
msgid "I have a great idea for Godot. How can I share it?"
msgstr "Godot에 대한 좋은 아이디어가 있습니다. 어떻게 이것을 공유할 수 있나요?"

#: ../../docs/about/faq.rst:251
msgid ""
"It might be tempting to want to bring ideas to Godot, like ones that result "
"in massive core changes, some sort of mimicry of what another game engine "
"does, or alternative workflows that you'd like built into the editor. These "
"are great and we are thankful to have such motivated people want to "
"contribute, but Godot's focus is and always will be the core functionality "
"as outlined in the `Roadmap <https://github.com/godotengine/godot-roadmap/"
"blob/master/ROADMAP.md>`_, `squashing bugs and addressing issues <https://"
"github.com/godotengine/godot/issues>`_, and conversations between Godot "
"community members."
msgstr ""
"Godot로 아이디어를 가져오는 것이, 마치 거대한 핵심 변화를 가져오거나, 다른 종"
"류의 게임 엔진을 흉내 내거나, 편집기에 내장하길 원하는 대체 워크플로가 생기"
"는 것 같아서 매력적일 것입니다. 아이디어는 멋집니다. 그래서 이런 사람들이 "
"Godot에 기여하는 것을 원한다는 사실에 감사하고 있습니다. 하지만 Godot의 초점"
"은 `로드맵 \n"
"<https://github.com/godotengine/godot-roadmap/blob/master/ROADMAP.md>`_\\ 에 "
"요약한 대로 핵심 기능과 `버그를 없애고 이슈를 다루는 것 <https://github.com/"
"godotengine/godot/issues>`_, 그리고 Godot 커뮤니티 회원과의 대화입니다."

#: ../../docs/about/faq.rst:260
msgid ""
"Most developers in the Godot community will be more interested to learn "
"about things like:"
msgstr ""
"Godot 커뮤니티의 개발자 대부분은 이런 것을 배우는 데 더 흥미를 가질 것입니다:"

#: ../../docs/about/faq.rst:263
msgid ""
"Your experience using the software and the problems you have (we care about "
"this much more than ideas on how to improve it)."
msgstr ""
"소프트웨어를 사용한 경험과 문제 (우리는 아이디어보다 이것을 개선하는 일을 더 "
"중요하게 여깁니다)."

#: ../../docs/about/faq.rst:265
msgid ""
"The features you would like to see implemented because you need them for "
"your project."
msgstr "프로젝트에 필요해서 구현하고자 하는 기능."

#: ../../docs/about/faq.rst:267
msgid ""
"The concepts that were difficult to understand while learning the software."
msgstr "소프트웨어를 배우면서 이해하기 어려운 개념."

#: ../../docs/about/faq.rst:268
msgid "The parts of your workflow you would like to see optimized."
msgstr "최적화하고 싶은 워크플로 부분."

#: ../../docs/about/faq.rst:269
msgid ""
"Parts where you missed clear tutorials or where the documentation wasn't "
"clear."
msgstr "깔끔한 튜토리얼이 없거나 깔끔하지 않은 문서 부분."

#: ../../docs/about/faq.rst:271
msgid ""
"Please don't feel like your ideas for Godot are unwelcome. Instead, try to "
"reformulate them as a problem first, so developers and the community have a "
"functional foundation to ground your ideas on."
msgstr ""
"그러니 Godot가 여러분의 생각을 달갑게 여기지 않는다고 생각하진 마세요. 다만 "
"개발자와 커뮤니티가 생각을 바탕으로 기술적 토대를 마련하기 위해, 먼저 문제점 "
"순으로 재구성해주세요."

#: ../../docs/about/faq.rst:275
msgid ""
"A good way to approach sharing your ideas and problems with the community is "
"as a set of user stories. Explain what you are trying to do, what behavior "
"you expect to happen, and then what behavior actually happened. Framing "
"problems and ideas this way will help the whole community stay focused on "
"improving developer experiences as a whole."
msgstr ""
"커뮤니티와 생각과 문제를 공유하는 좋은 방법은 이야기로 서술하는 것입니다. 당"
"신이 무엇을 하려 했고, 어떤 일을 예상했는데, 그 뒤 실제로는 어떤 일이 일어났"
"는 지를 설명하세요. 이 방법으로 문제와 생각을 정리하면 전체 커뮤니티가 개발"
"자 경험을 개선하는데 집중할 수 있습니다."

#: ../../docs/about/faq.rst:281
msgid ""
"Bonus points for bringing screenshots, concrete numbers, test cases, or "
"example projects (if applicable)."
msgstr ""
"스크린샷이나, 구체적인 값, 실험 사례, (가능하다면) 예제 프로젝트를 가져오면 "
"추가 점수가 될 것입니다."

#: ../../docs/about/faq.rst:286
msgid "Why does Godot not use STL (Standard Template Library)"
msgstr "Godot가 STL (표준 템플릿 라이브러리)을 사용하지 않는 이유"

#: ../../docs/about/faq.rst:288
msgid ""
"Like many other libraries (Qt as an example), Godot does not make use of "
"STL. We believe STL is a great general purpose library, but we had special "
"requirements for Godot."
msgstr ""
"(Qt와 같은) 많은 다른 라이브러리처럼 Godot는 STL을 사용하지 않습니다. 우리는 "
"STL이 훌륭한 범용 라이브러리라고 생각하지만, Godot에게는 특별한 요구 사항이 "
"있었습니다."

#: ../../docs/about/faq.rst:292
msgid ""
"STL templates create very large symbols, which results in huge debug "
"binaries. We use few templates with very short names instead."
msgstr ""
"STL 템플릿은 매우 큰 심볼들을 만들고, 그것은 거대한 디버그 바이너리를 초래합"
"니다. 우리는 대신 매우 짧은 이름의 템플릿을 거의 사용하지 않습니다."

#: ../../docs/about/faq.rst:293
msgid ""
"Most of our containers cater to special needs, like Vector, which uses copy "
"on write and we use to pass data around, or the RID system, which requires "
"O(1) access time for performance. Likewise, our hash map implementations are "
"designed to integrate seamlessly with internal engine types."
msgstr ""
"우리의 컨테이너 대부분은 이런 특수 목적에 맞춰졌습니다, Vector의 경우는, 가"
"상 메모리 쓰기 시 복사 (copy on write)를 사용하고 데이터를 전달하는데 사용합"
"니다, RID 시스템의 경우, 성능을 위해 O(1) 접근 시간이 필요합니다. 마찬가지로 "
"해시 맵 구현은 내부 엔진 유형과 부드럽게 통합하도록 설계되었습니다."

#: ../../docs/about/faq.rst:294
msgid ""
"Our containers have memory tracking built-in, which helps better track "
"memory usage."
msgstr ""
"컨테이너는 메모리 추적 기능이 내장되어 있어서, 메모리 사용량을 추적하는데 더 "
"도움이 됩니다."

#: ../../docs/about/faq.rst:295
msgid ""
"For large arrays, we use pooled memory, which can be mapped to either a "
"preallocated buffer or virtual memory."
msgstr ""
"큰 배열의 경우, 풀(Pool)로 된 메모리를 사용합니다, 사전에 지정된 버퍼 메모리 "
"혹은 가상 메모리에 매핑될 수 있습니다."

#: ../../docs/about/faq.rst:296
msgid ""
"We use our custom String type, as the one provided by STL is too basic and "
"lacks proper internationalization support."
msgstr ""
"STL에서 제공하는 문자열 유형은 너무 단순하고 현지화 지원 기능이 부족해서 맞"
"춤 문자열 유형을 사용합니다."

#: ../../docs/about/faq.rst:299
msgid "Why does Godot not use exceptions?"
msgstr "왜 Godot는 예외(Exception)를 사용하지 않나요?"

#: ../../docs/about/faq.rst:301
msgid ""
"We believe games should not crash, no matter what. If an unexpected "
"situation happens, Godot will print an error (which can be traced even to "
"script), but then it will try to recover as gracefully as possible and keep "
"going."
msgstr ""
"우리는 게임이 무엇이든 간에 충돌하지 않아야 한다고 생각합니다. 예기치 못한 사"
"태가 벌어지면, Godot는 오류를 작성합니다 (스크립트에서도 추적할 수 있습니"
"다), 그런 다음 가능한 한 정상적으로 복구한 후 계속 진행합니다."

#: ../../docs/about/faq.rst:306
msgid ""
"Additionally, exceptions significantly increase binary size for the "
"executable."
msgstr "또한 예외는 실행 파일에서 이진 크기를 상당히 늘립니다."

#: ../../docs/about/faq.rst:310
msgid "Why does Godot not enforce RTTI?"
msgstr "왜 Godot는 런타임 유형 정보(RTTI)를 시행하지 않나요?"

#: ../../docs/about/faq.rst:312
msgid ""
"Godot provides its own type-casting system, which can optionally use RTTI "
"internally. Disabling RTTI in Godot means considerably smaller binary sizes "
"can be achieved, at a little performance cost."
msgstr ""
"Godot는 자체 유형 캐스팅 시스템을 제공하는데, 내부적으로 런타임 유형 정보를 "
"사용할 수 있습니다. Godot에서 런타임 유형 정보를 끄게 되면 약간의 성능 가격으"
"로 상당히 작은 이진 크기를 얻을 수 있습니다."

#: ../../docs/about/faq.rst:317
msgid "Why does Godot not force users to implement DoD (Data oriented Design)?"
msgstr "왜 Godot는 사용자에게 DoD(데이터 지향 디자인) 구현을 강요하지 않나요?"

#: ../../docs/about/faq.rst:319
msgid ""
"While Godot internally for a lot of the heavy performance tasks attempts to "
"use cache coherency as best as possible, we believe most users don't really "
"need to be forced to use DoD practices."
msgstr ""
"더 높은 성능 처리를 위해 Godot는 내부적으로 가능한 한 최선의 캐시 일관성을 사"
"용하려 하지만, 우리는 대부분의 사용자가 DoD 관행을 따라야 할 필요가 없다고 생"
"각합니다."

#: ../../docs/about/faq.rst:323
msgid ""
"DoD is mostly a cache coherency optimization that can only gain you "
"significant performance improvements when dealing with dozens of thousands "
"of objects (which are processed every frame with little modification). As "
"in, if you are moving a few hundred sprites or enemies per frame, DoD won't "
"help you, and you should consider a different approach to optimization."
msgstr ""
"DoD는 대개 캐시 일관성 최적화를 뜻하며, 이는 즉 수 만 개의 객체가 있는 경우에"
"만 (그리고 객체가 모든 프레임에서 수정이 거의 없이 처리되는 경우에만) 상당한 "
"성능 향상을 볼 수 있습니다. 만약 프레임마다 수 백 개의 스프라이트나 적을 이동"
"한다 하면, DoD는 도움이 되지 않습니다, 당신은 최적화에 있어서 다른 접근법을 "
"생각해 봐야 하는 것이죠."

#: ../../docs/about/faq.rst:330
msgid ""
"The vast majority of games do not need this and Godot provides handy helpers "
"to do the job for most cases when you do."
msgstr ""
"대부분의 게임에는 필요하지 않을 테지만, Godot는 이런 작업의 대부분의 경우에 "
"도움을 줄 편리한 도우미를 제공합니다."

#: ../../docs/about/faq.rst:333
msgid ""
"If a game that really needs to process such large amount of objects is "
"needed, our recommendation is to use C++ and GDNative for the high "
"performance parts and GDScript (or C#) for the rest of the game."
msgstr ""
"게임이 정말로 많은 양의 객체를 처리해야 한다면, 우리의 추천은 높은 성능이 필"
"요한 부분은 C++과 GDNative 사용하고, 그 외 나머지 부분은 GDScript (혹은 C#)"
"을 사용하는 것입니다."

#: ../../docs/about/faq.rst:338
msgid "How can I support Godot development or contribute?"
msgstr "어떻게 Godot 개발을 돕거나 후원할 수 있나요?"

#: ../../docs/about/faq.rst:340
msgid "See :ref:`doc_ways_to_contribute`."
msgstr ":ref:`doc_ways_to_contribute`\\ 를 참고하세요."

#: ../../docs/about/faq.rst:343
msgid "Who is working on Godot? How can I contact you?"
msgstr "Godot는 누가 만드나요? 제가 연락할 수 있을까요?"

#: ../../docs/about/faq.rst:345
msgid ""
"See the corresponding page on the `Godot website <https://godotengine.org/"
"contact>`_."
msgstr ""
"`Godot 웹사이트 <https://godotengine.org/contact>`_\\ 에서 해당 페이지를 참고"
"하세요."

#: ../../docs/about/docs_changelog.rst:4
msgid "Documentation changelog"
msgstr "문서 변경 내역"

#: ../../docs/about/docs_changelog.rst:6
msgid ""
"The documentation is continually being improved. The release of version 3.1 "
"includes many new tutorials, many fixes and updates for old tutorials, and "
"many updates to the class reference. Below is a list of new tutorials added "
"since version 3.0."
msgstr ""
"문서는 지속적으로 개선되고 있습니다. 3.1 버전 출시에는 많은 새로운 튜토리얼, "
"과거 튜토리얼에서 개선된 사항들, 그리고 많은 클래스 참조에 대한 업데이트가 있"
"습니다. 다음은 3.0 버전에서 추가된 새 튜토리얼 목록입니다."

#: ../../docs/about/docs_changelog.rst:10
msgid ""
"This document only contains new tutorials so not all changes are reflected, "
"many tutorials have been substantially updated but are not reflected in this "
"document."
msgstr ""
"이 문서에는 새로운 튜토리얼만 포함되어 있기 때문에 변경사항이 반영되지 않습니"
"다, 많은 튜토리얼이 업데이트되지만 이 문서에는 반영되지 않습니다."

#: ../../docs/about/docs_changelog.rst:14
msgid "New tutorials since version 3.1"
msgstr "3.1 버전 이후의 새로운 튜토리얼"

#: ../../docs/about/docs_changelog.rst:17
#: ../../docs/about/docs_changelog.rst:116
#: ../../docs/getting_started/workflow/index.rst:2
msgid "Project workflow"
msgstr "프로젝트 워크플로"

#: ../../docs/about/docs_changelog.rst:19
msgid ":ref:`doc_android_custom_build`"
msgstr ":ref:`doc_android_custom_build`"

#: ../../docs/about/docs_changelog.rst:22
#: ../../docs/about/docs_changelog.rst:132 ../../docs/tutorials/2d/index.rst:2
msgid "2D"
msgstr "2D"

#: ../../docs/about/docs_changelog.rst:24
msgid ":ref:`doc_2d_sprite_animation`"
msgstr ":ref:`doc_2d_sprite_animation`"

#: ../../docs/about/docs_changelog.rst:27
#: ../../docs/tutorials/audio/index.rst:2
msgid "Audio"
msgstr "오디오"

#: ../../docs/about/docs_changelog.rst:29
msgid ":ref:`doc_sync_with_audio`"
msgstr ":ref:`doc_sync_with_audio`"

#: ../../docs/about/docs_changelog.rst:32 ../../docs/tutorials/math/index.rst:2
msgid "Math"
msgstr "수학(Math)"

#: ../../docs/about/docs_changelog.rst:34
msgid ":ref:`doc_beziers_and_curves`"
msgstr ":ref:`doc_beziers_and_curves`"

#: ../../docs/about/docs_changelog.rst:35
msgid ":ref:`doc_interpolation`"
msgstr ":ref:`doc_interpolation`"

#: ../../docs/about/docs_changelog.rst:38
#: ../../docs/tutorials/inputs/index.rst:2
msgid "Inputs"
msgstr "입력(Input)"

#: ../../docs/about/docs_changelog.rst:40
msgid ":ref:`doc_input_examples`"
msgstr ":ref:`doc_input_examples`"

#: ../../docs/about/docs_changelog.rst:43 ../../docs/tutorials/i18n/index.rst:2
msgid "Internationalization"
msgstr "현지화(Internationalization)"

#: ../../docs/about/docs_changelog.rst:45
msgid ":ref:`doc_localization_using_gettext`"
msgstr ":ref:`doc_localization_using_gettext`"

#: ../../docs/about/docs_changelog.rst:48
#: ../../docs/about/docs_changelog.rst:168
#: ../../docs/tutorials/shading/index.rst:2
msgid "Shading"
msgstr "셰이딩(Shading)"

#: ../../docs/about/docs_changelog.rst:50
msgid "Your First Shader Series:"
msgstr "당신의 첫 셰이더 시리즈:"

#: ../../docs/about/docs_changelog.rst:52
msgid ":ref:`doc_what_are_shaders`"
msgstr ":ref:`doc_what_are_shaders`"

#: ../../docs/about/docs_changelog.rst:53
msgid ":ref:`doc_your_first_canvasitem_shader`"
msgstr ":ref:`doc_your_first_canvasitem_shader`"

#: ../../docs/about/docs_changelog.rst:54
msgid ":ref:`doc_your_first_spatial_shader`"
msgstr ":ref:`doc_your_first_spatial_shader`"

#: ../../docs/about/docs_changelog.rst:55
msgid ":ref:`doc_your_second_spatial_shader`"
msgstr ":ref:`doc_your_second_spatial_shader`"

#: ../../docs/about/docs_changelog.rst:58
#: ../../docs/tutorials/networking/index.rst:2
msgid "Networking"
msgstr "네트워킹(Networking)"

#: ../../docs/about/docs_changelog.rst:60
msgid ":ref:`doc_webrtc`"
msgstr ":ref:`doc_webrtc`"

#: ../../docs/about/docs_changelog.rst:63 ../../docs/tutorials/vr/index.rst:2
msgid "VR"
msgstr "VR"

#: ../../docs/about/docs_changelog.rst:65
msgid ":ref:`doc_vr_starter_tutorial_part_one`"
msgstr ":ref:`doc_vr_starter_tutorial_part_one`"

#: ../../docs/about/docs_changelog.rst:66
msgid ":ref:`doc_vr_starter_tutorial_part_two`"
msgstr ":ref:`doc_vr_starter_tutorial_part_two`"

#: ../../docs/about/docs_changelog.rst:69
#: ../../docs/about/docs_changelog.rst:183
#: ../../docs/tutorials/plugins/index.rst:2
msgid "Plugins"
msgstr "플러그인(Plugin)"

#: ../../docs/about/docs_changelog.rst:71
msgid ":ref:`doc_android_plugin`"
msgstr ":ref:`doc_android_plugin`"

#: ../../docs/about/docs_changelog.rst:72
msgid ":ref:`doc_inspector_plugins`"
msgstr ":ref:`doc_inspector_plugins`"

#: ../../docs/about/docs_changelog.rst:73
msgid ":ref:`doc_visual_shader_plugins`"
msgstr ":ref:`doc_visual_shader_plugins`"

#: ../../docs/about/docs_changelog.rst:76
#: ../../docs/about/docs_changelog.rst:194
#: ../../docs/tutorials/threads/index.rst:2
msgid "Multi-threading"
msgstr "멀티 스레딩(Multi-threading)"

#: ../../docs/about/docs_changelog.rst:78
msgid ":ref:`doc_using_multiple_threads`"
msgstr ":ref:`doc_using_multiple_threads`"

#: ../../docs/about/docs_changelog.rst:81
#: ../../docs/about/docs_changelog.rst:199
#: ../../docs/tutorials/content/index.rst:2
msgid "Creating content"
msgstr "내용물 만들기(Creating content)"

#: ../../docs/about/docs_changelog.rst:88
msgid "Procedural geometry series:"
msgstr "절차적 형상 시리즈:"

#: ../../docs/about/docs_changelog.rst:84
msgid ":ref:`Procedural geometry <toc-procedural_geometry>`"
msgstr ":ref:`Procedural geometry <toc-procedural_geometry>`"

#: ../../docs/about/docs_changelog.rst:85
msgid ":ref:`doc_arraymesh`"
msgstr ":ref:`doc_arraymesh`"

#: ../../docs/about/docs_changelog.rst:86
msgid ":ref:`doc_surfacetool`"
msgstr ":ref:`doc_surfacetool`"

#: ../../docs/about/docs_changelog.rst:87
msgid ":ref:`doc_meshdatatool`"
msgstr ":ref:`doc_meshdatatool`"

#: ../../docs/about/docs_changelog.rst:88
msgid ":ref:`doc_immediategeometry`"
msgstr ":ref:`doc_immediategeometry`"

#: ../../docs/about/docs_changelog.rst:91
#: ../../docs/tutorials/optimization/index.rst:2
msgid "Optimization"
msgstr "최적화(Optimization)"

#: ../../docs/about/docs_changelog.rst:93
msgid ":ref:`doc_using_multimesh`"
msgstr ":ref:`doc_using_multimesh`"

#: ../../docs/about/docs_changelog.rst:94
msgid ":ref:`doc_using_servers`"
msgstr ":ref:`doc_using_servers`"

#: ../../docs/about/docs_changelog.rst:97
#: ../../docs/tutorials/legal/index.rst:2
msgid "Legal"
msgstr "법률(Legal)"

#: ../../docs/about/docs_changelog.rst:99
msgid ":ref:`doc_complying_with_licenses`"
msgstr ":ref:`doc_complying_with_licenses`"

#: ../../docs/about/docs_changelog.rst:102
msgid "New tutorials since version 3.0"
msgstr "3.0 버전 이후 새로운 튜토리얼"

#: ../../docs/about/docs_changelog.rst:105
#: ../../docs/getting_started/step_by_step/index.rst:2
#: ../../docs/tutorials/2d/2d_lights_and_shadows.rst:108
#: ../../docs/development/compiling/compiling_with_script_encryption_key.rst:18
msgid "Step by step"
msgstr "단계별"

#: ../../docs/about/docs_changelog.rst:107
msgid ":ref:`doc_signals`"
msgstr ":ref:`doc_signals`"

#: ../../docs/about/docs_changelog.rst:108
msgid ":ref:`doc_exporting`"
msgstr ":ref:`doc_exporting`"

#: ../../docs/about/docs_changelog.rst:111
#: ../../docs/getting_started/step_by_step/scripting.rst:4
#: ../../docs/getting_started/scripting/index.rst:2
#: ../../docs/tutorials/networking/http_request_class.rst:22
msgid "Scripting"
msgstr "스크립팅(Scripting)"

#: ../../docs/about/docs_changelog.rst:113
msgid ":ref:`doc_gdscript_static_typing`"
msgstr ":ref:`doc_gdscript_static_typing`"

#: ../../docs/about/docs_changelog.rst:118
msgid "Best Practices:"
msgstr "모범 사례:"

#: ../../docs/about/docs_changelog.rst:120
msgid ":ref:`doc_introduction_best_practices`"
msgstr ":ref:`doc_introduction_best_practices`"

#: ../../docs/about/docs_changelog.rst:121
msgid ":ref:`doc_what_are_godot_classes`"
msgstr ":ref:`doc_what_are_godot_classes`"

#: ../../docs/about/docs_changelog.rst:122
msgid ":ref:`doc_scene_organization`"
msgstr ":ref:`doc_scene_organization`"

#: ../../docs/about/docs_changelog.rst:123
msgid ":ref:`doc_scenes_versus_scripts`"
msgstr ":ref:`doc_scenes_versus_scripts`"

#: ../../docs/about/docs_changelog.rst:124
msgid ":ref:`doc_autoloads_versus_internal_nodes`"
msgstr ":ref:`doc_autoloads_versus_internal_nodes`"

#: ../../docs/about/docs_changelog.rst:125
msgid ":ref:`doc_node_alternatives`"
msgstr ":ref:`doc_node_alternatives`"

#: ../../docs/about/docs_changelog.rst:126
msgid ":ref:`doc_godot_interfaces`"
msgstr ":ref:`doc_godot_interfaces`"

#: ../../docs/about/docs_changelog.rst:127
msgid ":ref:`doc_godot_notifications`"
msgstr ":ref:`doc_godot_notifications`"

#: ../../docs/about/docs_changelog.rst:128
msgid ":ref:`doc_data_preferences`"
msgstr ":ref:`doc_data_preferences`"

#: ../../docs/about/docs_changelog.rst:129
msgid ":ref:`doc_logic_preferences`"
msgstr ":ref:`doc_logic_preferences`"

#: ../../docs/about/docs_changelog.rst:134
msgid ":ref:`doc_2d_lights_and_shadows`"
msgstr ":ref:`doc_2d_lights_and_shadows`"

#: ../../docs/about/docs_changelog.rst:135
msgid ":ref:`doc_2d_meshes`"
msgstr ":ref:`doc_2d_meshes`"

#: ../../docs/about/docs_changelog.rst:138 ../../docs/tutorials/3d/index.rst:2
msgid "3D"
msgstr "3D"

#: ../../docs/about/docs_changelog.rst:140
msgid ":ref:`doc_csg_tools`"
msgstr ":ref:`doc_csg_tools`"

#: ../../docs/about/docs_changelog.rst:141
msgid ":ref:`doc_animating_thousands_of_fish`"
msgstr ":ref:`doc_animating_thousands_of_fish`"

#: ../../docs/about/docs_changelog.rst:142
msgid ":ref:`doc_controlling_thousands_of_fish`"
msgstr ":ref:`doc_controlling_thousands_of_fish`"

#: ../../docs/about/docs_changelog.rst:145
#: ../../docs/tutorials/physics/index.rst:2
msgid "Physics"
msgstr "물리(Physics)"

#: ../../docs/about/docs_changelog.rst:147
msgid ":ref:`doc_ragdoll_system`"
msgstr ":ref:`doc_ragdoll_system`"

#: ../../docs/about/docs_changelog.rst:148
msgid ":ref:`doc_soft_body`"
msgstr ":ref:`doc_soft_body`"

#: ../../docs/about/docs_changelog.rst:151
#: ../../docs/getting_started/workflow/assets/escn_exporter/animation.rst:2
#: ../../docs/tutorials/animation/index.rst:2
#: ../../docs/development/file_formats/tscn.rst:375
msgid "Animation"
msgstr "애니메이션(Animation)"

#: ../../docs/about/docs_changelog.rst:153
msgid ":ref:`doc_2d_skeletons`"
msgstr ":ref:`doc_2d_skeletons`"

#: ../../docs/about/docs_changelog.rst:154
msgid ":ref:`doc_animation_tree`"
msgstr ":ref:`doc_animation_tree`"

#: ../../docs/about/docs_changelog.rst:157 ../../docs/tutorials/gui/index.rst:2
msgid "GUI"
msgstr "GUI"

#: ../../docs/about/docs_changelog.rst:159
msgid ":ref:`doc_gui_containers`"
msgstr ":ref:`doc_gui_containers`"

#: ../../docs/about/docs_changelog.rst:162
#: ../../docs/tutorials/viewports/index.rst:2
#: ../../docs/tutorials/viewports/viewports.rst:4
msgid "Viewports"
msgstr "뷰포트(Viewport)"

#: ../../docs/about/docs_changelog.rst:164
msgid ":ref:`doc_viewport_as_texture`"
msgstr ":ref:`doc_viewport_as_texture`"

#: ../../docs/about/docs_changelog.rst:165
msgid ":ref:`doc_custom_postprocessing`"
msgstr ":ref:`doc_custom_postprocessing`"

#: ../../docs/about/docs_changelog.rst:170
msgid ":ref:`doc_intro_to_shaders_water_workshop`"
msgstr ":ref:`doc_intro_to_shaders_water_workshop`"

#: ../../docs/about/docs_changelog.rst:171
msgid ":ref:`doc_migrating_to_godot_shader_language`"
msgstr ":ref:`doc_migrating_to_godot_shader_language`"

#: ../../docs/about/docs_changelog.rst:172
msgid ":ref:`doc_advanced_postprocessing`"
msgstr ":ref:`doc_advanced_postprocessing`"

#: ../../docs/about/docs_changelog.rst:174
msgid "Shading Reference:"
msgstr "셰이딩 참조:"

#: ../../docs/about/docs_changelog.rst:176
msgid ":ref:`doc_shaders`"
msgstr ":ref:`doc_shaders`"

#: ../../docs/about/docs_changelog.rst:177
msgid ":ref:`doc_shading_language`"
msgstr ":ref:`doc_shading_language`"

#: ../../docs/about/docs_changelog.rst:178
msgid ":ref:`doc_spatial_shader`"
msgstr ":ref:`doc_spatial_shader`"

#: ../../docs/about/docs_changelog.rst:179
msgid ":ref:`doc_canvas_item_shader`"
msgstr ":ref:`doc_canvas_item_shader`"

#: ../../docs/about/docs_changelog.rst:180
msgid ":ref:`doc_particle_shader`"
msgstr ":ref:`doc_particle_shader`"

#: ../../docs/about/docs_changelog.rst:185
msgid ":ref:`doc_making_main_screen_plugins`"
msgstr ":ref:`doc_making_main_screen_plugins`"

#: ../../docs/about/docs_changelog.rst:186
msgid ":ref:`doc_spatial_gizmo_plugins`"
msgstr ":ref:`doc_spatial_gizmo_plugins`"

#: ../../docs/about/docs_changelog.rst:189
#: ../../docs/tutorials/platform/index.rst:2
msgid "Platform-specific"
msgstr "플랫폼 특화(Platform-specific)"

#: ../../docs/about/docs_changelog.rst:191
msgid ":ref:`doc_customizing_html5_shell`"
msgstr ":ref:`doc_customizing_html5_shell`"

#: ../../docs/about/docs_changelog.rst:196
msgid ":ref:`doc_thread_safe_apis`"
msgstr ":ref:`doc_thread_safe_apis`"

#: ../../docs/about/docs_changelog.rst:201
msgid ":ref:`doc_making_trees`"
msgstr ":ref:`doc_making_trees`"

#: ../../docs/about/docs_changelog.rst:204
#: ../../docs/tutorials/misc/index.rst:2
msgid "Miscellaneous"
msgstr "기타(Miscellaneous)"

#: ../../docs/about/docs_changelog.rst:206
msgid ":ref:`doc_jitter_stutter`"
msgstr ":ref:`doc_jitter_stutter`"

#: ../../docs/about/docs_changelog.rst:207
msgid ":ref:`doc_running_code_in_the_editor`"
msgstr ":ref:`doc_running_code_in_the_editor`"

#: ../../docs/about/docs_changelog.rst:208
msgid ":ref:`doc_change_scenes_manually`"
msgstr ":ref:`doc_change_scenes_manually`"

#: ../../docs/about/docs_changelog.rst:209
msgid ":ref:`doc_gles2_gles3_differences`"
msgstr ":ref:`doc_gles2_gles3_differences`"

#: ../../docs/about/docs_changelog.rst:212
#: ../../docs/tutorials/plugins/gdnative/gdnative-c-example.rst:349
#: ../../docs/development/compiling/index.rst:2
#: ../../docs/development/compiling/compiling_for_windows.rst:85
#: ../../docs/development/compiling/compiling_for_x11.rst:85
#: ../../docs/development/compiling/compiling_for_osx.rst:31
#: ../../docs/development/compiling/compiling_for_ios.rst:19
#: ../../docs/development/compiling/compiling_for_uwp.rst:33
msgid "Compiling"
msgstr "컴파일링(Compiling)"

#: ../../docs/about/docs_changelog.rst:214
msgid ":ref:`doc_optimizing_for_size`"
msgstr ":ref:`doc_optimizing_for_size`"

#: ../../docs/about/docs_changelog.rst:215
msgid ":ref:`doc_compiling_with_script_encryption_key`"
msgstr ":ref:`doc_compiling_with_script_encryption_key`"

#: ../../docs/about/docs_changelog.rst:218
#: ../../docs/development/cpp/index.rst:2
msgid "Engine development"
msgstr "엔진 개발(Engine development)"

#: ../../docs/about/docs_changelog.rst:220
msgid ":ref:`doc_binding_to_external_libraries`"
msgstr ":ref:`doc_binding_to_external_libraries`"

#: ../../docs/getting_started/step_by_step/intro_to_the_editor_interface.rst:4
msgid "Introduction to Godot’s editor"
msgstr "Godot 편집기 소개"

#: ../../docs/getting_started/step_by_step/intro_to_the_editor_interface.rst:6
msgid ""
"This tutorial will run you through Godot’s interface. We’re going to look at "
"the **Project Manager, docks, workspaces** and everything you need to know "
"to get started with the engine."
msgstr ""
"이 튜토리얼에서는 Godot의 인터페이스에 대하여 알아봅니다. 먼저 **프로젝트 매"
"니저, 독, 작업 공간**\\ 을 알아보고, 그 후 엔진을 시작하려면 알아야 할 것들"
"을 알아봅니다."

#: ../../docs/getting_started/step_by_step/intro_to_the_editor_interface.rst:11
msgid "Project manager"
msgstr "프로젝트 매니저(Project Manager)"

#: ../../docs/getting_started/step_by_step/intro_to_the_editor_interface.rst:13
msgid ""
"When you launch Godot, the first window you’ll see is the Project Manager. "
"Since you have no projects there will be a popup asking if you want to open "
"the asset library, just click cancel, we'll look at it later."
msgstr ""
"Godot를 실행하면, 처음으로 나오는 창이 프로젝트 매니저(Project Manager)입니"
"다. 아직 프로젝트가 하나도 없기 때문에 애셋 라이브러리(Asset Library)를 여는 "
"팝업 창이 나올 것입니다. 취소를 누르세요. 애셋 라이브러리는 다음에 알아보죠."

#: ../../docs/getting_started/step_by_step/intro_to_the_editor_interface.rst:19
msgid ""
"Now you should see the project manager. It lets you create, remove, import "
"or play game projects."
msgstr ""
"이제 진짜 프로젝트 매니저를 볼 수 있습니다. 여기서 게임 프로젝트를 만들고, 삭"
"제하고, 가져오고, 실행할 수 있습니다."

#: ../../docs/getting_started/step_by_step/intro_to_the_editor_interface.rst:24
msgid ""
"In the top-right corner you’ll find a drop-down menu to change the editor’s "
"language."
msgstr "오른쪽 위에는 편집기의 언어를 바꿀 수 있는 드롭 다운 메뉴가 있습니다."

#: ../../docs/getting_started/step_by_step/intro_to_the_editor_interface.rst:29
msgid ""
"From the **Templates** tab you can download open source project templates "
"and demos from the Asset Library to help you get started faster. Just select "
"the template or demo you want, click download, once it's finished "
"downloading click install and choose where you want the project to go. You "
"can learn more about it in :ref:`doc_what_is_assetlib`."
msgstr ""
"**템플릿(Templates)** 탭에는 애셋 라이브러리에서 가져온 오픈 소스 프로젝트 템"
"플릿과 데모를 다운로드해서 더 빠르게 작업을 시작할 수 있습니다. 간단히 원하"
"는 템플릿이나 데모를 선택하고 다운로드(Download)를 클릭하세요. 다운로드가 끝"
"났으면 설치하기(Install)를 클릭하고 프로젝트를 설치할 위치를 정하세요. 자세"
"한 설명은 :ref:`doc_what_is_assetlib`\\ 를 참고하세요."

#: ../../docs/getting_started/step_by_step/intro_to_the_editor_interface.rst:38
msgid "Create or import a project"
msgstr "프로젝트를 만들거나 가져오기"

#: ../../docs/getting_started/step_by_step/intro_to_the_editor_interface.rst:40
msgid ""
"To create a new project, click the ``New Project`` button on the right. Here "
"you give it a name, choose an empty folder on your computer to save it to, "
"and choose a renderer."
msgstr ""
"새 프로젝트를 만들려면, 오른쪽의 ``새 프로젝트(New Project)`` 버튼을 클릭하세"
"요. 이제 프로젝트 이름을 짓고, 프로젝트를 저장할 빈 폴더를 선택하세요. 그런 "
"다음 렌더러를 선택하세요."

#: ../../docs/getting_started/step_by_step/intro_to_the_editor_interface.rst:46
msgid ""
"Click the Browse button to open Godot’s file browser and pick a location or "
"type the folder’s path in the Project Path field."
msgstr ""
"찾아보기(Browse) 버튼을 눌러서 Godot 파일 브라우저를 열어서 위치를 지정하거"
"나, 프로젝트 경로 영역에 폴더의 경로를 입력하세요."

#: ../../docs/getting_started/step_by_step/intro_to_the_editor_interface.rst:51
msgid ""
"When you see the green tick on the right, it means the engine detects an "
"empty folder. You can also click the ``Create Folder`` button next to your "
"project name and an empty folder will be created with that name for the "
"project."
msgstr ""
"오른쪽에 초록불이 들어오면, 엔진이 빈 폴더를 감지했다는 것입니다. 아니면 프로"
"젝트 이름 옆의 ``폴더 만들기(Create Folder)`` 버튼을 클릭해서, 프로젝트 이름"
"으로 된 빈 폴더를 만들 수 있습니다."

#: ../../docs/getting_started/step_by_step/intro_to_the_editor_interface.rst:55
msgid ""
"Finally, you need to choose which renderer to use (OpenGL ES 3.0 or OpenGL "
"ES 2.0). The advantages and disadvantages of each are listed to help you "
"choose, and you can refer to :ref:`doc_gles2_gles3_differences` for more "
"details. Note that you can change the backend from the project settings if "
"you change your mind later on. For this tutorial either backend is fine."
msgstr ""
"마지막으로 사용할 렌더러를 선택해야 합니다 (OpenGL ES 3.0 아니면 OpenGL ES "
"2.0). 선택하기 쉽게 각자 장단점이 쓰여 있습니다. 그리고 자세한 설명은 :ref:"
"`doc_gles2_gles3_differences`\\ 를 참고하면 됩니다. 마음이 바뀐다면 프로젝트 "
"설정에서 백엔드를 바꿀 수 있습니다. 이 튜토리얼에서는 두 백엔드 모두 괜찮습니"
"다."

#: ../../docs/getting_started/step_by_step/intro_to_the_editor_interface.rst:61
msgid ""
"Once you are done click ``Create & Edit``. Godot will create the project for "
"you and open it in the editor."
msgstr ""
"모든 작업이 끝났으면 ``만들기 & 편집하기(Create & Edit)``\\ 를 클릭하세요. "
"Godot는 프로젝트를 만들고 편집기에 프로젝트를 열어 줍니다."

#: ../../docs/getting_started/step_by_step/intro_to_the_editor_interface.rst:64
msgid ""
"The next time you open the project manager, you’ll see your new project in "
"the list. Double click on it to open it in the editor."
msgstr ""
"다음에 프로젝트 매니저를 열게 되면, 새 프로젝트가 목록에 있는 것을 볼 수 있습"
"니다. 편집기에 프로젝트를 열려면 더블클릭하세요."

#: ../../docs/getting_started/step_by_step/intro_to_the_editor_interface.rst:69
msgid ""
"You can import existing projects in a similar way, using the Import button. "
"Locate the folder that contains the project or the ``project.godot`` file to "
"import and edit it."
msgstr ""
"이와 비슷하게, 가져오기(Import) 버튼으로도 존재하는 프로젝트를 가져올 수 있습"
"니다. 프로젝트나 ``project.godot`` 파일이 들어있는 폴더 위치를 지정하면 가져"
"오고 편집합니다."

#: ../../docs/getting_started/step_by_step/intro_to_the_editor_interface.rst:75
msgid "When the folder path is correct, you'll see a green checkmark."
msgstr "폴더 경로가 올바르다면 초록색 체크 표시가 나타납니다."

#: ../../docs/getting_started/step_by_step/intro_to_the_editor_interface.rst:80
msgid "Your first look at Godot’s editor"
msgstr "Godot 편집기와의 첫 만남"

#: ../../docs/getting_started/step_by_step/intro_to_the_editor_interface.rst:82
#, fuzzy
msgid ""
"Welcome to Godot! With your project open, you should see the editor’s "
"interface with menus along the top of the interface and docks along the far "
"extremes of the interface on either side of the viewport."
msgstr ""
"Godot에 온 것을 환영합니다! 프로젝트를 열어 본다면 3D 뷰포트로 되어있는 편집"
"기의 인터페이스를 보고 있겠군요. 인터페이스 상단에서 현재 작업 공간을 바꿀 "
"수 있습니다. 2D를 클릭해서 2D 작업 공간으로 바꾸세요."

#: ../../docs/getting_started/step_by_step/intro_to_the_editor_interface.rst:88
msgid ""
"At the top, from left to right, you can see the **main menus**, the "
"**workspaces**, and the **playtest buttons**."
msgstr ""
"맨 위에 있는 메뉴들은 왼쪽부터 **기본 메뉴(Main Menus)**, **작업 공간"
"(Workspaces)**, **실행 및 테스트 버튼(Playtest buttons)**\\ 입니다."

#: ../../docs/getting_started/step_by_step/intro_to_the_editor_interface.rst:91
#, fuzzy
msgid ""
"The **FileSystem dock** is where you’ll manage your project files and assets."
msgstr ""
"왼쪽 아래에는 **파일 시스템 독(FileSystem dock)**\\ 이 있습니다. 여기서 프로"
"젝트 파일과 애셋을 관리합니다."

#: ../../docs/getting_started/step_by_step/intro_to_the_editor_interface.rst:95
#, fuzzy
msgid ""
"The **Scene dock** lists the active scene’s content and the **Inspector** "
"allows for the management of the properties of a scene's content."
msgstr ""
"오른쪽에는 현재 씬의 내용을 나열해 놓은 **씬 독(Scene dock)**\\ 과, 그 아래"
"에 있는 **인스펙터(Inspector)**\\ 를 확인할 수 있습니다."

#: ../../docs/getting_started/step_by_step/intro_to_the_editor_interface.rst:100
msgid ""
"In the center, you have the **Toolbar** at the top, where you’ll find tools "
"to move, scale or lock your scene’s objects. It changes as you jump to "
"different workspaces."
msgstr ""
"가운데 바로 위에는 이동, 크기 조절, 씬 객체 잠금을 할 수 있는 **툴바"
"(Toolbar)**\\ 가 있습니다. 툴바는 작업 공간마다 달라집니다."

#: ../../docs/getting_started/step_by_step/intro_to_the_editor_interface.rst:106
msgid ""
"The **Bottom Panel** is the host for the debug console, the animation "
"editor, the audio mixer… They are wide and can take precious space. That’s "
"why they’re folded by default."
msgstr ""
"**하단 패널(Bottom Panel)**\\ 은 디버그 콘솔이나 애니메이션 편집, 오디오 믹"
"서 등이 있고... 그렇다 보니 많은 공간을 차지합니다. 때문에 기본적으로 닫혀 있"
"는 상태입니다."

#: ../../docs/getting_started/step_by_step/intro_to_the_editor_interface.rst:113
msgid "The workspaces"
msgstr "작업 공간(Workspace)"

#: ../../docs/getting_started/step_by_step/intro_to_the_editor_interface.rst:115
msgid ""
"You can see four workspace buttons at the top: 2D, 3D, Script and AssetLib."
msgstr ""
"위에서 4개의 작업 공간 버튼을 볼 수 있습니다: 2D, 3D, Script, AssetLib."

#: ../../docs/getting_started/step_by_step/intro_to_the_editor_interface.rst:118
#, fuzzy
msgid ""
"You’ll use the **2D workspace** for all types of games. In addition to 2D "
"games, the 2D workspace is where you'll build your interfaces. Press :kbd:"
"`F1` (or :kbd:`Alt + 1` on macOS) to access it."
msgstr ""
"모든 종류의 게임을 만들려면 **2D 작업 공간(2D workspace)**\\ 을 사용하게 될 "
"겁니다. 2D 게임이 아니더라도 인터페이스를 만들 때에 사용되죠. F1 키를 눌러 들"
"어갑니다."

#: ../../docs/getting_started/step_by_step/intro_to_the_editor_interface.rst:124
#, fuzzy
msgid ""
"In the **3D workspace**, you can work with meshes, lights, and design levels "
"for 3D games. Press :kbd:`F2` (or :kbd:`Alt + 2` on macOS) to access it."
msgstr ""
"**3D 작업 공간(3D workspace)**\\ 에서는 3D 게임 용 메시와 조명, 레벨 설계를 "
"할 수 있습니다. F2 키를 눌러 들어갑니다."

#: ../../docs/getting_started/step_by_step/intro_to_the_editor_interface.rst:129
msgid ""
"Notice the perspective button under the toolbar, it opens a list of options "
"related to the 3D viewport."
msgstr ""
"툴바 아래에는 원근보기(Perspective) 버튼이 있습니다. 이 버튼에는 3D 뷰포트와 "
"관련된 설정 목록이 있습니다."

#: ../../docs/getting_started/step_by_step/intro_to_the_editor_interface.rst:134
msgid ""
"Read :ref:`doc_introduction_to_3d` for more detail about **3D workspace**."
msgstr ""
"**3D 작업 공간**\\ 에 대한 자세한 설명은 :ref:`doc_introduction_to_3d`\\ 를 "
"참고하세요."

#: ../../docs/getting_started/step_by_step/intro_to_the_editor_interface.rst:136
#, fuzzy
msgid ""
"The **Script** workspace is a complete code editor with a debugger, rich "
"auto-completion, and built-in code reference. Press :kbd:`F3` (or :kbd:`Alt "
"+ 3` on macOS) to access it, and :kbd:`F4` to search the reference."
msgstr ""
"**Script** 작업 공간은 디버거, 많은 자동 완성 기능, 내장 코드 참조가 있는 완"
"전한 코드 편집기입니다. F3 키로 들어가고, F4 키로 참조를 검색합니다."

#: ../../docs/getting_started/step_by_step/intro_to_the_editor_interface.rst:142
msgid ""
"Finally the **AssetLib** is a library of Free add-ons, scripts and assets to "
"use in your projects."
msgstr ""
"마지막으로 **AssetLib**\\ 은 프로젝트에 쓸 무료 애드온, 스크립트, 애셋이 있"
"는 라이브러리입니다."

#: ../../docs/getting_started/step_by_step/intro_to_the_editor_interface.rst:146
msgid "Modify the interface"
msgstr "인터페이스 수정하기"

#: ../../docs/getting_started/step_by_step/intro_to_the_editor_interface.rst:148
#, fuzzy
msgid ""
"Godot’s interface lives in a single window. You cannot split it across "
"multiple screens although you can work with an external code editor like "
"Atom or Visual Studio Code for instance."
msgstr ""
"Godot의 인터페이스는 하나의 창으로 이루어 집니다. 여러 화면으로 나눌 수는 없"
"지만, 대신 Atom이나 Visual Studio와 같은 외부 코드 편집기를 사용할 수 있습니"
"다."

#: ../../docs/getting_started/step_by_step/intro_to_the_editor_interface.rst:153
msgid "Move and resize docks"
msgstr "독의 이동과 크기 조절"

#: ../../docs/getting_started/step_by_step/intro_to_the_editor_interface.rst:155
msgid ""
"Click and drag on the edge of any dock or panel to resize it horizontally or "
"vertically."
msgstr "독이나 패널의 크기를 조절하려면 모서리를 클릭한 뒤 드래그하세요."

#: ../../docs/getting_started/step_by_step/intro_to_the_editor_interface.rst:160
msgid ""
"Click the three-dotted icon at the top of any dock to change its location."
msgstr ""
"독의 위에 있는 점 세 개로 된 아이콘을 누르면 독의 위치를 바꿀 수 있습니다."

#: ../../docs/getting_started/step_by_step/intro_to_the_editor_interface.rst:165
msgid ""
"Go to the ``Editor`` menu and ``Editor Settings`` to fine-tune the look and "
"feel of the editor."
msgstr ""
"보기 좋은 편집기를 만들고 싶다면 ``편집기(Editor)`` 메뉴의 ``편집기 설정"
"(Editor Settings)``\\ 으로 가세요."

#: ../../docs/getting_started/step_by_step/scenes_and_nodes.rst:4
msgid "Scenes and nodes"
msgstr "씬과 노드(Scenes and nodes)"

#: ../../docs/getting_started/step_by_step/scenes_and_nodes.rst:11
msgid ""
"Imagine for a second that you are not a game developer anymore. Instead, "
"you're a chef! Change your hipster outfit for a toque and a double breasted "
"jacket. Now, instead of making games, you create new and delicious recipes "
"for your guests."
msgstr ""
"한번 당신이 더 이상 게임 개발자가 아니라고 상상해보세요. 이제 당신은 셰프입니"
"다! 힙스터 복장을 벗어 던지고 토크와 더블 브레스트 재킷을 입는다고요. 이제 게"
"임을 만드는 게 아니라, 손님을 위해 새롭고 맛있는 레시피를 만드는 것입니다."

#: ../../docs/getting_started/step_by_step/scenes_and_nodes.rst:16
msgid ""
"So, how does a chef create a recipe? Recipes are divided into two sections: "
"the first is the ingredients and the second is the instructions to prepare "
"it. This way, anyone can follow the recipe and savor your magnificent "
"creation."
msgstr ""
"그럼 어떻게 셰프가 레시피를 만들까요? 레시피는 두 가지 과정으로 나누어 집니"
"다: 첫 째는 재료, 둘 째는 조리 방법입니다. 이 과정으로 누구나 레시피를 따라"
"서 훌륭한 음식을 맛 볼 수 있을 겁니다."

#: ../../docs/getting_started/step_by_step/scenes_and_nodes.rst:21
msgid ""
"Making games in Godot feels pretty much the same way. Using the engine feels "
"like being in a kitchen. In this kitchen, *nodes* are like a refrigerator "
"full of fresh ingredients with which to cook."
msgstr ""
"Godot에서 게임을 만드는 것도 요리하는 느낌입니다. 엔진은 주방과 같습니다. 주"
"방으로 친다면 *노드(Node)*\\ 는 요리에 쓰이는, 신선한 재료들이 가득 찬 냉장고"
"로 볼 수 있습니다."

#: ../../docs/getting_started/step_by_step/scenes_and_nodes.rst:25
msgid ""
"There are many types of nodes. Some show images, others play sound, other "
"nodes display 3D models, etc. There are dozens of them."
msgstr ""
"많은 유형의 노드가 있습니다. 이미지를 보여주는 노드, 소리를 재생하는 노드, "
"3D 모델을 보여주는 노드 등이 있죠. 그것도 수십 개나 말입니다."

#: ../../docs/getting_started/step_by_step/scenes_and_nodes.rst:29
#: ../../docs/getting_started/workflow/assets/importing_scenes.rst:101
#: ../../docs/tutorials/2d/2d_lights_and_shadows.rst:46
#: ../../docs/development/file_formats/tscn.rst:26
msgid "Nodes"
msgstr "노드(Node)"

#: ../../docs/getting_started/step_by_step/scenes_and_nodes.rst:31
msgid ""
"But let's start with the basics. Nodes are fundamental building blocks for "
"creating a game. As mentioned above, a node can perform a variety of "
"specialized functions. However, any given node always has the following "
"attributes:"
msgstr ""
"일단 기초로 한번 시작해봅시다. 노드는 게임을 만들기 위한 기초 건축 벽돌입니"
"다. 앞서 말했듯이 노드는 다양한 특수 기능을 갖고 있습니다. 하지만 이 모든 노"
"드들은 이러한 성질을 갖습니다:"

#: ../../docs/getting_started/step_by_step/scenes_and_nodes.rst:35
msgid "It has a name."
msgstr "이름이 있습니다."

#: ../../docs/getting_started/step_by_step/scenes_and_nodes.rst:36
msgid "It has editable properties."
msgstr "편집할 수 있는 속성을 갖고 있습니다."

#: ../../docs/getting_started/step_by_step/scenes_and_nodes.rst:37
msgid "It can receive a callback to process every frame."
msgstr "각 프레임을 처리하기 위한 콜백을 받을 수 있습니다."

#: ../../docs/getting_started/step_by_step/scenes_and_nodes.rst:38
msgid "It can be extended (to have more functions)."
msgstr "(더 많은 기능을 갖기 위해) 확장될 수 있습니다."

#: ../../docs/getting_started/step_by_step/scenes_and_nodes.rst:39
msgid "It can be added to another node as a child."
msgstr "다른 노드의 자식으로 추가될 수 있습니다."

#: ../../docs/getting_started/step_by_step/scenes_and_nodes.rst:43
msgid ""
"The last one is important. Nodes can have other nodes as children. When "
"arranged in this way, the nodes become a **tree**."
msgstr ""
"마지막이 중요합니다. 노드는 다른 노드를 자식으로 가질 수 있습니다. 이런 식으"
"로 배열된다면 노드들은 **트리(Tree)**\\ 가 됩니다."

#: ../../docs/getting_started/step_by_step/scenes_and_nodes.rst:46
msgid ""
"In Godot, the ability to arrange nodes in this way creates a powerful tool "
"for organizing projects. Since different nodes have different functions, "
"combining them allows for the creation of more complex functions."
msgstr ""
"Godot에서 이런 방식으로 노드들을 배열하는 것은 프로젝트를 조직화하는데 강력"
"한 도구가 됩니다. 각 노드들이 다른 기능을 가지고 있기에, 그들을 묶는 것으로 "
"훨씬 복잡한 기능을 구현할 수 있습니다."

#: ../../docs/getting_started/step_by_step/scenes_and_nodes.rst:50
msgid ""
"Don't worry if this doesn't click yet. We will continue to explore this over "
"the next few sections. The most important fact to remember for now is that "
"nodes exist and can be arranged this way."
msgstr ""
"와닿지 않더라도 걱정하지 마세요. 앞으로 몇 몇 섹션에서 계속 노드에 대해 알아"
"볼 것입니다. 여기서 기억할 점은 노드가 있고 이런 방식으로 서로 배열될 수 있"
"는 점입니다."

#: ../../docs/getting_started/step_by_step/scenes_and_nodes.rst:55
#: ../../docs/tutorials/plugins/editor/making_main_screen_plugins.rst:83
msgid "Scenes"
msgstr "씬(Scene)"

#: ../../docs/getting_started/step_by_step/scenes_and_nodes.rst:59
msgid ""
"Now that the concept of nodes has been defined, the next logical step is to "
"explain what a Scene is."
msgstr ""
"이제 노드의 개념이 정리되었으니, 다음 이론은 씬이 무엇인가에 대해 설명해 보겠"
"습니다."

#: ../../docs/getting_started/step_by_step/scenes_and_nodes.rst:62
msgid ""
"A scene is composed of a group of nodes organized hierarchically (in tree "
"fashion). Furthermore, a scene:"
msgstr ""
"씬은 계층 구조로 (트리 형식으로) 조직된 노드 그룹으로 구성됩니다. 또한 씬은:"

#: ../../docs/getting_started/step_by_step/scenes_and_nodes.rst:65
msgid "always has one root node."
msgstr "항상 하나의 루트 노드를 갖습니다."

#: ../../docs/getting_started/step_by_step/scenes_and_nodes.rst:66
msgid "can be saved to disk and loaded back."
msgstr "디스크에 저장하고 다시 불러올 수 있습니다."

#: ../../docs/getting_started/step_by_step/scenes_and_nodes.rst:67
msgid "can be *instanced* (more on that later)."
msgstr "*인스턴스(Instance)*\\ 될수 있습니다 (더 자세한 설명은 나중에)."

#: ../../docs/getting_started/step_by_step/scenes_and_nodes.rst:69
msgid ""
"Running a game means running a scene. A project can contain several scenes, "
"but for the game to start, one of them must be selected as the main scene."
msgstr ""
"게임을 실행한다는 것은 씬을 실행하는 것입니다. 한 프로젝트는 여러 씬으로 이루"
"어지지만, 게임을 시작하면 그 중 하나의 씬만 메인 씬으로 선택됩니다."

#: ../../docs/getting_started/step_by_step/scenes_and_nodes.rst:72
msgid ""
"Basically, the Godot editor is a **scene editor**. It has plenty of tools "
"for editing 2D and 3D scenes as well as user interfaces, but the editor is "
"based on the concept of editing a scene and the nodes that compose it."
msgstr ""
"기본적으로 Godot 편집기는 **씬 편집기**\\ 입니다. 사용자 인터페이스말고도 2D"
"와 3D 씬을 편집하기 위한 도구가 많이 있지만, 편집기는 씬을 편집하는 것과 씬"
"을 구성하는 노드들이란 개념으로 있습니다."

#: ../../docs/getting_started/step_by_step/scenes_and_nodes.rst:77
#: ../../docs/getting_started/editor/external_editor.rst:32
#: ../../docs/development/compiling/compiling_with_mono.rst:191
msgid "Editor"
msgstr "편집기"

#: ../../docs/getting_started/step_by_step/scenes_and_nodes.rst:79
msgid ""
"Open the project you made in :ref:`doc_intro_to_the_editor_interface`, or "
"create a new one. This will open the Godot editor:"
msgstr ""
":ref:`doc_intro_to_the_editor_interface`\\ 에서 만든 프로젝트를 열거나, 새 프"
"로젝트를 만드세요. Godot 편집기가 열릴 것입니다:"

#: ../../docs/getting_started/step_by_step/scenes_and_nodes.rst:84
msgid ""
"As mentioned before, making games in Godot feels like being in a kitchen, so "
"let's open the refrigerator and add some fresh nodes to the project. We'll "
"begin with a \"Hello World\" message that we'll put on the screen."
msgstr ""
"앞서 말했듯이, Godot로 게임을 만드는 것은 주방에 있는 것과 같은 느낌입니다. "
"그렇다면 한번 냉장고를 열고 프로젝트에 신선한 노드들을 추가해 봅시다. 실행을 "
"누르면 \"Hello World!\"가 화면에 나오게 할 것입니다."

#: ../../docs/getting_started/step_by_step/scenes_and_nodes.rst:89
msgid ""
"To do this we need to add a Label node. Press the \"Add Child Node\" button "
"at the top left of the scene dock (the icon represents a plus symbol). This "
"button is the main way to add new nodes to a scene, and will always add the "
"chosen node as a child of the currently selected node (or, in an empty "
"scene, as the \"root\" node)."
msgstr ""
"작업을 하려면 Label 노드를 추가해야 합니다. 씬 독의 왼쪽 위에 있는 \"자식 노"
"드 추가하기(Add Child Node\" 버튼을 클릭하세요 (더하기 아이콘처럼 생겼습니"
"다). 이 버튼은 씬에 새 노드를 추가하는 기본 방법입니다. 그리고 자식을 추가하"
"면 항상 현재 선택된 노드의 자식으로 노드가 추가됩니다 (비어있는 씬의 경우 노"
"드는 \"루트\" 노드로 추가됩니다)."

#: ../../docs/getting_started/step_by_step/scenes_and_nodes.rst:97
msgid ""
"In an empty scene (without root node), the scene dock shows several options "
"to quickly add a root node to the scene. \"2D Scene\" adds a Node2D node, "
"\"3D Scene\" adds a Spatial node, \"User Interface\" adds a Control node, "
"and \"Custom Node\" which lets you select any node (so it is equivalent to "
"pressing the \"Add Child Node\" button). You can also press the star-shaped "
"icon to toggle the display of your favorited nodes."
msgstr ""
"(루트 노드가 없는) 비어있는 씬에서, 씬 독은 씬에 루트 노드를 빠르게 추가하는 "
"여러 설정을 보여줍니다. \"2D 씬(2D Scene)\"은 Node2D 노드를, \"3D 씬(3D "
"Scene)\"은 Spatial 노드를, \"사용자 인터페이스(User Interface)\"는 Control 노"
"드를 추가합니다. 그리고 \"맞춤 노드(Custom Node)\"는 선택한 아무 노드든지 추"
"가합니다 (즉, \"자식 노드 추가하가(Add Child Node)\" 버튼을 누른 것과 같습니"
"다). 또한 자주 쓰는 노드를 창에 표시하려면 별 모양 아이콘을 누르면 됩니다."

#: ../../docs/getting_started/step_by_step/scenes_and_nodes.rst:105
msgid ""
"Note that these presets are here for convenience and are not mandatory for "
"the different types of scenes. Not every 3D scene needs a Spatial node as "
"its root node, likewise not every GUI or 2D scene needs a Control node or "
"Node2D as their root node."
msgstr ""
"이 프리셋은 편의를 위해 있는 것이지 다른 유형의 씬에서까지 필수적인 것은 아닙"
"니다. 모든 3D 씬의 루트 노드가 Spatial 노드인 것이 아닙니다. 마찬가지로 모든 "
"GUI나 2D 씬의 루트 노드가 Control 노드나 Node2D 노드인 것이 아닙니다."

#: ../../docs/getting_started/step_by_step/scenes_and_nodes.rst:110
msgid ""
"Now, to add a label node to this scene you can click on the Custom Node "
"button or the Add Node button at the top. In scenes that aren't empty you "
"use the add node button to create every child node."
msgstr ""
"그러면 이 씬에 Label 노드를 추가하려면 맞춤 노드(Custom Node)를 클릭하거나 위"
"의 노드 추가하기(Add Node) 버튼을 클릭하세요. 비어있는 씬이 아니라면 노드 추"
"가하기 버튼으로 선택한 노드의 자식 노드를 추가할 수 있습니다."

#: ../../docs/getting_started/step_by_step/scenes_and_nodes.rst:116
msgid ""
"This will open the Create Node dialog, showing the long list of nodes that "
"can be created:"
msgstr ""
"그러면 노드 만들기(Create Node) 대화 상자가 열립니다. 만들 수 있는 노드가 길"
"게 나열되어 있죠:"

#: ../../docs/getting_started/step_by_step/scenes_and_nodes.rst:121
msgid ""
"From there, select the \"Label\" node first. Searching for it is probably "
"the fastest way:"
msgstr ""
"거기서 \"Label\" 노드를 먼저 선택하세요. 검색이 가장 빠른 방법일 것입니다:"

#: ../../docs/getting_started/step_by_step/scenes_and_nodes.rst:126
msgid "And finally, create the Label! A lot happens when Create is pressed:"
msgstr ""
"마지막으로 Label을 만드세요! 만들기(Create) 버튼을 누르는 순간 많은 일이 일어"
"납니다:"

#: ../../docs/getting_started/step_by_step/scenes_and_nodes.rst:130
msgid ""
"First of all, the scene changes to the 2D editor (because Label is a 2D Node "
"type), and the Label appears, selected, at the top left corner of the "
"viewport."
msgstr ""
"먼저 (Label이 2D 노드 유형이기 때문에) 씬이 2D 편집기로 바뀝니다. 그리고 "
"Label은 선택한 상태로 뷰포트의 왼쪽 위에 나타납니다."

#: ../../docs/getting_started/step_by_step/scenes_and_nodes.rst:133
#, fuzzy
msgid ""
"The node appears in the scene tree editor in the Scene dock, and the label "
"properties appear in the Inspector dock."
msgstr ""
"노드는 씬 트리 편집기에 나타납니다 (오른쪽 위 상자), 그리고 Label 속성은 인스"
"펙터(Inspecter)에 나타납니다 (오른쪽 아래 상자)."

#: ../../docs/getting_started/step_by_step/scenes_and_nodes.rst:136
msgid ""
"The next step will be to change the \"Text\" Property of the label. Let's "
"change it to \"Hello World\":"
msgstr ""
"다음 단계는 Label의 \"Text\" 속성을 바꾸는 것입니다. Text 속성에 \"Hello "
"World!\"를 입력해봅시다:"

#: ../../docs/getting_started/step_by_step/scenes_and_nodes.rst:141
#, fuzzy
msgid ""
"Ok, everything's ready to run the scene! Press the PLAY SCENE Button on the "
"top bar (or hit :kbd:`F6`):"
msgstr ""
"좋아요. 씬을 실행할 준비가 됐습니다! 상단 메뉴에서 버튼 중 씬 실행(PLAY "
"SCENE) 버튼을 누르세요 (혹은 F6 키를 누르세요):"

#: ../../docs/getting_started/step_by_step/scenes_and_nodes.rst:146
msgid "Aaaand... Oops."
msgstr "그러며언... 어이쿠."

#: ../../docs/getting_started/step_by_step/scenes_and_nodes.rst:150
msgid ""
"Scenes need to be saved to be run, so save the scene to something like Hello."
"tscn in Scene -> Save:"
msgstr ""
"씬을 실행하려면 저장을 해야 합니다. 따라서 씬(Scene) -> 저장하기(Save)로 가"
"서 Hello.tscn같은 이름을 짓고 씬을 저장하세요:"

#: ../../docs/getting_started/step_by_step/scenes_and_nodes.rst:155
msgid ""
"And here's when something funny happens. The file dialog is a special file "
"dialog, and only allows you to save inside the project. The project root is "
"``res://`` which means \"resource path\". This means that files can only be "
"saved inside the project. For the future, when doing file operations in "
"Godot, remember that ``res://`` is the resource path, and no matter the "
"platform or install location, it is the way to locate where resource files "
"are from inside the game."
msgstr ""
"그러면 재미난 일이 일어납니다. 파일 대화 상자는 특별하기 때문에, 프로젝트 안"
"에만 저장할 수 있습니다. 프로젝트의 루트는 \"res://\"로 \"리소스 경로"
"(resource path)\"를 의미합니다. 즉, 파일은 프로젝트 안에만 저장할 수 있다는 "
"것입니다. 나중에 Godot에서 파일을 관리할 때 \"res://\"가 리소스 경로라는 사실"
"을 기억하세요. 이것만 안다면 플랫폼의 종류나 설치 경로와 관계없이 게임 내에"
"서 리소스 파일을 찾을 수 있습니다."

#: ../../docs/getting_started/step_by_step/scenes_and_nodes.rst:163
msgid ""
"After saving the scene and pressing run scene again, the \"Hello World\" "
"demo should finally execute:"
msgstr ""
"씬을 저장하고 씬을 다시 실행하면, 마침내 \"Hello World\" 데모가 실행될 것입니"
"다:"

#: ../../docs/getting_started/step_by_step/scenes_and_nodes.rst:168
msgid "Success!"
msgstr "성공!"

#: ../../docs/getting_started/step_by_step/scenes_and_nodes.rst:172
msgid ""
"If this doesn't immediately work and you have a hiDPI display on at least "
"one of your monitors, go to **Project → Project Settings → Display → "
"Window** then enable **Allow Hidpi** under **Dpi**."
msgstr ""
"데모가 즉시 작동하지 않을 수 있습니다. 모니터 중 하나가 hiDPI 화면으로 설정"
"한 경우, **프로젝트(Project) → 프로젝트 설정(Project Settings) → Display → "
"Window**\\ 로 가세요. 그런 다음 **Dpi** 아래에 있는 **Allow Hidpi** 설정을 켜"
"세요."

#: ../../docs/getting_started/step_by_step/scenes_and_nodes.rst:180
msgid "Configuring the project"
msgstr "프로젝트 설정하기"

#: ../../docs/getting_started/step_by_step/scenes_and_nodes.rst:182
msgid ""
"Ok, it's time to configure the project. Right now, the only way to run "
"something is to execute the current scene. Projects, however, may have "
"several scenes, so one of them must be set as the main scene. This is the "
"scene that will be loaded any time the project is run."
msgstr ""
"좋아요. 프로젝트를 설정할 시간입니다. 지금 할 수 있는 일은 현재 씬을 실행하"
"는 것 뿐입니다. 하지만 프로젝트는 여러 개의 씬을 갖기 때문에, 어느 한 씬을 메"
"인 씬으로 설정해야 합니다. 프로젝트를 실행하면 언제나 불러오는 씬이죠."

#: ../../docs/getting_started/step_by_step/scenes_and_nodes.rst:187
msgid ""
"These settings are all stored in a project.godot file, which is a plaintext "
"file in win.ini format (for easy editing). There are dozens of settings that "
"you can change in this file to alter how a project executes. To simplify "
"this process, Godot provides a project settings dialog, which acts as a sort "
"of frontend to editing a project.godot file."
msgstr ""
"이 설정은 모두 project.godot 파일에 저장됩니다. (편집을 쉽게 할 수 있도록) "
"win.ini 형식으로 된 텍스트 파일입니다. 이 파일에는 프로젝트를 실행하는 방법"
"을 바꾸는 수 십 개의 설정이 있습니다. Godot는 이 과정을 간소화하기 위해 "
"project.godot 파일을 편집하는 프로젝트 설정(Project Settings) 대화 상자를 제"
"공합니다."

#: ../../docs/getting_started/step_by_step/scenes_and_nodes.rst:193
msgid "To access that dialog, select Project -> Project Settings. Try it now."
msgstr ""
"대화 상자에 접근하려면 프로젝트(Project) -> 프로젝트 설정(Project Settings)"
"을 선택하세요. 지금 해보세요."

#: ../../docs/getting_started/step_by_step/scenes_and_nodes.rst:195
msgid ""
"Once the window opens, let's select a main scene. Locate the `Application/"
"Run/Main Scene` property and click on it to select 'Hello.tscn'."
msgstr ""
"창을 열었다면 메인 씬을 선택합시다. 'Application/Run/Main Scene' 속성으로 가"
"서 'hello.tscn'을 선택하세요."

#: ../../docs/getting_started/step_by_step/scenes_and_nodes.rst:200
msgid ""
"Now, with this change, when you press the regular Play button (or F5), this "
"scene will run, no matter which scene is actively being edited."
msgstr ""
"이렇게 바꾸면 이제 어떤 씬을 편집하는 중이든 간에, 기본 실행(Play) 버튼을 누"
"르면 (혹은 F5 키를 누르면) 설정한 씬이 실행됩니다."

#: ../../docs/getting_started/step_by_step/scenes_and_nodes.rst:203
msgid ""
"The project settings dialog provides a lot of options that can be saved to a "
"project.godot file and shows their default values. If you change a value, a "
"tick is marked to the left of its name. This means that the property will be "
"saved to the project.godot file and remembered."
msgstr ""
"프로젝트 설정 대화 상자는 많은 설정을 제공합니다. 설정은 project.godot 파일"
"에 저장하거나 기본 값으로 되돌릴 수 있습니다. 값을 바꾸면 이름 왼쪽에 체크 표"
"시가 뜹니다. 이는 값을 바꾼 속성이 project.godot 파일에 저장되었다는 뜻입니"
"다."

#: ../../docs/getting_started/step_by_step/scenes_and_nodes.rst:208
msgid ""
"As a side note, it is also possible to add custom configuration options and "
"read them in at run-time using the :ref:`ProjectSettings "
"<class_ProjectSettings>` singleton."
msgstr ""
"여담으로 :ref:`ProjectSettings <class_ProjectSettings>` 싱글톤(Singleton)을 "
"사용해서 맞춤 설정을 추가, 이를 런타임 도중 읽게 만들 수도 있습니다."

#: ../../docs/getting_started/step_by_step/scenes_and_nodes.rst:212
msgid "To be continued..."
msgstr "계속..."

#: ../../docs/getting_started/step_by_step/scenes_and_nodes.rst:214
msgid ""
"This tutorial talked about \"scenes and nodes\", but so far there has been "
"only *one* scene and *one* node! Don't worry, the next tutorial will expand "
"on that..."
msgstr ""
"이 튜토리얼은 \"씬과 노드\"에 대해서 설명했습니다. 그런데 지금까지는 단 *하나"
"의* 씬과 *하나의* 노드만 설명했습니다! 걱정하지 마세요. 다음 튜토리얼로 가서 "
"개념을 넓혀봅시다..."

#: ../../docs/getting_started/step_by_step/instancing.rst:4
msgid "Instancing"
msgstr "인스턴스(Instance)하기"

#: ../../docs/getting_started/step_by_step/instancing.rst:9
msgid ""
"Creating a single scene and adding nodes into it might work for small "
"projects, but as a project grows in size and complexity, the number of nodes "
"can quickly become unmanageable. To address this, Godot allows a project to "
"be separated into any number of scenes. This provides you with a powerful "
"tool that helps you organize the different components of your game."
msgstr ""
"하나의 씬를 만들고 노드를 추가하는 것은 작은 프로젝트에는 적합할지도 모릅니"
"다. 하지만 프로젝트의 규모가 커지고 복잡해지면서, 수많은 노드들은 곧바로 다루"
"기 어려워집니다. 이를 해결하기 위해 Godot에서는 프로젝트를 여러 개의 씬으로 "
"나눌 수 있습니다. 이것으로 게임의 서로 다른 구성 요소를 조직하는데 큰 도움이 "
"될 수 있습니다."

#: ../../docs/getting_started/step_by_step/instancing.rst:15
msgid ""
"In :ref:`doc_scenes_and_nodes` you learned that a scene is a collection of "
"nodes organized in a tree structure, with a single node as the tree root."
msgstr ""
":ref:`doc_scenes_and_nodes`\\ 에서 말하길, 씬은 노드들이 트리 구조로 조직된 "
"묶음이고, 하나의 노드가 트리의 루트가 된다고 했습니다."

#: ../../docs/getting_started/step_by_step/instancing.rst:20
msgid ""
"You can create as many scenes as you like and save them to disk. Scenes "
"saved in this manner are called \"Packed Scenes\" and have a ``.tscn`` "
"filename extension."
msgstr ""
"많은 씬을 원하는 만큼 만들어서 디스크에 저장할 수 있습니다. 씬은 \"Packed "
"Scenes(압축된 씬)\"라 불리는 방식으로 저장되고, ``.tscn`` 파일 확장자 이름을 "
"갖습니다."

#: ../../docs/getting_started/step_by_step/instancing.rst:26
msgid ""
"Once a scene has been saved, it can be instanced into another scene as if it "
"were any other node."
msgstr ""
"일단 씬 하나를 저장한다면, 다른 씬으로 인스턴스(Instance)할 수 있습니다. 다"
"른 노드들처럼 말이죠."

#: ../../docs/getting_started/step_by_step/instancing.rst:31
msgid "In the above picture, Scene B was added to Scene A as an instance."
msgstr "위 그림에서 씬 B는 씬 A에 인스턴스로 추가되었습니다."

#: ../../docs/getting_started/step_by_step/instancing.rst:34
msgid "Instancing by example"
msgstr "예제를 통해 인스턴스하기"

#: ../../docs/getting_started/step_by_step/instancing.rst:36
msgid ""
"To learn how instancing works, let's start by downloading a sample project: :"
"download:`instancing.zip <files/instancing.zip>`."
msgstr ""
"어떻게 인스턴스가 이루어지는지 배우기 위해, 먼저 샘플 프로젝트를 다운로드합시"
"다: :download:`instancing.zip <files/instancing.zip>`."

#: ../../docs/getting_started/step_by_step/instancing.rst:39
msgid ""
"Unzip this project anywhere you like. Then open Godot and add this project "
"to the project manager using the 'Import' button:"
msgstr ""
"원하는 위치에 압축을 푸세요. 그런 다음 Godot를 켜고, 프로젝트 매니저에서 '가"
"져오기(Import)' 버튼으로 이 프로젝트를 추가하세요:"

#: ../../docs/getting_started/step_by_step/instancing.rst:44
msgid ""
"Browse to the folder you extracted and open the \"project.godot\" file you "
"can find inside it. After doing this, the new project will appear on the "
"list of projects. Edit the project by pressing the 'Edit' button."
msgstr ""
"압축을 푼 폴더를 검색하고 그 안에서 찾은 \"project.godot\" 파일을 여세요. 그"
"러면 새 프로젝트가 프로젝트 목록에 나타납니다. '편집하기(Edit)' 버튼을 눌러 "
"프로젝트를 편집하세요."

#: ../../docs/getting_started/step_by_step/instancing.rst:48
msgid ""
"This project contains two scenes: \"Ball.tscn\" and \"Main.tscn\". The ball "
"scene uses a :ref:`RigidBody2D <class_RigidBody2D>` to provide physics "
"behavior while the main scene has a set of obstacles for the ball to collide "
"with (using :ref:`StaticBody2D <class_StaticBody2D>`)."
msgstr ""
"이 프로젝트는 두 개의 씬을 갖고 있습니다: \"Ball.tscn\"과 \"Main.tscn\"입니"
"다. Ball 씬에는 물리적인 동작을 주는 :ref:`RigidBody2D <class_RigidBody2D>`"
"\\ 를 사용했고, Main 씬에는 (:ref:`StaticBody2D <class_StaticBody2D>`\\ 를 사"
"용해서) 공과 충돌하는 장애물 세트가 있습니다."

#: ../../docs/getting_started/step_by_step/instancing.rst:57
msgid "Open the ``Main`` scene, and then select the root node:"
msgstr "``Main`` 씬을 열고 루트 노드를 선택하세요:"

#: ../../docs/getting_started/step_by_step/instancing.rst:61
msgid ""
"We want to add an instance of the ``Ball`` scene as a child of ``Main``. "
"Click the \"link\"-shaped button (its hover-text says \"Instance a scene "
"file as a Node.\") and select the ``Ball.tscn`` file."
msgstr ""
"``Ball`` 씬의 인스턴스를 ``Main`` 씬의 자식으로 추가할 것입니다. \"사슬\" 모"
"양 버튼을 클릭하세요 (마우스를 올리면 \"씬 파일을 노드로 인스턴스해요.\"라고 "
"뜹니다), 그리고 ``Ball.tscn`` 파일을 선택하세요."

#: ../../docs/getting_started/step_by_step/instancing.rst:67
msgid ""
"The ball will be placed at the top-left corner of the screen area (this is "
"``(0, 0)`` in screen coordinates). Click and drag the ball somewhere near "
"the top-center of the scene:"
msgstr ""
"Ball은 화면 영역의 왼쪽 위에 있습니다 (그 곳이 화면 좌표에서 ``(0, 0)``\\ 인 "
"곳입니다). 공을 클릭하고 화면 가운데의 조금 위로 드래그하세요:"

#: ../../docs/getting_started/step_by_step/instancing.rst:73
msgid "Press \"Play\" and watch the ball fall to the bottom of the screen:"
msgstr ""
"\"실행하기(Play)\" 버튼을 눌러서 공이 화면 아래로 떨어지는지 확인하세요:"

#: ../../docs/getting_started/step_by_step/instancing.rst:78
msgid "Multiple instances"
msgstr "여러 인스턴스"

#: ../../docs/getting_started/step_by_step/instancing.rst:80
#, fuzzy
msgid ""
"You can add as many instances as you like to a scene, either by using the "
"\"Instance\" button again, or by clicking on the ball instance and pressing "
"\"Duplicate\" (:kbd:`Ctrl + D`):"
msgstr ""
"씬에 원하는 만큼 많은 인스턴스를 추가할 수 있습니다. 다시 \"인스턴스"
"(Instance)\" 버튼을 누르거나, 공 인스턴스를 클릭하고 \"복제하기"
"(Duplicate)\" (Ctrl-D)를 누르면 됩니다:"

#: ../../docs/getting_started/step_by_step/instancing.rst:86
msgid "Run the scene again and all of the balls will fall."
msgstr "씬을 다시 실행하면 모든 공이 떨어질 것입니다."

#: ../../docs/getting_started/step_by_step/instancing.rst:91
msgid "Editing instances"
msgstr "인스턴스 편집하기"

#: ../../docs/getting_started/step_by_step/instancing.rst:93
#, fuzzy
msgid ""
"Open the ``Ball`` scene and add a ``PhysicsMaterial`` by opening the "
"\"Physics Material Override\" dropdown in the Inspector dock and selecting "
"\"New PhysicsMaterial\"."
msgstr ""
"``Ball`` 씬을 열고 아래 화살표를 클릭하고 \"새 PhysicsMaterial\"을 선택해서 "
"``PhysicsMaterial``\\ 을 추가하세요."

#: ../../docs/getting_started/step_by_step/instancing.rst:99
msgid ""
"Then, expand the material by clicking on it, and set the ``Bounce`` property "
"to ``1``."
msgstr ""
"그 후 PhysicsMaterial을 클릭해서 펼친 후, ``Bounce`` 속성을 ``1``\\ 로 설정합"
"니다."

#: ../../docs/getting_started/step_by_step/instancing.rst:104
msgid ""
"Press \"Play\" and notice that all of the instanced balls are now much more "
"bouncy. Because the instanced balls are based on the saved scene, changes to "
"that scene will affect all instances."
msgstr ""
"\"실행하기(Play)\"를 누르면 모든 인스턴스된 공이 이제 더 많이 튕기는 것을 볼 "
"수 있습니다. 인스턴스된 공은 저장한 씬 기반이기 때문에 씬의 변경사항도 인스턴"
"스에 영향을 줍니다."

#: ../../docs/getting_started/step_by_step/instancing.rst:108
msgid ""
"You can also adjust individual instances. Set the bounce value back to ``0`` "
"and then in the ``Main`` scene, select one of the instanced balls. Resources "
"like ``PhysicsMaterial`` are shared between instances by default, so we need "
"to make it unique. Click on the down arrow and select \"Make Unique\". Set "
"its ``Bounce`` to ``1`` and press \"Play\"."
msgstr ""
"개개의 인스턴스도 조절할 수 있습니다. Bounce 값을 ``0``\\ 으로 돌려 놓고 "
"``Main`` 씬으로 돌아간 뒤, 인스턴스된 Ball 하나를 선택하세요. "
"``PhysicsMaterial``\\ 과 같은 리소스도 기본적으로 인스턴스끼리 공유합니다. 따"
"라서 먼저 이 Ball의 리소스를 유일하게 만들어야 합니다. 아래 화살표를 클릭하"
"고 \"유일하게 만들기(Make Unique)\"를 선택하세요. ``Bounce`` 값을 ``1``\\ 로 "
"설정하고 \"실행하기(Play)\"를 누르세요."

#: ../../docs/getting_started/step_by_step/instancing.rst:116
msgid ""
"Notice that a grey \"revert\" button appears next to the adjusted property. "
"When this button is present, it means you modified a property in the "
"instanced scene to override its value in the saved scene. Even if that "
"property is modified in the original scene, the custom value will remain. "
"Pressing the revert button will restore the property to the value in the "
"saved scene."
msgstr ""
"조정한 속성 옆에 회색 \"되돌리기(Revert)\" 버튼이 나타났습니다. 이 버튼이 있"
"다는 것은 인스턴스된 씬의 속성을 수정하여 저장된 씬에서 값을 다시 정의한 것"
"을 의미합니다. 기존 씬에서 속성을 수정하더라도 맞춤 값은 유지됩니다. 되돌리"
"기 버튼을 누르면 저장된 씬의 값으로 속성을 복원할 수 있습니다."

#: ../../docs/getting_started/step_by_step/instancing.rst:124
#: ../../docs/getting_started/step_by_step/signals.rst:263
#: ../../docs/getting_started/workflow/best_practices/scenes_versus_scripts.rst:151
#: ../../docs/tutorials/shading/your_first_shader/your_first_canvasitem_shader.rst:214
msgid "Conclusion"
msgstr "결론"

#: ../../docs/getting_started/step_by_step/instancing.rst:126
msgid ""
"Instancing can be useful when you want to create many copies of the same "
"object. It is also possible to create instances in code by using GDScript, "
"see :ref:`doc_instancing_continued`."
msgstr ""
"인스턴스하는 것은 많은 양의 객체 사본을 만들 때 유용합니다. GDScript로도 인스"
"턴스를 만들 수 있습니다. :ref:`doc_instancing_continued`\\ 를 참고하세요."

#: ../../docs/getting_started/step_by_step/instancing_continued.rst:4
msgid "Instancing (continued)"
msgstr "인스턴스하기 (이어서)"

#: ../../docs/getting_started/step_by_step/instancing_continued.rst:7
msgid "Recap"
msgstr "복습"

#: ../../docs/getting_started/step_by_step/instancing_continued.rst:9
msgid "Instancing has many handy uses. At a glance, with instancing you have:"
msgstr ""
"인스턴스하는 것은 다양한 용도가 있습니다. 인스턴스를 통해 무엇을 할 수 있는"
"지 간단히 살펴봅시다:"

#: ../../docs/getting_started/step_by_step/instancing_continued.rst:11
msgid "The ability to subdivide scenes and make them easier to manage."
msgstr "씬을 여러 하위 객체로 나누어 관리하기 쉽게 하는 기능."

#: ../../docs/getting_started/step_by_step/instancing_continued.rst:12
msgid "A tool to manage and edit multiple node instances at once."
msgstr "한번에 여러 노드 인스턴스를 관리하고 편집할 수 있는 도구."

#: ../../docs/getting_started/step_by_step/instancing_continued.rst:13
msgid ""
"A way to organize and embed complex game flows or even UIs (in Godot, UI "
"Elements are nodes, too)."
msgstr ""
"복잡한 게임 흐름이나 심지어 UI마저도 묶고 조직할 수 있는 방법 (Godot에서는 "
"UI 요소도 노드입니다)."

#: ../../docs/getting_started/step_by_step/instancing_continued.rst:17
msgid "Design language"
msgstr "디자인 언어"

#: ../../docs/getting_started/step_by_step/instancing_continued.rst:19
msgid ""
"But the greatest strength that comes with instancing scenes is that it works "
"as an excellent design language. This distinguishes Godot from all the other "
"engines out there. Godot was designed from the ground up around this concept."
msgstr ""
"하지만 씬을 인스턴스하는 것의 가장 강력한 점은 인스턴스가 우수한 디자인 언어"
"로써 작동하는 점입니다. 이것이 Godot와 다른 알려진 엔진들을 구분되는 특징입니"
"다. Godot는 애초에 바닥부터 이러한 컨셉으로 설계되었습니다."

#: ../../docs/getting_started/step_by_step/instancing_continued.rst:24
msgid ""
"When making games with Godot, the recommended approach is to dismiss most "
"common design patterns, such as MVC or Entity-Relationship diagrams, and "
"instead think about your scenes in a more natural way. Start by imagining "
"the visible elements in your game, the ones that can be named not just by a "
"programmer, but by anyone."
msgstr ""
"Godot로 게임을 만들 때는, MVC나 개체-관계 다이어그램과 같이 일반적으로 쓰이"
"는 디자인 패턴을 버리고, 씬을 좀 더 자연스럽게 바라보기를 권장합니다. 게임에"
"서 보이는 요소를 상상하는 것으로 시작하세요. 그 요소가 프로그래머가 이야기 하"
"는 요소가 아니라 누구나 부르는 것 말이죠."

#: ../../docs/getting_started/step_by_step/instancing_continued.rst:30
msgid "For example, here's how a simple shooter game could be imagined:"
msgstr "예를 들어 간단한 슈팅 게임을 다음과 같이 상상해 볼 수 있습니다:"

#: ../../docs/getting_started/step_by_step/instancing_continued.rst:34
msgid ""
"You can come up with a diagram like this for almost any kind of game. Write "
"down the parts of the game that you can visualize, and then add arrows to "
"represent ownership of one component by another."
msgstr ""
"거의 모든 종류의 게임에서 이런 다이어그램을 상상해 볼 수 있습니다. 게임에서 "
"시각화할 수 있는 부분을 쭉 적어보고, 각 구성 요소 간 소유권을 나타내기 위한 "
"화살표를 추가합니다."

#: ../../docs/getting_started/step_by_step/instancing_continued.rst:38
msgid ""
"Once you have a diagram like this, the recommended process for making a game "
"is to create a scene for each element listed in the diagram. You'll use "
"instancing (either by code or directly in the editor) for the ownership "
"relationships."
msgstr ""
"이렇게 다이어그램이 만들고 나서, 추천하는 게임 제작 과정은 다이어그램에 각 요"
"소로 이루어진 씬을 만드는 것입니다.(코드 또는 편집기에서 직접) 인스턴스를 사"
"용해서 소유권 관계를 만들게 됩니다."

#: ../../docs/getting_started/step_by_step/instancing_continued.rst:42
msgid ""
"A lot of time spent in programming games (or software in general) is on "
"designing an architecture and fitting game components to that architecture. "
"Designing based on scenes replaces that approach and makes development much "
"faster and more straightforward, allowing you to concentrate on the game "
"logic itself. Because most game components map directly to a scene, using a "
"design based on scene instantiation means little other architectural code is "
"needed."
msgstr ""
"게임을 (혹은 일반적으로 소프트웨어를) 프로그래밍할 때 가장 오래 걸리는 부분"
"은 구조를 설계하고 게임의 구성 요소를 그 구조에 알맞게 끼워 넣는 것입니다. "
"이 방법을 대체하기 위해 씬을 기반으로 설계하면 게임의 논리 자체에 집중하게 되"
"어서, 개발을 좀 더 빠르고 직관적으로 만듭니다. 대부분의 게임 구성 요소가 그대"
"로 씬이 되기 때문에, 씬 인스턴스를 기반으로 한 설계를 사용하는 것은 다른 구조"
"적 코드가 필요하지 않기 때문입니다."

#: ../../docs/getting_started/step_by_step/instancing_continued.rst:48
msgid ""
"Let's take a look at one more, somewhat more complex, example of an open-"
"world type game with lots of assets and nested elements:"
msgstr ""
"더 복잡하게 한 번 더 살펴보겠습니다. 많은 애셋과 중첩된 요소들로 이루어진 오"
"픈월드 게임을 보죠:"

#: ../../docs/getting_started/step_by_step/instancing_continued.rst:53
msgid ""
"Take a look at the room element. Let's say we started there. We could make a "
"couple of different room scenes, with different arrangements of furniture "
"(also scenes) in them. Later, we could make a house scene, connecting rooms "
"to make up its interior."
msgstr ""
"방 요소를 살펴보세요. 우리가 시작하는 부분에 대해 말해봅시다. (역시 씬으로 이"
"루어진) 가구 배치를 달리하여 서로 다른 두 가지의 방 씬을 만들 수 있습니다. 나"
"중에는 집 내부를 방들을 연결해서 집 씬을 만들 수도 있습니다."

#: ../../docs/getting_started/step_by_step/instancing_continued.rst:58
msgid ""
"Then, we could make a citadel scene, which is made out of many instanced "
"houses. Then, we could start working on the world map terrain, adding the "
"citadel onto it."
msgstr ""
"그런 다음 많은 인스턴스된 집들로 이루어진 성 씬을 만들 수 있습니다. 그리고 월"
"드맵 지형에 성을 추가하는 작업을 할 수 있습니다."

#: ../../docs/getting_started/step_by_step/instancing_continued.rst:62
msgid ""
"Later, we could create scenes that represent guards (and other NPCs) and add "
"them to the citadel as well. As a result, they would be indirectly added to "
"the overall game world."
msgstr ""
"나중에는 경호원 (그리고 다른 NPC)의 씬을 만들고 마찬가지로 성에 추가할 수 있"
"습니다. 그 결과, 씬들은 게임 세상 전체에 간접적으로 추가됩니다."

#: ../../docs/getting_started/step_by_step/instancing_continued.rst:66
msgid ""
"With Godot, it's easy to iterate on your game like this, as all you need to "
"do is create and instance more scenes. Furthermore, the editor UI is "
"designed to be user friendly for programmers and non-programmers alike. A "
"typical team development process can involve 2D or 3D artists, level "
"designers, game designers, and animators, all working with the editor "
"interface."
msgstr ""
"Godot라면 한 번 만든 씬을 더 많은 씬으로 인스턴스하는 방식으로 작업을 쉽게 반"
"복할 수 있습니다. 게다가 편집기 UI는 프로그래머나 비 프로그래머나 친근하게 설"
"계되었습니다. 일반적인 팀 개발 과정에는 2D나 3D 아티스트, 레벨 디자이너, 게"
"임 디자이너, 애니메이터가 있지만, 모두 편집기 인터페이스에서 작업합니다."

#: ../../docs/getting_started/step_by_step/instancing_continued.rst:73
msgid "Information overload!"
msgstr "정보가 너무 많아요!"

#: ../../docs/getting_started/step_by_step/instancing_continued.rst:75
msgid ""
"This has been a lot of high level information dropped on you all at once. "
"However, the important part of this tutorial was to create an awareness of "
"how scenes and instancing are used in real projects."
msgstr ""
"여기서 많은 고급 정보를 한 번에 제공했습니다. 하지만 이 튜토리얼의 가장 중요"
"한 부분은 실제 프로젝트에서 씬을 어떻게 인스턴스하는 지에 대한 인식을 만드는 "
"것입니다."

#: ../../docs/getting_started/step_by_step/instancing_continued.rst:79
msgid ""
"Everything discussed here will become second nature to you once you start "
"making games and putting these concepts into practice. For now, don't worry "
"about it too much, and go on to the next tutorial!"
msgstr ""
"여기에서 다루는 모든 내용은 게임을 처음 만들고 개념을 적용해가면서 자연스럽"
"게 익히게 될 것입니다. 그러니 지금은 너무 걱정하지 말고 다음 튜토리얼로 넘어"
"가세요!"

#: ../../docs/getting_started/step_by_step/scripting.rst:9
msgid ""
"Before Godot 3.0, the only choice for scripting a game was to use :ref:"
"`GDScript<doc_gdscript>`. Nowadays, Godot has four (yes, four!) official "
"languages and the ability to add extra scripting languages dynamically!"
msgstr ""
"Godot 3.0 이전까지는 스크립트하는 방법이 :ref:`GDScript<doc_gdscript>`\\ 밖"
"에 없었습니다. 현재 Godot는 4개를 (그래요, 4개!) 공식 언어로 갖고 있고 별개"
"로 스크립트 언어를 추가하는 기능도 있습니다!"

#: ../../docs/getting_started/step_by_step/scripting.rst:13
msgid ""
"This is great, mostly due to the large amount of flexibility provided, but "
"it also makes our work supporting languages more difficult."
msgstr ""
"이것은 대단합니다. 왜냐하면 큰 유연성을 제공해주기 때문입니다. 하지만 우리가 "
"여러가지 언어를 지원하는 것을 더 어렵게 만들기도 합니다."

#: ../../docs/getting_started/step_by_step/scripting.rst:16
msgid ""
"The \"main\" languages in Godot, though, are GDScript and VisualScript. The "
"main reason to choose them is their level of integration with Godot, as this "
"makes the experience smoother; both have slick editor integration, while C# "
"and C++ need to be edited in a separate IDE. If you are a big fan of "
"statically typed languages, go with C# and C++ instead."
msgstr ""
"Godot에서 \"메인\" 언어는 GDScript와 VisualScript입니다. 이들이 선택된 주된 "
"이유는 Godot와 결합 능력이 좋기 때문입니다. 둘 다 기본 편집기에서 매끄럽게 사"
"용할 수 있습니다. 반면 C#과 C++는 별도의 IDE에서 편집해야 합니다. 당신이 정"
"적 타입 언어를 좋아한다면 C#과 C++을 선택하세요."

#: ../../docs/getting_started/step_by_step/scripting.rst:22
#: ../../docs/getting_started/scripting/gdscript/index.rst:2
#: ../../docs/getting_started/scripting/c_sharp/c_sharp_differences.rst:30
#: ../../docs/getting_started/scripting/c_sharp/c_sharp_differences.rst:59
#: ../../docs/getting_started/scripting/c_sharp/c_sharp_differences.rst:199
#: ../../docs/getting_started/scripting/c_sharp/c_sharp_differences.rst:214
#: ../../docs/getting_started/scripting/c_sharp/c_sharp_differences.rst:226
#: ../../docs/getting_started/scripting/c_sharp/c_sharp_differences.rst:237
#: ../../docs/getting_started/scripting/c_sharp/c_sharp_differences.rst:245
#: ../../docs/getting_started/scripting/c_sharp/c_sharp_differences.rst:260
#: ../../docs/getting_started/scripting/c_sharp/c_sharp_differences.rst:272
#: ../../docs/getting_started/scripting/c_sharp/c_sharp_differences.rst:329
#: ../../docs/tutorials/debug/overview_of_debugging_tools.rst:101
msgid "GDScript"
msgstr "GDScript"

#: ../../docs/getting_started/step_by_step/scripting.rst:24
msgid ""
":ref:`GDScript<doc_gdscript>` is, as mentioned above, the main language used "
"in Godot. Using it has some positive points compared to other languages due "
"to its high integration with Godot:"
msgstr ""
":ref:`GDScript<doc_gdscript>`\\ 는 앞에서 말하듯이, Godot에서 사용되는 메인 "
"언어입니다. 이 언어는 다른 언어들에 비해 Godot와 높은 결합으로 얻는 장점이 있"
"습니다:"

#: ../../docs/getting_started/step_by_step/scripting.rst:28
msgid ""
"It's simple, elegant, and designed to be familiar for users of other "
"languages such as Lua, Python, Squirrel, etc."
msgstr ""
"간단합니다. 우아합니다. 그리고 디자인 면에서도 Lua, Python, Squirrel 등과 같"
"은 다른 언어들과 비슷합니다."

#: ../../docs/getting_started/step_by_step/scripting.rst:29
msgid "Loads and compiles blazingly fast."
msgstr "매우 빠르게 불러오고 컴파일합니다."

#: ../../docs/getting_started/step_by_step/scripting.rst:30
msgid ""
"The editor integration is a pleasure to work with, with code completion for "
"nodes, signals, and many other items pertaining to the scene being edited."
msgstr ""
"편집기 결합 능력은 노드, 시그널, 그리고 많은 편집 중인 씬과 관련된 항목을 위"
"한 코드 완성으로 인해 즐거움을 줍니다."

#: ../../docs/getting_started/step_by_step/scripting.rst:31
msgid ""
"Has vector types built-in (such as Vectors, transforms, etc.), making it "
"efficient for heavy use of linear algebra."
msgstr ""
"(Vectors, transforms 등과 같은) 많은 벡터 유형을 지니고 있어서, 선형 대수를 "
"많이 사용하는데 효율적입니다."

#: ../../docs/getting_started/step_by_step/scripting.rst:32
msgid ""
"Supports multiple threads as efficiently as statically typed languages - one "
"of the limitations that made us avoid VMs such as Lua, Squirrel, etc."
msgstr ""
"정적 타입 언어처럼 효율적인 여러 스레드를 지원합니다 - 이것이 Lua, Squirrel "
"등의 가상 머신을 피하게 만든 제한 중 하나 입니다."

#: ../../docs/getting_started/step_by_step/scripting.rst:33
msgid ""
"Uses no garbage collector, so it trades a small bit of automation (most "
"objects are reference counted anyway), by determinism."
msgstr ""
"쓰레기 수집을 쓰지 않습니다. 때문에 결정론적으로 인한 약간의 자동화를 교환합"
"니다 (어쨌든 대부분의 오브젝트들은 참조 카운트됩니다)."

#: ../../docs/getting_started/step_by_step/scripting.rst:34
msgid ""
"Its dynamic nature makes it easy to optimize sections of code in C++ (via "
"GDNative) if more performance is required, all without recompiling the "
"engine."
msgstr ""
"더 많은 성능이 필요하다면 (GDNative를 통해) C++의 코드 섹션을 쉽게 최적화할 "
"수 있습니다. 엔진을 전부 다시 컴파일 하지 않아도 됩니다."

#: ../../docs/getting_started/step_by_step/scripting.rst:36
msgid ""
"If you're undecided and have experience with programming, especially "
"dynamically typed languages, go for GDScript!"
msgstr ""
"아직 프로그래밍에 경험이 없고 특히 동적 타입 언어를 정하지 않았다면 GDScript"
"로 시작해보세요!"

#: ../../docs/getting_started/step_by_step/scripting.rst:40
#: ../../docs/getting_started/scripting/visual_script/index.rst:2
msgid "VisualScript"
msgstr "VisualScript"

#: ../../docs/getting_started/step_by_step/scripting.rst:42
msgid ""
"Beginning with 3.0, Godot offers :ref:`Visual "
"Scripting<doc_what_is_visual_script>`. This is a typical implementation of a "
"\"blocks and connections\" language, but adapted to how Godot works."
msgstr ""
"3.0을 시작하면서, Godot는 :ref:`Visual Scripting<doc_what_is_visual_script>`"
"\\ 을 제공합니다. \"블록과 연결\" 언어의 전형적인 구현 방식이지만 Godot의 작"
"동 방식에 적용되었습니다."

#: ../../docs/getting_started/step_by_step/scripting.rst:46
msgid ""
"Visual scripting is a great tool for non-programmers, or even for "
"experienced developers who want to make parts of the code more accessible to "
"others, like game designers or artists."
msgstr ""
"Visual scripting은 비 프로그래머 뿐만 아니라 경험 있는 프로그래머도 게임 디자"
"이너나 아티스트와 같은 사람들이 코드 일부분을 보기 쉽게 만들어 주는 멋진 도구"
"입니다."

#: ../../docs/getting_started/step_by_step/scripting.rst:50
msgid ""
"It can also be used by programmers to build state machines or custom visual "
"node workflows - for example, a dialogue system."
msgstr ""
"프로그래머는 이것으로 상태 시스템이나 맞춤 시각 노드 워크플로를 만들 수도 있"
"습니다 - 예를 들면 대화 시스템이죠."

#: ../../docs/getting_started/step_by_step/scripting.rst:55
msgid ".NET / C#"
msgstr ".NET / C#"

#: ../../docs/getting_started/step_by_step/scripting.rst:57
msgid ""
"As Microsoft's C# is a favorite amongst game developers, we have added "
"official support for it. C# is a mature language with tons of code written "
"for it, and support was added thanks to a generous donation from Microsoft."
msgstr ""
"Microsoft의 C#은 게임 개발자들 사이에서 사랑받는 언어입니다. 그래서 이것을 공"
"식으로 지원합니다. C#은 많은 코드로 작성된 완전한 언어로, Microsoft의 자비로"
"운 기여 덕분에 지원할 수 있게 되었습니다."

#: ../../docs/getting_started/step_by_step/scripting.rst:62
msgid ""
"It has an excellent tradeoff between performance and ease of use, although "
"one must be aware of its garbage collector."
msgstr ""
"비록 쓰레기 수집에 대해 알아야 하지만 이것은 퍼포먼스와 사용의 용이성 두가지"
"를 절충하고 있습니다."

#: ../../docs/getting_started/step_by_step/scripting.rst:65
msgid ""
"Since Godot uses the `Mono <https://mono-project.com>`_ .NET runtime, in "
"theory any third-party .NET library or framework can be used for scripting "
"in Godot, as well as any Common Language Infrastructure-compliant "
"programming language, such as F#, Boo or ClojureCLR. In practice however, C# "
"is the only officially supported .NET option."
msgstr ""
"Godot가 `Mono <https://mono-project.com>`_ .NET 런타임을 사용하기 때문에, 이"
"론적으로 모든 제 3자 .NET 라이브러리나 프레임워크를 Godot의 스크립트로 사용"
"할 수 있습니다. F#, Boo, ClojureCLR와 같은 공용 언어 인프라 호환 프로그래밍 "
"언어 또한 가능합니다. 하지만 실제로는 C#만 공식으로 지원하는 .NET 옵션입니다."

#: ../../docs/getting_started/step_by_step/scripting.rst:71
msgid "GDNative / C++"
msgstr "GDNative / C++"

#: ../../docs/getting_started/step_by_step/scripting.rst:73
msgid ""
"Finally, one of our brightest additions for the 3.0 release: GDNative allows "
"scripting in C++ without needing to recompile (or even restart) Godot."
msgstr ""
"마지막으로 3.0 출시에 가장 빛나는 추가 요소입니다: GDNative는 Godot를 다시 컴"
"파일 하지 않아도 (심지어 재시작을 하지 않아도) C++에서 스크립트할 수 있습니"
"다."

#: ../../docs/getting_started/step_by_step/scripting.rst:77
msgid ""
"Any C++ version can be used, and mixing compiler brands and versions for the "
"generated shared libraries works perfectly, thanks to our use of an internal "
"C API Bridge."
msgstr ""
"모든 C++버전을 사용할 수 있고, 내부 C API Bridge를 사용해서 생성한 공유 라이"
"브러리의 컴파일러 브랜드와 버전을 완벽하게 혼합할 수 있습니다."

#: ../../docs/getting_started/step_by_step/scripting.rst:81
msgid ""
"This language is the best choice for performance and does not need to be "
"used throughout an entire game, as other parts can be written in GDScript or "
"Visual Script. However the API is clear and easy to use as it resembles, "
"mostly, Godot's actual C++ API."
msgstr ""
"이 언어는 성능 분야에는 최고이지만 게임 전체에 사용할 필요는 없습니다. 다른 "
"부분은 GDScript나 VisualScript을 통해 다른 부분을 작성할 수 있기 때문이죠. 그"
"러나 이 API는 명확하고 사용하기 쉽습니다. 이 API의 대부분은 Godot의 실제 C++ "
"API와 유사합니다."

#: ../../docs/getting_started/step_by_step/scripting.rst:86
msgid ""
"More languages can be made available through the GDNative interface, but "
"keep in mind we don't have official support for them."
msgstr ""
"더 많은 언어는 GDNative 인터페이스를 통해 사용할 수 있지만 이 인터페이스에 대"
"한 공식적인 지원은 없습니다."

#: ../../docs/getting_started/step_by_step/scripting.rst:90
msgid "Scripting a scene"
msgstr "씬 스크립트하기"

#: ../../docs/getting_started/step_by_step/scripting.rst:92
msgid ""
"For the rest of this tutorial we'll set up a GUI scene consisting of a "
"button and a label, where pressing the button will update the label. This "
"will demonstrate:"
msgstr ""
"본 튜토리얼의 나머지 부분에서는 Button과 Label로 이루어진 GUI 씬을 설정합니"
"다. 여기서 Button을 누르면 Label이 업데이트됩니다. 이를 통해 다음을 설명합니"
"다:"

#: ../../docs/getting_started/step_by_step/scripting.rst:96
msgid "Writing a script and attaching it to a node."
msgstr "스크립트를 작성하여 노드에 붙이기."

#: ../../docs/getting_started/step_by_step/scripting.rst:97
msgid "Hooking up UI elements via signals."
msgstr "시그널을 통해 UI 요소들을 연결하기."

#: ../../docs/getting_started/step_by_step/scripting.rst:98
msgid "Writing a script that can access other nodes in the scene."
msgstr "씬의 다른 노드에 접근할 수 있는 스크립트를 작성하기."

#: ../../docs/getting_started/step_by_step/scripting.rst:100
msgid ""
"Before continuing, please make sure to read the :ref:"
"`GDScript<doc_gdscript>` reference. It's a language designed to be simple, "
"and the reference is short, so it will not take more than a few minutes to "
"get an overview of the concepts."
msgstr ""
"계속하기 전에 :ref:`GDScript<doc_gdscript>` 참조를 반드시 읽어 보기 바랍니"
"다. 이 언어는 간단하게 설계되었고, 참조가 짧기 때문에 개념을 파악하는 데 몇 "
"분 정도 밖에 걸리지 않습니다."

#: ../../docs/getting_started/step_by_step/scripting.rst:105
#: ../../docs/tutorials/physics/kinematic_character_2d.rst:79
#: ../../docs/tutorials/animation/introduction_2d.rst:109
msgid "Scene setup"
msgstr "씬 설정"

#: ../../docs/getting_started/step_by_step/scripting.rst:107
#, fuzzy
msgid ""
"Use the \"Add Child Node\" dialogue accessed from the Scene tab (or by "
"pressing :kbd:`Ctrl + A`) to create a hierarchy with the following nodes:"
msgstr ""
"씬 탭에서 \"자식 노드 추가하기(Add Child Node)\" 대화 상자를 사용해서 (혹은 "
"``Ctrl+A`` 키로) 다음 노드로 이루어진 계층 구조를 만듭니다:"

#: ../../docs/getting_started/step_by_step/scripting.rst:110
msgid "Panel"
msgstr "Panel"

#: ../../docs/getting_started/step_by_step/scripting.rst:112
#: ../../docs/getting_started/step_by_step/ui_introduction_to_the_ui_system.rst:144
msgid "Label"
msgstr "Label"

#: ../../docs/getting_started/step_by_step/scripting.rst:113
msgid "Button"
msgstr "버튼"

#: ../../docs/getting_started/step_by_step/scripting.rst:115
msgid "The scene tree should look like this:"
msgstr "씬 트리는 다음과 같아야 합니다:"

#: ../../docs/getting_started/step_by_step/scripting.rst:119
msgid ""
"Use the 2D editor to position and resize the Button and Label so that they "
"look like the image below. You can set the text from the Inspector tab."
msgstr ""
"2D 편집기로 Button과 Label을 아래 이미지와 같이 배치하고 크기를 조정합니다. "
"인스펙터(Inspecter) 탭에서 문자를 설정할 수 있습니다."

#: ../../docs/getting_started/step_by_step/scripting.rst:124
msgid "Finally, save the scene with a name such as ``sayhello.tscn``."
msgstr "마지막으로 ``sayhello.tscn``\\ 와 같은 이름으로 씬을 저장합니다."

#: ../../docs/getting_started/step_by_step/scripting.rst:129
msgid "Adding a script"
msgstr "스크립트 추가하기"

#: ../../docs/getting_started/step_by_step/scripting.rst:131
msgid ""
"Right click on the Panel node, then select \"Attach Script\" from the "
"context menu:"
msgstr ""
"Panel 노드에서 우클릭합니다. 우클릭 메뉴에서 \"스크립트 붙이기(Attach "
"Script)\"를 선택합니다:"

#: ../../docs/getting_started/step_by_step/scripting.rst:136
msgid ""
"The script creation dialog will pop up. This dialog allows you to set the "
"script's language, class name, and other relevant options."
msgstr ""
"스크립트 생성 대화 상자가 나타납니다. 여기서 스크립트 언어, 클래스 이름 및 기"
"타 관련 옵션을 설정할 수 있습니다."

#: ../../docs/getting_started/step_by_step/scripting.rst:139
msgid ""
"In GDScript, the file itself represents the class, so the class name field "
"is not editable."
msgstr ""
"GDScript에서 파일 자체는 클래스를 나타냅니다. 따라서 클래스 이름(Class Name) "
"칸은 수정할 수 없습니다."

#: ../../docs/getting_started/step_by_step/scripting.rst:142
msgid ""
"The node we're attaching the script to is a panel, so the Inherits field "
"will automatically be filled in with \"Panel\". This is what we want, as the "
"script's goal is to extend the functionality of our panel node."
msgstr ""
"스크립트를 붙이는 노드는 Panel입니다. 따라서 상속(Inherits) 칸은 자동으로 "
"\"Panel\"로 채워집니다. 이것이 우리의 목표입니다. 스크립트의 목적은 Panel 노"
"드의 기능을 확장하는 것이죠."

#: ../../docs/getting_started/step_by_step/scripting.rst:146
msgid "Finally, enter a path name for the script and select Create:"
msgstr ""
"마지막으로 스크립트 경로(Path) 이름을 입력하고 만들기(Create)를 선택합니다:"

#: ../../docs/getting_started/step_by_step/scripting.rst:150
msgid ""
"The script will then be created and added to the node. You can see this as "
"an \"Open script\" icon next to the node in the Scene tab, as well as in the "
"script property under Inspector:"
msgstr ""
"이제 스크립트가 만들어지고 노드에 추가됩니다. 스크립트가 추가된 것은 노드 옆"
"의 \"스크립트 열기(Open script)\" 아이콘으로 확인할 수 있습니다. 인스펙터"
"(Inspector) 아래의 Script 속성에서도 확인할 수 있습니다:"

#: ../../docs/getting_started/step_by_step/scripting.rst:156
msgid ""
"To edit the script, select either of these buttons, both of which are "
"highlighted in the above image. This will bring you to the script editor, "
"where a default template will be included:"
msgstr ""
"스크립트를 편집하려면 위 이미지에 강조 표시된 두 버튼 중 하나를 선택합니다. "
"그러면 기본 템플릿으로 된 스크립트 편집기로 이동합니다:"

#: ../../docs/getting_started/step_by_step/scripting.rst:161
msgid ""
"There's not much there. The ``_ready()`` function is called when the node, "
"and all its children, enters the active scene. **Note:** ``_ready()`` is not "
"the constructor; the constructor is instead ``_init()``."
msgstr ""
"안에 많은 내용이 있지는 않습니다. ``_ready()`` 함수는 노드와 노드의 모든 자식"
"이 활성 씬으로 들어갈 때 호출됩니다. **참고:** ``_ready()`` 는 생성자가 아닙"
"니다. 생성자는 ``_init()``\\ 입니다."

#: ../../docs/getting_started/step_by_step/scripting.rst:166
msgid "The role of the script"
msgstr "스크립트의 역할"

#: ../../docs/getting_started/step_by_step/scripting.rst:168
msgid ""
"A script adds behavior to a node. It is used to control how the node "
"functions as well as how it interacts with other nodes: children, parent, "
"siblings, and so on. The local scope of the script is the node. In other "
"words, the script inherits the functions provided by that node."
msgstr ""
"스크립트는 노드에 행위를 추가합니다. 스크립트는 노드가 작동하는 방식 말고도, "
"자식, 부모, 형제 등과 같은 다른 노드와 상호 작용하는 방식을 제어합니다. 스크"
"립트의 지역 범위는 노드입니다. 다시 말해, 스크립트는 노드가 제공하는 함수에 "
"속합니다."

#: ../../docs/getting_started/step_by_step/scripting.rst:179
msgid "Handling a signal"
msgstr "시그널(Signal) 다루기"

#: ../../docs/getting_started/step_by_step/scripting.rst:181
msgid ""
"Signals are \"emitted\" when some specific kind of action happens, and they "
"can be connected to any function of any script instance. Signals are used "
"mostly in GUI nodes, although other nodes have them too, and you can even "
"define custom signals in your own scripts."
msgstr ""
"시그널(Signal)은 특정 행동을 할 때 \"방출(emit)\"합니다. 그리고 시그널은 스크"
"립트 인스턴스의 모든 함수에 연결될 수 있습니다. 시그널은 대부분 GUI 노드에서 "
"사용됩니다. 하지만 다른 노드에도 시그널이 있고, 스크립트에서 맞춤 시그널을 정"
"의할 수도 있습니다."

#: ../../docs/getting_started/step_by_step/scripting.rst:186
msgid ""
"In this step, we'll connect the \"pressed\" signal to a custom function. "
"Forming connections is the first part and defining the custom function is "
"the second part. For the first part, Godot provides two ways to create "
"connections: through a visual interface the editor provides or through code."
msgstr ""
"이 단계에서, \"pressed\" 시그널을 맞춤 함수에 연결할 것입니다. 먼저 연결을 형"
"성하고, 그런 다음 맞춤 함수를 정의합니다. Godot에서는 연결을 만드는 두 가지 "
"방법을 제공합니다: 편집기의 시각적 인터페이스를 통해 연결하거나, 코드를 통해 "
"연결합니다."

#: ../../docs/getting_started/step_by_step/scripting.rst:191
msgid ""
"While we will use the code method for the remainder of this tutorial series, "
"let's cover how the editor interface works for future reference."
msgstr ""
"이 튜토리얼 시리즈의 나머지에서는 코드 메서드를 사용하겠습니다. 그러나 나중"
"에 이것을 보고 참조할 수 있도록 어떻게 편집기 인터페이스가 작동하는지 알아봅"
"시다."

#: ../../docs/getting_started/step_by_step/scripting.rst:194
msgid ""
"Select the Button node in the scene tree and then select the \"Node\" tab. "
"Next, make sure that you have \"Signals\" selected."
msgstr ""
"씬 트리에서 Button 노드를 고르고 \"노드(Node)\" 탭을 선택하세요. 그런 다음 "
"\"시그널(Signals)\"이 선택되어 있는지 확인하세요."

#: ../../docs/getting_started/step_by_step/scripting.rst:199
msgid ""
"If you then select \"pressed()\" under \"BaseButton\" and click the "
"\"Connect...\" button in the bottom right, you'll open up the connection "
"creation dialogue."
msgstr ""
"\"BaseButton\" 아래에 있는 \"pressed()\"를 고르고 오른쪽 아래 \"연결하기..."
"(Connect...)\" 버튼을 누릅니다. 연결 만들기 대화 상자가 열립니다."

#: ../../docs/getting_started/step_by_step/scripting.rst:204
msgid ""
"The top of the dialogue displays a list of your scene's nodes with the "
"emitting node's name highlighted in blue. Select the \"Panel\" node here."
msgstr ""
"대화 상자 상단에서 당신의 씬에 있는 노드 목록을 보여줍니다. 그 중 방출하는 노"
"드의 이름은 파란색으로 강조되어 있습니다. 여기서 \"Panel\" 노드를 선택하세요."

#: ../../docs/getting_started/step_by_step/scripting.rst:207
msgid ""
"The bottom of the dialogue shows the name of the method that will be "
"created. By default, the method name will contain the emitting node's name "
"(\"Button\" in this case), resulting in ``_on_[EmitterNode]_[signal_name]``."
msgstr ""
"대화 상자 하단에서 만들 메서드 이름을 보여줍니다. 기본적으로 메서드 이름은 방"
"출하는 노드의 이름 (지금의 경우는 \"Button\")을 포함하고 있습니다. 즉, "
"``_on_[방출하는노드]_[시그널이름]``\\ 입니다."

#: ../../docs/getting_started/step_by_step/scripting.rst:211
msgid ""
"And that concludes the guide on how to use the visual interface. However, "
"this is a scripting tutorial, so for the sake of learning, let's dive into "
"the manual process!"
msgstr ""
"그럼 이것으로 시각적 인터페이스를 사용하는 법에 관한 강좌를 마칩니다. 하지만 "
"이것은 스크립팅 튜토리얼입니다. 학습을 위해 수작업 과정을 알아봅시다!"

#: ../../docs/getting_started/step_by_step/scripting.rst:215
msgid ""
"To accomplish this, we will introduce a function that is probably the most "
"used by Godot programmers: :ref:`Node.get_node() "
"<class_Node_method_get_node>`. This function uses paths to fetch nodes "
"anywhere in the scene, relative to the node that owns the script."
msgstr ""
"이 튜토리얼을 달성하기 위해, 우리는 Godot 프로그래머들이 가장 잘 사용하는 함"
"수를 소개하겠습니다: :ref:`Node.get_node() <class_Node_method_get_node>`. 이 "
"함수는 스크립트가 있는 노드 기준 상대적인 경로를 사용해서 씬에 있는 노드를 가"
"져옵니다."

#: ../../docs/getting_started/step_by_step/scripting.rst:220
msgid ""
"For the sake of convenience, delete everything underneath ``extends Panel``. "
"You will fill out the rest of the script manually."
msgstr ""
"편의상 ``extend Panel`` 아래에 있는 모든 것을 지우세요. 나머지는 수동으로 채"
"울 것입니다."

#: ../../docs/getting_started/step_by_step/scripting.rst:223
msgid ""
"Because the Button and Label are siblings under the Panel where the script "
"is attached, you can fetch the Button by typing the following underneath the "
"``_ready()`` function:"
msgstr ""
"스크립트를 붙일 때 Button과 Label은 Panel 아래에 나란히 있습니다. 따라서 "
"``_ready()`` 함수 아래에 다음과 같이 입력해서 Button을 가져올 수 있습니다:"

#: ../../docs/getting_started/step_by_step/scripting.rst:240
msgid "Next, write a function which will be called when the button is pressed:"
msgstr "다음으로 버튼이 눌릴 때 호출하는 함수를 작성합니다:"

#: ../../docs/getting_started/step_by_step/scripting.rst:255
#, fuzzy
msgid ""
"Finally, connect the button's \"pressed\" signal to ``_on_Button_pressed()`` "
"by using :ref:`Object.connect() <class_Object_method_connect>`."
msgstr ""
"마지막으로 버튼의 \"pressed\" 시그널을 ``_ready()``\\ 에 연결하도록 :ref:"
"`Object.connect() <class_Object_method_connect>`\\ 를 사용합니다."

#: ../../docs/getting_started/step_by_step/scripting.rst:271
msgid "The final script should look like this:"
msgstr "최종 스크립트는 다음과 같아야 합니다:"

#: ../../docs/getting_started/step_by_step/scripting.rst:304
msgid ""
"Run the scene and press the button. You should get the following result:"
msgstr "씬을 실행하고 버튼을 누르면 다음과 같은 결과를 얻을 수 있습니다:"

#: ../../docs/getting_started/step_by_step/scripting.rst:308
msgid "Why, hello there! Congratulations on scripting your first scene."
msgstr "어머, 안녕하세요! 첫번째 씬 스크립팅을 축하해요."

#: ../../docs/getting_started/step_by_step/scripting.rst:312
msgid ""
"A common misunderstanding regarding this tutorial is how ``get_node(path)`` "
"works. For a given node, ``get_node(path)`` searches its immediate children. "
"In the above code, this means that Button must be a child of Panel. If "
"Button were instead a child of Label, the code to obtain it would be:"
msgstr ""
"이 튜토리얼에 관한 일반적인 오해로 ``get_node(path)``\\ 가 작동하는 방식이 있"
"습니다. 주어진 노드는 ``get_node(path)``\\ 가 바로 아래의 자식을 찾습니다. "
"위 코드에서 Button은 Panel의 자식이라는 것이죠. 만일 버튼이 Panel이 아니라 "
"Label의 자식이었다면, 나오는 코드는 다음과 같을 것입니다:"

#: ../../docs/getting_started/step_by_step/scripting.rst:330
msgid "Also, remember that nodes are referenced by name, not by type."
msgstr "또한 노드는 이름으로 참조됩니다. 유형이 아닙니다."

#: ../../docs/getting_started/step_by_step/scripting.rst:334
msgid ""
"The right-hand panel of the connect dialogue is for binding specific values "
"to the connected function's parameters. You can add and remove values of "
"different types."
msgstr ""
"연결 대화 상자의 오른쪽 패널은 특정 값을 연결된 함수의 매개변수에 묶기 위한 "
"것입니다. 다른 유형의 값을 추가하거나 제거할 수 있습니다."

#: ../../docs/getting_started/step_by_step/scripting.rst:338
msgid ""
"The code approach also enables this with a 4th ``Array`` parameter that is "
"empty by default. Feel free to read up on the ``Object.connect`` method for "
"more information."
msgstr ""
"코드에서도 기본적으로 비어 있는 4번째 ``배열(Array)`` 매개변수를 사용하면 가"
"능합니다. 더 많은 정보를 원한다면 언제든지 ``Object.connect`` 메서드를 읽어보"
"세요."

#: ../../docs/getting_started/step_by_step/scripting_continued.rst:4
msgid "Scripting (continued)"
msgstr "스크립팅 (계속)"

#: ../../docs/getting_started/step_by_step/scripting_continued.rst:7
msgid "Processing"
msgstr "처리(Process)하기"

#: ../../docs/getting_started/step_by_step/scripting_continued.rst:9
msgid ""
"Several actions in Godot are triggered by callbacks or virtual functions, so "
"there is no need to write code that runs all the time."
msgstr ""
"Godot에서 여러 작업은 콜백 또는 가상 함수로 조작됩니다. 그래서 항상 실행되는 "
"코드를 작성할 필요가 없습니다."

#: ../../docs/getting_started/step_by_step/scripting_continued.rst:12
msgid ""
"However, it is still common to need a script to be processed on every frame. "
"There are two types of processing: idle processing and physics processing."
msgstr ""
"하지만 여전히 모든 프레임에서 처리하는 스크립트가 필요한 경우가 많습니다. 처"
"리(Process)에는 두가지 유형이 있습니다: 정적 처리(Idel Processing)와 동적 처"
"리(Physics Processing)."

#: ../../docs/getting_started/step_by_step/scripting_continued.rst:16
msgid ""
"Idle processing is activated when the method :ref:`Node._process() "
"<class_Node_method__process>` is found in a script. It can be turned off and "
"on with the :ref:`Node.set_process() <class_Node_method_set_process>` "
"function."
msgstr ""
"정적 처리는 스크립트에서 메서드 :ref:`Node._process() "
"<class_Node_method__process>`\\ 가 발견되면 활성화됩니다. :ref:`Node."
"set_process() <class_Node_method_set_process>`\\ 를 사용해서 이 기능을 껐다 "
"켰다 할 수 있습니다."

#: ../../docs/getting_started/step_by_step/scripting_continued.rst:20
msgid "This method will be called every time a frame is drawn:"
msgstr "이 메서드는 매 프레임마다 호출됩니다:"

#: ../../docs/getting_started/step_by_step/scripting_continued.rst:36
msgid ""
"It's important to bear in mind that the frequency with which ``_process()`` "
"will be called depends on how many frames per second (FPS) your application "
"is running at. This rate can vary over time and devices."
msgstr ""
"``_process()``\\ 가 호출되는 비중은 응용 프로그램이 초 당 몇 프레임 (FPS)으"
"로 실행되는지에 따라 다르다는 것을 마음에 새기는 것이 중요합니다. 이 비율은 "
"시간과 기기에 따라 다를 수 있습니다."

#: ../../docs/getting_started/step_by_step/scripting_continued.rst:40
msgid ""
"To help manage this variability the ``delta`` parameter contains the time "
"elapsed in seconds, as a floating point, since the previous call to "
"``_process()``."
msgstr ""
"이 가변성을 다루는 것을 돕기 위해, ``_process()``\\ 가 호출된 이후부터 "
"``delta`` 매개 변수는 경과된 시간을 초 단위, 즉 실수의 형태로 갖습니다."

#: ../../docs/getting_started/step_by_step/scripting_continued.rst:43
msgid ""
"This parameter can be used to make sure things always take the same amount "
"of time, regardless of the game's FPS."
msgstr ""
"이 매개 변수를 사용하면 게임의 초 당 프레임 수와 관계 없이, 항상 동일한 시간"
"이 소요되도록 할 수 있습니다."

#: ../../docs/getting_started/step_by_step/scripting_continued.rst:46
msgid ""
"For example, movement is often multiplied with a time delta to make movement "
"speed both constant and independent from the frame rate."
msgstr ""
"예를 들어 이동은 시간 delta와 곱해서 이동 속도를 일정하게 하고 프레임 비율과 "
"무관하게 합니다."

#: ../../docs/getting_started/step_by_step/scripting_continued.rst:49
msgid ""
"Physics processing with ``_physics_process()`` is similar, but it should be "
"used for processes that must happen before each physics step, such as "
"controlling a character. It always runs before a physics step and it is "
"called at fixed time intervals: 60 times per second by default. You can "
"change the interval from the Project Settings, under Physics -> Common -> "
"Physics Fps."
msgstr ""
"``_physics_process()``\\ 를 이용한 동적 처리도 이와 유사합니다. 하지만 이것"
"은 각 동적 단계 이전에서 발생해야 하는 과정에서 사용해야 합니다. 예를 들면 캐"
"릭터 조종하는 것이 있죠. 이것은 항상 동적 단계 이전에 실행되며 고정된 시간 간"
"격으로 호출됩니다: 기본은 초 당 60회. 프로젝트 설정(Project Settings)에서 "
"Physics -> Common -> Physics Fps에서 시간 간격을 변경할 수 있습니다."

#: ../../docs/getting_started/step_by_step/scripting_continued.rst:55
msgid ""
"The function ``_process()``, however, is not synced with physics. Its frame "
"rate is not constant and is dependent on hardware and game optimization. Its "
"execution is done after the physics step on single-threaded games."
msgstr ""
"그러나 ``_proceed()`` 함수는 동적과 동기화되지 않습니다. 프레임 비율이 일정하"
"지 않고 하드웨어와 게임 최적화에 의존하기 때문이죠. 이것은 단일 스레드 게임"
"의 동적 단계를 거친 후에 실행됩니다."

#: ../../docs/getting_started/step_by_step/scripting_continued.rst:58
msgid ""
"A simple way to see the ``_process()`` function at work is to create a scene "
"with a single Label node, with the following script:"
msgstr ""
"간단하게 ``_process()`` 함수가 작동하는 것을 보려면 Label 노드 하나로 된 씬"
"을 만들고, 다음 스크립트를 넣습니다:"

#: ../../docs/getting_started/step_by_step/scripting_continued.rst:85
msgid "Which will show a counter increasing each frame."
msgstr "위 스크립트는 프레임 당 증가하는 카운터를 보여 줍니다."

#: ../../docs/getting_started/step_by_step/scripting_continued.rst:88
msgid "Groups"
msgstr "그룹"

#: ../../docs/getting_started/step_by_step/scripting_continued.rst:90
msgid ""
"Groups in Godot work like tags you might have come across in other software. "
"A node can be added to as many groups as desired. This is a useful feature "
"for organizing large scenes. There are two ways to add nodes to groups. The "
"first is from the UI, using the Groups button under the Node panel:"
msgstr ""
"Godot에서 그룹은 다른 소프트웨어에서 접했을 법한태그와 비슷합니다. 노드는 많"
"은 그룹에 원하는 만큼 추가될 수 있습니다. 이는 거대한 씬을 조직하는데 유용한 "
"기능입니다. 노드를 그룹에 추가하는 두 가지 방법이 있습니다. 먼저 첫 번째는 UI"
"에서 하는 것입니다. 노드(Node) 패널 하단의 그룹(Groups) 버튼을 사용합니다:"

#: ../../docs/getting_started/step_by_step/scripting_continued.rst:97
msgid ""
"And the second way is from code. The following script would add the current "
"node to the ``enemies`` group as soon as it appeared in the scene tree."
msgstr ""
"두 번째 방법은 코드에서 하는 것입니다. 다음 스크립트는 현재 노드가 씬 트리에 "
"나타나면 ``enemies``\\ 라는 그룹에 노드가 추가되는 스크립트입니다."

#: ../../docs/getting_started/step_by_step/scripting_continued.rst:115
msgid ""
"This way, if the player is discovered sneaking into a secret base, all "
"enemies can be notified about its alarm sounding by using :ref:`SceneTree."
"call_group() <class_SceneTree_method_call_group>`:"
msgstr ""
"이렇게 하면 플레이어가 비밀 기지에 몰래 들어간 것이 발각될 경우, :ref:"
"`SceneTree.call_group() <class_SceneTree_method_call_group>`\\ 을 사용하여 모"
"든 적이 경보가 울린다는 사실을 인지할 수 있습니다:"

#: ../../docs/getting_started/step_by_step/scripting_continued.rst:132
msgid ""
"The above code calls the function ``player_was_discovered`` on every member "
"of the group ``enemies``."
msgstr ""
"위의 코드는 그룹 ``enemies``\\ 의 모든 구성원이``player_was_discovered`` 함수"
"를 호출합니다."

#: ../../docs/getting_started/step_by_step/scripting_continued.rst:135
msgid ""
"It is also possible to get the full list of ``enemies`` nodes by calling :"
"ref:`SceneTree.get_nodes_in_group() "
"<class_SceneTree_method_get_nodes_in_group>`:"
msgstr ""
"또한 :ref:`SceneTree.get_nodes_in_group() "
"<class_SceneTree_method_get_nodes_in_group>`\\ 을 호출하여 ``enemies`` 노드"
"의 전체 목록을 가져올 수도 있습니다:"

#: ../../docs/getting_started/step_by_step/scripting_continued.rst:148
msgid ""
"The :ref:`SceneTree <class_SceneTree>` class provides many useful methods, "
"like interacting with scenes, their node hierarchy and groups of nodes. It "
"allows you to easily switch scenes or reload them, to quit the game or pause "
"and unpause it. It even comes with interesting signals. So check it out if "
"you have some time!"
msgstr ""
":ref:`SceneTree <class_SceneTree>` 클래스는 씬끼리, 노드 계층끼리, 그리고 노"
"드의 그룹끼리 상호작용하는 많은 유용한 메서드를 제공합니다. 이것으로 쉽게 씬"
"을 바꾸거나 다시 불러올 수 있고, 게임을 끄거나 일시정지를 켜고 끄는 행위를 "
"할 수 있습니다. 심지어 흥미로운 시그널도 함께 제공됩니다. 시간이 된다면 한번 "
"확인해보세요!"

#: ../../docs/getting_started/step_by_step/scripting_continued.rst:156
#: ../../docs/tutorials/gui/custom_gui_controls.rst:157
msgid "Notifications"
msgstr "알림(Notification)"

#: ../../docs/getting_started/step_by_step/scripting_continued.rst:158
msgid ""
"Godot has a system of notifications. These are usually not needed for "
"scripting, as it's too low-level and virtual functions are provided for most "
"of them. It's just good to know they exist. For example, you may add an :ref:"
"`Object._notification() <class_Object_method__notification>` function in "
"your script:"
msgstr ""
"Godot에는 알림 시스템이 있습니다. 보통은 스크립팅에 쓰이지 않습니다. 너무 로"
"우 레벨이며 대부분은 가상 함수에서 제공하기 때문이죠. 그냥 존재한다는 것 만으"
"로도 좋은 일입니다. 예를 들어 스크립트에 :ref:`Object._notification() "
"<class_Object_method__notification>` 함수를 추가할 수 있습니다:"

#: ../../docs/getting_started/step_by_step/scripting_continued.rst:193
msgid ""
"The documentation of each class in the :ref:`Class Reference <toc-class-"
"ref>` shows the notifications it can receive. However, in most cases "
"GDScript provides simpler overridable functions."
msgstr ""
":ref:`Class Reference <toc-class-ref>`\\ 에서 각 클래스의 문서에서는 받을 수 "
"있는 알림을 보여줍니다. 하지만 대부분의 경우, GDScript에서 다시 정의하는 것"
"을 더 간단하게 할 수 있는 함수를 제공합니다."

#: ../../docs/getting_started/step_by_step/scripting_continued.rst:198
msgid "Overridable functions"
msgstr "다시 정의할 수 있는 함수"

#: ../../docs/getting_started/step_by_step/scripting_continued.rst:200
msgid ""
"Such overridable functions, which are described as follows, can be applied "
"to nodes:"
msgstr ""
"아래에서 설명하는 다시 정의할 수 있는 함수는 노드에 적용할 수 있습니다:"

#: ../../docs/getting_started/step_by_step/scripting_continued.rst:272
msgid ""
"As mentioned before, it's better to use these functions instead of the "
"notification system."
msgstr ""
"앞서 언급했듯이, 이러한 함수는 알림 시스템 대신 사용하는 것이 좋습니다."

#: ../../docs/getting_started/step_by_step/scripting_continued.rst:276
msgid "Creating nodes"
msgstr "노드 만들기"

#: ../../docs/getting_started/step_by_step/scripting_continued.rst:278
msgid ""
"To create a node from code, call the ``.new()`` method, like for any other "
"class-based datatype. For example:"
msgstr ""
"다른 클래스 기반 데이터 유형과 마찬가지로, 코드로 노드를 만들려면 ``.new()`` "
"메서드를 호출해야 합니다. 예를 들어:"

#: ../../docs/getting_started/step_by_step/scripting_continued.rst:302
msgid ""
"To delete a node, be it inside or outside the scene, ``free()`` must be used:"
msgstr ""
"씬 내부 또는 외부에 있는 노드를 삭제하려면 ``free()``\\ 를 사용해야 합니다:"

#: ../../docs/getting_started/step_by_step/scripting_continued.rst:318
msgid ""
"When a node is freed, it also frees all its child nodes. Because of this, "
"manually deleting nodes is much simpler than it appears. Free the base node "
"and everything else in the subtree goes away with it."
msgstr ""
"노드가 삭제되면 모든 하위 노드도 삭제됩니다. 따라서 수동으로 노드를 삭제하는 "
"것이 수동으로 나타내는 것보다 훨씬 간단합니다. 기본 노드를 삭제하면 하위 트리"
"에 있는 다른 모든 것이 삭제됩니다."

#: ../../docs/getting_started/step_by_step/scripting_continued.rst:322
msgid ""
"A situation might occur where we want to delete a node that is currently "
"\"blocked\", because it is emitting a signal or calling a function. This "
"will crash the game. Running Godot with the debugger will often catch this "
"case and warn you about it."
msgstr ""
"현재 \"차단된\" 노드를 삭제하려는 상황이 발생할 수 있습니다. 차단된 노드는 시"
"그널을 방출하고 있거나 함수를 호출하고 있죠. 이것은 게임을 망칠 것입니다. 디"
"버거(Debugger)로 Godot를 실행하면 이 경우를 발견하고 경고를 표시하는 경우가 "
"많습니다."

#: ../../docs/getting_started/step_by_step/scripting_continued.rst:327
msgid ""
"The safest way to delete a node is by using :ref:`Node.queue_free() "
"<class_Node_method_queue_free>`. This erases the node safely during idle."
msgstr ""
"노드를 삭제하는 가장 안전한 방법은 :ref:`Node.queue_free() "
"<class_Node_method_queue_free>`\\ 를 사용하는 것입니다. 이것은 대기 상태일 "
"때 노드를 안전하게 삭제합니다."

#: ../../docs/getting_started/step_by_step/scripting_continued.rst:345
msgid "Instancing scenes"
msgstr "씬 인스턴스하기"

#: ../../docs/getting_started/step_by_step/scripting_continued.rst:347
msgid ""
"Instancing a scene from code is done in two steps. The first one is to load "
"the scene from your hard drive:"
msgstr ""
"코드에서 씬을 인스턴스하는 작업은 두 단계로 이루어집니다. 첫 번째 방법은 하"
"드 드라이브에서 씬을 불러오는 것입니다:"

#: ../../docs/getting_started/step_by_step/scripting_continued.rst:360
msgid ""
"Preloading it can be more convenient, as it happens at parse time (GDScript "
"only):"
msgstr ""
"(GDScript인 경우라면) 구문 분석 시간 동안 프리로드(Preload)를 할 수 있어서 "
"더 편리합니다:"

#: ../../docs/getting_started/step_by_step/scripting_continued.rst:368
msgid ""
"But ``scene`` is not yet a node. It's packed in a special resource called :"
"ref:`PackedScene <class_PackedScene>`. To create the actual node, the "
"function :ref:`PackedScene.instance() <class_PackedScene_method_instance>` "
"must be called. This will return the tree of nodes that can be added to the "
"active scene:"
msgstr ""
"그러나 ``씬(Scene)``\\ 은 아직 노드가 아닙니다. 이것은 :ref:`PackedScene "
"<class_PackedScene>`\\(포장된 씬)이라는 특수 리소스에 들어 있습니다. 실제 노"
"드를 만들려면 :ref:`PackedScene.instance() "
"<class_PackedScene_method_instance>` 함수를 호출해야 합니다. 그러면 "
"PackedScene은 활성 씬에 추가할 수 있는 노드 트리를 반환합니다:"

#: ../../docs/getting_started/step_by_step/scripting_continued.rst:386
msgid ""
"The advantage of this two-step process is that a packed scene may be kept "
"loaded and ready to use so that you can create as many instances as desired. "
"This is especially useful to quickly instance several enemies, bullets, and "
"other entities in the active scene."
msgstr ""
"이 두 단계 처리의 이점은 PackedScene이 불러온 상태로 유지되고 언제나 사용될 "
"준비를 합니다. 이렇게 해서 인스턴스를 원하는 만큼 만들 수 있습니다. 이것은 특"
"히 활성 씬에서 많은 적, 총알, 그 외 다른 개체를 신속하게 인스턴스하는 데 유용"
"합니다."

#: ../../docs/getting_started/step_by_step/scripting_continued.rst:394
msgid "Register scripts as classes"
msgstr "스크립트를 클래스로 등록하기"

#: ../../docs/getting_started/step_by_step/scripting_continued.rst:396
msgid ""
"Godot has a \"Script Class\" feature to register individual scripts with the "
"Editor. By default, you can only access unnamed scripts by loading the file "
"directly."
msgstr ""
"Godot는 편집기의 각 스크립트를 등록하기 위한 \"스크립트 클래스(Script "
"Class)\" 기능을 갖고 있습니다. 기본적으로 이름이 없는 스크립트에 접근하려면 "
"파일을 직접 불러와야 합니다."

#: ../../docs/getting_started/step_by_step/scripting_continued.rst:400
msgid ""
"You can name a script and register it as a type in the editor with the "
"``class_name`` keyword followed by the class's name. You may add a comma and "
"an optional path to an image to use as an icon. You will then find your new "
"type in the Node or Resource creation dialog."
msgstr ""
"스크립트에 이름을 짓고 클래스의 이름을 뜻하는 ``class_name`` 키워드로 스크립"
"트를 유형으로 등록할 수 있습니다. 쉼표와 이미지로 향하는 경로를 선택적으로 추"
"가하면 아이콘으로도 사용할 수 있습니다. 그런 다음 노드(Node)나 리소스"
"(Resource) 만들기 대화 상자에서 당신의 새 유형을 찾을 수 있습니다."

#: ../../docs/getting_started/step_by_step/scripting_continued.rst:422
msgid "In Godot 3.1:"
msgstr "Godot 3.1에서는:"

#: ../../docs/getting_started/step_by_step/scripting_continued.rst:424
msgid ""
"Only GDScript and NativeScript, i.e., C++ and other GDNative-powered "
"languages, can register scripts."
msgstr ""
"오직 GDScript와 NativeScript만 가능합니다. 즉, C++와 다른 GDNative의 영향을 "
"받는 언어만 스크립트를 등록할 수 있습니다."

#: ../../docs/getting_started/step_by_step/scripting_continued.rst:425
msgid "Only GDScript creates global variables for each named script."
msgstr "오직 GDScript만 각 이름이 있는 스크립트에 전역 변수를 만듭니다."

#: ../../docs/getting_started/step_by_step/signals.rst:4
#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:1292
#: ../../docs/getting_started/scripting/gdscript/gdscript_styleguide.rst:464
#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:164
#: ../../docs/tutorials/plugins/gdnative/gdnative-cpp-example.rst:696
#: ../../docs/development/cpp/object_class.rst:211
msgid "Signals"
msgstr "시그널"

#: ../../docs/getting_started/step_by_step/signals.rst:9
msgid ""
"Signals are Godot's version of the *observer* pattern. They allow a node to "
"send out a message that other nodes can listen for and respond to. For "
"example, rather than continuously checking a button to see if it's being "
"pressed, the button can emit a signal when it's pressed."
msgstr ""
"시그널은 *옵저버(Observer)* 패턴의 Godot 버전입니다. 시그널로 노드는 다른 노"
"드로 메시지를 보내고 다른 노드는 이것을 받고 응답할 수 있습니다. 예를 들어, "
"버튼의 눌림 여부를 파악하기 위해 주기적으로 버튼을 확인하는 대신, 버튼이 눌렸"
"을 때 시그널을 방출(Emit)할 수 있습니다."

#: ../../docs/getting_started/step_by_step/signals.rst:14
msgid ""
"You can read more about the observer pattern here: http://"
"gameprogrammingpatterns.com/observer.html"
msgstr ""
"옵저버 패턴에 대해 더 알아보려면 다음 주소를 참고하세요: http://"
"gameprogrammingpatterns.com/observer.html"

#: ../../docs/getting_started/step_by_step/signals.rst:16
msgid ""
"Signals are a way to *decouple* your game objects, which leads to better "
"organized and more manageable code. Instead of forcing game objects to "
"expect other objects to always be present, they can instead emit signals "
"that all interested objects can subscribe to and respond to."
msgstr ""
"시그널은 게임 객체끼리 *이별하게* 만듭니다. 그래서 보다 체계적이고 관리하기 "
"좋은 코드로 만들어줍니다. 게임 객체가 항상 다른 객체를 기대하도록 강요하는 대"
"신, 시그널을 방출해 시그널에 관심있는 객체 모두가 시그널을 받고 응답할 수 있"
"습니다."

#: ../../docs/getting_started/step_by_step/signals.rst:21
msgid ""
"Below you can see some examples of how you can use signals in your own "
"projects."
msgstr ""
"아래에서 프로젝트에 시그널을 활용할 수 있는 방법의 예시들을 살펴보겠습니다."

#: ../../docs/getting_started/step_by_step/signals.rst:24
msgid "Timer example"
msgstr "Timer 예제"

#: ../../docs/getting_started/step_by_step/signals.rst:26
msgid ""
"To see how signals work, let's try using a :ref:`Timer <class_Timer>` node. "
"Create a new scene with a Node2D and two children: a Timer and a :ref:"
"`Sprite <class_Sprite>`. In the Scene dock, rename Node2D to TimerExample."
msgstr ""
"시그널이 어떻게 작동하는지 알아보기 위해, :ref:`Timer <class_Timer>` 노드를 "
"사용하겠습니다. Node2D와 두 자식 노드가 있는 씬을 만듭니다: 하나는 Timer이고 "
"다른 하나는 :ref:`Sprite <class_Sprite>`\\ 입니다. 씬 독에서 Node2D의 이름을 "
"TimerExample로 바꿉니다."

#: ../../docs/getting_started/step_by_step/signals.rst:30
msgid ""
"For the Sprite's texture, you can use the Godot icon, or any other image you "
"like. Do so by selecting ``Load`` in the Sprite's Texture attribute drop-"
"down menu. Attach a script to the root node, but don't add any code to it "
"yet."
msgstr ""
"Sprite의 텍스처로는 Godot 아이콘이나 다른 원하는 이미지를 사용할 수 있습니"
"다. Sprite의 Texture 속성 드롭 다운 메뉴에서 ``불러오기(Load)``\\ 를 선택하"
"면 됩니다. 스크립트를 루트 노드에 붙입니다. 하지만 아직 코드는 추가하지 마세"
"요."

#: ../../docs/getting_started/step_by_step/signals.rst:34
msgid "Your scene tree should look like this:"
msgstr "씬 트리는 다음과 같아야 합니다:"

#: ../../docs/getting_started/step_by_step/signals.rst:38
msgid ""
"In the Timer node's properties, check the \"On\" box next to *Autostart*. "
"This will cause the timer to start automatically when you run the scene. You "
"can leave the *Wait Time* at 1 second."
msgstr ""
"Timer 노드의 속성 중, *Autostart* 옆에 상자를 \"On\" 으로 하세요. 그러면 씬"
"을 실행할 때 자동으로 타이머가 실행합니다. *Wait Time*\\ 은 1초로 두세요."

#: ../../docs/getting_started/step_by_step/signals.rst:42
msgid ""
"Next to the \"Inspector\" tab is a tab labeled \"Node\". Click on this tab "
"and you'll see all of the signals that the selected node can emit. In the "
"case of the Timer node, the one we're concerned with is \"timeout\". This "
"signal is emitted whenever the Timer reaches ``0``."
msgstr ""
"\"인스펙터(Inspecter)\" 탭 옆에 \"노드(Node)\"라고 적힌 탭이 있습니다. 이 탭"
"을 클릭하면 선택한 노드에서 방출할 수 있는 모든 시그널이 표시됩니다. Timer 노"
"드의 경우, 주목해야 할 시그널은 \"timeout\"입니다. 이 시그널은 Timer가 ``0``"
"\\ 이 될 때마다 방출합니다."

#: ../../docs/getting_started/step_by_step/signals.rst:49
msgid ""
"Click on the \"timeout()\" signal and click \"Connect...\" at the bottom of "
"the signals panel. You'll see the following window, where you can define how "
"you want to connect the signal:"
msgstr ""
"\"timeout()\" 시그널을 클릭하고 그리고 \"연결하기...(Connect...)\"를 누릅니"
"다. 다음과 같은 창이 나타나고 여기서 시그널을 어떻게 연결할 지 정의할 수 있습"
"니다:"

#: ../../docs/getting_started/step_by_step/signals.rst:55
msgid ""
"On the left side, you'll see the nodes in your scene and can select the node "
"that you want to \"listen\" for the signal. Note that the Timer node is "
"blue, this is a visual indication that it's the node that is emitting the "
"signal. Select the root node."
msgstr ""
"왼쪽에는 씬의 노드가 표시되고, 시그널을 \"받는\" 노드를 선택할 수 있습니다. "
"Timer 노드는 푸른색으로 되어 있어 시그널을 방출하는 노드임을 시각적으로 나타"
"냅니다. 루트 노드를 선택합니다."

#: ../../docs/getting_started/step_by_step/signals.rst:60
msgid ""
"The target node *must* have a script attached or you'll receive an error "
"message."
msgstr ""
"대상 노드는 *반드시* 스크립트가 붙게 되고 그렇지 않으면 오류 메시지를 받습니"
"다."

#: ../../docs/getting_started/step_by_step/signals.rst:63
msgid ""
"On the right side, you can bind an arbitrary number of arguments of "
"(possibly) different types. This can be useful when you have more than one "
"signal connected to the same method, as each signal propagation will result "
"in different values for those extra call arguments."
msgstr ""

#: ../../docs/getting_started/step_by_step/signals.rst:67
msgid ""
"On the bottom of the window is a field labeled \"Receiver Method\". This is "
"the name of the function in the target node's script that you want to use. "
"By default, Godot will create this function using the naming convention "
"``_on_<node_name>_<signal_name>`` but you can change it if you wish."
msgstr ""
"창의 아래쪽을 보시면 \"Method In Node\"라고 적혀있는 영역이 있습니다. 대상 노"
"드의 스크립트에서 이것을 함수 이름으로 사용합니다. 기본적으로, Godot는 명명 "
"규칙에 따라 ``_on_<노드_이름>_<시그널_이름>``\\ 으로 함수 이름을 만듭니다. 하"
"지만 원한다면 바꿀 수 있습니다."

#: ../../docs/getting_started/step_by_step/signals.rst:72
msgid ""
"Click \"Connect\" and you'll see that the function has been created in the "
"script:"
msgstr ""
"\"연결하기(Connect)\"를 클릭하면 스크립트 안에 함수가 만들어진 것을 볼 수 있"
"습니다:"

#: ../../docs/getting_started/step_by_step/signals.rst:92
msgid ""
"Now we can replace the placeholder code with whatever code we want to run "
"when the signal is received. Let's make the Sprite blink:"
msgstr ""
"이제 자리 표시자 코드 대신 시그널을 받게 되면 실행되길 원하는 코드로 바꾸면 "
"됩니다. Sprite가 깜박이도록 만들어 봅시다:"

#: ../../docs/getting_started/step_by_step/signals.rst:116
msgid ""
"Run the scene and you'll see the Sprite blinking on and off every second. "
"You can change the Timer's *Wait Time* property to alter this."
msgstr ""
"씬을 실행하면 Sprite가 매 초마다 깜박이는 것을 볼 수 있습니다. Timer의 *Wait "
"Time* 속성을 변경하여 주기를 변경할 수 있습니다."

#: ../../docs/getting_started/step_by_step/signals.rst:120
msgid "Connecting signals in code"
msgstr "노드에서 시그널 연결하기"

#: ../../docs/getting_started/step_by_step/signals.rst:122
msgid ""
"You can also make the signal connection in code rather than with the editor. "
"This is usually necessary when you're instancing nodes via code and so you "
"can't use the editor to make the connection."
msgstr ""
"편집기 뿐만 아니라 코드에서도 시그널 연결을 만들 수 있습니다. 보통 코드를 통"
"해 노드를 인스턴스할 때 필수적입니다. 편집기에서 이런 시그널 연결을 만들 수 "
"없기 때문이죠."

#: ../../docs/getting_started/step_by_step/signals.rst:126
msgid ""
"First, disconnect the signal by selecting the connection in the Timer's "
"\"Node\" tab and clicking disconnect."
msgstr ""
"먼저 Timer의 \"노드(Node)\" 탭에서 연결 풀기(Disconnect)를 클릭해서 시그널의 "
"연결을 풉니다."

#: ../../docs/getting_started/step_by_step/signals.rst:131
msgid ""
"To make the connection in code, we can use the ``connect`` function. We'll "
"put it in ``_ready()`` so that the connection will be made on run. The "
"syntax of the function is ``<source_node>.connect(<signal_name>, "
"<target_node>, <target_function_name>)``. Here is the code for our Timer "
"connection:"
msgstr ""
"코드로 연결을 만들려면 ``connect`` 함수를 사용합니다. ``_ready()``\\ 안에 이 "
"함수를 넣으면 연결을 실행할 준비가 된 것입니다. 함수의 문법은 ``<소스_이름>."
"connect(<시그널_이름>, <대상_이름>, <대상_함수_이름>)``\\ 입니다. 이것이 "
"Timer 연결을 위한 코드입니다:"

#: ../../docs/getting_started/step_by_step/signals.rst:164
msgid "Custom signals"
msgstr "맞춤 시그널"

#: ../../docs/getting_started/step_by_step/signals.rst:166
msgid "You can also declare your own custom signals in Godot:"
msgstr "Godot에서 맞춤 시그널을 선언할 수도 있습니다:"

#: ../../docs/getting_started/step_by_step/signals.rst:184
msgid ""
"Once declared, your custom signals will appear in the Inspector and can be "
"connected in the same way as a node's built-in signals."
msgstr ""
"맞춤 시그널을 선언하면 그 시그널은 인스펙터(Inspector)에 나타나며 노드의 내"
"장 시그널과 같은 방식으로 연결할 수 있습니다."

#: ../../docs/getting_started/step_by_step/signals.rst:187
msgid "To emit a signal via code, use the ``emit_signal`` function:"
msgstr ""
"코드를 통해 시그널을 방출(Emit)하려면 ``emit_signal`` 함수를 사용하세요:"

#: ../../docs/getting_started/step_by_step/signals.rst:212
msgid ""
"A signal can also optionally declare one or more arguments. Specify the "
"argument names between parentheses:"
msgstr ""

#: ../../docs/getting_started/step_by_step/signals.rst:232
#, fuzzy
msgid ""
"The signal arguments show up in the editor's node dock, and Godot can use "
"them to generate callback functions for you. However, you can still emit any "
"number of arguments when you emit signals. So it's up to you to emit the "
"correct values."
msgstr ""
"인수는 편집기의 노드(Node) 독에 보입니다. 그리고 Godot는 이 인수로 콜백 함수"
"를 생성할 수 있습니다. 하지만 시그널을 방출할 때 여전히 많은 수의 인수를 방출"
"할 수 있습니다. 다시 말해 올바른 값을 방출하는 일은 당신에게 달린 것입니다."

#: ../../docs/getting_started/step_by_step/signals.rst:237
#, fuzzy
msgid ""
"To pass values, add them as the second argument to the ``emit_signal`` "
"function:"
msgstr ""
"코드를 통해 시그널을 방출(Emit)하려면 ``emit_signal`` 함수를 사용하세요:"

#: ../../docs/getting_started/step_by_step/signals.rst:265
msgid ""
"Many of Godot's built-in node types provide signals you can use to detect "
"events. For example, an :ref:`Area2D <class_Area2D>` representing a coin "
"emits a ``body_entered`` signal whenever the player's physics body enters "
"its collision shape, allowing you to know when the player collected it."
msgstr ""
"Godot의 내장 노드 유형의 대부분은 이벤트를 감지하는 데 쓰는 시그널을 제공합니"
"다. 예를 들어 :ref:`Area2D <class_Area2D>`\\ 는 ``body_entered`` 시그널을 방"
"출합니다. 동전으로 치면 플레이어의 물리적 몸이 동전의 충돌 모양에 닿아 시그널"
"을 방출하는 것입니다. 이를 통해 플레이어가 언제 동전을 먹었는지 알 수 있죠."

#: ../../docs/getting_started/step_by_step/signals.rst:270
msgid ""
"In the next section, :ref:`doc_your_first_game`, you'll build a complete "
"game including several uses of signals to connect different game components."
msgstr ""
"다음 섹션 :ref:`doc_your_first_game`\\ 에서는 다른 게임 구성 요소들을 여러 시"
"그널을 사용하여 연결함으로써 완전한 게임을 만들 것입니다."

#: ../../docs/getting_started/step_by_step/your_first_game.rst:4
msgid "Your first game"
msgstr "당신의 첫 게임"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:7
#: ../../docs/getting_started/step_by_step/exporting.rst:7
#: ../../docs/tutorials/animation/introduction_2d.rst:7
#: ../../docs/tutorials/assetlib/using_assetlib.rst:10
msgid "Overview"
msgstr "개요"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:9
msgid ""
"This tutorial will guide you through making your first Godot project. You "
"will learn how the Godot editor works, how to structure a project, and how "
"to build a 2D game."
msgstr ""
"이 튜토리얼은 첫 Godot 프로젝트를 만드는 과정을 안내합니다. Godot 편집기가 어"
"떻게 작동하는지, 프로젝트를 구성하는 방법, 2D 게임을 만드는 방법을 배우게 됩"
"니다."

#: ../../docs/getting_started/step_by_step/your_first_game.rst:13
msgid ""
"This project is an introduction to the Godot engine. It assumes that you "
"have some programming experience already. If you're new to programming "
"entirely, you should start here: :ref:`doc_scripting`."
msgstr ""
"이 프로젝트는 Godot 엔진에 대한 소개입니다. 이 튜토리얼에서 당신은 프로그래"
"밍 경험이 조금 있다고 가정하겠습니다. 프로그래밍에 완전 처음이라면 여기서부"
"터 시작하세요: :ref:`doc_scripting`."

#: ../../docs/getting_started/step_by_step/your_first_game.rst:18
msgid ""
"The game is called \"Dodge the Creeps!\". Your character must move and avoid "
"the enemies for as long as possible. Here is a preview of the final result:"
msgstr ""
"게임 이름은 \"Dodge the Creeps!\"입니다. 캐릭터는 가능한 오랫동안 움직이면서 "
"적을 피해야 합니다. 다음은 앞으로 보게 될 최종 결과물입니다:"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:24
msgid ""
"**Why 2D?** 3D games are much more complex than 2D ones. You should stick to "
"2D until you have a good understanding of the game development process."
msgstr ""
"**왜 2D인가요?** 3D 게임은 2D 게임보다 훨씬 더 복잡합니다. 게임 개발 과정을 "
"잘 알 때까지는 2D 게임을 개발하는 것이 좋습니다."

#: ../../docs/getting_started/step_by_step/your_first_game.rst:28
#: ../../docs/getting_started/workflow/project_setup/index.rst:2
#: ../../docs/tutorials/2d/using_tilemaps.rst:21
#: ../../docs/tutorials/misc/state_design_pattern.rst:233
#: ../../docs/development/cpp/configuring_an_ide.rst:184
#: ../../docs/development/cpp/configuring_an_ide.rst:311
msgid "Project setup"
msgstr "프로젝트 설정하기"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:30
msgid ""
"Launch Godot and create a new project. Then, download :download:"
"`dodge_assets.zip <files/dodge_assets.zip>` - the images and sounds you'll "
"be using to make the game. Unzip these files to your project folder."
msgstr ""
"Godot를 실행하고 새 프로젝트를 만드세요. 그런 다음 :download:`dodge_assets."
"zip <files/dodge_assets.zip>`\\ 을 다운로드하세요. 여기에는 게임에 쓸 이미지"
"와 소리가 있습니다. 프로젝트 폴더에서 압축을 풀어줍니다."

#: ../../docs/getting_started/step_by_step/your_first_game.rst:34
msgid ""
"For this tutorial, we will assume you are familiar with the editor. If you "
"haven't read :ref:`doc_scenes_and_nodes`, do so now for an explanation of "
"setting up a project and using the editor."
msgstr ""
"이 튜토리얼에서는 당신이 편집기에 익숙하다고 가정하겠습니다. 아직 :ref:"
"`doc_scenes_and_nodes`\\ 를 읽지 않았다면 당장 돌아가세요. 돌아가서 편집기를 "
"사용해 프로젝트를 설정하는 법을 배우고 오세요."

#: ../../docs/getting_started/step_by_step/your_first_game.rst:38
msgid ""
"This game will use portrait mode, so we need to adjust the size of the game "
"window. Click on Project -> Project Settings -> Display -> Window and set "
"\"Width\" to ``480`` and \"Height\" to ``720``."
msgstr ""
"이 게임은 세로 모드를 사용합니다. 따라서 게임 창의 크기를 조정해야 합니다. 프"
"로젝트(Project) -> 프로젝트 설정(Project Settings) -> Display -> Window를 클"
"릭하고 \"Width\"를 ``480``\\ 으로, \"Height\"를 ``720``\\ 으로 설정합니다."

#: ../../docs/getting_started/step_by_step/your_first_game.rst:43
msgid "Organizing the project"
msgstr "프로젝트 조직하기"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:45
msgid ""
"In this project, we will make 3 independent scenes: ``Player``, ``Mob``, and "
"``HUD``, which we will combine into the game's ``Main`` scene. In a larger "
"project, it might be useful to make folders to hold the various scenes and "
"their scripts, but for this relatively small game, you can save your scenes "
"and scripts in the project's root folder, referred to as ``res://``.  You "
"can see your project folders in the FileSystem Dock in the lower left corner:"
msgstr ""
"이 프로젝트에서 우리는  ``Player`` , ``Mob`` , ``HUD``\\ 의 세 개의 개별 씬"
"을 만들 것입니다. 이 씬들을 게임의 ``Main`` 씬으로 묶을 것입니다. 규모가 큰 "
"프로젝트라면 다양한 씬과 스크립트를 저장하는 폴더를 만드는 것이 유용하겠지"
"만, 상대적으로 규모가 작은 이 게임에서는 ``res://``\\ 라고 하는 루트 폴더에 "
"씬과 스크립트를 저장하겠습니다.  프로젝트 폴더는 왼쪽 아래에 있는 파일 시스템"
"(FileSystem) 독에서 볼 수 있습니다:"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:56
msgid "Player scene"
msgstr "Player(플레이어) 씬"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:58
msgid ""
"The first scene we will make defines the ``Player`` object. One of the "
"benefits of creating a separate Player scene is that we can test it "
"separately, even before we've created other parts of the game."
msgstr ""
"처음으로 정의할 씬은 ``Player`` 객체입니다. 별도의 Player 씬을 만들면 게임의 "
"다른 부분을 만들기 전에 따로 실험해 볼 수 있다는 장점이 있습니다."

#: ../../docs/getting_started/step_by_step/your_first_game.rst:63
msgid "Node structure"
msgstr "노드 구조"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:65
msgid ""
"To begin, click the \"Add/Create a New Node\" button and add an :ref:`Area2D "
"<class_Area2D>` node to the scene."
msgstr ""
"시작하려면 \"새 노드 추가하기/만들기(Add/Create a New Node)\" 버튼을 클릭하"
"고 :ref:`Area2D <class_Area2D>`노드를 씬에 추가하세요."

#: ../../docs/getting_started/step_by_step/your_first_game.rst:70
msgid ""
"Godot will display a warning icon next to the node in the scene tree. You "
"can ignore it for now. We will address it later."
msgstr ""
"Godot는 씬 트리에서 노드 옆에 경고 아이콘을 보여줍니다. 지금은 무시해도 됩니"
"다. 나중에 다룰 것입니다."

#: ../../docs/getting_started/step_by_step/your_first_game.rst:73
msgid ""
"With ``Area2D`` we can detect objects that overlap or run into the player. "
"Change its name to ``Player`` by clicking on the node's name. This is the "
"scene's root node. We can add additional nodes to the player to add "
"functionality."
msgstr ""
"``Area2D``\\ 를 사용하면 Player와 겹치거나 부딪히는 물체를 감지할 수 있습니"
"다. 노드 이름을 클릭하고 이름을 ``Player``\\ 로 바꾸세요. 이 노드가 씬의 루"
"트 노드입니다. Player에게 기능을 추가하기 위해 별도의 노드를 추가할 수 있습니"
"다."

#: ../../docs/getting_started/step_by_step/your_first_game.rst:78
msgid ""
"Before we add any children to the ``Player`` node, we want to make sure we "
"don't accidentally move or resize them by clicking on them. Select the node "
"and click the icon to the right of the lock; its tooltip says \"Makes sure "
"the object's children are not selectable.\""
msgstr ""
"``Player`` 노드에 자식을 추가하기 전에, 실수로 자식을 클릭해서 자식이 움직이"
"거나 크기가 바뀌지 않도록 해야 합니다. 노드를 선택하고 자물쇠 오른쪽에 있는 "
"아이콘을 클릭하세요. 노드의 툴 팁에는 \"객체의 자식을 선택하지 않도록 해요."
"\" 라고 표시됩니다."

#: ../../docs/getting_started/step_by_step/your_first_game.rst:85
#, fuzzy
msgid ""
"Save the scene. Click Scene -> Save, or press :kbd:`Ctrl + S` on Windows/"
"Linux or :kbd:`Cmd + S` on macOS."
msgstr ""
"씬을 저장합니다. 씬 -> 씬 저장을 클릭하거나 Windows/Linux에서는 ``Ctrl+S`` "
"를, Mac에서는 ``Command+S`` 를 누릅니다."

#: ../../docs/getting_started/step_by_step/your_first_game.rst:87
msgid "For this project, we will be following the Godot naming conventions."
msgstr "이 프로젝트에서, 우리는 Godot의 명명 규칙을 따를 것입니다."

#: ../../docs/getting_started/step_by_step/your_first_game.rst:89
msgid ""
"**GDScript**: Classes (nodes) use PascalCase, variables and functions use "
"snake_case, and constants use ALL_CAPS (See :ref:`doc_gdscript_styleguide`)."
msgstr ""
"**GDScript**: 클래스(노드)는 ``PascalCase`` 를 사용하고', 변수와 함수는 "
"``snake_case`` 를 사용하며, 상수는 ``ALL_CAPS`` 를 사용합니다."

#: ../../docs/getting_started/step_by_step/your_first_game.rst:93
msgid ""
"**C#**: Classes, export variables and methods use PascalCase, private fields "
"use _camelCase, local variables and parameters use camelCase (See :ref:"
"`doc_c_sharp_styleguide`).  Be careful to type the method names precisely "
"when connecting signals."
msgstr ""
"**C#**:  클래스, export 변수 그리고 메쏘드는 PascalCase를 사용합니다. "
"private 필드는  _camelCase를 사용합니다.  지역변수(local variables)와  파라미"
"터는 camelCase를 사용합니다 (참고 :ref:`doc_c_sharp_styleguide`). 시그널을 연"
"결할 때는 메쏘드 이름을 정확하게 입력하도록 주의하세요."

#: ../../docs/getting_started/step_by_step/your_first_game.rst:100
msgid "Sprite animation"
msgstr "스프라이트 애니메이션"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:102
msgid ""
"Click on the ``Player`` node and add an :ref:`AnimatedSprite "
"<class_AnimatedSprite>` node as a child. The ``AnimatedSprite`` will handle "
"the appearance and animations for our player. Notice that there is a warning "
"symbol next to the node. An ``AnimatedSprite`` requires a :ref:`SpriteFrames "
"<class_SpriteFrames>` resource, which is a list of the animations it can "
"display. To create one, find the ``Frames`` property in the Inspector and "
"click \"[empty]\" -> \"New SpriteFrames\". This should automatically open "
"the SpriteFrames panel."
msgstr ""
"``Player`` 노드를 클릭하고 :ref:`AnimatedSprite <class_AnimatedSprite>` 노드"
"를 자식으로 추가하세요. ``AnimatedSprite``\\ 는 플레이어의 외형과 애니메이션"
"을 다루게 됩니다. 노드 옆을 보면 주의 표시가 있습니다. ``AnimatedSprite``\\ "
"는 :ref:`SpriteFrames <class_SpriteFrames>` 리소스가 필요합니다. "
"SpriteFrames 리소스는 보여줄 수 있는 애니메이션 목록을 보여줍니다. 리소스를 "
"만들려면 인스펙터(Inspecter)에서 ``Frames`` 속성을 찾아, \"[비었음]\" -> "
"\"새 SpriteFrames\"를 클릭하세요. 이러면 자동으로 스프라이트 프레임"
"(SpriteFrames) 패널이 열릴 것입니다."

#: ../../docs/getting_started/step_by_step/your_first_game.rst:113
msgid ""
"On the left is a list of animations. Click the \"default\" one and rename it "
"to \"right\". Then click the \"Add\" button to create a second animation "
"named \"up\". Drag the two images for each animation, named "
"``playerGrey_up[1/2]`` and ``playerGrey_walk[1/2]``, into the \"Animation "
"Frames\" side of the panel:"
msgstr ""
"왼쪽에는 애니메이션 목록이 있습니다. \"default\"를 클릭하고 \"right\"로 이름"
"을 바꾸세요. 그런 뒤 \"추가\" 버튼을 눌러 두 번째 애니메이션을 만들고 \"up"
"\"이라 이름을 지읍시다. 각 애니메이션에 두 개의 이미지를 드래그 하고, \"애니"
"메이션 프레임\" 패널 안에 하나는 ``playerGrey_up[1/2]`` 다른 하나는 "
"``playerGrey_walk[1/2]`` 라고 이름을 지읍니다:"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:120
msgid ""
"The player images are a bit too large for the game window, so we need to "
"scale them down. Click on the ``AnimatedSprite`` node and set the ``Scale`` "
"property to ``(0.5, 0.5)``. You can find it in the Inspector under the "
"``Node2D`` heading."
msgstr ""
"플레이어 이미지들이 게임 창에 비해 너무 크기 때문에, 크기를 줄여야 합니다. "
"``AnimatedSprite`` 노드를 클릭하고 ``Scale`` 속성을 ``(0.5, 0.5)`` 로 설정하"
"세요. 인스펙터(Inspecter)의 ``Node2D`` 에서 찾으실 수 있습니다."

#: ../../docs/getting_started/step_by_step/your_first_game.rst:127
msgid ""
"Finally, add a :ref:`CollisionShape2D <class_CollisionShape2D>` as a child "
"of ``Player``. This will determine the player's \"hitbox\", or the bounds of "
"its collision area. For this character, a ``CapsuleShape2D`` node gives the "
"best fit, so next to \"Shape\" in the Inspector, click \"[empty]\"\" -> "
"\"New CapsuleShape2D\".  Using the two size handles, resize the shape to "
"cover the sprite:"
msgstr ""
"마지막으로, :ref:`CollisionShape2D <class_CollisionShape2D>`\\ 를 ``Player``"
"\\ 의 자식으로 추가하세요. 이것이 플레이어의 \"hitbox\", 즉 충돌 영역의 범위"
"를 결정합니다. 이 캐릭터에게는, ``CapsuleShape2D`` 노드가 가장 적합합니다, 그"
"러므로 인스펙터(Inspecter)의 \"Shape\" 옆에 \"<비었음>\"\" -> \"새 "
"CapsuleShape2D\"를 클릭하세요.  스프라이트를 덮도록 두 개의 크기 핸들로 크기"
"를 조정하세요:"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:136
msgid "When you're finished, your ``Player`` scene should look like this:"
msgstr "다 되셨다면, 당신의 ``Player`` 씬은 이렇게 되어야 합니다:"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:141
msgid "Moving the player"
msgstr "플레이어 움직이기"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:143
msgid ""
"Now we need to add some functionality that we can't get from a built-in "
"node, so we'll add a script. Click the ``Player`` node and click the \"Add "
"Script\" button:"
msgstr ""
"이제 내장 노드 만으로는 얻을 수 없는 몇 가지 기능을 추가해야 합니다, 그래서 "
"스크립트를 만들겁니다. ``Player`` 노드를 클릭하고 \"스크립트 추가\" 버튼을 누"
"르세요:"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:149
msgid ""
"In the script settings window, you can leave the default settings alone. "
"Just click \"Create\":"
msgstr ""
"스크립트 설정 창에서는, 기본 설정으로 냅두어도 됩니다. 그냥 \"생성\"을 누르세"
"요:"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:152
msgid ""
"If you're creating a C# script or other languages, select the language from "
"the `language` drop down menu before hitting create."
msgstr ""
"만약 C# 스크립트나 다른 언어로 생성하려한다면, 생성을 누르기 전에 `언어` 메뉴"
"에서 언어를 선택하세요."

#: ../../docs/getting_started/step_by_step/your_first_game.rst:157
msgid ""
"If this is your first time encountering GDScript, please read :ref:"
"`doc_scripting` before continuing."
msgstr ""
"처음 GDScript를 보시는 거라면, 계속하기 전에 :ref:`doc_scripting` 를 읽어주세"
"요."

#: ../../docs/getting_started/step_by_step/your_first_game.rst:160
msgid "Start by declaring the member variables this object will need:"
msgstr "이 객체가 필요로 하는 멤버 변수를 선언함으로써 시작합시다:"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:181
msgid ""
"Using the ``export`` keyword on the first variable ``speed`` allows us to "
"set its value in the Inspector. This can be handy for values that you want "
"to be able to adjust just like a node's built-in properties. Click on the "
"``Player`` node and you'll see the property now appears in the \"Script "
"Variables\" section of the Inspector. Remember, if you change the value "
"here, it will override the value written in the script."
msgstr ""
"첫 번째 변수인 ``speed``\\ 에 ``export`` 키워드를 사용하면 인스펙터"
"(Inspecter) 내에서 값을 설정할 수 있습니다. 편리한 점으로는 인스펙터"
"(Inspecter)에서도 원하는 값으로 조정할 수 있는 것입니다. ``Player`` 노드를 선"
"택하면 인스펙터(Inspecter)의 \"Script Variables\" 섹션에 나타납니다. 기억하세"
"요, 여기서 값을 바꾸면 스크립트에 작성한 값도 재정의됩니다."

#: ../../docs/getting_started/step_by_step/your_first_game.rst:188
msgid ""
"If you're using C#, you need to (re)build the project assemblies whenever "
"you want to see new export variables or signals. This build can be manually "
"triggered by clicking the word \"Mono\" at the bottom of the editor window "
"to reveal the Mono Panel, then clicking the \"Build Project\" button."
msgstr ""
"당신이 C#을 사용한다면, 새로운 외부변수(export variables)나 시그널을 보기 위"
"해서 프로젝트 구성물(assemblies)를 (재)컴파일(build)할 필요가 있습니다. 이 컴"
"파일은 편집기 의 밑에 \"Mono\" 단어를 클릭하여 Mono 패널이 나타나게 한 후 "
"\"프로젝트 생성(Build)\" 버튼을 눌러서 수동으로 진행됩니다."

#: ../../docs/getting_started/step_by_step/your_first_game.rst:196
msgid ""
"The ``_ready()`` function is called when a node enters the scene tree, which "
"is a good time to find the size of the game window:"
msgstr ""
"``_ready()`` 함수는 노드가 씬 트리에 들어올 때 호출됩니다, 이는 게임 창의 크"
"기를 알아보기 좋은 순간입니다:"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:212
msgid ""
"Now we can use the ``_process()`` function to define what the player will "
"do. ``_process()`` is called every frame, so we'll use it to update elements "
"of our game, which we expect will change often. For the player, we need to "
"do the following:"
msgstr ""
"이제 ``_process()`` 함수를 사용해서 플레이어가 무엇을 할 지 정의할 수 있습니"
"다. ``_process()``\\ 는 매 프레임마다 호출되므로, 게임에서 자주 변하는 요소들"
"을 업데이트하기 위해서 사용할 수 있습니다. 플레이어에게는, 다음과 같은 작업"
"이 필요합니다:"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:217
msgid "Check for input."
msgstr "입력을 확인."

#: ../../docs/getting_started/step_by_step/your_first_game.rst:218
msgid "Move in the given direction."
msgstr "주어진 방향으로 이동."

#: ../../docs/getting_started/step_by_step/your_first_game.rst:219
msgid "Play the appropriate animation."
msgstr "적절한 애니메이션을 재생."

#: ../../docs/getting_started/step_by_step/your_first_game.rst:221
msgid ""
"First, we need to check for input - is the player pressing a key? For this "
"game, we have 4 direction inputs to check. Input actions are defined in the "
"Project Settings under \"Input Map\". Here, you can define custom events and "
"assign different keys, mouse events, or other inputs to them. For this demo, "
"we will use the default events that are assigned to the arrow keys on the "
"keyboard."
msgstr ""
"먼저, 입력을 확인해야 합니다 - 플레이어가 키를 누르는 것이라 할까요? 이 게임"
"에서, 우리는 입력을 확인하기 위한 4개의 방향키를 갖고 있습니다. 입력 액션은 "
"프로젝트 설정의 \"Input Map\"에서 정의할 수 있습니다. 사용자 지정 이벤트를 정"
"의하고 이를 다른 키, 마우스 이벤트, 혹은 다른 입력으로 지정할 수도 있습니다. "
"이 데모에서는, 우리는 키보드에 있는 방향키가 지정된 기본 이벤트를 사용할 것입"
"니다."

#: ../../docs/getting_started/step_by_step/your_first_game.rst:228
msgid ""
"You can detect whether a key is pressed using ``Input.is_action_pressed()``, "
"which returns ``true`` if it is pressed or ``false`` if it isn't."
msgstr ""
"``Input.is_action_pressed()`` 를 사용해서 키가 눌러졌는지를 감지할 수 있습니"
"다, 눌러지면 ``true`` 값을 내보내고 그렇지 않으면 ``false`` 값을 내보냅니다."

#: ../../docs/getting_started/step_by_step/your_first_game.rst:290
msgid ""
"We start by setting the ``velocity`` to ``(0, 0)`` - by default the player "
"should not be moving. Then we check each input and add/subtract from the "
"``velocity`` to obtain a total direction. For example, if you hold ``right`` "
"and ``down`` at the same time, the resulting ``velocity`` vector will be "
"``(1, 1)``. In this case, since we're adding a horizontal and a vertical "
"movement, the player would move *faster* than if it just moved horizontally."
msgstr ""
"``velocity``\\ 를 ``(0, 0)``\\ 으로 설정하는 것으로 시작합니다 - 기본 값으로 "
"플레이어는 움직이지 않아야 합니다. 그 후 각 입력을 확인하고 ``velocity``\\ 에"
"서 더하기/빼기를 통해 전체 방향을 얻습니다.  예를 들어 당신이 ``오른쪽`` 과 "
"``아래`` 를 동시에 누른다면, 결과 ``velocity`` 벡터는 ``(1, 1)`` 이 될 것입니"
"다. 이런 경우에서, 상하좌우 움직임을 추가하는 것은, 플레이어는 단순히 수평으"
"로 움직이는 것보다 *더 빠르게* 움직이게 됩니다."

#: ../../docs/getting_started/step_by_step/your_first_game.rst:297
msgid ""
"We can prevent that if we *normalize* the velocity, which means we set its "
"*length* to ``1``, and multiply by the desired speed. This means no more "
"fast diagonal movement."
msgstr ""
"우리는 이 속도를 *노멀라이즈* 해서 예방할 수 있습니다, 즉 우리는 이것의 *범위"
"* 를 ``1`` 로 설정하고, 원하는 속도로 곱해줍니다. 이렇게 하면 더 이상 대각선 "
"이동속도가 빨라지지 않습니다."

#: ../../docs/getting_started/step_by_step/your_first_game.rst:301
msgid ""
"If you've never used vector math before, or need a refresher, you can see an "
"explanation of vector usage in Godot at :ref:`doc_vector_math`. It's good to "
"know but won't be necessary for the rest of this tutorial."
msgstr ""
"이제까지 벡터 수학을 안 써봤거나, 회복이 필요하다면, Godot에서 벡터 사용에 관"
"한 설명을 :ref:`doc_vector_math` 에서 보실 수 있습니다. 보면 좋지만 나머지 튜"
"토리얼을 위해 꼭 필수적인 것은 아닙니다."

#: ../../docs/getting_started/step_by_step/your_first_game.rst:305
msgid ""
"We also check whether the player is moving so we can start or stop the "
"AnimatedSprite animation."
msgstr ""
"우리는 또 AnimatedSprite 애니메이션을 재생하고 정지할 수 있도록 플레이어가 움"
"직이고 있는지를 확인할 것입니다."

#: ../../docs/getting_started/step_by_step/your_first_game.rst:308
msgid ""
"In GDScript, ``$`` returns the node at the relative path from the current "
"node, or returns ``null`` if the node is not found. Since AnimatedSprite is "
"a child of the current node, we can use ``$AnimatedSprite``."
msgstr ""
"GDScript에서, ``$``\\ 는 현재 노드에서 상대적인 경로에 있는 노드를 반환하거"
"나, 노드가 없다면 ``null`` 값을 반환합니다. AnimatedSprite가 현재 노드의 자식"
"인 상태이므로, ``$AnimatedSprite``\\ 를 사용할 수 있습니다."

#: ../../docs/getting_started/step_by_step/your_first_game.rst:311
msgid ""
"``$`` is shorthand for ``get_node()``. So in the code above, ``"
"$AnimatedSprite.play()`` is the same as ``get_node(\"AnimatedSprite\")."
"play()``."
msgstr ""
"``$`` 는 ``get_node()`` 의 줄임말입니다. 그래서 위의 코드인, ``"
"$AnimatedSprite.play()`` 는 ``get_node(\"AnimatedSprite\").play()`` 와 같습니"
"다."

#: ../../docs/getting_started/step_by_step/your_first_game.rst:314
msgid ""
"Now that we have a movement direction, we can update the player's position. "
"We can also use ``clamp()`` to prevent it from leaving the screen. "
"*Clamping* a value means restricting it to a given range. Add the following "
"to the bottom of the ``_process`` function:"
msgstr ""
"이제 우리에게는 이동 방향이 있습니다. 즉, 플레이어의 위치를 업데이트할 수 있"
"습니다. 그리고 ``clamp()``\\ 를 사용해서 플레이어가 화면에서 나가는 것을 방지"
"합니다. 값을 *죄다(Clamp)*\\ 라는 것은 주어진 범위로 값을 제한한다는 뜻입니"
"다. 다음 함수를 ``_process`` 함수 아래에 추가하세요:"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:335
msgid ""
"The `delta` parameter in the `_process()` function refers to the *frame "
"length* - the amount of time that the previous frame took to complete. Using "
"this value ensures that your movement will remain consistent even if the "
"frame rate changes."
msgstr ""
"`_process()`함수에 있는 매개변수 `delta` 는 \"frame length\" (이전 프레임이 "
"완료되는데 걸린 시간) 를 참조 합니다. 이 값을 사용하면 프레임 레이트가 변경되"
"어도 당신의 이동속도를 항상 일정하게 유지 할 수 있습니다."

#: ../../docs/getting_started/step_by_step/your_first_game.rst:340
msgid ""
"Click \"Play Scene\" (``F6``) and confirm you can move the player around the "
"screen in all directions. The console output that opens upon playing the "
"scene can be closed by clicking ``Output`` (which should be highlighted in "
"blue) in the lower left of the Bottom Panel."
msgstr ""
"\"씬 실행하기\" (``F6``) 를 클릭하고 플레이어가 화면에서 전 방향으로 움직이는"
"지 확인하세요. 씬을 실행할 때 열리는 콘솔 출력은 하단 패널의 왼쪽 하단에 ``출"
"력`` 을 클릭해서 닫으실 수 있습니다 (파란색으로 강조되어 있을 것입니다)."

#: ../../docs/getting_started/step_by_step/your_first_game.rst:345
msgid ""
"If you get an error in the \"Debugger\" panel that refers to a \"null "
"instance\", this likely means you spelled the node name wrong. Node names "
"are case-sensitive and ``$NodeName`` or ``get_node(\"NodeName\")`` must "
"match the name you see in the scene tree."
msgstr ""
"\"디버거\" 패널에서 \"null instance\"라고 하면서 에러가 뜬다면, 노드 이름의 "
"철자를 틀렸다는 것을 의미합니다. 노드 이름은 대소문자를 구별하고  ``"
"$NodeName`` 이나 ``get_node(\"NodeName\")`` 이 씬 트리에서 보는 이름이 일치해"
"야 합니다."

#: ../../docs/getting_started/step_by_step/your_first_game.rst:350
msgid "Choosing animations"
msgstr "애니메이션 고르기"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:352
msgid ""
"Now that the player can move, we need to change which animation the "
"AnimatedSprite is playing based on direction. We have a \"right\" animation, "
"which should be flipped horizontally using the ``flip_h`` property for left "
"movement, and an \"up\" animation, which should be flipped vertically with "
"``flip_v`` for downward movement. Let's place this code at the end of our "
"``_process()`` function:"
msgstr ""
"이제 캐릭터가 움직이니, 방향에 맞는 AnimatedSprite가 움직이도록 바꿔야 합니"
"다. 우리는 \"오른쪽\" 애니메이션이 있고 이걸 왼쪽 움직임으로 쓰려면 가로로 뒤"
"집어야 하므로 ``flip_h`` 속성을 써줍니다, 그리고 \"위\" 애니메이션도 아래 움"
"직임으로 쓰려면 세로로 뒤집어야 하므로 ``flip_v`` 을 써줍니다. "
"``_process()`` 아래에 이 코드를 작성해주세요:"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:386
msgid ""
"The boolean assignments in the code above are a common shorthand for "
"programmers. Consider this code versus the shortened boolean assignment "
"above:"
msgstr ""
"위 코드 내의 불리언 할당은 프로그래머를 위한 일반적인 짧은 표현입니다. 위의 "
"단축된 불리언 할당을 이 코드와 비교해서 생각해보세요:"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:405
msgid ""
"Play the scene again and check that the animations are correct in each of "
"the directions. When you're sure the movement is working correctly, add this "
"line to ``_ready()``, so the player will be hidden when the game starts:"
msgstr ""
"씬을 다시 실행하고 애니메이션이 각 방향으로 잘 움직이는지 확인하세요. 잘 작동"
"된다고 확신된다면, 플레이어가 게임이 시작할 때 안 보이도록 이 문장을 "
"``_ready()`` 에 추가하세요:"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:420
msgid "Preparing for collisions"
msgstr "충돌 준비하기"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:422
msgid ""
"We want ``Player`` to detect when it's hit by an enemy, but we haven't made "
"any enemies yet! That's OK, because we're going to use Godot's *signal* "
"functionality to make it work."
msgstr ""
"우리는 ``Player`` 가 적과 닿았다는 것을 감지하길 원합니다, 하지만 아직 적을 "
"안 만들었습니다! 괜찮습니다, 왜냐하면 충돌이 작동하도록 우리는 Godot의 *시그"
"널(signal)* 기능을 사용할 것이기 때문입니다."

#: ../../docs/getting_started/step_by_step/your_first_game.rst:426
msgid "Add the following at the top of the script, after ``extends Area2d``:"
msgstr "``extends Area2d`` 다음에 스크립트 상단에 다음을 추가하세요:"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:440
msgid ""
"This defines a custom signal called \"hit\" that we will have our player "
"emit (send out) when it collides with an enemy. We will use ``Area2D`` to "
"detect the collision. Select the ``Player`` node and click the \"Node\" tab "
"next to the Inspector tab to see the list of signals the player can emit:"
msgstr ""
"이것은 \"hit\"라 불리는 사용자 지정 시그널을 정의해서 적과 충돌할 때 우리의 "
"플레이어가 방출하도록 (내보내도록) 합니다. 우리는 ``Area2D`` 로 그 충돌을 감"
"지할 겁니다. ``Player`` 노드를 선택하고 인스펙터(Inspecter) 탭 옆의 \"노드\" "
"탭을 클릭하고 플레이어가 방출할 수 있는 시그널들을 확인해 보세요:"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:447
msgid ""
"Notice our custom \"hit\" signal is there as well! Since our enemies are "
"going to be ``RigidBody2D`` nodes, we want the ``body_entered( Object "
"body )`` signal; this will be emitted when a body contacts the player. Click "
"\"Connect..\" and then \"Connect\" again on the \"Connecting Signal\" "
"window. We don't need to change any of these settings - Godot will "
"automatically create a function in your player's script. This function will "
"be called whenever the signal is emitted - it *handles* the signal."
msgstr ""
"우리의 \"hit\" 시그널도 거기에 있다는 것에 주목하세요! 적들은 "
"``RigidBody2D`` 노드가 될 것이기 때문에, 우리는 ``body_entered( Object "
"body )`` 시그널이 필요하고, 이걸로 바디가 플레이어와 접촉할 때 방출하도록 할 "
"것입니다. \"연결하기..\" 를 누르고 \"시그널 연결하기\" 창에서 \"연결\"을 누릅"
"니다. 우리는 어떤 설정도 바꿀 필요가 없습니다 - Godot는 자동으로 플레이어 스"
"크립트에 함수를 생성해줍니다. 이 함수는 시그널이 방출될 때마다 호출될 것입니"
"다 - 시그널을 *처리하는 것*\\ 입니다."

#: ../../docs/getting_started/step_by_step/your_first_game.rst:456
msgid ""
"When connecting a signal, instead of having Godot create a function for you, "
"you can also give the name of an existing function that you want to link the "
"signal to."
msgstr ""
"시그널이 연결될 때, Godot가 함수를 만들어 주는 대신, 당신이 직접 연결하고 싶"
"은 시그널에 존재하는 함수의 이름을 줄 수 있습니다."

#: ../../docs/getting_started/step_by_step/your_first_game.rst:460
msgid "Add this code to the function:"
msgstr "함수에 이 코드를 추가하세요:"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:479
msgid ""
"Each time an enemy hits the player, the signal is going to be emitted. We "
"need to disable the player's collision so that we don't trigger the ``hit`` "
"signal more than once."
msgstr ""
"매번 적이 플레이어를 때리면, 시그널이 방출됩니다. 우리는 두 번 이상 ``hit`` "
"시그널이 발동되지 않도록 플레이어의 충돌을 비활성화 해야 합니다."

#: ../../docs/getting_started/step_by_step/your_first_game.rst:483
msgid ""
"Disabling the area's collision shape can cause an error if it happens in the "
"middle of the engine's collision processing. Using ``set_deferred()`` allows "
"us to have Godot wait to disable the shape until it's safe to do so."
msgstr ""
"엔진의 충돌 처리 중에 영역의 충돌 모양을 비활성화 하는 것은 오류를 초래할 수 "
"있습니다. ``set_deferred()``\\ 를 사용하면 Godot가 모양을 비활성화해도 안전"
"할 때까지 기다려줍니다."

#: ../../docs/getting_started/step_by_step/your_first_game.rst:488
msgid ""
"The last piece for our player is to add a function we can call to reset the "
"player when starting a new game."
msgstr ""
"우리 플레이어의 마지막 과제는 호출할 수 있는 함수를 추가해서 새 게임이 시작"
"할 때 플레이어를 리셋할 수 있게 하는 겁니다."

#: ../../docs/getting_started/step_by_step/your_first_game.rst:509
msgid "Enemy scene"
msgstr "적 씬"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:511
msgid ""
"Now it's time to make the enemies our player will have to dodge. Their "
"behavior will not be very complex: mobs will spawn randomly at the edges of "
"the screen and move in a random direction in a straight line, then despawn "
"when they go offscreen."
msgstr ""
"이제 우리의 플레이어가 피할 적을 만들 차례입니다. 이들의 행동은 그리 복잡하"
"진 않을겁니다: 적이 아무렇게나 화면의 가장자리에서 나타나고 무작위 방향으로 "
"직선으로 나아갑니다, 그리고 화면을 벗어나면 사라집니다."

#: ../../docs/getting_started/step_by_step/your_first_game.rst:516
msgid ""
"We will build this into a ``Mob`` scene, which we can then *instance* to "
"create any number of independent mobs in the game."
msgstr ""
"그러면 ``Mob`` 씬에 이 작업을 해야 합니다, 이것을 *인스턴스* 해서 게임에선 정"
"해진 수 만큼의 적들을 만들 것입니다."

#: ../../docs/getting_started/step_by_step/your_first_game.rst:520
msgid "Node setup"
msgstr "노드 설정하기"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:522
msgid "Click Scene -> New Scene and we'll create the Mob."
msgstr "씬 -> 새 씬을 클릭하고 거기에서 적을 만들겁니다."

#: ../../docs/getting_started/step_by_step/your_first_game.rst:524
msgid "The Mob scene will use the following nodes:"
msgstr "적 씬은 다음 노드들을 사용할 것입니다:"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:526
msgid ":ref:`RigidBody2D <class_RigidBody2D>` (named ``Mob``)"
msgstr ":ref:`RigidBody2D <class_RigidBody2D>` ( ``Mob`` 으로 이름지음)"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:528
msgid ":ref:`AnimatedSprite <class_AnimatedSprite>`"
msgstr ":ref:`AnimatedSprite <class_AnimatedSprite>`"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:529
msgid ":ref:`CollisionShape2D <class_CollisionShape2D>`"
msgstr ":ref:`CollisionShape2D <class_CollisionShape2D>`"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:530
msgid ""
":ref:`VisibilityNotifier2D <class_VisibilityNotifier2D>` (named "
"``Visibility``)"
msgstr ""
":ref:`VisibilityNotifier2D <class_VisibilityNotifier2D>` ( ``Visibility`` 으"
"로 이름지음)"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:532
msgid ""
"Don't forget to set the children so they can't be selected, like you did "
"with the Player scene."
msgstr ""
"플레이어 씬에서 한 것과 마찬가지로, 자식이 선택되지 않도록 설정하는 것을 잊지"
"마세요."

#: ../../docs/getting_started/step_by_step/your_first_game.rst:535
msgid ""
"In the :ref:`RigidBody2D <class_RigidBody2D>` properties, set ``Gravity "
"Scale`` to ``0``, so the mob will not fall downward. In addition, under the "
"``PhysicsBody2D`` section, click the ``Mask`` property and uncheck the first "
"box. This will ensure the mobs do not collide with each other."
msgstr ""
":ref:`RigidBody2D <class_RigidBody2D>` 속성에서는, ``Gravity Scale`` 을 "
"``0`` 으로 설정해 적이 아래로 떨어지지 않도록 합니다. 그리고, "
"``PhysicsBody2D``  섹션의 ``Mask`` 속성을 클릭하고 첫 번째 상자의 체크를 푸세"
"요. 이것은 적들끼리 충돌하지 않도록 만듭니다."

#: ../../docs/getting_started/step_by_step/your_first_game.rst:542
msgid ""
"Set up the :ref:`AnimatedSprite <class_AnimatedSprite>` like you did for the "
"player. This time, we have 3 animations: ``fly``, ``swim``, and ``walk``. "
"Set the ``Playing`` property in the Inspector to \"On\" and adjust the "
"\"Speed (FPS)\" setting as shown below. We'll select one of these animations "
"randomly so that the mobs will have some variety."
msgstr ""
":ref:`AnimatedSprite <class_AnimatedSprite>` 를 당신이 플레이어에서 한 것처"
"럼 설정합니다. 이번엔, 3 개의 애니메이션이 있습니다: ``fly``, ``swim``, 그리"
"고 ``walk`` 이죠. 인스펙터(Inspecter)의 ``Playing`` 를 \"On\"으로 설정합니"
"다. 그리고 \"Speed (FPS)\" 를 아래에 보이는대로 조정해줍시다. 우리는 이 애니"
"메이션들 중 하나를 무작위로 선택해서, 적들이 다양하게 보이도록 할 겁니다."

#: ../../docs/getting_started/step_by_step/your_first_game.rst:549
msgid ""
"``fly`` should be set to 3 FPS, with ``swim`` and ``walk`` set to 4 FPS."
msgstr ""
"``fly`` 는 3 FPS로 설정하고, ``swim`` 과 ``walk`` 는 4 FPS로 설정합니다."

#: ../../docs/getting_started/step_by_step/your_first_game.rst:551
msgid ""
"Like the player images, these mob images need to be scaled down. Set the "
"``AnimatedSprite``'s ``Scale`` property to ``(0.75, 0.75)``."
msgstr ""
"플레이어 이미지처럼, 이 적 이미지들도 크기를 줄일 필요가 있습니다. "
"``AnimatedSprite`` 의 ``Scale`` 속성을 ``(0.75, 0.75)`` 으로 설정합니다."

#: ../../docs/getting_started/step_by_step/your_first_game.rst:554
msgid ""
"As in the ``Player`` scene, add a ``CapsuleShape2D`` for the collision. To "
"align the shape with the image, you'll need to set the ``Rotation Degrees`` "
"property to ``90`` under ``Node2D``."
msgstr ""
"``Player`` 씬처럼, 충돌을 위한 ``CapsuleShape2D`` 을 추가합니다. 이미지와 모"
"양이 같도록, ``Node2D`` 아래 ``Rotation Degrees`` 속성을 ``90`` 으로 설정해"
"야 합니다."

#: ../../docs/getting_started/step_by_step/your_first_game.rst:559
msgid "Enemy script"
msgstr "적 스크립트"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:561
msgid "Add a script to the ``Mob`` and add the following member variables:"
msgstr "``Mob`` 에게 스크립트를 추가해주고 다음의 멤버 변수를 추가해주세요:"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:587
msgid ""
"When we spawn a mob, we'll pick a random value between ``min_speed`` and "
"``max_speed`` for how fast each mob will move (it would be boring if they "
"were all moving at the same speed). We also have an array containing the "
"names of the three animations, which we'll use to select a random one. Make "
"sure you've spelled these the same in the script and in the SpriteFrames "
"resource."
msgstr ""
"적이 스폰할 때, ``min_speed``\\ 와 ``max_speed``\\ 사이 무작위 값으로 각 적들"
"이 빠르게 움직이는 정도를 선택하도록 할 겁니다 (모두가 같은 속도로 움직이면 "
"지루할 것입니다). 그리고 세 개의 애니메이션의 이름이 들어있는 배열이 있는데 "
"이걸 무작위로 선택해서 사용할 겁니다. 스크립트와 SpriteFrames 리소스에서 철자"
"가 같은지 확인하세요."

#: ../../docs/getting_started/step_by_step/your_first_game.rst:593
msgid ""
"Now let's look at the rest of the script. In ``_ready()`` we randomly choose "
"one of the three animation types:"
msgstr ""
"이제 스크립트의 나머지를 봅시다. ``_ready()`` 에서 우리는 무작위로 세 개의 애"
"니메이션 유형들 중 하나를 고릅니다:"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:612
msgid ""
"You must use ``randomize()`` if you want your sequence of \"random\" numbers "
"to be different every time you run the scene. We're going to use "
"``randomize()`` in our ``Main`` scene, so we won't need it here. ``randi() % "
"n`` is the standard way to get a random integer between ``0`` and ``n-1``."
msgstr ""
"씬을 실행할 때 매 순간마다 다른 \"무작위\" 숫자의 순서를 원한다면 "
"``randomize()`` 를 사용해야 합니다. ``randomize()`` 를 우리의 ``Main`` 씬에 "
"사용할꺼니까, 더이상 여기 있으면 안됩니다. ``randi() % n`` 은  ``0`` 과 "
"``n-1`` 사이의 무작위 정수 값을 얻는 기본적인 방법입니다."

#: ../../docs/getting_started/step_by_step/your_first_game.rst:618
msgid ""
"The last piece is to make the mobs delete themselves when they leave the "
"screen. Connect the ``screen_exited()`` signal of the ``Visibility`` node "
"and add this code:"
msgstr ""
"적이 나갈 때 스스로를 삭제하는 것이 적의 마지막 과제입니다. ``Visubility`` 노"
"드의 ``screen_exited()`` 시그널을 연결하고 이 코드를 추가하세요:"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:635
msgid "This completes the `Mob` scene."
msgstr "이걸로 `적` 씬이 완성되었습니다."

#: ../../docs/getting_started/step_by_step/your_first_game.rst:638
msgid "Main scene"
msgstr "메인 씬"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:640
msgid ""
"Now it's time to bring it all together. Create a new scene and add a :ref:"
"`Node <class_Node>` named ``Main``. Click the \"Instance\" button and select "
"your saved ``Player.tscn``."
msgstr ""
"이제 이 모두를 모을 차례입니다. 새 씬을 만들고 ``Main`` 이라는 이름의 :ref:"
"`Node <class_Node>` 를 만드세요. \"인스턴스\" 버튼을 누르고 저장한 ``Player."
"tscn`` 을 선택하세요."

#: ../../docs/getting_started/step_by_step/your_first_game.rst:646
msgid "See :ref:`doc_instancing` to learn more about instancing."
msgstr "인스턴스에 대해 더 알고 싶다면 :ref:`doc_instancing` 로 가세요."

#: ../../docs/getting_started/step_by_step/your_first_game.rst:648
msgid ""
"Now, add the following nodes as children of ``Main``, and name them as shown "
"(values are in seconds):"
msgstr ""
"``Main`` 의 자식으로 다음의 노드들을 추가하고, 여기에서 설명하는 대로 이름을 "
"지으세요 (값은 초 단위 입니다):"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:651
msgid ""
":ref:`Timer <class_Timer>` (named ``MobTimer``) - to control how often mobs "
"spawn"
msgstr ""
":ref:`Timer <class_Timer>` (``MobTimer`` 라고 이름지음) - 얼마나 자주 적이 스"
"폰하는지를 조절함"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:652
msgid ""
":ref:`Timer <class_Timer>` (named ``ScoreTimer``) - to increment the score "
"every second"
msgstr ""
":ref:`Timer <class_Timer>` (``ScoreTimer`` 라고 이름지음) - 매 초마다 점수를 "
"증가시킴"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:653
msgid ""
":ref:`Timer <class_Timer>` (named ``StartTimer``) - to give a delay before "
"starting"
msgstr ""
":ref:`Timer <class_Timer>` (``StratTimer`` 라고 이름지음) - 시작하기 전에 지"
"연시간을 줌"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:654
msgid ""
":ref:`Position2D <class_Position2D>` (named ``StartPosition``) - to indicate "
"the player's start position"
msgstr ""
":ref:`Position2D <class_Position2D>` (``StartPosition`` 이라고 이름지음) - 플"
"레이어의 시작 위치를 표시함"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:656
msgid ""
"Set the ``Wait Time`` property of each of the ``Timer`` nodes as follows:"
msgstr "각  ``Timer`` 마다 ``Wait Time`` 속성을 다음과 같이 설정하세요:"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:659
msgid "``MobTimer``: ``0.5``"
msgstr "``MobTimer``: ``0.5``"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:660
msgid "``ScoreTimer``: ``1``"
msgstr "``ScoreTimer``: ``1``"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:661
msgid "``StartTimer``: ``2``"
msgstr "``StartTimer``: ``2``"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:663
msgid ""
"In addition, set the ``One Shot`` property of ``StartTimer`` to \"On\" and "
"set ``Position`` of the ``StartPosition`` node to ``(240, 450)``."
msgstr ""
"그리고, ``StartTimer`` 속성의 ``One Shot`` 을 \"On\"으로 설정하고 "
"``StartPosition`` 노드의 ``Position`` 을 ``(240, 450)`` 으로 설정하세요."

#: ../../docs/getting_started/step_by_step/your_first_game.rst:667
msgid "Spawning mobs"
msgstr "적 스폰하기"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:669
msgid ""
"The Main node will be spawning new mobs, and we want them to appear at a "
"random location on the edge of the screen. Add a :ref:`Path2D "
"<class_Path2D>` node named ``MobPath`` as a child of ``Main``. When you "
"select ``Path2D``, you will see some new buttons at the top of the editor:"
msgstr ""
"메인 노드는 새로운 적들을 스폰할 것이고 우리는 그들이 화면 모서리 아무 위치에"
"서나 나타나도록 만들고 싶습니다. :ref:`Path2D <class_Path2D>` 노드를 "
"``Main`` 의 자식으로 추가하고 ``MobPath`` 라고 이름지으세요. ``Path2D`` 를 선"
"택한다면, 당신은 편집기 위쪽에 새로운 버튼들이 보일 것입니다:"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:676
#, fuzzy
msgid ""
"Select the middle one (\"Add Point\") and draw the path by clicking to add "
"the points at the corners shown. To have the points snap to the grid, make "
"sure \"Use Grid Snap\" is selected. This option can be found to the left of "
"the \"Lock\" button, appearing as a magnet next to some intersecting lines."
msgstr ""
"가운데 것을 선택하고 (\"포인트 추가\") 클릭으로 모서리에 포인트를 추가하고 경"
"로를 그립니다. 포인트가 그리드에 스냅되게 하려면, \"그리드에 스냅\"이 체크되"
"어있어야 합니다. 이 설정은 \"잠금\" 버튼 왼쪽과 \"스냅 설정\" 버튼 옆의 세 개"
"의 점에서 찾을 수 있습니다."

#: ../../docs/getting_started/step_by_step/your_first_game.rst:683
msgid ""
"Draw the path in *clockwise* order, or your mobs will spawn pointing "
"*outwards* instead of *inwards*!"
msgstr ""
"*시계 방향* 으로 그리세요, 그렇지 않으면 적들은 *안쪽* 이 아닌 *바깥쪽* 으로 "
"향할 것입니다!"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:686
msgid ""
"After placing point ``4`` in the image, click the \"Close Curve\" button and "
"your curve will be complete."
msgstr ""
"이미지에서 ``4`` 포인트를 찍고 난 후, \"커브 닫기\" 버튼을 누르면 커브가 완성"
"됩니다."

#: ../../docs/getting_started/step_by_step/your_first_game.rst:689
msgid ""
"Now that the path is defined, add a :ref:`PathFollow2D <class_PathFollow2D>` "
"node as a child of ``MobPath`` and name it ``MobSpawnLocation``. This node "
"will automatically rotate and follow the path as it moves, so we can use it "
"to select a random position and direction along the path."
msgstr ""
"이제 경로를 정의하기 위해, :ref:`PathFollow2D <class_PathFollow2D>` 노드를 "
"``MobPath`` 의 자식으로 추가한 후, ``MobSpawnLocation`` 이라고 이름짓습니다. "
"이 노드는 자동으로 회전하고 이동하면서 경로를 따라갈 것입니다, 그래서 우리는 "
"이걸로 경로를 따라 임의의 위치와 방향을 선택하기 위해 사용할 수 있습니다."

#: ../../docs/getting_started/step_by_step/your_first_game.rst:695
msgid "Main script"
msgstr "메인 스크립트"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:697
msgid ""
"Add a script to ``Main``. At the top of the script, we use ``export "
"(PackedScene)`` to allow us to choose the Mob scene we want to instance."
msgstr ""
"``Main`` 에 스크립트를 추가합니다. 스크립트의 위에 ``export (PackedScene)`` "
"를 사용해서 우리가 인스턴스하길 원하는 적 씬을 고를 수 있도록 만듭니다."

#: ../../docs/getting_started/step_by_step/your_first_game.rst:737
msgid ""
"Drag ``Mob.tscn`` from the \"FileSystem\" panel and drop it in the ``Mob`` "
"property under the Script Variables of the ``Main`` node."
msgstr ""
"\"파일 시스템\" 패널에서 ``Mob.tscn`` 을 드래그하고 ``Main`` 노드의 스크립트 "
"속성 아래 ``Mob`` 속성에 드랍하세요."

#: ../../docs/getting_started/step_by_step/your_first_game.rst:740
#, fuzzy
msgid ""
"Next, click on the Player and connect the ``hit`` signal. We want to make a "
"new function named ``game_over``, which will handle what needs to happen "
"when a game ends. Type \"game_over\" in the \"Receiver Method\" box at the "
"bottom of the \"Connecting Signal\" window. Add the following code, as well "
"as a ``new_game`` function to set everything up for a new game:"
msgstr ""
"다음으로, 플레이어를 클릭하고 ``hit`` 시그널과 연결하세요. 우리는 "
"``game_over`` 라는 새로운 함수를 만들어서, 게임이 끝날 때 발생하도록 조절할 "
"것입니다. \"시그널 연결\" 창 아래 \"Method In Node\" 박스에 \"game_over\" 라"
"고 치세요. 다음의 코드를 추가하고 ``new_game`` 함수를 추가하여 새로운 게임을 "
"위한 모든 것들을 설정하세요:"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:777
msgid ""
"Now connect the ``timeout()`` signal of each of the Timer nodes "
"(``StartTimer``, ``ScoreTimer`` ,and ``MobTimer``) to the main script. "
"``StartTimer`` will start the other two timers. ``ScoreTimer`` will "
"increment the score by 1."
msgstr ""
"이제 각 Timer 노드 (``StartTimer``, ``ScoreTimer`` ,그리고 ``MobTimer``) 의 "
"``timeout()`` 시그널을 연결하세요. ``StartTimer`` 는 나머지 두 타이머를 시작"
"하게 만들 것입니다. ``ScoreTimer`` 는 점수가 1씩 증가하게 합니다."

#: ../../docs/getting_started/step_by_step/your_first_game.rst:804
msgid ""
"In ``_on_MobTimer_timeout()``, we will create a mob instance, pick a random "
"starting location along the ``Path2D``, and set the mob in motion. The "
"``PathFollow2D`` node will automatically rotate as it follows the path, so "
"we will use that to select the mob's direction as well as its position."
msgstr ""
"``_on_MobTimer_timeout()`` 에서 우리는 몹 인스턴스를 만들고, ``Path2D`` 에 따"
"라 무작위 시작점을 결정하고, 적이 움직이도록 설정할 것입니다. "
"``PathFollow2D`` 노드는 자동으로 경로를 따라 돌고, 그래서 이걸로 적들의 위치"
"와 방향을 선택하기 위해서 사용할 수 있습니다."

#: ../../docs/getting_started/step_by_step/your_first_game.rst:810
msgid ""
"Note that a new instance must be added to the scene using ``add_child()``."
msgstr "새로운 인스턴스는 ``add_child()`` 를 사용해야 추가할 수 있습니다."

#: ../../docs/getting_started/step_by_step/your_first_game.rst:859
msgid ""
"In functions requiring angles, GDScript uses *radians*, not degrees. If "
"you're more comfortable working with degrees, you'll need to use the "
"``deg2rad()`` and ``rad2deg()`` functions to convert between the two."
msgstr ""
"각도가 필요한 기능에서, GDScript는 각도가 아닌, *라디안* 을 사용합니다. 각도"
"로 좀 더 편한 작업을 하고싶다면, ``deg2rad()`` 와 ``rad2deg()`` 함수로 이 둘"
"을 전환할 수 있습니다."

#: ../../docs/getting_started/step_by_step/your_first_game.rst:865
msgid "HUD"
msgstr "HUD"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:867
msgid ""
"The final piece our game needs is a UI: an interface to display things like "
"score, a \"game over\" message, and a restart button. Create a new scene, "
"and add a :ref:`CanvasLayer <class_CanvasLayer>` node named ``HUD``. \"HUD\" "
"stands for \"heads-up display\", an informational display that appears as an "
"overlay on top of the game view."
msgstr ""
"게임에 마지막으로 필요한 것은 UI입니다: 인터페이스로 화면에 점수, \"게임 오버"
"\" 메시지, 재시작 버튼을 보여줍니다. 새 씬을 만들고,  :ref:`CanvasLayer "
"<class_CanvasLayer>` 노드를 추가하고 ``HUD`` 라고 이름지으세요. \"HUD\"는 "
"\"heads-up display\"의 약자로, 정보가 게임 화면 앞에 덮어씌우는 방식입니다."

#: ../../docs/getting_started/step_by_step/your_first_game.rst:873
msgid ""
"The :ref:`CanvasLayer <class_CanvasLayer>` node lets us draw our UI elements "
"on a layer above the rest of the game, so that the information it displays "
"isn't covered up by any game elements like the player or mobs."
msgstr ""
":ref:`CanvasLayer <class_CanvasLayer>` 노드는 게임 위 레이어에 우리의 UI 요소"
"들을 그릴수 있게 해주고, 이로써 보여지는 정보가 플레이어나 적과 같은 게임 요"
"소들에 의해 가려지지 않게 만듭니다."

#: ../../docs/getting_started/step_by_step/your_first_game.rst:877
msgid "The HUD displays the following information:"
msgstr "HUD는 다음의 정보들을 보여줍니다:"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:879
msgid "Score, changed by ``ScoreTimer``."
msgstr "점수, ``ScoreTimer`` 가 바꿈."

#: ../../docs/getting_started/step_by_step/your_first_game.rst:880
msgid "A message, such as \"Game Over\" or \"Get Ready!\""
msgstr "메시지, \"Game Over\"나 \"Get Ready!\""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:881
msgid "A \"Start\" button to begin the game."
msgstr "게임을 시작하기 위한 \"Start\" 버튼."

#: ../../docs/getting_started/step_by_step/your_first_game.rst:883
msgid ""
"The basic node for UI elements is :ref:`Control <class_Control>`. To create "
"our UI, we'll use two types of :ref:`Control <class_Control>` nodes: :ref:"
"`Label <class_Label>` and :ref:`Button <class_Button>`."
msgstr ""
"UI 요소에 기초가 되는 노드는 :ref:`Control <class_Control>` 입니다. UI를 만들"
"기 위해, 우리는 두 가지 형식의 :ref:`Control <class_Control>` 노드를 쓸겁니"
"다: :ref:`Label <class_Label>` 과 :ref:`Button <class_Button>` 입니다."

#: ../../docs/getting_started/step_by_step/your_first_game.rst:887
msgid "Create the following as children of the ``HUD`` node:"
msgstr "다음에 맞춰 ``HUD`` 노드의 자식으로 추가하세요:"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:889
msgid ":ref:`Label <class_Label>` named ``ScoreLabel``."
msgstr "``ScoreLabel`` 로 이름지은 :ref:`Label <class_Label>`."

#: ../../docs/getting_started/step_by_step/your_first_game.rst:890
msgid ":ref:`Label <class_Label>` named ``MessageLabel``."
msgstr "``MessageLabel`` 로 이름지은 :ref:`Label <class_Label>`."

#: ../../docs/getting_started/step_by_step/your_first_game.rst:891
msgid ":ref:`Button <class_Button>` named ``StartButton``."
msgstr "``StartButton`` 으로 이름지은 :ref:`Button <class_Button>`."

#: ../../docs/getting_started/step_by_step/your_first_game.rst:892
msgid ":ref:`Timer <class_Timer>` named ``MessageTimer``."
msgstr "``MessageTimer`` 로 이름지은 :ref:`Timer <class_Timer>`."

#: ../../docs/getting_started/step_by_step/your_first_game.rst:894
msgid ""
"Click on the ``ScoreLabel`` and type a number into the *Text* field in the "
"Inspector. The default font for ``Control`` nodes is small and doesn't scale "
"well. There is a font file included in the game assets called \"Xolonium-"
"Regular.ttf\". To use this font, do the following for each of the three "
"``Control`` nodes:"
msgstr ""
"``ScoreLabel``\\ 을 클릭하고 인스펙터(Inspecter)의 *Text* 영역에 숫자를 입력"
"하세요. ``Control`` 노드의 기본 폰트는 작고 크게 만들기 어렵습니다. game "
"assets에는 \"Xolonium-Regular.ttf\"라는 폰트 파일이 있습니다. 이 폰트를 사용"
"하려면, 각 ``Control`` 노드마다 다음과 같이 하세요:"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:900
msgid "Under \"Custom Fonts\", choose \"New DynamicFont\""
msgstr "\"Custom Fonts\" 에서, \"새 DynamicFont\"를 선택하세요"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:904
msgid ""
"Click on the \"DynamicFont\" you added, and under \"Font/Font Data\", choose "
"\"Load\" and select the \"Xolonium-Regular.ttf\" file. You must also set the "
"font's ``Size``. A setting of ``64`` works well."
msgstr ""
"추가한 \"DynamicFont\"를 클릭하시고, \"Font/Font Data\" 아래에서, \"불러오기"
"\"를 눌러서 \"Xolonium-Regular.ttf\" 파일을 선택하세요. 또한 폰트의 ``Size`` "
"도 설정해야 합니다. ``64`` 정도가 좋습니다."

#: ../../docs/getting_started/step_by_step/your_first_game.rst:910
msgid ""
"**Anchors and Margins:** ``Control`` nodes have a position and size, but "
"they also have anchors and margins. Anchors define the origin - the "
"reference point for the edges of the node. Margins update automatically when "
"you move or resize a control node. They represent the distance from the "
"control node's edges to its anchor. See :ref:"
"`doc_design_interfaces_with_the_control_nodes` for more details."
msgstr ""
"**앵커(Anchors)와 마진(Margins):** ``Control`` 노드는 위치와 크기를 가지고 있"
"고, 앵커과 마진 또한 가지고 있습니다. 앵커는 중심은 정의합니다 - 노드의 모서"
"리를 위한 참고 포인트. 마진은 컨트롤 노드를 움직이거나 크기를 조절할 때 자동"
"으로 업데이트됩니다. 이것은 컨트롤 노드들의 모서리가 앵커로부터 얼마나 떨어"
"져 있는 지를 나타냅니다. 더 자세한 설명은 :ref:"
"`doc_design_interfaces_with_the_control_nodes` 를 참고하세요."

#: ../../docs/getting_started/step_by_step/your_first_game.rst:917
msgid ""
"Arrange the nodes as shown below. Click the \"Layout\" button to set a "
"Control node's layout:"
msgstr ""
"아래에 보이는 대로 노드를 정렬하세요. \"레이아웃(Layout)\" 버튼을 클릭해서 "
"Control 노드의 레이아웃을 설정하세요:"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:922
msgid ""
"You can drag the nodes to place them manually, or for more precise "
"placement, use the following settings:"
msgstr ""
"당신은 노드들을 드래그해서 수동으로 놓을 수도 있습니다, 혹은 더 정확한 방법으"
"로는, 다음의 설정을 사용하세요:"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:926
msgid "ScoreLabel"
msgstr "ScoreLabel"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:928
msgid "*Text* : ``0``"
msgstr "*Text* : ``0``"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:929
msgid "*Layout* : \"Top Wide\""
msgstr "*레이아웃* : \"Top Wide\""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:930
#: ../../docs/getting_started/step_by_step/your_first_game.rst:937
msgid "*Align* : \"Center\""
msgstr "*Align* : \"Center\""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:933
msgid "MessageLabel"
msgstr "MessageLabel"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:935
msgid "*Text* : ``Dodge the Creeps!``"
msgstr "*Text* : ``Dodge the Creeps!``"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:936
msgid "*Layout* : \"HCenter Wide\""
msgstr "*레이아웃* : \"HCenter Wide\""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:938
msgid "*Autowrap* : \"On\""
msgstr "*Autowrap* : \"On\""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:941
msgid "StartButton"
msgstr "StartButton"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:943
msgid "*Text* : ``Start``"
msgstr "*Text* : ``Start``"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:944
msgid "*Layout* : \"Center Bottom\""
msgstr "*레이아웃* : \"Center Bottom\""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:945
msgid "*Margin* :"
msgstr "*Margin* :"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:947
msgid "Top: ``-200``"
msgstr "Top: ``-200``"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:948
msgid "Bottom: ``-100``"
msgstr "Bottom: ``-100``"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:950
msgid "Now add this script to ``HUD``:"
msgstr "이제 ``HUD`` 에 이 스크립트를 추가하세요:"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:969
msgid ""
"The ``start_game`` signal tells the ``Main`` node that the button has been "
"pressed."
msgstr "``start_game`` 시그널은 ``Main`` 노드에게 버튼이 눌려졌음을 알립니다."

#: ../../docs/getting_started/step_by_step/your_first_game.rst:991
msgid ""
"This function is called when we want to display a message temporarily, such "
"as \"Get Ready\". On the ``MessageTimer``, set the ``Wait Time`` to ``2`` "
"and set the ``One Shot`` property to \"On\"."
msgstr ""
"이 함수는 우리가 원하는 메시지를 일시적으로 보여줄 때 호출됩니다, \"Get Ready"
"\" 처럼 말이죠. ``MessageTimer`` 에서, ``WaitTime`` 을 ``2`` 로 설정하고 "
"``OneShot`` 속성을 \"On\"으로 하세요."

#: ../../docs/getting_started/step_by_step/your_first_game.rst:1026
msgid ""
"This function is called when the player loses. It will show \"Game Over\" "
"for 2 seconds, then return to the title screen and, after a brief pause, "
"show the \"Start\" button."
msgstr ""
"이 함수는 플레이어가 패배했을 때 호출됩니다. 이것은 2초동안 \"Game Over\"를 "
"보여주고, 타이틀 화면으로 돌아와서, 잠깐 일시정지한 후 \"Start\" 버튼을 보여"
"줍니다."

#: ../../docs/getting_started/step_by_step/your_first_game.rst:1030
msgid ""
"When you need to pause for a brief time, an alternative to using a Timer "
"node is to use the SceneTree's ``create_timer()`` function. This can be very "
"useful to delay, such as in the above code, where we want to wait a little "
"bit of time before showing the \"Start\" button."
msgstr ""
"짧은 시간동안 일시 정지를 하고 싶을 때, Timer 노드를 사용하는 대체재로 "
"SceneTree의 ``create_timer()`` 함수를 사용하는 것입니다. 위의 코드에서처럼 시"
"간 지연에 매우 유용한데, \"Start\" 버튼을 보여주기 전에 약간의 시간을 기다려"
"줍니다."

#: ../../docs/getting_started/step_by_step/your_first_game.rst:1048
msgid "This function is called by ``Main`` whenever the score changes."
msgstr "이 함수는 점수가 변경될 때마다 ``Main`` 에 의해서 호출됩니다."

#: ../../docs/getting_started/step_by_step/your_first_game.rst:1050
msgid ""
"Connect the ``timeout()`` signal of ``MessageTimer`` and the ``pressed()`` "
"signal of ``StartButton``."
msgstr ""
"``MessageTimer`` 의 ``timeout()`` 시그널과 ``StartButton`` 의 ``pressed()`` "
"를 연결하세요."

#: ../../docs/getting_started/step_by_step/your_first_game.rst:1077
msgid "Connecting HUD to Main"
msgstr "메인에 HUD를 연결하기"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:1079
msgid ""
"Now that we're done creating the ``HUD`` scene, save it and go back to "
"``Main``. Instance the ``HUD`` scene in ``Main`` like you did the ``Player`` "
"scene, and place it at the bottom of the tree. The full tree should look "
"like this, so make sure you didn't miss anything:"
msgstr ""
"이제 ``HUD`` 씬 만들기가 끝났습니다, 저장하고 다시 ``Main`` 으로 돌아갑니다. "
"``Player`` 씬에서 했듯이 ``HUD`` 씬을 ``Main`` 에 인스턴스하고, 트리의 맨 아"
"래에 위치시킵니다. 모든 트리는 이렇게 되어야 하므로, 놓친 것이 없는지 확인해"
"보세요:"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:1086
msgid ""
"Now we need to connect the ``HUD`` functionality to our ``Main`` script. "
"This requires a few additions to the ``Main`` scene:"
msgstr ""
"이제 ``HUD`` 기능을 ``Main`` 스크립트에 연결할겁니다. 여기에는 ``Main`` 씬에 "
"추가적인 것이 요구됩니다:"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:1089
msgid ""
"In the Node tab, connect the HUD's ``start_game`` signal to the "
"``new_game()`` function of the Main node."
msgstr ""
"노드(Node) 탭에서, HUD의 ``start_game`` 시그널을 Main 노드의 ``new_game()`` "
"함수에 연결하세요."

#: ../../docs/getting_started/step_by_step/your_first_game.rst:1092
msgid ""
"In ``new_game()``, update the score display and show the \"Get Ready\" "
"message:"
msgstr ""
"``new_game()`` 에서, 점수 화면을 업데이트하고 \"Get Ready\" 메시지를 보이게 "
"합니다:"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:1107
msgid "In ``game_over()`` we need to call the corresponding ``HUD`` function:"
msgstr "``game_over()`` 에서는, 일치하는 ``HUD`` 함수를 호출해야 합니다:"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:1118
msgid ""
"Finally, add this to ``_on_ScoreTimer_timeout()`` to keep the display in "
"sync with the changing score:"
msgstr ""
"마지막으로, ``_on_ScoreTimer_timeout()`` 를 추가해서 점수가 바뀌는 것과 일치"
"한 화면을 유지하도록 합니다:"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:1130
msgid ""
"Now you're ready to play! Click the \"Play the Project\" button. You will be "
"asked to select a main scene, so choose ``Main.tscn``."
msgstr ""
"이제 실행할 준비가 끝났습니다! \"프로젝트 실행\" 버튼을 누르세요. 아마 메인 "
"씬을 선택하라고 물어볼 겁니다, ``Main.tscn`` 을 골라줍시다."

#: ../../docs/getting_started/step_by_step/your_first_game.rst:1134
msgid "Removing old creeps"
msgstr "오래된 적들 제거하기"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:1136
msgid ""
"If you play until \"Game Over\" and then start a new game the creeps from "
"the previous game are still on screen. It would be better if they all "
"disappeared at the start of a new game."
msgstr ""
"\"Game Over\"까지 게임을 하고 새 게임을 시작해도, 전 판에서 있었던 적들이 아"
"직 화면에 남아 있습니다.새 게임이 시작되면 적이 모두 사라지는 것이 좋을 것입"
"니다."

#: ../../docs/getting_started/step_by_step/your_first_game.rst:1140
msgid ""
"We'll use the ``start_game`` signal that's already being emitted by the "
"``HUD`` node to remove the remaining creeps. We can't use the editor to "
"connect the signal to the mobs in the way we need because there are no "
"``Mob`` nodes in the ``Main`` scene tree until we run the game. Instead "
"we'll use code."
msgstr ""
"이미 ``HUD`` 노드에 의해 방출되는 ``start_game`` 시그널을 사용해 남아있는 적"
"들을 제거할 것입니다. 편집기를 사용해 적에게 시그널을 연결할 수는 없는데, 게"
"임을 실행하기 전 까진 ``Mob`` 노드가 ``Main`` 씬 트리에 없기 때운입니다. 대"
"신 코드를 사용합니다."

#: ../../docs/getting_started/step_by_step/your_first_game.rst:1145
msgid ""
"Start by adding a new function to ``Mob.gd``. ``queue_free()`` will delete "
"the current node at the end of the current frame."
msgstr ""
"시작하려면 ``Mob.gd``\\ 에 새 함수를 추가합니다. ``queue_free()``\\ 는 현재 "
"프레임이 끝나는 순간 현재 노드를 제거합니다."

#: ../../docs/getting_started/step_by_step/your_first_game.rst:1161
msgid ""
"Then in ``Main.gd`` add a new line inside the ``_on_MobTimer_timeout()`` "
"function, at the end."
msgstr ""
"그런 다음 ``Main.gd``\\ 에서 ``_on_MobTimer_timeout()``\\ 의 끝에 새로운 줄"
"을 추가합니다."

#: ../../docs/getting_started/step_by_step/your_first_game.rst:1173
msgid ""
"This line tells the new Mob node (referenced by the ``mob`` variable) to "
"respond to any ``start_game`` signal emitted by the ``HUD`` node by running "
"its ``_on_start_game()`` function."
msgstr ""
"이 줄은 (``mob`` 변수에 의해 참조된) 새로운 Mob 노드로, ``HUD`` 노드의 "
"``_on_start_game()`` 함수가 실행하여 방출하는 ``start_game`` 시그널에 반응합"
"니다."

#: ../../docs/getting_started/step_by_step/your_first_game.rst:1178
msgid "Finishing up"
msgstr "마무리 작업"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:1180
msgid ""
"We have now completed all the functionality for our game. Below are some "
"remaining steps to add a bit more \"juice\" to improve the game experience. "
"Feel free to expand the gameplay with your own ideas."
msgstr ""
"우리는 게임의 모든 기능을 마친 상태입니다. 밑에 남아있는 단계는 게임의 경험"
"을 향상시킬 \"주스\"를 추가하는 것입니다. 독창적인 아이디어로 자유롭게 게임 "
"플레이를 확장시켜보세요."

#: ../../docs/getting_started/step_by_step/your_first_game.rst:1185
#: ../../docs/tutorials/3d/environment_and_post_processing.rst:59
msgid "Background"
msgstr "배경(Background)"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:1187
msgid ""
"The default gray background is not very appealing, so let's change its "
"color. One way to do this is to use a :ref:`ColorRect <class_ColorRect>` "
"node. Make it the first node under ``Main`` so that it will be drawn behind "
"the other nodes. ``ColorRect`` only has one property: ``Color``. Choose a "
"color you like and drag the size of the ``ColorRect`` so that it covers the "
"screen."
msgstr ""
"기본 회색 배경은 그렇게 멋지지는 않습니다, 그래서 색깔을 바꿔봅시다. 그 방법"
"들 중 하나는 :ref:`ColorRect <class_ColorRect>` 노드를 사용하는 것입니다. "
"``Main`` 바로 밑 첫 번째 노드로 놓아서 다른 노드들 뒤에 그려지도록 하세요. "
"``ColorRect`` 는 오직 하나의 속성만 가지고 있습니다: ``Color`` 입니다. 원하"
"는 색깔을 고르고 ``ColorRect`` 의 크기를 조절해 화면을 덮도록 만듭시다."

#: ../../docs/getting_started/step_by_step/your_first_game.rst:1194
msgid ""
"You could also add a background image, if you have one, by using a "
"``Sprite`` node."
msgstr ""
"또한 배경 이미지를 추가할 수도 있는데, 이미지가 있다면, ``Sprite`` 노드를 사"
"용하면 됩니다."

#: ../../docs/getting_started/step_by_step/your_first_game.rst:1198
msgid "Sound effects"
msgstr "음향 효과(Sound effects)"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:1200
msgid ""
"Sound and music can be the single most effective way to add appeal to the "
"game experience. In your game assets folder, you have two sound files: "
"\"House In a Forest Loop.ogg\" for background music, and \"gameover.wav\" "
"for when the player loses."
msgstr ""
"사운드와 음악은 게임 경험을 멋지게 만들어주는 가장 효과적인 물건입니다. 게임 "
"애셋 폴더에서, 두 개의 사운드 파일을 찾으실 수 있습니다: \"House In a Forest "
"Loop.ogg\"는 배경 음악으로, \"gameover.wav\"는 플레이어가 죽었을 때 쓰면 됩니"
"다."

#: ../../docs/getting_started/step_by_step/your_first_game.rst:1205
msgid ""
"Add two :ref:`AudioStreamPlayer <class_AudioStreamPlayer>` nodes as children "
"of ``Main``. Name one of them ``Music`` and the other ``DeathSound``. On "
"each one, click on the ``Stream`` property, select \"Load\", and choose the "
"corresponding audio file."
msgstr ""
"두 개의 :ref:`AudioStreamPlayer <class_AudioStreamPlayer>` 노드를 ``Main`` "
"의 자식으로 추가하세요. 하나는 ``Music`` 으로, 다른 하나는 ``DeathSound`` 로 "
"이름 지으세요. 각각에서, ``Stream`` 속성을 클릭하시고 \"Load\"를 선택해서 이"
"름에 맞는 오디오 파일을 선택하세요."

#: ../../docs/getting_started/step_by_step/your_first_game.rst:1210
msgid ""
"To play the music, add ``$Music.play()`` in the ``new_game()`` function and "
"``$Music.stop()`` in the ``game_over()`` function."
msgstr ""
"음악을 실행시키려면, ``new_game()`` 함수에 ``$Music.play()`` 를 추가하고 "
"``game_over()`` 함수에 ``$Music.stop()`` 을 추가하세요."

#: ../../docs/getting_started/step_by_step/your_first_game.rst:1213
msgid "Finally, add ``$DeathSound.play()`` in the ``game_over()`` function."
msgstr ""
"마지막으로, ``game_over()`` 함수에 ``$DeathSound.play()`` 를 추가하세요."

#: ../../docs/getting_started/step_by_step/your_first_game.rst:1216
msgid "Keyboard Shortcut"
msgstr "키보드 단축키"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:1218
msgid ""
"Since the game is played with keyboard controls, it would be convenient if "
"we could also start the game by pressing a key on the keyboard. One way to "
"do this is using the \"Shortcut\" property of the ``Button`` node."
msgstr ""
"게임을 키보드로 조작하면, 키보드의 한 버튼을 눌러서 게임을 실행할 수 있도록 "
"하는 게 편리할 것입니다. 이렇게 하는 방법들 중 하나로 ``Button`` 노드의 "
"\"Shortcut\" 속성을 사용하는 것이 있습니다."

#: ../../docs/getting_started/step_by_step/your_first_game.rst:1222
msgid ""
"In the ``HUD`` scene, select the ``StartButton`` and find its *Shortcut* "
"property in the Inspector. Select \"New Shortcut\" and click on the "
"\"Shortcut\" item. A second *Shortcut* property will appear. Select \"New "
"InputEventAction\" and click the new \"InputEvent\". Finally, in the "
"*Action* property, type the name ``ui_select``. This is the default input "
"event associated with the spacebar."
msgstr ""
"``HUD`` 씬에서 ``StartButton``\\ 을 선택하고 인스펙터(Inspecter)에서 "
"*Shortcut* 속성을 찾으세요. \"새 Shortcut\"을 선택하고 \"Shortcut\" 항목을 클"
"릭하세요. 두 번째 *Shortcut* 속성이 나타날 것입니다. \"새 InputEventAction"
"\"을 선택하고 새로운 \"InputEvent\"을 클릭하세요. 마지막으로 *Action* 속성에"
"서 이름을 \"ui_select\"로 입력하세요. 이것은 스페이스바로 지정된 기본 입력 이"
"벤트입니다."

#: ../../docs/getting_started/step_by_step/your_first_game.rst:1230
#, fuzzy
msgid ""
"Now when the start button appears, you can either click it or press :kbd:"
"`Space` to start the game."
msgstr ""
"이제 시작 버튼이 나타날 때, 버튼을 클릭하거나 스페이스바를 눌러서 게임을 시작"
"할 수 있습니다."

#: ../../docs/getting_started/step_by_step/your_first_game.rst:1234
msgid "Project files"
msgstr "프로젝트 파일"

#: ../../docs/<generated>:1
msgid "You can find a completed version of this project at these locations:"
msgstr "당신은 여기서 이 프로젝트의 완성 버전을 확인하실 수 있습니다:"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:1237
msgid "https://github.com/kidscancode/Godot3_dodge/releases"
msgstr "https://github.com/kidscancode/Godot3_dodge/releases"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:1238
msgid "https://github.com/godotengine/godot-demo-projects"
msgstr "https://github.com/godotengine/godot-demo-projects"

#: ../../docs/getting_started/step_by_step/exporting.rst:4
#: ../../docs/getting_started/editor/command_line_tutorial.rst:257
msgid "Exporting"
msgstr "내보내기(Exporting)"

#: ../../docs/getting_started/step_by_step/exporting.rst:9
msgid ""
"Now that you have a working game, you probably want to share your success "
"with others. However, it's not practical to ask your friends to download "
"Godot just so they can open your project. Instead, you can *export* your "
"project, converting it into a \"package\" that can be run by anyone."
msgstr ""
"이제 당신은 작업한 게임을 갖고 있으니, 당신의 성공을 남과 나누고 싶을 겁니"
"다. 하지만, 그렇다고 친구에게 Godot를 다운로드하고 프로젝트를 열라고 요청하"
"는 것은 실용적이지 못합니다. 대신, 당신은 당신의 프로젝트를 \"패키지\"로 전환"
"해서 누구나 열 수 있도록 *내보내기* 가 가능합니다."

#: ../../docs/getting_started/step_by_step/exporting.rst:14
msgid ""
"The way you export your game depends on what platform you are targeting. In "
"this tutorial, you'll learn how to export the \"Dodge the Creeps\" game for "
"a variety of platforms. First, however, we need to make some changes to the "
"way the game works."
msgstr ""
"당신이 무슨 플랫폼을 타깃으로 삼느냐에 따라 게임을 내보내는 방법은 다릅니다. "
"이 튜토리얼에서는, 어떻게 \"Dodge the Creeps\" 게임을 다양한 플랫폼에 내보내"
"는 지를 배울겁니다. 그러나, 먼저 우리는 게임이 작동하는 방식을 바꿔야합니다."

#: ../../docs/getting_started/step_by_step/exporting.rst:19
msgid ""
"If you haven't made \"Dodge the Creeps\" yourself yet, please read :ref:"
"`doc_your_first_game` before continuing with this tutorial."
msgstr ""
"아직 \"Dodge the Creeps\"을 스스로 만들지 않았다면, 이 튜토리얼을 시작하기 전"
"에 :ref:`doc_your_first_game` 을 읽어주세요."

#: ../../docs/getting_started/step_by_step/exporting.rst:23
msgid "Preparing the project"
msgstr "프로젝트 준비하기"

#: ../../docs/getting_started/step_by_step/exporting.rst:25
msgid ""
"In \"Dodge the Creeps\" we used keyboard controls to move the player's "
"character. This is fine if your game is being played on a PC platform, but "
"on a phone or tablet, you need to support touchscreen input. Because a click "
"event can be treated the same as a touch event, we'll convert the game to a "
"click-and-move input style."
msgstr ""
"\"Dodge the Creeps\" 에서 우리는 키보드로 플레이어의 캐릭터를 움직이게 합니"
"다. 이것은 PC 플랫폼에서 실행된다면 괜찮습니다만, 폰이나 태블릿이라면, 터치 "
"스크린 입력을 지원해야합니다. 클릭 이벤트는 터치 이벤트와 동일하게 처리될 수 "
"있기 때문에, 우리는 게임을 클릭-그리고-움직임 입력 스타일로 만들어야합니다."

#: ../../docs/getting_started/step_by_step/exporting.rst:31
msgid ""
"By default Godot emulates mouse input from touch input. That means if "
"anything is coded to happen on a mouse event, touch will trigger it as well. "
"Godot can also emulate touch input from mouse clicks, which we will need to "
"be able to keep playing our game on our computer after we switch to touch "
"input. In the \"Project Settings\" under *Input Devices* and *Pointing*, set "
"*Emulate Touch From Mouse* to \"On\"."
msgstr ""
"기본적으로 Godot는 터치 입력에서 마우스 입력을 재현합니다. 즉, 마우스 이벤트"
"로 발생할 수 있는 모든 일은 터치 이벤트로도 가능하다는 것입니다. 반대로 Godot"
"는 마우스 클릭에서 터치 입력을 재현할 수 있는데, 터치 입력으로 게임을 바꾼 뒤"
"에도 컴퓨터에서도 게임이 가능하도록 만들 때 필요합니다. \"프로젝트 설정"
"(Project Settings)\"에서 *Input Devices*\\ 의 *Pointing*\\ 으로 간 뒤, "
"*Emulate Touch From Mouse*\\ 를 \"사용(On)\"으로 설정하세요."

#: ../../docs/getting_started/step_by_step/exporting.rst:39
msgid ""
"We also want to ensure that the game scales consistently on different-sized "
"screens, so in the project settings go to *Display*, then click on *Window*. "
"In the *Stretch* options, set *Mode* to \"2d\" and *Aspect* to \"keep\"."
msgstr ""
"그리고 다른 화면에서 게임의 크기는 일정하게 만들어야 합니다. 따라서 프로젝트 "
"설정(Project Settings)에서 *Display*\\ 의 *Window*\\ 로 갑니다. *Stretch* 설"
"정에서 *Mode*\\ 를 \"2d\"로 설정하고, *Aspect*\\ 를 \"keep\"으로 설정합니다."

#: ../../docs/getting_started/step_by_step/exporting.rst:43
msgid ""
"Since we are already in the *Window* settings, we should also set under "
"*Handheld* the *Orientation* to \"portrait\"."
msgstr ""
"*Window* 설정은 마쳤지만, *Handheld*\\ 의 *Orientation*\\ 을 \"portrait\"로 "
"따로 설정해야 합니다."

#: ../../docs/getting_started/step_by_step/exporting.rst:48
msgid ""
"Next, we need to modify the ``Player.gd`` script to change the input method. "
"We'll remove the key inputs and make the player move towards a \"target\" "
"that's set by the touch (or click) event."
msgstr ""
"다음으로, 우리는 입력 메소드를 변경하기 위해 ``Player.gd`` 스크립트를 수정해"
"야 합니다. 키 입력을 지우고 플레이어가 터치 (나 클릭) 이벤트로 설정된 \"타깃"
"\"을 향해 움직이도록 합니다."

#: ../../docs/getting_started/step_by_step/exporting.rst:52
msgid ""
"Here is the full script for the player, with comments noting what we've "
"changed:"
msgstr ""
"여기 플레이어를 위한 전체 스크립트가 있습니다, 변경한 점에는 코멘트가 있습니"
"다:"

#: ../../docs/getting_started/step_by_step/exporting.rst:246
msgid "Setting a main scene"
msgstr "메인 씬 설정하기"

#: ../../docs/getting_started/step_by_step/exporting.rst:248
msgid ""
"The main scene is the one that your game will start in. In *Project -> "
"Project Settings -> Application -> Run*, set *Main Scene* to \"Main.tscn\" "
"by clicking the folder icon and selecting it."
msgstr ""
"메인 씬은 게임이 시작하는 씬입니다. *프로젝트(Project) -> 프로젝트 설정"
"(Project Settings) -> Application -> Run*\\ 에서, *Main Scene*\\ 에 있는 폴"
"더 아이콘을 클릭하고 \"Main.tscn\"을 설정합니다."

#: ../../docs/getting_started/step_by_step/exporting.rst:253
#: ../../docs/getting_started/workflow/export/exporting_projects.rst:92
#: ../../docs/development/compiling/introduction_to_the_buildsystem.rst:194
#: ../../docs/development/compiling/compiling_with_mono.rst:167
msgid "Export templates"
msgstr "템플릿 내보내기"

#: ../../docs/getting_started/step_by_step/exporting.rst:255
msgid ""
"In order to export, you need to download the *export templates* from the "
"http://godotengine.org/download. These templates are optimized versions of "
"the engine without the editor pre-compiled for each platform . You can also "
"download them in Godot by clicking on *Editor -> Manage Export Templates*:"
msgstr ""
"프로젝트를 내보내려면, *내보내기 템플릿(export templates)* 을 http://"
"godotengine.org/download 에서 다운로드 해야 합니다. 이 템플릿은 엔진에 최적화"
"된 버전으로 각 플렛폼에 따로 컴파일된 편집기가 필요 없습니다. 당신은 또한 "
"Godot에서 *편집기 -> 내보내기 템플릿 관리* 를 통해 다운로드 할 수 있습니다:"

#: ../../docs/getting_started/step_by_step/exporting.rst:262
msgid ""
"In the window that appears, you can click \"Download\" to get the template "
"version that matches your version of Godot."
msgstr ""
"나타나는 창에서, \"다운로드\" 를 눌러서 당신의 Godot 버전과 맞는 템플릿을 다"
"운로드 할 수 있습니다."

#: ../../docs/getting_started/step_by_step/exporting.rst:267
msgid ""
"If you upgrade Godot, you must download templates that match the new version "
"or your exported projects may not work correctly."
msgstr ""
"Godot를 업그레이드 하셨다면, 새로운 버전에 맞는 템플릿을 다운로드 해야 하고 "
"그렇지 않으면 프로젝트가 제대로 내보내기가 작동하지 않습니다."

#: ../../docs/getting_started/step_by_step/exporting.rst:271
msgid "Export presets"
msgstr "프리셋 내보내기"

#: ../../docs/getting_started/step_by_step/exporting.rst:273
msgid ""
"Next, you can configure the export settings by clicking on *Project -> "
"Export*."
msgstr ""
"다음은 *프로젝트(Project) -> 내보내기(Export)*\\ 에서 내보내기 설정을 구성할 "
"수 있습니다."

#: ../../docs/getting_started/step_by_step/exporting.rst:275
msgid ""
"Create a new export preset by clicking \"Add...\" and selecting a platform. "
"You can make as many presets as you like with different settings."
msgstr ""
"\"추가...\"를 눌러서 새 내보내기 프리셋을 만들고 플랫폼을 선택하세요. 다양한 "
"설정과 함께 당신은 많은 프리셋를 만들 수 있습니다."

#: ../../docs/getting_started/step_by_step/exporting.rst:280
msgid ""
"At the bottom of the window are two buttons. \"Export PCK/ZIP\" only creates "
"a packed version of your project's data. This doesn't include an executable "
"so the project can't be run on its own."
msgstr ""
"창의 아래쪽에 두 버튼이 있습니다. \"PCK/ZIP 내보내기\"는 오직 프로젝트 데이터"
"를 압축된 버전으로 만듭니다. 이것은 실행 파일이 아니므로 프로젝트가 스스로 실"
"행되지 못합니다."

#: ../../docs/getting_started/step_by_step/exporting.rst:284
msgid ""
"The second button, \"Export Project\", creates a complete executable version "
"of your game, such as an `.apk` for Android or an `.exe` for Windows."
msgstr ""
"두 번째 버튼, \" 프로젝트 내보내기\", 게임의 완전 실행가능한 버전을 만듭니"
"다, 마치 Android의 `.apk` 나 Windows의 `.exe` 처럼 말이죠."

#: ../../docs/getting_started/step_by_step/exporting.rst:287
msgid ""
"In the \"Resources\" and \"Features\" tabs, you can customize how the game "
"is exported for each platform. We can leave those settings alone for now."
msgstr ""
"\"리소스\"와 \"기능\" 탭에서 당신은 게임이 각 플랫폼으로 어떻게 만들어질지를 "
"설정할 수 있습니다. 지금은 이 설정을 그냥 놔 두어도 됩니다."

#: ../../docs/getting_started/step_by_step/exporting.rst:291
msgid "Exporting by platform"
msgstr "플랫폼 별 내보내기"

#: ../../docs/getting_started/step_by_step/exporting.rst:293
msgid ""
"In this section, we'll walk through the process for each platform, including "
"any additional software or requirements you'll need."
msgstr ""
"이 섹션에서, 추가 소프트웨어나 요구 사항과 함께 각 플랫폼의 프로세스를 단계적"
"으로 배울겁니다."

#: ../../docs/getting_started/step_by_step/exporting.rst:297
msgid "PC (Linux/macOS/Windows)"
msgstr "PC (Linux/macOS/Windows)"

#: ../../docs/getting_started/step_by_step/exporting.rst:299
msgid ""
"Exporting PC platforms works the same across the three supported operating "
"systems. Open the export window and click \"Add..\" to create the preset(s) "
"you want to make. Then click \"Export Project\" and choose a name and "
"destination folder. Choose a location *outside* of your project folder."
msgstr ""
"PC 플랫폼 내보내기는 지원되는 세 가지 운영체제에서 동일하게 작동합니다. 내보"
"내기 창을 열고 \"추가...\"를 눌러 만들고 싶은 프리셋을 생성합니다. 그후 \"프"
"로젝트 내보내기\"를 클릭하고 이름과 목적 폴더를 지정합니다. 당신의 프로젝트 "
"폴더 *바깥* 에 위치를 지정하세요."

#: ../../docs/getting_started/step_by_step/exporting.rst:304
msgid "Click \"Save\" and the engine will build the export files."
msgstr "\"저장\"을 누르면 엔진이 내보내기 파일을 만들겁니다."

#: ../../docs/getting_started/step_by_step/exporting.rst:306
msgid ""
"When exporting for macOS, if you export on a macOS computer, you'll end up "
"with a `.dmg` file, while using Linux or Windows produces a `.zip`. In "
"either case, the compressed file contains a macOS `.app` that you can double-"
"click and run."
msgstr ""
"macOS 컴퓨터에서 작업한다면, macOS로 내보낼 때, 파일을 `.dmg` 파일로 만들 것"
"이고, 반면에 Linux나 Windows는 `.zip` 으로 생성합니다. 어떤 경우든지, 압축된 "
"파일은 macOS의 `.app` 을 갖고 있으므로 더블 클릭해서 실행할 수 있습니다."

#: ../../docs/getting_started/step_by_step/exporting.rst:311
msgid ""
"On Windows, if you want your exported executable to have a different icon "
"than the default one, you need to change it manually. See: :ref:"
"`doc_changing_application_icon_for_windows`."
msgstr ""
"Windows에서, 당신이 내보낸 실행 파일이 기존과 다른 아이콘을 갖도록 하고 싶다"
"면, 수동으로 교체해야합니다. 여기를 참고하세요: :ref:"
"`doc_changing_application_icon_for_windows`."

#: ../../docs/getting_started/step_by_step/exporting.rst:318
msgid ""
"Mobile devices come with a wide variety of capabilities. In most cases, "
"Godot's default settings will work, but mobile development is sometimes more "
"art than science, and you may need to do some experimenting and searching "
"for help in order to get everything working."
msgstr ""
"모바일 기기에는 다양한 기능이 있습니다. 대부분의 경우는, Godot의 기본 설정이 "
"먹히지만, 모바일 개발은 때로는 과학보단 더 예술에 가깝습니다, 그리고 모든 것"
"이 작동시키기 위해 도움을 청하고 몇 가지 실험을 하게 될지도 모릅니다."

#: ../../docs/getting_started/step_by_step/exporting.rst:324
msgid ""
"Before you can export your project for Android, you must download the "
"following software:"
msgstr "Android에 내보내기 전에, 다음의 소프트웨어를 다운받으셔야 합니다:"

#: ../../docs/getting_started/step_by_step/exporting.rst:327
msgid "Android SDK: https://developer.android.com/studio/"
msgstr "Android SDK: https://developer.android.com/studio/"

#: ../../docs/getting_started/step_by_step/exporting.rst:328
msgid ""
"Java JDK: http://www.oracle.com/technetwork/java/javase/downloads/index.html"
msgstr ""
"자바 JDK: http://www.oracle.com/technetwork/java/javase/downloads/index.html"

#: ../../docs/getting_started/step_by_step/exporting.rst:330
msgid ""
"When you run Android Studio for the first time, click on *Configure -> SDK "
"Manager* and install \"Android SDK Platform Tools\". This installs the `adb` "
"command-line tool that Godot uses to communicate with your device."
msgstr ""
"Android 스튜디오를 처음 실행하신다면, *Configure -> SDK Manager* 를 클릭하고 "
"\"Android SDK Platform Tools\" 을 실행하세요. 이것은 Godot가 장치와 통신하도"
"록 만드는 `adb` 명령줄 도구를 실행시킵니다."

#: ../../docs/getting_started/step_by_step/exporting.rst:334
msgid ""
"Next, create a debug keystore by running the following command on your "
"system's command line:"
msgstr ""
"다음으로, 시스템의 명령줄에 다음의 명령을 실행시켜 debug keystore를 만드세요:"

#: ../../docs/getting_started/step_by_step/exporting.rst:341
msgid ""
"Click on *Editor -> Editor Settings* in Godot and select the *Export/"
"Android* section. Here, you need to set the paths to the Android SDK "
"applications on your system and the location of the keystore you just "
"created."
msgstr ""
"Godot에서 *편집기 -> 편집기 설정* 으로 가서 *Export/Android* 섹션을 선택합니"
"다. 여기에서, 당신은 Android SDK 응용 프로그램의 위치와 당신이 방금 만든 키 "
"저장소의 위치를 설정해줘야 합니다."

#: ../../docs/getting_started/step_by_step/exporting.rst:347
msgid ""
"Now you're ready to export. Click on *Project -> Export* and add a preset "
"for Android (see above). Select the Android Presets and under *Options* go "
"to *Screen* and set *Orientation* to \"Portrait\"."
msgstr ""
"이제 내보낼 준비가 끝났습니다. *프로젝트(Project) -> 내보내기(Export)*\\ 를 "
"클릭하고, Android 용 프리셋을 추가하세요 (위의 추가하기). Android 프리셋을 선"
"택하고 *옵션* 아래의 *Screen*\\ 으로 가서 *Orientation*\\ 을 \"Portrait\"로 "
"설정하세요."

#: ../../docs/getting_started/step_by_step/exporting.rst:351
msgid ""
"Click the \"Export Project\" button and Godot will build an APK you can "
"download on your device. To do this on the command line, use the following:"
msgstr ""
"\"프로젝트 내보내기(Export Project)\" 버튼을 클릭하면 기기에서 다운로드할 수 "
"있는 APK 파일을 만들어 냅니다. 이 작업을 명령줄에서 하려면 다음 코드를 입력하"
"세요:"

#: ../../docs/getting_started/step_by_step/exporting.rst:358
msgid ""
"Your device may need to be in *developer mode*. Consult your device's "
"documentation for details."
msgstr ""
"기기가 *개발자 모드*\\ 이어야 합니다. 자세한 내용은 기기의 설명서를 참고하세"
"요."

#: ../../docs/getting_started/step_by_step/exporting.rst:361
msgid ""
"If your system supports it, connecting a compatible Android device will "
"cause a \"One-click Deploy\" button to appear in Godot's playtest button "
"area:"
msgstr ""
"시스템이 지원한다면, 호환하는 Android 기기와 연결할 때 Godot의 실행 및 테스"
"트 버튼 영역에 \"원 클릭 배포\" 버튼이 나타납니다:"

#: ../../docs/getting_started/step_by_step/exporting.rst:366
msgid ""
"Clicking this button builds the APK and copies it onto your device in one "
"step."
msgstr "이 버튼만 클릭하면 APK가 만들어지고 그 사본이 기기에 설치됩니다."

#: ../../docs/getting_started/step_by_step/exporting.rst:371
msgid ""
"In order to build your game for iOS, you must have a computer running macOS "
"with Xcode installed."
msgstr ""
"iOS에 게임이 돌아가게 하고 싶다면, 당신은 macOS와 Xcode가 실행되는 컴퓨터를 "
"갖고 있어야 합니다."

#: ../../docs/getting_started/step_by_step/exporting.rst:374
msgid ""
"Before exporting, there are some settings that you *must* complete for the "
"project to export successfully. First, the \"App Store Team Id\", which you "
"can find by logging in to your Apple developer account and looking in the "
"\"Membership\" section."
msgstr ""
"내보내기 전에, 성공적으로 프로젝트를 내보내기 위해 당신이 *반드시* 해야할 몇 "
"가지 사항이 있습니다. 먼저, \"App Store Team Id\" 입니다, 이것은 당신이 애플 "
"개발자 계정에 로그인 한 후 \"멤버십\" 섹션에서 볼 수 있습니다."

#: ../../docs/getting_started/step_by_step/exporting.rst:378
msgid "You must also provide icons and splash screen images as shown below:"
msgstr ""
"그리고 반드시 아이콘과 스플래시 스크린 이미지를 다음과 같이 제공해야 합니다:"

#: ../../docs/getting_started/step_by_step/exporting.rst:382
msgid "Click \"Export Project\" and select a destination folder."
msgstr "\"프로젝트 내보내기\"를 누르고 대상 폴더를 선택하세요."

#: ../../docs/getting_started/step_by_step/exporting.rst:384
msgid ""
"Once you have successfully exported the project, you'll find the following "
"folders and files have been created in your selected location:"
msgstr ""
"프로젝트가 완전히 내보내졌다면, 당신이 지정한 폴더에 파일들이 만들어 진것을 "
"볼 수 있습니다:"

#: ../../docs/getting_started/step_by_step/exporting.rst:389
msgid ""
"You can now open the project in Xcode and build the project for iOS. Xcode "
"build procedure is beyond the scope of this tutorial. See https://help.apple."
"com/xcode/mac/current/#/devc8c2a6be1 for more information."
msgstr ""
"당신은 이제 프로젝트를 Xcode에서 열 수 있고 iOS로 프로젝트를 만들 수 있습니"
"다. Xcode 개발 순서는 이 튜토리얼에 해당하지 않습니다. 자세한 것은 https://"
"help.apple.com/xcode/mac/current/#/devc8c2a6be1 를 참고하세요."

#: ../../docs/getting_started/step_by_step/exporting.rst:395
msgid "HTML5 (web)"
msgstr "HTML5 (웹)"

#: ../../docs/getting_started/step_by_step/exporting.rst:397
msgid ""
"Click \"Export Project\" on the HTML5 preset. We don't need to change any of "
"the default settings."
msgstr ""
"HTML5 프리셋으로 \"프로젝트 내보내기\"를 클릭하세요. 기본 설정에서 바꿀 필요"
"가 없습니다."

#: ../../docs/getting_started/step_by_step/exporting.rst:400
msgid ""
"When the export is complete, you'll have a folder containing the following "
"files:"
msgstr "내보내기가 끝나면, 다음의 파일이 들어있는 폴더를 찾으실 수 있습니다:"

#: ../../docs/getting_started/step_by_step/exporting.rst:405
msgid ""
"Viewing the `.html` file in your browser lets you play the game. However, "
"you can't open the file directly, it needs to be served by a web server. If "
"you don't have one set up on your computer, you can search online to find "
"suggestions for your specific OS."
msgstr ""
"브라우저에 `.html` 파일을 열면 게임을 할 수 있습니다. 하지만 바로 파일을 열 "
"수는 없습니다. 파일을 열려면 웹 서버가 필요합니다. 컴퓨터에 웹 서버를 설치하"
"지 않았다면, 인터넷에 검색하여 특정 OS에 대한 웹 서버 설치를 찾아볼 수 있습니"
"다."

#: ../../docs/getting_started/step_by_step/exporting.rst:410
msgid ""
"Point your browser at the URL where you've placed the html file. You may "
"have to wait a few moments while the game loads before you see the start "
"screen."
msgstr ""
"URL에 html 파일을 올릴 브라우저를 향하게 하세요. 게임 시작 화면을 보기 전에 "
"잠시 기다려야 할지도 모릅니다."

#: ../../docs/getting_started/step_by_step/exporting.rst:415
msgid ""
"The console window beneath the game tells you if anything goes wrong. You "
"can disable it by setting \"Export With Debug\" off when you export the "
"project."
msgstr ""
"게임 아래 콘솔 창은 게임이 잘못됬는가를 말해줍니다. 프로젝트를 내보낼 때 "
"\"Export With Debug\"를 꺼서 이것을 없앨 수 있습니다."

#: ../../docs/getting_started/step_by_step/exporting.rst:420
msgid ""
"While WASM is supported in all major browsers, it is still an emerging "
"technology and you may find some things that don't work. Make sure you have "
"updated your browser to the most recent version, and report any bugs you "
"find at the `Godot Github repository <https://github.com/godotengine/godot/"
"issues>`_."
msgstr ""
"WASM은 모든 주요 브라우저는 지원하지만, 아직 떠오르는 기술로써 작동하지 않는 "
"점들을 찾을 수 있습니다. 브라우저를 최신 버전으로 업데이트하세요. 그리고 "
"`Godot Github 저장소 <https://github.com/godotengine/godot/issues>`_\\ 로 발"
"견한 버그를 신고해주세요."

#: ../../docs/getting_started/step_by_step/godot_design_philosophy.rst:4
msgid "Godot’s design philosophy"
msgstr "Godot의 디자인 철학"

#: ../../docs/getting_started/step_by_step/godot_design_philosophy.rst:6
msgid "Now that you've gotten your hands wet, let's talk about Godot's design."
msgstr ""
"이제 당신은 손에 땀이 날 지경이니, Godot의 디자인 철학에 대해 얘기해 보겠습니"
"다."

#: ../../docs/getting_started/step_by_step/godot_design_philosophy.rst:8
msgid ""
"**Every game engine is different and fits different needs.** Not only do "
"they offer a range of features, but the design of each engine is unique. "
"This leads to different workflows and different ways to form your games’ "
"structures. This all stems from their respective design philosophies."
msgstr ""
"**모든 게임 엔진은 서로 다르고 그렇기에 다른 필요를 충족시킵니다.** 그들이 제"
"공하는 기능의 범위 뿐만 아니라, 각 엔진의 디자인도 독특합니다. 이것은 게임의 "
"구조를 형성하는 다양한 방법과 다양한 워크플로를 유도합니다. 이 모든 것이 각각"
"의 디자인 철학에서 생겨난 것입니다."

#: ../../docs/getting_started/step_by_step/godot_design_philosophy.rst:13
msgid ""
"This page is here to help you understand how Godot works, starting with some "
"of its core pillars. It is not a list of available features, nor is it an "
"engine comparison. To know if any engine can be a good fit for your project, "
"you need to try it out for yourself and understand its design and "
"limitations."
msgstr ""
"이 페이지가 Godot의 작동방식을 이해하도록 돕기 위해, 여러 핵심 기둥들로 시작"
"합니다. 이것은 사용가능한 기능의 목록이 아닐 뿐더러, 엔진을 비교하는 것도 아"
"닙니다. 어떤 엔진이라도 당신의 프로젝트에 잘 맞들어지는지 알기 위해선, 당신"
"이 스스로 시도하고 그것의 디자인과 한계를 이해해야합니다."

#: ../../docs/getting_started/step_by_step/godot_design_philosophy.rst:19
msgid ""
"Please watch `Discover Godot 3, the Free game engine <https://youtu."
"be/4v3qge-3CqQ>`_ if you're looking for an overview of the engine's features."
msgstr ""
"엔진의 기능에 관한 개요를 보고 싶다면 `Discover Godot 3, the Free game "
"engine <https://youtu.be/4v3qge-3CqQ>`_ 를 봐주세요."

#: ../../docs/getting_started/step_by_step/godot_design_philosophy.rst:23
msgid "Object-oriented design and composition"
msgstr "객체 지향 디자인과 구성"

#: ../../docs/getting_started/step_by_step/godot_design_philosophy.rst:25
msgid ""
"Godot embraces object-oriented design at its core with its flexible scene "
"system and Node hierarchy. It tries to stay away from strict programming "
"patterns to offer an intuitive way to structure your game."
msgstr ""
"Godot는 유연한 씬 시스템과 노드 계층 구조를 갖춘 객체 지향 디자인을 핵심으로 "
"갖고 있습니다. 이것으로 엄격한 프로그래밍 패턴을 피하고 직관적인 방법으로 게"
"임을 구성하도록 만들었습니다."

#: ../../docs/getting_started/step_by_step/godot_design_philosophy.rst:29
msgid ""
"For one, Godot lets you **compose or aggregate** scenes. It's like nested "
"prefabs: you can create a BlinkingLight scene and a BrokenLantern scene that "
"uses the BlinkingLight. Then, create a city filled with BrokenLanterns. "
"Change the BlinkingLight's color, save, and all the BrokenLanterns in the "
"city will update instantly."
msgstr ""
"이를 위해 Godot는 당신이 씬을 **조립하거나 집합하도록** 만들었습니다. 이건 마"
"치 중첩 물체같습니다: 당신이 깜박이는 빛 씬을 만들고 이 씬이 사용된 고장난 전"
"봇대 씬을 만들었습니다. 그리고, 고장난 전봇대가 들어간 도시를 만듭니다. 깜박"
"이는 빛의 색을 바꾸고, 저장해서, 도시의 모든 고장난 전봇대가 즉각적으로 업데"
"이트될 것입니다."

#: ../../docs/getting_started/step_by_step/godot_design_philosophy.rst:36
msgid "On top of that, you can **inherit** from any scene."
msgstr "무엇보다도, 당신이 어떤 씬에서든지 **상속하는 것** 이 가능합니다."

#: ../../docs/getting_started/step_by_step/godot_design_philosophy.rst:38
msgid ""
"A Godot scene could be a Weapon, a Character, an Item, a Door, a Level, part "
"of a level… anything you’d like. It works like a class in pure code, except "
"you’re free to design it by using the editor, using only the code, or mixing "
"and matching the two."
msgstr ""
"Godot 씬은 무기나 캐릭터, 아이템, 문, 하나의 레벨, 레벨의 일부... 원하는 어"
"떤 것이든 될수 있습니다. 편집기를 사용하거나, 오직 코드만을 사용하거나 이 둘"
"을 섞어서 일치시켜서 자유롭게 디자인한다는 경우를 제외하면 마치 순수코드에서"
"의 클래스처럼 작동합니다."

#: ../../docs/getting_started/step_by_step/godot_design_philosophy.rst:43
msgid ""
"It’s different from prefabs you find in several 3D engines, as you can then "
"inherit from and extend those scenes. You may create a Magician that extends "
"your Character. Modify the Character in the editor and the Magician will "
"update as well. It helps you build your projects so that their structure "
"matches the game’s design."
msgstr ""
"이것은 씬을 상속하고 확장한다는 점에서 여러 3D 엔진에서 볼수 있는 프리펩과는 "
"다릅니다. 당신은 캐릭터를 확장시켜 마법사를 만들수도 있습니다. 편집기에 있는 "
"캐릭터를 수정하면 마법사도 이를 업데이트합니다. 이것은 당신이 프로젝트를 만들"
"면서 프로젝트 구조가 게임 디자인에 일치하도록 도와줍니다."

#: ../../docs/getting_started/step_by_step/godot_design_philosophy.rst:49
#: ../../docs/tutorials/assetlib/using_assetlib.rst:16
#: ../../docs/tutorials/assetlib/uploading_to_assetlib.rst:83
msgid "|image0|"
msgstr "|image0|"

#: ../../docs/getting_started/step_by_step/godot_design_philosophy.rst:51
msgid ""
"Also note that Godot offers many different types of objects called nodes, "
"each with a specific purpose. Nodes are part of a tree and always inherit "
"from their parents up to the Node class. Although the engine does feature "
"components like collision shapes, they’re the exception, not the norm."
msgstr ""
"또한 Godot는 노드라고 불리는 다양한 유형의 객체를 제공합니다, 이들 각각 특정"
"한 목적을 지니고 있습니다. 노드는  트리의 일부분으로 항상 그들의 부모 노드에"
"서 노드 클래스까지 상속합니다. 비록 엔진이 충돌 모양같은 구성 요소를 포함하지"
"만, 이들은 예외이고, 표준이 아닙니다."

#: ../../docs/getting_started/step_by_step/godot_design_philosophy.rst:57
#: ../../docs/tutorials/assetlib/using_assetlib.rst:48
msgid "|image1|"
msgstr "|image1|"

#: ../../docs/getting_started/step_by_step/godot_design_philosophy.rst:59
msgid ""
"Sprite is a Node2D, a CanvasItem and a Node. It has all the properties and "
"features of its three parent classes, like transforms or the ability to draw "
"custom shapes and render with a custom shader."
msgstr ""
"Node2D의 Sprite, CanvasItem과 Node. 이 세 개의 부모 클래스는 모든 속성과 기능"
"을 가지고 있습니다, 예를들면 변환이나 사용자 지정 모양을 그리고 쉐이더로 렌더"
"하는 것이 있습니다."

#: ../../docs/getting_started/step_by_step/godot_design_philosophy.rst:64
msgid "All-inclusive package"
msgstr "모든 것이 들어있는 패키지"

#: ../../docs/getting_started/step_by_step/godot_design_philosophy.rst:66
msgid ""
"Godot tries to provide its own tools to answer most common needs. It has a "
"dedicated scripting workspace, an animation editor, a tilemap editor, a "
"shader editor, a debugger, a profiler, the ability to hot-reload locally and "
"on remote devices, etc."
msgstr ""
"Godot는 가장 보편적인 요구들의 해답을 제공하고자 노력했습니다. Godot는 전용 "
"스크립팅 작업 공간과 애니메이션 편집기, 타일맵 편집기, 쉐이더 편집기, 디버"
"거, 프로파일러, 지역 및 원격 장치를 핫 리로드 하는 기능 등등을 가지고 있습니"
"다."

#: ../../docs/getting_started/step_by_step/godot_design_philosophy.rst:71
#: ../../docs/tutorials/assetlib/using_assetlib.rst:58
msgid "|image2|"
msgstr "|image2|"

#: ../../docs/getting_started/step_by_step/godot_design_philosophy.rst:73
msgid ""
"The goal is to offer a full package to create games and a continuous user "
"experience. You can still work with external programs as long as there is an "
"import plugin for it. Or you can create one, like the `Tiled Map Importer "
"<https://github.com/vnen/godot-tiled-importer>`__."
msgstr ""
"목표는 게임을 만드는 모든 패키지와 끊김없는 사용자 경험을 제공하는 것입니다. "
"물론 가져오기 플러그인이 있다면 여전히 외부 프로그램과 함께 작업할 수 있습니"
"다. 아니면  `Tiled Map Importer <https://github.com/vnen/godot-tiled-"
"importer>`__ 처럼 하나로 만들 수도 있습니다."

#: ../../docs/getting_started/step_by_step/godot_design_philosophy.rst:78
msgid ""
"That is also partly why Godot offers its own programming languages GDscript "
"and VisualScript, along with C#. They’re designed for the needs of game "
"developers and game designers, and they’re tightly integrated in the engine "
"and the editor."
msgstr ""
"이것이 Godot가 C#과 함께, 고유의 프로그래밍 언어인 GDScript와 VisualScript를 "
"제공하는 이유이기도 합니다. 그들은 게임 개발자와 게임 디자이너의 필요를 위해 "
"제작되었고, 엔진과 편집기에 완벽하게 통합됩니다."

#: ../../docs/getting_started/step_by_step/godot_design_philosophy.rst:83
msgid ""
"GDscript lets you write simple code using Python-like syntax, yet it detects "
"types and offers a static language's quality of auto-completion. It is also "
"optimized for gameplay code with built-in types like Vectors and Colors."
msgstr ""
"GDScript는 Python과 유사한 문법을 사용하여 쉬운 코드를 사용하지만, 타입을 인"
"지하고 정적 언어의 자동 완성 품질을 제공합니다. 또한 Vectors와 Colors 같은 내"
"장 함수를 가지고 있어 게임플레이 코드에 최적화되어 있습니다."

#: ../../docs/getting_started/step_by_step/godot_design_philosophy.rst:87
msgid ""
"Note that with GDNative, you can write high-performance code using compiled "
"languages like C, C++, Rust, or Python (using the Cython compiler) without "
"recompiling the engine."
msgstr ""
"GDNative를 사용하면, 엔진을 리컴파일하지 않고 C, C++, Rust, 아니면 (Cython 컴"
"파일러를 사용한) Python과 같이 컴파일된 언어를 사용해 고성능의 코드를 작성할 "
"수 있습니다."

#: ../../docs/getting_started/step_by_step/godot_design_philosophy.rst:91
#: ../../docs/tutorials/assetlib/using_assetlib.rst:83
msgid "|image3|"
msgstr "|image3|"

#: ../../docs/getting_started/step_by_step/godot_design_philosophy.rst:93
msgid ""
"*VisualScript is a node-based programming language that integrates well in "
"the editor. You can drag and drop nodes or resources into the graph to "
"create new code blocks.*"
msgstr ""
"*VisualScript는 노드 기반 프로그래밍 언어로 편집기에 잘 통합되어 있습니다. 노"
"드나 리소스를 그래프로 드래그 앤 드롭하여 새 노드 블럭을 생성할 수 있습니다.*"

#: ../../docs/getting_started/step_by_step/godot_design_philosophy.rst:97
msgid ""
"Note that the 3D workspace doesn’t feature as many tools as the 2D "
"workspace. You’ll need external programs or add-ons to edit terrains, "
"animate complex characters, and so on. Godot provides a complete API to "
"extend the editor’s functionality using game code. See `The Godot editor is "
"a Godot game`_ below."
msgstr ""
"3D 작업 공간은 2D 작업 공간같은 도구들이 많지 않습니다. 당신은 외부 프로그램"
"이나 애드온으로 지형을 편집하거나, 복잡한 캐릭터를 애니메이트하거나 해야합니"
"다. Godot는 게임 코드를 사용하여 편집기의 기능성을 넓히는 완전한 API를 제공합"
"니다. 하단의 `The Godot editor is a Godot game`_ 을 참고하세요."

#: ../../docs/getting_started/step_by_step/godot_design_philosophy.rst:102
#: ../../docs/tutorials/assetlib/using_assetlib.rst:88
msgid "|image4|"
msgstr "|image4|"

#: ../../docs/getting_started/step_by_step/godot_design_philosophy.rst:104
msgid ""
"*A State Machine editor plugin in Godot 2 by kubecz3k. It lets you manage "
"states and transitions visually.*"
msgstr ""
"*Godot 엔진 2에서 kubecz3k님이 만드신 State Machine editor 플러그인입니다. 이"
"걸로 당신은 시각적으로 상태와 변화를 다룰 수 있습니다.*"

#: ../../docs/getting_started/step_by_step/godot_design_philosophy.rst:108
msgid "Open source"
msgstr "오픈 소스"

#: ../../docs/getting_started/step_by_step/godot_design_philosophy.rst:110
msgid ""
"Godot offers a fully open source codebase under the **MIT license**. This "
"means all the technologies that ship with it have to be Free (as in freedom) "
"as well. For the most part, they’re developed from the ground up by "
"contributors."
msgstr ""
"Godot는 **MIT 라이선스** 하에 완전한 오픈 소스 코드베이스를 제공합니다. 이는 "
"여기서 제공하는 모든 기술들은 (자유로서의) 무료임을 의미합니다. 대부분의 기술"
"들은, 참여자들에 의해 기초부터 개발되었습니다."

#: ../../docs/getting_started/step_by_step/godot_design_philosophy.rst:115
msgid ""
"Anyone can plug in proprietary tools for the needs of their projects — they "
"just won’t ship with the engine. This may include Google AdMob, or FMOD. Any "
"of these can come as third-party plugins instead."
msgstr ""
"누구나 프로젝트에 필요한 독점 도구를 연결할 수 있습니다 — 단지 그것이 엔진과 "
"함께 제공되지 않습니다. Google AdMob, 혹은 FMOD도 이에 해당될 것입니다. 이들"
"은 대신 제 3자 플러그인으로 넣을 수 있습니다."

#: ../../docs/getting_started/step_by_step/godot_design_philosophy.rst:120
msgid ""
"On the other hand, an open codebase means you can **learn from and extend "
"the engine** to your heart’s content. You can also debug games easily, as "
"Godot will print errors with a stack trace, even if they come from the "
"engine itself."
msgstr ""
"한편, 오픈 코드베이스는 당신이 **엔진에서 배우고 확장하여** 당신의 마음대로 "
"콘텐츠를 만들 수 있다는 것을 의미합니다. 또한 Godot는 에러가 엔진 자체에서 발"
"생하는 것일지라도, 스택 추적을 포함한 에러를 출력하므로, 게임을 쉽게 디버깅 "
"할 수 있습니다."

#: ../../docs/getting_started/step_by_step/godot_design_philosophy.rst:126
msgid ""
"This **does not affect the work you do with Godot** in any way: there’s no "
"strings attached to the engine or anything you make with it."
msgstr ""
"이것은 어떤 방식으로라도 **Godot를 사용하는 작업에 영향을 주지 않습니다** : "
"엔진에는 어떤 문자열도 붙어있지 않고 문자열로 만들 것도 없습니다."

#: ../../docs/getting_started/step_by_step/godot_design_philosophy.rst:130
msgid "Community-driven"
msgstr "커뮤니티 중심"

#: ../../docs/getting_started/step_by_step/godot_design_philosophy.rst:132
msgid ""
"**Godot is made by its community, for the community, and for all game "
"creators out there.** It’s the needs of the users and open discussions that "
"drive the core updates. New features from the core developers often focus on "
"what will benefit the most users first."
msgstr ""
"**Godot는 커뮤니티에 의해, 커뮤니티를 위해, 그리고 모든 게임 개발자들을 위해 "
"만들어졌습니다.** 이것은 핵심 업데이트를 이끌어 내는 열린 토론과 사용자들의 "
"요구가 반영된 것입니다. 새로은 기능은 핵심 개발자로부터 나오며 대부분의 사용"
"자들에게 도움을 주는 것을 최우선으로 봅니다."

#: ../../docs/getting_started/step_by_step/godot_design_philosophy.rst:137
msgid ""
"That said, although a handful of core developers work on it full-time, the "
"project has over 600 contributors at the time of writing. Benevolent "
"programmers work on features they may need themselves, so you’ll see "
"improvements in all corners of the engine at the same time in every major "
"release."
msgstr ""
"이는 즉, 비록 소수의 핵심 개발자들이 하루 종일 일할지라도, 프로젝트는 그 시간"
"에 600명이 넘는 참여자가 활동합니다. 자애로운 프로그래머들이 스스로에게 필요"
"한 기능들을 작업하기 때문에, 모든 주요 릴리즈 마다 엔진의 모든 방면에서 개선"
"되는 것을 볼 수 있을 겁니다."

#: ../../docs/getting_started/step_by_step/godot_design_philosophy.rst:144
msgid "The Godot editor is a Godot game"
msgstr "Godot 편집기는 Godot 게임입니다"

#: ../../docs/getting_started/step_by_step/godot_design_philosophy.rst:146
msgid ""
"The Godot editor runs on the game engine. It uses the engine’s own UI "
"system, it can hot-reload code and scenes when you test your projects, or "
"run game code in the editor. This means you can **use the same code** and "
"scenes for your games, or **build plugins and extend the editor.**"
msgstr ""
"Godot 편집기는 게임 엔진으로 돌아갑니다. 이것은 엔진 스스로의 UI 시스템을 사"
"용하고, 프로젝트를 테스트하거나 편집기에서 게임 코드를 실행할 때 코드와 씬을 "
"핫 리로드 할 수 있습니다. 이는 당신이 게임에 쓰는 코드와 **같은 코드와 씬을 "
"사용해서** , **플러그인을 만들거나 편집기를 확장** 시킬 수 있다는 것을 의미합"
"니다."

#: ../../docs/getting_started/step_by_step/godot_design_philosophy.rst:151
msgid ""
"This leads to a reliable and flexible UI system, as it powers the editor "
"itself. With the ``tool`` keyword, you can run any game code in the editor."
msgstr ""
"이것은 편집기 자체에 권한을 부여하기 때문에 안정적이고 유연한 UI 시스템을 만"
"듭니다. ``tool`` 키워드로 당신은 편집기에서 어떤 게임 코드도 실행시킬 수 있습"
"니다."

#: ../../docs/getting_started/step_by_step/godot_design_philosophy.rst:154
#: ../../docs/tutorials/assetlib/using_assetlib.rst:92
msgid "|image5|"
msgstr "|image5|"

#: ../../docs/getting_started/step_by_step/godot_design_philosophy.rst:156
msgid ""
"*RPG in a Box is a voxel RPG editor made with Godot 2. It uses Godot’s UI "
"tools for its node-based programming system and for the rest of the "
"interface.*"
msgstr ""
"*RPG in a Box는 복셀 RPG 편집기로 Godot 2 에서 만들어졌습니다. 노드 기반 프로"
"그래밍 시스템과 인터페이스의 일부를 위해 Godot UI 툴을 사용했습니다.*"

#: ../../docs/getting_started/step_by_step/godot_design_philosophy.rst:160
msgid ""
"Put the ``tool`` keyword at the top of any GDScript file and it will run in "
"the editor. This lets you import and export plugins, create plugins like "
"custom level editors, or create scripts with the same nodes and API you use "
"in your projects."
msgstr ""
"``tool`` 키워드를 GDscript 파일의 맨 위에 놓으면 편집기에서 파일이 실행될 것"
"입니다. 이걸로 당신은 프로젝트에 쓰이는 것과 똑같은 노드와 API를 가지고 플러"
"그인을 내보내거나 가져올 수 있고, 사용자 지정 레벨 편집기 같은 플러그인을 제"
"작하거나, 스크립트를 만들 수 있습니다."

#: ../../docs/getting_started/step_by_step/godot_design_philosophy.rst:166
msgid "Separate 2D and 3D engines"
msgstr "2D 와 3D 엔진을 분리함"

#: ../../docs/getting_started/step_by_step/godot_design_philosophy.rst:168
msgid ""
"Godot offers dedicated 2D and 3D rendering engines. As a result, **the base "
"unit for 2D scenes is pixels.** Even though the engines are separate, you "
"can render 2D in 3D, 3D in 2D, and overlay 2D sprites and interfaces over "
"your 3D world."
msgstr ""
"Godot는 전용 2D 와 3D 렌더링 엔진을 제공합니다. 그 결과 **2D 씬의 기본 단위"
"는 픽셀입니다.** 비록 엔진이 분리되더라도, 당신은 3D에서 2D를, 2D에서 3D를 렌"
"더할 수 있고, 3D 월드에 2D 스프라이트와 인터페이스를 씌울 수 있습니다."

#: ../../docs/getting_started/step_by_step/ui_introduction_to_the_ui_system.rst:4
msgid "Design interfaces with the Control nodes"
msgstr "컨트롤(Control) 노드로 인터페이스를 설계하기"

#: ../../docs/getting_started/step_by_step/ui_introduction_to_the_ui_system.rst:6
msgid ""
"Computer displays, mobile phones, and TV screens come in all shapes and "
"sizes. To ship a game, you'll need to support different screen ratios and "
"resolutions. It can be hard to build responsive interfaces that adapt to all "
"platforms. Thankfully, Godot comes with robust tools to design and manage a "
"responsive User Interface."
msgstr ""
"컴퓨터 디스플레이, 모바일 폰, 그리고 TV 화면은 각자의 크기와 모양이 있습니"
"다. 게임을 출시하려면, 게임이 다양한 화면 비율과 해상도를 지원해야 할 것입니"
"다. 모든 플랫폼에 적용되는 반응형 인터페이스를 만드는 것은 어려울 수 있습니"
"다. 감사하게도, Godot에는 반응형 사용자 인터페이스(UI)를 설계하고 관리할 수 "
"있도록 든든한 도구가 있습니다."

#: ../../docs/getting_started/step_by_step/ui_introduction_to_the_ui_system.rst:14
msgid "Godot's editor is made with the engine's UI framework"
msgstr "Godot 편집기는 엔진의 UI 프레임 워크로 제작되었습니다"

#: ../../docs/getting_started/step_by_step/ui_introduction_to_the_ui_system.rst:16
msgid "This guide will get you started with UI design. You will learn:"
msgstr ""
"이 강좌는 UI 디자인으로 시작할 것입니다. 당신은 이러한 것들을 배울 겁니다:"

#: ../../docs/getting_started/step_by_step/ui_introduction_to_the_ui_system.rst:18
msgid "The five most useful control nodes to build your games' interface"
msgstr "게임 인터페이스를 제작하는 유용한 다섯 가지 Control 노드들"

#: ../../docs/getting_started/step_by_step/ui_introduction_to_the_ui_system.rst:19
msgid "How to work with the anchor of UI elements"
msgstr "UI 요소들의 앵커 작업 방법"

#: ../../docs/getting_started/step_by_step/ui_introduction_to_the_ui_system.rst:20
msgid ""
"How to efficiently place and arrange your user interface using containers"
msgstr ""
"컨테이너를 사용해서 사용자 인터페이스를 효율적으로 배치하고 배열하는 방법"

#: ../../docs/getting_started/step_by_step/ui_introduction_to_the_ui_system.rst:22
msgid ""
"The five most common containers (you can learn more about containers in the :"
"ref:`GUI Containers <doc_gui_containers>` documentation page)."
msgstr ""
"다섯 가지 가장 일반적인 컨테이너(Container) (컨테이너에 대해서는 나중에 :ref:"
"`GUI 컨테이너(Container) <doc_gui_containers>` 문서 페이지에서 더 자세하게 배"
"울 수 있습니다)."

#: ../../docs/getting_started/step_by_step/ui_introduction_to_the_ui_system.rst:25
msgid ""
"To learn how to control the interface and connect it to other scripts, read :"
"ref:`Build your first game UI in Godot <doc_ui_game_user_interface>`."
msgstr ""
"인터페이스를 컨트롤하고 다른 스크립트에 연결하는 방법을 배우려면, `Build "
"your first game UI in Godot <doc_ui_game_user_interface>` 를 읽어주세요."

#: ../../docs/getting_started/step_by_step/ui_introduction_to_the_ui_system.rst:28
msgid ""
"To design your UI, you'll use the Control nodes. These are the nodes with "
"green icons in the editor. There are dozens of them, for creating anything "
"from life bars to complex applications. Godot's editor itself is built using "
"Control nodes."
msgstr ""
"UI를 설계하기 위해, Control 노드를 사용하게됩니다. 이 노드들은 편집기에서 초"
"록색 아이콘을 갖습니다. 이들을 수 십개가 존재하며, 이걸로 라이프바에서 복잡"
"한 애플리케이션까지 만들 수 있습니다. Godot의 편집기 자체는 Control 노드를 사"
"용하여 만들어졌습니다."

#: ../../docs/getting_started/step_by_step/ui_introduction_to_the_ui_system.rst:32
msgid ""
"Control nodes have unique properties that allow them to work well with one "
"another. Other visual nodes, like Node2D and Sprite don't have these "
"capabilities. So to make your life easier use Control nodes wherever "
"possible when building your UIs."
msgstr ""
"Control 노드는 다른 노드를과 함께 잘 작동하는 독특한 속성들을 갖습니다. "
"Node2D, Sprite와 같은 다른 시각적 노드들은 이런 능력이 없습니다. 따라서 UI를 "
"더 쉽게 작업하고 싶다면, 가능하면 Control 노드를 사용하세요."

#: ../../docs/getting_started/step_by_step/ui_introduction_to_the_ui_system.rst:36
msgid "All control nodes share the same main properties:"
msgstr "모든 컨트롤 노드는 동일한 메인 속성을 공유합니다:"

#: ../../docs/getting_started/step_by_step/ui_introduction_to_the_ui_system.rst:38
msgid "Anchor"
msgstr "앵커(Anchor)"

#: ../../docs/getting_started/step_by_step/ui_introduction_to_the_ui_system.rst:39
msgid "Bounding rectangle"
msgstr "경계 사각형(Bounding rectangle)"

#: ../../docs/getting_started/step_by_step/ui_introduction_to_the_ui_system.rst:40
msgid "Focus and focus neighbor"
msgstr "포커스(Focus)와 포커스 이웃(Focus neighbor)"

#: ../../docs/getting_started/step_by_step/ui_introduction_to_the_ui_system.rst:41
#: ../../docs/tutorials/gui/gui_containers.rst:38
msgid "Size flags"
msgstr "사이즈 플래그(Size flags)"

#: ../../docs/getting_started/step_by_step/ui_introduction_to_the_ui_system.rst:42
msgid "Margin"
msgstr "마진(Margin)"

#: ../../docs/getting_started/step_by_step/ui_introduction_to_the_ui_system.rst:43
msgid "The optional UI theme"
msgstr "선택적인 UI 테마"

#: ../../docs/getting_started/step_by_step/ui_introduction_to_the_ui_system.rst:45
msgid ""
"Once you understand the basics of the Control node, it will take you less "
"time to learn all the nodes that derive from it."
msgstr ""
"일단 당신이 컨트롤 노드의 기초를 이해했다면, 노드에서 파생되는 모든 다른 노드"
"들을 이해하는 데 오래 걸리지 않을 겁니다."

#: ../../docs/getting_started/step_by_step/ui_introduction_to_the_ui_system.rst:50
msgid "The 5 most common UI elements"
msgstr "가장 일반적인 5개의 UI 요소들"

#: ../../docs/getting_started/step_by_step/ui_introduction_to_the_ui_system.rst:52
msgid ""
"Godot ships with dozens of Control nodes. A lot of them are here to help you "
"build editor plugins and applications."
msgstr ""
"Godot는 수십 개의 컨트롤 노드를 갖고 있습니다. 이들이 당신이 편집기 플러그인"
"과 애플리케이션을 만드는 것을 도와줍니다."

#: ../../docs/getting_started/step_by_step/ui_introduction_to_the_ui_system.rst:55
msgid ""
"For most games, you'll only need five types of UI elements, and a few "
"Containers. These five Control nodes are:"
msgstr ""
"대부분의 게임에, 당신은 오로지 다섯 가지 UI 요소와, 몇 개의 컨테이너들만 필요"
"합니다. 컨트롤 노드들은 이렇습니다:"

#: ../../docs/getting_started/step_by_step/ui_introduction_to_the_ui_system.rst:58
msgid "Label: for displaying text"
msgstr "Label: 문자를 보여주기 위해 사용합니다"

#: ../../docs/getting_started/step_by_step/ui_introduction_to_the_ui_system.rst:59
msgid ""
"TextureRect: used mostly for backgrounds, or everything that should be a "
"static image"
msgstr ""
"TextureRect: 보통은 배경으로 사용되고, 그 외 모든 정적 이미지에 사용합니다"

#: ../../docs/getting_started/step_by_step/ui_introduction_to_the_ui_system.rst:61
msgid ""
"TextureProgress: for lifebars, loading bars, horizontal, vertical or radial"
msgstr ""
"TextureProgress: 체력 막대, 로딩 막대, 가로 형태, 세로 형태, 혹은 방사 형태"
"에 사용합니다"

#: ../../docs/getting_started/step_by_step/ui_introduction_to_the_ui_system.rst:63
msgid "NinePatchRect: for scalable panels"
msgstr "NinePatchRect: 확장 가능한 패널에 사용합니다"

#: ../../docs/getting_started/step_by_step/ui_introduction_to_the_ui_system.rst:64
msgid "TextureButton: to create buttons"
msgstr "TextureButton: 버튼을 만들기 위해 사용합니다"

#: ../../docs/getting_started/step_by_step/ui_introduction_to_the_ui_system.rst:68
msgid "The 5 most common Control nodes for UI design"
msgstr "UI 디자인을 위한 5개의 가장 일반적인 컨트롤 노드들"

#: ../../docs/getting_started/step_by_step/ui_introduction_to_the_ui_system.rst:71
msgid "TextureRect"
msgstr "TextureRect"

#: ../../docs/getting_started/step_by_step/ui_introduction_to_the_ui_system.rst:73
msgid ""
"**TextureRect** displays a texture or image inside a UI. It seems similar to "
"the Sprite node, but it offers multiple scaling modes. Set the Stretch Mode "
"property to change its behavior:"
msgstr ""
"**TextureRect** 은 UI 내에 텍스처나 이미지를 보여줍니다. 이것은 Sprite 노드"
"와 비슷하지만 다중 크기 조절 모드를 제공합니다. Sprite 노드의 동작을 변경하려"
"면 Stretch Mode 속성을 설정하세요:"

#: ../../docs/getting_started/step_by_step/ui_introduction_to_the_ui_system.rst:77
msgid ""
"``Scale On Expand (compat)`` scales the texture to fit the node's bounding "
"rectangle, only if ``expand`` property is ``true``; otherwise, it behaves "
"like ``Keep`` mode. Default mode for backwards compatibility."
msgstr ""
"``Scale On Expand (compat)``\\ 는 ``expand`` 속성이 ``true``\\ 로 되어 있을 "
"때만 텍스처를 노드의 경계 사각형에 꽉 차도록 크기를 조절합니다; 그렇지 않으"
"면 이것은 ``Keep`` 모드와 같습니다. 호환성을 되돌리기 위한 기본 모드."

#: ../../docs/getting_started/step_by_step/ui_introduction_to_the_ui_system.rst:80
msgid "``Scale`` scales the texture to fit the node's bounding rectangle."
msgstr ""
"``Scale``\\ 은 텍스처를 노드의 경계 사각형에 꽉 차도록 크기를 조절합니다."

#: ../../docs/getting_started/step_by_step/ui_introduction_to_the_ui_system.rst:81
msgid "``Tile`` makes the texture repeat, but it won't scale."
msgstr "``Tile``\\ 은 텍스처를 바둑판으로 배열하고, 크기를 조절하지 않습니다."

#: ../../docs/getting_started/step_by_step/ui_introduction_to_the_ui_system.rst:82
msgid ""
"``Keep`` and ``Keep Centered`` force the texture to remain at its original "
"size, in the top left corner or the center of the frame respectively."
msgstr ""
"``Keep``\\ 과 ``Keep Centered``\\ 는 텍스처가 그 크기를 유지하게 합니다, 각"
"각 텍스처를 경계의 좌측 상단과 중심에 두도록 만듭니다."

#: ../../docs/getting_started/step_by_step/ui_introduction_to_the_ui_system.rst:85
msgid ""
"``Keep Aspect`` and ``Keep Aspect Centered`` scales the texture but force it "
"to remain its original aspect ratio, in the top left corner or the center of "
"the frame respectively."
msgstr ""
"``Keep Aspect``\\ 와 ``Keep Aspect Centered``\\ 는 텍스처의 크기를 조절하지"
"만 그것의 크기 비율은 유지합니다, 각각 텍스처를 경계의 좌측 상단과 중심에 두"
"도록 만듭니다."

#: ../../docs/getting_started/step_by_step/ui_introduction_to_the_ui_system.rst:87
msgid ""
"``Keep Aspect Covered`` works just like ``Keep Aspect Centered`` but the "
"shorter side fits the bounding rectangle and the other one clips to the "
"node's limits."
msgstr ""
"``Keep Aspect Covered``\\ 는 ``Keep Aspect Centered``\\ 와 비슷하지만 경계 사"
"각형의 짧은 변 쪽은 꽉 차는 반면, 긴 변 쪽은 노드의 경계까지만 보여주고 짤립"
"니다."

#: ../../docs/getting_started/step_by_step/ui_introduction_to_the_ui_system.rst:90
msgid ""
"As with Sprite nodes, you can modulate the TextureRect's color. Click the "
"``Modulate`` property and use the color picker."
msgstr ""
"Sprite 노드와 마찬가지로, 당신은 TextureRect의 색상을 바꿀 수 있습니다. "
"``Modulate`` 속성을 눌러 색상 선택기를 사용하세요."

#: ../../docs/getting_started/step_by_step/ui_introduction_to_the_ui_system.rst:95
msgid "TextureRect modulated with a red color"
msgstr "빨강 색으로 바뀐 TextureRect"

#: ../../docs/getting_started/step_by_step/ui_introduction_to_the_ui_system.rst:98
msgid "TextureButton"
msgstr "TextureButton"

#: ../../docs/getting_started/step_by_step/ui_introduction_to_the_ui_system.rst:100
#, fuzzy
msgid ""
"**TextureButton** is like TextureRect, except it has 5 texture slots: one "
"for each of the button's states. Most of the time, you'll use the Normal, "
"Pressed, and Hover textures. Focused is useful if your interface listens to "
"the keyboard's input. The sixth image slot, the Click Mask, lets you define "
"the clickable area using a 1-bit, pure black and white image."
msgstr ""
"**TextureButton** 은 TextureRect와 비슷하지만, 5개의 텍스처 슬롯을 갖고 있습"
"니다: 이들은 각 버튼의 상태입니다. 대부분은, Normal, Pressed, 그리고 Hover 텍"
"스처를 사용할 겁니다. Focused는 인터페이스가 키보드의 입력을 수신하는 경우에 "
"유용합니다. 여섯 번째 이미지 슬롯인, Click Mask는, 순수한 흰색과 검은색 2-비"
"트를 사용해 클릭할 수 있는 영역을 정의하게 만듭니다."

#: ../../docs/getting_started/step_by_step/ui_introduction_to_the_ui_system.rst:107
msgid ""
"In the Base Button section, you'll find a few checkboxes that change how the "
"button behaves. When ``Toggle Mode`` is on, the button will toggle between "
"active and normal states when you press it. ``Disabled`` makes it disabled "
"by default, in which case it will use the ``Disabled`` texture. "
"TextureButton shares a few properties with the texture frame: it has a "
"``modulate`` property, to change its color, and ``Resize`` and ``Stretch`` "
"modes to change its scale behavior."
msgstr ""
"Base Button 섹션에서, 당신은 버튼이 행동하는 법을 바꾸는 몇 가지 체크 상자를 "
"볼 수 있을 겁니다. ``Toggle Mode`` 가 켜지면, 버튼은 당신이 눌렀을 때 활성화"
"와 기본 상태를 껏다 켯다 할 것입니다. ``Disabled`` 는 버튼을 기본 상태로 만들"
"고, 이 경우에 ``Disabled`` 텍스처를 사용합니다. TextureButton은  앞의 노드와 "
"몇 가지 속성들을 공유합니다: ``modulate`` 속성을 갖고 있어서, 색상을 바꿀 수 "
"있고, ``Resize`` 와 ``Stretch`` 모드로 크기의 변화를 바꿀 수 있습니다."

#: ../../docs/getting_started/step_by_step/ui_introduction_to_the_ui_system.rst:117
msgid "TextureButton and its 5 texture slots"
msgstr "TextureButton과 5개의 텍스처 슬롯"

#: ../../docs/getting_started/step_by_step/ui_introduction_to_the_ui_system.rst:120
msgid "TextureProgress"
msgstr "TextureProgress"

#: ../../docs/getting_started/step_by_step/ui_introduction_to_the_ui_system.rst:122
msgid ""
"**TextureProgress** layers up to 3 sprites to create a progress bar. The "
"Under and Over textures sandwich the Progress one, which displays the bar's "
"value."
msgstr ""
"**TextureProgress** 는 진행 막대를 만들기 위해 3개의 스프라이트로 층을 쌓습니"
"다. Under와 Over 텍스처 사이에 막대의 값을 보여줄 Progress를 끼워 넣습니다."

#: ../../docs/getting_started/step_by_step/ui_introduction_to_the_ui_system.rst:126
msgid ""
"The ``Mode`` property controls the direction in which the bar grows: "
"horizontally, vertically, or radially. If you set it to radial, the "
"``Initial Angle`` and ``Fill Degrees`` properties let you limit the range of "
"the gauge."
msgstr ""
"``Mode`` 속성은 어느 방향으로 막대가 자라게 할지 제어합니다: 수평, 수직 아니"
"면 방사형으로 말입니다. 방사형으로 설정하면, ``Initial Angle`` 과 ``Fill "
"Degrees``  속성으로 당신은 게이지의 범위를 제한할 수 있습니다."

#: ../../docs/getting_started/step_by_step/ui_introduction_to_the_ui_system.rst:131
msgid ""
"To animate the bar, you'll want to look at the Range section. Set the "
"``Min`` and ``Max`` properties to define the range of the gauge. For "
"instance, to represent a character's life, you'll want to set ``Min`` to ``0,"
"`` and ``Max`` to the character's maximum life. Change the ``Value`` "
"property to update the bar. If you leave the ``Min`` and ``Max`` values to "
"the default of ``0`` and ``100,`` and set the ``Value`` property to ``40``, "
"40% of the ``Progress`` texture will show up, and 60% of it will stay hidden."
msgstr ""
"막대에게 애니메이션을 주기 위해, Range 섹션을 확인해봐야 합니다. ``Min`` 과 "
"``Max`` 속성으로 게이지의 범위를 설정하세요. 예를 들어, 캐릭터의 체력을 나타"
"내려면 ``Min``\\ 을 ``0``\\ 으로, ``Max``\\ 를 캐릭터의 최대 체력으로 설정해"
"야 할 것입니다. ``Value`` 속성을 바꿔서 막대를 업데이트하세요. 만약 ``Min``"
"\\ 과 ``Max``\\ 를 기본 값인 ``1``\\ 과 ``100``\\ 으로 두고, ``Value`` 속성"
"을 ``40``\\ 으로 하면, ``Progress`` 텍스처의 40%가 보이고 60%는 계속 숨어 있"
"습니다."

#: ../../docs/getting_started/step_by_step/ui_introduction_to_the_ui_system.rst:141
msgid "TextureProgress bar, two thirds filled"
msgstr "3분의 2가 채워진 TextureProgress 막대"

#: ../../docs/getting_started/step_by_step/ui_introduction_to_the_ui_system.rst:146
msgid ""
"**Label** prints text to the screen. You'll find all its properties in the "
"Label section, in the Inspector. Write the text in the ``Text`` property, "
"and check Autowrap if you want it to respect the textbox's size. If Autowrap "
"is off, you won't be able to scale the node. You can align the text "
"horizontally and vertically with Align and Valign, respectively."
msgstr ""
"**Label** 은 문자를 화면에 출력합니다. 당신은 이것의 모든 속성을 인스펙터"
"(Inspecter)의 Label 섹션에서 찾으실 수 있습니다. ``Text`` 속성에서 문자를 쓰"
"고, 텍스트 상자의 크기에 맞추어 자동줄바꿈을 하여 글자가 표시되기를 원한다면 "
"Autowrap을 체크하세요. Autowrap이 체크가 풀려있으면, 노드의 크기를 조절할 수 "
"없습니다. 당신은 Align과 Valign을 사용해서 문자를 가로와 세로로 정렬할 수 있"
"습니다."

#: ../../docs/getting_started/step_by_step/ui_introduction_to_the_ui_system.rst:155
msgid "Picture of a Label"
msgstr "Label의 사진"

#: ../../docs/getting_started/step_by_step/ui_introduction_to_the_ui_system.rst:158
msgid "NinePatchRect"
msgstr "NinePatchRect"

#: ../../docs/getting_started/step_by_step/ui_introduction_to_the_ui_system.rst:160
msgid ""
"**NinePatchRect** takes a texture split in 3 rows and 3 columns. The center "
"and the sides tile when you scale the texture, but it never scales the "
"corners. It is useful to build panels, dialog boxes and scalable backgrounds "
"for your UI."
msgstr ""
"**NinePatchRect** 텍스처를 3행과 3열로 분할합니다. 중앙과 가장자리는 텍스처"
"의 크기에 맞추어지지만, 모서리 부분은 크기가 바뀌지 않습니다. 이것은 패널이"
"나 대화 상자, UI에서 크기 조절이 가능한 배경을 만들 때 유용합니다."

#: ../../docs/getting_started/step_by_step/ui_introduction_to_the_ui_system.rst:167
msgid "NinePatchRect scaled with the min\\_size property"
msgstr "min\\_size 속성으로 조절된 NinePatchRect"

#: ../../docs/getting_started/step_by_step/ui_introduction_to_the_ui_system.rst:170
msgid "There are two workflows to build responsive UIs"
msgstr "반응형 UI를 만들기 위한 두 가지 워크플로가 있습니다"

#: ../../docs/getting_started/step_by_step/ui_introduction_to_the_ui_system.rst:172
msgid ""
"There are two workflows to build scalable and flexible interfaces in Godot:"
msgstr ""
"Godot에서 확장성 있고 유연한 인터페이스를 만들기 위한 두 가지 워크플로가 있습"
"니다:"

#: ../../docs/getting_started/step_by_step/ui_introduction_to_the_ui_system.rst:174
msgid ""
"You have many container nodes at your disposal that scale and place UI "
"elements for you. They take control over their children."
msgstr ""
"원하는 만큼의 UI 요소들을 확장하고 배치할 수 있는 많은 컨테이너 노드들이 있습"
"니다. 컨테이너는 그들의 자식인 UI 요소들을 제어합니다."

#: ../../docs/getting_started/step_by_step/ui_introduction_to_the_ui_system.rst:175
msgid ""
"On the other side, you have the layout menu. It helps you to anchor, place "
"and resize a UI element within its parent."
msgstr ""
"반대로, 당신은 레이아웃 메뉴가 있습니다. 이것은 UI 요소들을 부모 내에서 부모"
"위치를 기준로 위치를 고정하거나 배치하고 크기 조절하도록 돕습니다."

#: ../../docs/getting_started/step_by_step/ui_introduction_to_the_ui_system.rst:177
msgid ""
"The two approaches are not always compatible. Because a container controls "
"its children, you cannot use the layout menu on them. Each container has a "
"specific effect, so you may need to nest several of them to get a working "
"interface. With the layout approach you work from the bottom up, on the "
"children. As you don't insert extra containers in the scene it can make for "
"cleaner hierarchies, but it's harder to arrange items in a row, column, "
"grid, etc."
msgstr ""
"두 가지 방법(컨테이너와 레이아웃)이 항상 호환되는 것은 아닙니다. 컨테이너는 "
"자식을 제어하기 때문에, 레이아웃 메뉴를 그것들에게 사용할 수 없습니다. 각 컨"
"테이너는 특정한 효과를 갖고 있으므로 당신은 제대로 동작하는 인터페이스를 얻"
"기 위해 그들을 중첩해서 사용할지도 모릅니다. 레이아웃 접근으로는 자식들을 계"
"층상 아래에서 위로 작업합니다. 씬에 추가적인 컨테이너를 사용하지 않으므로 더 "
"깨끗한 계층 구조를 만들 수 있지만, 항목을 행이나 열, 격자 등으로 배열하기는 "
"더 어렵습니다."

#: ../../docs/getting_started/step_by_step/ui_introduction_to_the_ui_system.rst:179
msgid ""
"As you create UIs for your games and tools, you'll develop a sense for what "
"fits best in each situation."
msgstr ""
"게임과 도구를 위해 UI를 만들 때, 당신은 각 상황에서 무엇이 가장 적당한지에 대"
"한 감각을 기르게 될 것입니다."

#: ../../docs/getting_started/step_by_step/ui_introduction_to_the_ui_system.rst:183
msgid "Place UI elements precisely with anchors"
msgstr "앵커를 사용하여 UI 요소를 정밀하게 배치하세요"

#: ../../docs/getting_started/step_by_step/ui_introduction_to_the_ui_system.rst:185
msgid ""
"Control nodes have a position and size, but they also have anchors and "
"margins. Anchors define the origin, or the reference point, for the Left, "
"Top, Right and Bottom edges of the node. Change any of the 4 anchors to "
"change the reference point of the margins."
msgstr ""
"컨트롤 노드는 position과 size를 갖고 있고, anchors와 margins도 있습니다. "
"Anchors는 노드의 Left, Top, Right, Bottom 모서리를 위해 원점이나 기준점을 정"
"의합니다. 4개의 앵커 중 아무거나 바꿔서 margins의 기준점을 변경하세요."

#: ../../docs/getting_started/step_by_step/ui_introduction_to_the_ui_system.rst:192
msgid "The anchor property"
msgstr "앵커 속성"

#: ../../docs/getting_started/step_by_step/ui_introduction_to_the_ui_system.rst:195
msgid "How to change the anchor"
msgstr "앵커를 바꾸는 방법"

#: ../../docs/getting_started/step_by_step/ui_introduction_to_the_ui_system.rst:197
msgid ""
"Like any properties, you can edit the 4 anchor points in the Inspector, but "
"this is not the most convenient way. When you select a control node, the "
"layout menu appears above the viewport, in the toolbar. It gives you a list "
"of icons to set all 4 anchors with a single click, instead of using the "
"inspector's 4 properties. The layout menu will only show up when you select "
"a control node."
msgstr ""
"모든 속성과 마찬가지로, 인스펙터(Inspecter)에서 4개의 앵커 포인트를 편집할 "
"수 있습니다만, 가장 편리한 방법은 아닙니다. 컨트롤 노드를 선택할 때, 레이아"
"웃 메뉴가 뷰포트 위의 툴바에 나타납니다. 여기에는 아이콘 목록이 있는데 이것으"
"로 4개의 앵커들을 모두 설정할 수 있습니다, 인스펙터(Inspecter)의 4개의 속성"
"을 사용하는 대신 말이죠. 레이아웃 메뉴는 오직 컨트롤 노드를 선택할 때만 보여"
"집니다."

#: ../../docs/getting_started/step_by_step/ui_introduction_to_the_ui_system.rst:206
msgid "The layout menu in the viewport"
msgstr "뷰포트 내의 레이아웃 메뉴"

#: ../../docs/getting_started/step_by_step/ui_introduction_to_the_ui_system.rst:209
msgid "Anchors are relative to the parent container"
msgstr "앵커는 부모 컨테이너를 기준로 합니다"

#: ../../docs/getting_started/step_by_step/ui_introduction_to_the_ui_system.rst:211
msgid ""
"Each anchor is a value between 0 and 1. For the left and top anchors, a "
"value of 0 means that without any margin, the node's edges will align with "
"the left and top edges of its parent. For the right and bottom edges, a "
"value of 1 means they'll align with the parent container's right and bottom "
"edges. On the other hand, margins represent a distance to the anchor "
"position in pixels, while anchors are relative to the parent container's "
"size."
msgstr ""
"각 앵커는 0부터 1사이의 값을 갖습니다. 왼쪽과 위 앵커가 0의 값을 갖는 것은 마"
"진이 없다는 것을 의미하고, 노드의 가장자리는 부모 노드의 왼쪽 위에 정렬됩니"
"다. 오른쪽과 아래 가장자리가 1의 값을 갖는 것은 부모 컨테이너의 오른쪽과 아"
"래 가장자리에 정렬된다는 것을 의미합니다. 한편, 마진은 앵커의 위치에서 거리"
"를 픽셀 단위로 나타냅니다, 반면에 앵커는 부모 컨테이너의 크기와 관련이 있습니"
"다."

#: ../../docs/getting_started/step_by_step/ui_introduction_to_the_ui_system.rst:221
msgid ""
"Margins are relative to the anchor position, which is relative to the "
"anchors. In practice, you'll often let the container update margins for you"
msgstr ""
"마진은 앵커 위치에 상대적이고, 앵커 위치는 앵커와 상대적입니다. 실제의 경우, "
"당신은 종종 컨테이너가 마진을 업데이트하도록 할 것입니다"

#: ../../docs/getting_started/step_by_step/ui_introduction_to_the_ui_system.rst:226
msgid "Margins change with the anchor"
msgstr "마진은 앵커가 변하면 같이 변합니다"

#: ../../docs/getting_started/step_by_step/ui_introduction_to_the_ui_system.rst:228
msgid ""
"Margins update automatically when you move or resize a control node. They "
"represent the distance from the control node's edges to its anchor, which is "
"relative to the parent control node or container. That's why your control "
"nodes should always be inside a container, as we'll see in a moment. If "
"there's no parent, the margins will be relative to the node's own bounding "
"Rectangle, set in the Rect section, in the inspector."
msgstr ""
"컨트롤 노드를 움직이고 크기를 조정할 때 마진은 자동으로 업데이트 됩니다. 마진"
"은 컨트롤 노드의 모서리에서 앵커까지의 거리를 나타내고, 앵커는 부모 컨트롤 노"
"드나 컨테이너의 위치에 대해 상대적입니다. 이것이 우리가 곧 알게 될, 컨트롤 노"
"드가 항상 컨테이너에 있는 이유입니다. 부모가 없다면, 마진은 인스펙터"
"(Inspecter) 내에 Rect 섹션에 설정된, 자신의 경계 사각형에 상대적으로 될 것입"
"니다."

#: ../../docs/getting_started/step_by_step/ui_introduction_to_the_ui_system.rst:238
msgid "Margins on a CenterContainer set to the \"Full Rect\" anchor"
msgstr "CenterContainer에 있는 \"사각형 전체(Full Rect)\" 앵커로 설정된 마진"

#: ../../docs/getting_started/step_by_step/ui_introduction_to_the_ui_system.rst:240
msgid ""
"Try to change the anchors or nest your Control nodes inside Containers: the "
"margins will update. You'll rarely need to edit the margins manually. Always "
"try to find a container to help you first; Godot comes with nodes to solve "
"all the common cases for you. Need to add space between a lifebar and the "
"border of the screen? Use the MarginContainer. Want to build a vertical "
"menu? Use the VBoxContainer. More on these below."
msgstr ""
"한번 앵커 위치를 바꾸거나 컨트롤 노드를 컨테이너 안에 넣어보세요: 마진은 업데"
"이트 될 것입니다. 당신은 거의 마진을 수동으로 편집하진 않을 것입니다. 항상 당"
"신을 도와줄 컨테이너를 골라보세요; Godot는 모든 일반적인 경우를 해결하기 위"
"한 노드를 제공합니다. 체력 막대와 화면 테두리 사이에 빈 공간이 필요한가요? "
"MarginContainer를 사용하세요. 세로 메뉴를 만들고 싶나요? VBoxContainer를 사용"
"하세요. 아래에서 더 자세히 설명하겠습니다."

#: ../../docs/getting_started/step_by_step/ui_introduction_to_the_ui_system.rst:249
msgid "Use size tags to change how UI elements fill the available space"
msgstr ""
"UI 요소가 이용 가능한 영역을 채우는 방식을 바꾸기 위해서 사이즈 태그를 사용하"
"세요"

#: ../../docs/getting_started/step_by_step/ui_introduction_to_the_ui_system.rst:251
msgid ""
"Every control node has Size Flags. They tell containers how the UI elements "
"should scale. If you add the \"Fill\" flag to the Horizontal or Vertical "
"property, the node's bounding box will take all the space it can, but it'll "
"respect its siblings and retain its size. If there are 3 TextureRect nodes "
"in an HBoxContainer, with the \"Fill\" flags on both axes, they'll each take "
"up to a third of the available space, but no more. The container will take "
"over the node and resize it automatically."
msgstr ""
"모든 컨트롤 노드는 Size Flags를 가지고 있습니다. 이들은 컨테이너가 어떻게 UI "
"요소들이 크기가 조정될 지를 말합니다. 만약 \"Fill\" 플래그를 Horizontal이나 "
"Vertical 속성에 추가한다면, 노드의 경계 사각형은 가능한 모든 공간을 차지할 것"
"이지만, 형제 노드를 가리지 않는 한에서 크기를 조절할 겁니다. 만약 "
"HBoxContainer에 3개의 TextureRect 노드가 있고, \"Fill\" 플래그가 두 방향 모두"
"에 있다면, 그들은 각자의 가능한 공간의 3분의 1을 차지하고 그 외는 사용하지 않"
"을 겁니다. 컨테이너는 노드를 제어하여 크기를 자동으로 조절합니다."

#: ../../docs/getting_started/step_by_step/ui_introduction_to_the_ui_system.rst:261
msgid "3 UI elements in an HBoxContainer, they align horizontally"
msgstr "HBoxContainer에 있는 3개의 UI 요소들, 이들은 수평으로 정렬됩니다"

#: ../../docs/getting_started/step_by_step/ui_introduction_to_the_ui_system.rst:263
msgid ""
"The \"Expand\" flag lets the UI element take all the space it can, and push "
"against its siblings. Its bounding rectangle will grow against the edges of "
"its parent, or until it's blocked by another UI node."
msgstr ""
"\"Expand\" 플래그는 UI 요소가 가능한 모든 공간을 차지하게 만들고, 형제 노드"
"를 밀어냅니다. 경계 사각형은 부모의 모서리까지, 혹은 다른 UI 노드로 가로막힐 "
"때까지 커집니다."

#: ../../docs/getting_started/step_by_step/ui_introduction_to_the_ui_system.rst:269
msgid ""
"The same example as above, but the center node has the \"Expand\" size flag"
msgstr ""
"위와 같은 샘플 예제에서, 가운데 노드는 \"Expand\" 사이즈 플래그가 설정되어 있"
"습니다"

#: ../../docs/getting_started/step_by_step/ui_introduction_to_the_ui_system.rst:272
msgid ""
"You'll need some practice to understand the size tags, as their effect can "
"change quite a bit depending on how you set up your interface."
msgstr ""
"당신이 사이즈 태그를 이해하려면 몇 번의 연습이 필요할 겁니다, 왜냐하면 당신"
"이 인터페이스를 만드는 방식에 따라서 결과가 많이 달라지기 때문입니다."

#: ../../docs/getting_started/step_by_step/ui_introduction_to_the_ui_system.rst:276
msgid "Arrange control nodes automatically with containers"
msgstr "컨테이너에 컨트롤 노드를 자동으로 배열하기"

#: ../../docs/getting_started/step_by_step/ui_introduction_to_the_ui_system.rst:278
msgid ""
"Containers automatically arrange all children Control nodes including other "
"containers in rows, columns, and more. Use them to add padding around your "
"interface or center nodes in their bounding rectangles. All built-in "
"containers update in the editor, so you can see the effect instantly."
msgstr ""
"컨테이너는 자동으로 모든 자식 컨트롤 노드와 자식 컨테이너들을 열이나 행이나 "
"그 밖의 형태로 배열합니다. 컨테이너를 사용해서 이것의 경계 사각형 내에서 인터"
"페이스나 중심 노드 주위에 패딩을 추가합니다. 모든 내장 컨테이너는 편집기 내에"
"서 업데이트 되므로 컨테이너가 작동되는 것을 바로 확인하실 수 있습니다."

#: ../../docs/getting_started/step_by_step/ui_introduction_to_the_ui_system.rst:284
msgid ""
"Containers have a few special properties to control how they arrange UI "
"elements. To change them, navigate down to the Custom Constants section in "
"the Inspector."
msgstr ""
"컨테이너는 UI 요소들을 배열하는 방법을 제어하기 위한 일부 특별한 속성을 지닙"
"니다. 컨테이너를 변화하기 위해, 인스펙터(Inspecter)의  Custom Constants 섹션"
"으로 갑시다."

#: ../../docs/getting_started/step_by_step/ui_introduction_to_the_ui_system.rst:289
msgid "The 5 most useful containers"
msgstr "다섯 가지 가장 유용한 컨테이너들"

#: ../../docs/getting_started/step_by_step/ui_introduction_to_the_ui_system.rst:291
msgid ""
"If you build tools, you might need all of the containers. But for most "
"games, a handful will be enough:"
msgstr ""
"당신이 도구를 제작하는 것이라면, 모든 컨테이너가 필요할 수도 있겠지만, 대부분"
"의 게임들은, 이정도만 있어도 충분합니다:"

#: ../../docs/getting_started/step_by_step/ui_introduction_to_the_ui_system.rst:294
msgid "MarginContainer, to add margins around part of the UI"
msgstr "MarginContainer, UI의 가장자리에 여백을 추가함"

#: ../../docs/getting_started/step_by_step/ui_introduction_to_the_ui_system.rst:295
msgid "CenterContainer, to center its children in its bounding box"
msgstr "CenterContainer, 경계 사각형 안에 자식을 중앙에 둠"

#: ../../docs/getting_started/step_by_step/ui_introduction_to_the_ui_system.rst:296
msgid ""
"VboxContainer and HboxContainer, to arrange UI elements in rows or columns"
msgstr "VboxContainer와 HboxContainer, UI 요소들을 행이나 열로 배열함"

#: ../../docs/getting_started/step_by_step/ui_introduction_to_the_ui_system.rst:298
msgid "GridContainer, to arrange Controls nodes in a grid-like pattern"
msgstr "GridContainer, 컨트롤 노드를 바둑판 같은 무늬로 배열함"

#: ../../docs/getting_started/step_by_step/ui_introduction_to_the_ui_system.rst:300
msgid ""
"CenterContainer centers all its children inside of its bounding rectangle. "
"It's one you typically use for title screens, if you want the options to "
"stay in the center of the viewport. As it centers everything, you'll often "
"want a single container nested inside it. If you use textures and buttons "
"instead, they'll stack up."
msgstr ""
"CenterContainer는 경계 사각형의 안에 모든 자식들을 가운데로 놓습니다. 이것은 "
"당신이 뷰포트의 중앙에 있을 타이틀 화면에 일반적으로 사용합니다. 모든 것을 중"
"앙에 두기 때문에, 내부에 하나의 컨테이너가 중첩되어 있어야 합니다. 대신 텍스"
"처나 버튼을 놓는다면, 그들은 쌓일 것입니다."

#: ../../docs/getting_started/step_by_step/ui_introduction_to_the_ui_system.rst:308
msgid ""
"CenterContainer in action. The life bar centers inside its parent container."
msgstr "실행 중인 CenterContainer. 체력 막대가 부모 컨테이너의 중앙에 있다."

#: ../../docs/getting_started/step_by_step/ui_introduction_to_the_ui_system.rst:311
msgid ""
"The MarginContainer adds a margin on any side of the child nodes. Add a "
"MarginContainer that encompasses the entire viewport to add a separation "
"between the edge of the window and the UI. You can set a margin on the top, "
"left, right, or bottom side of the container. No need to tick the checkbox: "
"click the corresponding value box and type any number. It will activate "
"automatically."
msgstr ""
"MarginContainer는 자식 노드의 사방에 여백을 추가합니다. 모든 뷰포트를 둘러싸"
"는 MarginContainer를 추가하고 창과 UI의 가장자리 사이에 간격을 두세요. 당신"
"은 컨테이너의 top, left, right, 아니면 bottom 방향에 여백을 설정할 수 있습니"
"다. 체크박스는 건들지 않아도 됩니다: 해당하는 값의 상자를 선택하고 아무 숫자"
"나 치세요. 자동으로 작동합니다."

#: ../../docs/getting_started/step_by_step/ui_introduction_to_the_ui_system.rst:320
msgid "The MarginContainer adds a 40px margin around the Game User Interface"
msgstr ""
"게임 사용자 인터페이스 주변에 MarginContainer가 40px의 여백을 추가합니다"

#: ../../docs/getting_started/step_by_step/ui_introduction_to_the_ui_system.rst:322
msgid ""
"There are two BoxContainers: VBoxContainer and HBoxContainer. You cannot add "
"the BoxContainer node itself, as it is a helper class, but you can use "
"vertical and horizontal box containers. They arrange nodes either in rows or "
"columns. Use them to line up items in a shop, or to build complex grids with "
"rows and columns of different sizes, as you can nest them to your heart's "
"content."
msgstr ""
"두 개의 박스컨테이너가 있습니다: VBoxContainer와 HBoxContainer이죠. "
"BoxContainer 노드는 도움을 주는 클래스이므로 그대로 사용하지 못합니다, 하지"
"만 수직이나 수평으로 된 박스컨테이너는 사용할 수 있습니다. 이들은 노드를 행이"
"나 열로 배열합니다. 이들을 사용해서 상점의 아이템을 늘어놓거나, 행과 열을 다"
"른 크기로 하여 복잡한 격자를 만들 수 있고, 이걸로 당신은 마음 속 내용을 만들"
"어낼 수 있습니다."

#: ../../docs/getting_started/step_by_step/ui_introduction_to_the_ui_system.rst:331
msgid "The HBoxContainer horizontally aligns UI elements"
msgstr "HBoxContainer가 UI 요소들을 수평으로 배열합니다"

#: ../../docs/getting_started/step_by_step/ui_introduction_to_the_ui_system.rst:333
msgid ""
"VBoxContainer automatically arranges its children into a column. It puts "
"them one after the other. If you use the separation parameter, it will leave "
"a gap between its children. HBoxContainer arranges UI elements in a row. "
"It's similar to the VBoxContainer, with an extra ``add_spacer`` method to "
"add a spacer control node before its first child or after its last child, "
"from a script."
msgstr ""
"VBoxContainer는 자동으로 자식들을 세로로 배열합니다. 자식들을 차례로 하나 씩 "
"놓습니다. 당신이 separation 한도를 설정하면, 자식들 사이에 틈이 생기게 됩니"
"다. HBoxContainer는 자식들을 가로로 배열합니다. 이것은 VBoxContainer와 유사하"
"게, 스크립트에서 맨 앞이나 맨 뒤에 간격을 띄우는 컨트롤 노드를 추가하는, "
"``add_spacer`` 메서드를 갖고 있습니다."

#: ../../docs/getting_started/step_by_step/ui_introduction_to_the_ui_system.rst:340
msgid ""
"The GridContainer lets you arrange UI elements in a grid-like pattern. You "
"can only control the number of columns it has, and it will set the number of "
"rows by itself, based on its children's count. If you have nine children and "
"three columns, you will have 9÷3 = 3 rows. Add three more children and "
"you'll have four rows. In other words, it will create new rows as you add "
"more textures and buttons. Like the box containers, it has two properties to "
"set the vertical and horizontal separation between the rows and columns "
"respectively."
msgstr ""
"GridContainer는 UI 요소들을 격자 같은 무늬로 배열합니다. 당신은 오직 세로 열"
"의 숫자만 제어할 수 있는데, 가로 행의 수는 자식의 수에 따라 스스로 설정됩니"
"다. 당신이 9개의 자식을 3열로 배열한다면, 9÷3 = 3행을 가지게 됩니다. 자식이 3"
"개 더 늘어나면 4행을 가지게 됩니다. 이는 즉, 당신이 더 많은 텍스처와 버튼을 "
"추가해 행을 늘릴 수 있습니다. 박스 컨테이너처럼, 이것도 각기 행과 열 사이에 "
"수직과 수평 분리를 설정하는 두 개의 속성이 있습니다."

#: ../../docs/getting_started/step_by_step/ui_introduction_to_the_ui_system.rst:351
msgid "A GridContainer with 2 columns. It sizes each column automatically."
msgstr "2열로 된 GridContainer. 각 행은 자동으로 크기가 조절됩니다."

#: ../../docs/getting_started/step_by_step/ui_introduction_to_the_ui_system.rst:353
msgid ""
"Godot's UI system is complex, and has a lot more to offer. To learn how to "
"design more advanced interfaces, head to the :ref:`GUI section <toc-learn-"
"features-gui>` of the docs."
msgstr ""
"Godot의 UI 시스템은 복잡하고, 그만큼 많은 것을 제공합니다. 더 좋은 인터페이스"
"를 만드는 방법을 배우기 위해선, 문서의 :ref:`GUI 섹션 <toc-learn-features-"
"gui>`\\ 으로 가십시오."

#: ../../docs/getting_started/step_by_step/ui_main_menu.rst:4
msgid "Design a title screen"
msgstr "타이틀 화면 만들기"

#: ../../docs/getting_started/step_by_step/ui_main_menu.rst:6
msgid ""
"In the next two tutorials, you will build two responsive UI (user interface) "
"scenes step-by-step using the engine's UI system:"
msgstr ""
"이 다음 두 개의 튜토리얼에서, 당신은 엔진의 UI 시스템을 사용해서 두 개의 반"
"응 형 UI (사용자 인터페이스) 씬을 단계별로 만들게 될 것입니다:"

#: ../../docs/getting_started/step_by_step/ui_main_menu.rst:9
msgid "A main menu."
msgstr "메인 메뉴."

#: ../../docs/getting_started/step_by_step/ui_main_menu.rst:10
msgid "A game UI with a health bar, energy bar, bomb and money counters."
msgstr "체력 막대, 에너지 막대, 폭탄과 돈 개수 카운터가 있는 게임 UI."

#: ../../docs/getting_started/step_by_step/ui_main_menu.rst:12
msgid ""
"You will learn how to design game UIs efficiently, and how to use Godot's "
"Control nodes. This page focuses on the visual part: everything you do from "
"the editor. To learn how to code a life bar, read :doc:`ui_code_a_life_bar`."
msgstr ""
"게임 UI를 효율적으로 설계하는 법과 Godot의 Control 노드를 사용하는 방법에 대"
"해 배울 것입니다. 이 페이지에서는 시각적인 부분에 중점을 두겠습니다: 편집기에"
"서 모두 작업할 수 있습니다. 체력 막대를 코딩하는 법에 대해 알고 싶다면 :doc:"
"`ui_code_a_life_bar`\\ 를 읽어주세요."

#: ../../docs/getting_started/step_by_step/ui_main_menu.rst:20
msgid "The GUI you're going to create."
msgstr "앞으로 만들게 될 GUI."

#: ../../docs/getting_started/step_by_step/ui_main_menu.rst:22
msgid ""
"Download the project files: :download:`ui_main_menu_design.zip <files/"
"ui_main_menu_design.zip>` and extract the archive. Import the ``start/`` "
"project in Godot to follow this tutorial. The ``end/`` folder contains the "
"final result. You'll find all the sprites in the ``start/assets/main_menu`` "
"folder."
msgstr ""
"프로젝트 파일을 내려받으세요: :download:`ui_main_menu_design.zip <files/"
"ui_main_menu_design.zip>` 그리고 압축을 푸세요. 이 튜토리얼을 따라오려면 "
"Godot에 ``start/`` 프로젝트를 가져오세요. ``end/`` 폴더는 결과물이 들어있습니"
"다. 모든 스프라이트는 ``start/assets/main_menu`` 폴더에서 찾으실 수 있습니다."

#: ../../docs/getting_started/step_by_step/ui_main_menu.rst:30
msgid ""
"Read the :doc:`ui_introduction_to_the_ui_system` first to learn how Godot’s "
"UI system works."
msgstr ""
"godot의 UI 시스템이 어떻게 작동하는지 알아보려면 :"
"doc:'ui_introduction_to_the_ui_system'를 먼저 읽어보세요."

#: ../../docs/getting_started/step_by_step/ui_main_menu.rst:34
msgid "How to design your game UI"
msgstr "게임 UI를 디자인하는 방법"

#: ../../docs/getting_started/step_by_step/ui_main_menu.rst:36
msgid ""
"To design a good UI, you want to come up with a rough mockup first: a plain "
"drawing version that focuses on the placement of your UI components, their "
"size, and user interaction. Pen and paper is all you need. You shouldn't use "
"fancy and final graphics at this stage. Then, you only need simple "
"placeholder sprites and you're good to jump into Godot. You want to make "
"sure the players can find their way around the interface using those "
"placeholders."
msgstr ""
"좋은 UI를 디자인하기 위해, 당신은 대략적인 모형을 먼저 생각해내고 싶습니다: "
"UI 구성 요소들의 위치 및 크기, 사용자 상호작용에 초점을 둔 평범한 그림으로 말"
"입니다. 펜과 종이로 할 수 있습니다. 이 부분에서는 화려한 최종 그래픽을 사용하"
"지 않는 것이 좋습니다. 그러므로, 당신은 간단한 자리 표시 스프라이트만 가지고 "
"Godot로 뛰어드는 겁니다. 이것을 사용하여 플레이어가 인터페이스 주변에서 자신"
"의 길을 찾을 수 있도록 확인하려고 합니다."

#: ../../docs/getting_started/step_by_step/ui_main_menu.rst:46
msgid "The UI's rough plan or mockup"
msgstr "UI의 대략적인 계획이나 모형"

#: ../../docs/getting_started/step_by_step/ui_main_menu.rst:48
msgid ""
"Placeholder doesn't have to mean ugly, but you should keep the graphics "
"simple and clean. Avoid special effects, animation, and detailed "
"illustration before you have players playtest your UI. Otherwise:"
msgstr ""
"자리 표시자가 꼭 지저분할 필요는 없지만, 그래픽을 간단하고 깨끗하게 유지해야 "
"합니다. 당신이 UI를 실행 및 테스트 하기 전까진 특수 효과나, 애니메이션, 그리"
"고 구체적인 삽화는 피하세요. 그렇지 않으면:"

#: ../../docs/getting_started/step_by_step/ui_main_menu.rst:52
msgid ""
"The graphics might skew the players' perception of the experience and you'll "
"miss out on valuable feedback."
msgstr ""
"그래픽이 플레이어의 경험에 대한 인식을 왜곡하여, 소중한 피드백을 놓치게 될 것"
"입니다."

#: ../../docs/getting_started/step_by_step/ui_main_menu.rst:54
msgid "If the User Experience doesn't work, you'll have to redo some sprites."
msgstr ""
"사용자 경험이 잘 이루어지지 못하면, 일부 스프라이트는 다시 작업해야 할 것입니"
"다."

#: ../../docs/getting_started/step_by_step/ui_main_menu.rst:58
msgid ""
"Always try to make the interface work with simple text and boxes first. It's "
"easy to replace the textures later. Professional UX designers often work "
"with plain outlines and boxes in greyscale. When you take colors and fancy "
"visuals away, it's a lot easier to size and place UI elements properly. It "
"helps you refine the design foundation you'll build upon."
msgstr ""
"항상 먼저 간단한 문자와 상자로 인터페이스 작업을 해보세요. 나중에 텍스처를 쉽"
"게 교체할 수 있습니다. 전문적인 UX 디자이너들은 작업을 흑백으로 된 선과 상자"
"만으로 작업하기도 합니다. 당신이 색깔이나 멋진 비주얼을 멀리할 때, UI 요소들"
"을 적절하게 배치하고 크기를 조정하기가 훨씬 쉬워집니다. 이를 기초로 하여 디자"
"인 기반을 수정할 수 있습니다."

#: ../../docs/getting_started/step_by_step/ui_main_menu.rst:65
msgid "There are two ways to design your UI in Godot. You can:"
msgstr "Godot에는 UI를 디자인하는 두 가지 방법이 있습니다. 먼저 당신은:"

#: ../../docs/getting_started/step_by_step/ui_main_menu.rst:67
msgid ""
"Build it all in a single scene, and eventually save some branches as "
"reusable scenes."
msgstr ""
"하나의 씬에서 전부 만들어 버리고, 다시 사용할 수 있는 씬으로 분기로 만들어 저"
"장할 수 있습니다."

#: ../../docs/getting_started/step_by_step/ui_main_menu.rst:69
msgid ""
"Build template scenes for reusable components and create specific components "
"that inherit from your base scenes."
msgstr ""
"다시 사용할 수 있는 구성 요소를 위한 템플릿 씬을 만들고, 기본 씬에서 상속되"
"는 특정 구성 요소를 만들 수 있습니다."

#: ../../docs/getting_started/step_by_step/ui_main_menu.rst:72
msgid ""
"We will use the first approach, because the first version of your UI may not "
"work as well as you’d like. You’re likely to throw parts away and redesign "
"components as you go. When you're sure everything works, it's easy to make "
"some parts reusable, as you'll see below."
msgstr ""
"우리는 첫 번째 접근 법을 사용할 것입니다, 왜냐하면 처음으로 만든 UI는 당신이 "
"원하는 대로 잘 작동하지 않을 수 있기 때문입니다. 아마 당신은 일부분을 버리고 "
"구성 요소를 다시 디자인할 것입니다. 모든 것이 작동된다고 확신할 때, 아래에 보"
"시는 바와 같이 일부분을 재사용 가능하게 만들기는 쉽습니다."

#: ../../docs/getting_started/step_by_step/ui_main_menu.rst:79
msgid ""
"The files you'll find in Godot. The graphics look cleaner than on the rough "
"design, but they're still placeholders."
msgstr ""
"Godot에서 찾을 수 있는 파일. 그래픽은 대략적인 디자인보다 더 깔끔해 보이지"
"만, 여전히 자리 표시자입니다."

#: ../../docs/getting_started/step_by_step/ui_main_menu.rst:83
msgid "Design the main menu"
msgstr "메인 메뉴 디자인하기"

#: ../../docs/getting_started/step_by_step/ui_main_menu.rst:85
msgid ""
"Before we jump into the editor, we want to plan how we'll nest containers "
"based on our mockup image."
msgstr ""
"편집기로 가기 전에, 우리는 모형 이미지를 통해 어떻게 컨테이너를 중첩할 지 계"
"획을 세워야 됩니다."

#: ../../docs/getting_started/step_by_step/ui_main_menu.rst:89
#: ../../docs/getting_started/step_by_step/ui_main_menu.rst:282
msgid "Break down the UI mockup"
msgstr "UI 모형 파헤치기"

#: ../../docs/getting_started/step_by_step/ui_main_menu.rst:91
msgid "Here are my three rules of thumb to find the right containers:"
msgstr "적당한 컨테이너를 찾는 저의 세 가지 규칙이 있습니다:"

#: ../../docs/getting_started/step_by_step/ui_main_menu.rst:93
msgid ""
"Break down the UI into nested boxes, from the largest that contains "
"everything, to the smallest ones, that encompass one widget, like a bar with "
"its label, a panel or a button."
msgstr ""
"UI를 중첩된 상자로 분류해봅시다. 모두를 포괄하는 가장 큰 상자에서, 가장 작은 "
"상자까지 말이죠. 라벨이 있는 막대, 패널, 버튼과 같은, 하나의 위젯도 이 상자"
"에 포함됩니다."

#: ../../docs/getting_started/step_by_step/ui_main_menu.rst:96
msgid "If there's some padding around an area, use a ``MarginContainer``."
msgstr "영역 주변에 여백을 만들려면, ``MarginContainer``\\ 를 사용하세요."

#: ../../docs/getting_started/step_by_step/ui_main_menu.rst:97
msgid ""
"If the elements are arranged in rows or columns, use an ``HBoxContainer`` or "
"``VBoxContainer``."
msgstr ""
"요소를 행 또는 열로 배열한다면, ``HBoxContainer`` 또는 ``VBoxContainer``\\ "
"를 사용하세요."

#: ../../docs/getting_started/step_by_step/ui_main_menu.rst:100
msgid ""
"These rules are enough to get us started, and work well for simple "
"interfaces."
msgstr ""
"이 규칙들로 충분히 우리는 시작할 수 있고, 간단한 인터페이스 설계도 잘 할 수 "
"있습니다."

#: ../../docs/getting_started/step_by_step/ui_main_menu.rst:103
msgid ""
"For the main menu, the largest box is the entire game window. There's "
"padding between the edges of the window and the first components: this "
"should be a ``MarginContainer``. Then, the screen is split into two columns, "
"so we'll use an ``HBoxContainer``. In the left column, we'll manage the rows "
"with a ``VBoxContainer``. And in the right column, we'll center the "
"illustration with a ``CenterContainer``."
msgstr ""
"메인 메뉴에서, 가장 큰 상자는 전체 게임 창입니다. 창의 모서리와 첫 번째 구성 "
"요소 사이에는 여백이 있습니다: 이들은 ``MarginContainer`` 가 되야합니다. 그 "
"후, 화면은 두 열로 나뉘기에, ``HBoxContainer`` 를 사용합니다. 왼쪽 열에서는, "
"우리는 ``VBoxContainer`` 로 그 행을 관리할 것입니다. 그리고 오른쪽 열에서, "
"``CenterContainer`` 로 그림을 중앙에 위치하게 할 것입니다."

#: ../../docs/getting_started/step_by_step/ui_main_menu.rst:112
msgid "Interface building blocks, broken down using the three rules of thumb."
msgstr "블록으로 만든 인터페이스. 세 가지 규칙을 사용하여 분류했습니다."

#: ../../docs/getting_started/step_by_step/ui_main_menu.rst:116
msgid ""
"Containers adapt to the window's resolution and width-to-height ratio. "
"Although we could place UI elements by hand, containers are faster, more "
"precise, and **responsive**."
msgstr ""
"컨테이너는 창의 해상도와 가로-세로 비율에 맞춰 조정됩니다. 비록 우리가 UI 요"
"소들을 손으로 놓을 순 있지만, 컨테이너는 더 빠르고 더 정확하며, **반응이 빠릅"
"니다**."

#: ../../docs/getting_started/step_by_step/ui_main_menu.rst:121
msgid "Prepare the Main Menu scene"
msgstr "메인 메뉴 씬 준비하기"

#: ../../docs/getting_started/step_by_step/ui_main_menu.rst:123
msgid ""
"Let's create the main menu. We'll build it in a single scene. To create an "
"empty scene, click on **Scene > New Scene**."
msgstr ""
"메인 메뉴를 만들어봅시다. 하나의 씬에 메뉴를 만들 것입니다. 비어있는 씬을 만"
"들려면, **씬(Scene) > 새 씬(New Scene)**\\ 을 클릭하세요."

#: ../../docs/getting_started/step_by_step/ui_main_menu.rst:126
#, fuzzy
msgid ""
"We have to add a root node before we can save the scene. Your UI's root "
"should be the outermost container or element. In this case it's a "
"``MarginContainer``. ``MarginContainer`` is a good starting point for most "
"interfaces, as you often need padding around the UI. Press :kbd:`Meta + S` "
"to save the scene to the disk. Name it *MainMenu*."
msgstr ""
"씬을 저장하기 전에 루트 노드를 추가해야 합니다. UI의 루트 노드는 가장 바깥쪽"
"의 컨테이너나 요소가 되어야 합니다. 이 경우에는 ``MarginContainer`` 가 되어야"
"겠군요. ``MarginContainer`` 는 대부분의 인터페이스에 있어 좋은 출발점이 되는 "
"것이, UI 주변에 여백을 메꾸어야 하기 때문입니다. ``Control+S`` 를 눌러 씬을 "
"저장합니다. *MainMenu* 로 이름을 짓습니다."

#: ../../docs/getting_started/step_by_step/ui_main_menu.rst:132
msgid ""
"Select the ``MarginContainer`` again, and head to the inspector to define "
"the margins' size. Scroll down the ``Control`` class, to the ``Custom "
"Constants`` section. Unfold it. Set the margins as such:"
msgstr ""
"``MarginContainer`` 를 다시 선택하고, 인스펙터(Inspecter)로 가서 마진의 크기"
"를 정의하세요. ``Control`` 클래스에서, ``Custom Constants`` 섹션으로 창을 내"
"려보세요. 그것을 펼치세요. 다음과 같이 마진을 설정하세요:"

#: ../../docs/getting_started/step_by_step/ui_main_menu.rst:136
msgid "Margin Right: *120*"
msgstr "Margin Right: *120*"

#: ../../docs/getting_started/step_by_step/ui_main_menu.rst:137
msgid "Margin Top: *80*"
msgstr "Margin Top: *80*"

#: ../../docs/getting_started/step_by_step/ui_main_menu.rst:138
msgid "Margin Left: *120*"
msgstr "Margin Left: *120*"

#: ../../docs/getting_started/step_by_step/ui_main_menu.rst:139
msgid "Margin Bottom: *80*"
msgstr "Margin Bottom: *80*"

#: ../../docs/getting_started/step_by_step/ui_main_menu.rst:141
msgid ""
"We want the container to fit the window. In the toolbar above the Viewport, "
"open the **Layout** menu and select the last option, **Full Rect**."
msgstr ""
"컨테이너가 창에 맞도록 하고 싶습니다. 뷰포트 위의 툴바에서, **레이아웃"
"(Layout)** 메뉴를 열고, 마지막 설정을 선택하세요, **사각형 전체(Full Rect)**."

#: ../../docs/getting_started/step_by_step/ui_main_menu.rst:145
msgid "Add the UI sprites"
msgstr "UI 스프라이트 추가하기"

#: ../../docs/getting_started/step_by_step/ui_main_menu.rst:147
msgid ""
"Select the ``MarginContainer``, and create the UI elements as "
"``TextureRect`` nodes. We need:"
msgstr ""
"``MarginContainer`` 를 선택하고, ``TextureRect`` 노드와 같은 UI 요소들을 만드"
"세요. 우리는 이것들이 필요합니다:"

#: ../../docs/getting_started/step_by_step/ui_main_menu.rst:150
msgid "the title or logo,"
msgstr "타이틀이나 로고,"

#: ../../docs/getting_started/step_by_step/ui_main_menu.rst:151
msgid "the three text options as individual nodes,"
msgstr "세 개의 텍스트 설정. 개별의 노드로 됨,"

#: ../../docs/getting_started/step_by_step/ui_main_menu.rst:152
msgid "the version note,"
msgstr "버전 노트,"

#: ../../docs/getting_started/step_by_step/ui_main_menu.rst:153
msgid "and the main menu’s illustration."
msgstr "그리고 메인 메뉴의 삽화."

#: ../../docs/getting_started/step_by_step/ui_main_menu.rst:155
#, fuzzy
msgid ""
"Click the **Add Node** button or press :kbd:`Meta + A` on your keyboard. "
"Start to type ``TextureRect`` to find the corresponding node and press "
"enter. With the new node selected, press :kbd:`Meta + D` five times to "
"create five extra ``TextureRect`` instances."
msgstr ""
"**노드 추가(Add Node)** 버튼을 누르거나 키보드의 ``Meta+A``\\ 를 누르세요. "
"``TextureRect``\\ 를 검색하고 일치하는 노드를 찾아서 엔터 키를 누르세요. 새로"
"운 노드를 선택하고, ``Meta+D``\\ 를 5 번 눌러 다섯 개의 ``TextureRect`` 인스"
"턴스를 만드세요."

#: ../../docs/getting_started/step_by_step/ui_main_menu.rst:160
msgid ""
"Click each of the nodes to select it. In the inspector, find the **Texture** "
"property and click **[empty] > Load**. A file browser opens and lets you "
"pick a sprite to load into the texture slot."
msgstr ""
"각 노드를 선택하세요. 인스펙터(Inspecter)에서 ``Texture`` 속성을 찾고, ``[비"
"었음]([empty])`` -> ``불러오기(Load)``\\ 를 클릭하세요. 파일 브라우저가 열리"
"면 텍스처 슬롯 안에 있는 스프라이트를 불러올 수 있습니다."

#: ../../docs/getting_started/step_by_step/ui_main_menu.rst:166
msgid "The file browser lets you find and load textures."
msgstr "파일 브라우저에서 불러올 텍스처를 찾을 수 있습니다."

#: ../../docs/getting_started/step_by_step/ui_main_menu.rst:168
msgid ""
"Repeat the operation for all ``TextureRect`` nodes. You should have the "
"logo, the illustration, the three menu options and the version note, each as "
"a separate node. Then, double click on each of the nodes in the Scene tab to "
"rename them. Nothing has been placed in containers yet so this should look "
"messy."
msgstr ""
"이 작업을 나머지 ``TextureRect`` 노드에서 반복하세요. 그러고 나면 각 노드마"
"다 로고, 삽화, 세 개의 메뉴 설정 그리고 버전 노트를 갖고 있을 것입니다. 그 "
"후, 씬 탭에서 각 노드를 더블 클릭하고 이름을 바꾸세요. 컨테이너에 아직 아무 "
"노드도 놓지 않아서 지금은 분명히 노드가 어질러져 있을 것입니다."

#: ../../docs/getting_started/step_by_step/ui_main_menu.rst:176
msgid "The six nodes with textures loaded."
msgstr "텍스처를 불러온 6 개의 노드."

#: ../../docs/getting_started/step_by_step/ui_main_menu.rst:180
msgid ""
"If you want to support localization in your game, use ``Labels`` for menu "
"options instead of ``TextureRect``."
msgstr ""
"게임에 현지화를 지원하고 싶다면, 메뉴 설정에 ``TextureRect`` 대신에 "
"``Labels`` 을 사용하세요."

#: ../../docs/getting_started/step_by_step/ui_main_menu.rst:184
msgid "Add containers to place UI elements automatically"
msgstr "컨테이너를 추가하여 UI 요소들을 자동으로 놓기"

#: ../../docs/getting_started/step_by_step/ui_main_menu.rst:186
msgid ""
"Our main menu has some margin around the edges of the screen. It is split in "
"two parts: on the left, you have the logo and the menu options. On the "
"right, you have the characters. We can use one of two containers to achieve "
"this: ``HSplitContainer`` or ``HBoxContainer``. Split containers split the "
"area into two: a left and a right side or a top and a bottom side. They also "
"allow the user to resize the left and right areas using an interactive bar. "
"On the other hand, ``HBoxContainer`` just splits itself into as many columns "
"as it has children. Although you can deactivate the split container's resize "
"behaviour, I recommend to favour box containers."
msgstr ""
"우리의 메인 메뉴는 화면의 가장자리에 여백을 가지고 있습니다. 메뉴는 두 부분으"
"로 나뉩니다: 왼쪽은, 로고와 메뉴 설정이 있습니다. 오른쪽에는, 캐릭터들이 있습"
"니다. 이 작업을 위해 두 개의 컨테이너 중 하나를 사용할 수 있습니다: "
"``HSplitContainer`` 아니면 ``HBoxContainer`` 입니다. 분할 컨테이너는 영역을 "
"두 개로 나눕니다: 왼쪽과 오른쪽 아니면 위쪽과 아래쪽으로 말입니다. 또한 조절 "
"막대를 사용하여 왼쪽과 오른쪽 영역의 크기를 조절할 수 있습니다. 반면에, "
"``HBoxContainer`` 는 단지 스스로를 자식의 수 만큼으로 자신을 나눕니다. 비록 "
"분할 컨테이너가 크기 조절 행동을 비활성화 할 순 있지만, 저는 박스 컨테이너를 "
"추천합니다."

#: ../../docs/getting_started/step_by_step/ui_main_menu.rst:197
msgid ""
"Select the ``MarginContainer`` and add an ``HBoxContainer``. Then, we need "
"two containers as children of our ``HBoxContainer``: a ``VBoxContainer`` for "
"the menu options on the left, and a ``CenterContainer`` for the illustration "
"on the right."
msgstr ""
"``MarginContainer`` 를 선택하고 ``HBoxContainer`` 를 추가합니다. 그런 다음, "
"우리는 ``HBoxContainer`` 의 자식으로 두 개의 컨테이너가 필요합니다: 메뉴 설정"
"에 쓸 ``VBoxContainer`` 왼쪽에, 그리고 삽화를 넣을 ``CenterContainer`` 가 오"
"른쪽에 있어야 합니다."

#: ../../docs/getting_started/step_by_step/ui_main_menu.rst:204
msgid ""
"You should have four nested containers and the TextureRect nodes sitting "
"aside from it."
msgstr ""
"4 개의 중첩된 컨테이너가 있고, TextureRect 노드가 컨테이너 옆에 있어야 합니"
"다."

#: ../../docs/getting_started/step_by_step/ui_main_menu.rst:207
msgid ""
"In the node tree, select all the ``TextureRect`` nodes that should go on the "
"left side: the logo, the menu options (Continue, NewGame, Options), and the "
"version note. Drag and drop them into the ``VBoxContainer``. The nodes "
"should position automatically."
msgstr ""
"노드 트리에서, 왼쪽 측면에 있어야 할 모든 ``TextureRect`` 노드를 선택하세요: "
"로고, 메뉴 설정 (Continue, NewGame, Options), 그리고 버전 노트. "
"``VBoxContainer``\\ 로 드래그 앤 드롭하세요. 노드는 자동으로 위치가 맞춰질 것"
"입다."

#: ../../docs/getting_started/step_by_step/ui_main_menu.rst:214
msgid "Containers automatically place and resize textures"
msgstr "컨테이너가 자동으로 텍스처를 위치시키고 크기를 조정합니다"

#: ../../docs/getting_started/step_by_step/ui_main_menu.rst:216
msgid "We're left with two problems to solve:"
msgstr "우리는 해결해야 할 두 가지 문제가 남았습니다:"

#: ../../docs/getting_started/step_by_step/ui_main_menu.rst:218
msgid "The characters on the right aren't centered."
msgstr "오른쪽의 Characters가 중앙이 아닙니다."

#: ../../docs/getting_started/step_by_step/ui_main_menu.rst:219
msgid "There's no space between the logo and the other UI elements."
msgstr "로고와 다른 UI 요소들 사이에 공간이 없습니다."

#: ../../docs/getting_started/step_by_step/ui_main_menu.rst:221
msgid ""
"To center the characters on the right, first select the ``CenterContainer``. "
"Then in the Inspector, scroll down to the **Size Flags** category and click "
"on the field to the right of the **Vertical** property, and check **Expand** "
"in addition to **Fill**. Do the same for the **Horizontal** property. This "
"makes the ``CenterContainer`` expand into all available space while "
"respecting its neighbour ``VBoxContainer``. Finally, drag and drop the "
"Characters node into the ``CenterContainer``. The Characters element will "
"center automatically."
msgstr ""
"오른쪽에 캐릭터가 중앙에 오게 하려면, 먼저 ``CenterContainer``\\ 를 선택하세"
"요. 그 후 인스펙터(Inspecter)에서, **Size Flags** 카테고리로 내려가서 "
"**Vertical** 속성의 오른쪽에 있는 영역을 클릭하세요. 거기에서 **Expand**\\ "
"와 **Fill**\\ 을 체크하세요. **Horizontal** 속성에도 똑같이 적용하세요. 이렇"
"게 하면 ``CenterContainer``\\ 는 ``VBoxContainer``\\ 의 영역 안에서 사용 가능"
"한 영역 전체로 펼쳐집니다. 마지막으로 Characters 노드를 ``CenterContainer``"
"\\ 에 드래그 앤 드롭 하세요. Characters의 요소는 자동으로 중앙에 자리 잡을 것"
"입니다."

#: ../../docs/getting_started/step_by_step/ui_main_menu.rst:232
msgid ""
"The character node centers inside the right half of the screen as soon as "
"you place it inside the CenterContainer."
msgstr ""
"Characers 노드는 CenterContainer에 배치하자마자 화면의 우측 중앙에 위치하게 "
"됩니다."

#: ../../docs/getting_started/step_by_step/ui_main_menu.rst:235
#, fuzzy
msgid ""
"To space out the menu options and the logo on the left, we'll use one final "
"container and its size flags. Select the ``VBoxContainer`` and press :kbd:"
"`Meta + A` to add a new node inside it. Add a second ``VBoxContainer`` and "
"name it *MenuOptions*. Select all three menu options, ``Continue``, "
"``NewGame`` and ``Options``, and drag and drop them inside the new "
"``VBoxContainer``. The UI's layout should barely change, if at all."
msgstr ""
"왼쪽에 있는 메뉴 설정과 로고에 공간을 내려면, 마지막 컨테이너와 그것의 Size "
"Flags를 사용해야 합니다. ``VBoxContainer``\\ 를 선택하고, ``Meta+A``\\ 를 눌"
"러 컨테이너 안에 새 노드를 추가하세요. 두 번째 ``VBoxContainer``\\ 가 추가되"
"면 \"MenuOptions\"이라고 이름을 짓습니다. 모든 세 개의 메뉴 설정, "
"``Continue``, ``NewGame`` 그리고 ``Options``\\ 을 선택하고, 이 노드들을 새로 "
"만든 ``VBoxContainer`` 안에 드래그 앤 드롭합니다. UI의 레이아웃은 거의 변경되"
"지 않아야 합니다."

#: ../../docs/getting_started/step_by_step/ui_main_menu.rst:245
msgid ""
"Place the new container between the other two nodes to retain the UI's "
"layout."
msgstr ""
"UI의 레이아웃은 유지하기 위해 두 개의 노드 사이에 새 컨테이너를 놓습니다."

#: ../../docs/getting_started/step_by_step/ui_main_menu.rst:248
msgid ""
"Now we grouped the menu options together, we can tell their container to "
"expand to take as much vertical space as possible. Select the "
"``MenuOptions`` node. In the Inspector, scroll down to the **Size Flags** "
"category. Click on the field to the right of the **Vertical** property, and "
"check **Expand** in addition to **Fill**. The container expands to take all "
"the available vertical space while respecting its neighbors, the ``Logo`` "
"and ``Version`` elements."
msgstr ""
"이제 메뉴 설정들을 묶었으므로, 메뉴 설정의 컨테이너의 수직 영역을 가능한 많"
"이 펼쳐야 합니다. ``MenuOptions`` 노드를 선택하세요. 인스펙터(Inspecter)에서 "
"``Size Flags`` 카테고리로 내리세요. ``Vertical`` 속성의 오른쪽 영역을 클릭하"
"고, **Expand**\\ 와 추가로 **Fill**\\ 을 체크하세요. 컨테이너는 사용 가능한 "
"수직 공간 전체를 차지하도록 펼쳐집니다. 하지만 주변 노드, ``Logo``\\ 와 "
"``Version`` 요소들은 차지하지 않습니다."

#: ../../docs/getting_started/step_by_step/ui_main_menu.rst:256
msgid ""
"To center the nodes in the ``VBoxContainer``, scroll to the top of the "
"Inspector and change the **Alignment** property to **Center**."
msgstr ""
"``VBoxContainer``\\ 에서 노드가 중앙에 있게 하려면, 인스펙터(Inspecter)의 맨 "
"위로 가서 **Alignment** 속성을 **Center**\\ 로 바꿉니다."

#: ../../docs/getting_started/step_by_step/ui_main_menu.rst:261
msgid "The menu options should center vertically in the UI's left column."
msgstr "메뉴 설정은 UI의 왼쪽 열에서 중앙에 수직으로 있어야 합니다."

#: ../../docs/getting_started/step_by_step/ui_main_menu.rst:263
msgid ""
"To wrap things up, let's add some separation between the menu options. "
"Expand the **Custom Constants** category below **Size Flags**, and click the "
"field next to the **Separation** parameter. Set it to 30. Once you press "
"enter, the **Separation** property becomes active and Godot adds 30 pixels "
"between menu options."
msgstr ""
"마지막으로, 메뉴 설정 사이에 분리 영역을 추가합시다. **Size Flags** 아래의 "
"**Custom Constants**\\ 를 펼치고, **Separation** 변수 옆에 있는 영역을 클릭하"
"세요. 값은 30으로 설정하세요. 엔터 키를 누르면, **Separation** 속성이 켜지고 "
"Godot는 메뉴 설정 사이에 30 픽셀을 추가합니다."

#: ../../docs/getting_started/step_by_step/ui_main_menu.rst:271
msgid "The final interface."
msgstr "최종 인터페이스."

#: ../../docs/getting_started/step_by_step/ui_main_menu.rst:273
msgid ""
"Without a single line of code, we have a precise and responsive main menu."
msgstr ""
"코드 한 줄도 안 쓰고, 우리는 정확하고 반응하는 메인 메뉴를 갖게 되었습니다."

#: ../../docs/getting_started/step_by_step/ui_main_menu.rst:276
msgid ""
"Congratulations for getting there! You can download the final menu :download:"
"`ui_main_menu_design.zip <files/ui_main_menu_design.zip>` to compare with "
"your own. In the next tutorial, you'll create a Game User Interface with "
"bars and item counters."
msgstr ""
"여기까지 오신 것에 축하합니다! 당신의 것과 비교하기 위한 :download:"
"`ui_main_menu_design.zip <files/ui_main_menu_design.zip>`\\ 을 내려받으실 수 "
"있습니다. 다음 튜토리얼에서는, 당신은 막대와 아이템 수 카운터가 있는 게임 사"
"용자 인터페이스를 만들 것입니다."

#: ../../docs/getting_started/step_by_step/ui_main_menu.rst:284
msgid ""
"A responsive User Interface is all about making sure our UIs scale well on "
"all screen types. TV screens and computer displays have different sizes and "
"ratios. In Godot, we use containers to control the position and the size of "
"UI elements."
msgstr ""
"반응 형 사용자 인터페이스는 UI가 모든 화면 유형에 크기를 맞게 조정하도록 만드"
"는 것을 의미합니다.TV 화면과 컴퓨터는 다른 크기와 비율을 갖습니다. Godot에"
"서, 우리는 컨테이너를 사용하여 UI 요소들의 크기와 위치를 제어합니다."

#: ../../docs/getting_started/step_by_step/ui_main_menu.rst:289
#, fuzzy
msgid ""
"The order in which you nest matters. To see if your UI adapts nicely to "
"different screen ratios, select the root node, press :kbd:`Q` to activate "
"the Select Mode, select the container and click and drag on one of the "
"container's corners to resize it. The UI components should flow inside of it."
msgstr ""
"중첩한 순서가 중요합니다. UI가 다른 화면 비율에 휼륭하게 적응하는지 보기 위"
"해, 루트 노드를 선택하고, Q키를 눌러 선택 모드를 활성화 한 뒤, 컨테이너를 선"
"택하고 컨테이너의 모서리를 클릭하고 드래그 하여 크기를 바꿔보세요. UI 구성 요"
"소들이 내부에 있어야 합니다."

#: ../../docs/getting_started/step_by_step/ui_main_menu.rst:295
msgid ""
"You'll notice that although containers move sprites around, they don't scale "
"them. This is normal. We want the UI system to handle different screen "
"ratios, but we also need the entire game to adapt to different screen "
"resolutions. To do this, Godot scales the entire window up and down."
msgstr ""
"당신은 비록 컨테이너가 스프라이트를 움직이게 하지만, 크기를 조절하지 않는 것"
"을 봤을 것입니다. 이것은 정상입니다. 우리는 UI 시스템이 다른 화면 비율을 처리"
"하기를 원하지만, 또한 게임 전체가 다른 화면 해상도에 적응해야 합니다. 이를 위"
"해, Godot는 창 전체를 위 아래로 크기를 조절합니다."

#: ../../docs/getting_started/step_by_step/ui_main_menu.rst:301
msgid ""
"You can change the scale mode in the project settings: click **Project > "
"Project Settings** in the top menu. In the window's left column, look for "
"the **Display** category. Click on the **Window** sub-category. On the right "
"side of the window, you'll find a **Stretch** section. The three settings, "
"**Mode**, **Aspect**, and **Shrink**, control the screen size. For more "
"information, see :ref:`doc_multiple_resolutions`."
msgstr ""
"프로젝트 설정에서 크기 조절 모드를 바꿀 수 있습니다: 상단 메뉴에서 **프로젝트"
"(Project) > 프로젝트 설정(Project Settings)**\\ 을 클릭하세요. 창의 왼쪽 열에"
"서 **Display** 카테고리를 보세요. **Window** 하위 카테고리를 클릭하세요. 창"
"의 오른쪽에서, **Stretch** 섹션을 확인할 수 있습니다. 화면 크기를 조절하는 "
"세 가지 설정으로, **Mode**, **Aspect**, 그리고 **Shrink**\\ 가 있습니다. 더 "
"자세한 정보는 :ref:`doc_multiple_resolutions`\\ 을 참고해주세요."

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:4
msgid "Design the GUI"
msgstr "GUI 설계하기"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:6
msgid ""
"Now that you've nailed the basics, we're going to see how to build a game "
"Graphical User Interface (GUI) with reusable UI components: a life bar, an "
"energy bar, and bomb and emerald counters. By the end of this tutorial, "
"you'll have a game GUI, ready to control with GDscript or VisualScript:"
msgstr ""
"이제 기초를 갖춘 모양이니, 어떻게 게임 그래픽 사용자 인터페이스 (GUI)를 만드"
"는 지, 다시 사용할 수 있는 UI 구성 요소와 함께 알아봅시다: 체력 막대, 에너지 "
"막대, 그리고 폭탄과 에메랄드 카운터. 이 튜토리얼을 마치면, 바로 GDScript나 "
"VisualScript로 제어할 수 있는 게임 GUI를 갖게될 것입니다:"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:13
#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:621
msgid "The final result"
msgstr "최종 결과물"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:15
msgid "You'll also learn to:"
msgstr "이번에 배울 내용입니다:"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:17
msgid "Create flexible UI components"
msgstr "유연한 UI 구성 요소 만들기"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:18
msgid "Use scene inheritance"
msgstr "씬 상속 사용하기"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:19
msgid "Build a complex UI"
msgstr "복잡한 UI 만들기"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:21
msgid ""
"Download the project files: :download:`ui_gui_design.zip <files/"
"ui_gui_design.zip>` and extract the archive. Import the `start/` project in "
"Godot to follow this tutorial. The `end/` folder contains the final result."
msgstr ""
"프로젝트 파일을 다운로드하세요: :download:`ui_gui_design.zip <files/"
"ui_gui_design.zip>` 그리고 압축을 푸세요. 이 튜토리얼을 따라오려면 Godot에 "
"`start/` 프로젝트를 가져오세요. `end/` 폭더는 최종 결과물이 들어 있습니다."

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:25
msgid ""
"You can watch this tutorial as a `video on Youtube <https://www.youtube.com/"
"watch?v=y1E_y9AIqow>`_."
msgstr ""
"이 튜토리얼을 `Youtube 영상 <https://www.youtube.com/watch?v=y1E_y9AIqow>`_"
"\\ 으로도 볼 수 있습니다."

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:28
msgid "Breaking down the UI"
msgstr "UI 파헤치기"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:30
msgid ""
"Let's break down the final UI and plan the containers we'll use. As in the :"
"doc:`ui_main_menu`, it starts with a ``MarginContainer``. Then, we can see "
"up to three columns:"
msgstr ""
"최종 UI를 분해하고 사용할 컨테이너를 계획해봅시다. :doc:`ui_main_menu`\\ 일 "
"때와 마찬가지로, 시작은 ``MarginContainer``\\ 입니다. 그러면 세 개로 된 열을 "
"볼 수 있습니다:"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:34
msgid "The life and energy counters on the left"
msgstr "왼쪽의 체력과 에너지 카운터"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:35
msgid "The life and energy bars"
msgstr "체력과 에너지 막대"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:36
#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:42
msgid "The bomb and emerald counters on the right"
msgstr "오른쪽의 폭탄과 에메랄드 카운터"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:38
msgid ""
"But the bar's label and the gauge are two parts of the same UI element. If "
"we think of them this way, we're left with two columns:"
msgstr ""
"하지만 막대의 라벨과 게이지는 두 부분으로 나뉘지만, 같은 UI 요소입니다. 이렇"
"게 생각한다면, 이제 두 개의 열만 남습니다:"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:41
msgid "The life and energy bars on the left"
msgstr "왼쪽의 체력과 에너지 막대"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:44
msgid ""
"This makes it easier to nest containers: we have some margins around the "
"border of the screen using a ``MarginContainer``, followed by an "
"``HBoxContainer`` to manage our two columns. The two bars stack on top of "
"one another inside a ``VBoxContainer``. And we'll need a last "
"``HBoxContainer`` in the right column to place the bomb and emerald counters "
"side-by-side."
msgstr ""
"이렇게 하면 컨테이너를 더 쉽게 중첩할 수 있습니다: ``MarginContainer``\\ 로 "
"화면의 가장자리에는 여백이 있습니다. 이어서 ``HBoxContainer``\\ 가 두 개의 열"
"을 관리하게 됩니다. ``VBoxContainer``\\ 로 두 개의 막대를 위에서 쌓도록 만듭"
"니다. 그리고 폭탄과 에메랄드 카운터를 나란히 놓기 위해, 마지막 "
"``HBoxContainer``\\ 를 오른쪽 열에 놓습니다."

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:53
msgid "We get a clean UI layout with only 4 containers"
msgstr "4 개의 컨테이너로 말끔한 UI 레이아웃을 얻었습니다"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:55
msgid ""
"We will need extra containers inside the individual UI components, but this "
"gives us the main GUI scene's structure. With this plan in place, we can "
"jump into Godot and create our GUI."
msgstr ""
"각 UI 구성 요소에는 추가적인 컨테이너가 필요할 것입니다. 하지만 이것으로 메"
"인 GUI 씬의 구조를 만들었습니다. 이 계획에 따라, Godot로 들어가 GUI를 만들 "
"수 있습니다."

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:60
msgid "Create the base GUI"
msgstr "기초 GUI 만들기"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:62
msgid ""
"There are two possible approaches to the GUI: we can design elements in "
"separate scenes and put them together, or prototype everything in a single "
"scene and break it down later. I recommend working with a single scene as "
"you can play with your UI's placement and proportions faster this way. Once "
"it looks good, you can save entire sections of the node tree as reusable sub-"
"scenes. We'll do that in a moment."
msgstr ""
"GUI에는 할 수 있는 두 가지 접근법이 있습니다: 별개의 씬에서 요소를 설계한 후 "
"그 요소들을 함께 넣을 수 있습니다. 혹은 하나의 씬에서 모든 것을 기초 작업한 "
"후 나중에 세부적으로 접근합니다. 저는 하나의 씬에서 작업하는 것을 추천합니"
"다. UI의 배치 및 크기 조정을 더 빨리 할 수 있기 때문이죠. 일단 보기 좋게 만"
"든 후, 노드 트리의 전체 섹션을 다시 사용할 수 있는 하위 씬으로 저장할 수 있습"
"니다. 잠시 후 그렇게 할 것입니다."

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:69
msgid "For now, let's start with a few containers."
msgstr "일단 적은 수의 컨테이너로 시작합시다."

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:71
msgid ""
"Create a new scene and add a ``MarginContainer``. Select the node and name "
"it ``GUI``."
msgstr ""
"새 씬을 만들고 ``MarginContainer``\\ 를 추가하세요. 노드를 선택하고 ``GUI`` "
"\\ 라고 이름 지으세요."

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:74
msgid ""
"We want our interface to anchor to the top of the screen. Select the ``GUI`` "
"node and click the Layout button at the top of the viewport. Select the "
"``Top Wide`` option. The ``GUI`` node will anchor to the top edge of its "
"parent, the viewport by default. It will resize automatically on the "
"vertical axis to make space for its child UI components."
msgstr ""
"인터페이스가 화면에 위에 고정되어 있어야 합니다. ``GUI`` 노드를 선택하고, 뷰"
"포트 상단에 있는 레이아웃(Layout) 버튼을 클릭하세요. ``위쪽 넓게(Top Wide)`` "
"설정을 선택하세요. ``GUI`` 노드는 부모의, 기본적으로 뷰포트의 위쪽 모서리에 "
"고정될 것입니다. 세로축에 자동으로 크기가 조절되어서 자식 UI 구성 요소가 들어"
"갈 자리를 마련합니다."

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:80
msgid "Save the scene as ``GUI.tscn``. We will put the entire GUI in it."
msgstr "``GUI.tscn``\\ 으로 씬을 저장하세요. 이 씬에 GUI 전체를 넣을 것입니다."

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:82
msgid ""
"With the ``MarginContainer`` selected, head to the inspector and scroll down "
"to the custom constants section. Unfold it and click the field next to each "
"of the ``Margin`` properties. Set them all to ``20`` pixels. Next, add an "
"``HBoxContainer`` node. This one will contain our two bars on the left and "
"separate them from the two counters on the right."
msgstr ""
"``MarginContainer``\\ 를 선택한 채로, 인스펙터(Inspecter)로 가서 Custon "
"Constants 섹션으로 내려가세요. 접힌 상태를 펼쳐주고, 각 ``Margin`` 속성의 옆"
"에 있는 영역을 클릭하세요. 모두 ``20`` 픽셀로 설정하세요. 다음으로, "
"``HBoxContainer`` 노드를 추가하세요. 이 컨테이너에는 왼쪽에 있으면서 두 개의 "
"막대가 들어갈 것입니다. 그러면서 오른쪽에 있는 두 개의 카운터와 분리할 것입니"
"다."

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:88
msgid ""
"We want to stack the bars vertically inside the ``HBoxContainer``. Add a "
"``VBoxContainer`` as a child of ``HBoxContainer`` and name it ``Bars``. "
"Select the parent ``HBoxContainer`` again and this time, add another "
"``HBoxContainer`` as a child of it. Call it ``Counters``. With these four "
"containers, we have the base for our GUI scene."
msgstr ""
"``HBoxContainer`` 안에 막대를 수직으로 쌓아야 합니다. ``VBoxContainer``\\ 를 "
"``HBoxContainer``\\ 의 자식으로 추가하세요. 그리고 이름은 ``Bars``\\ 라고 지"
"으세요. 부모 ``HBoxContainer``\\ 를 다시 선택하고, 이번에는 다른 "
"``HBoxContainer``\\ 를 자식으로 추가하세요. 이것의 이름은 ``Counters``\\ 라"
"고 지으세요. 네 개의 컨테이너로, GUI 씬의 기초를 만들었습니다."

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:95
msgid "You should have 4 containers that look like this"
msgstr "4 개의 컨테이너가 이렇게 있어야 합니다"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:99
msgid ""
"We can work this way because we first broke down our UI design and took a "
"few moments to think about the containers we'd use. When you follow a "
"tutorial like this, it may seem weird. But once you're working on real "
"games, you'll see it's an efficient workflow."
msgstr ""
"이 방법이 가능한 이유는, 먼저 UI 설계를 파헤치고 사용할 컨테이너에 대해 생각"
"할 시간을 가졌기 때문입니다. 이 튜토리얼을 따라갈 때, 이상하다고 느꼈을 지도 "
"모릅니다. 하지만 실제 게임을 작업해본다면, 이것이 효율적인 워크플로라는 것을 "
"보게될 것입니다."

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:105
msgid "Create the bars' base"
msgstr "Bars의 기초 만들기"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:107
msgid ""
"Each bar is split into two sub-elements that align horizontally: the label "
"with the health count on the left, and the gauge on the right. Once again, "
"the ``HBoxContainer`` is the perfect tool for the job. Select the ``Bars`` "
"node and add a new ``HBoxContainer`` inside of it. Name it ``Bar``."
msgstr ""
"각 막대는 나란히 놓인 두 개의 하위 요소로 나뉩니다: 체력을 세는 라벨이 왼쪽, "
"그리고 게이지가 오른쪽에 있습니다. 다시 말하지만, ``HBoxContainer``\\ 는 이 "
"일에 최적한 도구입니다. ``Bars`` 노드를 선택하고, 새 ``HBoxContainer``\\ 를 "
"안에 추가하세요. 이름은 ``Bar``\\ 라고 지으세요."

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:113
msgid ""
"The label itself requires at least three nodes: a ``NinePatchRect`` for the "
"background, on top of which we'll add a texture on the left, either ``HP`` "
"or ``EP``, and a ``Label`` on the right for the value. We can nest "
"``Control`` nodes however we want. We could use the ``NinePatchRect`` as a "
"parent for the two other elements, as it encompasses them. In general, you "
"want to use containers instead, as their role is to help organize UI "
"components. We'll need a ``MarginContainer`` later anyway to add some space "
"between the life count and the gauge. Select the ``Bar`` and add a "
"``MarginContainer``. Name it ``Count``. Inside of it, add three nodes:"
msgstr ""
"라벨에는 적어도 세 개의 노드가 더 필요합니다: 배경에 쓸 ``NinePatchRect``, "
"그 배경에서 왼쪽에 ``HP`` 또는 ``EP``\\ 라고 적힌 텍스처, 그리고 오른쪽에 값"
"을 표시하기 위한 ``Label``. ``Control`` 노드는 원하는 만큼 중첩할 수 있습니"
"다. 그리고 ``NinePatchRect``\\ 를 다른 두 요소의 부모로 사용할 수 있습니다. "
"기본적으로, 컨테이너를 UI 구성 요소를 조직하도록 도움이 되는 역할로 사용할 "
"수 있습니다. 나중에 체력 카운터와 게이지 사이에 영역을 추가하기 위해서, "
"``MarginContainer``\\ 가 필요할 것입니다. ``Bar``\\ 를 선택하고 "
"``MarginContainer``\\ 를 추가하세요. 이름은 ``Count``\\ 라고 지으세요. 이 컨"
"테이너 안에 세 개의 노드를 추가하세요:"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:124
msgid "A ``NinePatchRect`` named ``Background``"
msgstr "``NinePatchRect``, 이름은 ``Background``"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:125
msgid "A ``TextureRect`` named ``Title``"
msgstr "``TextureRect``, 이름은 ``Title``"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:126
msgid "And a ``Label`` named ``Number``"
msgstr "``Label``, 이름은 ``Number``"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:128
msgid "To add the nodes as siblings, always select the ``Count`` node first."
msgstr "노드를 형제로 추가하려면, 항상 먼저 ``Count`` 노드를 선택하세요."

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:132
msgid ""
"Your scene tree should look like this. We're ready to throw in some textures"
msgstr "씬 트리는 다음과 같아야 합니다. 이제 텍스처를 줄 준비가 되었습니다"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:135
msgid ""
"Our scene is still empty. It's time to throw in some textures. To load the "
"textures, head to the FileSystem dock to the left of the viewport. Browse "
"down to the res://assets/GUI folder."
msgstr ""
"씬은 아직 텅텅 비어 있습니다. 텍스처를 줄 시간입니다. 텍스처를 불러오려면, 뷰"
"포트 왼쪽에 있는 파일 시스템(FileSystem) 독으로 가세요. res://assets/GUI 폴더"
"로 들어가세요."

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:141
msgid "You should see a list of textures that we'll use to skin our interface."
msgstr "인터페이스를 장식할 텍스처 목록은 다음과 같아야 합니다."

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:144
msgid ""
"Select the ``Background`` in the Scene dock. In the Inspector, you should "
"see a ``Texture`` property. In the FileSystem tab, click and drag "
"``label_HP_bg.png`` onto the ``Texture`` slot. It stays squashed. The parent "
"MarginContainer will force its size down to 0 until we force elements inside "
"the container to have a minimum size. Select the ``Background`` node. In the "
"Inspector, scroll down to the Rect section. Set ``Min Size`` to (100, 40). "
"You should see the ``Background`` resize along with its parent containers."
msgstr ""
"씬(Scene) 독에서 ``Background``\\ 를 선택하세요. 인스펙터(Inspector)에서 "
"``Texture`` 속성을 볼 수 있습니다. 파일 시스템(FileSystem) 탭으로 가서, "
"``label_HP_bg.png``\\ 를 ``Texture`` 슬롯으로 드래그하세요. 찌그러진 채로 들"
"어갑니다. 컨테이너 안의 요소에게 최소 크기를 주지 않으면, 부모 "
"MarginContainer가 텍스처 크기를 0 으로 만듭니다. ``Background`` 노드를 선택하"
"세요. 인스펙터(Inspector) Rect 섹션으로 내려가세요. ``Min Size``\\ 를 (100, "
"40)으로 설정하세요. ``Background``\\ 가 부모 컨테이너에 따라 크기가 조절된 것"
"을 볼 수 있습니다."

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:153
msgid ""
"Next, select the ``Title`` and drag and drop ``label_HP.png`` into its "
"``Texture`` slot. Select the ``Number`` node, click the field next to the "
"``Text`` property and type ``10``. This way, we can see both nodes in the "
"viewport. They should stack up in the top-left corner of their parent "
"``MarginContainer``."
msgstr ""
"다음으로 ``Title``\\ 을 선택하고, ``label_HP.png``\\ 를 ``Texture`` 슬롯으로 "
"드래그 앤 드롭하세요. ``Number`` 노드를 선택하고, ``Text`` 속성 옆의 영역을 "
"클릭한 뒤 ``10``\\ 을 입력하세요. 이제 두 노드 모두 뷰포트에서 볼 수 있습니"
"다. 두 노드는 부모 ``MarginContainer``\\ 의 왼쪽 위 모서리에 포개져 있어야 합"
"니다."

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:161
msgid "If you select both nodes, you should see something like this"
msgstr "두 노드를 선택하면 이렇게 보여야 합니다"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:163
#, fuzzy
msgid ""
"As they have a container as their direct parent, we cannot move them freely: "
"the ``Count`` node will always reset their anchors, their size and position. "
"Try to move and resize the nodes in the viewport. Then, select any of the "
"three textures and press :kbd:`Ctrl + Up` or :kbd:`Ctrl + Down` to reorder "
"them in the Scene dock. They'll snap back to their previous size and "
"position."
msgstr ""
"컨테이너가 직접 부모가 된 상태이므로, 이 노드들을 자유롭게 움직일 수 없습니"
"다: ``Count`` 노드는 항상 자식 노드의 앵커(Anchor), 크기, 위치를 초기화할 것"
"입니다. 이 노드들을 뷰포트에서 움직이거나 크기를 조절해보세요. 그런 다음 이 "
"세 개의 텍스처 중 하나를 선택하고, 씬(Scene) 독에서 Ctrl-위 혹은 Ctrl-아래를 "
"눌러서 노드의 순서를 다시 정렬해보세요. 노드들은 이전의 크기와 위치로 돌아갈 "
"것입니다."

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:170
msgid ""
"Parent containers control the size, the scale, the margins, and the anchors "
"of their direct children. To modify the nodes, you must nest them inside a "
"regular Control or another UI element. We'll use the ``Background`` as a "
"parent for the ``Title`` and ``Number``. Select both the ``Title`` and "
"``Number``, and drag and drop them onto ``Background``."
msgstr ""
"부모 컨테이너는 크기, 규모, 여백, 그리고 바로 아래 자식의 앵커를 제어합니다. "
"노드를 수정하려면, 일반적인 Control이나 다른 UI 요소 안에 노드를 중첩해야 합"
"니다. ``Background``\\ 를 ``Title``\\ 과 ``Number``\\ 의 부모로 사용할 것입니"
"다. ``Title``\\ 과 ``Number``\\ 를 둘 다 선택하세요. 그리고 ``Background``\\ "
"로 드래그 앤 드롭하세요."

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:179
msgid ""
"By using the Background node as the two textures' parent, we take control "
"away from the Count MarginContainer"
msgstr ""
"Background 노드를 두 텍스처의 부모로 사용했기 때문에, Count MarginContainer"
"로 부터 자유로워졌습니다"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:182
msgid ""
"Select the ``Title`` and in the Inspector, change its ``Stretch Mode`` "
"property to ``Keep Centered``. Next find the ``Rect`` category in the "
"Inspector and change the ``Size`` property to (50, 40) so it only takes the "
"left half of the background.  Next, select the ``Number`` node. In the "
"viewport, click the ``Layout`` menu and click ``Full Rect``. The node will "
"resize to fit the ``Background``. Head to the Inspector and change its "
"``Align`` property to ``Right``, and the ``Valign`` property to ``Center``. "
"The text should snap to the center of the ``Background``'s right edge. "
"Resize the node horizontally, so it takes the right half of the "
"``Background`` and there's a bit of padding with the right edge."
msgstr ""
"인스펙터(Inspecter)에서 ``Title``\\ 을 선택하고, ``Stretch Mode`` 속성을 "
"``Keep Centered``\\ 로 바꾸세요. 다음으로, 인스펙터(Inspecter)에서 ``Rect`` "
"카테고리로 가서 ``Size`` 속성을 (50, 40)으로 바꾸세요. Background의 왼쪽 절반"
"만 차지하게 될 것입니다. 다음은 ``Number`` 노드를 선택하세요. 뷰포트에서 ``레"
"이아웃(Layout)`` 메뉴를 클릭하고 ``사각형 전체(Full Rect)``\\ 을 클릭하세요. "
"노드는 ``Background``\\ 에 맞게 크기가 조절됩니다. 인스펙터(Inspecter)로 가"
"서 ``Align`` 속성을 ``Right``\\ 로 바꾸세요. 그리고 ``Valign`` 속성은 "
"``Center`` 로 바꾸세요. 글자는 ``Background``\\ 의 오른쪽 모서리의 중심에 고"
"정될 것입니다. 노드 크기를 수평으로 조절하세요. 그러면 이제 ``Background``\\ "
"의 오른쪽 절반을 차지하면서, 오른쪽 모서리에는 약간의 여백을 갖게 됩니다."

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:195
msgid ""
"Here's how the nodes' bounding boxes should look in the viewport. Keep it "
"rough, you don't need to place them too precisely for now."
msgstr ""
"노드의 경계 사각형이 뷰포트에서 이렇게 보여야 합니다. 지금은 정확하게 놓지 않"
"아도 됩니다. 적당하게 하세요."

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:199
msgid "Replace the Label's font"
msgstr "Label의 폰트 교체하기"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:201
msgid ""
"The label's font is too small. We need to replace it. Select the ``Number`` "
"node and in the Inspector, scroll down to the ``Control`` class, and find "
"the ``Custom Font`` category. Click the field next to the ``Font`` property "
"and click on ``New Dynamic Font``. Click on the field again and select Edit."
msgstr ""
"Label의 폰트는 너무 작습니다. 이것을 교체해야 합니다. ``Number`` 노드를 선택"
"하세요. 그리고 인스펙터(Inspector)에서, ``Control`` 클래스로 내려간 뒤, "
"``Custom Font`` 카테고리를 찾으세요. ``Font`` 속성 옆의 영역을 클릭한 다음, "
"``새 Dynamic Font(New Dynamic Font)``\\ 를 클릭하세요. 영역을 다시 클릭한 다"
"음 편집하기(Edit)를 선택하세요."

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:207
msgid ""
"You will enter the ``Dynamic Font`` resource. Unfold the ``Font`` category "
"and click the field next to ``Font Data``. Click the ``Load`` button. In the "
"file browser, navigate down to the assets/font folder and double click "
"``Comfortaa-Bold.ttf`` to open it. You should see the font update in the "
"viewport. Unfold the settings category to change the font size. Set the "
"``Size`` property to a higher value, like ``24`` or ``28``."
msgstr ""
"``Dynamic Font`` 리소스에 들어가야 합니다. ``Font`` 카테고리를 펼치고, "
"``Font Data`` 옆의 영역을 클릭하세요. ``불러오기(Load)`` 버튼을 클릭하세요. "
"파일 브라우저에서 assets/font 폴더로 간 다음, ``Comfortaa-Bold.ttf``\\ 를 더"
"블클릭해서 여세요. 뷰포트에서 폰트가 업데이트된 것을 볼 수 있습니다. "
"Settings 카테고리를 펼치고 Font Size를 바꾸세요. ``Size`` 속성을 더 높은 숫"
"자, ``24``\\ 난 ``28``\\ 로 설정하세요."

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:215
msgid ""
"We now need the text's baseline, the number's lower edge, to align with the "
"HP texture on the left. To do so, still in the ``DynamicFont`` resource, you "
"can tweak the ``Bottom`` property under the ``Extra Spacing`` category. It "
"adds some bottom padding to the text. Click the ``Number`` node in the Scene "
"tab to go back to the node's properties and change the ``Valign`` to "
"``Bottom``. To adjust the text's baseline, click on the font field under the "
"``Custom Font`` category again and tweak the ``Bottom`` property until the "
"text aligns with the ``Title`` node. I used a value of ``2`` pixels."
msgstr ""
"이제 문자의 기준선이 필요합니다. 왼쪽의 HP 텍스처와 나란히 있는 Number의 아"
"래 모서리 말이죠. 그러러면, 역시나 ``DynamicFont`` 리소스로 가서, ``Extra "
"Spacing`` 카테고리 밑의 ``Bottom`` 속성을 조절하면 됩니다. 이 속성은 문자의 "
"아래에 여백을 추가해줍니다. 씬 탭에서 ``Number`` 노드를 클릭하고 노드의 속성"
"으로 돌아가세요. 그리고 ``Valign``\\ 을 ``Bottom``\\ 으로 바꾸세요. 문자의 기"
"준선을 조절하려면, ``Custom Font`` 카테고리 밑의 Font 영역을 다시 클릭하세"
"요. 그리고 문자가 ``Title`` 노드와 나란히 있을 때까지 ``Bottom`` 속성을 조절"
"하세요. 저는 ``2`` 픽셀의 값을 사용했습니다."

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:227
msgid "With a Bottom value of 2 pixels, the Number aligns with the Title"
msgstr "Bottom 에 2픽셀 값으로, Number는 Title과 일직선이 되었습니다"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:229
msgid ""
"With this, we finished the hardest part of the GUI. Congratulations! Let's "
"move on to the simpler nodes."
msgstr ""
"이걸로, 우리는 GUI의 가장 어려운 부분을 마쳤습니다. 축하합니다! 더 단순한 노"
"드로 넘어갑시다."

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:233
msgid "Add the progress bar"
msgstr "경과 막대 추가하기"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:235
msgid ""
"We need one last element to complete our life bar: the gauge itself. Godot "
"ships with a ``TextureProgress`` node that has everything we need."
msgstr ""
"체력 막대를 완성하기까지 하나의 요소가 남았습니다: 게이지 그 자체죠. Godot에"
"는 지금 우리에게 필요한 ``TextureProgress`` 노드라는 것을 갖고 있습니다."

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:238
msgid ""
"Select the Bar node and add a ``TextureProgress`` inside of it. Name it "
"``Gauge``. In the inspector unfold the ``Textures`` section. Head to the "
"FileSystem dock and drag and drop the ``lifebar_bg.png`` texture onto the "
"``Under`` slot. Do the same with the ``lifebar_fill.png`` image and drop it "
"onto the ``Progress`` slot. Under the ``Range`` class in the inspector, "
"change the ``Value`` property to ``50`` to see the gauge fill up."
msgstr ""
"Bar 노드를 선택하고, 안에 ``TextureProgress``\\ 를 추가하세요. 이름은 "
"``Gauge``\\ 라고 지으세요. 인스펙터(Inspector)에서 ``Textures`` 섹션을 펼치세"
"요. 파일 시스템(FileSystem) 독으로 가서 ``lifebar_bg.png`` 텍스처를 "
"``Under`` 슬롯으로 드래그 앤 드롭하세요. 마찬가지로 ``lifebar_fill.png`` 이미"
"지는 ``Progress`` 슬롯에 드롭하세요. 인스펙터(Inspector)의 ``Range`` 클래스 "
"아래에서, ``Value`` 속성을 ``50``\\ 으로 바꾸고 게이지가 차오른 모습을 확인하"
"세요."

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:246
msgid "With only five ``Control`` nodes, our first bar is ready to use."
msgstr ""
"단지 다섯 개의 ``Control`` 노드만으로, 첫 번째 막대를 사용할 수 있게 되었습니"
"다."

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:250
msgid ""
"That's it, our life bar is ready. This last part was quick, wasn't it? "
"That's thanks to our robust container setup."
msgstr ""
"됐습니다. 체력 막대는 준비됬습니다. 마지막 부분은 빨리 끝났네요. 그렇지 않나"
"요? 강력한 컨테이너 설정 덕분입니다."

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:254
msgid "Design the bomb and emerald counters"
msgstr "폭탄과 에메랄드 카운터 설계하기"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:256
msgid ""
"The bomb and emerald counters are like the bar's ``Count`` node. So we'll "
"duplicate it and use it as a template."
msgstr ""
"폭탄과 에메랄드 카운터는 Bar의 ``Count`` 노드와 비슷합니다. 따라서 Count 노드"
"를 복제해서 템플릿으로 사용할 것입니다."

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:259
#, fuzzy
msgid ""
"Under the ``Bar`` node, select ``Count`` and press :kbd:`Ctrl + D` to "
"duplicate it. Drag and drop the new node under the ``Counters`` "
"``HBoxContainer`` at the bottom of the scene tree. You should see it resize "
"automatically. Don't worry about this for now, we'll fix the size soon."
msgstr ""
"``Bar`` 노드 아래에 있는 ``Count``\\ 를 선택한 다음, Ctrl D를 눌러서 복제하세"
"요. 씬 트리의 가장 아래에 있는 ``HBoxContainer``, 즉 ``Counters``\\ 의 자식으"
"로 복제한 노드를 드래그 앤 드롭하세요. 노드가 자동으로 크기가 조절되는 것을 "
"볼 수 있습니다. 지금은 크게 걱정하지 마세요. 나중에 크기를 고칠 것입니다."

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:264
msgid ""
"Rename the ``Count2`` node to ``Counter``. Unlike the bars, we want the "
"number to be on the left, and an icon to sit on the right. The setup is the "
"same: we need a background (a ``NinePatchRect``), the title, and the number "
"nodes. The ``Title`` node is a ``TextureRect``, so it's what we need to "
"display the icon. In the scene tree, select the ``Title`` node, and rename "
"it to ``Icon``."
msgstr ""
"``Count2`` 노드의 이름을 ``Counter``\\ 로 바꾸세요. Bars와 달리, 왼쪽에 숫자"
"가 있고 오른쪽에 아이콘이 있어야 합니다. 설정은 전과 같습니다: Background가 "
"필요하고 (``NinePatchRect``), Title, Number 노드가 필요합니다. ``Title`` 노드"
"는 아이콘을 표시해야 하므로 ``TextureRect``\\ 가 됩니다. 씬 트리에서 "
"``Title`` 노드를 선택하세요. 그리고 이름을 ``Icon``\\ 으로 바꾸세요."

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:273
msgid "Here's how your node tree should look so far"
msgstr "이것이 현재까지 작업한 노드 트리의 모습입니다"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:275
msgid ""
"With the ``Icon`` node selected, in the inspector, scroll to the top to see "
"the ``Texture`` slot. Head to the FileSystem dock on the left and select the "
"``bombs_icon.png``. Drag and drop it onto the ``Texture`` slot. In the Scene "
"Tab select both the ``Icon`` and the ``Number`` nodes. Click the Layout menu "
"in the toolbar at the top of the viewport and select ``Full Rect``. Both "
"nodes will update to fit the size of the ``Background``."
msgstr ""
"``Icon`` 노드를 선택하고, 인스펙터(Inspector)에서 ``Texture`` 슬롯이 보일 때"
"까지 위로 올라가세요. 왼쪽의 파일 시스템(FileSystem) 독으로 가서 "
"``bombs_icon.png``\\ 를 선택하세요. ``Texture`` 슬롯에 드래그 앤 드롭하세요. "
"씬(Scene) 탭에서 ``Icon``\\ 과 ``Number`` 노드 모두 선택하세요. 뷰포트 상단"
"에 있는 툴바의 레이아웃(Layout) 메뉴로 가서 ``사각형 전체(Full Rect)``\\ 를 "
"선택하세요. 두 노드 모두 ``Background``\\ 의 크기에 맞게 업데이트될 것입니다."

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:285
msgid "The nodes anchor to the entire Background, but their position is off"
msgstr "노드는 전체 Background에 고정됐지만, 위치가 어긋납니다"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:287
msgid ""
"Let's change the ``Number``'s align properties to move it to the left and "
"center of the ``Background``. Select the ``Number`` node, change its "
"``Align`` property to left and the ``Valign`` property to centre. Then "
"resize its left edge a little bit to add some padding between the left edge "
"of the ``Background`` and the text."
msgstr ""
"``Number``\\ 의 Align 속성을 바꿔서 ``Background``\\ 의 왼쪽 중앙에 있도록 합"
"시다. ``Number`` 노드를 선택하고, ``Align`` 속성을 Left로, ``Valign`` 속성을 "
"Center로 바꾸세요. 그리고 왼쪽 모서리를 살짝 움직여서 ``Background``\\ 와 문"
"자의 왼쪽 가장자리에 여백이 추가되도록 하세요."

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:295
msgid "The Number node aligned to the left and centre"
msgstr "왼쪽과 중앙에 정렬된 Number 노드"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:297
msgid ""
"To overlap the Icon and the background, we need a few tweaks. First, our "
"background is a bit too tall. It's because it's inside a margin container "
"that is controlled by the top-most GUI node. Select the GUI node at the top "
"of the scene tree and downsize it vertically so that it's as thin as "
"possible. You'll see the gauge prevents you from making it too small. A "
"container cannot be smaller than the minimal size of its children. The "
"container's margins also weigh in."
msgstr ""
"Icon과 Background를 겹치려면, 몇 가지 조정이 필요합니다. 먼저 Background가 예"
"상보다 약간 큽니다. 최상위의 GUI 노드에서 제어되는 MarginContainer에 속해있"
"기 때문입니다. 씬 트리의 맨 위에 있는GUI 노드를 선택하고 최대한 가늘게 세로"
"로 크기를 줄여보세요. Gauge는 너무 작아지지 않는 것을 볼 수 있습니다. 컨테이"
"너는 자식을 자식의 최소 크기보다 더 작게 만들 수 없습니다. 컨테이너의 여백도 "
"마찬가지입니다."

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:305
msgid ""
"Select the Icon, click the Layout menu, and select ``Full Rect`` to re-"
"center it. We need it to anchor to the ``Background``'s right edge. Open the "
"Layout menu again and select ``Center Right``. Move the icon up so it is "
"centered vertically with the ``Background``."
msgstr ""
"Icon을 선택하고 레이아웃(Layout) 메뉴를 클릭하세요. 그리고 ``사각형 전체"
"(Full Rect)``\\ 를 선택해서 다시 가운데에 있도록 하세요. 다시 레이아웃"
"(Layout) 메뉴를 열고 ``오른쪽 중앙(Center Right)``\\ 을 선택하세요. Icon을 위"
"로 움직여서 ``Background``\\ 와 수직으로 가운데에 있도록 하세요."

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:313
msgid ""
"The bomb icon anchors to the Background's right edge. Resize the Counter "
"container to see the Icon node stick to its right side"
msgstr ""
"폭탄 아이콘은 Background의 오른쪽 모서리에 앵커하세요. Counter 컨테이너의 크"
"기를 조절하여 Icon 노드가 오른쪽 모서리에 고정되도록 하세요"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:316
msgid ""
"Because we duplicated the ``Counter`` from the bar's ``Count``, the "
"``Number`` node's font is off. Select the ``Number`` node again, head to the "
"``Font`` property, and click it to access the ``DynamicFont`` resource. In "
"the ``Extra Spacing`` section, change the ``Bottom`` value to ``0`` to reset "
"the font's baseline. Our counter now works as expected."
msgstr ""
"Bar의 ``Count``\\ 에서 ``Counter``\\ 를 복제했기 때문에, ``Number`` 노드의 폰"
"트는 꺼져 있습니다. ``Number`` 노드를 다시 선택하고 ``Font`` 속성으로 가세"
"요. 그리고 속성을 클릭해서 ``DynamicFont`` 리소스에 접근하세요. ``Extra "
"Spacing`` 섹션에서 ``Bottom`` 값을 ``0``\\ 으로 바꿔서 폰트의 기준선을 초기화"
"하세요. Counter는 이제 생각한대로 작동합니다."

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:323
msgid ""
"Let's make the ``Counters`` anchor to the right edge of the viewport. To do "
"so, we need to set the ``Bars`` container take all the available horizontal "
"space it can. Select the ``Bars`` node and scroll down to the ``Size Flags`` "
"category. In the ``Horizontal`` category, check the ``Expand`` value. The "
"``Bars`` node should resize and push the counter to the right side of the "
"screen."
msgstr ""
"``Counters`` 앵커가 뷰포트의 오른쪽 모서리에 있도록 만듭시다. 그러러면 먼저 "
"``Bars`` 컨테이너가 가능한 전체 수평 공간을 차지하도록 설정해야 합니다. "
"``Bars`` 노드를 선택하고 ``Size Flags`` 카테고리로 내려가세요. "
"``Horizontal`` 카테고리에서 ``Expand`` 값을 체크하세요. ``Bars`` 노드는 크기"
"가 조절되면서 Counter를 화면의 오른쪽 모서리로 밀어낼 것입니다."

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:331
msgid ""
"An expanding container eats all the space it can from its parent, pushing "
"everything else along the way"
msgstr ""
"펼쳐진 컨테이너가 부모가 정한 영역 전체를 먹어 버리면서, 나머지를 저 멀리로 "
"밀어냅니다"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:335
msgid "Turn the bar and counter into reusable UI components"
msgstr "Bar와 Counter를 다시 사용할 수 있는 UI 구성 요소로 바꾸기"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:337
msgid ""
"We have one bar and one counter widget. But we need two of each. We may need "
"to change the bars' design or their functionality later on. It'd be great if "
"we could have a single scene to store a UI element's template, and child "
"scenes to work on variations. Godot lets us do this with Inherited Scenes."
msgstr ""
"Bar 위젯 하나와 Counter 위젯 하나를 갖고 있습니다. 하지만 각각 두 개가 필요합"
"니다. 나중에는 Bars의 디자인이나 기능을 바꾸게 될 것입니다. 하나의 씬마다 한 "
"UI 요소의 템플릿을 갖도록 만들고, 그것으로 자식 씬을 다양하게 만들 수 있다면 "
"멋질 것입니다. Godot에서는 이를 상속된 씬으로 제공합니다."

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:343
msgid ""
"Let's save both the ``Counter`` and the ``Bar`` branches as separate scenes "
"that we'll reduce to create the ``LifeBar``, the ``EnergyBar``, the "
"``BombCounter``, and the ``EmeraldCounter``. Select the ``Bar`` "
"HBoxContainer. Right click on it and click on ``Save Branch as Scene``. Save "
"the scene as ``Bar.tscn``. You should see the node branch turn it to a "
"single ``Bar`` node."
msgstr ""
"``Counter``\\ 와 ``Bar`` 분기 각각을 개별 씬으로 저장합시다. 저장해두면 나중"
"에 ``LifeBar``, ``EnergyBar``, ``BombCounter``, ``EmeraldCounter``\\ 를 만들 "
"시간을 줄일 수 있습니다. ``Bar`` HBoxContainer를 선택하세요. 우클릭하고 ``분"
"기를 씬으로 저장하기(Save Branch as Scene)``\\ 를 클릭하세요. 씬을 ``Bar."
"tscn``\\ 으로 저장하세요. 노드 분기가 하나의 ``Bar`` 노드로 바뀐 것을 볼 수 "
"있습니다."

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:352
msgid ""
"A scene is a tree of nodes. The topmost node is the tree's **root**, and the "
"children at the bottom of the hierarchy are **leaves**. Any node other than "
"the root along with one or more children is a **branch**. We can encapsulate "
"node branches into separate scenes, or load and merge them from other scenes "
"into the active one. Right click on any node in the Scene dock and select "
"``Save Branch as Scene`` or ``Merge from Scene``."
msgstr ""
"한 씬은 하나의 노드 트리입니다. 최상위의 노드는 트리의 **루트(Root)**\\ 이"
"고, 계층 구조의 아래에 해당하는 자식은 **잎**\\ 입니다. 하나 이상의 자식을 갖"
"는 노드의 루트는 **분기(Branch)**\\ 입니다. 노드 분기를 개별 씬으로 캡슐화할 "
"수 있습니다. 아니면 다른 씬에서 활성 씬으로 불러와서 병합할 수 있습니다. 씬"
"(Scene) 독에서 아무 노드나 우클릭하고 ``분기를 씬으로 저장하기(Save Branch "
"as Scene)``\\ 나 ``씬에서 병합하기(Merge from Scene)``\\ 를 선택하세요."

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:360
msgid ""
"Then, select the ``Counter`` node and do the same. Right click, ``Save "
"Branch as Scene``, and save it as ``Counter.tscn``. A new edit scene icon "
"appears to the right of the nodes in the scene tree. Click on the one next "
"to ``Bar`` to open the corresponding scene. Resize the ``Bar`` node so that "
"its bounding box fits its content. The way we named and placed the Control "
"nodes, we're ready to inherit this template and create the life bar. It's "
"the same for the ``Counter``."
msgstr ""
"그런 다음 ``Counter`` 노드를 선택하고 같은 작업을 반복하세요. 우클릭, ``분기"
"를 씬으로 저장하기(Save Branch as Scene)``, 그리고 ``Counter.tscn``\\ 으로 저"
"장하세요. 씬 트리에서 노드의 오른쪽에 새로운 편집 씬 아이콘이 나타납니다. "
"``Bar`` 옆에 있는 것을 클릭해서 해당 씬을 여세요. ``Bar``\\ 의 경계 사각형이 "
"내용물에 맞도록 노드의 크기를 조정하세요. Control 노드의 이름을 짓고 배치하"
"는 방법으로, 이 템플릿을 상속하여 체력 막대를 만들 준비가 되었습니다. "
"``Counter``\\ 도 마찬가지입니다."

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:370
msgid "With no extra changes, our Bar is ready to use"
msgstr "추가 변경 사항 없이 Bar를 사용할 수 있음"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:373
msgid "Use scene inheritance to create the remaining elements"
msgstr "씬 상속을 사용해서 나머지 요소를 만들기"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:375
msgid ""
"We need two bars that work the same way: they should feature a label on the "
"left, with some value, and a horizontal gauge on the right. The only "
"difference is that one has the HP label and is green, while the other is "
"called EP and is yellow. Godot gives us a powerful tool to create a common "
"base to reuse for all bars in the game: **inherited scenes**."
msgstr ""
"똑같이 작동하는 두 막대가 필요합니다: 왼쪽에는 일정 값이 있는 라벨 기능을 맡"
"고, 오른쪽에는 가로로 된 게이지가 있죠. 유일한 차이점은 한 쪽은 HP 라벨이면"
"서 초록 색상인 반면, 다른 쪽은 EP라고 적혀 있고 노랑색인 것입니다. Godot는 일"
"반적인 베이스를 만들어 게임 내 모든 막대에 재사용할 수 있도록 강력한 도구를 "
"제공합니다: **상속된 씬**."

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:383
msgid ""
"Inherited scenes help us keep the GUI scene clean. In the end, we will only "
"have containers and one node for each UI component."
msgstr ""
"상속된 씬은 GUI 씬을 깔끔하게 유지하도록 도와줍니다. 끝날 무렵에는, 컨테이너"
"와 각 UI 구성 요소 별 노드 하나만을 갖게될 것입니다."

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:386
msgid ""
"On an inherited scene, you can change any property of every node in the "
"inspector, aside from its name. If you modify and save the parent scene, all "
"the inherited scenes update to reflect the changes. If you change a value in "
"the inherited scene, it will always override the parent's property. It's "
"useful for UIs, as they often require variations of the same elements. In "
"general, in UI design, buttons, panels etc. share a common base style and "
"interactions. We don't want to copy it over to all variations manually."
msgstr ""
"상송된 씬이라면, 인스펙터(Inspector)에서 이름을 제외한 모든 속성을 바꿀 수 있"
"습니다. 부모 씬을 수정하고 저장했다면, 모든 상속된 씬은 업데이트되면서 변경 "
"사항이 반영됩니다. 상속된 씬에서 어떤 값을 바꿨다면, 그것을 부모의 속성을 다"
"시 정의한 것이 됩니다. 이 점이 UI에서는 유용합니다. 종종 UI는 같은 요소에서 "
"다양함이 요구되기 때문이죠. 일반적으로 UI 디자인, 버튼, 패널 등은 일반적인 베"
"이스 스타일과 상호 작용을 공유합니다. 이 모든 다양성을 수동으로 복사하고 싶"
"진 않죠."

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:395
msgid ""
"A reload icon will appear next to the properties you override. Click it to "
"reset the value to the parent scene's default."
msgstr ""
"다시 정의한 속성 옆에 다시 불러오기 아이콘이 나타날 것입니다. 클릭해서 부모 "
"씬의 기본 값으로 값을 초기화하세요."

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:400
msgid ""
"Think of scene inheritance like the node tree, or the ``extends`` keyword in "
"GDScript. An inherited scene does everything like its parent, but you can "
"override properties, resources and add extra nodes and scripts to extend its "
"functionality."
msgstr ""
"씬 상속의 개념은 노드 트리, 혹은 GDScript에서의 ``extends`` 키워드와 비슷합니"
"다. 상속된 씬은 부모가 하는 모든 것을 합니다. 하지만 속성, 리소스를 다시 정의"
"할 수 있고, 기능을 확장하기 위해 노드나 스크립트를 추가할 수 있습니다."

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:406
msgid "Inherit the Bar Scene to build the LifeBar"
msgstr "LifeBar를 만들기 위해 Bar 씬을 상속하기"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:408
#, fuzzy
msgid ""
"Go to ``Scene -> New Inherited Scene`` to create a new type of ``Bar``. "
"Select the Bar scene and open it. You should see a new [unsaved] tab, that's "
"like your ``Bar``, but with all nodes except the root in grey. Press :kbd:"
"`Meta + S` to save the new inherited scene and name it ``LifeBar``."
msgstr ""
"``씬(Scene) -> 새 상속 씬(New Inherited Scene)``\\ 으로 가서 ``Bar``\\ 의 새 "
"유형을 만드세요. Bar 씬을 선택하고 여세요. 새로운 [저장되지 않음(unsaved)] 탭"
"을 볼 수 있습니다. 이 탭에는 ``Bar``\\ 와 비슷하지만, 루트를 제외한 모든 노드"
"가 회색으로 되어 있습니다. ``Meta+S``\\ 를 눌러 새 상속 씬을 저장하고 이름을 "
"``LifeBar``\\ 라고 지으세요."

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:416
msgid "You can't rename grey nodes. This tells you they have a parent scene"
msgstr ""
"회색 노드를 이름을 바꿀 수 없습니다. 이것은 부모 씬을 갖고 있음을 뜻합니다"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:418
msgid ""
"First, rename the root or top level node to ``LifeBar``. We always want the "
"root to describe exactly what this UI component is. The name differentiates "
"this bar from the ``EnergyBar`` we'll create next. The other nodes inside "
"the scene should describe the component's structure with broad terms, so it "
"works with all inherited scenes. Like our ``TextureProgress`` and ``Number`` "
"nodes."
msgstr ""
"먼저 루트나 상위 계층의 노드의 이름을 ``LifeBar``\\ 로 바꾸세요. 항상 루트는 "
"UI 구성 요소가 정확히 어떤 것인지를 설명해야 합니다. 이 이름이 막대와 나중에 "
"만들 ``EnergyBar``\\ 를 구별하게 만듭니다. 씬에 있는 다른 노드는 구성 요소의 "
"구조를 넓은 범위에서 설명해야 합니다. 따라서 모든 상속된 씬에서도 설명이 돼"
"야 하죠. 마치 ``TextureProgress``\\ 나 ``Number``\\ 노드처럼 말입니다."

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:427
msgid ""
"If you've ever done web design, it's the same spirit as working with CSS: "
"you create a base class, and add variations with modifier classes. From a "
"base button class, you'll have button-green and button-red variations for "
"the user to accept and refuse prompts. The new class contains the name of "
"the parent element and an extra keyword to explain how it modifies it. When "
"we create an inherited scene and change the name of the top level node, "
"we're doing the same thing."
msgstr ""
"이제까지 웹 디자인을 해본 적이 있다면, 이 작업은 CSS를 가지고 작업하는 것과 "
"상동할 것입니다: 기초 클래스를 만들고, 수정자 클래스로 변화를 추가하는 것이"
"죠. 기초 버튼 클래스부터, 사용자가 프롬프트를 수락하고 거절하도록 만드는 초"
"록 버튼과 빨강 버튼이라는 변화를 주듯이 말입니다. 새 클래스에는 부모 요소의 "
"이름과 어떻게 수정하는 지에 관한 추가 키워드가 있습니다. 상속된 씬을 만들고, "
"최상위의 노드의 이름을 바꿀 때, 같은 작업을 하고 있는 셈이죠."

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:436
msgid "Design the EnergyBar"
msgstr "EnergyBar 설계하기"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:438
msgid ""
"We already setup the ``LifeBar``'s design with the main ``Bar`` scene. Now "
"we need the ``EnergyBar``."
msgstr ""
"이미 메인 ``Bar`` 씬으로 ``LifeBar``\\ 의 설계를 마쳤습니다. 이제 필요한 것"
"은 ``EnergyBar``\\ 입니다."

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:441
msgid ""
"Let's create a new inherited scene, and once again select the ``Bar.tscn`` "
"scene and open it. Double-click on the ``Bar`` root node and rename it to "
"``EnergyBar``. Save the new scene as ``EnergyBar.tscn``. We need to replace "
"the HP texture with EP one, and to change the textures on the gauge."
msgstr ""
"새 상속 씬을 만듭시다. 그리고 다시 한번, ``Bar.tscn`` 씬을 선택하고 여세요. "
"``Bar`` 루트 노드를 더블클릭하고, 이름을 ``EnergyBar``\\ 로 바꾸세요. 새 씬"
"을 ``EnergyBar.tscn``\\ 으로 저장하세요. HP 텍스처를 EP로 교체해야 하고, 게이"
"지의 텍스처를 바꿔야 합니다."

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:447
msgid ""
"Head to the FileSystem dock on the left, select the ``Title`` node in the "
"Scene tree and drag and drop the ``label_EP.png`` file onto the texture "
"slot. Select the ``Number`` node and change the ``Text`` property to a "
"different value like ``14``."
msgstr ""
"왼쪽의 파일 시스템(FileSystem) 독으로 가세요. 씬 트리에서 ``Title`` 노드를 선"
"택하고 텍스처 슬롯으로 ``laber_EP.png`` 파일을 드래그 앤 드롭하세요. "
"``Number`` 노드를 선택하고 ``Text`` 속성을 ``14``\\ 로, 혹은 그 외 기존과 다"
"른 값으로 바꾸세요."

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:452
msgid ""
"You'll notice the EP texture is smaller than the HP one. We should update "
"the ``Number``'s font size to better fit it. A font is a resource. All the "
"nodes in the entire project that use this resource will be affected by any "
"property we change. You can try to change the size to a huge value like "
"``40`` and switch back to the ``LifeBar`` or the ``Bar`` scenes. You will "
"see the text increased in size."
msgstr ""
"EP 텍스처가 HP보다 더 작은 것을 눈치챘을 것입니다. 텍스처에 맞도록 ``Number``"
"\\ 의 폰트 크기를 업데이트해야 합니다. 폰트는 리소스입니다. 전체 프로젝트에 "
"있는 노드 중 이 리소스를 사용하고 있는 노드는 이 리소스의 속성을 바꾼 것에 영"
"향을 받게 될 것입니다. 한번 Size를 ``40``\\ 과 같은 큰 값으로 바꾸고 "
"``LifeBar``\\ 나 ``Bar`` 씬으로 돌아가보세요. 문자 크기가 커진 것을 볼 수 있"
"습니다."

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:461
msgid "If we change the font resource, all the nodes that use it are affected"
msgstr ""
"폰트 리소스를 바꾸게 되면, 이 리소스를 사용하는 모든 노드가 영향을 받습니다"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:464
msgid ""
"To change the font size on this node only, we must create a copy of the font "
"resource. Select the ``Number`` node again and click on the wrench and "
"screwdriver icon on the top right of the inspector. In the drop-down menu, "
"select the ``Make Sub-Resources Unique`` option. Godot will find all the "
"resources this node uses and create unique copies for us."
msgstr ""
"이 노드에서만 폰트 크기를 바꾸도록 하려면, 폰트 리소스의 사본을 만들어야 합니"
"다. ``Number`` 노드를 다시 선택하고, 인스펙터(Inspector)의 오른쪽 상단에 있"
"는 렌치와 스크루드라이버 아이콘을 클릭하세요. 드롭다운 메뉴에서 ``하위 리소스"
"를 유일하게 만들기(Make Sub-Resources Unique)``\\ 를 선택하세요. Godot는 이 "
"노드에서 사용하는 모든 리소스를 찾아서 유일한 사본을 만들어 줄 것입니다."

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:472
msgid "Use this option to create unique copies of the resources for one node"
msgstr "이 설정을 사용해서 한 노드를 위한 유일한 리소스 사본을 만들었습니다"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:476
#, fuzzy
msgid ""
"When you duplicate a node from the Scene tree, with :kbd:`Meta + D`, it "
"shares its resources with the original node. You need to use ``Make Sub-"
"Resources Unique`` before you can tweak the resources without affecting the "
"source node."
msgstr ""
"씬 트리에서 한 노드를 ``Meta+D``\\ 로 복제하면, 원래 노드의 리소스를 공유합니"
"다. 리소스를 수정하기 전에 ``하위 리소스를 유일하게 만들기(Make Sub-"
"Resources Unique)``\\ 를 사용해야 원본 노드에게 영향을 주지 않습니다."

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:481
msgid ""
"Scroll down to the ``Custom Font`` section and open ``Font``. Lower the "
"``Size`` to a smaller value like ``20`` or ``22``. You may also need to "
"adjust the ``Bottom`` spacing value to align the text's baseline with the EP "
"label on the left."
msgstr ""
"``Custom Font`` 섹션으로 내려가서``Font``\\ 를 여세요. ``Size``\\ 를 ``20``"
"\\ 이나 ``22``\\ 처럼 더 작은 값으로 낮추세요. 그리고 ``Bottom`` 영역 값을 조"
"정해서 문자의 기준선이 왼쪽의 EP 라벨과 나란하도록 해야합니다."

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:488
msgid "The EP Count widget, with a smaller font than its HP counterpart"
msgstr "EP Count 위젯은 HP보다 더 작은 폰트로 되어 있습니다"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:490
msgid ""
"Now, select the ``TextureProgress`` node. Drag the ``energy_bar_bg.png`` "
"file onto the ``Under`` slot and do the same for ``energy_bar_fill.png`` and "
"drop it onto the ``Progress`` texture slot."
msgstr ""
"이제 ``TextureProgress`` 노드를 선택하세요. ``Under 슬롯에 ``energy_bar_bg."
"png`` 파일을 드래그하고, ``Progress`` 텍스처 슬롯에도 마찬가지로 "
"``energy_bar_fill.png``\\ 를 드래그하세요."

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:494
msgid ""
"You can resize the node vertically so that its bounding rectangle fits the "
"gauge. Do the same with the ``Count`` node until its size aligns with that "
"of the bar. Because the minimal size of ``TextureProgress`` is set based on "
"its textures, you won't be able to downsize the ``Count`` node below that. "
"That is also the size the ``Bar`` container will have. You may downscale "
"this one as well."
msgstr ""
"노드의 경계 사각형이 게이지에 맞도록 노드를 수직으로 크기를 조절할 수 있습니"
"다. 크기가 막대와 나란해질 때까지 ``Count`` 노드에도 똑같이 적용하세요. "
"``TextureProgress``\\ 의 최소 크기가 텍스처로 설정되어 있기 때문에, "
"``Count`` 노드를 그보다 더 작게 줄일 수는 없습니다. ``Bar`` 컨테이너에도 마찬"
"가지입니다. ``TextureProgress``\\ 도 같이 크기를 줄여야 할 것입니다."

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:501
msgid ""
"Last but not least, the ``Background`` container has a minimum size that "
"makes it a bit large. Select it and in the ``Rect`` section, change the "
"``Min Size`` property down to ``80`` pixels. It should resize automatically "
"and the ``Title`` and ``Number`` nodes should reposition as well."
msgstr ""
"마지막으로 ``Background`` 컨테이너가 최소 크기를 가져서 원래보다 조금 더 커졌"
"습니다. 컨테이너를 선택하고, ``Rect`` 섹션에서 ``Min Size`` 속성을 ``80`` 픽"
"셀로 바꾸세요. 자동으로 크기가 조절되면서 ``Title``\\ 과 ``Number`` 노드의 위"
"치도 다시 조정될 것입니다."

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:509
msgid "The Count looks better now it's a bit smaller"
msgstr "Count는 더 작아져서 보기 좋아졌습니다"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:513
msgid ""
"The Count node's size affects the position of the TextureProgress. As we'll "
"align our bars vertically in a moment, we're better off using the Counter's "
"left margin to resize our EP label. This way both the EnergyBar's Count and "
"the LifeBar's Count nodes are one hundred pixels wide, so both gauges will "
"align perfectly."
msgstr ""
"Count 노드의 크기는 TextureProgress의 위치에 영향을 받습니다. Bar를 수직으로 "
"나열하기 때문에, EP 라벨의 크기를 조절하기 위해 Counter의 왼쪽 여백을 사용하"
"는 것이 좋습니다. EnergyBar의 Count와 LifeBar의 Count 노드 둘다 100 픽셀 너비"
"이기 때문에, 이 방법으로 두 게이지가 완벽하게 나란히 있을 수 있는 것입니다."

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:520
msgid "Prepare the bomb and emerald counters"
msgstr "폭탄과 에메랄드 카운터 준비하기"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:522
msgid ""
"Let us now take care of the counters. Go to ``Scene -> New Inherited Scene`` "
"and select the ``Counter.tscn`` as a base. Rename the root node as "
"``BombCounter`` too. Save the new scene as ``BombCounter.tscn``. That's all "
"for this scene."
msgstr ""
"카운터를 다루어봅시다. ``씬(Scene) -> 새 상속 씬(New Inherited Scene)``\\ 으"
"로 가서, ``Counter.tscn``\\ 을 기본 씬으로 선택하세요. 루트 노드의 이름도 "
"``BombCounter``\\ 로 바꾸세요. 새 씬을 ``BombCounter.tscn``\\ 으로 저장하세"
"요. 이것이 이 씬의 전부입니다."

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:529
msgid "The bomb counter is the same as the original Counter scene"
msgstr "폭탄 카운터는 원래 Counter 씬과 같습니다"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:531
msgid ""
"Go to ``Scene -> New Inherited Scene`` again and select ``Counter.tscn`` "
"once more. Rename the root node ``EmeraldCounter`` and save the scene as "
"``EmeraldCounter.tscn``. For this one, we mainly need to replace the bomb "
"icon with the emerald icon. In the FileSystem tab, drag the ``emeralds_icon."
"png`` onto the ``Icon`` node's ``Texture`` slot. ``Icon`` already anchors to "
"the right edge of the ``Background`` node so we can change its position and "
"it will scale and reposition with the ``EmeraldCounter`` container. Shift "
"the emerald icon a little bit to the right and down. Use the Arrow Keys on "
"the keyboard to nudge its position. Save, and we're done with all the UI "
"elements."
msgstr ""
"다시 ``씬(Scene) -> 새 상속 씬(New Inherited Scene)``\\ 으로 가서, 다시 "
"``Counter.tscn``\\ 을 선택합니다. 루트 노드의 이름을 ``EmeraldCounter``\\ 로 "
"바꾸고, 씬을 ``EmeraldCounter.tscn``\\ 으로 저장하세요. 이 씬에게는 폭탄 아이"
"콘 대신 에메랄드 아이콘으로 바꿔야 합니다. 파일 시스템(FileSystem) 탭에서 "
"``emeralds_icon.png``\\ 를 ``Icon`` 노드의 ``Texture`` 슬롯으로 드래그하세"
"요. ``Icon``\\ 은 이미 ``Background`` 노드의 오른쪽 모서리에 앵커되어 있습니"
"다. 따라서 노드의 위치를 바꿀 수 있고, ``EmeraldCounter`` 컨테이너로 크기와 "
"위치를 조정할 수 있습니다. 에메랄드 아이콘을 오른쪽 아래로 약간 움직이세요. "
"키보드의 화살표 키로 위치를 미세하게 조정하세요. 저장하고, 모든 UI 요소가 완"
"성되었습니다."

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:544
msgid "The emerald counter should look something like this"
msgstr "에메랄드 카운터는 이와 같이 보여야 합니다"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:547
msgid "Add the UI components to the final GUI"
msgstr "최종 GUI에 UI 구성 요소들을 추가하기"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:549
msgid ""
"Time to add all the UI elements to the main GUI scene. Open the ``GUI.tscn`` "
"scene again, and delete the ``Bar`` and ``Counter`` nodes. In the FileSystem "
"dock, find the ``LifeBar.tscn`` and drag and drop it onto the ``Bars`` "
"container in the scene tree. Do the same for the ``EnergyBar``. You should "
"see them align vertically."
msgstr ""
"메인 GUI 씬에 모든 UI 요소를 추가할 시간입니다. 다시 ``GUI.tscn`` 씬을 열고, "
"``Bar``\\ 와 ``Counter`` 노드를 삭제하세요. 파일 시스템(FileSystem) 독에서 "
"``LifeBar.tscn``\\ 을 찾고, 씬 트리에서 ``Bars`` 컨테이너에 드래그 앤 드롭하"
"세요. ``EnergyBar``\\ 에도 마찬가지로 하세요. 수직으로 나란히 있는 것을 볼 "
"수 있습니다."

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:557
msgid "The LifeBar and the EnergyBar align automatically"
msgstr "LifeBar와 EnergyBar가 자동으로 정렬됩니다"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:559
msgid ""
"Now, drag and drop the ``BombCounter.tscn`` and ``EmeraldCounter.tscn`` "
"scenes onto the ``Counters`` node. They'll resize automatically."
msgstr ""
"이제 ``BombCounter.tscn``\\ 와 ``EmeraldCounter.tscn`` 씬을 ``Counters`` 노드"
"에 드래그 앤 드롭하세요. 자동으로 크기가 조절될 것입니다."

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:564
msgid "The nodes resize to take all the available vertical space"
msgstr "노드는 가능한 모든 수직 공간을 차지하도록 크기를 조절합니다"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:566
msgid ""
"To let the ``EmeraldCounter`` and ``BombCounter`` use the size we defined in "
"``Counter.tscn``, we need to change the ``Size Flags`` on the ``Counters`` "
"container. Select the ``Counters`` node and unfold the ``Size Flags`` "
"section in the Inspector. Uncheck the ``Fill`` tag for the ``Vertical`` "
"property, and check ``Shrink Center`` so the container centers inside the "
"``HBoxContainer``."
msgstr ""
"``EmeraldCounter``\\ 와 ``BombCounter``\\ 가 ``Counter.tscn``\\ 에서 정의한 "
"크기를 사용하도록 하려면, ``Counters`` 컨테이너의 ``Size Flags``\\ 를 바꿔야 "
"합니다. ``Counters`` 노드를 선택하고 인스펙터(Inspector)에서 ``Size Flags`` "
"섹션을 펼치세요. ``Vertical`` 속성에 있는 ``Fill`` 태그의 체크 상태를 풀고, "
"``Shrink Center``\\ 를 체크하면 컨테이너는 ``HBoxContainer`` 안에서 중앙에 위"
"치합니다."

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:575
msgid "Now both counters have a decent size"
msgstr "이제 카운터 모두 적당한 크기를 가졌습니다"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:579
msgid ""
"Change the ``Min Size`` property of the ``Counters`` container to control "
"the height of the counters' background."
msgstr ""
"``Counters`` 컨테이너의 ``Min Size`` 속성을 바꿔서 Counters의 배경의 높이를 "
"조정하세요."

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:582
msgid ""
"We have one small issue left with the EP label on the EnergyBar: the 2 bars "
"should align vertically. Click the icon next to the ``EnergyBar`` node to "
"open its scene. Select the ``Count`` node and scroll down to the ``Custom "
"Constants`` section. Add a ``Margin Left`` of ``20``. In the ``Rect`` "
"section set the node's ``Min Size`` back to 100, the same value as on the "
"LifeBar. The ``Count`` should now have some margin on the left. If you save "
"and go back to the GUI scene, it will be aligned vertically with the "
"``LifeBar``."
msgstr ""
"EnergyBar의 EP 라벨에 한 가지 문제가 남았습니다: 두 막대는 수직으로 나란히 있"
"어야 합니다. ``EnergyBar`` 노드 옆의 아이콘을 클릭해서 노드의 씬을 여세요. "
"``Count`` 노드를 선택하고 ``Custom Constants`` 섹션으로 가세요. ``Margin "
"Left``\\ 를 ``20``\\ 으로 추가하세요. ``Rect`` 섹션에서 노드의 ``Min Size``"
"\\ 를 다시 100으로 돌려놓으세요. 이 값은 LifeBar에 설정된 값과 같습니다. "
"``Count``\\ 는 왼쪽에 이제 여백이 생길 것입니다. 저장하고 다시 GUI 씬으로 돌"
"아간다면, ``LifeBar``\\ 와 수직으로 나란히 있을 것입니다."

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:593
msgid "The 2 bars align perfectly"
msgstr "완벽하게 정렬된 두 막대"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:597
msgid ""
"We could have set up the ``EnergyBar`` this way a few moments ago. But this "
"shows you that you can go back to any scene anytime, tweak it, and see the "
"changes propagate through the project!"
msgstr ""
"방금 전, 이 방법으로 ``EnergyBar``\\ 를 설정할 수 있었습니다. 하지만 이는 언"
"제든지 돌아가서 값을 조정하고, 그 변경 사항이 프로젝트를 통해 전파되는 것을 "
"볼 수 있다는 것을 보여줍니다!"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:602
msgid "Place the GUI onto the game's mockup"
msgstr "게임 모형에 GUI를 배치하기"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:604
msgid ""
"To wrap up the tutorial we're going to insert the GUI onto the game's mockup "
"scene."
msgstr "튜토리얼을 마무리하기 위해, 게임 모형 씬에 GUI를 삽입할 것입니다."

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:607
msgid "Head to the FileSystem dock and open ``LevelMockup.tscn``."
msgstr "파일 시스템(FileSystem) 독으로 가서 ``LevelMockup.tscn``\\ 을 여세요."

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:609
msgid ""
"Drag-and-drop the ``GUI.tscn`` scene right below the ``bg`` node and above "
"the ``Characters``. The GUI will scale to fit the entire viewport. Head to "
"the Layout menu and select the ``Center Top`` option so it anchors to the "
"top edge of the game window. Then resize the GUI to make it as small as "
"possible vertically. Now you can see how the interface looks in the context "
"of the game."
msgstr ""
"``bg`` 노드 아래와 ``Characters`` 노드 위에 ``GUI.tscn`` 씬을 드래그 앤 드롭"
"하세요. GUI는 전체 뷰포트에 맞게 크기가 조절될 것입니다. 레이아웃(Layout) 메"
"뉴로 가서 ``위쪽 중앙(Center Top)`` 설정을 선택하세요. GUI는 게임 창의 위쪽 "
"모서리에 앵커될 것입니다. 그런 다음 GUI를 수직으로 가능한 작게 크기를 조절하"
"세요. 이제 게임의 맥락에서 인터페이스가 어떻게 보이는 지 알 수 있습니다."

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:616
msgid ""
"Congratulations for getting to the end of this long tutorial. You can find "
"the final project here: :download:`ui_gui_design.zip <files/ui_gui_design."
"zip>`."
msgstr ""
"이 긴 튜토리얼을 마친 것을 축하합니다. 여기서 최종 프로젝트를 찾아가세요: :"
"download:`ui_gui_design.zip <files/ui_gui_design.zip>`."

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:625
msgid ""
"**A final note about Responsive Design**. If you resize the GUI, you'll see "
"the nodes move, but the textures and text won't scale. The GUI also has a "
"minimum size, based on the textures inside of it. In games, we don’t need "
"the interface to be as flexible as that of a website. You almost never want "
"to support both landscape and portrait screen orientations. It’s one or the "
"other. In landscape orientation, the most common ratios range from 4:3 to "
"16:9. They are close to one another. That's why it’s enough for the GUI "
"elements to only move horizontally when we change the window size."
msgstr ""
"**반응형 디자인의 마지막 주석**. GUI의 크기를 조정하면 노드가 움직이는 것을 "
"볼 수 있지만, 텍스처와 문자는 크기가 조절되지 않습니다. GUI 또한 최소 크기가 "
"있습니다. 들어있는 텍스처에 따라 다르죠. 게임은 꼭 웹페이지처럼 유연한 인터페"
"이스를 가질 필요는 없습니다. 보통 가로 화면과 세로 화면 모두를 지원하고 싶지"
"는 않을 것입니다. 둘 중 하나만 지원하겠죠. 가로 화면이라면 가장 일반적인 비율"
"은 4:3에서 16:9 사이입니다. 이들은 서로 비슷합니다. 이것이 창 크기를 바꿀 때 "
"GUI 요소가 수평으로만 이동하는 것이 충분한 이유입니다."

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:4
msgid "Control the game's UI with code"
msgstr "코드를 통해 게임의 UI를 제어하기"

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:7
#: ../../docs/tutorials/2d/particle_systems_2d.rst:7
msgid "Intro"
msgstr "소개"

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:9
msgid ""
"In this tutorial, you will connect a character to a life bar and animate the "
"health loss."
msgstr ""
"이 튜토리얼에서, 당신은 캐릭터를 체력 막대와 연결하고 체력이 줄어드는 것을 구"
"현할 것입니다."

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:14
msgid ""
"Here's what you'll create: the bar and the counter animate when the "
"character takes a hit. They fade when it dies."
msgstr ""
"이것이 우리가 만들 것입니다: 캐릭터가 맞을 때 움직이는 막대와 카운터. 캐릭터"
"가 죽으면 서서히 사라집니다."

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:18
msgid "You will learn:"
msgstr "배울 것입니다:"

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:20
msgid "How to **connect** a character to a GUI with signals"
msgstr "어떻게 캐릭터를 GUI에 시그널을 통해 **연결** 하는가"

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:21
msgid "How to **control** a GUI with GDscript"
msgstr "어떻게 GUI를 GDScript를 통해 **제어** 하는가"

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:22
msgid "How to **animate** a life bar with the :ref:`Tween <class_Tween>` node"
msgstr ""
"어떻게 체력 막대를 :ref:`Tween <class_Tween>` 노드를 통해 **애니메이트"
"(animate)** 하는가"

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:25
msgid ""
"If you want to learn how to set up the interface instead, check out the step-"
"by-step UI tutorials:"
msgstr ""
"어떻게 인터페이스를 설정하는 지를 배우고 싶다면, 단계별 UI 튜토리얼을 참고하"
"세요:"

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:28
msgid "Create a main menu screen"
msgstr "메인 메뉴 화면 만들기"

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:29
msgid "Create a game user interface"
msgstr "게임 사용자 인터페이스 만들기"

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:32
msgid ""
"When you code a game, you want to build the core gameplay first: the main "
"mechanics, player input, win and loss conditions. The UI comes a bit later. "
"You want to keep all the elements that make up your project separate if "
"possible. Each character should be in its own scene, with its own scripts, "
"and so should the UI elements. This prevents bugs, keeps your project "
"manageable, and allows different team members to work on different parts of "
"the game."
msgstr ""
"게임을 코딩할 때, 당신은 핵심 게임 플레이를 먼저 만들고 싶을 것입니다: 주요 "
"기능, 플레이어 입력, 승패 여부. UI는 나중에나 떠오를 겁니다. 당신은 프로젝트"
"를 만들기 위한 모든 요소들을 가능한 한 분리되도록 하고 싶을 것입니다. 각 캐릭"
"터는 자신의 씬에, 자신의 스크립트를 가지고 있어서, UI 요소가 되어야 합니다. "
"이것은 버그를 예방하고 프로젝트 관리를 유지하며, 다른 팀 구성원들이 게임의 다"
"른 부분을 작업하도록 만듭니다."

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:40
msgid ""
"Once the core gameplay and the UI are ready, you'll need to connect them "
"somehow. In our example, we have the Enemy who attacks the Player at "
"constant time intervals. We want the life bar to update when the Player "
"takes damage."
msgstr ""
"일단 핵심 게임 플레이와 UI가 준비되었다면, 이 들을 어떤 방법으로 연결해야 합"
"니다. 우리의 예제에서는, 우리는 일정한 시간마다 플레이어를 공격하는 적을 가지"
"고 있습니다. 우리는 플레이어가 피해를 입을 때마다 체력 막대가 업데이트 되길 "
"원합니다."

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:45
msgid "To do this, we will use **signals**."
msgstr "그러기 위해서, 우리는 **시그널(signals)** 을 사용할 것입니다."

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:49
msgid ""
"Signals are Godot's version of the Observer pattern. They allow us to send "
"out some message. Other nodes can connect to the object that **emits** the "
"signal and receive the information. It's a powerful tool we use a lot for "
"User Interface and achievement systems. You don't want to use them "
"everywhere, though. Connecting two nodes adds some coupling between them. "
"When there's a lot of connections, they become hard to manage. For more "
"information, check out the `signals video tutorial <https://youtu.be/"
"l0BkQxF7X3E>`_ on GDquest."
msgstr ""
"시그널은 옵저버 패턴의 Godot 버전입니다. 그들로 메시지를 전달할 수 있습니다. "
"다른 노드들은 시그널을 **방출(emits)** 하고 정보를 받을 수 있는 다른 물체와 "
"연결할 수 있습니다. 이것은 사용자 인터페이스와 업적 달성 시스템에 많이 쓰일 "
"강력한 도구입니다. 그러나 그것들을 남용하기를 권하진 않습니다. 두 노드를 연결"
"하면 노드 간의 커플링이 생겨납니다. 많은 연결이 있다면, 관리하기가 어려워집니"
"다. GDquest의 `signals video tutorial <https://youtu.be/l0BkQxF7X3E>`_ 에서 "
"더 많은 정보를 보실 수 있습니다."

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:53
msgid "Download and explore the start project"
msgstr "시작 프로젝트를 다운로드하고 탐구하기"

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:55
msgid ""
"Download the Godot project: :download:`ui_code_life_bar.zip <files/"
"ui_code_life_bar.zip>`. It contains all the assets and scripts you need to "
"get started. Extract the .zip archive to get two folders: `start` and `end`."
msgstr ""
"Godot 프로젝트를 다운로드 하세요: :download:`ui_code_life_bar.zip <files/"
"ui_code_life_bar.zip>`. 시작할 모든 애셋과 스크립트가 포함되어 있습니다. ."
"zip 파일을 풀고 두 개의 폴더가 나옵니다: `start` 와 `end` 입니다."

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:58
msgid ""
"Load the ``start`` project in Godot. In the ``FileSystem`` dock, double "
"click on LevelMockup.tscn to open it. It's an RPG game's mockup where 2 "
"characters face each other. The pink enemy attacks and damages the green "
"square at regular time intervals, until its death. Feel free to try out the "
"game: the basic combat mechanics already work. But as the character isn't "
"connected to the life bar, the ``GUI`` doesn't do anything."
msgstr ""
"Godot에서 ``start`` 프로젝트를 불러옵니다. ``파일 시스템`` 독에서 "
"LevelMockup.tscn을 더블 클릭해서 엽니다. 이것은 두 캐릭터가 마주 보고 있는 "
"RPG 게임의 모형입니다. 분홍색 적이 일정하게 공격하고 초록색 사각형이 맞는 것"
"을 반복합니다, 죽을 때 까지 말이죠. 게임을 한번 해보세요: 기본 전투 구조는 이"
"미 작동합니다. 하지만 캐릭터가 체력 막대와 연결되어 있지 않기 때문에 ``GUI``"
"\\ 는 아무것도 하지 않습니다."

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:68
msgid ""
"This is typical of how you'd code a game: you implement the core gameplay "
"first, handle the player's death, and only then you'll add the interface. "
"That's because the UI listens to what's happening in the game. So it can't "
"work if other systems aren't in place yet. If you design the UI before you "
"prototype and test the gameplay, chances are it won't work well and you'll "
"have to re-create it from scratch."
msgstr ""
"이것은 게임을 코딩하는 일반적인 방법입니다: 먼저 핵심 게임 플레이를 구현합니"
"다, 그리고 플레이어의 사망을 다룹니다, 그런 뒤 인터페이스 만을 추가하는 것입"
"니다. UI는 게임에서 무엇이 일어나는지 듣기 때문입니다. 따라서 다른 시스템이 "
"제 자리를 잡지 못한다면 작동할 수 없습니다. 만일 게임 플레이를 테스트하지 않"
"은 채로 UI를 디자인 한다면, 잘 작동하지 않을 수 있으니 처음부터 다시 만들어"
"야 할 수도 있습니다."

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:71
msgid "The scene contains a background sprite, a GUI, and two characters."
msgstr "씬에는 배경 스프라이트, GUI, 그리고 두 캐릭터가 있습니다."

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:75
msgid "The scene tree, with the GUI scene set to display its children"
msgstr "GUI 씬이 자식으로 보이게 놓은 씬 트리"

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:77
msgid ""
"The GUI scene encapsulates all of the game's Graphical User Interface. It "
"comes with a barebones script where we get the path to nodes that exist "
"inside the scene:"
msgstr ""
"GUI 씬은 게임 사용자 인터페이스 전체를 캡슐화 합니다. 씬 안에 존재하는 노드"
"의 경로를 얻는 스크립트와 함께 제공됩니다:"

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:105
msgid ""
"``number_label`` displays a life count as a number. It's a ``Label`` node"
msgstr "``number_label`` 은 체력을 숫자로 보여줍니다. ``Label`` 노드입니다"

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:107
msgid "``bar`` is the life bar itself. It's a ``TextureProgress`` node"
msgstr "``bar`` 는 체력 막대입니다. ``TextureProgress`` 노드입니다"

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:108
msgid ""
"``tween`` is a component-style node that can animate and control any value "
"or method from any other node"
msgstr ""
"``tween`` 은 다른 어떤 노드의 값이나 메서드를 제어하고 움직이게 할 수 있는 구"
"성 요소 스타일의 노드입니다"

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:113
msgid ""
"The project uses a simple organisation that works for game jams and tiny "
"games."
msgstr ""
"프로젝트는 게임 잼이나 작은 게임을 위해 작업하는 간단한 조직화를 사용합니다."

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:115
msgid ""
"At the root of the project, in the `res://` folder, you will find the "
"`LevelMockup`. That's the main game scene and the one we will work with. All "
"the components that make up the game are in the `scenes/` folder. The "
"`assets/` folder contains the game sprites and the font for the HP counter. "
"In the `scripts/` folder you will find the enemy, the player, and the GUI "
"controller scripts."
msgstr ""
"프로젝트의 뿌리에서, `res://` 폴더에서, `LevelMockup` 을 찾으실 수 있습니다. "
"이것이 같이 작업할 메인 게임 씬입니다. 게임을 만들기 위한 모든 구성 요소는 "
"`scenes/` 폴더에 있습니다. `assets/` 폴더는 게임 스프라이트와 HP 카운터를 위"
"한 폰트가 들어있습니다. `scripts/` 폴더에서 적, 플레이어, 그리고 GUI 컨트롤"
"러 스크립트를 찾으실 수 있습니다."

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:117
msgid ""
"Click the edit scene icon to the right of the node in the scene tree to open "
"the scene in the editor. You'll see the LifeBar and EnergyBar are sub-scenes "
"themselves."
msgstr ""
"편집기에서 씬 트리 오른쪽의 편집 씬 아이콘을 클릭해서 씬을 엽니다. LifeBar와 "
"EnergyBar 가 하위 씬으로 있는 것을 보실 수 있습니다."

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:121
msgid "The scene tree, with the Player scene set to display its children"
msgstr "Player 씬이 자식으로 설정된 씬 트리"

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:124
msgid "Set up the Lifebar with the Player's max\\_health"
msgstr "플레이어의 max\\_health로 Lifebar 설정하기"

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:126
msgid ""
"We have to tell the GUI somehow what the player's current health is, to "
"update the lifebar's texture, and to display the remaining health in the HP "
"counter in the top left corner of the screen. To do this we send the "
"player's health to the GUI every time they take damage. The GUI will then "
"update the ``Lifebar`` and ``Number`` nodes with this value."
msgstr ""
"우리는 GUI가 플레이어의 현재 체력이 어떤지 알려주고, 체력 막대의 텍스처를 업"
"데이트하고, 화면 좌측 상단에서 HP 카운터가 남은 체력을 보여주어야 합니다. 그"
"러기 위해 우리는 플레이어가 피해를 입을 때마다 체력을 GUI로 보내야 합니다. "
"GUI는 ``Lifebar`` 와 ``Number`` 노드를 주어진 값으로 업데이트할 것입니다."

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:132
msgid ""
"We could stop here to display the number, but we need to initialize the "
"bar's ``max_value`` for it to update in the right proportions. The first "
"step is thus to tell the ``GUI`` what the green character's ``max_health`` "
"is."
msgstr ""
"여기서 멈추고 숫자를 보여주러 갈 수 있지만, 그 전에 막대의 ``max_value`` 을 "
"초기화해야 정확한 크기로 업데이트할 수 있습니다. 그러므로 먼저 ``GUI`` 가 초"
"록색 캐릭터의 ``max_health`` 가 어느 정도인지 말해야 합니다."

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:139
msgid ""
"The bar, a `TextureProgress`, has a `max_value` of `100` by default. If you "
"don't need to display the character's health with a number, you don't need "
"to change its `max_value` property. You send a percentage from the `Player` "
"to the `GUI` instead:  `health / max_health * 100`."
msgstr ""
"`TextureProgress` 막대는 `100` 의 `max_value` 를  기본적으로 갖고 있습니다. "
"캐릭터의 체력을 숫자로 표시하지 않아도 된다면, 그것의 `max_value` 속성을 바"
"꿀 필요가 없습니다. 대신 `Player` 의 퍼센트를 `GUI` 로 보냅니다: `health / "
"max_health * 100`."

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:143
msgid ""
"Click the script icon to the right of the ``GUI`` in the Scene dock to open "
"its script. In the ``_ready`` function, we're going to store the "
"``Player``'s ``max_health`` in a new variable and use it to set the "
"``bar``'s ``max_value``:"
msgstr ""
"씬 독에서 ``GUI`` 오른쪽의 스크립트 아이콘을 클릭합니다. ``_ready`` 함수에"
"서, 우리는 ``Player`` 의 ``max_health`` 을 새 변수로 저장하고 그걸로 ``bar`` "
"의 ``max_value`` 를 설정합니다:"

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:164
msgid ""
"Let's break it down. ``$\"../Characters/Player\"`` is a shorthand that goes "
"one node up in the scene tree, and retrieves the ``Characters/Player`` node "
"from there. It gives us access to the node. The second part of the "
"statement, ``.max_health``, accesses the ``max_health`` on the Player node."
msgstr ""
"분석해봅시다. ``$\"../Characters/Player\"`` 는 씬 트리의 한 노드를 불러옵니"
"다, 그리고 ``Characters/Player`` 노드를 검색하는 속기입니다. 그것은 노드에게 "
"진입로를 제공합니다. 명령문의 두 번째 부분은, ``.max_health`` 로, Player 노드"
"에 ``max_health`` 를 접근합니다."

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:170
msgid ""
"The second line assigns this value to ``bar.max_value``. You could combine "
"the two lines into one, but we'll need to use ``player_max_health`` again "
"later in the tutorial."
msgstr ""
"두 번째 줄을 ``bar.max_value`` 의 값을 지정합니다.이 두 줄을 하나로 묶을 수"
"도 있습니다, 하지만  이 튜토리얼에서 ``player_max_health`` 를 나중에도 사용해"
"야 할 것입니다."

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:174
msgid ""
"``Player.gd`` sets the ``health`` to ``max_health`` at the start of the "
"game, so we could work with this. Why do we still use ``max_health``? There "
"are two reasons:"
msgstr ""
"``Player.gd`` 는 게임 시작 시 ``health`` 를 ``max_health`` 로 설정합니다, 따"
"라서 이것으로 작업할 수 있었습니다. 왜 여전히 ``max_health`` 를 사용하냐고"
"요? 두 가지 이유가 있습니다:"

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:178
msgid ""
"We don't have the guarantee that ``health`` will always equal "
"``max_health``: a future version of the game may load a level where the "
"player already lost some health."
msgstr ""
"``health`` 가 항상 ``max_health`` 와 같다는 보장은 없습니다: 게임의 미래 버전"
"에서는 플레이어가 이미 체력을 잃은 채로 레벨을 불러올 지도 모릅니다."

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:184
msgid ""
"When you open a scene in the game, Godot creates nodes one by one, following "
"the order in your Scene dock, from top to bottom. `GUI` and `Player` are not "
"part of the same node branch. To make sure they both exist when we access "
"each other, we have to use the `_ready` function. Godot calls `_ready` right "
"after it loaded all nodes, before the game starts. It's the perfect function "
"to set everything up and prepare the game session. Learn more about _ready: :"
"doc:`scripting_continued`"
msgstr ""
"게임에서 씬을 열 때,Godot는 씬 독에서 위에서 아래로, 순서에 따라, 하나 씩 노"
"드를 만들어 냅니다. `GUI` 와 `Player` 는 같은 노드 분기에 있지 않습니다. 실"
"행 시에 그들이 함께 있게 만들기 위해선, 우리는 `_ready` 함수를 사용해야 합니"
"다. Godot는 게임이 시작하기 전, 모든 노드를 불러온 후에 `_ready` 를 부릅니"
"다. 모든 것을 설정하고 게임 세션을 준비하기에 최고의 함수입니다. _ready 에 대"
"해서는 :doc:`scripting_continued` 를 참고하세요"

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:188
msgid "Update health with a signal when the player takes a hit"
msgstr "플레이어가 피해를 입었을 때 시그널로 체력을 업데이트하기"

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:190
msgid ""
"Our GUI is ready to receive the ``health`` value updates from the "
"``Player``. To achieve this we're going to use **signals**."
msgstr ""
"우리의 GUI는 ``Player`` 에서 ``health`` 을 받을 준비가 되었습니다. 그러기 위"
"해 우리는 **시그널(signals)** 을 사용합니다."

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:195
msgid ""
"There are many useful built-in signals like `enter_tree` and `exit_tree`, "
"that all nodes emit when they are respectively created and destroyed. You "
"can also create your own using the `signal` keyword. On the `Player` node, "
"you'll find two signals we created for you: `died` and `health_changed`."
msgstr ""
"많은 유용한 내장 시그널이 있습니다, `enter_tree` 와 `exit_tree` 는 모든 노드"
"가 각각 만들어지고 없어질 때 방출하는 것입니다. 또한 자신만의 `시그널` 키워드"
"를 만들어 사용할 수 있습니다. `Player` 노드에서 두 개의 시그널을 찾으실 수 있"
"습니다: `died` 와 `health_changed` 입니다."

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:197
msgid ""
"Why don't we directly get the ``Player`` node in the ``_process`` function "
"and look at the health value? Accessing nodes this way creates tight "
"coupling between them. If you did it sparingly it may work. As your game "
"grows bigger, you may have many more connections. If you get nodes this way "
"it gets complex quickly. Not only that: you need to listen to the state "
"change constantly in the ``_process`` function. This check happens 60 times "
"a second and you'll likely break the game because of the order in which the "
"code runs."
msgstr ""
"왜 ``_process`` 함수에서 ``Player`` 노드를 바로 가져오지 않고 체력 값을 보"
"죠? 그 방법으로 노드를 접근하는 것은 그들을 단단히 연결합니다. 그걸 원한다면 "
"작동은 할 것입니다. 게임이 커질 수록, 많은 연결을 갖게 될 것입니다. 그 방법으"
"로 노드를 가져오는 것은 복잡해질 것입니다. 그 뿐만이 아니라: 당신은 "
"``_process`` 함수에서 끊임없는 상태 변화를 들어야 합니다. 이 확인은 1초 당 60"
"회이고 코드의 작동 순서 때문에 게임이 꺼질 수도 있습니다."

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:206
msgid ""
"On a given frame you may look at another node's property *before* it was "
"updated: you get a value from the last frame. This leads to obscure bugs "
"that are hard to fix. On the other hand, a signal is emitted right after a "
"change happened. It **guarantees** you're getting a fresh piece of "
"information. And you will update the state of your connected node *right "
"after* the change happened."
msgstr ""
"특정 프레임에서 다른 노드의 속성을 업데이트 되기 *전인* 것을 볼 수 있습니다: "
"마지막 프레임에서 준 값을 가져옵니다. 이로 인해 수정하기 어려운 애매한 버그"
"가 발생합니다. 반면에, 시그널은 변화가 일어난 후에 바로 방출합니다. 당신이 깔"
"끔한 정보를 얻는다는 것을 **보증합니다** 그리고 연결한 노드의 상태가 변화가 "
"일어난 *바로 직후* 에 업데이트 될 것입니다."

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:215
msgid ""
"The Observer pattern, that signals derive from, still adds a bit of coupling "
"between node branches. But it's generally lighter and more secure than "
"accessing nodes directly to communicate between two separate classes. It can "
"be okay for a parent node to get values from its children. But you'll want "
"to favor signals if you're working with two separate branches. Read Game "
"Programming Patterns for more information on the `Observer pattern <http://"
"gameprogrammingpatterns.com/observer.html>`_. The `full book <http://"
"gameprogrammingpatterns.com/contents.html>`_ is available online for free."
msgstr ""
"시그널이 파생된, 옵저버 패턴은, 여전히 노드 분기 간의 연결을 추가합니다. 하지"
"만 일반적으로 두 개의 분리된 클래스 사이를 연결하기 위해 직접 노드를 접근하"
"는 것보다 더 가볍고 더 안전합니다. 부모 노드가 자식 노드의 값을 가져올 수 있"
"습니다. 하지만 별도의 가지에서 이 작업을 한다면 시그널을 더 선호할 것입니다. "
"더 많은 정보는 `Observer pattern <http://gameprogrammingpatterns.com/"
"observer.html>`_ 에서 Game Programming Patterns 를 읽어보세요. `전체 책 "
"<http://gameprogrammingpatterns.com/contents.html>`_ 은 온라인에서 무료로 이"
"용할 수 있습니다."

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:219
msgid ""
"With this in mind, let's connect the ``GUI`` to the ``Player``. Click on the "
"``Player`` node in the scene dock to select it. Head down to the Inspector "
"and click on the Node tab. This is the place to connect nodes to listen to "
"the one you selected."
msgstr ""
"이것을 염두해두고 ``GUI`` 를 ``Player``\\ 에 연결합시다. 씬 독에서 "
"``Player`` 노드를 클릭하여 선택합니다. 인스펙터(Inspecter)에서 노드(Node) 탭"
"을 클릭합니다. 여기가 당신이 선택한 시그널을 받기 위해 노드를 연결하는 곳입니"
"다."

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:224
msgid "The first section lists custom signals defined in ``Player.gd``:"
msgstr "첫 번째 섹션은 ``Player.gd`` 에 정의된 맞춤 시그널 목록입니다:"

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:226
msgid ""
"``died`` is emitted when the character died. We will use it in a moment to "
"hide the UI."
msgstr ""
"``died`` 는 캐릭터가 죽었을 때 방출합니다. 이것은 UI를 감추는 순간에 사용할 "
"것입니다."

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:228
msgid "``health_changed`` is emitted when the character got hit."
msgstr "``health_changed`` 는 캐릭터가 피해를 입었을 때 방출됩니다."

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:232
msgid "We're connecting to the health\\_changed signal"
msgstr "우리는  health\\_changed 시그널을 연결합니다"

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:234
msgid ""
"Select ``health_changed`` and click on the Connect button in the bottom "
"right corner to open the Connect Signal window. On the left side you can "
"pick the node that will listen to this signal. Select the ``GUI`` node. The "
"right side of the screen lets you pack optional values with the signal. We "
"already took care of it in ``Player.gd``. In general I recommend not to add "
"too many arguments using this window as they're less convenient than doing "
"it from the code."
msgstr ""
"``health_changed`` 를 선택하고 오른쪽 아래 연결하기 버튼을 누르고 시그널 연"
"결 창을 엽니다. 왼쪽에서 이 시그널을 듣는 노드를 선택할 수 있습니다. ``GUI`` "
"노드를 선택합니다. 화면 오른쪽은 시그널과 함께 선택적인 값을 보낼 수 있습니"
"다. 우리는 이것을 이미 ``Player.gd`` 에서 다루었습니다. 일반적으로 저는 코딩"
"보다 덜 편리하므로 이 창으로 너무 많은 인수를 추가하지 않기를 권장합니다."

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:244
msgid "The Connect Signal window with the GUI node selected"
msgstr "GUI 노드가 선택된 시그널 연결 창"

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:248
msgid ""
"You can optionally connect nodes from the code. However doing it from the "
"editor has two advantages:"
msgstr ""
"선택적으로 코드로부터 노드를 연결할 수 있습니다. 하지만 편집기로 하면 두 가"
"지 이점이 있습니다:"

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:250
msgid "Godot can write new callback functions for you in the connected script"
msgstr "Godot는 연결된 스크립트에서 새 콜백 함수를 쓸 수 있습니다"

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:251
msgid ""
"An emitter icon appears next to the node that emits the signal in the Scene "
"dock"
msgstr "씬 독에서 시그널을 방출하는 노드 옆에 방출 아이콘이 나타납니다"

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:253
msgid ""
"At the bottom of the window you will find the path to the node you selected. "
"We're interested in the second row called \"Method in Node\". This is the "
"method on the ``GUI`` node that gets called when the signal is emitted. This "
"method receives the values sent with the signal and lets you process them. "
"If you look to the right, there is a \"Make Function\" radio button that is "
"on by default. Click the connect button at the bottom of the window. Godot "
"creates the method inside the ``GUI`` node. The script editor opens with the "
"cursor inside a new ``_on_Player_health_changed`` function."
msgstr ""
"창의 아래에 당신이 선택한 노드의 경로를 찾으실 수 있습니다. 우리는 \"Method "
"in Node\"라 부르는 두 번째 줄에 관심을 둘 겁니다. 이것은 ``GUI`` 노드에서 시"
"그널이 방출될 때 호출되는 메서드 입니다. 이 메서드는 시그널과 함께 전송된 값"
"을 받아 처리합니다. 오른쪽을 보시면, \"함수 만들기\" 버튼이 기본적으로 켜진 "
"채로 있습니다. 창 아래의 연결 버튼을 누릅니다. Godot는 ``GUI`` 노드 안에 메서"
"드를 만듭니다. 스크립트 편집기를 열면 새로운 ``_on_Player_health_changed`` 함"
"수가 안에 있습니다."

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:265
msgid ""
"When you connect nodes from the editor, Godot generates a method name with "
"the following pattern: ``_on_EmitterName_signal_name``. If you wrote the "
"method already, the \"Make Function\" option will keep it. You may replace "
"the name with anything you'd like."
msgstr ""
"편집기에서 노드를 연결할 때, Godot는 메서드 이름을 다음과 같은 방식으로 만듭"
"니다: ``_on_방출하는노드이름_시그널_이름``. 이미 메서드를 적었다면, \"함수 만"
"들기\" 설정은 유지될 것입니다. 당신이 원하는 어떤 이름으로도 바꿀 수 있습니"
"다."

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:272
msgid "Godot writes the callback method for you and takes you to it"
msgstr "Godot는 콜백 메서드를 적어 사용자에게 전달합니다"

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:274
msgid ""
"Inside the parentheses after the function name, add a ``player_health`` "
"argument. When the player emits the ``health_changed`` signal, it will send "
"its current ``health`` alongside it. Your code should look like:"
msgstr ""
"함수 이름 다음의 괄호 안에, ``player_health`` 인수를 추가하세요. 플레이어가 "
"``health_changed`` 시그널을 방출할 때, 현재 ``health``\\ 와 함께 보내질 것입"
"니다. 코드는 다음과 같아야 합니다:"

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:292
msgid ""
"The engine does not convert PascalCase to snake_case, for C# examples we'll "
"be using PascalCase for method names & camelCase for method parameters, "
"which follows the official `C# naming conventions. <https://docs.microsoft."
"com/en-us/dotnet/standard/design-guidelines/capitalization-conventions>`_"
msgstr ""
"엔진은 파스칼 표기법(PascalCase)을 스네이크 표기법(snake_case)으로 변환하지 "
"않기 때문에, C# 예제에서 메서드 이름에는 파스칼 표기법, 메서드 매개 변수에는 "
"카멜 표기법(camelCase)을 사용할 것입니다, 공식 `C# 명명 규칙. <https://docs."
"microsoft.com/en-us/dotnet/standard/design-guidelines/capitalization-"
"conventions>`_에 따르는 것입니다"

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:299
msgid ""
"In Player.gd, when the Player emits the health\\_changed signal, it also "
"sends its health value"
msgstr ""
"Player.gd에서, Player가 health\\_changed 시그널을 방출할 때, 체력 값도 보냅니"
"다"

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:302
msgid ""
"Inside ``_on_Player_health_changed``, let's call a second function called "
"``update_health`` and pass it the ``player_health`` variable."
msgstr ""
"``_on_Player_health_changed`` 안에서, ``update_health`` 라는 두 번째 함수를 "
"호출하고 거기에 ``player_health`` 변수를 전달하게 해봅시다."

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:307
msgid ""
"We could directly update the health value on `LifeBar` and `Number`. There "
"are two reasons to use this method instead:"
msgstr ""
"우리는 체력 값을 `LifeBar` 와 `Number` 에 직접 업데이트할 수 있습니다. 메서드"
"를 대신 사용하는 이유는 두 가지 입니다:"

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:309
msgid ""
"The name makes it clear for our future selves and teammates that when the "
"player took damage, we update the health count on the GUI"
msgstr ""
"플레이어가 피해를 입을 때, 이름은 체력 카운터를 업데이트 해야 하는 미래의 나"
"와 팀원에게 그것을 명확하게 해줍니다"

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:310
msgid "We will reuse this method a bit later"
msgstr "이 메서드를 나중에 다시 사용할 것입니다"

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:312
msgid ""
"Create a new ``update_health`` method below ``_on_Player_health_changed``. "
"It takes a new\\_value as its only argument:"
msgstr ""
"새로운 ``update_health`` 메서드를 ``_on_Player_health_changed`` 아래에 만듭니"
"다.  new\\_value를 유일한 인수로 갖습니다:"

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:327
msgid "This method needs to:"
msgstr "이 메서드에는 필요합니다:"

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:329
msgid ""
"set the ``Number`` node's ``text`` to ``new_value`` converted to a string"
msgstr ""
"``Number`` 노드의 ``text`` 를 문자열로 변환된 ``new_value`` 로 설정하는 것"

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:331
msgid "set the ``TextureProgress``'s ``value`` to ``new_value``"
msgstr "``TextureProgress`` 의 ``value`` 를 ``new_value`` 로 설정하는 것"

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:350
msgid ""
"``str`` is a built-in function that converts about any value to text. "
"``Number``'s ``text`` property requires a string, so we can't assign it to "
"``new_value`` directly"
msgstr ""
"``str``\\ 은 내장 함수로 어느 값을 문자로 변환합니다. ``Number``\\ 의 "
"``text`` 속성은 문자열을 요구하기 때문에 ``new_value``\\ 를 직접 지정할 수 없"
"습니다"

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:354
#, fuzzy
msgid ""
"Also call ``update_health`` at the end of the ``_ready`` function to "
"initialize the ``Number`` node's ``text`` with the right value at the start "
"of the game. Press :kbd:`F5` to test the game: the life bar updates with "
"every attack!"
msgstr ""
"또한 ``update_health`` 를 ``_ready`` 함수의 마지막에 호출하여 게임의 시작에"
"서 ``Number`` 노드의 ``text``  를 적당한 값으로 초기화합니다. F5를 누르면 게"
"임을 테스트합니다: 체력 막대가 매 공격마다 업데이트 됩니다!"

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:361
msgid ""
"Both the Number node and the TextureProgress update when the Player takes a "
"hit"
msgstr ""
"Player가 피해를 입을 때 Number 노드와 TextureProgress가 둘 다 업데이트합니다"

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:365
msgid "Animate the loss of life with the Tween node"
msgstr "Tween 노드로 체력이 감소하는 것을 애니메이트하기"

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:367
msgid ""
"Our interface is functional, but it could use some animation. That's a good "
"opportunity to introduce the ``Tween`` node, an essential tool to animate "
"properties. ``Tween`` animates anything you'd like from a start to an end "
"state over a certain duration. For example, it can animate the health on the "
"``TextureProgress`` from its current level to the ``Player``'s new "
"``health`` when the character takes damage."
msgstr ""
"인터페이스는 작동하지만, 몇 가지 애니메이션을 사용할 수 있습니다. 지금이 속성"
"을 애니메이트 하는데 필수적인 도구, ``Tween`` 노드를 소개하기에 좋은 순간이네"
"요. ``Tween``\\ 은 어떤 것이든 처음부터 끝을 일정 기간 동안 애니메이트 합니"
"다. 예를 들어 캐릭터가 피해를 입을 때  ``Player``\\ 의 현재 새로운 ``health``"
"\\ 로 ``TextureProgress``\\ 에서 체력을 애니메이트 할 수 있습니다."

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:374
msgid ""
"The ``GUI`` scene already contains a ``Tween`` child node stored in the "
"``tween`` variable. Let's now use it. We have to make some changes to "
"``update_health``."
msgstr ""
"``GUI`` 씬에는 이미 ``tween`` 변수가 저장된 ``Tween`` 노드 갖고 있습니다. 이"
"제 사용할 때입니다. 우리는 ``update_health`` 에 몇 가지 변화를 주어야 합니다."

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:378
msgid ""
"We will use the ``Tween`` node's ``interpolate_property`` method. It takes "
"seven arguments:"
msgstr ""
"``Tween`` 노드의 ``interpolate_property`` 메서드를 사용할 겁니다. 그것은 일"
"곱 개의 인수들을 가집니다:"

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:381
msgid "A reference to the node who owns the property to animate"
msgstr "애니메이트 할 속성을 소유한 노드에 대한 참조"

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:382
msgid "The property's identifier as a string"
msgstr "속성 식별자의 문자열"

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:383
msgid "The starting value"
msgstr "시작 값"

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:384
msgid "The end value"
msgstr "끝 값"

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:385
msgid "The animation's duration in seconds"
msgstr "애니메이션의 지속 시간 (초)"

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:386
msgid "The type of the transition"
msgstr "전환(transition) 유형"

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:387
msgid "The easing to use in combination with the equation."
msgstr "방정식과 함께 사용하는 완화."

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:389
msgid ""
"The last two arguments combined correspond to an easing equation. This "
"controls how the value evolves from the start to the end point."
msgstr ""
"마지막 두 인수들은 완화 식(easing equation)으로 동등하게 묶입니다. 이것은 시"
"작에서 끝까지 값이 얼마나 증가하는 지를 제어합니다."

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:393
msgid ""
"Click the script icon next to the ``GUI`` node to open it again. The "
"``Number`` node needs text to update itself, and the ``Bar`` needs a float "
"or an integer. We can use ``interpolate_property`` to animate a number, but "
"not to animate text directly. We're going to use it to animate a new ``GUI`` "
"variable named ``animated_health``."
msgstr ""
"``GUI`` 노드 옆에 스크립트 아이콘을 클릭해서 다시 엽니다. ``Number`` 노드는 "
"스스로 업데이트하는 텍스트가 필요합니다, 그리고 ``Bar`` 는 실수 또는 정수가 "
"필요합니다. 우리는 ``interpolate_property`` 를 사용해서 숫자를 애니메이트 할 "
"것입니다, 텍스트에 직접 하진 않을 겁니다. 우리는 이것을 ``animated_health`` "
"라는 새로운 ``GUI`` 변수를 애니메이트 하는데 이용할 것입니다."

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:399
msgid ""
"At the top of the script, define a new variable, name it "
"``animated_health``, and set its value to 0. Navigate back to the "
"``update_health`` method and clear its content. Let's animate the "
"``animated_health`` value. Call the ``Tween`` node's "
"``interpolate_property`` method:"
msgstr ""
"스크립트 맨 위에서, 새 변수를 정의합니다, 이름은 ``animated_health`` 입니다, "
"그리고 값을 0으로 설정합니다. 다시 ``update_health`` 메서드로 돌아와서 내용물"
"을 지웁니다. ``animated_health`` 값을 애니메이트 해 봅시다. ``Tween`` 노드의 "
"``interpolate_property`` 메서드를 호출합니다:"

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:421
msgid "Let's break down the call:"
msgstr "호출한 것을 파헤쳐 봅시다:"

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:427
msgid ""
"We target ``animated_health`` on ``self``, that is to say the ``GUI`` node. "
"``Tween``'s interpolate\\_property takes the property's name as a string. "
"That's why we write it as ``\"animated_health\"``."
msgstr ""
"``animated_health`` 를, ``self`` 에, 즉 ``GUI`` 노드를 타깃으로 합니다. "
"``Tween`` 의 interpolate\\_property는 속성의 이름을 문자열로 가져옵니다. 이것"
"이 우리가 ``\"animated_health\"`` 로 쓴 이유입니다."

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:435
msgid ""
"The starting point is the current value the bar's at. We still have to code "
"this part, but it's going to be ``animated_health``. The end point of the "
"animation is the ``Player``'s ``health`` after the ``health_changed``: "
"that's ``new_value``. And ``0.6`` is the animation's duration in seconds."
msgstr ""
"시작 점은 막대의 현재 값입니다. 이 부분도 코딩을 해야 하지만, 곧 "
"``animated_health`` 가 될 것입니다. 애니메이션의 끝 점은 ``health_changed` 이"
"후의 ``Player`` 의 ``health`` 가 됩니다: 즉, ``new_value`` 입니다. 그리고 "
"``0.6`` 은 애니메이션의 지속 시간입니다."

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:445
msgid ""
"The last two arguments are constants from the ``Tween`` class. "
"``TRANS_LINEAR`` means the animation should be linear. ``EASE_IN`` doesn't "
"do anything with a linear transition, but we must provide this last argument "
"or we'll get an error."
msgstr ""
"마지막 두 인수는 ``Tween`` 클래스의 상수입니다. ``TRANS_LINEAR`` 는 애니메이"
"션이 선형적인 것을 의미합니다. ``EASE_IN`` 선형 변환에선 아무것도 하지 않지"
"만, 꼭 이 마지막 인수를 채워야 에러가 나지 않습니다."

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:450
msgid ""
"The animation will not play until we activated the ``Tween`` node with "
"``tween.start()``. We only have to do this once if the node is not active. "
"Add this code after the last line:"
msgstr ""
"애니메이션은 ``Tween`` 노드가 ``tween.start()`` 로 활성화되기 전 까지 재생되"
"지 않습니다. 노드가 활성화되어있지 않으면 이 작업만 하면 됩니다. 이 코드를 마"
"지막 줄 이후에 추가하세요:"

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:469
msgid ""
"Although we could animate the `health` property on the `Player`, we "
"shouldn't. Characters should lose life instantly when they get hit. It makes "
"it a lot easier to manage their state, like to know when one died. You "
"always want to store animations in a separate data container or node. The "
"`tween` node is perfect for code-controlled animations. For hand-made "
"animations, check out `AnimationPlayer`."
msgstr ""
"비록 `Player` 에서 `health` 속성을 애니메이트 할 수 있을지라도, 그렇게 해서"
"는 안 됩니다. 캐릭터는 피해를 입었을 때 즉시 체력이 줄어야 합니다. 한 명이 언"
"제 죽었는 지 알 수 있는 것처럼, 이 방식이 그들의 상태를 다루기에 훨씬 더 쉽습"
"니다. 당신은 애니메이션이 항상 분리된 데이터 컨테이너나 노드에 있기를 원합니"
"다. `tween` 노드는 코드로 제어되는 애니메이션에 완벽합니다. 수제 애니메이션"
"은, `AnimationPlayer` 를 확인하세요."

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:472
msgid "Assign the animated\\_health to the LifeBar"
msgstr "animated\\_health를 LifeBar에 지정하기"

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:474
msgid ""
"Now the ``animated_health`` variable animates but we don't update the actual "
"``Bar`` and ``Number`` nodes anymore. Let's fix this."
msgstr ""
"이제 ``animated_health`` 변수가 애니메이트 하지만 실제 ``Bar`` 와 ``Number`` "
"노드는 더 이상 업데이트 할 수 없습니다. 이것을 고칩시다."

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:477
msgid "So far, the update\\_health method looks like this:"
msgstr "지금까지, update\\_health 메서드는 이렇게 보입니다:"

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:501
msgid ""
"In this specific case, because ``number_label`` takes text, we need to use "
"the ``_process`` method to animate it. Let's now update the ``Number`` and "
"``TextureProgress`` nodes like before, inside of ``_process``:"
msgstr ""
"특정한 경우에서, ``number_label`` 이 텍스트를 차지하기 때문에, 우리는 "
"``_process`` 메서드로 그것을 애니메이트 해야 합니다. 이제 ``_process` 안에 "
"``Number`` 와 ``TextureProgress`` 노드를 전과 같이 업데이트 합시다:"

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:523
msgid ""
"`number_label` and `bar` are variables that store references to the `Number` "
"and `TextureProgress` nodes."
msgstr ""
"`number_label` 과 `bar` 는 `Number` 와 `TextureProgress` 노드에 참조로 저장"
"된 변수들입니다."

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:525
msgid ""
"Play the game to see the bar animate smoothly. But the text displays decimal "
"number and looks like a mess. And considering the style of the game, it'd be "
"nice for the life bar to animate in a choppier fashion."
msgstr ""
"게임을 실행하시면 막대가 부드럽게 애니메이트 하는 것을 보실 수 있습니다. 하지"
"만 텍스트는 소수 숫자로 보여지고 난잡해 보입니다. 그리고 게임의 스타일을 고려"
"해서, 체력 막대가 더 멋진 방식으로 움직이면 좋을 것입니다."

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:531
msgid "The animation is smooth, but the number is broken"
msgstr "애니메이션은 부드럽지만 숫자는 망가졌습니다"

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:533
msgid ""
"We can fix both problems by rounding out ``animated_health``. Use a local "
"variable named ``round_value`` to store the rounded ``animated_health``. "
"Then assign it to ``number_label.text`` and ``bar.value``:"
msgstr ""
"``animated_health`` 를 반올림해서 이 문제들을 동시에 해결할 수 있습니다. "
"``round_value`` 라는 지역 변수를 사용해서 반올림 된 ``animated_health`` 를 저"
"장합니다. 그런 뒤 그것을 ``number_label.text`` 와 ``bar.value`` 에 지정합니"
"다:"

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:555
msgid "Try the game again to see a nice blocky animation."
msgstr "게임을 다시 실행하면 멋진 블록 애니메이션을 볼 수 있습니다."

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:559
msgid "By rounding out animated\\_health, we kill two birds with one stone"
msgstr "animated\\_health를 반올림 해서 일석이조의 효과를 냈습니다"

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:563
msgid ""
"Every time the player takes a hit, the ``GUI`` calls "
"``_on_Player_health_changed``, which in turn calls ``update_health``. This "
"updates the animation and the ``number_label`` and ``bar`` follow in "
"``_process``. The animated life bar that shows the health going down "
"gradually is a trick. It makes the GUI feel alive. If the ``Player`` takes 3 "
"damage, it happens in an instant."
msgstr ""
"매 시간 플레이어가 피해를 입을 때, ``GUI`` 는 ``_on_Player_health_changed`` "
"를 호출합니다, 그리고 그것은 ``update_health`` 를 호출합니다. 이것은 애니메이"
"션을 업데이트 하고 ``number_label`` 과 ``bar`` 가 ``_process`` 에서 따라옵니"
"다. 체력이 점차 줄어드는 애니메이트 된 체력 막대는 트릭입니다. 그것은 GUI가 "
"살아있는 것처럼 느끼도록 만듭니다. ``Player`` 가 3 데미지를 입으면, 즉각적으"
"로 발생합니다."

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:571
msgid "Fade the bar when the Player dies"
msgstr "Player가 죽을 때 막대가 사라지게 하기"

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:573
msgid ""
"When the green character dies, it plays a death animation and fades out. At "
"this point, we shouldn't show the interface anymore. Let's fade the bar as "
"well when the character died. We will reuse the same ``Tween`` node as it "
"manages multiple animations in parallel for us."
msgstr ""
"초록색 캐릭터가 죽을 때, 죽음 애니메이션을 재생하고 사라집니다. 이 점에서, 우"
"리는 인터페이스를 더 이상 표시해서는 안됩니다. 캐릭터가 죽을 때 처럼 막대를 "
"사라지게 해봅시다. 우리는 ``Tween`` 노드가 여러 애니메이션을 동시에 관리하므"
"로 같은 노드를 다시 사용할 것입니다."

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:578
msgid ""
"First, the ``GUI`` needs to connect to the ``Player``'s ``died`` signal to "
"know when it died. Press :kbd:`F1` to jump back to the 2D Workspace. Select "
"the ``Player`` node in the Scene dock and click on the Node tab next to the "
"Inspector."
msgstr ""
"먼저, ``GUI`` 는 ``Player`` 의 ``died`` 시그널에 연결해서 언제 죽었는 지를 알"
"아야 합니다. :kbd:`F1` 키를 눌러 2D 작업 공간으로 돌아갑니다. 씬 독에서 "
"``Player`` 노드를 선택하고 인스펙터(Inspecter) 옆의 노드 탭을 클릭합니다."

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:583
msgid "Find the ``died`` signal, select it, and click the Connect button."
msgstr "``died`` 시그널을 찾아서, 선택하고, 연결하기 버튼을 누릅니다."

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:587
msgid "The signal should already have the Enemy connected to it"
msgstr "시그널에는 이미 Enemy와 연결되어 있어야 합니다"

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:589
msgid ""
"In the Connecting Signal window, connect to the ``GUI`` node again. The Path "
"to Node should be ``../../GUI`` and the Method in Node should show "
"``_on_Player_died``. Leave the Make Function option on and click Connect at "
"the bottom of the window. This will take you to the ``GUI.gd`` file in the "
"Script Workspace."
msgstr ""
"시그널 연결 창에서, ``GUI`` 노드를 다시 연결합니다. 노드 경로는 ``../../"
"GUI`` 가 되어야 하고 Method in Node는 ``_on_Player_died`` 가 되어야 합니다. "
"함수 만들기 설정을 둔 채로 창 아래 연결 버튼을 누릅니다. 이걸로 Script 작업 "
"공간에서 ``GUI.gd`` 파일로 진입하게 됩니다."

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:597
msgid "You should get these values in the Connecting Signal window"
msgstr "시그널 연결 창에서 이 값들을 받아야 합니다"

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:601
msgid ""
"You should see a pattern by now: every time the GUI needs a new piece of "
"information, we emit a new signal. Use them wisely: the more connections you "
"add, the harder they are to track."
msgstr ""
"지금부터는 패턴을 보아야 합니다: 매 순간 GUI가 새로운 정보가 필요하면, 우리"
"는 새 시그널을 방출합니다. 그들을 현명하게 사용하세요: 더 많은 연결을 추가할"
"수록, 추적하는 일은 더 어려워집니다."

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:603
msgid ""
"To animate a fade on a UI element, we have to use its ``modulate`` property. "
"``modulate`` is a ``Color`` that multiplies the colors of our textures."
msgstr ""
"UI 요소가 사라지도록 애니메이트 하기 위해, 우리는 그것의 ``modulate`` 속성을 "
"사용해야 합니다. ``modulate`` 는 ``Color`` 로 텍스처의 색상을 곱합니다."

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:609
msgid ""
"`modulate` comes from the `CanvasItem` class, All 2D and UI nodes inherit "
"from it. It lets you toggle the visibility of the node, assign a shader to "
"it, and modify it using a color with `modulate`."
msgstr ""
"`modulate` 는 `CanvasItem` 클래스에서 나옵니다. 모든 2D와 UI  노드는 여기에 "
"상속됩니다. 이것은 노드의 가시성을 켜고 끌 수 있고, 셰이더를 지정하고, "
"`modulate` 에서 색상을 사용하여 수정할 수 있습니다."

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:611
msgid ""
"``modulate`` takes a ``Color`` value with 4 channels: red, green, blue and "
"alpha. If we darken any of the first three channels it darkens the "
"interface. If we lower the alpha channel, our interface fades out."
msgstr ""
"``modulate``\\ 는 4개의 채널로 ``Color`` 값을 갖습니다: 빨강, 초록, 파랑, 그"
"리고 알파입니다. 처음 세 개의 채널들 중 하나를 어둡게 하면 그것은 인터페이스"
"에서 어두워집니다. 알파 채널을 낮추면 인터페이스는 희미해집니다."

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:615
msgid ""
"We're going to tween between two color values: from a white with an alpha of "
"``1``, that is to say at full opacity, to a pure white with an alpha value "
"of ``0``, completely transparent. Let's add two variables at the top of the "
"``_on_Player_died`` method and name them ``start_color`` and ``end_color``. "
"Use the ``Color()`` constructor to build two ``Color`` values."
msgstr ""
"우리는 두 색상 값을 tween할 것입니다: 완전한 불투명을 의미하는, 흰색이고 "
"``1`` 의 알파 값에서, 완전한 투명을 의미하는, 흰색이지만 ``0`` 의 알파 값까"
"지 입니다. 두 변수를 ``_on_Player_died`` 메서드에 추가하고 이 둘을 각각 "
"``start_color`` 과 ``end_color`` 라고 이름짓습니다. ``Color()`` 생성자"
"(constructor)를 사용해서 두 ``Color`` 값을 만듭니다."

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:637
msgid ""
"``Color(1.0, 1.0, 1.0)`` corresponds to white. The fourth argument, "
"respectively ``1.0`` and ``0.0`` in ``start_color`` and ``end_color``, is "
"the alpha channel."
msgstr ""
"``Color(1.0, 1.0, 1.0)`` 는 흰색과 같습니다. 네 번째 인수는, ``start_color`` "
"와 ``end_color`` 에서 각각 ``1.0`` 과 ``0.0`` 인, 알파 채널입니다."

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:641
msgid ""
"We then have to call the ``interpolate_property`` method of the ``Tween`` "
"node again:"
msgstr ""
"우리는 ``Tween`` 노드의 ``interpolate_property`` 메서드를 다시 호출해야 합니"
"다:"

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:654
msgid ""
"This time, we change the ``modulate`` property and have it animate from "
"``start_color`` to the ``end_color``. The duration is of one second, with a "
"linear transition. Here again, because the transition is linear, the easing "
"does not matter. Here's the complete ``_on_Player_died`` method:"
msgstr ""
"이번엔 ``modulate`` 속성을 바꾸고 그것이 ``start_color``\\ 에서 ``end_color``"
"\\ 로 애니메이트 해야 합니다. 지속 시간은 1초로 선형 전환입니다. 다시 말하지"
"만, 전환이 선형이기 때문에 완화는 아무 문제가 없습니다. 이것이 완전한 "
"``_on_Player_died`` 메서드 입니다:"

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:679
msgid "And that is it. You may now play the game to see the final result!"
msgstr "그리고 됬습니다. 이제 게임을 실행해서 최종 결과물을 봅시다!"

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:683
msgid "The final result. Congratulations for getting there!"
msgstr "최종 결과물. 여기까지 오신 것에 축하합니다!"

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:687
msgid ""
"Using the exact same techniques, you can change the color of the bar when "
"the Player gets poisoned, turn the bar red when its health drops low, shake "
"the UI when they take a critical hit... the principle is the same: emit a "
"signal to forward the information from the `Player` to the `GUI` and let the "
"`GUI` process it."
msgstr ""
"똑같은 기법을 사용해서, Player가 독에 걸렸을 때 막대의 색상을 바꿀 수 있고, "
"체력이 천천히 줄어들 때 막대가 붉게 바뀌거나, 크리티컬 피해를 입을 때 UI가 흔"
"들리게 하거나... 원리는 같습니다: `Player` 의 정보를 `GUI` 로 보내고 `GUI` "
"가 이를 처리하는 시그널을 방출합니다."

#: ../../docs/getting_started/step_by_step/splash_screen.rst:4
msgid "Splash screen"
msgstr "스플래시 화면"

#: ../../docs/getting_started/step_by_step/splash_screen.rst:7
msgid "Tutorial"
msgstr "튜토리얼"

#: ../../docs/getting_started/step_by_step/splash_screen.rst:9
msgid ""
"This is a simple tutorial to establish the basic idea of how the GUI "
"subsystem works. The goal is to create a simple, static splash screen."
msgstr ""
"이것은 어떻게 GUI 서브 시스템이 작동하는 지에 대한 기본 생각을 세우는 간단한 "
"튜토리얼입니다. 목표는 간단한, 정적인 스플래시 화면을 만드는 것입니다."

#: ../../docs/getting_started/step_by_step/splash_screen.rst:15
msgid ""
"Following is a file with the assets that will be used. The extracted files "
"can be placed directly in your project folder and Godot will import them "
"automatically."
msgstr ""
"다음은 우리가 사용할 파일과 애셋입니다. 추출된 파일을 직접 프로젝트 폴더에 놓"
"으면 Godot가 자동으로 가져올 것입니다."

#: ../../docs/getting_started/step_by_step/splash_screen.rst:18
msgid ":download:`robisplash_assets.zip <files/robisplash_assets.zip>`."
msgstr ":download:`robisplash_assets.zip <files/robisplash_assets.zip>`."

#: ../../docs/getting_started/step_by_step/splash_screen.rst:21
#: ../../docs/tutorials/3d/reflection_probes.rst:21
#: ../../docs/tutorials/3d/gi_probes.rst:36
#: ../../docs/tutorials/3d/baked_lightmaps.rst:40
#: ../../docs/tutorials/shading/your_first_shader/your_first_spatial_shader.rst:53
msgid "Setting up"
msgstr "설정하기"

#: ../../docs/getting_started/step_by_step/splash_screen.rst:23
msgid ""
"Set the display resolution to 800x450 in Project Settings, and set up a new "
"scene like this:"
msgstr ""
"프로젝트 설정에서 화면 비율을 800X450으로 설정하세요, 그리고 새 씬을 다음과 "
"같이 설정하세요:"

#: ../../docs/getting_started/step_by_step/splash_screen.rst:27
msgid ""
"The nodes \"background\" and \"logo\" are of :ref:`TextureRect "
"<class_TextureRect>` type. To display an image, drag the corresponding asset "
"to the texture property."
msgstr ""
"\"background\"와 \"logo\" 노드는 :ref:`TextureRect <class_TextureRect>` 타입 "
"입니다. 이미지를 보이기 위해, 해당하는 애셋을 텍스처 속성으로 끌어옵니다."

#: ../../docs/getting_started/step_by_step/splash_screen.rst:32
msgid ""
"The node \"start\" is a :ref:`TextureButton <class_TextureButton>`. It takes "
"several images for different states, but only the normal and pressed will be "
"supplied in this example:"
msgstr ""
"\"start\" 노드는 :ref:`TextureButton <class_TextureButton>` 입니다. 각기 다"
"른 상태에 따라 여러 이미지를 가질 수 있지만, 이 예제에서는 normal과 pressed"
"만 갖습니다:"

#: ../../docs/getting_started/step_by_step/splash_screen.rst:38
msgid "Finally, the node \"copyright\" is a :ref:`Label <class_Label>`."
msgstr "마지막으로 \"copyright\" 노드는 :ref:`Label <class_Label>` 입니다."

#: ../../docs/getting_started/step_by_step/splash_screen.rst:40
msgid "Your final scene should look something like this."
msgstr "당신의 최종 씬은 이렇게 보여야 할 것입니다."

#: ../../docs/getting_started/step_by_step/splash_screen.rst:44
msgid ""
"Go ahead and run the project.  If you're satisfied with the results, "
"continue to the next tutorial."
msgstr ""
"프로젝트를 실행합시다. 결과물에 만족한다면, 다음 튜토리얼을 계속 진행합니다."

#: ../../docs/getting_started/step_by_step/animations.rst:4
msgid "Animations"
msgstr "애니메이션(Animations)"

#: ../../docs/getting_started/step_by_step/animations.rst:9
msgid "Godot's animation system is extremely powerful and flexible."
msgstr "Godot의 애니메이션 시스템은 매우 강력하고 유연합니다."

#: ../../docs/getting_started/step_by_step/animations.rst:11
msgid ""
"To begin, let's use the scene from the previous tutorial (:ref:"
"`doc_splash_screen`). The goal is to add a \"fade-in\" animation to the "
"splash image. Here's a copy just in case: :download:`robisplash.zip <files/"
"robisplash.zip>`."
msgstr ""
"시작하기 위해, 우리는 지난 튜토리얼의 씬을 사용할 것입니다 (:ref:"
"`doc_splash_screen`). 목표는 \"희미해지는\" 애니메이션을 스플래시 이미지에 추"
"가하는 것입니다. 혹시나 해서 여기 복사본이 있습니다:  :download:`robisplash."
"zip <files/robisplash.zip>`."

#: ../../docs/getting_started/step_by_step/animations.rst:16
msgid "Add an animation player"
msgstr "애니메이션 플레이어 추가하기"

#: ../../docs/getting_started/step_by_step/animations.rst:18
msgid ""
"First of all, add an :ref:`AnimationPlayer <class_AnimationPlayer>` node to "
"the scene as a child of \"background\" (the root node):"
msgstr ""
"먼저,  :ref:`AnimationPlayer <class_AnimationPlayer>` 노드를 \"background"
"\" (루트 노드) 의 자식으로 추가합니다:"

#: ../../docs/getting_started/step_by_step/animations.rst:23
msgid ""
"When a node of this type is selected, the animation editor panel will appear:"
msgstr "이 타입의 노드가 선택될 때, 애니메이션 편집기 패널이 나타날 것입니다:"

#: ../../docs/getting_started/step_by_step/animations.rst:28
msgid "The animation editor panel stays visible until manually hidden."
msgstr "애니메이션 편집기 패널은 수동으로 숨기지 않는 이상 표시됩니다."

#: ../../docs/getting_started/step_by_step/animations.rst:31
msgid "Creating the animation"
msgstr "애니메이션 만들기"

#: ../../docs/getting_started/step_by_step/animations.rst:33
msgid ""
"It's time to create a new animation! Press the Animation button then select "
"new from the menu. Name the animation \"intro\" when the dialog appears."
msgstr ""
"새 애니메이션을 만들 시간입니다! 애니메이션 버튼을 누르고 메뉴에서 새 파일을 "
"선택합니다. 대화 상자가 나오면 애니메이션 이름을 \"intro\" 라고 적습니다."

#: ../../docs/getting_started/step_by_step/animations.rst:40
msgid ""
"Now that we have an animation, the property editor enters \"animation editing"
"\" mode. In this mode, a key icon appears next to every property of the "
"property editor. In Godot, any property of an object can be animated:"
msgstr ""
"이제 애니메이션이 있으므로 속성 편집기는 \"애니메이션 편집\" 모드로 들어갑니"
"다. 이 모드에서, 속성 편집기의 모든 속성에 키 아이콘이 나타납니다. Godot에서"
"는 대상의 어떤 속성도 애니메이트 할 수 있습니다:"

#: ../../docs/getting_started/step_by_step/animations.rst:48
msgid "Editing the animation"
msgstr "애니메이션 편집하기"

#: ../../docs/getting_started/step_by_step/animations.rst:50
msgid "The logo will appear from the top of the screen."
msgstr "로고는 화면의 위에서 나타날 것입니다."

#: ../../docs/getting_started/step_by_step/animations.rst:52
msgid ""
"With the animation editor panel open, select the \"logo\" node and set the "
"\"Rect / Position\" property to ``(118, -400)`` and press the key button "
"next to the property to add a keyframe:"
msgstr ""
"애니메이션 패널을 열고, \"logo\" 노드를 선택하고 \"Rect / Position\" 속성을 "
"``(118, -400)``\\ 으로 설정합니다, 그리고 속성 옆의 키 버튼을 눌러 키프레임"
"을 추가합니다:"

#: ../../docs/getting_started/step_by_step/animations.rst:58
msgid "When the dialog appears, confirm that you are creating a new track."
msgstr "대화 상자가 나타나면, 새 트랙을 만들겠다고 확인합니다."

#: ../../docs/getting_started/step_by_step/animations.rst:60
msgid "The keyframe will be added in the animation player editor:"
msgstr "키프레임이 애니메이션 플레이어 편집기에 나타날 것입니다:"

#: ../../docs/getting_started/step_by_step/animations.rst:64
msgid "Move the editor cursor forward in time by clicking here:"
msgstr "여기를 클릭해서 편집기 커서를 앞으로 이동합니다:"

#: ../../docs/getting_started/step_by_step/animations.rst:68
msgid ""
"Change the logo position to ``(118, 0)`` and add a keyframe again. With two "
"keyframes with different values, the animation happens."
msgstr ""
"로고 위치를 ``(118, 0)``\\ 으로 바꾸고 다시 키프레임을 추가합니다. 다른 값을 "
"갖는 두 키프레임으로 애니메이션이 발생합니다."

#: ../../docs/getting_started/step_by_step/animations.rst:73
#, fuzzy
msgid ""
"Pressing \"Play selected animation from start\" button on the animation "
"panel (or :kbd:`Shift + D` on keyboard) will make the logo descend."
msgstr ""
"애니메이션 패널에서 \"선택된 애니메이션을 처음부터 재생. (Shift+D)\" 를 누르"
"면 로고가 내려갈 것입니다."

#: ../../docs/getting_started/step_by_step/animations.rst:78
msgid ""
"Click the \"Autoplay on Load\" button to set the animation to start "
"automatically when the scene starts."
msgstr ""
"\"로드 시 자동 플레이\" 버튼을 눌러 씬이 시작할 때 애니메이션이 자동으로 시작"
"하도록 설정합니다."

#: ../../docs/getting_started/step_by_step/animations.rst:83
msgid ""
"And finally, when running the scene, the animation should look like this:"
msgstr ""
"그리고 마침내, 씬을 실행시키면, 애니메이션은 이렇게 보여야 할 것입니다:"

#: ../../docs/getting_started/step_by_step/resources.rst:4
#: ../../docs/tutorials/threads/thread_safe_apis.rst:58
#: ../../docs/development/file_formats/tscn.rst:257
#: ../../docs/community/tutorials.rst:51
msgid "Resources"
msgstr "리소스"

#: ../../docs/getting_started/step_by_step/resources.rst:7
msgid "Nodes and resources"
msgstr "노드와 리소스"

#: ../../docs/getting_started/step_by_step/resources.rst:9
msgid ""
"Up to this tutorial, we focused on the :ref:`Node <class_Node>` class in "
"Godot as that's the one you use to code behavior and most of the engine's "
"features rely on it. There is another datatype that is just as important: :"
"ref:`Resource <class_Resource>`."
msgstr ""
"지금까지, :ref:`Node <class_Node>` 클래스는  Godot에서 가장 중요한 데이터 형"
"식으로 엔진 내 대부분의 기능과 작동이 이것으로 이루어 졌다는 것에 초점을 두었"
"습니다. 이와 똑같이 중요한 데이터 형식이 있습니다: :ref:`Resource "
"<class_Resource>` 입니다."

#: ../../docs/getting_started/step_by_step/resources.rst:15
msgid ""
"*Nodes* give you functionality: they draw sprites, 3D models, simulate "
"physics, arrange user interfaces, etc. **Resources** are **data "
"containers**. They don't do anything on their own: instead, nodes use the "
"data contained in resources."
msgstr ""
"*노드*\\ 는 다음과 같은 기능을 제공합니다: 스프라이트를 그려주고 3D 모델링을 "
"해주며 물리 시뮬레이션을 해주고, 유저 인터페이스 정리 등을 해줍니다.\n"
"**리소스**\\ 는 **데이터 컨테이너**\\ 입니다. 리소스 그 자체로는 아무 일도 하"
"지 않습니다: 대신에 노드가 리소스에 포함되어 있는 데이터를 사용합니다."

#: ../../docs/getting_started/step_by_step/resources.rst:19
msgid ""
"Anything Godot saves or loads from disk is a resource. Be it a scene (a ``."
"tscn`` or an ``.scn`` file), an image, a script... Here are some "
"``Resource`` examples: :ref:`Texture <class_Texture>`, :ref:`Script "
"<class_Script>`, :ref:`Mesh <class_Mesh>`, :ref:`Animation "
"<class_Animation>`, :ref:`AudioStream <class_AudioStream>`, :ref:`Font "
"<class_Font>`, :ref:`Translation <class_Translation>`."
msgstr ""
"Godot에서 디스크로 저장하고 디스크에서 불러오는 모든 것은 리소스입니다. 그것"
"이 씬 (``.tscn`` 혹은 ``.scn`` 파일), 이미지, 스크립트 등이 될 수 있죠. 몇 가"
"지 ``리소스`` 예제를 들어보겠습니다: :ref:`Texture <class_Texture>`, :ref:"
"`Script <class_Script>`, :ref:`Mesh <class_Mesh>`, :ref:`Animation "
"<class_Animation>`, :ref:`AudioStream <class_AudioStream>`, :ref:`Font "
"<class_Font>`, :ref:`Translation <class_Translation>`."

#: ../../docs/getting_started/step_by_step/resources.rst:26
msgid ""
"When the engine loads a resource from disk, **it only loads it once**. If a "
"copy of that resource is already in memory, trying to load the resource "
"again will return the same copy every time. As resources only contain data, "
"there is no need to duplicate them."
msgstr ""
"리소스가 디스크에서 불러올 때, **항상 한번만 불러옵니다**. 즉, 메모리에서 이"
"미 불러온 리소스의 복사본이 있다면, 다시 리소스를 불러 오려고 해도 같은 복사"
"본을 계속해서 반환될 것입니다. 리소스는 오직 데이터 컨테이너로 복사할 필요가 "
"없습니다."

#: ../../docs/getting_started/step_by_step/resources.rst:31
msgid ""
"Every object, be it a Node or a Resource, can export properties. There are "
"many types of Properties, like String, integer, Vector2, etc., and any of "
"these types can become a resource. This means that both nodes and resources "
"can contain resources as properties:"
msgstr ""
"노드가 될 수 있는 모든 대상은 속성을 내보낼 수 있습니다. 속성은 문자열, 정"
"수, Vector2, 등과 같은 많은 타입이 될 수 있고, 그 유형들 중 하나가 리소스가 "
"될 수 있습니다. 이는 노드와 리소스가 모두 리소스를 속성으로 가질 수 있다는 것"
"을 의미합니다:"

#: ../../docs/getting_started/step_by_step/resources.rst:39
msgid "External vs built-in"
msgstr "외부(External) vs 내장(built-in)"

#: ../../docs/getting_started/step_by_step/resources.rst:41
msgid "There are two ways to save resources. They can be:"
msgstr "리소스를 저장하는 두 가지 방법이 있습니다. 이렇게 될 수 있습니다:"

#: ../../docs/getting_started/step_by_step/resources.rst:43
msgid "**External** to a scene, saved on the disk as individual files."
msgstr "씬의 **외부**에 개별 파일로 저장."

#: ../../docs/getting_started/step_by_step/resources.rst:44
msgid ""
"**Built-in**, saved inside the ``.tscn`` or the ``.scn`` file they're "
"attached to."
msgstr "``.tscn``\\ 이나 ``.scn`` 파일 안에 **내장**\\ 된 채로 저장."

#: ../../docs/getting_started/step_by_step/resources.rst:46
msgid ""
"To be more specific, here's a :ref:`Texture <class_Texture>` in a :ref:"
"`Sprite <class_Sprite>` node:"
msgstr ""
"보다 구체적으로는, :ref:`Sprite <class_Sprite>` 노드의 :ref:`Texture "
"<class_Texture>` 가 있습니다:"

#: ../../docs/getting_started/step_by_step/resources.rst:51
msgid ""
"Clicking the resource preview allows us to view and edit the resource's "
"properties."
msgstr "리소스 미리보기를 클릭해서 리소스를 보고 속성을 편집합니다."

#: ../../docs/getting_started/step_by_step/resources.rst:55
msgid ""
"The path property tells us where the resource comes from. In this case, it "
"comes from a PNG image called ``robi.png``. When the resource comes from a "
"file like this, it is an external resource. If you erase the path or this "
"path is empty, it becomes a built-in resource."
msgstr ""
"경로 속성은 리소스가 어디에서 오는 지를 알려줍니다. 이 경우에 리소스는  "
"``robi.png``\\ 라 부르는 PNG 이미지에서 왔습니다. 리소스가 이와 같은 파일에"
"서 올 때, 그것은 외부 리소스 입니다. 경로를 지우거나 경로가 비어있다면, 그것"
"은 내장 리소스가 됩니다."

#: ../../docs/getting_started/step_by_step/resources.rst:60
msgid ""
"The switch between built-in and external resources happens when you save the "
"scene. In the example above, if you erase the path ``\"res://robi.png\"`` "
"and save, Godot will save the image inside the ``.tscn`` scene file."
msgstr ""
"내장 리소스와 외부 리소스 간의 전환은 씬을 저장할 때 발생합니다. 위의 예시에"
"서 경로 ``\"res://robi.png\"``\\ 를 지우고 저장한다면, Godot는 ``.tscn`` 씬 "
"파일 안에 이미지를 저장할 것입니다."

#: ../../docs/getting_started/step_by_step/resources.rst:66
msgid ""
"Even if you save a built-in resource, when you instance a scene multiple "
"times, the engine will only load one copy of it."
msgstr ""
"씬을 여러 번 인스턴스 할 때, 내장 리소스를 저장하더라도 엔진은 오직 하나의 사"
"본으로만 불러옵니다."

#: ../../docs/getting_started/step_by_step/resources.rst:70
msgid "Loading resources from code"
msgstr "코드에서 리소스를 불러오기"

#: ../../docs/getting_started/step_by_step/resources.rst:72
msgid ""
"There are two ways to load resources from code. First, you can use the "
"``load()`` function anytime:"
msgstr ""
"코드에서 리소스를 불러오는 두 가지 방법이 있습니다. 첫 번째로, 언제든지 "
"``load()`` 함수를 사용할 수 있습니다:"

#: ../../docs/getting_started/step_by_step/resources.rst:90
msgid ""
"You can also ``preload`` resources. Unlike ``load``, this function will read "
"the file from disk and load it at compile-time. As a result, you cannot call "
"preload with a variable path: you need to use a constant string."
msgstr ""
"또한 리소스를 ``미리 불러올 수(preload)`` 있습니다. ``load`` 와는 다르게, 이 "
"함수는 디스크에서 파일을 읽고 컴파일 시간에 파일을 불러옵니다. 그 결과, 변수 "
"경로로 미리 불러오기를 호출할 수 없습니다: 상수 문자열을 사용해야 합니다."

#: ../../docs/getting_started/step_by_step/resources.rst:106
msgid "Loading scenes"
msgstr "씬 불러오기"

#: ../../docs/getting_started/step_by_step/resources.rst:108
msgid ""
"Scenes are also resources, but there is a catch. Scenes saved to disk are "
"resources of type :ref:`PackedScene <class_PackedScene>`. The scene is "
"packed inside a resource."
msgstr ""
"씬 또한 리소스 입니다, 하지만 함정이 있습니다. 씬은 디스크에 :ref:"
"`PackedScene <class_PackedScene>` 타입의 리소스로 저장됩니다. 씹은 리소스 안"
"에 압축됩니다."

#: ../../docs/getting_started/step_by_step/resources.rst:112
msgid ""
"To get an instance of the scene, you have to use the :ref:`PackedScene."
"instance() <class_PackedScene_method_instance>` method."
msgstr ""
"씬의 인스턴스를 얻기 위해, :ref:`PackedScene.instance() "
"<class_PackedScene_method_instance>` 메서드를 사용해야 합니다."

#: ../../docs/getting_started/step_by_step/resources.rst:133
msgid ""
"This method creates the nodes in the scene's hierarchy, configures them, and "
"returns the root node of the scene. You can then add it as a child of any "
"other node."
msgstr ""
"이 메서드는 씬의 계층 구조에 노드들을 만들고, 그들을 구성하고, 씬의 루트 노드"
"로 반환합니다. 그런 뒤 이것을 다른 노드의 자식으로 추가할 수 있습니다."

#: ../../docs/getting_started/step_by_step/resources.rst:137
msgid ""
"The approach has several advantages. As the :ref:`PackedScene.instance() "
"<class_PackedScene_method_instance>` function is fast, you can create new "
"enemies, bullets, effects, etc. without having to load them again from disk "
"each time. Remember that, as always, images, meshes, etc. are all shared "
"between the scene instances."
msgstr ""
"이 접근은 여러 장점이 있습니다. :ref:`PackedScene.instance() "
"<class_PackedScene_method_instance>` 함수가 꽤 빠르기 때문에, 씬에 새로운 "
"적, 총알, 효과 등이 빠르게 추가되고 삭제될 수 있습니다, 각각을 디스크에서 불"
"러올 필요가 없다는 것입니다. 항상 그래왔듯, 이미지, 메시 등은 모두 씬 인스턴"
"스와 공유한다는 것을 명심하세요."

#: ../../docs/getting_started/step_by_step/resources.rst:144
msgid "Freeing resources"
msgstr "리소스 해제(Free)하기"

#: ../../docs/getting_started/step_by_step/resources.rst:146
msgid ""
"When a ``Resource`` is no longer in use, it will automatically free itself. "
"Since, in most cases, Resources are contained in Nodes, when you free a "
"node, the engine frees all the resources it owns as well if no other node "
"uses them."
msgstr ""
"``리소스``\\ 가 더 이상 사용되지 않을 때, 그것은 자동으로 스스로를 해제(Free)"
"합니다. 대부분의 경우, 리소스는 노드, 스크립트 혹은 다른 리소스에 포함되어 있"
"기 때문에, 노드를 해제할 때, 엔진은 이 노드 외에 다른 노드가 더 이상 쓰지 않"
"는 리소스도 해제합니다."

#: ../../docs/getting_started/step_by_step/resources.rst:151
msgid "Creating your own resources"
msgstr "자신의 리소스 만들기"

#: ../../docs/getting_started/step_by_step/resources.rst:153
msgid ""
"Like any Object in Godot, users can also script Resources. Resource scripts "
"inherit the ability to freely translate between object properties and "
"serialized text or binary data (/*.tres, /*.res). They also inherit the "
"reference-counting memory management from the Reference type."
msgstr ""
"Godot에서 어느 객체와 마찬가지로, 사용자는 리소스를 작성할 수 있습니다. 리소"
"스 스크립트는 객체 속성간의 자유로운 변환과 텍스트 또는 이진 데이터 (/*."
"tres, /*.res)를 직렬화하는 기능을 상속합니다. 그리고 참조 타입으로부터 참조 "
"계산 메모리 관리를 상속합니다."

#: ../../docs/getting_started/step_by_step/resources.rst:158
msgid ""
"This comes with many distinct advantages over alternative data structures, "
"such as JSON, CSV, or custom TXT files. Users can only import these assets "
"as a :ref:`Dictionary <class_Dictionary>` (JSON) or as a :ref:`File "
"<class_File>` to parse. What sets Resources apart is their inheritance of :"
"ref:`Object <class_Object>`, :ref:`Reference <class_Reference>`, and :ref:"
"`Resource <class_Resource>` features:"
msgstr ""
"JSON, CSV, 혹은 맞춤 TXT 파일로 이루어진 이것은 대체 데이터 구조를 넘어서 많"
"은 뚜렷한 이점을 제공합니다. 사용자는 이 애셋을 문법 분석하기 위해 :ref:"
"`Dictionary <class_Dictionary>` (JSON) 혹은 :ref:`File <class_File>`\\ 로만 "
"가져올 수 있습니다. 리소스는 :ref:`Object <class_Object>`, :ref:`Reference "
"<class_Reference>`, 그리고 :ref:`Resource <class_Resource>` 기능의 상속을 통"
"해 구분합니다:"

#: ../../docs/getting_started/step_by_step/resources.rst:165
msgid ""
"They can define constants, so constants from other data fields or objects "
"are not needed."
msgstr ""
"그들은 상수를 정의할 수 있기 때문에, 다른 데이터 필드나 객체의 상수는 필요하"
"지 않습니다."

#: ../../docs/getting_started/step_by_step/resources.rst:167
msgid ""
"They can define methods, including setter/getter methods for properties. "
"This allows for abstraction and encapsulation of the underlying data. If the "
"Resource script's structure needs to change, the game using the Resource "
"need not also change."
msgstr ""
"그들은 속성을 위한 setter/getter 메서드를 포함한 메서드를 정의할 수 있습니"
"다. 이것으로 기본 데이터의 추출과 캡슐화를 할 수 있습니다. 리소스 스크립트의 "
"구조가 변경되어야 하더라도, 리소스를 사용하는 게임이 변경되지 않아도 됩니다."

#: ../../docs/getting_started/step_by_step/resources.rst:169
msgid ""
"They can define signals, so Resources can trigger responses to changes in "
"the data they manage."
msgstr ""
"그들은 시그널을 정의할 수 있기 때문에, 리소스는 관리한 데이터의 변경에 대한 "
"응답을 트리거 할 수 있습니다."

#: ../../docs/getting_started/step_by_step/resources.rst:171
msgid ""
"They have defined properties, so users know 100% that their data will exist."
msgstr ""
"그들은 속성을 정의하기 때문에, 사용자는 데이터가 존재한다는 것을 100% 압니다."

#: ../../docs/getting_started/step_by_step/resources.rst:173
msgid ""
"Resource auto-serialization and deserialization is a built-in Godot Engine "
"feature. Users do not need to implement custom logic to import/export a "
"resource file's data."
msgstr ""
"리소스 자동 직렬화와 비 직렬화는 Godot 엔진 내장 기능입니다. 사용자는 리소스 "
"파일의 데이터를 가져오기/내보내기 위해 맞춤 로직을 구현할 필요가 없습니다."

#: ../../docs/getting_started/step_by_step/resources.rst:175
msgid ""
"Resources can even serialize sub-Resources recursively, meaning users can "
"design even more sophisticated data structures."
msgstr ""
"리소스는 심지어 하위 리소스를 재귀적으로 직렬화 할 수 있습니다, 즉 사용자는 "
"훨씬 더 정교한 데이터 구조를 설계할 수 있습니다."

#: ../../docs/getting_started/step_by_step/resources.rst:177
msgid ""
"Users can save Resources as version-control-friendly text files (\\*.tres). "
"Upon exporting a game, Godot serializes resource files as binary files (\\*."
"res) for increased speed and compression."
msgstr ""
"사용자는 리소스를 버전 제어 친화적 텍스트 파일 (\\*.tres)로 저장할 수 있습니"
"다. 게임을 내보낼 때, Godot는 리소스 파일을 이진 파일 (\\*.res)로 직렬화 하"
"여 속도와 압축을 증가시킵니다."

#: ../../docs/getting_started/step_by_step/resources.rst:179
msgid ""
"Godot Engine's Inspector renders and edits Resource files out-of-the-box. As "
"such, users often do not need to implement custom logic to visualize or edit "
"their data. To do so, double-click the resource file in the FileSystem dock "
"or click the folder icon in the Inspector and open the file in the dialog."
msgstr ""
"Godot 엔진의 인스펙터(Inspecter)는 리소스 파일을 즉시 렌더링하고 편집합니다. "
"이와 같이, 사용자는 종종 데이터를 시각화 하거나 편집하기 위한 맞춤 로직을 구"
"현할 필요가 없습니다. 그러기 위해서, 파일 시스템 독에서 리소스를 더블 클릭하"
"거나 인스펙터(Inspecter)에서 폴더 아이콘을 클릭하고 대화 상자에서 파일을 엽니"
"다."

#: ../../docs/getting_started/step_by_step/resources.rst:181
msgid ""
"They can extend **other** resource types besides just the base Resource."
msgstr "그들은 기본 리소스 외에도 **다른** 리소스 타입도 확장할 수 있습니다."

#: ../../docs/getting_started/step_by_step/resources.rst:185
msgid ""
"Resources and Dictionaries are both passed by reference, but only Resources "
"are reference-counted. This means that if a Dictionary is passed between "
"objects and the first object is deleted, all other objects' references to "
"the Dictionary will be invalidated. Conversely, Resources will not be freed "
"from memory until *all* the objects are deleted."
msgstr ""
"리소스와 딕셔너리는 둘 다 참조로 전달되지만, 오직 리소스만 참조 횟수로 계산됩"
"니다. 즉, 딕셔너리를 객체 사이로 전달한 뒤 첫 번째 객체를 삭제하면, 딕셔너리"
"의 모든 다른 객체 참조는 무효화될 것입니다. 반면 리소스는 *모든* 객체가 사라"
"질 때까지 메모리를 해제하지 않습니다."

#: ../../docs/getting_started/step_by_step/resources.rst:215
msgid "Godot makes it easy to create custom Resources in the Inspector."
msgstr "Godot는 인스펙터(Inspecter)에서 맞춤 리소스를 만들기 쉽게 합니다."

#: ../../docs/getting_started/step_by_step/resources.rst:217
msgid ""
"Create a plain Resource object in the Inspector. This can even be a type "
"that derives Resource, so long as your script is extending that type."
msgstr ""
"인스펙터(Inspecter)에서 순수한 리소스를 만듭니다. 스크립트가 해당 타입을 확장"
"하는 동안, 이것은 심지어 리소스를 파생하는 타입일 수 있습니다."

#: ../../docs/getting_started/step_by_step/resources.rst:218
msgid "Set the ``script`` property in the Inspector to be your script."
msgstr ""
"인스펙터(Inspecter)에서 ``script`` 속성을 당신의 스크립트로 설정합니다."

#: ../../docs/getting_started/step_by_step/resources.rst:220
msgid ""
"The Inspector will now display your Resource script's custom properties. If "
"one edits those values and saves the resource, the Inspector serializes the "
"custom properties too! To save a resource from the Inspector, click the "
"Inspector's tools menu (top right), and select \"Save\" or \"Save As...\"."
msgstr ""
"인스펙터(Inspecter)는 이제 리소스 스크립트의 맞춤 속성을 보여줍니다. 이 값을 "
"편집하고 리소스를 저장하면, 인스펙터(Inspecter)는 맞춤 속성 역시 직렬화 합니"
"다! 인스펙터(Inspecter)에서 리소스를 저장하기 위해, 인스펙터(Inspecter)의 도"
"구 메뉴 (우측 상단)를 클릭하고, \"저장하기\"나 \"다른 이름으로 저장...\"을 선"
"택합니다."

#: ../../docs/getting_started/step_by_step/resources.rst:225
msgid ""
"If the script's language supports :ref:`script classes "
"<doc_scripting_continued_class_name>`, then it streamlines the process. "
"Defining a name for your script alone will add it to the Inspector's "
"creation dialog. This will auto-add your script to the Resource object you "
"create."
msgstr ""
"스크립트의 언어가 :ref:`스크립트 클래스 <doc_scripting_continued_class_name>`"
"\\를 지원한다면, 프로세스가 간소화됩니다. 스크립트에 이름만 정의하는 것으로 "
"인스펙터(Inspecter)의 생성 대화 상자에 리소스를 추가할 것입니다. 이렇게 하면 "
"생성된 리소스 객체에 스크립트가 자동으로 추가됩니다."

#: ../../docs/getting_started/step_by_step/resources.rst:230
msgid "Let's see some examples."
msgstr "몇 가지 예를 살펴보겠습니다."

#: ../../docs/getting_started/step_by_step/resources.rst:303
msgid ""
"Resource scripts are similar to Unity's ScriptableObjects. The Inspector "
"provides built-in support for custom resources. If desired though, users can "
"even design their own Control-based tool scripts and combine them with an :"
"ref:`EditorPlugin <class_EditorPlugin>` to create custom visualizations and "
"editors for their data."
msgstr ""
"리소스 스크립트는 Unity의 ScriptableObjects(스크립트 가능한 객체)와 유사합니"
"다. 인스펙터(Inspecter)는 맞춤 리소스를 위한 내장 지원을 제공합니다. 그래도 "
"원한다면, 사용자는 자신만의 제어 기반 도구 스크립트를 설계하고 그들을 :ref:"
"`EditorPlugin <class_EditorPlugin>`\\ 으로 결합하여 맞춤 시각화와 데이터를 위"
"한 편집기를 만들 수 있습니다."

#: ../../docs/getting_started/step_by_step/resources.rst:309
msgid ""
"Unreal Engine 4's DataTables and CurveTables are also easy to recreate with "
"Resource scripts. DataTables are a String mapped to a custom struct, similar "
"to a Dictionary mapping a String to a secondary custom Resource script."
msgstr ""
"언리얼 엔진 4의 DataTables와 CurveTables 또한 리소스 스크립트로 쉽게 재생성 "
"할 수 있습니다. DataTables은 맞춤 구조체에 매핑된 문자열로, 이차적인 맞춤 리"
"소스 스크립트에 문자열을 매핑하는 딕셔너리와 유사합니다."

#: ../../docs/getting_started/step_by_step/resources.rst:345
msgid ""
"Instead of just inlining the Dictionary values, one could also, "
"alternatively..."
msgstr ""
"딕셔너리 값을 inlining(인라이닝)하는 대신, 또 다른 할 수 있는 대안으로..."

#: ../../docs/getting_started/step_by_step/resources.rst:347
msgid ""
"Import a table of values from a spreadsheet and generate these key-value "
"pairs, or..."
msgstr "스프레드 시트에서 테이블 값을 가져오고 키 값 쌍을 생성합니다, 혹은..."

#: ../../docs/getting_started/step_by_step/resources.rst:349
msgid ""
"Design a visualization within the editor and create a simple plugin that "
"adds it to the Inspector when you open these types of Resources."
msgstr ""
"편집기 내에서 시각화를 설계하고 해당 타입 리소스를 열 때 인스펙터(Inspecter)"
"에 리소스를 추가하는 간단한 플러그인을 제작합니다."

#: ../../docs/getting_started/step_by_step/resources.rst:352
msgid ""
"CurveTables are the same thing, except mapped to an Array of float values or "
"a :ref:`Curve <class_Curve>`/:ref:`Curve2D <class_Curve2D>` resource object."
msgstr ""
"두 가지 방법이 항상 호환되는 것은 아닙니다. 컨테이너는 자식을 제어하기 때문"
"에, 레이아웃 메뉴를 그것들에게 사용할 수 없습니다. 각 컨테이너는 특정한 효과"
"를 갖고 있으므로 당신은 제대로 동작하는 인터페이스를 얻기 위해 그들을 중첩"
"(nest)할지도 모릅니다. 레이아웃 접근을 사용하는 경우 자식들을 아래계층에서 위"
"계층 방향으로 작업합니다. 씬에 추가적이 컨테이너를 사용하지 않으므로 더 깨끗"
"한 계층 구조를 만들 수 있지만, 항목을 행이나 열, 격자 등으로 배열하기는 더 어"
"렵습니다."

#: ../../docs/getting_started/step_by_step/resources.rst:357
msgid ""
"Beware that resource files (\\*.tres/\\*.res) will store the path of the "
"script they use in the file. When loaded, they will fetch and load this "
"script as an extension of their type. This means that trying to assign a "
"subclass, i.e. an inner class of a script (such as using the ``class`` "
"keyword in GDScript) won't work. Godot will not serialize the custom "
"properties on the script subclass properly."
msgstr ""
"리소스 파일 (\\*.tres/\\*.res)이 파일에서 사용하는 스크립트의 경로를 저장한다"
"는 점에 주의하세요. 스크립트를 불러올 때, 이 스크립트를 가져와서 해당 타입의 "
"확장으로 불러옵니다. 다시 말해 하위 클래스, 즉 스크립트의 내부 클래스 "
"(GDScript에서 ``class`` 키워드를 사용하는 것)를 할당할 수 없습니다. Godot는 "
"스크립트 하위 클래스에 맞춤 속성을 정확하게 직렬화 하지 않을 것입니다."

#: ../../docs/getting_started/step_by_step/resources.rst:363
msgid ""
"In the example below, Godot would load the ``Node`` script, see that it "
"doesn't extend ``Resource``, and then determine that the script failed to "
"load for the Resource object since the types are incompatible."
msgstr ""
"아래 예시에서, Godot는 ``Node`` 스크립트를 불러오고, ``Resource``\\ 를 확장"
"(extend)하지 않음을 확인합니다, 그런 다음 타입이 맞지 않으면 스크립트가 리소"
"스 객체에 대해 불러오지 못했음을 확인합니다."

#: ../../docs/getting_started/step_by_step/filesystem.rst:4
msgid "File system"
msgstr "파일 시스템(File system)"

#: ../../docs/getting_started/step_by_step/filesystem.rst:9
msgid ""
"A file system manages how assets are stored and how they are accessed. A "
"well-designed file system also allows multiple developers to edit the same "
"source files and assets while collaborating. Godot stores all assets as "
"files in its file system."
msgstr ""
"파일 시스템은 애셋을 저장하고 접근하는 방법을 관리합니다. 잘 설계된 파일 시스"
"템은 여러 개발자가 협업하며 같은 소스 파일과 애셋을 편집할 수 있습니다. Godot"
"는 모든 애셋을 파일 시스템에 파일의 형태로 저장합니다."

#: ../../docs/getting_started/step_by_step/filesystem.rst:15
msgid "Implementation"
msgstr "구현"

#: ../../docs/getting_started/step_by_step/filesystem.rst:17
msgid ""
"The file system stores resources on disk. Anything, from a script, to a "
"scene or a PNG image is a resource to the engine. If a resource contains "
"properties that reference other resources on disk, the paths to those "
"resources are also included. If a resource has sub-resources that are built-"
"in, the resource is saved in a single file together with all the bundled sub-"
"resources. For example, a font resource is often bundled together with the "
"font textures."
msgstr ""
"파일 시스템은 리소스를 디스크에 저장합니다. 스크립트에서 씬이나 PNG 이미지까"
"지 어떤 것이든, 엔진에게는 리소스 입니다. 리소스가 디스크 내 다른 리소스의 참"
"조를 속성으로 갖고 있다면, 그 리소스로 가는 경로 또한 포함됩니다. 리소스가 내"
"장 하위 리소스를 갖는다면, 그 리소스는 모든 묶인 하위 리소스들과 함께 단일 파"
"일로 저장됩니다. 예를 들어, 폰트 리소스는 종종 폰트 텍스처와 묶여집니다."

#: ../../docs/getting_started/step_by_step/filesystem.rst:24
msgid ""
"The Godot file system avoids using metadata files. Existing asset managers "
"and VCSs are better than anything we can implement, so Godot tries its best "
"to play along with SVN, Git, Mercurial, Perforce, etc."
msgstr ""
"Godot 파일 시스템은 메타데이터 파일 사용을 피합니다. 기존 애셋 관리자와 버전 "
"관리 시스템(VCS)은 우리가 구현할 수 있는 것보다 훨씬 더 뛰어나기 때문에, "
"Godot는 SVN, Git, Mercurial, Perforce 등과 작업하도록 최선을 다합니다."

#: ../../docs/getting_started/step_by_step/filesystem.rst:28
msgid "Example of file system contents:"
msgstr "파일 시스템 내용물 예시:"

#: ../../docs/getting_started/step_by_step/filesystem.rst:39
msgid "project.godot"
msgstr "project.godot"

#: ../../docs/getting_started/step_by_step/filesystem.rst:41
msgid ""
"The project.godot file is the project description file, and it is always "
"found at the root of the project. In fact, its location defines where the "
"root is. This is the first file that Godot looks for when opening a project."
msgstr ""
"project.godot 파일은 프로젝트 설명 파일이고, 항상 프로젝트의 루트에서 찾으실 "
"수 있습니다. 사실 파일 위치가 루트의 위치를 정의합니다. 이 파일은 프로젝트를 "
"열 때 Godot가 제일 먼저 찾는 파일입니다."

#: ../../docs/getting_started/step_by_step/filesystem.rst:45
msgid ""
"This file contains the project configuration in plain text, using the win."
"ini format. Even an empty project.godot can function as a basic definition "
"of a blank project."
msgstr ""
"이 파일은 프로젝트 설정을 win.ini 형식을 사용해, 일반 텍스트로 갖습니다. 심지"
"어 비어있는 project.godot도 비어있는 프로젝트의 기본 정의 기능을 할 수 있습니"
"다."

#: ../../docs/getting_started/step_by_step/filesystem.rst:50
msgid "Path delimiter"
msgstr "경로 구분 기호"

#: ../../docs/getting_started/step_by_step/filesystem.rst:52
msgid ""
"Godot only supports ``/`` as a path delimiter. This is done for portability "
"reasons. All operating systems support this, even Windows, so a path such as "
"``c:\\project\\project.godot`` needs to be typed as ``c:/project/project."
"godot``."
msgstr ""
"Godot는 오직 ``/``\\ 만을 경로 구분 기호로 지원합니다. 그 이유는 이식 능력 입"
"니다. Windows를 포함한 모든 운영체제가 이 기호를 지원하기 때문에, ``c:"
"\\project\\project.godot``\\ 같은 경로는 ``c:/project/project.godot``\\ 로 적"
"어야 합니다."

#: ../../docs/getting_started/step_by_step/filesystem.rst:58
#: ../../docs/tutorials/io/data_paths.rst:16
msgid "Resource path"
msgstr "리소스 경로(Resource path)"

#: ../../docs/getting_started/step_by_step/filesystem.rst:60
msgid ""
"When accessing resources, using the host OS file system layout can be "
"cumbersome and non-portable. To solve this problem, the special path ``res://"
"`` was created."
msgstr ""
"리소스를 접근할 때, 호스트 OS 파일 시스템 레이아웃을 사용하는 것은 성가시고 "
"휴대성이 떨어질 수 있습니다. 이 문제를 해결하기 위해, ``res://`` 라는 특수 경"
"로가 만들어졌습니다."

#: ../../docs/getting_started/step_by_step/filesystem.rst:64
msgid ""
"The path ``res://`` will always point at the project root (where project."
"godot is located, so ``res://project.godot`` is always valid)."
msgstr ""
"``res://`` 경로는 항상 프로젝트 루트를 향합니다 (거기에는 project.godot이 있"
"고, 그래서 ``res://project.godot`` 경로는 항상 존재합니다)."

#: ../../docs/getting_started/step_by_step/filesystem.rst:68
msgid ""
"This file system is read-write only when running the project locally from "
"the editor. When exported or when running on different devices (such as "
"phones or consoles, or running from DVD), the file system will become read-"
"only and writing will no longer be permitted."
msgstr ""
"파일 시스템은 편집기에서 프로젝트를 지역으로 실행 중일 때만 읽고 씁니다. 내보"
"내질 때나 아니면 다른 기기에서 실행 중일 때 (휴대전화나 콘솔, 혹은 DVD로 실"
"행), 파일 시스템은 읽기만 하고 더 이상 쓰기가 용납되지 않습니다."

#: ../../docs/getting_started/step_by_step/filesystem.rst:74
msgid "User path"
msgstr "사용자 경로(User path)"

#: ../../docs/getting_started/step_by_step/filesystem.rst:76
msgid ""
"Writing to disk is still needed for tasks such as saving game state or "
"downloading content packs. To this end, the engine ensures that there is a "
"special path ``user://`` that is always writable."
msgstr ""
"디스크 쓰기는 게임 상태를 저장하거나 콘텐츠 팩을 다운로드하는 등의 작업에 여"
"전히 필요합니다. 이를 위해, 엔진은 언제나 작성 가능한 ``user://`` 라는 특수 "
"경로를 보장합니다."

#: ../../docs/getting_started/step_by_step/filesystem.rst:81
msgid "Host file system"
msgstr "호스트 파일 시스템(Host file system)"

#: ../../docs/getting_started/step_by_step/filesystem.rst:83
msgid ""
"Alternatively host file system paths can also be used, but this is not "
"recommended for a released product as these paths are not guaranteed to work "
"on all platforms. However, using host file system paths can be useful when "
"writing development tools in Godot."
msgstr ""
"또는 호스트 파일 시스템 경로도 사용될 수 있습니다, 하지만 이것이 모든 플랫폼"
"에서 작동된다는 보장은 없으니 출시된 제품에 이 경로를 쓰는 것을 추천하지는 않"
"습니다. 하지만, 호스트 파일 시스템 경로는 Godot에서 개발 도구를 만들 때 유용"
"할 수 있습니다."

#: ../../docs/getting_started/step_by_step/filesystem.rst:89
msgid "Drawbacks"
msgstr "단점"

#: ../../docs/getting_started/step_by_step/filesystem.rst:91
msgid ""
"There are some drawbacks to this simple file system design. The first issue "
"is that moving assets around (renaming them or moving them from one path to "
"another inside the project) will break existing references to these assets. "
"These references will have to be re-defined to point at the new asset "
"location."
msgstr ""
"이 간단한 파일 시스템 설계에는 몇 가지 단점이 있습니다. 첫 번째 문제는 애셋"
"의 이동으로 (프로젝트 내에서 이름을 바꾸거나 한 경로를 다른 곳으로 옮기는 "
"등) 이 애셋에 관해 존재하는 참조를 깨버릴 것입니다. 이 참조는 새 애셋 위치를 "
"향하도록 다시 정의해야만 합니다."

#: ../../docs/getting_started/step_by_step/filesystem.rst:96
msgid ""
"To avoid this, do all your move, delete and rename operations from within "
"Godot, on the FileSystem dock. Never move assets from outside Godot, or "
"dependencies will have to be fixed manually (Godot detects this and helps "
"you fix them anyway, but why go the hard route?)."
msgstr ""
"이를 피하기 위해, Godot에서, 파일 시스템 독 내에서, 위치를 바꾸거나 이름을 바"
"꾸거나 삭제하는 등의 모든 작업을 해야만 합니다. Godot 밖에서 애셋을 움직이지 "
"마세요, 그렇지 않으면 종속 여부를 수동으로 설정해야만 합니다 (Godot는 이를 감"
"지하고 당신이 고치는 것을 어쨌든 도울 것이지만, 왜 어려운 길로 가시나요?)."

#: ../../docs/getting_started/step_by_step/filesystem.rst:101
msgid ""
"The second is that, under Windows and macOS, file and path names are case "
"insensitive. If a developer working in a case insensitive host file system "
"saves an asset as \"myfile.PNG\", but then references it as \"myfile.png\", "
"it will work fine on their platform, but not on other platforms, such as "
"Linux, Android, etc. This may also apply to exported binaries, which use a "
"compressed package to store all files."
msgstr ""
"두 번째로 Windows와 macOS에서는 파일과 경로 이름을 대소문자를 구별하지 않는 "
"것입니다. 대소문자를 구분하지 않는 호스트 파일 시스템이 애셋을 \"myfile.PNG"
"\"라고 저장하지만, \"myfile.png\" 로 참조됩니다, 그 플랫폼 내에서는 작동이 "
"잘 될 것입니다, 하지만 Linux, Android 등의 플랫폼에서는 작동하지 않습니다. 이"
"는 압축된 패키지로 모든 파일을 저장하는 내보낸 바이너리에도 적용될 수 있습니"
"다."

#: ../../docs/getting_started/step_by_step/filesystem.rst:107
msgid ""
"It is recommended that your team clearly define a naming convention for "
"files when working with Godot. One simple fool-proof convention is to only "
"allow lowercase file and path names."
msgstr ""
"Godot로 작업할 때 팀이 명명 규칙을 분명하게 정의하는 것을 추천합니다. 간단한 "
"바보 같은 규칙으로는 파일과 경로 이름을 소문자로만 허락하는 것이 있습니다."

#: ../../docs/getting_started/step_by_step/scene_tree.rst:4
#: ../../docs/getting_started/step_by_step/scene_tree.rst:33
#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:288
msgid "SceneTree"
msgstr "SceneTree(씬 트리)"

#: ../../docs/getting_started/step_by_step/scene_tree.rst:9
msgid ""
"In previous tutorials, everything revolved around the concept of nodes. "
"Scenes are collections of nodes. They become active once they enter the "
"*scene tree*."
msgstr ""
"이전 튜토리얼에서, 모든 것은 노드 개념을 중심으로 돌아갔습니다. 씬은 노드 모"
"음집입니다. 노드는 *씬 트리(scene tree)*\\ 에 들어가면 활성화됩니다."

#: ../../docs/getting_started/step_by_step/scene_tree.rst:14
msgid "MainLoop"
msgstr "MainLoop(메인루프)"

#: ../../docs/getting_started/step_by_step/scene_tree.rst:16
msgid ""
"The way Godot works internally is as follows. There is the :ref:`OS "
"<class_OS>` class, which is the only instance that runs at the beginning. "
"Afterwards, all drivers, servers, scripting languages, scene system, etc are "
"loaded."
msgstr ""
"Godot가 내부적으로 작동되는 과정은 다음과 같습니다. :ref:`OS <class_OS>` 클래"
"스는 처음에 실행되는 유일한 인스턴스 입니다. 그 이후에, 모든 드라이버, 서버, "
"스크립트 언어, 씬 시스템 등을 불러옵니다."

#: ../../docs/getting_started/step_by_step/scene_tree.rst:21
msgid ""
"When initialization is complete, :ref:`OS <class_OS>` needs to be supplied "
"a :ref:`MainLoop <class_MainLoop>` to run. Up to this point, all this is "
"internals working (you can check main/main.cpp file in the source code if "
"you are ever interested to see how this works internally)."
msgstr ""
"초기화를 마칠 때, :ref:`OS <class_OS>` 를 실행하기 위해 :ref:`MainLoop "
"<class_MainLoop>` 가 공급되어야 합니다. 여기까지, 이 모든 것이 내부 작업입니"
"다 (어떻게 내부 작업이 이루어지는지 관심이 있으시다면, 소스 코드의 main/main."
"cpp 파일에서 이를 확인하실 수 있습니다)."

#: ../../docs/getting_started/step_by_step/scene_tree.rst:27
msgid ""
"The user program, or game, starts in the MainLoop. This class has a few "
"methods, for initialization, idle (frame-synchronized callback), fixed "
"(physics-synchronized callback), and input. Again, this is low level and "
"when making games in Godot, writing your own MainLoop seldom makes sense."
msgstr ""
"사용자 프로그램, 게임은 MainLoop에서 시작합니다. 이 클래스는 몇 가지 메소드"
"를 갖고 있는데, 초기화, 휴식(Idle)(프레임 동기화된 콜백), 고정된(fixed)(물리 "
"동기화된 콜백), 그리고 입력입니다. 이것은 로우 레벨이며, Godot에서 게임을 만"
"들 때 당신만의 MainLoop를 만드는 일은 드뭅니다."

#: ../../docs/getting_started/step_by_step/scene_tree.rst:35
msgid ""
"One of the ways to explain how Godot works is that it's a high level game "
"engine over a low level middleware."
msgstr ""
"Godot가 어떻게 작동하는지 설명하는 방법으로 이것은 로우 레벨 미들웨어에 비해 "
"높은 수준의 게임 엔진이란 것입니다."

#: ../../docs/getting_started/step_by_step/scene_tree.rst:38
msgid ""
"The scene system is the game engine, while the :ref:`OS <class_OS>` and "
"servers are the low level API."
msgstr ""
"씬 시스템은 게임 엔진입니다, 반면에 :ref:`OS <class_OS>` 와 서버는 로우 레벨 "
"API입니다."

#: ../../docs/getting_started/step_by_step/scene_tree.rst:41
msgid ""
"The scene system provides its own main loop to OS, :ref:`SceneTree "
"<class_SceneTree>`. This is automatically instanced and set when running a "
"scene, no need to do any extra work."
msgstr ""
"씬 시스템은 고유의 메인 루프(main loop)를 운영체제로 보냅니다, :ref:"
"`SceneTree <class_SceneTree>`. 이것은 씬이 실행되는 동안 자동으로 인스턴스되"
"고 설정됩니다, 다른 추가 작업은 필요가 없습니다."

#: ../../docs/getting_started/step_by_step/scene_tree.rst:46
msgid ""
"It's important to know that this class exists because it has a few important "
"uses:"
msgstr ""
"이 클래스가 몇 가지 중요한 용도에 쓰이기 때문에 존재하는 것을 알아야 합니다:"

#: ../../docs/getting_started/step_by_step/scene_tree.rst:49
msgid ""
"It contains the root :ref:`Viewport <class_Viewport>`, to which a scene is "
"added as a child when it's first opened to become part of the *Scene Tree* "
"(more on that next)."
msgstr ""
"처음 열었을 때 루트 :ref:`Viewport <class_Viewport>`\\ 를 갖고 있습니다. 씬"
"에 자식으로 추가되어서 *씬 트리*\\ 의 일부가 되는 것이죠 (자세한 설명은 나중"
"에 하겠습니다)."

#: ../../docs/getting_started/step_by_step/scene_tree.rst:52
msgid ""
"It contains information about the groups and has the means to call all nodes "
"in a group or get a list of them."
msgstr ""
"그룹에 관한 정보를 포함하고 그룹의 모든 노드를 호출하거나 그룹의 목록을 가져"
"옵니다."

#: ../../docs/getting_started/step_by_step/scene_tree.rst:54
msgid ""
"It contains some global state functionality, such as setting pause mode or "
"quitting the process."
msgstr ""
"일시 정지 모드 설정이나 프로세스 종료하기와 같은, 일부 전역 상태 기능성을 포"
"함합니다."

#: ../../docs/getting_started/step_by_step/scene_tree.rst:57
msgid ""
"When a node is part of the Scene Tree, the :ref:`SceneTree "
"<class_SceneTree>` singleton can be obtained by calling :ref:`Node."
"get_tree() <class_Node_method_get_tree>`."
msgstr ""
"노드가 씬 트리의 일부분일 때, :ref:`Node.get_tree() "
"<class_Node_method_get_tree>`\\ 를 호출해서 :ref:`SceneTree "
"<class_SceneTree>` 싱글톤(Singleton)을 포함될 수 있습니다."

#: ../../docs/getting_started/step_by_step/scene_tree.rst:63
msgid "Root viewport"
msgstr "루트 뷰포트(Root viewport)"

#: ../../docs/getting_started/step_by_step/scene_tree.rst:65
msgid ""
"The root :ref:`Viewport <class_Viewport>` is always at the top of the scene. "
"From a node, it can be obtained in two different ways:"
msgstr ""
"루트 :ref:`Viewport <class_Viewport>` 는 항상 씬의 맨 위에 있습니다. 노드에"
"서, 두 가지 다른 방법으로 포함할 수 있습니다:"

#: ../../docs/getting_started/step_by_step/scene_tree.rst:80
msgid ""
"This node contains the main viewport. Anything that is a child of a :ref:"
"`Viewport <class_Viewport>` is drawn inside of it by default, so it makes "
"sense that the top of all nodes is always a node of this type otherwise "
"nothing would be seen."
msgstr ""
"이 노드는 메인 뷰포트를 갖고 있습니다. 모든 것이 기본적으로 :ref:`Viewport "
"<class_Viewport>`\\ 의 자식으로 있습니다, 그래서 모든 노드의 꼭대기에는 이 타"
"입의 노드가 있고 그렇지 않다면 아무것도 보이지 않을 것입니다."

#: ../../docs/getting_started/step_by_step/scene_tree.rst:85
msgid ""
"While other viewports can be created in the scene (for split-screen effects "
"and such), this one is the only one that is never created by the user. It's "
"created automatically inside SceneTree."
msgstr ""
"반면에 다른 뷰포트는 씬에서 만들 수 있지만(분리 화면 효과와 같은 것을 위해), "
"사용자가 절대 만들 수 없는 유일한 것입니다. 씬 트리에서 자동으로 생성됩니다."

#: ../../docs/getting_started/step_by_step/scene_tree.rst:90
#: ../../docs/tutorials/threads/thread_safe_apis.rst:22
msgid "Scene tree"
msgstr "씬 트리"

#: ../../docs/getting_started/step_by_step/scene_tree.rst:92
msgid ""
"When a node is connected, directly or indirectly, to the root viewport, it "
"becomes part of the *scene tree*."
msgstr ""
"노드가 뷰포트에 연결될 때, 직접적이든 아니든, 그것은 *씬 트리* 의 일부분이 됩"
"니다."

#: ../../docs/getting_started/step_by_step/scene_tree.rst:95
msgid ""
"This means that as explained in previous tutorials, it will get the "
"_enter_tree() and _ready() callbacks (as well as _exit_tree())."
msgstr ""
"이전 튜토리얼에서 설명했듯이, 그것은 (_exit_tree()과 마찬가지로)  "
"_enter_tree()와 _ready() 콜백을 가질 것입니다."

#: ../../docs/getting_started/step_by_step/scene_tree.rst:100
msgid ""
"When nodes enter the *Scene Tree*, they become active. They get access to "
"everything they need to process, get input, display 2D and 3D visuals, "
"receive and send notifications, play sounds, etc. When they are removed from "
"the *scene tree*, they lose these abilities."
msgstr ""
"노드는 *씬 트리*\\ 에 들어가면 활성화됩니다. 노드는 입력을 받거나 처리하고, "
"2D와 3D 표현을 보여주고, 알림을 받고 보내거나, 소리를 재생하는 등을 실행하기 "
"위한 것들 모두에 접근합니다. 노드가 *씬 트리*\\ 에서 제거될 때, 능력을 잃습니"
"다."

#: ../../docs/getting_started/step_by_step/scene_tree.rst:106
msgid "Tree order"
msgstr "트리 순서"

#: ../../docs/getting_started/step_by_step/scene_tree.rst:108
msgid ""
"Most node operations in Godot, such as drawing 2D, processing, or getting "
"notifications are done in tree order. This means that parents and siblings "
"with a lower rank in the tree order will get notified before the current "
"node."
msgstr ""
"2D 그리기, 프로세싱, 혹은 알림 받기와 같은 대부분의 노드 운영은 트리 순서에"
"서 완료됩니다. 즉, 현재 노드보다 트리 순서에서 부모와 더 낮은 등급의 형제 노"
"드들이 먼저 알림을 받는 것입니다."

#: ../../docs/getting_started/step_by_step/scene_tree.rst:116
msgid "\"Becoming active\" by entering the *Scene Tree*"
msgstr "*씬 트리* 에 들어가서 \"활성화하기\""

#: ../../docs/getting_started/step_by_step/scene_tree.rst:118
msgid "A scene is loaded from disk or created by scripting."
msgstr "씬은 디스크에서 불러오거나 스크립트에 의해 만들어집니다."

#: ../../docs/getting_started/step_by_step/scene_tree.rst:119
msgid ""
"The root node of that scene (only one root, remember?) is added as either a "
"child of the \"root\" Viewport (from SceneTree), or to any child or "
"grandchild of it."
msgstr ""
"씬의 루트 노드 (단 하나의 루트, 기억하시나요?) 는 \"루트\" 뷰포트의 자식으"
"로, 혹은 노드의 자식으로 (씬 트리에서) 추가됩니다."

#: ../../docs/getting_started/step_by_step/scene_tree.rst:122
msgid ""
"Every node of the newly added scene, will receive the \"enter_tree\" "
"notification ( _enter_tree() callback in GDScript) in top-to-bottom order."
msgstr ""
"새롭게 추가되는 씬의 각 노드는, 위에서 아래 순으로 \"enter_tree\" 알림을 "
"(GDScript에서  _enter_tree() 콜백을) 받습니다."

#: ../../docs/getting_started/step_by_step/scene_tree.rst:125
msgid ""
"An extra notification, \"ready\" ( _ready() callback in GDScript) is "
"provided for convenience, when a node and all its children are inside the "
"active scene."
msgstr ""
"추가 알림으로, 노드와 모든 자식이 활성화된 씬 안에 있을 때, \"ready\"가 "
"(GDScript에서는 _ready() 콜백이) 편의로 제공됩니다."

#: ../../docs/getting_started/step_by_step/scene_tree.rst:128
msgid ""
"When a scene (or part of it) is removed, they receive the \"exit scene\" "
"notification ( _exit_tree() callback in GDScript) in bottom-to-top order"
msgstr ""
"씬(이나 일부분)이 제거될 때, 그들은 아래에서 위 순으로 \"exit scene\" 알림을 "
"(GDScript에서는 _exit_tree() 콜백을) 받습니다"

#: ../../docs/getting_started/step_by_step/scene_tree.rst:133
msgid "Changing current scene"
msgstr "현재 씬 변경하기"

#: ../../docs/getting_started/step_by_step/scene_tree.rst:135
msgid ""
"After a scene is loaded, it is often desired to change this scene for "
"another one. The simple way to do this is to use the :ref:`SceneTree."
"change_scene() <class_SceneTree_method_change_scene>` function:"
msgstr ""
"씬이 불러온 후, 그것을 다른 씬으로 바꾸고 싶을 수 있습니다. 간단한 방법으로 :"
"ref:`SceneTree.change_scene() <class_SceneTree_method_change_scene>` 함수를 "
"사용하는 것입니다:"

#: ../../docs/getting_started/step_by_step/scene_tree.rst:153
msgid ""
"Rather than using file paths, one can also use ready-made :ref:`PackedScene "
"<class_PackedScene>` resources using the equivalent function :ref:`SceneTree."
"change_scene_to(PackedScene scene) <class_SceneTree_method_change_scene_to>`:"
msgstr ""
"파일의 경로를 사용하기보다는, :ref:`SceneTree.change_scene_to(PackedScene "
"scene) <class_SceneTree_method_change_scene_to>` 함수를 사용하여 이미 만들어"
"져 있는 :ref:`PackedScene <class_PackedScene>` 리소스를 사용합니다:"

#: ../../docs/getting_started/step_by_step/scene_tree.rst:174
msgid ""
"These are quick and useful ways to switch scenes but have the drawback that "
"the game will stall until the new scene is loaded and running. At some point "
"in the development of your game, it may be preferable to create proper "
"loading screens with progress bar, animated indicators or thread "
"(background) loading. This must be done manually using autoloads (see next "
"chapter) and :ref:`doc_background_loading`."
msgstr ""
"이것들은 씬을 바꾸려고 할때 빠르고 쓸만하지만 새로운 씬이 로딩되고 실행될때 "
"약간의 단점이 있습니다. 개발하실 때에는 프로그레스 바가 있는 로딩 화면을 만드"
"는 것이 더 좋습니다. 이 작업은 Autoloads(다음 장을 참조하십시오) 와 :ref: "
"`doc_background_loading' 을 사용하여 수동으로 수행해야 합니다."

#: ../../docs/getting_started/step_by_step/singletons_autoload.rst:4
msgid "Singletons (AutoLoad)"
msgstr "싱글톤(오토로드)(Singletons(AutoLoad))"

#: ../../docs/getting_started/step_by_step/singletons_autoload.rst:9
msgid ""
"Godot's scene system, while powerful and flexible, has a drawback: there is "
"no method for storing information (e.g. a player's score or inventory) that "
"is needed by more than one scene."
msgstr ""
"Godot의 씬 시스템은, 강력하고 유연하지만, 단점이 있습니다: 하나 이상의 씬이 "
"필요하기 때문에 정보를 저장할 방법이 없습니다 (예: 플래이어의 점수나 인벤토"
"리)."

#: ../../docs/getting_started/step_by_step/singletons_autoload.rst:13
msgid ""
"It's possible to address this with some workarounds, but they come with "
"their own limitations:"
msgstr "이러한 문제들을 해결할 방법은 있지만, 그것만의 한계점이 있습니다:"

#: ../../docs/getting_started/step_by_step/singletons_autoload.rst:16
msgid ""
"You can use a \"master\" scene that loads and unloads other scenes as its "
"children. However, this means you can no longer run those scenes "
"individually and expect them to work correctly."
msgstr ""
"다른 씬을 자식으로 불러오거나 그렇지 않을 \"마스터\" 씬을 사용할 수 있습니"
"다. 하지만 그렇게 하면 바르게 작동하기 위해 더 이상 씬들을 개별적으로 실행할 "
"수 없다는 것을 의미합니다."

#: ../../docs/getting_started/step_by_step/singletons_autoload.rst:19
msgid ""
"Information can be stored to disk in ``user://`` and then loaded by scenes "
"that require it, but frequently saving and loading data is cumbersome and "
"may be slow."
msgstr ""
"정보를 ``user://`` 에 저장하고 필요할 때 불러올 수 있습니다, 하지만 자주 데이"
"터를 저장하고 불러오는 것은 성가시고 느려질 수 있습니다."

#: ../../docs/getting_started/step_by_step/singletons_autoload.rst:23
msgid ""
"The `Singleton Pattern <https://en.wikipedia.org/wiki/Singleton_pattern>`_ "
"is a useful tool for solving the common use case where you need to store "
"persistent information between scenes. In our case it is possible re-use the "
"same scene or class for multiple singletons, so long as they have different "
"names."
msgstr ""
"`Singleton Pattern <https://en.wikipedia.org/wiki/Singleton_pattern>`_\\ 은 "
"씬들 사이에서 지속적인 정보를 저장하는 일반적인 사례를 해결하는 유용한 도구입"
"니다. 우리의 경우에는 서로 다른 이름을 가진 여러가지 싱글톤을 같은 씬이나 클"
"래스에 재사용할 수 있습니다."

#: ../../docs/getting_started/step_by_step/singletons_autoload.rst:29
msgid "Using this concept, you can create objects that:"
msgstr "이 개념을 사용해서, 다음과 같은 객체를 만드실 수 있습니다:"

#: ../../docs/getting_started/step_by_step/singletons_autoload.rst:31
msgid "Are always loaded, no matter which scene is currently running"
msgstr "현재 실행 중인 씬과 상관없이, 항상 불러와집니다"

#: ../../docs/getting_started/step_by_step/singletons_autoload.rst:32
msgid "Can store global variables, such as player information"
msgstr "플레이어 정보와 같은, 전역 변수를 저장할 수 있습니다"

#: ../../docs/getting_started/step_by_step/singletons_autoload.rst:33
msgid "Can handle switching scenes and between-scene transitions"
msgstr "씬을 바꾸는 것과 씬 전환 사이를 다룰 수 있습니다"

#: ../../docs/getting_started/step_by_step/singletons_autoload.rst:34
msgid ""
"Act like a singleton, since GDScript does not support global variables by "
"design"
msgstr "GDScript가 전역 변수를 지원하지 않기 때문에 싱글톤처럼 행동합니다"

#: ../../docs/getting_started/step_by_step/singletons_autoload.rst:36
msgid "Autoloading nodes and scripts can give us these characteristics."
msgstr "노드와 스크립트를 Autoload하는 것은 위와 같은 기능을 제공합니다."

#: ../../docs/getting_started/step_by_step/singletons_autoload.rst:39
msgid "AutoLoad"
msgstr "오토로드"

#: ../../docs/getting_started/step_by_step/singletons_autoload.rst:41
msgid ""
"You can use AutoLoad to load a scene or a script that inherits from :ref:"
"`Node <class_Node>`. Note: when autoloading a script, a Node will be created "
"and the script will be attached to it. This node will be added to the root "
"viewport before any other scenes are loaded."
msgstr ""
":ref:`Node <class_Node>` 에서 상속하는 씬이나 스크립트를 불러오기 위해 오토로"
"드(AutoLoad)를 사용할 수 있습니다. 주석: 스크립트를 오토로드 할 떄, 노드가 만"
"들어지고 스크립트가 거기에 붙습니다. 이 노드는 다른 씬이 불러오기 전까지 루"
"트 뷰포트에 추가될 것입니다."

#: ../../docs/getting_started/step_by_step/singletons_autoload.rst:48
msgid ""
"To autoload a scene or script, select ``Project -> Project Settings`` from "
"the menu and switch to the \"AutoLoad\" tab."
msgstr ""
"씬이나 스크립트를 오토로드 하기 위해, 메뉴에서 ``프로젝트 -> 프로젝트 설정`` "
"을 선택하고 \"오토로드\" 탭으로 갑니다."

#: ../../docs/getting_started/step_by_step/singletons_autoload.rst:53
msgid ""
"Here you can add any number of scenes or scripts. Each entry in the list "
"requires a name, which is assigned as the node's ``name`` property. The "
"order of the entries as they are added to the global scene tree can be "
"manipulated using the up/down arrow keys."
msgstr ""
"여기서 원하는 씬이나 스크립트를 추가하실 수 있습니다. 목록에서 각 항목에는 노"
"드의 ``name`` 속성으로 지정하는 이름이 필요합니다. 전역 씬 트리에 추가된 항목"
"의 순서는 위/아래 방향키를 사용해 조작할 수 있습니다."

#: ../../docs/getting_started/step_by_step/singletons_autoload.rst:60
msgid ""
"This means that any node can access a singleton named \"PlayerVariables\" "
"with:"
msgstr ""
"위의 경우, 어느 노드든지 \"PlayerVariables\" 라는 싱글톤을 접근할 수 있습니"
"다:"

#: ../../docs/getting_started/step_by_step/singletons_autoload.rst:73
msgid ""
"If the \"Enable\" column is checked (default ``true``) then the singleton "
"can simply be accessed directly:"
msgstr ""
"\"켜기(Enable)\" 열이 체크되어 있으면 (기본 값 ``true``) 간단하게 싱글톤으로 "
"직접 접근할 수 있게 됩니다:"

#: ../../docs/getting_started/step_by_step/singletons_autoload.rst:86
msgid ""
"Note that autoload objects (scripts and/or scenes) are accessed just like "
"any other node in the scene tree. In fact, if you look at the running scene "
"tree, you'll see the autoloaded nodes appear:"
msgstr ""
"씬 트리에서 다른 노드와 마찬가지로 오토로드 객체 (스크립트 혹은 씬)는 접근됩"
"니다. 사실, 실행하는 씬 트리를 보신다면, 오토로드 된 노드가 나타나는 것을 보"
"실 수 있습니다:"

#: ../../docs/getting_started/step_by_step/singletons_autoload.rst:93
msgid "Custom scene switcher"
msgstr "맞춤 씬 전환기"

#: ../../docs/getting_started/step_by_step/singletons_autoload.rst:95
msgid ""
"This tutorial will demonstrate building a scene switcher using autoload. For "
"basic scene switching, you can use the :ref:`SceneTree.change_scene() "
"<class_SceneTree_method_change_scene>` method (see :ref:`doc_scene_tree` for "
"details). However, if you need more complex behavior when changing scenes, "
"this method provides more functionality."
msgstr ""
"이 튜토리얼은 오토로드를 사용해 씬 전환기를 만드는 법을 설명할 것입니다. 메"
"인 씬 전환을 위해, :ref:`SceneTree.change_scene() "
"<class_SceneTree_method_change_scene>` 메서드를 사용할 수 있습니다 (자세한 점"
"은 :ref:`doc_scene_tree`\\ 를 참고하세요). 하지만, 씬을 전환할 때 더 복잡한 "
"행동을 원한다면, 이 메서드가 더 많은 기능성을 제공합니다."

#: ../../docs/getting_started/step_by_step/singletons_autoload.rst:101
msgid ""
"To begin, download the template from here: :download:`autoload.zip <files/"
"autoload.zip>` and open it in Godot."
msgstr ""
"시작하기 위해, 여기서 템플릿을 다운로드 하시고 :download:`autoload.zip "
"<files/autoload.zip>` 그리고 Godot에서 여세요."

#: ../../docs/getting_started/step_by_step/singletons_autoload.rst:104
msgid ""
"The project contains two scenes: ``Scene1.tscn`` and ``Scene2.tscn``. Each "
"scene contains a label displaying the scene name and a button with its "
"``pressed()`` signal connected. When you run the project, it starts in "
"``Scene1.tscn``. However, pressing the button does nothing."
msgstr ""
"프로젝트는 두 개의 씬을 갖고 있습니다:  ``Scene1.tscn`` 과 ``Scene2.tscn`` 입"
"니다. 각 씬은 씬의 이름을 보여주는 라벨과 ``pressed()`` 시그널이 연결된 버튼"
"이 있습니다. 프로젝트를 실행할 때, ``Scene1.tscn`` 에서 시작합니다. 하지만, "
"버튼을 눌러도 아무렇지 않습니다."

#: ../../docs/getting_started/step_by_step/singletons_autoload.rst:110
msgid "Global.gd"
msgstr "Global.gd"

#: ../../docs/getting_started/step_by_step/singletons_autoload.rst:112
msgid ""
"Switch to the \"Script\" tab and create a new script called Global.gd. Make "
"sure it inherits from ``Node``:"
msgstr ""
"\"Script\" 탭으로 전환하고 Global.gd 라는 새 스크립트를 만듭니다. ``Node`` 에"
"서 상속하도록 하십시오:"

#: ../../docs/getting_started/step_by_step/singletons_autoload.rst:117
msgid ""
"The next step is to add this script to the autoLoad list. Open ``Project > "
"Project Settings`` from the menu, switch to the \"AutoLoad\" tab and select "
"the script by clicking the browse button or typing its path: ``res://Global."
"gd``. Press \"Add\" to add it to the autoload list:"
msgstr ""
"다음은 이 스크립트를 오토로드 목록에 추가하는 것입니다. 메뉴에서 ``프로젝트"
"(Project) > 프로젝트 설정(Project Settings)``\\ 을 여세요. \"오토로드"
"(AutoLoad)\" 탭으로 전환한 뒤, 탐색 버튼을 클릭해서 스크립트를 선택하거나, 경"
"로를 입력하세요: ``res://Global.gd``. \"추가하기(Add)를 눌러서 오토로드 목록"
"에 스크립트를 추가하세요:"

#: ../../docs/getting_started/step_by_step/singletons_autoload.rst:124
msgid ""
"Now whenever we run any scene in the project, this script will always be "
"loaded."
msgstr ""
"이제 언제든지 우리는 어떤 씬이 프로젝트에서 실행하든지, 이 스크립트가 항상 불"
"러와질 것입니다."

#: ../../docs/getting_started/step_by_step/singletons_autoload.rst:126
msgid ""
"Returning to the script, it needs to fetch the current scene in the "
"`_ready()` function. Both the current scene (the one with the button) and "
"``global.gd`` are children of root, but autoloaded nodes are always first. "
"This means that the last child of root is always the loaded scene."
msgstr ""
"스크립트로 돌아가서, `_ready()` 함수에서 현재 씬을 가져와야 합니다. (버튼이 "
"있는) 현재 씬과 ``global.gd`` 는 둘 다 루트의 자식이지만, 오토로드 된 노드는 "
"항상 첫 번째 입니다. 즉, 루트의 마지막 자식은 항상 불러온 씬이라는 것입니다."

#: ../../docs/getting_started/step_by_step/singletons_autoload.rst:158
msgid ""
"Now we need a function for changing the scene. This function needs to free "
"the current scene and replace it with the requested one."
msgstr ""
"이제, 우리는 씬을 바꾸기 위한 함수가 필요합니다. 이 함수는 현재 씬을 해제하"
"고 요청하는 것으로 바꾸어야 합니다."

#: ../../docs/getting_started/step_by_step/singletons_autoload.rst:227
msgid ""
"Using :ref:`Object.call_deferred() <class_Object_method_call_deferred>`, the "
"second function will only run once all code from the current scene has "
"completed. Thus, the current scene will not be removed while it is still "
"being used (i.e. its code is still running)."
msgstr ""
":ref:`Object.call_deferred() <class_Object_method_call_deferred>` 를 사용한다"
"면 두 번째 기능은 현재 씬의 코드가 모두 종료되었을 때 실행된다. 따라서, 현재 "
"씬은 그것이 사용되고 있을 때 까지 제거되지 않을 것이다."

#: ../../docs/getting_started/step_by_step/singletons_autoload.rst:232
msgid ""
"Finally, we need to fill the empty callback functions in the two scenes:"
msgstr "마지막으로, 두 씬에 비어있는 콜백 함수를 채워야 합니다:"

#: ../../docs/getting_started/step_by_step/singletons_autoload.rst:252
#: ../../docs/tutorials/math/vector_math.rst:281
msgid "and"
msgstr "그리고"

#: ../../docs/getting_started/step_by_step/singletons_autoload.rst:272
msgid ""
"Run the project and test that you can switch between scenes by pressing the "
"button."
msgstr "프로젝트를 실행하고 버튼을 누를 때 씬이 바뀌는지 확인해보세요."

#: ../../docs/getting_started/step_by_step/singletons_autoload.rst:275
msgid ""
"Note: When scenes are small, the transition is instantaneous. However, if "
"your scenes are more complex, they may take a noticeable amount of time to "
"appear. To learn how to handle this, see the next tutorial: :ref:"
"`doc_background_loading`"
msgstr ""
"주석: 씬이 작을 때, 전환은 동시에 일어납니다. 하지만 씬이 더 복잡하다면, 눈"
"에 띄는 시간 차가 발생합니다. 어떻게 이를 다루는 지 배우기 위해, 다음 튜토리"
"얼을 확인하세요: :ref:`doc_background_loading`"

#: ../../docs/getting_started/editor/index.rst:2
msgid "Editor manual"
msgstr "편집기 매뉴얼"

#: ../../docs/getting_started/editor/unity_to_godot.rst:8
msgid "From Unity to Godot Engine"
msgstr "Unity에서 Godot 엔진까지"

#: ../../docs/getting_started/editor/unity_to_godot.rst:10
msgid ""
"This guide provides an overview of Godot Engine from the viewpoint of a "
"Unity user, and aims to help you migrate your existing Unity experience into "
"the world of Godot."
msgstr ""
"이 가이드는 Unity 사용자의 관점에서 Godot 엔진의 개요를 제공합니다, 그리고 존"
"재하는 Unity 경험을 Godot라는 세상에 옮기도록 돕는 것에 중점을 둡니다."

#: ../../docs/getting_started/editor/unity_to_godot.rst:15
msgid ""
"This article talks about older versions of Unity. Nestable prefabs ('Nested "
"prefabs') were added to Unity 2018.3. Nestable prefabs are analogous to "
"Godot's scenes, and allow a more Godot-like approach to scene organisation."
msgstr ""
"이 문서는 예전 버전의 Unity에 대해 말하고 있습니다. 중첩할 수 있는 프리펩('중"
"첩된 프리펩')은 Unity 2018.3에 추가되었습니다. 중첩할 수 있는 프리펩은 Godot"
"의 씬과 유사합니다. 그리고 Godot와 유사하게 씬 조직으로 접근할 수 있습니다."

#: ../../docs/getting_started/editor/unity_to_godot.rst:18
msgid "Differences"
msgstr "차이점"

#: ../../docs/getting_started/editor/unity_to_godot.rst:21
msgid "Unity"
msgstr "Unity"

#: ../../docs/getting_started/editor/unity_to_godot.rst:21
msgid "Godot"
msgstr "Godot"

#: ../../docs/getting_started/editor/unity_to_godot.rst:23
#: ../../docs/community/contributing/documentation_guidelines.rst:128
msgid "License"
msgstr "라이선스"

#: ../../docs/getting_started/editor/unity_to_godot.rst:23
msgid ""
"Proprietary, closed, free license with revenue caps and usage restrictions"
msgstr "수익 상한과 사용 제한이 있는 독점적이고 폐쇄적인 무료 라이선스"

#: ../../docs/getting_started/editor/unity_to_godot.rst:23
msgid "MIT license, free and fully open source without any restriction"
msgstr "MIT 라이선스로, 어떤 제한 없이 무료이고 완전한 오픈 소스"

#: ../../docs/getting_started/editor/unity_to_godot.rst:25
msgid "OS (editor)"
msgstr "OS (편집기)"

#: ../../docs/getting_started/editor/unity_to_godot.rst:25
#, fuzzy
msgid "Windows, macOS, Linux"
msgstr "**데스크톱:** Windows, macOS, Linux"

#: ../../docs/getting_started/editor/unity_to_godot.rst:25
msgid "Windows, macOS, X11 (Linux, \\*BSD)"
msgstr "Windows, macOS, X11 (Linux, \\*BSD)"

#: ../../docs/getting_started/editor/unity_to_godot.rst:27
msgid "OS (export)"
msgstr "OS (내보내기)"

#: ../../docs/getting_started/editor/unity_to_godot.rst:27
msgid "**Desktop:** Windows, macOS, Linux"
msgstr "**데스크톱:** Windows, macOS, Linux"

#: ../../docs/getting_started/editor/unity_to_godot.rst:28
msgid "**Mobile:** Android, iOS, Windows Phone, Tizen"
msgstr "**모바일:** Android, iOS, Windows 폰, Tizen"

#: ../../docs/getting_started/editor/unity_to_godot.rst:29
msgid "**Web:** WebAssembly or asm.js"
msgstr "**웹:** WebAssembly이나 asm.js"

#: ../../docs/getting_started/editor/unity_to_godot.rst:30
msgid "**Consoles:** PS4, PS Vita, Xbox One, Xbox 360, Wii U, Nintendo 3DS"
msgstr "**콘솔:** PS4, PS Vita, Xbox One, Xbox 360, Wii U, Nintendo 3DS"

#: ../../docs/getting_started/editor/unity_to_godot.rst:31
msgid ""
"**VR:** Oculus Rift, SteamVR, Google Cardboard, Playstation VR, Gear VR, "
"HoloLens"
msgstr ""
"**VR:** Oculus Rift, SteamVR, Google Cardboard, Playstation VR, Gear VR, "
"HoloLens"

#: ../../docs/getting_started/editor/unity_to_godot.rst:32
msgid "**TV:** Android TV, Samsung SMART TV, tvOS"
msgstr "**TV:** Android TV, Samsung SMART TV, tvOS"

#: ../../docs/getting_started/editor/unity_to_godot.rst:27
msgid "**Desktop:** Windows, macOS, X11"
msgstr "**데스크톱:** Windows, macOS, X11"

#: ../../docs/getting_started/editor/unity_to_godot.rst:28
msgid "**Mobile:** Android, iOS"
msgstr "**모바일:** Android, iOS"

#: ../../docs/getting_started/editor/unity_to_godot.rst:29
msgid "**Web:** WebAssembly"
msgstr "**웹:** WebAssembly"

#: ../../docs/getting_started/editor/unity_to_godot.rst:30
msgid "**Console:** See :ref:`doc_consoles`"
msgstr "**콘솔:** :ref:`doc_consoles` 을 확인하세요"

#: ../../docs/getting_started/editor/unity_to_godot.rst:31
msgid "**VR:** Oculus Rift, SteamVR"
msgstr "**VR:** Oculus Rift, SteamVR"

#: ../../docs/getting_started/editor/unity_to_godot.rst:34
msgid "Scene system"
msgstr "씬 시스템"

#: ../../docs/getting_started/editor/unity_to_godot.rst:34
msgid "Component/Scene (GameObject > Component)"
msgstr "컴포넌트/씬(GameObject > Component)"

#: ../../docs/getting_started/editor/unity_to_godot.rst:35
msgid "Prefabs"
msgstr "프리펩"

#: ../../docs/getting_started/editor/unity_to_godot.rst:34
msgid ""
":ref:`Scene tree and nodes <doc_scenes_and_nodes>`, allowing scenes to be "
"nested and/or inherit other scenes"
msgstr ""
":ref:`Scene tree and nodes <doc_scenes_and_nodes>`, 씬을 중첩하거나 다른 씬"
"을 상속할 수 있습니다"

#: ../../docs/getting_started/editor/unity_to_godot.rst:37
msgid "Third-party tools"
msgstr "타사 도구"

#: ../../docs/getting_started/editor/unity_to_godot.rst:37
msgid "Visual Studio or VS Code"
msgstr "Visual Studio 혹은 VS Code"

#: ../../docs/getting_started/editor/unity_to_godot.rst:37
msgid ":ref:`External editors are possible <doc_external_editor>`"
msgstr ":ref:`External editors are possible <doc_external_editor>`"

#: ../../docs/getting_started/editor/unity_to_godot.rst:38
msgid ":ref:`Android SDK for Android export <doc_exporting_for_android>`"
msgstr ":ref:`Android SDK for Android export <doc_exporting_for_android>`"

#: ../../docs/getting_started/editor/unity_to_godot.rst:40
msgid "Notable advantages"
msgstr "**주목할만한 이점:**"

#: ../../docs/getting_started/editor/unity_to_godot.rst:40
msgid "Huge community"
msgstr "거대한 커뮤니티"

#: ../../docs/getting_started/editor/unity_to_godot.rst:41
msgid "Large assets store"
msgstr "넓은 애셋 스토어"

#: ../../docs/getting_started/editor/unity_to_godot.rst:40
msgid "Scene System"
msgstr "씬 시스템"

#: ../../docs/getting_started/editor/unity_to_godot.rst:41
msgid ":ref:`Animation Pipeline <doc_animations>`"
msgstr ":ref:`애니메이션 파이프라인 <doc_animations>`"

#: ../../docs/getting_started/editor/unity_to_godot.rst:42
msgid ":ref:`Easy to write Shaders <doc_shading_language>`"
msgstr ":ref:`쉽게 셰이더 작성하기 <doc_shading_language>`"

#: ../../docs/getting_started/editor/unity_to_godot.rst:43
msgid "Debug on Device"
msgstr "기기에서 디버그"

#: ../../docs/getting_started/editor/unity_to_godot.rst:50
msgid "The editor"
msgstr "편집기"

#: ../../docs/getting_started/editor/unity_to_godot.rst:52
msgid ""
"Godot Engine provides a rich-featured editor that allows you to build your "
"games. The pictures below display the default layouts of both editors with "
"colored blocks to indicate common functionalities."
msgstr ""
"Godot 엔진은 게임을 제작하기 위한 풍부한 기능을 가진 편집기를 제공합니다. 밑"
"의 사진은 두 편집기의 기본 레이아웃을 보여줍니다. 같은 기능에는 같은 색으로 "
"된 블록으로 표시했습니다."

#: ../../docs/getting_started/editor/unity_to_godot.rst:58
msgid ""
"While both editors may seem similar, there are many differences below the "
"surface. Both let you organize the project using the filesystem, but Godot's "
"approach is simpler with a single configuration file, minimalist text "
"format, and no metadata. This makes Godot more friendly to VCS systems, such "
"as Git, Subversion, or Mercurial."
msgstr ""
"두 편집기 모두 비슷해 보이지만, 내부를 보면 많은 차이점이 있습니다. 두 편집"
"기 모두 파일 시스템으로 프로젝트를 조직할 수 있게 해줍니다. 하지만 Godot의 접"
"근법은 더 간단합니다. 하나의 구성 파일, 최대한 간략하게 만든 문자 형식, 그리"
"고 메타데이터가 없죠. 이 점이 Godot를 Git, Subversion, Mercurial과 같은 버전 "
"관리 시스템(VCS)에 더 친근하게 만들어줍니다."

#: ../../docs/getting_started/editor/unity_to_godot.rst:63
msgid ""
"Godot's Scene panel is similar to Unity's Hierarchy panel but, as each node "
"has a specific function, the approach used by Godot is more visually "
"descriptive. It's easier to understand what a scene does at a glance."
msgstr ""
"Godot의 씬 패널은 Unity의 계층 구조 패널과 유사합니다. 하지만 각 노드가 특정 "
"기능을 갖고 있는 Godot의 특성 상, 이 접근법은 Godot에서 더 시각적으로 이해하"
"기 좋습니다. 씬이 어떤 일을 하는 지 한눈에 이해하기가 더 쉽다는 뜻입니다."

#: ../../docs/getting_started/editor/unity_to_godot.rst:67
msgid ""
"The Inspector in Godot is more minimal, it shows only properties. Thanks to "
"this, objects can expose more useful parameters to the user without having "
"to hide functionality in language APIs. As a plus, Godot allows animating "
"any of those properties visually. Changing colors, textures, enumerations, "
"or even links to resources in real-time is possible without needing to write "
"code."
msgstr ""
"Godot의 인스펙터(Inspector)는 더 간략합니다. 오직 속성만 보여주죠. 덕분에 객"
"체는 언어 API에서 기능을 숨길 필요없이 더 유용한 매개변수를 사용자에게 보여"
"줄 수 있습니다. 게다가 Godot는 모든 속성을 시각적으로 애니메이션을 줄 수 있습"
"니다. 색상을 바꾸거나, 텍스처, 열거, 심지어 리소스에 연결하는 것도 코드를 작"
"성할 필요없이 실시간으로 가능합니다."

#: ../../docs/getting_started/editor/unity_to_godot.rst:72
msgid ""
"The Toolbar at the top of the screen is similar in both editors, offering "
"control over project playback. Projects in Godot run in a separate window, "
"rather than inside the editor (but the tree and objects can still be "
"explored in the debugger window)."
msgstr ""
"화면 상단의 툴바는 두 편집기 모두 유사합니다. 프로젝트 실행을 제어합니다. "
"Godot에서는 프로젝트가 편집기 내에서가 아닌 별개의 창에서 실행됩니다 (하지만 "
"트리와 객체는 디버거 창에서 탐색할 수 있습니다)."

#: ../../docs/getting_started/editor/unity_to_godot.rst:76
msgid ""
"This approach has the disadvantage that in Godot the running game can't be "
"explored from different angles (though this may be supported in the future "
"and displaying collision gizmos in the running game is already possible), "
"but in exchange has several advantages:"
msgstr ""
"이 접근은 실행 중인 게임을 다른 각도롤 볼 수 없다는 단점이 있습니다 (이 기능"
"을 향후 지원할지도 모르고 실행 중인 게임에 충돌 기즈모를 보여주는 것이 이미 "
"가능합니다), 하지만 그 대가로 몇 가지 이점을 갖습니다:"

#: ../../docs/getting_started/editor/unity_to_godot.rst:80
msgid ""
"Running the project and closing it is fast (Unity has to save, run the "
"project, close the project, and then reload the previous state)."
msgstr ""
"프로젝트를 실행하고 종료하는 것이 빠릅니다 (Unity는 저장하고, 프로젝트를 실행"
"하고, 프로젝트를 종료하고, 그리고 이전 상태를 다시 불러와야 합니다)."

#: ../../docs/getting_started/editor/unity_to_godot.rst:81
msgid ""
"Live editing is a lot more useful because changes done to the editor take "
"effect immediately in the game and are not lost (nor have to be synced) when "
"the game is closed. This allows fantastic workflows, like creating levels "
"while you play them."
msgstr ""
"실시간 편집은 편집기에서 변경한 사항이 게임에 즉시 적용되고 게임을 끌 때 (동"
"기화 할 필요도 없이) 사라지지 않으니 훨씬 더 유용합니다. 이것으로 플레이 도"
"중 레벨을 만드는 등의 환상적인 워크플로가 가능합니다."

#: ../../docs/getting_started/editor/unity_to_godot.rst:82
msgid "The editor is more stable because the game runs in a separate process."
msgstr "게임이 별도의 프로세스에서 실행되기 때문에 편집기는 더 안정적입니다."

#: ../../docs/getting_started/editor/unity_to_godot.rst:84
msgid ""
"Finally, Godot's top toolbar includes a menu for remote debugging. These "
"options allow deployment to a device (connected phone, tablet, or browser "
"via HTML5), and debugging/live editing on it after the game is exported."
msgstr ""
"마지막으로 Godot의 상단 툴바에는 원격 디버그를 위한 메뉴가 있습니다. 이 설정"
"으로 (폰, 태블릿에 연결된, 혹은 HTML5를 통한 브라우저와 같은) 기기 환경에서 "
"개발을 할 수 있습니다. 그리고 게임을 내보낸 후 디버깅/실시간 편집이 가능합니"
"다."

#: ../../docs/getting_started/editor/unity_to_godot.rst:89
msgid "The scene system"
msgstr "씬 시스템"

#: ../../docs/getting_started/editor/unity_to_godot.rst:91
msgid ""
"This is the most important difference between Unity and Godot and the "
"favourite feature of most Godot users."
msgstr ""
"Unity와 Godot의 가장 큰 차이점이자 Godot 사용자가 가장 좋아하는 기능입니다."

#: ../../docs/getting_started/editor/unity_to_godot.rst:93
msgid ""
"Working on a 'level' in Unity usually means embedding all the required "
"assets in a scene and linking them together with components and scripts."
msgstr ""
"Unity에서 'Level'에서 작업한다는 것은 보통 모든 필요한 에셋을 한 씬에 묶고, "
"구성 요소와 스크립트로 함께 연결하는 것을 의미합니다."

#: ../../docs/getting_started/editor/unity_to_godot.rst:96
msgid ""
"Godot's scene system is superficially similar to Unity. A 'level' consists "
"of a collection of nodes, each with its own purpose: Sprite, Mesh, Light, "
"etc. However, in Godot the nodes are arranged in a tree. Each node can have "
"multiple children, which makes each a subscene of the main scene. This means "
"you can compose a whole scene with different scenes stored in different "
"files."
msgstr ""
"Godot의 씬 시스템은 Unity와 겉으로는 유사합니다. 'Level'은 노드 모음을 갖고 "
"있으면서, 각 노드는 용도를 지니고 있습니다: Sprite, Mesh, Light 등. 하지만 "
"Godot에서 노드는 트리로 정렬할 수 있습니다. 각 노드는 여러 자식을 가질 수 있"
"고, 자식은 메인 씬의 하위 씬으로 이루어질 수 있습니다. 이는 즉, 다른 파일에 "
"저장된 다른 씬으로 전체 씬을 작업할 수 있다는 것입니다."

#: ../../docs/getting_started/editor/unity_to_godot.rst:99
msgid ""
"For example, think of a platformer level. You would compose it with multiple "
"elements:"
msgstr ""
"예를 들어, 플랫포머 레벨을 생각해보자. 당신은 여러 요소들을 가지고 작업할 것"
"입니다:"

#: ../../docs/getting_started/editor/unity_to_godot.rst:101
msgid "Bricks"
msgstr "벽돌"

#: ../../docs/getting_started/editor/unity_to_godot.rst:102
msgid "Coins"
msgstr "동전"

#: ../../docs/getting_started/editor/unity_to_godot.rst:103
msgid "The player"
msgstr "플레이어"

#: ../../docs/getting_started/editor/unity_to_godot.rst:104
msgid "The enemies"
msgstr "적"

#: ../../docs/getting_started/editor/unity_to_godot.rst:106
msgid ""
"In Unity, you would put all the GameObjects in the scene: the player, "
"multiple instances of enemies, bricks everywhere to form the ground of the "
"level and then multiple instances of coins all over the level. You would "
"then add various components to each element to link them and add logic in "
"the level: For example, you'd add a BoxCollider2D to all the elements of the "
"scene so that they can collide. This principle is different in Godot."
msgstr ""
"Unity에서, 모든 GameObjects를 씬에 넣을 것입니다: 플레이어, 여러 인스턴스 된 "
"적, 레벨을 만드는 벽돌, 그리고 모든 레벨에 있는 여러 인스턴스 된 동전입니다. "
"그런 다음 각 요소들을 연결하고 레벨의 타당성을 주기 위한 다양한 구성 요소를 "
"추가할 것입니다: 예를 들어 모든 요소에 BoxCollider2D를 추가해서 씬의 모든 요"
"소가 충돌할 수 있도록 합니다. 이 원리가 Godot에서는 다릅니다."

#: ../../docs/getting_started/editor/unity_to_godot.rst:111
msgid ""
"In Godot, you would split your whole scene into three separate, smaller "
"scenes, and instance them in the main scene."
msgstr ""
"Godot에서는 전체 씬을 별개의, 더 작은 세 개의 씬으로 나눕니다. 그리고 메인 씬"
"으로 그 씬들을 인스턴스합니다."

#: ../../docs/getting_started/editor/unity_to_godot.rst:113
msgid "**A scene for the Player alone.**"
msgstr "**플레이어만 있는 씬**"

#: ../../docs/getting_started/editor/unity_to_godot.rst:115
msgid ""
"Consider the player as an element we'd like to use in different parent "
"scenes (for instance 'level' scenes). In our case, the player element needs "
"at least an AnimatedSprite node. This node contains the sprite textures "
"necessary for various animations (for example, a walking animation)."
msgstr ""
"플레이어를 다른 부모 씬에서도 사용할 수 있는 요소라고 생각해보세요 (예를 들"
"어 'level' 씬이죠). 이 경우에는 플레이어 요소는 적어도 하나의 AnimatedSprite "
"노드가 필요합니다. 이 노드는 다양한 애니메이션을 주기 위해 스프라이트 텍스처"
"가 반드시 필요합니다 (예를 들어 걷는 애니메이션)."

#: ../../docs/getting_started/editor/unity_to_godot.rst:117
msgid "**A scene for the Enemy.**"
msgstr "**적을 위한 씬**"

#: ../../docs/getting_started/editor/unity_to_godot.rst:119
msgid ""
"An enemy is also an element we'd like to use in several scenes. It's almost "
"the same as the Player node. The only differences are the script (it needs "
"'AI' routines to generate the enemy's behaviour) and the sprite textures "
"used by the AnimatedSprite node."
msgstr ""
"적도 마찬가지로 다양한 씬에서 사용할 수 있는 요소입니다. 플레이어 노드랑 거"
"의 일치합니다. 유일한 차이점은 스크립트입니다 (적의 행동을 만드는 'AI' 루틴"
"이 필요하죠). 그리고 AnimatedSprite 노드에 쓰이는 스프라이트도 다를 것입니다."

#: ../../docs/getting_started/editor/unity_to_godot.rst:123
msgid "**A Level scene.**"
msgstr "**레벨 씬.**"

#: ../../docs/getting_started/editor/unity_to_godot.rst:125
msgid ""
"A Level scene is composed of Bricks (for platforms), Coins (for the player "
"to collect) and a number of instances of the Enemy scene. Each instance is a "
"node in the Level scene tree. These instances are separate enemies, which "
"initially have shared behaviour and appearance as defined in the Enemy "
"scene. You can set different properties for each Enemy node (to change its "
"color, for example)."
msgstr ""
"레벨 씬은 (플랫폼 용도) 블럭과, (플레이어가 모으는) 코인, 그리고 많은 양의 "
"적 씬 인스턴스로 제작됩니다. 각 인스턴스는 레벨 씬 트리의 노드입니다. 이 인스"
"턴스는 개별적인 적으로, 적 씬에서 정의한 대로 초기 값으로 행동과 모습을 공유"
"합니다. 각 적 노드마다 다른 속성을 설정할 수 있습니다 (예를 들어, 색상을 바꾸"
"는 것이 있죠)."

#: ../../docs/getting_started/editor/unity_to_godot.rst:129
msgid ""
"4. **A Main scene.** The Main scene would be composed of one root node with "
"2 children: a Player instance node, and a Level instance node. The root node "
"can be anything, generally a \"root\" type such as \"Node\" which is the "
"most global type, or \"Node2D\" (root type of all 2D-related nodes), "
"\"Spatial\" (root type of all 3D-related nodes) or \"Control\" (root type of "
"all GUI-related nodes)."
msgstr ""
"4. **메인 씬.** 메인 씬은 하나의 루트 노드와 2 개의 자식으로 제작됩니다: 플레"
"이어 인스턴스 노드, 레벨 인스턴스 노드. 루트 나도는 아무거나 가능합니다. 일반"
"적으로 \"루트\" 유형인 노드가 있죠. 가장 전역 유형에 있는 \"Node\", (모든 2D "
"관련 노드의 루트 유형인) \"Node2D\", (모든 3D 관련 노드의 루트 유형인) "
"\"Spatial\", 혹은 (모든 GUI 관련 노드의 루트 유형인) \"Control\"이 있습니다."

#: ../../docs/getting_started/editor/unity_to_godot.rst:135
msgid ""
"As you can see, every scene is organized as a tree. The same goes for nodes' "
"properties: you don't *add* a collision component to a node to make it "
"collidable like Unity does. Instead, you make this node a *child* of a new "
"specific node that has collision properties. Godot features various "
"collision types nodes, depending on the usage (see the :ref:`Physics "
"introduction <doc_physics_introduction>`)."
msgstr ""
"보시다시피, 모든 씬이 트리로 조직됩니다. 노드의 속성도 동일합니다: Unity처럼 "
"노드가 충돌 가능하도록 충돌 구성 요소를 *추가* 할 수는 없습니다. 대신 충돌 속"
"성을 가진 새로운 특정 노드를 *자식* 으로 만들 수 있습니다. Godot는 사용법에 "
"따른 다양한 충돌 타입 노드가 있습니다 (:ref:`물리 소개 "
"<doc_physics_introduction>`\\ 를 참고하세요)."

#: ../../docs/getting_started/editor/unity_to_godot.rst:140
msgid ""
"What are the advantages of this system? Wouldn't this system potentially "
"increase the depth of the scene tree? And doesn't Unity already allow you to "
"organize GameObjects by putting them inside empty GameObjects?"
msgstr ""
"이 시스템의 장점은 뭐가 있나요? 이 시스템이 잠재적으로 씬 트리의 깊이를 늘리"
"진 않을까요? 그리고 Unity는 이미 빈 GameObject에 GameObject를 넣는 것으로 이"
"를 조직하는 것이 가능할텐데요?"

#: ../../docs/getting_started/editor/unity_to_godot.rst:142
msgid ""
"Godot's system is closer to the well-known object-oriented paradigm: Godot "
"provides a number of nodes which are not clearly \"Game Objects\", but they "
"provide their children with their own capabilities: this is inheritance."
msgstr ""
"Godot의 시스템은 잘 알려진 객체 기반 패러다임과 근접합니다: Godot는 많은 노드"
"를 제공하지만 그것이 \"Game Objects\"라고 정의하기는 어렵습니다. 하지만 노드"
"는 자신의 자식에게 자신의 기능을 제공합니다: 이것이 상속입니다."

#: ../../docs/getting_started/editor/unity_to_godot.rst:143
msgid ""
"Godot allows the extraction of a subtree of a scene to make it a scene of "
"its own. So if a scene tree gets too deep, it can be split into smaller "
"subtrees. This is better for reusability, as you can include any subtree as "
"a child of any node. Putting multiple GameObjects in an empty GameObject in "
"Unity does not provide the same functionality."
msgstr ""
"Godot는 씬의 하위 씬을 추출해서 자체적인 씬을 만드는 것이 가능합니다. 따라서 "
"씬 트리가 너무 깊어지면, 더 작은 하위 씬으로 분리하는 것이 가능합니다. 이 점"
"으로 노드와 자식이 있으면 하위 씬을 만들 수 있기 때문에 재활용성에 더 좋습니"
"다. Unity에서 빈 GameObject에 여러 GameObject를 넣는 방식은 같은 기능을 제공"
"하지 못합니다."

#: ../../docs/getting_started/editor/unity_to_godot.rst:146
#: ../../docs/getting_started/workflow/project_setup/project_organization.rst:4
msgid "Project organization"
msgstr "프로젝트 조직"

#: ../../docs/getting_started/editor/unity_to_godot.rst:150
msgid ""
"There is no perfect project architecture. Any architecture can be made to "
"work in either Unity and Godot."
msgstr ""
"완벽한 프로젝트 구조라는 것은 없습니다. 어떤 구조라도 Unity와 Godot에서 작업"
"을 위해 만들 수 있습니다."

#: ../../docs/getting_started/editor/unity_to_godot.rst:153
msgid ""
"However, a common architecture for Unity projects is to have one Assets "
"folder in the root directory that contains various folders, one per type of "
"asset: Audio, Graphics, Models, Materials, Scripts, Scenes, and so on."
msgstr ""
"하지만 Unity 프로젝트를 위한 일반적인 구조는 루트 디렉토리에 하나의 Assets 폴"
"더를 갖는 것입니다. 여기에는 다양한 폴더가 있으며 각 폴더마다 하나의 유형의 "
"파일이 있습니다: 오디오, 그래픽, 모델, 머티리얼, 스크립트, 장면 등."

#: ../../docs/getting_started/editor/unity_to_godot.rst:156
msgid ""
"Since Godot allows splitting scenes into smaller scenes, each scene and "
"subscene existing as a file in the project, we recommend organizing your "
"project a bit differently. This wiki provides a page for this: :ref:"
"`doc_project_organization`."
msgstr ""
"Godot는 씬을 더 작은 씬으로 분리할 수 있으므로, 프로젝트에서 각 씬과 하위 씬"
"은 하나의 파일로 존재합니다. 프로젝트를 조금 다르게 조직하는 것을 추천합니"
"다. 여기서는 프로젝트 조직을 알려주는 페이지를 알려 드리겠습니다: :ref:"
"`doc_project_organization`."

#: ../../docs/getting_started/editor/unity_to_godot.rst:161
msgid "Where are my prefabs?"
msgstr "프리펩은 어디갔나요?"

#: ../../docs/getting_started/editor/unity_to_godot.rst:163
msgid ""
"A prefab as provided by Unity is a 'template' element of the scene. It is "
"reusable, and each instance of the prefab that exists in the scene has an "
"existence of its own, but all of them have the same properties as defined by "
"the prefab."
msgstr ""
"Unity가 제공하는 프리펩의 개념은 씬의 '템플릿' 요소입니다. 다시 사용할 수 있"
"고, 장면에서 프리펩의 각 인스턴스는 스스로 존재합니다. 하지만 모든 인스턴스"
"는 프리펩에서 정의한 똑같은 속성을 갖고 있습니다."

#: ../../docs/getting_started/editor/unity_to_godot.rst:167
msgid ""
"Godot does not provide prefabs as such, but the same functionality is "
"provided by its scene system: The scene system is organized as a tree. Godot "
"allows you to save any subtree of a scene as a scene file. This new scene "
"can then be instanced as many times as you want, as a child of any node. Any "
"change you make to this new, separate scene will be applied to its "
"instances. However, any change you make to the instance will not have any "
"impact on the 'template' scene."
msgstr ""
"Godot에서는 그러한 프리펩을 제공하지 않지만, 씬 시스템으로 같은 기능을 제공합"
"니다: 씬 시스템은 트리로 조직됩니다. Godot는 씬의 하위 트리를 씬 파일로 저장"
"할 수 있습니다. 이 새로운 씬은 노드의 자식으로 원하는 만큼 인스턴스할 수 있습"
"니다. 앞에서 만든 하위 트리로 만든 씬에서 일어난 변경 사항은 인스턴스로 적용"
"될 것입니다. 하지만 인스턴스에서 일어난 변경 사항은 '템플릿' 씬에게 영향을 주"
"지 않을 것입니다."

#: ../../docs/getting_started/editor/unity_to_godot.rst:174
msgid ""
"To be precise, you can modify the parameters of an instance in the Inspector "
"panel. The nodes that compose this instance are initially locked. You can "
"unlock them if you need to by right-clicking the instance in the Scene tree "
"and selecting \"Editable children\" in the menu. You don't need to do this "
"to add *new* child nodes to this node. Remember that any new children will "
"belong to the instance, not to the 'template' scene on disk. If you want to "
"add new children to every instance of your 'template' scene, then you should "
"add them in the 'template' scene."
msgstr ""
"정확히는, 인스펙터(Inspector) 패널에서 인스턴스의 매개변수를 수정할 수 잇습니"
"다. 이 인스턴스를 만든 노드는 초기값이 고정되어 있습니다. 고정 값을 풀고 싶다"
"면 씬 트리에서 인스턴스를 우클릭한 뒤, 메뉴에서 \"편집할 수 있는 자식"
"(Editable children)\"을 선택하세요. 이 노드에 *새로운* 자식 노드를 추가할 필"
"요가 없습니다. 모든 새 자식은 인스턴스에 속하는 것이지, 디스크에 있는 '템플"
"릿' 씬에 속하는 것이 아님을 명심하세요. '템플릿' 씬의 모든 인스턴스에게 새 자"
"식을 추가하고 싶다면, 자식은 '템플릿' 씬에 추가해야 할 것입니다."

#: ../../docs/getting_started/editor/unity_to_godot.rst:184
msgid "Glossary correspondence"
msgstr "어휘 일치"

#: ../../docs/getting_started/editor/unity_to_godot.rst:186
msgid "GameObject -> Node"
msgstr "GameObject -> 노드"

#: ../../docs/getting_started/editor/unity_to_godot.rst:187
msgid "Add a component -> Inheriting"
msgstr "컴포넌트 추가 -> 상속"

#: ../../docs/getting_started/editor/unity_to_godot.rst:188
msgid "Prefab -> Reusable Scene file"
msgstr "프리펩 -> 다시 사용할 수 있는 씬 파일"

#: ../../docs/getting_started/editor/unity_to_godot.rst:192
msgid "Scripting: GDScript, C# and Visual Script"
msgstr "스크립팅: GDScript, C# and Visual Script"

#: ../../docs/getting_started/editor/unity_to_godot.rst:195
msgid "Design"
msgstr "디자인"

#: ../../docs/getting_started/editor/unity_to_godot.rst:197
msgid ""
"Unity supports C#. C# benefits from its integration with Visual Studio and "
"has desirable features such as static typing."
msgstr ""
"Unity는 C#을 지원합니다. C#은 Visual Studio와의 통합의 이점이 있고 정적 타이"
"핑과 같은 바람직한 기능을 갖고 있습니다."

#: ../../docs/getting_started/editor/unity_to_godot.rst:199
msgid ""
"Godot provides its own scripting language, :ref:`GDScript <doc_scripting>` "
"as well as support for :ref:`Visual Script <toc-learn-scripting-"
"visual_script>` and :ref:`C# <doc_c_sharp>`. GDScript borrows its syntax "
"from Python, but is not related to it. If you wonder about the reasoning for "
"a custom scripting language, please read the :ref:`doc_gdscript` and :ref:"
"`doc_faq` pages. GDScript is strongly attached to the Godot API and doesn't "
"take long to learn: Between one evening for an experienced programmer and a "
"week for a complete beginner."
msgstr ""
"Godot는 독자적인 스크립트 언어를 제공합니다, :ref:`GDScript <doc_scripting>`"
"\\ 와 :ref:`Visual Script <toc-learn-scripting-visual_script>`, 그리고 :ref:"
"`doc_c_sharp`. GDScript는 Python의 문법을 빌려왔지만 관련은 없습니다. 왜 맞"
"춤 스크립트 언어에 대해 궁금하다면, :ref:`doc_gdscript`\\ 와 :ref:`doc_faq` "
"페이지를 참고해주세요. GDScript는 Godot API와 강하게 연결되어 있으면서도 배우"
"는데 오래 걸리지 않습니다: 전문적인 프로그래머와 저번 주에 막 시작한 컴퓨터 "
"초보자에게도 말이죠."

#: ../../docs/getting_started/editor/unity_to_godot.rst:205
msgid ""
"Unity allows you to attach as many scripts as you want to a GameObject. Each "
"script adds a behaviour to the GameObject: For example, you can attach a "
"script so that it reacts to the player's controls, and another that controls "
"its specific game logic."
msgstr ""
"Unity는 GameObject에 원하는 만큼의 스크립트를 붙일 수 있습니다. 각 스크립트"
"는 GameObject에 행동을 추가합니다: 예를 들어 스크립트를 붙여서 플레이어의 조"
"작이나 특정 게임을 조작하는 다른 것을 넣을 수 있습니다."

#: ../../docs/getting_started/editor/unity_to_godot.rst:209
msgid ""
"In Godot, you can only attach one script per node. You can use either an "
"external GDScript file or include the script directly in the node. If you "
"need to attach more scripts to one node, then you may consider two "
"solutions, depending on your scene and on what you want to achieve:"
msgstr ""
"Godot에서, 우리는 각 노드에 하나의 스크립트만 붙일 수 있습니다. 외부 "
"GDScript 파일이나 노드에 스크립트를 직접 넣어서 사용할 수 있습니다. 한 노드"
"에 더 많은 스크립트를 붙이고 싶다면, 씬이랑 원하는 것을 얻기 위해, 두 가지 방"
"안을 고려하셔야 합니다:"

#: ../../docs/getting_started/editor/unity_to_godot.rst:213
msgid ""
"either add a new node between your target node and its current parent, then "
"add a script to this new node."
msgstr ""
"대상 노드와 현재 부모 노드 사이에 새 노드를 추가 한 다음, 이 노드에 스크립트"
"를 추가합니다."

#: ../../docs/getting_started/editor/unity_to_godot.rst:214
msgid ""
"or, you can split your target node into multiple children and attach one "
"script to each of them."
msgstr ""
"또는, 대상 노드를 여러 자식 노드로 분할하고 각각마다 하나의 스크립트를 붙일 "
"수 있습니다."

#: ../../docs/getting_started/editor/unity_to_godot.rst:216
msgid ""
"As you can see, it can be easy to turn a scene tree to a mess. Consider "
"splitting any complicated scene into multiple, smaller branches."
msgstr ""
"보다시피, 씬 트리는 쉽게 엉망이 될 수 있습니다. 복잡한 씬을 여러 개의, 더 작"
"은 분기로 나누는 것을 생각해보세요."

#: ../../docs/getting_started/editor/unity_to_godot.rst:219
msgid "Connections: groups and signals"
msgstr "연결: 그룹과 시그널"

#: ../../docs/getting_started/editor/unity_to_godot.rst:221
msgid ""
"You can control nodes by accessing them via script and calling built-in or "
"user-defined functions on them. You can also place nodes in a group and call "
"functions on all nodes in this group. See more in the :ref:`scripting "
"documentation <doc_scripting_continued>`."
msgstr ""
"스크립트를 통해 노드에 접근하고 노드에서 내장 함수나 사용자가 정의한 함수를 "
"호출하여 노드를 제어할 수 있습니다. 그리고 노드를 그룹에 배치하거나 이 그룹"
"에 있는 모든 노드에서 함수를 호출할 수도 있습니다. 자세한 것은 :ref:`스크립"
"팅 문서 <doc_scripting_continued>`\\ 를 참고하세요."

#: ../../docs/getting_started/editor/unity_to_godot.rst:226
msgid ""
"Nodes can send a signal when a specified action occurs. A signal can be set "
"to call any function. You can define custom signals and specify when they "
"are triggered. See more in the :ref:`signals documentation "
"<doc_gdscript_signals>`."
msgstr ""
"노드는 특정 동작이 발생할 때 시그널을 보냅니다. 시그널은 함수를 호출하도록 설"
"정될 수 있습니다. 맞춤 시그널을 정의하고 언제 시그널을 보낼 지를 지정할 수 있"
"습니다. 자세한 설명은 :ref:`시그널 문서 <doc_gdscript_signals>`\\ 를 참고하세"
"요."

#: ../../docs/getting_started/editor/unity_to_godot.rst:231
msgid "Script serialization"
msgstr "스크립트 직렬화"

#: ../../docs/getting_started/editor/unity_to_godot.rst:233
msgid "Unity can handle script serialization in two ways:"
msgstr "Unity는 두 가지 방법으로 스크립트 직렬화를 다룰 수 있습니다:"

#: ../../docs/getting_started/editor/unity_to_godot.rst:235
msgid ""
"Implicit: All public fields in a class are automatically serialized if the "
"type is a serializable type (``Dictionary`` is not serializable)."
msgstr ""
"Implicit(암시적):  한 클래스의 모든 퍼블릭 필드가 직렬화 할 수 있는 타입이면 "
"(``Dictionary``\\ 는 직렬화 할 수 없음) 자동으로 직렬화 됩니다."

#: ../../docs/getting_started/editor/unity_to_godot.rst:236
msgid ""
"Explicit: Non-public fields can be serialized using the ``[SerializeField]`` "
"attribute."
msgstr ""
"Explicit(명시적): 비 퍼블릭 필드를 ``[SerializeField]`` 속성을 사용하여 직렬"
"화 되도록 할 수 있습니다."

#: ../../docs/getting_started/editor/unity_to_godot.rst:238
msgid ""
"Godot also has a built-in script serialization system, but it works only "
"explicitly. You can serialize any serializable type (:ref:`built-in and "
"various engine types <doc_binary_serialization_api>`, including :ref:"
"`class_Array` and :ref:`class_Dictionary`) using the ``export`` keyword. See "
"the :ref:`exports documentation <doc_gdscript_exports>` for details."
msgstr ""
"Godot 또한 내장 스크립트 직렬화 시스템을 갖추고 있지만, 오직 명시적으로만 작"
"동합니다. 어떤 직렬화 가능한 타입이라도 (:ref:`class_Array`\\ 와 :ref:"
"`class_Dictionary`\\ 를 포함한, :ref:`내장 그리고 다양한 엔진 타입 "
"<doc_binary_serialization_api>`) ``export`` 키워드를 사용해 직렬화 할 수 있습"
"니다. 자세한 설명은 :ref:`내보내기 문서 <doc_gdscript_exports>`\\ 를 참고하세"
"요."

#: ../../docs/getting_started/editor/unity_to_godot.rst:243
msgid ""
"Unity also has a data type called ``ScriptableObject`` used to serialize "
"custom asset objects. Its equivalent in Godot is the base class for all "
"resources: :ref:`class_Resource`. Creating a script that inherits :ref:"
"`class_Resource` will allow you to create custom serializable objects. More "
"information about resources can be found :ref:`here <doc_resources>`."
msgstr ""
"Unity 또한 맞춤 애셋 객체를 직렬화 하기 위해 사용되는 ``ScriptableObject`` 라"
"는 데이터 타입을 갖고 있습니다. Godot에서 이것은 모든 리소스의 기본 클래스에 "
"해당합니다: :ref:`class_Resource`. :ref:`class_Resource`\\ 를 상속하는 스크립"
"트를 만드는 것으로 맞춤 직렬화 가능한 객체를 만들 수 있게 됩니다. 리소스에 관"
"한 더 많은 정보는 :ref:`여기서 <doc_resources>` 볼 수 있습니다."

#: ../../docs/getting_started/editor/unity_to_godot.rst:248
msgid "Using Godot in C++"
msgstr "C++로 Godot 사용하기"

#: ../../docs/getting_started/editor/unity_to_godot.rst:250
msgid ""
"Godot allows you to develop your project directly in C++ by using its API, "
"which is not possible with Unity at the moment. As an example, you can "
"consider Godot Engine's editor as a \"game\" written in C++ using the Godot "
"API."
msgstr ""
"Godot는 API를 사용하여 C++로 프로젝트를 직접 개발할 수 있게 해줍니다, 이는 현"
"재 Unity에서는 불가능합니다. 예를 들어 Godot 엔진의 편집기를 Godot API를 사용"
"하는 C++로 작성된 \"게임\"으로 간주할 수 있습니다."

#: ../../docs/getting_started/editor/unity_to_godot.rst:253
msgid ""
"If you are interested in using Godot in C++, you may want to start reading "
"the :ref:`Developing in C++ <doc_introduction_to_godot_development>` page."
msgstr ""
"C++로 Godot를 사용하는 것에 관심이 있으시다면, :ref:`C++로 개발하기 "
"<doc_introduction_to_godot_development>` 페이지를 읽고 시작하시면 됩니다."

#: ../../docs/getting_started/editor/command_line_tutorial.rst:4
msgid "Command line tutorial"
msgstr "명령줄(Command line) 튜토리얼"

#: ../../docs/getting_started/editor/command_line_tutorial.rst:8
msgid ""
"Some developers like using the command line extensively. Godot is designed "
"to be friendly to them, so here are the steps for working entirely from the "
"command line. Given the engine relies on almost no external libraries, "
"initialization times are pretty fast, making it suitable for this workflow."
msgstr ""
"일부 개발자들은 명령줄을 광범위하게 사용하는 것을 좋아합니다. Godot는 그들에"
"게 친절하게 설계되었고, 명령줄에서 완전히 작업하는 순서가 있습니다. 엔진은 외"
"부 라이브러리에 거의 의존하지 않아서, 초기화 시간이 매우 빠르고, 이 워크플로"
"에 적합하게 만듭니다."

#: ../../docs/getting_started/editor/command_line_tutorial.rst:15
msgid "Command line reference"
msgstr "명령줄 참조"

#: ../../docs/getting_started/editor/command_line_tutorial.rst:17
msgid "**General options**"
msgstr "**일반적인 설정**"

#: ../../docs/getting_started/editor/command_line_tutorial.rst:20
#: ../../docs/getting_started/editor/command_line_tutorial.rst:34
#: ../../docs/getting_started/editor/command_line_tutorial.rst:62
#: ../../docs/getting_started/editor/command_line_tutorial.rst:90
#: ../../docs/getting_started/editor/command_line_tutorial.rst:120
#: ../../docs/tutorials/gui/bbcode_in_richtextlabel.rst:51
msgid "Command"
msgstr "명령"

#: ../../docs/getting_started/editor/command_line_tutorial.rst:20
#: ../../docs/getting_started/editor/command_line_tutorial.rst:34
#: ../../docs/getting_started/editor/command_line_tutorial.rst:62
#: ../../docs/getting_started/editor/command_line_tutorial.rst:90
#: ../../docs/getting_started/editor/command_line_tutorial.rst:120
#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:165
#: ../../docs/getting_started/workflow/assets/importing_images.rst:93
#: ../../docs/tutorials/inputs/inputevent.rst:130
#: ../../docs/tutorials/gui/bbcode_in_richtextlabel.rst:51
#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:21
#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:539
#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:585
#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:649
#: ../../docs/tutorials/shading/shading_reference/spatial_shader.rst:15
#: ../../docs/tutorials/shading/shading_reference/spatial_shader.rst:125
#: ../../docs/tutorials/shading/shading_reference/spatial_shader.rst:179
#: ../../docs/tutorials/shading/shading_reference/spatial_shader.rst:292
#: ../../docs/tutorials/shading/shading_reference/canvas_item_shader.rst:17
#: ../../docs/tutorials/shading/shading_reference/canvas_item_shader.rst:95
#: ../../docs/tutorials/shading/shading_reference/canvas_item_shader.rst:144
#: ../../docs/tutorials/shading/shading_reference/canvas_item_shader.rst:195
#: ../../docs/tutorials/shading/shading_reference/particle_shader.rst:30
#: ../../docs/tutorials/shading/shading_reference/particle_shader.rst:51
#: ../../docs/tutorials/shading/migrating_to_godot_shader_language.rst:92
#: ../../docs/tutorials/shading/migrating_to_godot_shader_language.rst:158
#: ../../docs/tutorials/shading/migrating_to_godot_shader_language.rst:218
#: ../../docs/tutorials/plugins/editor/import_plugins.rst:240
#: ../../docs/tutorials/misc/binary_serialization_api.rst:92
#: ../../docs/tutorials/misc/binary_serialization_api.rst:101
#: ../../docs/tutorials/misc/binary_serialization_api.rst:110
#: ../../docs/tutorials/misc/binary_serialization_api.rst:119
#: ../../docs/tutorials/misc/binary_serialization_api.rst:132
#: ../../docs/tutorials/misc/binary_serialization_api.rst:143
#: ../../docs/tutorials/misc/binary_serialization_api.rst:158
#: ../../docs/tutorials/misc/binary_serialization_api.rst:171
#: ../../docs/tutorials/misc/binary_serialization_api.rst:190
#: ../../docs/tutorials/misc/binary_serialization_api.rst:205
#: ../../docs/tutorials/misc/binary_serialization_api.rst:220
#: ../../docs/tutorials/misc/binary_serialization_api.rst:239
#: ../../docs/tutorials/misc/binary_serialization_api.rst:264
#: ../../docs/tutorials/misc/binary_serialization_api.rst:295
#: ../../docs/tutorials/misc/binary_serialization_api.rst:310
#: ../../docs/tutorials/misc/binary_serialization_api.rst:319
#: ../../docs/tutorials/misc/binary_serialization_api.rst:330
#: ../../docs/tutorials/misc/binary_serialization_api.rst:340
#: ../../docs/tutorials/misc/binary_serialization_api.rst:359
#: ../../docs/tutorials/misc/binary_serialization_api.rst:371
#: ../../docs/tutorials/misc/binary_serialization_api.rst:383
#: ../../docs/tutorials/misc/binary_serialization_api.rst:396
#: ../../docs/tutorials/misc/binary_serialization_api.rst:407
#: ../../docs/tutorials/misc/binary_serialization_api.rst:418
#: ../../docs/tutorials/misc/binary_serialization_api.rst:426
#: ../../docs/tutorials/misc/binary_serialization_api.rst:439
#: ../../docs/tutorials/misc/binary_serialization_api.rst:452
#: ../../docs/tutorials/misc/binary_serialization_api.rst:467
msgid "Description"
msgstr "설명"

#: ../../docs/getting_started/editor/command_line_tutorial.rst:22
msgid "``-h``, ``--help``, ``/?``"
msgstr "``-h``, ``--help``, ``/?``"

#: ../../docs/getting_started/editor/command_line_tutorial.rst:22
msgid "Display the list of command line options."
msgstr "명령줄 설정 목록을 표시합니다."

#: ../../docs/getting_started/editor/command_line_tutorial.rst:24
msgid "``--version``"
msgstr "``--version``"

#: ../../docs/getting_started/editor/command_line_tutorial.rst:24
msgid "Display the version string."
msgstr "버전 문자열을 표시합니다."

#: ../../docs/getting_started/editor/command_line_tutorial.rst:26
msgid "``-v``, ``--verbose``"
msgstr "``-v``, ``--verbose``"

#: ../../docs/getting_started/editor/command_line_tutorial.rst:26
msgid "Use verbose stdout mode."
msgstr "Verbose 표준 출력 모드를 사용합니다."

#: ../../docs/getting_started/editor/command_line_tutorial.rst:28
msgid "``--quiet``"
msgstr "``--quiet``"

#: ../../docs/getting_started/editor/command_line_tutorial.rst:28
msgid "Quiet mode, silences stdout messages. Errors are still displayed."
msgstr "조용한 모드. 표준 출력 메시지를 내지 않습니다. 오류는 계속 표시됩니다."

#: ../../docs/getting_started/editor/command_line_tutorial.rst:31
msgid "**Run options**"
msgstr "**실행 설정**"

#: ../../docs/getting_started/editor/command_line_tutorial.rst:36
msgid "``-e``, ``--editor``"
msgstr "``-e``, ``--editor``"

#: ../../docs/getting_started/editor/command_line_tutorial.rst:36
msgid ""
"Start the editor instead of running the scene (:ref:`tools "
"<doc_introduction_to_the_buildsystem_tools>` must be enabled)."
msgstr ""
"씬을 실행하는 대신 편집기를 시작합니다 (:ref:`tools "
"<doc_introduction_to_the_buildsystem_tools>`\\ 이 켜져있어야 합니다)."

#: ../../docs/getting_started/editor/command_line_tutorial.rst:38
msgid "``-p``, ``--project-manager``"
msgstr "``-p``, ``--project-manager``"

#: ../../docs/getting_started/editor/command_line_tutorial.rst:38
msgid ""
"Start the project manager, even if a project is auto-detected (:ref:`tools "
"<doc_introduction_to_the_buildsystem_tools>` must be enabled)."
msgstr ""
"프로젝트가 자동으로 감지되어도, 프로젝트 매니저를 먼저 시작합니다. (:ref:"
"`tools <doc_introduction_to_the_buildsystem_tools>`\\ 이 켜져 있어야 합니다)."

#: ../../docs/getting_started/editor/command_line_tutorial.rst:40
msgid "``-q``, ``--quit``"
msgstr "``-q``, ``--quit``"

#: ../../docs/getting_started/editor/command_line_tutorial.rst:40
msgid "Quit after the first iteration."
msgstr "첫 반복 이후에 종료합니다."

#: ../../docs/getting_started/editor/command_line_tutorial.rst:42
msgid "``-l <locale>``, ``--language <locale>``"
msgstr "``-l <locale>``, ``--language <locale>``"

#: ../../docs/getting_started/editor/command_line_tutorial.rst:42
msgid ""
"Use a specific locale (<locale> being a two-letter code). See :ref:"
"`doc_locales` for more details."
msgstr ""
"특정 로케일 (두 문장 코드로 된 <locale>)을 사용합니다. 더 자세한 정보는 :ref:"
"`doc_locales`\\ 을 참고하세요."

#: ../../docs/getting_started/editor/command_line_tutorial.rst:44
msgid "``--path <directory>``"
msgstr "``--path <directory>``"

#: ../../docs/getting_started/editor/command_line_tutorial.rst:44
msgid "Path to a project (<directory> must contain a 'project.godot' file)."
msgstr ""
"프로젝트를 향하는 경로 (<directory>에는 'project.godot' 파일이 있어야 합니"
"다)."

#: ../../docs/getting_started/editor/command_line_tutorial.rst:46
msgid "``-u``, ``--upwards``"
msgstr "``-u``, ``--upwards``"

#: ../../docs/getting_started/editor/command_line_tutorial.rst:46
msgid "Scan folders upwards for 'project.godot' file."
msgstr "'project.godot' 파일을 찾기 위해 위로 폴더를 스캔합니다."

#: ../../docs/getting_started/editor/command_line_tutorial.rst:48
msgid "``--main-pack <file>``"
msgstr "``--main-pack <file>``"

#: ../../docs/getting_started/editor/command_line_tutorial.rst:48
msgid "Path to a pack (.pck) file to load."
msgstr "불러올 팩 (.pck) 파일을 향하는 경로."

#: ../../docs/getting_started/editor/command_line_tutorial.rst:50
msgid "``--render-thread <mode>``"
msgstr "``--render-thread <mode>``"

#: ../../docs/getting_started/editor/command_line_tutorial.rst:50
msgid ""
"Render thread mode ('unsafe', 'safe', 'separate'). See :ref:`Thread Model "
"<class_ProjectSettings_property_rendering/threads/thread_model>` for more "
"details."
msgstr ""
"렌더 스레드 모드 ('unsafe', 'safe', 'separate'). 더 자세한 정보는 :ref:"
"`Thread Model <class_ProjectSettings_property_rendering/threads/"
"thread_model>`\\ 를 참고하세요."

#: ../../docs/getting_started/editor/command_line_tutorial.rst:52
msgid "``--remote-fs <address>``"
msgstr "``--remote-fs <address>``"

#: ../../docs/getting_started/editor/command_line_tutorial.rst:52
msgid "Remote filesystem (``<host/IP>[:<port>]`` address)."
msgstr "원격 파일 시스템 (``<host/IP>[:<port>]`` 주소)."

#: ../../docs/getting_started/editor/command_line_tutorial.rst:54
msgid "``--audio-driver <driver>``"
msgstr "``--audio-driver <driver>``"

#: ../../docs/getting_started/editor/command_line_tutorial.rst:54
msgid ""
"Audio driver. Use ``--help`` first to display the list of available drivers."
msgstr ""
"오디오 드라이버. 사용할 수 있는 드라이버 목록을 표시하려면 ``--help``\\ 를 먼"
"저 사용하세요."

#: ../../docs/getting_started/editor/command_line_tutorial.rst:56
msgid "``--video-driver <driver>``"
msgstr "``--video-driver <driver>``"

#: ../../docs/getting_started/editor/command_line_tutorial.rst:56
msgid ""
"Video driver. Use ``--help`` first to display the list of available drivers."
msgstr ""
"비디오 드라이버. 사용할 수 있는 드라이버 목록을 표시하려면 ``--help``\\ 를 먼"
"저 사용하세요."

#: ../../docs/getting_started/editor/command_line_tutorial.rst:59
msgid "**Display options**"
msgstr "**디스플레이 설정**"

#: ../../docs/getting_started/editor/command_line_tutorial.rst:64
msgid "``-f``, ``--fullscreen``"
msgstr "``-f``, ``--fullscreen``"

#: ../../docs/getting_started/editor/command_line_tutorial.rst:64
msgid "Request fullscreen mode."
msgstr "전체화면 모드를 요청합니다."

#: ../../docs/getting_started/editor/command_line_tutorial.rst:66
msgid "``-m``, ``--maximized``"
msgstr "``-m``, ``--maximized``"

#: ../../docs/getting_started/editor/command_line_tutorial.rst:66
msgid "Request a maximized window."
msgstr "최대화된 창을 요청합니다."

#: ../../docs/getting_started/editor/command_line_tutorial.rst:68
msgid "``-w``, ``--windowed``"
msgstr "``-w``, ``--windowed``"

#: ../../docs/getting_started/editor/command_line_tutorial.rst:68
msgid "Request windowed mode."
msgstr "창모드를 요청합니다."

#: ../../docs/getting_started/editor/command_line_tutorial.rst:70
msgid "``-t``, ``--always-on-top``"
msgstr "``-t``, ``--always-on-top``"

#: ../../docs/getting_started/editor/command_line_tutorial.rst:70
msgid "Request an always-on-top window."
msgstr "항상 위로 고정된(always-on-top) 창을 요청합니다."

#: ../../docs/getting_started/editor/command_line_tutorial.rst:72
msgid "``--resolution <W>x<H>``"
msgstr "``--resolution <W>x<H>``"

#: ../../docs/getting_started/editor/command_line_tutorial.rst:72
msgid "Request window resolution."
msgstr "창 해상도를 요청합니다."

#: ../../docs/getting_started/editor/command_line_tutorial.rst:74
msgid "``--position <X>,<Y>``"
msgstr "``--position <X>,<Y>``"

#: ../../docs/getting_started/editor/command_line_tutorial.rst:74
msgid "Request window position."
msgstr "창 위치를 요청합니다."

#: ../../docs/getting_started/editor/command_line_tutorial.rst:76
msgid "``--low-dpi``"
msgstr "``--low-dpi``"

#: ../../docs/getting_started/editor/command_line_tutorial.rst:76
msgid "Force low-DPI mode (macOS and Windows only)."
msgstr "낮은 DPI 모드를 강제합니다 (macOS와 Windows만 가능)."

#: ../../docs/getting_started/editor/command_line_tutorial.rst:78
msgid "``--no-window``"
msgstr "``--no-window``"

#: ../../docs/getting_started/editor/command_line_tutorial.rst:78
msgid ""
"Disable window creation (Windows only). Useful together with ``--script``."
msgstr ""
"창 만들기를 끕니다 (Windows만 가능). ``--script``\\ 와 함께 쓰면 유용합니다."

#: ../../docs/getting_started/editor/command_line_tutorial.rst:81
msgid "**Debug options**"
msgstr "**디버그 설정**"

#: ../../docs/getting_started/editor/command_line_tutorial.rst:85
msgid ""
"Debug options are only available in the editor and debug export templates "
"(they require ``debug`` or ``release_debug`` build targets, see :ref:"
"`doc_introduction_to_the_buildsystem_target` for more details)."
msgstr ""
"디버그 설정은 편집기와 디버그 내보내기 템플릿에서만 사용할 수 있습니다 "
"(``debug`` 또는 ``release_debug`` 빌드 대상이 필요합니다. 더 자세한 정보는 :"
"ref:`doc_introduction_to_the_buildsystem_target`\\ 을 참고하세요)."

#: ../../docs/getting_started/editor/command_line_tutorial.rst:92
msgid "``-d``, ``--debug``"
msgstr "``-d``, ``--debug``"

#: ../../docs/getting_started/editor/command_line_tutorial.rst:92
msgid "Debug (local stdout debugger)."
msgstr "디버그 (지역 표준 디버거)."

#: ../../docs/getting_started/editor/command_line_tutorial.rst:94
msgid "``-b``, ``--breakpoints``"
msgstr "``-b``, ``--breakpoints``"

#: ../../docs/getting_started/editor/command_line_tutorial.rst:94
msgid ""
"Breakpoint list as source::line comma-separated pairs, no spaces (use %%20 "
"instead)."
msgstr ""
"중단점 목록. 소스::라인으로 쉼표로 구분되며, 공백이 없습니다 (대신 %%20을 사"
"용합니다)."

#: ../../docs/getting_started/editor/command_line_tutorial.rst:96
msgid "``--profiling``"
msgstr "``--profiling``"

#: ../../docs/getting_started/editor/command_line_tutorial.rst:96
msgid "Enable profiling in the script debugger."
msgstr "스크립트 디버거에서 프로파일링을 켭니다."

#: ../../docs/getting_started/editor/command_line_tutorial.rst:98
msgid "``--remote-debug <address>``"
msgstr "``--remote-debug <address>``"

#: ../../docs/getting_started/editor/command_line_tutorial.rst:98
msgid "Remote debug (``<host/IP>:<port>`` address)."
msgstr "원격 디버그 (``<host/IP>:<port>`` 주소)."

#: ../../docs/getting_started/editor/command_line_tutorial.rst:100
msgid "``--debug-collisions``"
msgstr "``--debug-collisions``"

#: ../../docs/getting_started/editor/command_line_tutorial.rst:100
msgid "Show collision shapes when running the scene."
msgstr "씬을 실행할 때 충돌 모양을 보이기."

#: ../../docs/getting_started/editor/command_line_tutorial.rst:102
msgid "``--debug-navigation``"
msgstr "``--debug-navigation``"

#: ../../docs/getting_started/editor/command_line_tutorial.rst:102
msgid "Show navigation polygons when running the scene."
msgstr "씬을 실행할 때 내비게이션 폴리곤을 보이기."

#: ../../docs/getting_started/editor/command_line_tutorial.rst:104
msgid "``--frame-delay <ms>``"
msgstr "``--frame-delay <ms>``"

#: ../../docs/getting_started/editor/command_line_tutorial.rst:104
msgid "Simulate high CPU load (delay each frame by <ms> milliseconds)."
msgstr "높은 CPU 점유율을 시험합니다 (각 프레임을 <ms> 밀리초만큼 지연합니다)."

#: ../../docs/getting_started/editor/command_line_tutorial.rst:106
msgid "``--time-scale <scale>``"
msgstr "``--time-scale <scale>``"

#: ../../docs/getting_started/editor/command_line_tutorial.rst:106
msgid "Force time scale (higher values are faster, 1.0 is normal speed)."
msgstr ""
"실행 시간 규모를 제한합니다 (1.0이 기본 속도이며, 높은 값일 수록 더 빠릅니"
"다)."

#: ../../docs/getting_started/editor/command_line_tutorial.rst:108
msgid "``--disable-render-loop``"
msgstr "``--disable-render-loop``"

#: ../../docs/getting_started/editor/command_line_tutorial.rst:108
msgid ""
"Disable render loop so rendering only occurs when called explicitly from "
"script."
msgstr ""
"렌더 루프를 끕니다. 따라서 스크립트에서 명시적으로 호출할 때만 렌더링을 합니"
"다."

#: ../../docs/getting_started/editor/command_line_tutorial.rst:110
msgid "``--disable-crash-handler``"
msgstr "``--disable-crash-handler``"

#: ../../docs/getting_started/editor/command_line_tutorial.rst:110
msgid "Disable crash handler when supported by the platform code."
msgstr "플랫폼 코드가 지원하는 경우 충돌 핸들러를 끕니다."

#: ../../docs/getting_started/editor/command_line_tutorial.rst:112
msgid "``--fixed-fps <fps>``"
msgstr "``--fixed-fps <fps>``"

#: ../../docs/getting_started/editor/command_line_tutorial.rst:112
msgid ""
"Force a fixed number of frames per second. This setting disables real-time "
"synchronization."
msgstr ""
"FPS(초당 프레임)을 고정된 숫자로 제한합니다. 이 설정은 실시간 동기화를 끕니"
"다."

#: ../../docs/getting_started/editor/command_line_tutorial.rst:114
msgid "``--print-fps``"
msgstr "``--print-fps``"

#: ../../docs/getting_started/editor/command_line_tutorial.rst:114
msgid "Print the frames per second to the stdout."
msgstr "표준 출력에 FPS(초당 프레임)를 프린트합니다."

#: ../../docs/getting_started/editor/command_line_tutorial.rst:117
msgid "**Standalone tools**"
msgstr "**독립형 도구**"

#: ../../docs/getting_started/editor/command_line_tutorial.rst:122
msgid "``-s <script>``, ``--script <script>``"
msgstr "``-s <script>``, ``--script <script>``"

#: ../../docs/getting_started/editor/command_line_tutorial.rst:122
msgid "Run a script."
msgstr "스크립트를 실행합니다."

#: ../../docs/getting_started/editor/command_line_tutorial.rst:124
msgid "``--check-only``"
msgstr "``--check-only``"

#: ../../docs/getting_started/editor/command_line_tutorial.rst:124
msgid "Only parse for errors and quit (use with ``--script``)."
msgstr "오류만 구문 분석하고 종료합니다 (``--script``\\ 와 함께 사용합니다)."

#: ../../docs/getting_started/editor/command_line_tutorial.rst:126
msgid "``--export <target>``"
msgstr "``--export <target>``"

#: ../../docs/getting_started/editor/command_line_tutorial.rst:126
msgid ""
"Export the project using the given export target. Export only main pack if "
"path ends with .pck or .zip (:ref:`tools "
"<doc_introduction_to_the_buildsystem_tools>` must be enabled)."
msgstr ""
"주어진 내보내기 대상을 사용해서 프로젝트를 내보냅니다. 경로가 .pck나 .zip으"
"로 확장자 이름으로 끝나는 경우, 메인 팩만 내보냅니다 (:ref:`tools(도구) "
"<doc_introduction_to_the_buildsystem_tools>`\\ 가 켜져 있어야 합니다)."

#: ../../docs/getting_started/editor/command_line_tutorial.rst:128
msgid "``--export-debug <target>``"
msgstr "``--export-debug <target>``"

#: ../../docs/getting_started/editor/command_line_tutorial.rst:128
msgid ""
"Like ``--export``, but use debug template (:ref:`tools "
"<doc_introduction_to_the_buildsystem_tools>` must be enabled)."
msgstr ""
"``--export``\\ 와 비슷하지만 디버그 템플릿을 사용합니다 (:ref:`tools(도구) "
"<doc_introduction_to_the_buildsystem_tools>`\\ 가 켜져 있어야 합니다)."

#: ../../docs/getting_started/editor/command_line_tutorial.rst:130
msgid "``--doctool <path>``"
msgstr "``--doctool <path>``"

#: ../../docs/getting_started/editor/command_line_tutorial.rst:130
msgid ""
"Dump the engine API reference to the given <path> in XML format, merging if "
"existing files are found (:ref:`tools "
"<doc_introduction_to_the_buildsystem_tools>` must be enabled)."
msgstr ""
"엔진 API 참조를 주어진 <경로>에 XML 형식으로 덤프합니다. 이미 해당 파일이 있"
"다면 병합합니다. (:ref:`tools(도구) "
"<doc_introduction_to_the_buildsystem_tools>`\\ 가 켜져 있어야 합니다)."

#: ../../docs/getting_started/editor/command_line_tutorial.rst:132
msgid "``--no-docbase``"
msgstr "``--no-docbase``"

#: ../../docs/getting_started/editor/command_line_tutorial.rst:132
msgid ""
"Disallow dumping the base types (used with ``--doctool``, :ref:`tools "
"<doc_introduction_to_the_buildsystem_tools>` must be enabled)."
msgstr ""
"기본 유형을 덤프하는 것을 허가하지 않습니다 (``--doctool``\\ 과 함께 쓰며, :"
"ref:`tools(도구) <doc_introduction_to_the_buildsystem_tools>`\\ 가 켜져 있어"
"야 합니다)."

#: ../../docs/getting_started/editor/command_line_tutorial.rst:134
msgid "``--build-solutions``"
msgstr "``--build-solutions``"

#: ../../docs/getting_started/editor/command_line_tutorial.rst:134
msgid ""
"Build the scripting solutions (e.g. for C# projects, :ref:`tools "
"<doc_introduction_to_the_buildsystem_tools>` must be enabled)."
msgstr ""
"스크립팅 솔루션을 빌드합니다 (예: C# 프로젝트 용. :ref:`tools(도구) "
"<doc_introduction_to_the_buildsystem_tools>`\\ 가 켜져 있어야 합니다)."

#: ../../docs/getting_started/editor/command_line_tutorial.rst:136
msgid "``--gdnative-generate-json-api``"
msgstr "``--gdnative-generate-json-api``"

#: ../../docs/getting_started/editor/command_line_tutorial.rst:136
msgid ""
"Generate JSON dump of the Godot API for GDNative bindings (:ref:`tools "
"<doc_introduction_to_the_buildsystem_tools>` must be enabled)."
msgstr ""
"GDNative 바인딩을 위해 Godot API의 JSON 덤프를 만듭니다 (:ref:`tools(도구) "
"<doc_introduction_to_the_buildsystem_tools>`\\ 가 켜져 있어야 합니다)."

#: ../../docs/getting_started/editor/command_line_tutorial.rst:138
msgid "``--test <test>``"
msgstr "``--test <test>``"

#: ../../docs/getting_started/editor/command_line_tutorial.rst:138
msgid ""
"Run a unit test. Use ``--help`` first to display the list of tests. (:ref:"
"`tools <doc_introduction_to_the_buildsystem_tools>` must be enabled)."
msgstr ""
"단위 테스트를 실행합니다. 테스트 목록을 표시하려면 ``--help``\\ 를 먼저 사용"
"합니다. (:ref:`tools(도구) <doc_introduction_to_the_buildsystem_tools>`\\ 가 "
"켜져 있어야 합니다)."

#: ../../docs/getting_started/editor/command_line_tutorial.rst:142
msgid "Path"
msgstr "경로"

#: ../../docs/getting_started/editor/command_line_tutorial.rst:144
msgid ""
"It is recommended that your Godot binary be in your PATH environment "
"variable, so it can be executed easily from any place by typing ``godot``. "
"You can do so on Linux by placing the Godot binary in ``/usr/local/bin`` and "
"making sure it is called ``godot``."
msgstr ""
"Godot 바이너리를 PATH 환경 변수에 넣어서, ``godot``\\ 를 입력하면 어느 곳이"
"든 쉽게 실행하도록 하는 것을 추천합니다. Linux에서 Godot 바이너리를 ``/usr/"
"local/bin``\\ 에 배치하여, ``godot``\\ 라고 부르게 하세요."

#: ../../docs/getting_started/editor/command_line_tutorial.rst:150
msgid "Setting the project path"
msgstr "프로젝트 경로 설정하기"

#: ../../docs/getting_started/editor/command_line_tutorial.rst:152
msgid ""
"Depending on where your Godot binary is located and what your current "
"working directory is, you may need to set the path to your project for any "
"of the following commands to work correctly."
msgstr ""
"Godot 바이너리의 위치와 현재 작업 디렉토리의 위치에 따라, 다음 명령 중 하나"
"가 제대로 작동하려면 프로젝트의 경로를 설정해야 합니다."

#: ../../docs/getting_started/editor/command_line_tutorial.rst:156
msgid ""
"This can be done by giving the path to the ``project.godot`` file of your "
"project as either the first argument, like this:"
msgstr ""
"프로젝트의``project.godot`` 파일에 대한 경로를 다음과 같이 첫 번째 인자로 주"
"면 됩니다:"

#: ../../docs/getting_started/editor/command_line_tutorial.rst:163
msgid "Or by using the ``--path`` argument:"
msgstr "혹은 ``--path`` 인자를 사용합니다:"

#: ../../docs/getting_started/editor/command_line_tutorial.rst:169
msgid ""
"For example, the full command for exporting your game (as explained below) "
"might look like this:"
msgstr ""
"예를 들어, (아래에서 설명할) 게임을 내보내는 전체 명령은 다음과 같을 것입니"
"다:"

#: ../../docs/getting_started/editor/command_line_tutorial.rst:176
msgid "Creating a project"
msgstr "프로젝트 생성하기"

#: ../../docs/getting_started/editor/command_line_tutorial.rst:179
msgid ""
"Creating a project from the command line can be done by navigating the shell "
"to the desired place and making a project.godot file."
msgstr ""
"명령줄에서 프로젝트를 생성하려면 셸을 원하는 위치로 이동하고 project.godot 파"
"일을 작성하십시오."

#: ../../docs/getting_started/editor/command_line_tutorial.rst:190
msgid "The project can now be opened with Godot."
msgstr "프로젝트는 이제 Godot로 열릴 수 있습니다."

#: ../../docs/getting_started/editor/command_line_tutorial.rst:194
msgid "Running the editor"
msgstr "편집기 실행하기"

#: ../../docs/getting_started/editor/command_line_tutorial.rst:196
msgid ""
"Running the editor is done by executing Godot with the ``-e`` flag. This "
"must be done from within the project directory or a subdirectory, otherwise "
"the command is ignored and the project manager appears."
msgstr ""
"편집기는 ``-e`` 플래그를 실행해서 실행됩니다. 작업은 프로젝트 디렉토리 또는 "
"하위 디렉토리에서 수행해야 합니다, 그렇지 않으면 명령이 무시되고 프로젝트 관"
"리자가 나타납니다."

#: ../../docs/getting_started/editor/command_line_tutorial.rst:204
msgid ""
"If a scene has been created and saved, it can be edited later by running the "
"same code with that scene as argument."
msgstr ""
"씬을 만들고 저장한다면, 나중에 해당 씬을 인수로 사용하여 동일한 코드를 실행하"
"여 편집할 수 있습니다."

#: ../../docs/getting_started/editor/command_line_tutorial.rst:212
msgid "Erasing a scene"
msgstr "씬 지우기"

#: ../../docs/getting_started/editor/command_line_tutorial.rst:214
msgid ""
"Godot is friends with your filesystem and will not create extra metadata "
"files. Use ``rm`` to erase a scene file. Make sure nothing references that "
"scene or else an error will be thrown upon opening."
msgstr ""
"Godot는 당신의 파일 시스템과 친하고 추가적인 메타데이터 파일을 만들기 않을 것"
"입니다. ``rm`` 을 사용해 씬 파일을 지웁니다. 참조하는 씬이 없다면 오류가 발생"
"할 것입니다."

#: ../../docs/getting_started/editor/command_line_tutorial.rst:223
msgid "Running the game"
msgstr "게임 실행하기"

#: ../../docs/getting_started/editor/command_line_tutorial.rst:225
msgid ""
"To run the game, simply execute Godot within the project directory or "
"subdirectory."
msgstr ""
"게임을 실행하려면, 간단히 프로젝트 디렉토리나 하위 디렉토리에서 Godot를 실행"
"하면 됩니다."

#: ../../docs/getting_started/editor/command_line_tutorial.rst:232
msgid ""
"When a specific scene needs to be tested, pass that scene to the command "
"line."
msgstr "특정 씬을 테스트 해야 하는 경우 씬을 명령줄로 전달하세요."

#: ../../docs/getting_started/editor/command_line_tutorial.rst:240
msgid "Debugging"
msgstr "디버깅"

#: ../../docs/getting_started/editor/command_line_tutorial.rst:242
msgid ""
"Catching errors in the command line can be a difficult task because they "
"just fly by. For this, a command line debugger is provided by adding ``-d``. "
"It works for running either the game or a simple scene."
msgstr ""
"명령줄에서 에러를 계산하는 것은 그냥 지나칠 수 있기 때문에 어려운 작업이 될 "
"수 있습니다. 이를 위해 명령줄 디버거는 ``-d``\\ 를 추가하여 제공합니다. 게임"
"이나 간단한 씬을 실행하는 데 모두 사용됩니다."

#: ../../docs/getting_started/editor/command_line_tutorial.rst:259
msgid ""
"Exporting the project from the command line is also supported. This is "
"especially useful for continuous integration setups. The version of Godot "
"that is headless (server build, no video) is ideal for this."
msgstr ""
"명령줄에서 프로젝트를 내보내는 것도 지원됩니다. 특히 연속적인 통합 설정에 유"
"용합니다. Godot의 헤드리스 버전은 (서버 빌드, 비디오 없음) 이런 점에서 이상적"
"입니다."

#: ../../docs/getting_started/editor/command_line_tutorial.rst:268
msgid ""
"The platform names recognized by the ``--export`` switch are the same as "
"displayed in the export wizard of the editor. To get a list of supported "
"platforms from the command line, try exporting to a non-recognized platform "
"and the full listing of platforms your configuration supports will be shown."
msgstr ""
"``--export`` 스위치가 인식하는 플랫폼 이름은 편집기의 내보내기 마법사에 표시"
"된 것과 동일합니다. 명령줄에서 지원하는 플랫폼 목록을 얻기 위해, 인지하지 않"
"는 플랫폼으로 내보내기를 시도하고 그러면 구성이 지원되는 전체 플랫폼 목록이 "
"나타날 것입니다."

#: ../../docs/getting_started/editor/command_line_tutorial.rst:274
msgid ""
"To export a debug version of the game, use the ``--export-debug`` switch "
"instead of ``--export``. Their parameters and usage are the same."
msgstr ""
"게임의 디버그 버전을 내보내기 위해, ``--export`` 대신 ``--export-debug`` 스위"
"치를 사용하세요. 매개 변수와 사용법은 동일합니다."

#: ../../docs/getting_started/editor/command_line_tutorial.rst:278
msgid "Running a script"
msgstr "스크립트 실행하기"

#: ../../docs/getting_started/editor/command_line_tutorial.rst:280
msgid ""
"It is possible to run a simple .gd script from the command line. This "
"feature is especially useful in large projects, for batch conversion of "
"assets or custom import/export."
msgstr ""
"명령줄에서 .gd 스크립트를 간단하게 실행할 수 있습니다.특히 일괄 변환 또는 맞"
"춤 가져 오기/내보내기를 위한, 큰 프로젝트에서 유용합니다."

#: ../../docs/getting_started/editor/command_line_tutorial.rst:284
msgid "The script must inherit from SceneTree or MainLoop."
msgstr "스크립트는 SceneTree나 MainLoop에서 상속해야 합니다."

#: ../../docs/getting_started/editor/command_line_tutorial.rst:286
msgid "Here is a simple example of how it works:"
msgstr "어떻게 작동하는 지의 예제입니다:"

#: ../../docs/getting_started/editor/command_line_tutorial.rst:297
msgid "And how to run it:"
msgstr "그리고 어떻게 실행하는 지의 예제입니다:"

#: ../../docs/getting_started/editor/command_line_tutorial.rst:304
msgid ""
"If no project.godot exists at the path, current path is assumed to be the "
"current working directory (unless ``-path`` is specified)."
msgstr ""
"project.godot이 경로에 존재하지 않으면, 현재 경로는 (``-path`` 가 지정되지 않"
"는 한) 현재 작업 디렉토리로 가정합니다."

#: ../../docs/getting_started/editor/external_editor.rst:4
msgid "Using an external text editor"
msgstr "외부 텍스트 편집기 사용하기"

#: ../../docs/getting_started/editor/external_editor.rst:6
msgid ""
"Godot can be used with an external text editor, such as Sublime Text or "
"Visual Studio Code. To enable an external text editor, browse to the "
"relevant editor settings via: ``Editor -> Editor Settings -> Text Editor -> "
"External``"
msgstr ""
"Godot는 외부 텍스트 편집기와 함께 사용할 수 있습니다. Sublime Text나 Visual "
"Studio Code처럼 말이죠. 외부 텍스트 편집기를 켜려면, 관련 편집기 설정으로 가"
"세요: ``편집기(Editor) -> 편집기 설정(Editor Settings) -> Text Editor -> "
"External``"

#: ../../docs/getting_started/editor/external_editor.rst:12
msgid ""
"There are two fields: the executable path and command line flags. The flags "
"allow you to integrate the editor with Godot, passing it the file path to "
"open and other relevant arguments. Godot will replace the following "
"placeholders in the flags string:"
msgstr ""
"두 개의 영역이 있습니다: 실행 파일 경로(Exec Path)와 명령줄 플래그(Exec "
"Flags). 플래그를 통해 Godot와 편집기를 통합할 수 있습니다. 열기 위한 파일 및 "
"기타 관련 인수가 플래그를 통과하죠. Godot는 플래그 문자열에서 다음 자리 표시"
"자는 이것을 뜻합니다:"

#: ../../docs/getting_started/editor/external_editor.rst:18
msgid "Field in Exec Flags"
msgstr "Exec Flags의 영역"

#: ../../docs/getting_started/editor/external_editor.rst:18
msgid "Is replaced with"
msgstr "의미"

#: ../../docs/getting_started/editor/external_editor.rst:20
msgid "``{project}``"
msgstr "``{project}``"

#: ../../docs/getting_started/editor/external_editor.rst:20
msgid "The absolute path to the project directory"
msgstr "프로젝트 디렉토리의 절대 경로"

#: ../../docs/getting_started/editor/external_editor.rst:22
msgid "``{file}``"
msgstr "``{file}``"

#: ../../docs/getting_started/editor/external_editor.rst:22
msgid "The absolute path to the file"
msgstr "파일의 절대 경로"

#: ../../docs/getting_started/editor/external_editor.rst:24
msgid "``{col}``"
msgstr "``{col}``"

#: ../../docs/getting_started/editor/external_editor.rst:24
msgid "The column number of the error"
msgstr "오류의 열 번호"

#: ../../docs/getting_started/editor/external_editor.rst:26
msgid "``{line}``"
msgstr "``{line}``"

#: ../../docs/getting_started/editor/external_editor.rst:26
msgid "The line number of the error"
msgstr "오류의 행 번호"

#: ../../docs/getting_started/editor/external_editor.rst:29
msgid "Some example Exec Flags for various editors include:"
msgstr "다양한 편집기의 Exec Flags의 예는 다음과 같습니다:"

#: ../../docs/getting_started/editor/external_editor.rst:32
msgid "Exec Flags"
msgstr "Exec Flags"

#: ../../docs/getting_started/editor/external_editor.rst:34
msgid "Geany/Kate"
msgstr "Geany/Kate"

#: ../../docs/getting_started/editor/external_editor.rst:34
msgid "``{file} --line {line} --column {col}``"
msgstr "``{file} --line {line} --column {col}``"

#: ../../docs/getting_started/editor/external_editor.rst:36
msgid "Atom/Sublime Text"
msgstr "Atom/Sublime Text"

#: ../../docs/getting_started/editor/external_editor.rst:36
msgid "``{file}:{line}``"
msgstr "``{file}:{line}``"

#: ../../docs/getting_started/editor/external_editor.rst:38
#: ../../docs/getting_started/scripting/c_sharp/c_sharp_basics.rst:92
msgid "JetBrains Rider"
msgstr "JetBrains Rider"

#: ../../docs/getting_started/editor/external_editor.rst:38
msgid "``--line {line} {file}``"
msgstr "``--line {line} {file}``"

#: ../../docs/getting_started/editor/external_editor.rst:40
#: ../../docs/getting_started/scripting/c_sharp/c_sharp_basics.rst:89
#: ../../docs/development/cpp/configuring_an_ide.rst:269
msgid "Visual Studio Code"
msgstr "Visual Studio Code"

#: ../../docs/getting_started/editor/external_editor.rst:40
msgid "``{project} --goto {file}:{line}:{col}``"
msgstr "``{project} --goto {file}:{line}:{col}``"

#: ../../docs/getting_started/editor/external_editor.rst:42
msgid "Vim (gVim)"
msgstr "Vim (gVim)"

#: ../../docs/getting_started/editor/external_editor.rst:42
msgid "``\"+call cursor({line}, {col})\" {file}``"
msgstr "``\"+call cursor({line}, {col})\" {file}``"

#: ../../docs/getting_started/editor/external_editor.rst:45
msgid "For Visual Studio Code you will have to point to the ``code.cmd`` file."
msgstr "Visual Studio Code 코드의 경우, ``code.cmd`` 파일을 가리켜야 합니다."

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:4
msgid "GDScript basics"
msgstr "GDScript 기초"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:9
msgid ""
"*GDScript* is a high-level, dynamically typed programming language used to "
"create content. It uses a syntax similar to `Python <https://en.wikipedia."
"org/wiki/Python_%28programming_language%29>`_ (blocks are indent-based and "
"many keywords are similar). Its goal is to be optimized for and tightly "
"integrated with Godot Engine, allowing great flexibility for content "
"creation and integration."
msgstr ""
"*GDScript*\\ 는 하이 레벨의, 동적 타입 프로그래밍 언어입니다. 문법은 `Python "
"<https://ko.wikipedia.org/wiki/%ED%8C%8C%EC%9D%B4%EC%8D%AC>`_\\ 과 유사합니"
"다 (블록이 들여쓰기 기반이고, 많은 키워드가 비슷합니다). 이 언어의 목적은 내"
"용 만들기 및 통합에 좋은 유연성을 바탕으로, Godot 엔진과 강하게 통합되어 최적"
"화하는 것입니다."

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:17
msgid "History"
msgstr "역사"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:19
msgid ""
"In the early days, the engine used the `Lua <https://www.lua.org>`__ "
"scripting language. Lua is fast, but creating bindings to an object oriented "
"system (by using fallbacks) was complex and slow and took an enormous amount "
"of code. After some experiments with `Python <https://www.python.org>`__, it "
"also proved difficult to embed."
msgstr ""
"처음에는 `Lua <https://www.lua.org>`__ 스크립팅 언어를 사용했습니다. Lua는 빠"
"르지만, (Fallback을 사용해서) 객체 지향 시스템에 묶는 일은 복잡하고 느리면서"
"도 엄청난 양의 코드가 필요했습니다. `Python <https://www.python.org>`__\\ 을 "
"몇 번 사용해봤지만, 포함하기는 어려웠습니다."

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:25
msgid ""
"The last third party scripting language that was used for shipped games was "
"`Squirrel <http://squirrel-lang.org>`__, but it was dropped as well. At that "
"point, it became evident that a custom scripting language could more "
"optimally make use of Godot's particular architecture:"
msgstr ""
"게임을 배포하는데 사용한 마지막 외부 스크립팅 언어는 `Squirrel <http://"
"squirrel-lang.org>`__\\ 이었습니다, 하지만 역시 탈락했습니다. 이 시기에서, "
"Godot의 특수한 구조에 최적화된 언어는 맞춤 스크립팅 언어라는 것을 확신했습니"
"다:"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:30
msgid ""
"Godot embeds scripts in nodes. Most languages are not designed with this in "
"mind."
msgstr ""
"Godot는 노드에 스크립트를 삽입합니다. 대부분의 언어는 이런 생각으로 설계되진 "
"않죠."

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:32
msgid ""
"Godot uses several built-in data types for 2D and 3D math. Script languages "
"do not provide this, and binding them is inefficient."
msgstr ""
"Godot는 2D와 3D 수학 용 내장 데이터 유형을 여러 개 사용합니다. 스크립트 언어"
"는 이런 데이터 유형을 제공하지 않고, 바인딩하는 것은 비효율적입니다."

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:34
msgid ""
"Godot uses threads heavily for lifting and initializing data from the net or "
"disk. Script interpreters for common languages are not friendly to this."
msgstr ""
"Godot는 넷 또는 디스크에서 데이터를 리프트하고 초기화하기 위해 스레드를 많이 "
"사용합니다. 일반적인 언어 용 스크립트 인터프리터는 스레드 사용에 친절하지 않"
"습니다."

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:37
msgid ""
"Godot already has a memory management model for resources, most script "
"languages provide their own, which results in duplicate effort and bugs."
msgstr ""
"Godot는 이미 리소스 용 메모리 관리 모델을 갖고 있지만, 대부분의 스크립트 언어"
"는 자체적인 모델을 갖고 있어서, 노력이 배로 들면서 버그를 초래합니다."

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:40
msgid ""
"Binding code is always messy and results in several failure points, "
"unexpected bugs and generally low maintainability."
msgstr ""
"코드를 바인딩 하는 것은 항상 엉망이면서 동시에 여러 실패 지점, 예기치 못한 버"
"그, 그리고 일반적으로 낮은 유지 능력을 초래합니다."

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:43
msgid ""
"The result of these considerations is *GDScript*. The language and "
"interpreter for GDScript ended up being smaller than the binding code itself "
"for Lua and Squirrel, while having equal functionality. With time, having a "
"built-in language has proven to be a huge advantage."
msgstr ""
"이 고려 사항의 결과물이 *GDScript*\\ 입니다. GDScript의 언어와 인터프리터는 "
"Lua와 Squirrel의 바인딩 코드보다 작아졌으면서도 같은 기능을 갖습니다. 시간이 "
"흐르면서 내장 언어를 갖는 것이 큰 장점이 된다는 것이 증명됐습니다."

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:49
msgid "Example of GDScript"
msgstr "GDScript 예제"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:51
msgid ""
"Some people can learn better by taking a look at the syntax, so here's a "
"simple example of how GDScript looks."
msgstr ""
"몇 몇 사람은 문법을 보는 것으로 언어를 더 잘 이해합니다. 따라서 GDScript를 어"
"떻게 사용하는 지 간단한 예제를 보여 드리겠습니다."

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:134
msgid ""
"If you have previous experience with statically typed languages such as C, C+"
"+, or C# but never used a dynamically typed one before, it is advised you "
"read this tutorial: :ref:`doc_gdscript_more_efficiently`."
msgstr ""
"이전에 C, C++, C#과 같은 정적 타입 언어에 대한 경험이 있지만, 한 번도 동적 타"
"입 언어를 써 본 적이 없다면, 이 튜토리얼을 읽는 것이 좋습니다: :ref:"
"`doc_gdscript_more_efficiently`."

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:139
#: ../../docs/community/contributing/best_practices_for_engine_contributors.rst:12
msgid "Language"
msgstr "언어"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:141
msgid ""
"In the following, an overview is given to GDScript. Details, such as which "
"methods are available to arrays or other objects, should be looked up in the "
"linked class descriptions."
msgstr ""
"여기서부터 GDScript의 개요입니다. 어떤 메서드가 배열 혹은 다른 객체에 이용할 "
"수 있는지와 같은 세부 사항은 클래스 설명의 링크를 확인해주세요."

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:146
msgid "Identifiers"
msgstr "식별자(Identifier)"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:148
msgid ""
"Any string that restricts itself to alphabetic characters (``a`` to ``z`` "
"and ``A`` to ``Z``), digits (``0`` to ``9``) and ``_`` qualifies as an "
"identifier. Additionally, identifiers must not begin with a digit. "
"Identifiers are case-sensitive (``foo`` is different from ``FOO``)."
msgstr ""
"알파벳 문자로 제한되는 문자열 (``a``\\ 부터 ``z``, ``A``\\ 부터 ``Z``), 숫자 "
"(``0``\\ 부터 ``9``), ``_``\\ 는 식별자입니다. 추가로 식별자는 숫자로 시작할 "
"수 없습니다. 식별자는 대소문자를 구분합니다 (``foo``\\ 는 ``FOO``\\ 와 다릅니"
"다)."

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:154
msgid "Keywords"
msgstr "키워드(Keyword)"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:156
msgid ""
"The following is the list of keywords supported by the language. Since "
"keywords are reserved words (tokens), they can't be used as identifiers. "
"Operators (like ``in``, ``not``, ``and`` or ``or``) and names of built-in "
"types as listed in the following sections are also reserved."
msgstr ""
"다음은 언어에서 지원하는 키워드 목록입니다. 키워드는 예약된 단어(토큰)이기 때"
"문에, 식별자로 사용할 수 없습니다. 다음 섹션에 나열된 (``in``, ``not``, "
"``and`` 혹은 ``or`` 와 같은) 연산자와 내장 타입 이름 역시 예약된 단어입니다."

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:161
msgid ""
"Keywords are defined in the `GDScript tokenizer <https://github.com/"
"godotengine/godot/blob/master/modules/gdscript/gdscript_tokenizer.cpp>`_ in "
"case you want to take a look under the hood."
msgstr ""
"키워드는 `GDScript tokenizer <https://github.com/godotengine/godot/blob/"
"master/modules/gdscript/gdscript_tokenizer.cpp>`_\\ 에서 정의됩니다. 정체가 "
"궁금하다면 확인해보세요."

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:165
msgid "Keyword"
msgstr "키워드"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:167
msgid "if"
msgstr "if"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:167
#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:169
#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:171
msgid "See `if/else/elif`_."
msgstr "`if/else/elif`_\\ 를 참고하세요."

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:169
msgid "elif"
msgstr "elif"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:171
msgid "else"
msgstr "else"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:173
#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:809
msgid "for"
msgstr "for"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:173
msgid "See for_."
msgstr "for_\\ 를 참고하세요."

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:175
#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:798
msgid "while"
msgstr "while"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:175
msgid "See while_."
msgstr "while_\\ 을 참고하세요."

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:177
#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:844
msgid "match"
msgstr "match"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:177
msgid "See match_."
msgstr "match_\\ 를 참고하세요."

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:179
msgid "break"
msgstr "break"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:179
msgid "Exits the execution of the current ``for`` or ``while`` loop."
msgstr "현재의 ``for`` 또는 ``while`` 루프 실행을 끝냅니다."

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:181
msgid "continue"
msgstr "continue"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:181
msgid ""
"Immediately skips to the next iteration of the ``for`` or ``while`` loop."
msgstr "즉시 ``for`` 또는 ``while`` 루프의 다음 반복으로 건너 뜁니다."

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:183
msgid "pass"
msgstr "pass"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:183
msgid ""
"Used where a statement is required syntactically but execution of code is "
"undesired, e.g. in empty functions."
msgstr ""
"명령문이 문법적으로는 필요하지만 실행할 만한 코드가 마땅치 않을 때 사용됩니"
"다. 예: 빈 함수."

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:185
msgid "return"
msgstr "return"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:185
msgid "Returns a value from a function."
msgstr "함수에서 값을 반환합니다."

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:187
msgid "class"
msgstr "class"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:187
msgid "Defines a class."
msgstr "클래스를 정의합니다."

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:189
msgid "extends"
msgstr "extends"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:189
msgid "Defines what class to extend with the current class."
msgstr "현재 클래스로 확장할 클래스를 정의합니다."

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:191
#: ../../docs/tutorials/i18n/locales.rst:360
msgid "is"
msgstr "is"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:191
msgid ""
"Tests whether a variable extends a given class, or is of a given built-in "
"type."
msgstr ""
"변수가 주어진 클래스를 확장하는지, 혹은 변수가 주어진 내장 유형인지 여부를 테"
"스트합니다."

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:193
msgid "as"
msgstr "as"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:193
msgid "Cast the value to a given type if possible."
msgstr "가능하다면 주어진 유형으로 값을 캐스트합니다."

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:195
msgid "self"
msgstr "self"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:195
msgid "Refers to current class instance."
msgstr "현재 클래스 인스턴스를 참조합니다."

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:197
msgid "tool"
msgstr "tool"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:197
msgid "Executes the script in the editor."
msgstr "편집기에서 스크립트를 실행합니다."

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:199
msgid "signal"
msgstr "signal"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:199
msgid "Defines a signal."
msgstr "시그널을 정의합니다."

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:201
msgid "func"
msgstr "func"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:201
msgid "Defines a function."
msgstr "함수를 정의합니다."

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:203
msgid "static"
msgstr "static"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:203
msgid "Defines a static function. Static member variables are not allowed."
msgstr "정적 함수를 정의합니다. 정적 멤버 변수를 허용하지 않습니다."

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:205
msgid "const"
msgstr "const"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:205
msgid "Defines a constant."
msgstr "상수를 정의합니다."

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:207
msgid "enum"
msgstr "enum"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:207
msgid "Defines an enum."
msgstr "열거형을 정의합니다."

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:209
msgid "var"
msgstr "var"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:209
msgid "Defines a variable."
msgstr "변수를 정의합니다."

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:211
msgid "onready"
msgstr "onready"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:211
msgid ""
"Initializes a variable once the Node the script is attached to and its "
"children are part of the scene tree."
msgstr ""
"스크립트가 붙은 노드이고 노드의 자식이 씬 트리의 일부분인 경우, 변수를 초기화"
"합니다."

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:213
msgid "export"
msgstr "export"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:213
msgid ""
"Saves a variable along with the resource it's attached to and makes it "
"visible and modifiable in the editor."
msgstr "변수를 리소스와 함께 저장하고 편집기에서 보고 수정할 수 있게 만듭니다."

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:215
msgid "setget"
msgstr "setget"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:215
msgid "Defines setter and getter functions for a variable."
msgstr "변수에 대한 setter(세터)와 getter(게터) 함수를 정의합니다."

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:217
msgid "breakpoint"
msgstr "breakpoint"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:217
msgid "Editor helper for debugger breakpoints."
msgstr "디버거 중단점 용 편집기 도우미."

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:219
msgid "preload"
msgstr "preload"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:219
msgid "Preloads a class or variable. See `Classes as resources`_."
msgstr ""
"클래스나 변수를 미리 불러옵니다(Preload). `리소스로 취급되는 클래스`_\\ 를 참"
"고하세요."

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:221
msgid "yield"
msgstr "yield"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:221
msgid "Coroutine support. See `Coroutines with yield`_."
msgstr ""
"Coroutine(코루틴)을 지원합니다. `yield를 갖는 Coroutine(코루틴)`_\\ 을 참고하"
"세요."

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:223
msgid "assert"
msgstr "assert"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:223
msgid ""
"Asserts a condition, logs error on failure. Ignored in non-debug builds. See "
"`Assert keyword`_."
msgstr ""
"조건을 가정(Assert)하고 실패 시 오류를 기록합니다. 디버그가 아닌 빌드에서는 "
"무시됩니다. `Assert 키워드`_\\ 를 참고하세요."

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:225
msgid "remote"
msgstr "remote"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:225
#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:227
#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:229
#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:231
#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:233
#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:235
msgid ""
"Networking RPC annotation. See :ref:`high-level multiplayer docs "
"<doc_high_level_multiplayer>`."
msgstr ""
"네트워킹 RPC(Remote Procedure Call, 원격 프로시저 호출) 주석. :ref:`하이 레"
"벨 멀티플레이어 문서 <doc_high_level_multiplayer>`\\ 를 참고하세요."

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:227
msgid "master"
msgstr "master"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:229
msgid "puppet"
msgstr "puppet"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:231
msgid "remotesync"
msgstr "remotesync"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:233
msgid "mastersync"
msgstr "mastersync"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:235
msgid "puppetsync"
msgstr "puppetsync"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:237
msgid "PI"
msgstr "PI"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:237
msgid "PI constant."
msgstr "PI 상수."

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:239
msgid "TAU"
msgstr "TAU"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:239
msgid "TAU constant."
msgstr "TAU 상수."

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:241
msgid "INF"
msgstr "INF"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:241
msgid "Infinity constant. Used for comparisons."
msgstr "무한대 상수. 비교로 사용됩니다."

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:243
msgid "NAN"
msgstr "NAN"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:243
msgid "NAN (not a number) constant. Used for comparisons."
msgstr "NAN (Not A Number, 숫자 아님) 상수. 비교로 사용됩니다."

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:247
#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:470
#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:362
msgid "Operators"
msgstr "연산자(Operator)"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:249
msgid "The following is the list of supported operators and their precedence."
msgstr "다음은 지원하는 연산자 목록과 우선 순위입니다."

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:252
msgid "**Operator**"
msgstr "**연산자**"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:252
#: ../../docs/getting_started/workflow/export/feature_tags.rst:33
msgid "**Description**"
msgstr "**설명**"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:254
msgid "``x[index]``"
msgstr "``x[index]``"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:254
msgid "Subscription (highest priority)"
msgstr "구독(Subscription) (가장 높은 우선 순위)"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:256
msgid "``x.attribute``"
msgstr "``x.attribute``"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:256
msgid "Attribute reference"
msgstr "속성 참조"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:258
msgid "``foo()``"
msgstr "``foo()``"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:258
msgid "Function call"
msgstr "함수 호출"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:260
msgid "``is``"
msgstr "``is``"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:260
msgid "Instance type checker"
msgstr "인스턴스 유형 검사기"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:262
msgid "``~``"
msgstr "``~``"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:262
msgid "Bitwise NOT"
msgstr "비트 단위 NOT"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:264
msgid "``-x``"
msgstr "``-x``"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:264
msgid "Negative / Unary negation"
msgstr "음수 / 단항 부정"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:266
msgid "``*`` ``/`` ``%``"
msgstr "``*`` ``/`` ``%``"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:266
msgid "Multiplication / Division / Remainder"
msgstr "곱하기 / 나누기 / 나머지"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:268
msgid ""
"These operators have the same behavior as C++. Integer division is truncated "
"rather than returning a fractional number, and the % operator is only "
"available for ints (\"fmod\" for floats)"
msgstr ""
"이 연산자는 C++의 연산자와 같습니다. 정수 나누기는 소수점 부분을 잘라냅니다. "
"그리고 % 연산자는 정수에만 사용됩니다 (실수 용 연산자는 \"fmod\"입니다)"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:274
#: ../../docs/getting_started/scripting/gdscript/gdscript_format_string.rst:134
msgid "``+``"
msgstr "``+``"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:274
msgid "Addition / Concatenation of arrays"
msgstr "배열의 추가 / 연결"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:276
#: ../../docs/getting_started/scripting/gdscript/gdscript_format_string.rst:143
msgid "``-``"
msgstr "``-``"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:276
msgid "Subtraction"
msgstr "빼기"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:278
msgid "``<<`` ``>>``"
msgstr "``<<`` ``>>``"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:278
msgid "Bit shifting"
msgstr "비트 자리 옮김"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:280
msgid "``&``"
msgstr "``&``"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:280
msgid "Bitwise AND"
msgstr "비트 단위 AND"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:282
msgid "``^``"
msgstr "``^``"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:282
msgid "Bitwise XOR"
msgstr "비트 단위 XOR"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:284
msgid "``|``"
msgstr "``|``"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:284
msgid "Bitwise OR"
msgstr "비트 단위 OR"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:286
msgid "``<`` ``>`` ``==`` ``!=`` ``>=`` ``<=``"
msgstr "``<`` ``>`` ``==`` ``!=`` ``>=`` ``<=``"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:286
msgid "Comparisons"
msgstr "비교"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:288
msgid "``in``"
msgstr "``in``"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:288
msgid "Content test"
msgstr "내용 테스트"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:290
msgid "``!`` ``not``"
msgstr "``!`` ``not``"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:290
msgid "Boolean NOT"
msgstr "불리언 NOT"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:292
msgid "``and`` ``&&``"
msgstr "``and`` ``&&``"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:292
msgid "Boolean AND"
msgstr "불리언 AND"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:294
msgid "``or`` ``||``"
msgstr "``or`` ``||``"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:294
msgid "Boolean OR"
msgstr "불리언 OR"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:296
msgid "``if x else``"
msgstr "``if x else``"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:296
msgid "Ternary if/else"
msgstr "삼항 if/else"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:298
msgid "``=`` ``+=`` ``-=`` ``*=`` ``/=`` ``%=`` ``&=`` ``|=``"
msgstr "``=`` ``+=`` ``-=`` ``*=`` ``/=`` ``%=`` ``&=`` ``|=``"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:298
msgid "Assignment (lowest priority)"
msgstr "할당 (가장 낮은 우선 순위)"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:302
msgid "Literals"
msgstr "리터럴(Literal)"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:305
msgid "**Literal**"
msgstr "**리터럴**"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:305
#: ../../docs/getting_started/scripting/gdscript/gdscript_format_string.rst:242
#: ../../docs/getting_started/scripting/gdscript/gdscript_format_string.rst:264
msgid "**Type**"
msgstr "**유형**"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:307
msgid "``45``"
msgstr "``45``"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:307
msgid "Base 10 integer"
msgstr "기본 10진법 정수"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:309
msgid "``0x8F51``"
msgstr "``0x8F51``"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:309
msgid "Base 16 (hexadecimal) integer"
msgstr "기본 16진법 정수"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:311
msgid "``0b101010``"
msgstr "``0b101010``"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:311
msgid "Base 2 (binary) integer"
msgstr "기본 2진법 정수"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:313
msgid "``3.14``, ``58.1e-10``"
msgstr "``3.14``, ``58.1e-10``"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:313
msgid "Floating-point number (real)"
msgstr "부동 소수점 숫자 (실수)"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:315
msgid "``\"Hello\"``, ``\"Hi\"``"
msgstr "``\"안녕하세요\"``, ``\"안녕\"``"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:315
msgid "Strings"
msgstr "문자열"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:317
msgid "``\"\"\"Hello\"\"\"``"
msgstr "``\"\"\"안녕하세요\"\"\"``"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:317
msgid "Multiline string"
msgstr "여러 줄 문자열"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:319
msgid "``@\"Node/Label\"``"
msgstr "``@\"Node/Label\"``"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:319
msgid ":ref:`class_NodePath` or StringName"
msgstr "노드 경로(:ref:`class_NodePath`) 혹은 문자열 이름(StringName)"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:321
msgid "``$NodePath``"
msgstr "``$NodePath``"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:321
msgid "Shorthand for ``get_node(\"NodePath\")``"
msgstr "``get_node(\"NodePath\")``\\ 의 짧은 표현"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:325
msgid "Comments"
msgstr "주석(Comment)"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:327
msgid ""
"Anything from a ``#`` to the end of the line is ignored and is considered a "
"comment."
msgstr "``#``\\ 부터 줄 끝까지는 주석으로 간주되어 무시됩니다."

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:337
msgid "Built-in types"
msgstr "내장 유형(Built-in type)"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:339
msgid ""
"Built-in types are stack-allocated. They are passed as values. This means a "
"copy is created on each assignment or when passing them as arguments to "
"functions. The only exceptions are ``Array``\\ s and ``Dictionaries``, which "
"are passed by reference so they are shared. (Pooled arrays such as "
"``PoolByteArray`` are still passed as values.)"
msgstr ""
"내장 유형은 스택에 할당됩니다. 이 유형은 값으로 전달됩니다. 즉, 사본은 각 할"
"당에서, 혹은 유형이 인수로서 함수로 전달될 때 만들어집니다. 유일한 예외 사항"
"은 ``배열(Array)``\\ 과 ``딕셔너리(Dictionary)``\\ 로, 참조로 전달되기 때문"
"에 공유됩니다. (``PoolByteArray``\\ 와 같은 풀 형식의 배열은 여전히 값으로 전"
"달됩니다.)"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:346
msgid "Basic built-in types"
msgstr "기본 내장 유형"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:348
msgid "A variable in GDScript can be assigned to several built-in types."
msgstr "GDScript의 변수에는 여러 내장 유형을 할당할 수 있습니다."

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:351
#: ../../docs/tutorials/misc/binary_serialization_api.rst:25
msgid "null"
msgstr "null"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:353
msgid ""
"``null`` is an empty data type that contains no information and can not be "
"assigned any other value."
msgstr ""
"``null``\\ 은 빈 데이터 유형으로 정보를 갖고 있지 않습니다. 그리고 어떤 값이"
"라도 할당할 수 없습니다."

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:357
msgid ":ref:`bool <class_bool>`"
msgstr ":ref:`bool <class_bool>`"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:359
msgid "Short for \"boolean\", it can only contain ``true`` or ``false``."
msgstr ""
"\"불리언(Boolean)\"의 약자로, 오직 ``true`` 또는 ``false``\\ 만 갖습니다."

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:362
msgid ":ref:`int <class_int>`"
msgstr ":ref:`int <class_int>`"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:364
msgid ""
"Short for \"integer\", it stores whole numbers (positive and negative). It "
"is stored as a 64-bit value, equivalent to \"int64_t\" in C++."
msgstr ""
"\"정수(Integer)\"의 약자로, 모든 숫자 (양수와 음수)를 저장합니다. 64비트 값으"
"로 저장하며, 이는 C++에서 \"int64_t\"와 같습니다."

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:368
msgid ":ref:`float <class_float>`"
msgstr ":ref:`float <class_float>`"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:370
msgid ""
"Stores real numbers, including decimals, using floating-point values. It is "
"stored as a 64-bit value, equivalent to \"double\" in C++. Note: Currently, "
"data structures such as Vector2, Vector3, and PoolRealArray store 32-bit "
"single-precision \"float\" values."
msgstr ""
"소수점을 사용한 소수를 포함하는 실수를 저장합니다. 64비트 값으로 저장되며, 이"
"는 C++에서 \"double\"과 같습니다. 참고: 현재로서는 Vector2, Vector3, "
"PoolRealArray와 같은 데이터 구조는 32비트 단정도(Single-precision) \"float\" "
"값을 저장합니다."

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:376
msgid ":ref:`String <class_String>`"
msgstr ":ref:`String <class_String>`"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:378
msgid ""
"A sequence of characters in `Unicode format <https://en.wikipedia.org/wiki/"
"Unicode>`_. Strings can contain `standard C escape sequences <https://en."
"wikipedia.org/wiki/Escape_sequences_in_C>`_. GDScript also supports :ref:"
"`doc_gdscript_printf`."
msgstr ""
"`Unicode 형식 <https://ko.wikipedia.org/wiki/Unicode>`_\\ 에 있는 일련의 문"
"자. 문자열은 `표준 C 이스케이프 시퀀스 <https://en.wikipedia.org/wiki/"
"Escape_sequences_in_C>`_\\ 를 가질 수 있습니다. GDScript는 :ref:"
"`doc_gdscript_printf`\\ 도 지원합니다."

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:384
msgid "Vector built-in types"
msgstr "벡터 내장 유형"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:387
msgid ":ref:`Vector2 <class_Vector2>`"
msgstr ":ref:`Vector2 <class_Vector2>`"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:389
msgid ""
"2D vector type containing ``x`` and ``y`` fields. Can also be accessed as an "
"array."
msgstr ""
"2D 벡터 유형으로, ``x``\\ 와 ``y`` 영역을 갖고 있습니다. 배열로 접근할 수도 "
"있습니다."

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:393
msgid ":ref:`Rect2 <class_Rect2>`"
msgstr ":ref:`Rect2 <class_Rect2>`"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:395
msgid ""
"2D Rectangle type containing two vectors fields: ``position`` and ``size``. "
"Also contains an ``end`` field which is ``position + size``."
msgstr ""
"2D 사각형 유형으로 두 개의 벡터 영역을 갖고 있습니다: ``position``\\ 과 "
"``size``. 또한 ``position + size``\\ 를 의미하는 ``end`` 영역을 갖습니다."

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:399
msgid ":ref:`Vector3 <class_Vector3>`"
msgstr ":ref:`Vector3 <class_Vector3>`"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:401
msgid ""
"3D vector type containing ``x``, ``y`` and ``z`` fields. This can also be "
"accessed as an array."
msgstr ""
"3D 벡터 유형으로, ``x``, ``y``, ``z`` 영역을 갖고 있습니다. 배열로 접근할 수"
"도 있습니다."

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:405
msgid ":ref:`Transform2D <class_Transform2D>`"
msgstr ":ref:`Transform2D <class_Transform2D>`"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:407
msgid "3×2 matrix used for 2D transforms."
msgstr "3x2 행렬(Matrix)로 2D 변형에 사용됩니다."

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:410
msgid ":ref:`Plane <class_Plane>`"
msgstr ":ref:`Plane <class_Plane>`"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:412
msgid ""
"3D Plane type in normalized form that contains a ``normal`` vector field and "
"a ``d`` scalar distance."
msgstr ""
"표준화된 형태의 3D 평면(Plane) 유형으로 ``normal`` 벡터 영역과 ``d`` 스칼라 "
"거리를 갖고 있습니다."

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:416
msgid ":ref:`Quat <class_Quat>`"
msgstr ":ref:`Quat <class_Quat>`"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:418
msgid ""
"Quaternion is a datatype used for representing a 3D rotation. It's useful "
"for interpolating rotations."
msgstr ""
"사원수(Quaternion)는 3D 회전을 표현하기 위해 사용되는 데이터 유형입니다. 회"
"전 값을 보간하는 용도로 사용됩니다."

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:422
msgid ":ref:`AABB <class_AABB>`"
msgstr ":ref:`AABB <class_AABB>`"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:424
msgid ""
"Axis-aligned bounding box (or 3D box) contains 2 vectors fields: "
"``position`` and ``size``. Also contains an ``end`` field which is "
"``position + size``."
msgstr ""
"축이 정렬된 경계 사각형으로 (혹은 3D 상자) 2개의 벡터 영역을 갖습니다: "
"``position``\\ 과 ``size``. 혹은 ``position + size``\\ 를 의미하는 ``end`` 영"
"역을 갖습니다."

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:429
msgid ":ref:`Basis <class_Basis>`"
msgstr ":ref:`Basis <class_Basis>`"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:431
msgid ""
"3x3 matrix used for 3D rotation and scale. It contains 3 vector fields "
"(``x``, ``y`` and ``z``) and can also be accessed as an array of 3D vectors."
msgstr ""
"3x3 행렬로 3D 회전과 크기 조정에 사용됩니다. 3개의 벡터 영역 (``x``, ``y``, "
"``z``)을 갖습니다. 3D 벡터의 배열로 접근할 수도 있습니다."

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:436
msgid ":ref:`Transform <class_Transform>`"
msgstr ":ref:`Transform <class_Transform>`"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:438
msgid ""
"3D Transform contains a Basis field ``basis`` and a Vector3 field ``origin``."
msgstr ""
"3D 변형(Transform)으로, Basis 영역 ``basis``\\ 와 Vector3 영역 ``origin``\\ "
"을 갖습니다."

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:442
msgid "Engine built-in types"
msgstr "엔진 내장 타입"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:445
msgid ":ref:`Color <class_Color>`"
msgstr ":ref:`Color <class_Color>`"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:447
msgid ""
"Color data type contains ``r``, ``g``, ``b``, and ``a`` fields. It can also "
"be accessed as ``h``, ``s``, and ``v`` for hue/saturation/value."
msgstr ""
"색상(Color) 데이터 유형으로 ``r``, ``g``, ``b``, ``a`` 영역을 갖습니다. 색조/"
"채도/명도 용으로 ``h``, ``s``, ``v``\\ 로 접근할 수도 있습니다."

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:451
msgid ":ref:`NodePath <class_NodePath>`"
msgstr ":ref:`NodePath <class_NodePath>`"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:453
msgid ""
"Compiled path to a node used mainly in the scene system. It can be easily "
"assigned to, and from, a String."
msgstr ""
"노드로 컴파일된 경로로, 주로 씬 시스템에서 사용됩니다. 쉽게 문자열로 할당하거"
"나 할당될 수 있습니다."

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:457
msgid ":ref:`RID <class_RID>`"
msgstr ":ref:`RID <class_RID>`"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:459
msgid "Resource ID (RID). Servers use generic RIDs to reference opaque data."
msgstr ""
"리소스 ID (RID). 서버는 불투명한 데이터를 참조하기 위해 제네릭 RID를 사용합니"
"다."

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:462
msgid ":ref:`Object <class_Object>`"
msgstr ":ref:`Object <class_Object>`"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:464
msgid "Base class for anything that is not a built-in type."
msgstr "내장 유형이 아닌 모든 것의 기본 클래스."

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:467
msgid "Container built-in types"
msgstr "컨테이너(Container) 내장 유형"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:470
msgid ":ref:`Array <class_Array>`"
msgstr ":ref:`Array <class_Array>`"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:472
msgid ""
"Generic sequence of arbitrary object types, including other arrays or "
"dictionaries (see below). The array can resize dynamically. Arrays are "
"indexed starting from index ``0``. Negative indices count from the end."
msgstr ""
"임의 객체 유형의 일반적인 시퀀스(Sequence)로, 다른 배열(Array)이나 딕셔너리"
"(Dictionary)를 포함합니다 (아래를 참고하세요). 배열의 크기는 동적으로 조절할 "
"수 있습니다. 배열은 인덱스 ``0``\\ 부터 번호를 매깁니다. 번호를 음수로 하면 "
"배열의 끝부터 셉니다."

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:486
msgid ""
"GDScript arrays are allocated linearly in memory for speed. Large arrays "
"(more than tens of thousands of elements) may however cause memory "
"fragmentation. If this is a concern, special types of arrays are available. "
"These only accept a single data type. They avoid memory fragmentation and "
"use less memory, but are atomic and tend to run slower than generic arrays. "
"They are therefore only recommended to use for large data sets:"
msgstr ""
"GDScript 배열은 속도를 위해 선형적으로 메모리에 할당됩니다. (수 만개보다 더) "
"많은 배열은 메모리 단편화를 발생할 수 있습니다. 이것이 염려된다면 특수 유형"
"의 배열을 사용할 수 있습니다. 이 배열에는 하나의 데이터 유형만 들어갈 수 있습"
"니다. 메모리 단편화를 방지할 뿐더러, 더 적은 메모리를 사용하지만 원자적이고 "
"기본 배열보다 더 느리게 실행됩니다. 따라서 많은 데이터 집합을 사용할 때만 추"
"천합니다:"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:493
msgid ""
":ref:`PoolByteArray <class_PoolByteArray>`: An array of bytes (integers from "
"0 to 255)."
msgstr ""
":ref:`PoolByteArray <class_PoolByteArray>`: 바이트의 배열 (0부터 255까지의 정"
"수)."

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:494
msgid ":ref:`PoolIntArray <class_PoolIntArray>`: An array of integers."
msgstr ":ref:`PoolIntArray <class_PoolIntArray>`: 정수의 배열."

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:495
msgid ":ref:`PoolRealArray <class_PoolRealArray>`: An array of floats."
msgstr ":ref:`PoolRealArray <class_PoolRealArray>`: 실수의 배열."

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:496
msgid ":ref:`PoolStringArray <class_PoolStringArray>`: An array of strings."
msgstr ":ref:`PoolStringArray <class_PoolStringArray>`: 문자열의 배열."

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:497
msgid ""
":ref:`PoolVector2Array <class_PoolVector2Array>`: An array of :ref:`Vector2 "
"<class_Vector2>` objects."
msgstr ""
":ref:`PoolVector2Array <class_PoolVector2Array>`: :ref:`Vector2 "
"<class_Vector2>` 객체의 배열."

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:498
msgid ""
":ref:`PoolVector3Array <class_PoolVector3Array>`: An array of :ref:`Vector3 "
"<class_Vector3>` objects."
msgstr ""
":ref:`PoolVector3Array <class_PoolVector3Array>`: :ref:`Vector3 "
"<class_Vector3>` 객체의 배열."

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:499
msgid ""
":ref:`PoolColorArray <class_PoolColorArray>`: An array of :ref:`Color "
"<class_Color>` objects."
msgstr ""
":ref:`PoolColorArray <class_PoolColorArray>`: :ref:`Color <class_Color>` 객체"
"의 배열."

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:502
msgid ":ref:`Dictionary <class_Dictionary>`"
msgstr ":ref:`Dictionary <class_Dictionary>`"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:504
msgid "Associative container which contains values referenced by unique keys."
msgstr "고유 키로 참조되는 값을 갖는 연관 컨테이너입니다."

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:517
msgid ""
"Lua-style table syntax is also supported. Lua-style uses ``=`` instead of ``:"
"`` and doesn't use quotes to mark string keys (making for slightly less to "
"write). Note however that like any GDScript identifier, keys written in this "
"form cannot start with a digit."
msgstr ""
"Lua 스타일의 테이블 문법 역시 지원합니다. Lua 스타일은 ``:`` 대신 ``=``\\ 을 "
"사용하고 (문자의 양을 줄이기 위해) 문자열 키를 표시하기 위한 따옴표를 사용하"
"지 않습니다. 하지만 모든 GDScript 식별자와 마찬가지로, 이 양식에 맞더라도 키"
"를 숫자로 시작할 수 없습니다."

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:531
msgid ""
"To add a key to an existing dictionary, access it like an existing key and "
"assign to it::"
msgstr ""
"존재하는 딕셔너리에 키를 추가하려면, 기존 키와 같은 방식으로 접근한 뒤 할당해"
"야 합니다::"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:540
#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:228
msgid "Data"
msgstr "데이터(Data)"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:543
#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:131
#: ../../docs/tutorials/shading/migrating_to_godot_shader_language.rst:86
#: ../../docs/tutorials/shading/migrating_to_godot_shader_language.rst:148
#: ../../docs/tutorials/shading/migrating_to_godot_shader_language.rst:212
msgid "Variables"
msgstr "변수(Variable)"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:545
msgid ""
"Variables can exist as class members or local to functions. They are created "
"with the ``var`` keyword and may, optionally, be assigned a value upon "
"initialization."
msgstr ""
"변수는 클래스 멤버, 혹은 함수에 지역으로 존재할 수 잇습니다. 변수는 ``var`` "
"키워드 만들 수 있으며, 초기화에 값을 지정할 수 있습니다."

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:556
msgid ""
"Variables can optionally have a type specification. When a type is "
"specified, the variable will be forced to have always that same type, and "
"trying to assign an incompatible value will raise an error."
msgstr ""
"변수는 선택적으로 유형을 지정할 수 있습니다. 유형을 지정하면, 그 변수는 항상 "
"같은 유형으로 제한되며, 유형에 맞지 않는 값을 할당하려 하면 오류가 발생합니"
"다."

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:560
msgid ""
"Types are specified in the variable declaration using a ``:`` (colon) symbol "
"after the variable name, followed by the type."
msgstr ""
"유형은 변수 선언에서 변수 이름 뒤에 ``:`` (쌍점) 기호를 붙인 다음, 유형 이름"
"을 지정합니다."

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:568
msgid ""
"If the variable is initialized within the declaration, the type can be "
"inferred, so it's possible to omit the type name::"
msgstr ""
"변수가 선언 내에서 초기화된다면, 유형은 유추할 수 있게 됩니다. 따라서 유형 이"
"름을 생략하는 것이 가능합니다::"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:574
msgid ""
"Type inference is only possible if the assigned value has a defined type, "
"otherwise it will raise an error."
msgstr ""
"유형 추론은 할당된 값이 정의된 유형이 있는 경우에만 가능합니다. 그렇지 않으"
"면 오류가 발생합니다."

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:577
#: ../../docs/tutorials/shading/shading_reference/shaders.rst:39
msgid "Valid types are:"
msgstr "올바른 타입은 다음과 같습니다:"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:579
msgid "Built-in types (Array, Vector2, int, String, etc.)."
msgstr "내장 유형 (Array, Vector2, int, String 등)."

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:580
msgid "Engine classes (Node, Resource, Reference, etc.)."
msgstr "엔진 클래스 (Node, Resource, Reference 등)."

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:581
msgid ""
"Constant names if they contain a script resource (``MyScript`` if you "
"declared ``const MyScript = preload(\"res://my_script.gd\")``)."
msgstr ""
"스크립트 리소스가 포함된 상수 이름 (``const MyScript = preload(\"res://"
"my_script.gd\")``\\ 를 선언했다면 ``MyScript``\\ 가 이에 속합니다)."

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:582
msgid ""
"Other classes in the same script, respecting scope (``InnerClass."
"NestedClass`` if you declared ``class NestedClass`` inside the ``class "
"InnerClass`` in the same scope)."
msgstr ""
"같은 스크립트에서 유효 범위를 준수하는 다른 클래스 (같은 유효 범위에서 "
"``class InnerClass`` 안에 ``class NestedClass``\\ 를 선언했다면 ``InnerClass."
"NestedClass``\\ 가 이에 속합니다)."

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:583
msgid "Script classes declared with the ``class_name`` keyword."
msgstr "``class_name`` 키워드로 선언된 스크립트 클래스."

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:586
#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:85
msgid "Casting"
msgstr "캐스팅(Casting)"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:588
msgid ""
"Values assigned to typed variables must have a compatible type. If it's "
"needed to coerce a value to be of a certain type, in particular for object "
"types, you can use the casting operator ``as``."
msgstr ""
"유형이 있는 변수에는 그에 맞는 유형을 지닌 값을 지정해야 합니다. 만약 값을 특"
"정 유형으로, 특히 객체 유형으로 강제 변환해야 한다면, 캐스팅 연산자 ``as``\\ "
"를 사용해야 합니다."

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:592
msgid ""
"Casting between object types results in the same object if the value is of "
"the same type or a subtype of the cast type."
msgstr ""
"객체 유형 간 캐스팅에서 값이 캐스트 유형과 같은 유형이거나 하위 유형이라면 같"
"은 객체를 만듭니다."

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:600
msgid ""
"If the value is not a subtype, the casting operation will result in a "
"``null`` value."
msgstr "값이 하위 유형이 아니라면 캐스팅 연산자는 ``null`` 값을 내보냅니다."

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:607
msgid ""
"For built-in types, they will be forcibly converted if possible, otherwise "
"the engine will raise an error."
msgstr ""
"내장 유형의 경우, 가능하다면 강제로 유형을 변환하지만, 불가능하다면 오류를 발"
"생합니다."

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:616
msgid ""
"Casting is also useful to have better type-safe variables when interacting "
"with the scene tree::"
msgstr ""
"캐스팅은 더 유형에 안전한 변수를 만드는데 유용합니다. 씬 트리에서 상호작용하"
"다 보면 변수의 유형에 불확실해질 수도 있기 때문이죠::"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:626
#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:211
#: ../../docs/getting_started/scripting/c_sharp/c_sharp_differences.rst:22
#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:256
#: ../../docs/tutorials/shading/migrating_to_godot_shader_language.rst:71
#: ../../docs/development/cpp/object_class.rst:94
msgid "Constants"
msgstr "상수"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:628
msgid ""
"Constants are similar to variables, but must be constants or constant "
"expressions and must be assigned on initialization."
msgstr ""
"상수는 변수와 비슷하지만, 상수 또는 상수 식이어야만 하며 초기화 시 값이 지정"
"되어야 합니다."

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:642
msgid ""
"Although the type of constants is inferred from the assigned value, it's "
"also possible to add explicit type specification::"
msgstr ""
"상수의 유형은 지정된 값에서 유추할 수 있지만, 명시적인 유형 지정을 추가할 수"
"도 있습니다::"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:648
msgid "Assigning a value of an incompatible type will raise an error."
msgstr "맞지 않은 유형의 값을 지정하면 오류가 발생합니다."

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:651
msgid "Enums"
msgstr "열거형(Enum)"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:653
msgid ""
"Enums are basically a shorthand for constants, and are pretty useful if you "
"want to assign consecutive integers to some constant."
msgstr ""
"열거형은 기본적으로 상수의 축약형으로, 연속적인 정수를 일부 상수에 지정할 때 "
"꽤 유용합니다."

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:656
msgid ""
"If you pass a name to the enum, it will put all the keys inside a constant "
"dictionary of that name."
msgstr ""
"열거형에 이름을 전달하면, 열거형은 해당 이름의 상수 딕셔너리 안에 모든 키를 "
"넣습니다."

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:659
msgid ""
"In Godot 3.1 and later, keys in a named enum are not registered as global "
"constants. They should be accessed prefixed by the enum's name (``Name."
"KEY``); see an example below."
msgstr ""
"Godot 3.1부터는, 이름있는 열거형에서 키(Key)는 전역 상수로 등록할 수 없습니"
"다. 키에 접근하려면 열거형의 이름이 앞에 있어야합니다 (``이름.KEY``). 아래의 "
"예제를 참고하세요."

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:679
#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:391
#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:446
msgid "Functions"
msgstr "함수(Function)"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:681
msgid ""
"Functions always belong to a `class <Classes_>`_. The scope priority for "
"variable look-up is: local → class member → global. The ``self`` variable is "
"always available and is provided as an option for accessing class members, "
"but is not always required (and should *not* be sent as the function's first "
"argument, unlike Python)."
msgstr ""
"함수는 항상 `클래스 <Classes_>`_\\ 에 속합니다. 변수 조회 범위의 우선 순위는 "
"다음과 같습니다: 지역(Local) → 클래스 멤버(Class Member) → 전역(Global). "
"``self`` 변수는 항상 사용할 수 있고, 클래스 멤버에 접근할 수 있는 설정으로 제"
"공합니다. 하지만 항상 필요한 것은 아닙니다 (함수의 첫 번째 인수로 보내서는 *"
"안* 됩니다. Python과는 다른 점이죠)."

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:694
msgid ""
"A function can ``return`` at any point. The default return value is ``null``."
msgstr ""
"함수는 언제든지 ``반환(return)``\\ 할 수 있습니다. 기본 반환 값은 ``null``\\ "
"입니다."

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:696
msgid ""
"Functions can also have type specification for the arguments and for the "
"return value. Types for arguments can be added in a similar way to "
"variables::"
msgstr ""
"그리고 함수는 인수와 반환 값의 유형 지정을 할 수 있습니다. 인수의 유형은 변수"
"에서와 비슷한 방식으로 추가할 수 있습니다::"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:702
msgid ""
"If a function argument has a default value, it's possible to infer the type::"
msgstr "함수 인수가 기본 값을 갖는다면, 유형을 추론할 수 있습니다::"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:707
msgid ""
"The return type of the function can be specified after the arguments list "
"using the arrow token (``->``)::"
msgstr ""
"함수의 반환 유형은 화살표 토큰 (``->``)을 사용하여 인수 목록 뒤에 지정할 수 "
"있습니다::"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:713
msgid ""
"Functions that have a return type **must** return a proper value. Setting "
"the type as ``void`` means the function doesn't return anything. Void "
"functions can return early with the ``return`` keyword, but they can't "
"return any value."
msgstr ""
"반환 유형을 갖는 함수는 **반드시** 그에 맞는 값을 반환해야 합니다. 유형을 "
"``void``\\ 로 설정하면 함수는 아무 것도 반환하면 안 됩니다. Void 함수는 "
"``return`` 키워드로 함수에서 일찍 반환할 수 있지만, 거기서 값을 반환하면 안 "
"됩니다."

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:722
msgid ""
"Non-void functions must **always** return a value, so if your code has "
"branching statements (such as an ``if``/``else`` construct), all the "
"possible paths must have a return. E.g., if you have a ``return`` inside an "
"``if`` block but not after it, the editor will raise an error because if the "
"block is not executed, the function won't have a valid value to return."
msgstr ""
"Void가 아닌 함수는 반드시 **항상** 값을 반환해야 합니다. 따라서 코드가 "
"(``if``/``else`` 구조와 같은) 분기문을 갖고 있다면, 모든 가능한 경로에 반환"
"이 필요합니다. 다시 말해 ``if`` 블록 안에 ``return``\\ 을 넣어 줬지만, 그 이"
"후에는 하지 않았다면, 편집기는 오류를 발생합니다. 조건에 맞지 않아 블록이 실"
"행하지 않았다면, 함수는 올바른 값을 반환할 수 없기 때문이죠."

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:730
msgid "Referencing functions"
msgstr "함수 참조하기(Referencing functions)"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:732
msgid ""
"Contrary to Python, functions are *not* first-class objects in GDScript. "
"This means they cannot be stored in variables, passed as an argument to "
"another function or be returned from other functions. This is for "
"performance reasons."
msgstr ""
"Python과 달리, 함수는 GDScript에서 최상위 클래스 객체가 *아닙니다*. 즉, 함수"
"를 변수에 저장할 수 없고, 다른 함수에 인수로 전달되거나 다른 함수로부터 반환"
"될 수 없습니다. 성능의 문제 때문입니다."

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:736
msgid ""
"To reference a function by name at run-time, (e.g. to store it in a "
"variable, or pass it to another function as an argument) one must use the "
"``call`` or ``funcref`` helpers::"
msgstr ""
"런타임에 함수를 이름으로 참조하려면 (예: 그것을 변수로 저장하거나, 다른 함수"
"에 인수로 전달하는 경우), ``call``\\ 이나 ``funcref`` 도우미를 사용해야 합니"
"다::"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:750
msgid "Static functions"
msgstr "정적 함수(Static functions)"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:752
msgid ""
"A function can be declared static. When a function is static, it has no "
"access to the instance member variables or ``self``. This is mainly useful "
"to make libraries of helper functions::"
msgstr ""
"함수를 정적으로 선언할 수 있습니다. 함수가 정적인 상태라면, 인스턴스 멤버 변"
"수나 ``self``\\ 로 접근할 수 없습니다. 주로 도우미 함수의 라이브러리를 만드는"
"데 유용합니다::"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:761
msgid "Statements and control flow"
msgstr "명령문(Statement)과 제어 흐름(Control Flow)"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:763
msgid ""
"Statements are standard and can be assignments, function calls, control flow "
"structures, etc (see below). ``;`` as a statement separator is entirely "
"optional."
msgstr ""
"명령문은 표준으로 할당(Assignment), 함수 호출(Function Call), 제어 흐름 "
"(Control Flow) 구조 등이 될 수 있습니다. 명령문 구분 기호인 ``;``\\ 의 사용"
"은 자유입니다."

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:768
msgid "if/else/elif"
msgstr "if/else/elif"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:770
msgid ""
"Simple conditions are created by using the ``if``/``else``/``elif`` syntax. "
"Parenthesis around conditions are allowed, but not required. Given the "
"nature of the tab-based indentation, ``elif`` can be used instead of "
"``else``/``if`` to maintain a level of indentation."
msgstr ""
"간단한 조건은 ``if``/``else``/``elif`` 문법을 사용해 만들 수 있습니다. 조건"
"문 주변에 괄호를 씌워도 되지만, 필수는 아닙니다. 탭 기반 들여쓰기의 특성을 감"
"안하여, ``elif`` 는 ``else``/``if`` 대신 사용하여 들여쓰기 높이를 유지할 수 "
"있습니다."

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:784
msgid "Short statements can be written on the same line as the condition::"
msgstr "간단한 명령문은 조건처럼 같은 줄에 적을 수 있습니다::"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:791
msgid ""
"Sometimes, you might want to assign a different initial value based on a "
"boolean expression. In this case, ternary-if expressions come in handy::"
msgstr ""
"때로는, 불리언(Boolean) 표현식을 기반으로 다른 초기 값을 지정해야 하는 경우"
"가 있습니다. 이 경우에는 삼항 표현식을 쓰면 됩니다::"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:800
msgid ""
"Simple loops are created by using ``while`` syntax. Loops can be broken "
"using ``break`` or continued using ``continue``:"
msgstr ""
"간단한 루프는 ``while`` 문법으로 만들 수 있습니다. 루프는 ``break``\\ 를 사용"
"하여 끊거나 ``continue``\\ 를 사용하여 계속 갈 수 있습니다:"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:811
msgid ""
"To iterate through a range, such as an array or table, a *for* loop is used. "
"When iterating over an array, the current array element is stored in the "
"loop variable. When iterating over a dictionary, the *index* is stored in "
"the loop variable."
msgstr ""
"배열이나 테이블과 같은 범위에서 반복을 시행하려면 *for* 루프를 사용합니다. "
"한 배열을 반복할 때, 현재 배열 요소는 루프 변수에 저장됩니다. 딕셔너리를 반복"
"할 때, *인덱스*\\ 는 루프 변수에 저장됩니다."

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:846
msgid ""
"A ``match`` statement is used to branch execution of a program. It's the "
"equivalent of the ``switch`` statement found in many other languages, but "
"offers some additional features."
msgstr ""
"``match`` 명령문은 프로그램 실행을 분기화하는 데 사용됩니다. 이것은 많은 다"
"른 언어에서 찾을 수 있는 ``switch`` 명령문과 유사하지만 몇 가지 추가 기능을 "
"제공합니다."

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:849
msgid "Basic syntax::"
msgstr "기본 문법::"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:860
msgid "**Crash-course for people who are familiar with switch statements**:"
msgstr "**switch 명령문에 익숙한 사람들을 위한 집중 강좌**:"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:862
msgid "Replace ``switch`` with ``match``."
msgstr "``switch``\\ 를 ``match``\\ 로 바꾸세요."

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:863
msgid "Remove ``case``."
msgstr "``case``\\ 를 제거하세요."

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:864
msgid ""
"Remove any ``break``\\ s. If you don't want to ``break`` by default, you can "
"use ``continue`` for a fallthrough."
msgstr ""
"모든 ``break``\\ 를 제거하세요. 기본적으로 ``break``\\ 가 되지 않도록 하고 싶"
"다면, 다른 언어의 fallthrough 키워드처럼 ``continue``\\ 를 사용할 수 있습니"
"다."

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:865
msgid "Change ``default`` to a single underscore."
msgstr "``default``\\ 를 하나의 밑줄로 변경하세요."

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:868
msgid "**Control flow**:"
msgstr "**제어 흐름(Control flow)**:"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:870
msgid ""
"The patterns are matched from top to bottom. If a pattern matches, the "
"corresponding block will be executed. After that, the execution continues "
"below the ``match`` statement. If you want to have a fallthrough, you can "
"use ``continue`` to stop execution in the current block and check the ones "
"below it."
msgstr ""
"패턴은 위에서 아래로 맞춰봅니다. 패턴이 맞으면, 해당 블록이 실행됩니다. 그런 "
"다음 실행은 ``match`` 명령문에서 계속됩니다. fallthrough 키워드를 쓰고 싶다"
"면, 대신 ``continue``\\ 로 현재 블록의 실행을 멈추고 다음 블록을 확인하게 할 "
"수 있습니다."

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:874
msgid "There are 6 pattern types:"
msgstr "6 가지 패턴 유형이 있습니다:"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:886
msgid "Constant pattern"
msgstr "상수 패턴(Constant pattern)"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:877
msgid "Constant primitives, like numbers and strings::"
msgstr "숫자와 문자열과 같은 상수 원시값(Primitive)::"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:898
msgid "Variable pattern"
msgstr "변수 패턴(Variable pattern)"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:889
msgid "Matches the contents of a variable/enum::"
msgstr "변수/열거형의 내용을 맞춰봅니다::"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:912
msgid "Wildcard pattern"
msgstr "임의 문자 기호 패턴(Wildcard pattern)"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:901
msgid "This pattern matches everything. It's written as a single underscore."
msgstr "이 패턴은 모든 것을 대조합니다. 하나의 밑줄로 쓸 수 있습니다."

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:903
msgid ""
"It can be used as the equivalent of the ``default`` in a ``switch`` "
"statement in other languages::"
msgstr ""
"다른 언어의 ``switch`` 명령문의 ``default``\\ 와 같은 의미로 쓰입니다::"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:925
msgid "Binding pattern"
msgstr "바인딩 패턴(Binding pattern)"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:915
msgid ""
"A binding pattern introduces a new variable. Like the wildcard pattern, it "
"matches everything - and also gives that value a name. It's especially "
"useful in array and dictionary patterns::"
msgstr ""
"바인딩 패턴은 새 변수를 도입합니다. 임의 문자 기호 패턴과 마찬가지로, 전부를 "
"비교합니다. 그리고 값에 이름을 부여합니다. 이는 특히 배열 패턴과 딕셔너리 패"
"턴에 유용합니다::"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:946
msgid "Array pattern"
msgstr "배열 패턴(Array pattern)"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:928
msgid ""
"Matches an array. Every single element of the array pattern is a pattern "
"itself, so you can nest them."
msgstr ""
"배열을 비교합니다. 배열 패턴의 각 단일 요소도 패턴이므로, 패턴을 중첩할 수 있"
"습니다."

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:930
msgid ""
"The length of the array is tested first, it has to be the same size as the "
"pattern, otherwise the pattern doesn't match."
msgstr ""
"배열의 길이가 먼저 테스트 되고, 그것이 패턴과 같은 크기이어야 합니다, 그렇지 "
"않으면 패턴이 일치하지 않습니다."

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:932
msgid ""
"**Open-ended array**: An array can be bigger than the pattern by making the "
"last subpattern ``..``."
msgstr ""
"**개방형 배열(Open-ended array)**: 배열의 마지막 하위 패턴을 ``..``\\ 으로 만"
"들어서 패턴보다 배열이 더 커질 수 있습니다."

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:934
msgid "Every subpattern has to be comma-separated."
msgstr "각 하위 패턴은 쉼표로 분리해야 합니다."

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:973
msgid "Dictionary pattern"
msgstr "딕셔너리 패턴(Dictionary pattern)"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:949
msgid ""
"Works in the same way as the array pattern. Every key has to be a constant "
"pattern."
msgstr ""
"배열 패턴과 같은 방식으로 작동합니다. 모든 키는 일정한 패턴이어야 합니다."

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:951
msgid ""
"The size of the dictionary is tested first, it has to be the same size as "
"the pattern, otherwise the pattern doesn't match."
msgstr ""
"딕셔너리의 크기가 먼저 테스트 되고, 그것이 패턴과 같은 크기이어야 합니다, 그"
"렇지 않으면 패턴이 일치하지 않습니다."

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:953
msgid ""
"**Open-ended dictionary**: A dictionary can be bigger than the pattern by "
"making the last subpattern ``..``."
msgstr ""
"**개방형 딕셔너리**(Open-ended dictionary): 딕셔너리의 마지막 하위 패턴을 "
"``..``\\ 으로 만들어서 패턴보다 딕셔너리가 더 커질 수 있습니다."

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:955
msgid "Every subpattern has to be comma separated."
msgstr "모든 하위 패턴은 쉼표로 분리되어야 합니다."

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:957
msgid ""
"If you don't specify a value, then only the existence of the key is checked."
msgstr "값을 지정하지 않으면, 키의 존재 여부만 확인됩니다."

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:959
msgid "A value pattern is separated from the key pattern with a ``:``."
msgstr "값 패턴과 키 패턴은 ``:``\\ 로 분리합니다."

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:986
msgid "Multiple patterns"
msgstr "여러 패턴(Multiple patterns)"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:976
msgid ""
"You can also specify multiple patterns separated by a comma. These patterns "
"aren't allowed to have any bindings in them."
msgstr ""
"여러 패턴을 쉼표로 분리해서 지정할 수 있습니다. 이 패턴들 사이에서 바인딩은 "
"허용되지 않습니다."

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:989
msgid "Classes"
msgstr "클래스(Class)"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:991
msgid ""
"By default, all script files are unnamed classes. In this case, you can only "
"reference them using the file's path, using either a relative or an absolute "
"path. For example, if you name a script file ``character.gd``::"
msgstr ""
"기본적으로 모든 스크립트 파일은 이름 없는 클래스입니다. 이 경우에는, 상대 경"
"로나 절대 경로와 같은 파일의 경로를 사용해서 참조만 할 수 있습니다. 예를 들"
"어, 스크립트 파일의 이름을 ``characrer.gd``\\ 라고 지었다면 다음과 같이 참조"
"합니다::"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:1004
msgid ""
"Instead, you can give your class a name to register it as a new type in "
"Godot's editor. For that, you use the ``class_name`` keyword. You can add an "
"optional comma followed by a path to an image, to use it as an icon. Your "
"class will then appear with its new icon in the editor::"
msgstr ""
"대신 클래스에 이름을 붙여서 Godot 편집기의 새 유형으로 등록할 수 있습니다. 이"
"를 위해, ``class_name`` 키워드를 사용합니다. 개별적으로 쉼표를 붙인 다음, 아"
"이콘으로 사용할 이미지의 경로를 입력할 수 있습니다. 만든 클래스는 새 아이콘"
"을 가진 채로 편집기에서 볼 수 있습니다::"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:1017
msgid "Here's a class file example:"
msgstr "클래스 파일 예제입니다:"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:1036
msgid ""
"Godot's class syntax is compact: it can only contain member variables or "
"functions. You can use static functions, but not static member variables. In "
"the same way, the engine initializes variables every time you create an "
"instance, and this includes arrays and dictionaries. This is in the spirit "
"of thread safety, since scripts can be initialized in separate threads "
"without the user knowing."
msgstr ""
"Godot의 클래스 문법은 간결합니다: 오직 멤버 변수 혹은 함수만 가질 수 있습니"
"다. 정적 함수를 사용할 수 있지만, 정적 멤버 변수는 사용할 수 없습니다. 이처"
"럼 엔진은 인스턴스를 만드는 매 시간마다 변수를 초기화합니다. 그리고 여기에는 "
"배열과 딕셔너리가 포함됩니다. 스레드 안전의 정신이 비롯된 것입니다. 여러 스레"
"드에서 스크립트가 사용자 모르게 초기화될 수 있기 때문입니다."

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:1044
msgid "Inheritance"
msgstr "상속(Inheritance)"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:1046
msgid "A class (stored as a file) can inherit from:"
msgstr "(파일로 저장한) 클래스는 여기서 상속될 수 있습니다:"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:1048
msgid "A global class."
msgstr "전역 클래스(Global class)."

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:1049
msgid "Another class file."
msgstr "다른 클래스 파일."

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:1050
msgid "An inner class inside another class file."
msgstr "다른 클래스 파일 안의 내부 클래스."

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:1052
msgid "Multiple inheritance is not allowed."
msgstr "다중 상속은 허용되지 않습니다."

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:1054
msgid "Inheritance uses the ``extends`` keyword::"
msgstr "``extends`` 키워드를 사용하여 상속합니다::"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:1066
msgid ""
"To check if a given instance inherits from a given class, the ``is`` keyword "
"can be used::"
msgstr ""
"주어진 인스턴스가 주어진 클래스로부터 상속받았는지 확인하려면, ``is`` 키워드"
"를 사용할 수 있습니다:"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:1078
msgid ""
"To call a function in a *parent class* (i.e. one ``extend``-ed in your "
"current class), prepend ``.`` to the function name::"
msgstr ""
"*부모 클래스*\\ 에서 (다시 말해, 현재 클래스에서 ``extend``\\ 된 클래스에서) "
"함수를 호출하려면, 함수 이름 앞에 ``.``\\ 을 입력하세요::"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:1083
msgid ""
"This is especially useful because functions in extending classes replace "
"functions with the same name in their parent classes. If you still want to "
"call them, you can prefix them with ``.`` (like the ``super`` keyword in "
"other languages)::"
msgstr ""
"특히 확장하는 클래스의 함수는 부모 클래스에서 같은 이름의 함수로 교체한다는 "
"점에서 유용합니다. 확장하는 클래스의 함수를 계속 호출하고 싶으면, 접두사로 "
"``.``\\ 을 붙이면 됩니다 (다른 언어에서 ``super`` 키워드처럼 말이죠)::"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:1091
msgid ""
"Default functions like  ``_init``, and most notifications such as "
"``_enter_tree``, ``_exit_tree``, ``_process``, ``_physics_process``, etc. "
"are called in all parent classes automatically. There is no need to call "
"them explicitly when overloading them."
msgstr ""
"``_init``\\ 과 같은 기본 함수와 대부분의 알림, ``_enter_tree``, "
"``_exit_tree``, ``_process``, ``_physics_process``\\ 등은 모든 부모 클래스에"
"서 자동으로 호출할 수 있습니다. 함수를 오버로드(Overload)할 때 명시척으로 호"
"출하지 않아도 됩니다."

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:1098
msgid "Class Constructor"
msgstr "클래스 생성자(Class Constructor)"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:1100
msgid ""
"The class constructor, called on class instantiation, is named ``_init``. As "
"mentioned earlier, the constructors of parent classes are called "
"automatically when inheriting a class. So, there is usually no need to call "
"``._init()`` explicitly."
msgstr ""
"클래스 인스턴스화라고 부르는 클래스 생성자는 ``_init``\\ 이라고 부릅니다. 앞"
"에서 말했듯이, 부모 클래스의 생성자는 클래스를 상속할 때 자동으로 호출됩니"
"다. 따라서 보통 명시적으로 ``_init()``\\ 을 호출하지 않습니다."

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:1105
msgid ""
"Unlike the call of a regular function, like in the above example with ``."
"some_func``, if the constructor from the inherited class takes arguments, "
"they are passed like this::"
msgstr ""
"위의 ``.some_func`` 함수로 보여준 표준 함수의 호출과는 달리, 상속받은 클래스"
"의 생성자가 인수를 갖는다면, 이와 같이 전달됩니다::"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:1112
msgid "This is better explained through examples. Consider this scenario::"
msgstr ""
"예제를 통해서 더 쉽게 설명해 보겠습니다. 다음 시나리오를 생각해보세요::"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:1132
msgid "There are a few things to keep in mind here:"
msgstr "유의해야 할 몇 가지 사항이 있습니다:"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:1134
msgid ""
"If the inherited class (``State.gd``) defines a ``_init`` constructor that "
"takes arguments (``e`` in this case), then the inheriting class (``Idle."
"gd``) *must* define ``_init`` as well and pass appropriate parameters to "
"``_init`` from ``State.gd``."
msgstr ""
"상속받은 클래스 (``State.gd``)가 인수를 갖는 ``_init`` 생성자를 정의한다면 "
"(여기서 인수는 ``e``가 되겠죠), 상속하는 클래스 (``Idle.gd``)는 *반드시* "
"``_init``\\ 을 정의해야 하고, ``State.gd``\\ 에서 적절한 매개변수를 ``_init``"
"\\ 으로 전달해야 합니다."

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:1137
msgid ""
"``Idle.gd`` can have a different number of arguments than the parent class "
"``State.gd``."
msgstr ""
"``idle.gd``\\ 는 부모 클래스 ``State.gd``\\ 와는 다른 개수의 인수를 가질 수 "
"있습니다."

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:1138
msgid ""
"In the example above, ``e`` passed to the ``State.gd`` constructor is the "
"same ``e`` passed in to ``Idle.gd``."
msgstr ""
"위의 예제에서 State.gd`` 생성자로 전달된 ``e``\\ 는 ``Idle.gd``\\ 로 전달된 "
"``e``\\ 와 같습니다."

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:1140
msgid ""
"If ``Idle.gd``'s ``_init`` constructor takes 0 arguments, it still needs to "
"pass some value to the ``State.gd`` parent class, even if it does nothing. "
"This brings us to the fact that you can pass literals in the base "
"constructor as well, not just variables. eg.::"
msgstr ""
"``Idle.gd``\\ 의 ``_init`` 생성자가 0 개의 인수를 갖더라도, 어떤 값을 "
"``State.gd`` 부모 클래스로 전달해야 합니다. 그것이 쓸모가 없더라도 말이죠. 이"
"것으로 알게된 것은 기본 생성자에서 변수 뿐만 아니라 리터럴도 전달할 수 있다"
"는 것입니다. 예::"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:1150
msgid "Inner classes"
msgstr "내부 클래스(Inner Class)"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:1152
msgid ""
"A class file can contain inner classes. Inner classes are defined using the "
"``class`` keyword. They are instanced using the ``ClassName.new()`` function."
msgstr ""
"클래스 파일은 내부 클래스를 가질 수 있습니다. 내부 클래스는 ``class`` 키워드"
"로 정의할 수 있습니다. 내부 클래스는 ``ClassName.new()`` 함수로 인스턴스될 "
"수 있습니다."

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:1174
msgid "Classes as resources"
msgstr "리소스로 취급되는 클래스"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:1176
msgid ""
"Classes stored as files are treated as :ref:`resources <class_GDScript>`. "
"They must be loaded from disk to access them in other classes. This is done "
"using either the ``load`` or ``preload`` functions (see below). Instancing "
"of a loaded class resource is done by calling the ``new`` function on the "
"class object::"
msgstr ""
"파일로 저장된 클래스는 :ref:`리소스 <class_GDScript>`\\ 로 취급됩니다. 다른 "
"클래스에서 접근하려면 반드시 디스크에서 불러와야 합니다. 불러오려면 ``load``"
"\\ 나 ``preload`` 함수를 사용할 수 있습니다 (아래를 참고하세요). 불러온 클래"
"스 리소스를 인스턴스하려면 클래스 객체에 ``new`` 함수를 호출해야 합니다::"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:1192
msgid "Exports"
msgstr "내보내기(Export)"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:1196
msgid ""
"Documentation about exports has been moved to :ref:`doc_gdscript_exports`."
msgstr "내보내기에 관한 서술은 :ref:`doc_gdscript_exports`\\ 로 옮겨졌습니다."

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:1199
msgid "Setters/getters"
msgstr "Setter(세터)/Getter(게터)"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:1201
msgid ""
"It is often useful to know when a class' member variable changes for "
"whatever reason. It may also be desired to encapsulate its access in some "
"way."
msgstr ""
"클래스 멤버 변수가 어떤 이유로든 언제 변경되는지를 아는 것은 종종 유용합니"
"다. 어떤 방식으로 그것의 접근을 캡슐화 하는 것이 필요할 수도 있습니다."

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:1204
msgid ""
"For this, GDScript provides a *setter/getter* syntax using the ``setget`` "
"keyword. It is used directly after a variable definition:"
msgstr ""
"이를 위해, GDScript는 ``setget`` 키워드를 사용하는 *setter/getter* 문법을 제"
"공합니다. 변수 정의 바로 뒤에 사용됩니다:"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:1211
msgid ""
"Whenever the value of ``variable`` is modified by an *external* source (i.e. "
"not from local usage in the class), the *setter* function (``setterfunc`` "
"above) will be called. This happens *before* the value is changed. The "
"*setter* must decide what to do with the new value. Vice versa, when "
"``variable`` is accessed, the *getter* function (``getterfunc`` above) must "
"``return`` the desired value. Below is an example::"
msgstr ""
"``변수``\\ 의 값이 (클래스에서 지역 범위의 사용이 아닌) *외부* 소스에 의해 수"
"정되었다면, (위 예시에서 ``setterfunc``\\ 에 해당하는) *Setter* 함수가 호출됩"
"니다. 호출은 값이 변하기 *전*\\ 에 일어납니다. *Setter*\\ 는 새 값으로 수행"
"할 작업을 결정해야 합니다. 반대로, ``변수``\\ 에 접근할 때, (위 예시에서 "
"``getterfunc``\\ 에 해당하는) *Getter* 함수는 반드시 그에 맞는 값을 ``반환``"
"\\ 합니다. 아래는 예제입니다::"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:1225
msgid "Either of the *setter* or *getter* functions can be omitted::"
msgstr ""
"정의할 때, *Setter* 혹은 *Getter* 함수, 둘 중 하나가 생략되어도도 됩니다::"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:1232
msgid ""
"Setters and getters are useful when :ref:`exporting variables "
"<doc_gdscript_exports>` to the editor in tool scripts or plugins, for "
"validating input."
msgstr ""
"Setter와 Getter는 tool 스크립트나 플러그인에서, 입력을 확인하기 위해 편집기"
"로 :ref:`변수를 내보내기 <doc_gdscript_exports>`\\ 에 유용합니다."

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:1235
msgid ""
"As said, *local* access will *not* trigger the setter and getter. Here is an "
"illustration of this:"
msgstr ""
"말했듯이 *지역(Local)* 접근은 Setter와 Getter를 작동하지 *않을* 것입니다. 이 "
"예제로 설명하겠습니다:"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:1252
msgid "Tool mode"
msgstr "Tool mode(도구 모드)"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:1254
msgid ""
"By default, scripts don't run inside the editor and only the exported "
"properties can be changed. In some cases, it is desired that they do run "
"inside the editor (as long as they don't execute game code or manually avoid "
"doing so). For this, the ``tool`` keyword exists and must be placed at the "
"top of the file::"
msgstr ""
"기본적으로 스크립트는 편집기 내에서 실행하지 않으며, 오직 내보낸 속성만 편집"
"기에서 변경할 수 있습니다. 하지만 몇 몇 경우에는, 편집기 내에서 스크립트가 실"
"행되는 것이 유용할 때가 있습니다 (스크립트가 게임 코드를 실행하지 않거나 수동"
"으로 실행하지 않는 경우가 있죠). 이를 위한 ``tool`` 키워드가 있고, 파일의 최"
"상단에 배치되어야 합니다::"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:1267
msgid "See :ref:`doc_running_code_in_the_editor` for more information."
msgstr "자세한 설명은 :ref:`doc_running_code_in_the_editor`\\ 를 참고하세요."

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:1269
msgid ""
"Be cautious when freeing nodes with ``queue_free()`` or ``free()`` in a tool "
"script (especially the script's owner itself). As tool scripts run their "
"code in the editor, misusing them may lead to crashing the editor."
msgstr ""
"Tool 스크립트에서 ``queue_free()``\\ 나 ``free()``\\ 로 노드를 해제할 때는 조"
"심하세요 (특히 스크립트의 소유권이 자기 자신일 때). Tool 스크립트는 편집기에"
"서 코드를 실행하기 때문에, 잘못 해제하면 편집기가 튕길 수 있습니다."

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:1275
msgid "Memory management"
msgstr "메모리 관리"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:1277
msgid ""
"If a class inherits from :ref:`class_Reference`, then instances will be "
"freed when no longer in use. No garbage collector exists, just reference "
"counting. By default, all classes that don't define inheritance extend "
"**Reference**. If this is not desired, then a class must inherit :ref:"
"`class_Object` manually and must call instance.free(). To avoid reference "
"cycles that can't be freed, a ``weakref`` function is provided for creating "
"weak references."
msgstr ""
"클래스가 :ref:`class_Reference` 에서 상속할 때, 더 이상 사용하지 않게 되면 인"
"스턴스는 해제됩니다. 가비지 콜렉터 없이, 참조만 계산됩니다. 기본적으로, 상속"
"을 정의하지 않는 모든 클래스는 **참조** 를 확장합니다. 바람직하지 않다면, 클"
"래스는 :ref:`class_Object` 를 수동으로 상속해야만 하고 instance.free()를 호출"
"해야만 합니다. 해제할 수 없는 참조 사이클을 피하기 위해, 약한 참조를 생성하"
"는 ``weakref`` 함수가 제공됩니다."

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:1285
msgid ""
"Alternatively, when not using references, the "
"``is_instance_valid(instance)`` can be used to check if an object has been "
"freed."
msgstr ""
"또는, 참조를 사용하지 않을 때, ``is_instance_valid(instance)`` 가 객체가 해제"
"되었는 지를 확인하는데 사용될 수 있습니다."

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:1294
msgid ""
"Signals are a tool to emit messages from an object that other objects can "
"react to. To create custom signals for a class, use the ``signal`` keyword."
msgstr ""
"시그널은 한 객체에서 메시지를 방출해서 메시지를 받을 수 있는 다른 객체가 받"
"는 도구입니다. 클래스에서 맞춤 시그널을 만들려면, ``signal`` 키워드를 사용하"
"세요."

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:1306
msgid ""
"Signals are a `Callback <https://en.wikipedia.org/wiki/"
"Callback_(computer_programming)>`_ mechanism. They also fill the role of "
"Observers, a common programming pattern. For more information, read the "
"`Observer tutorial <https://gameprogrammingpatterns.com/observer.html>`_ in "
"the Game Programming Patterns ebook."
msgstr ""
"시그널은 `콜백 <https://ko.wikipedia.org/wiki/%EC%BD%9C%EB%B0%B1>`_ 메커니즘"
"입니다. 그리고 일반적인 프로그래밍 패턴인 옵저버(Observer) 규칙도 있습니다. "
"자세한 정보는 Game Programming Patterns의 전자책, `Observer tutorial "
"<https://gameprogrammingpatterns.com/observer.html>`_\\ 을 참고해주세요."

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:1313
msgid ""
"You can connect these signals to methods the same way you connect built-in "
"signals of nodes like :ref:`class_Button` or :ref:`class_RigidBody`."
msgstr ""
"맞춤 시그널도 :ref:`class_Button`\\ 나 :ref:`class_RigidBody`\\ 와 같은 노드"
"에 내장된 시그널을 연결하는 방법과 같은 방식으로 메서드에 연결할 수 있습니다."

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:1316
msgid ""
"In the example below, we connect the ``health_depleted`` signal from a "
"``Character`` node to a ``Game`` node. When the ``Character`` node emits the "
"signal, the game node's ``_on_Character_health_depleted`` is called::"
msgstr ""
"아래의 예제에서, ``Character`` 노드의 ``health_depleted`` 시그널을 ``Game`` "
"노드에 연결했습니다. ``Character`` 노드가 시그널을 방출하면, Game 노드의 "
"``_on_Character_health_depleted``\\ 가 호출됩니다::"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:1329
msgid "You can emit as many arguments as you want along with a signal."
msgstr "하나의 시그널에 원하는 만큼 많은 인수를 함께 방출할 수 있습니다."

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:1331
msgid ""
"Here is an example where this is useful. Let's say we want a life bar on "
"screen to react to health changes with an animation, but we want to keep the "
"user interface separate from the player in our scene tree."
msgstr ""
"어디서 이 점이 유용하게 쓰이는 지 예제와 함께 알아봅시다. 한 번 상상해봅시"
"다. 체력 막대가 필요합니다. 체력이 변하면 체력 막대도 따라서 변합니다. 하지"
"만 씬 트리에서 플레이어와 사용자 인터페이스는 분리되어 있어야 합니다."

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:1335
msgid ""
"In our ``Character.gd`` script, we define a ``health_changed`` signal and "
"emit it with :ref:`Object.emit_signal() <class_Object_method_emit_signal>`, "
"and from a ``Game`` node higher up our scene tree, we connect it to the "
"``Lifebar`` using the :ref:`Object.connect() <class_Object_method_connect>` "
"method::"
msgstr ""
"``Character.gd`` 스크립트에서 ``health_changed`` 시그널을 정의했습니다. 그리"
"고 :ref:`Object.emit_signal() <class_Object_method_emit_signal>`\\ 로 방출합"
"니다. 그리고 앁 트리에서 가장 높이 있는 ``Game`` 노드에서 :ref:`Object."
"connect() <class_Object_method_connect>` 메서드를 사용해 시그널을 ``Lifebar``"
"\\ 에 연결합니다::"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:1375
msgid ""
"To use signals, your class has to extend the ``Object`` class or any type "
"extending it like ``Node``, ``KinematicBody``, ``Control``..."
msgstr ""
"시그널을 쓰려면, 클래스가 ``Object`` 클래스나 다른 확장하는 클래스, "
"``Node``, ``KinematicBody``, ``Control`` 등을 확장(extend)해야 합니다."

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:1378
msgid ""
"In the ``Game`` node, we get both the ``Character`` and ``Lifebar`` nodes, "
"then connect the character, that emits the signal, to the receiver, the "
"``Lifebar`` node in this case."
msgstr ""
"``Game`` 노드에는 ``Character``\\ 와 ``Lifebar`` 노드 둘 다 갖고 있습니다. "
"Character를 연결(Connect)하고 시그널을 리시버로 방출합니다. 이 경우는 "
"``Lifebar``\\ 가 해당하겠죠."

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:1392
msgid ""
"This allows the ``Lifebar`` to react to health changes without coupling it "
"to the ``Character`` node."
msgstr ""
"이렇게 하면 ``Lifebar``\\ 는 ``Character`` 노드와 묶지 않고도 체력 변화에 반"
"응할 수 있습니다."

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:1395
msgid ""
"You can write optional argument names in parentheses after the signal's "
"definition::"
msgstr ""
"시그널을 정의한 후에, 개별적으로 괄호 안에 인수 이름을 적을 수 있습니다::"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:1401
msgid ""
"These arguments show up in the editor's node dock, and Godot can use them to "
"generate callback functions for you. However, you can still emit any number "
"of arguments when you emit signals; it's up to you to emit the correct "
"values."
msgstr ""
"인수는 편집기의 노드(Node) 독에 보입니다. 그리고 Godot는 이 인수로 콜백 함수"
"를 생성할 수 있습니다. 하지만 시그널을 방출할 때 여전히 많은 수의 인수를 방출"
"할 수 있습니다. 다시 말해 올바른 값을 방출하는 일은 당신에게 달린 것입니다."

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:1407
msgid ""
"GDScript can bind an array of values to connections between a signal and a "
"method. When the signal is emitted, the callback method receives the bound "
"values. These bound arguments are unique to each connection, and the values "
"will stay the same."
msgstr ""
"GDScript는 시그널과 메서드 간 연결을 위해 배열의 값에 바인딩할 수 있습니다. "
"시그널을 방출할 때, 콜백 메서드는 바운드 값을 받습니다. 이 바운드 인수는 각 "
"연결에서 유일하며, 값도 똑같이 유지됩니다."

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:1412
msgid ""
"You can use this array of values to add extra constant information to the "
"connection if the emitted signal itself doesn't give you access to all the "
"data that you need."
msgstr ""
"이 배열의 값으로 연결에 여분의 상수 정보를 추가할 수 있습니다. 시그널이 방출"
"됐지만 필요한 데이터로 접근하지 못할 수도 있으니까요."

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:1416
msgid ""
"Building on the example above, let's say we want to display a log of the "
"damage taken by each character on the screen, like ``Player1 took 22 damage."
"``. The ``health_changed`` signal doesn't give us the name of the character "
"that took damage. So when we connect the signal to the in-game console, we "
"can add the character's name in the binds array argument::"
msgstr ""
"위의 예제를 바탕으로, 화면에서 각 캐릭터가 받은 대미지의 로그를 표시해봅시"
"다. 예를 들면 ``Player1은 22의 대미지를 받았다.``\\ 같이 말이죠. "
"``health_changed`` 시그널은 대미지를 받는 Character의 이름을 주고 있지 않습니"
"다. 따라서 시그널을 게임 내 콘솔에 연결하면, 바인딩 배열 인수에 Character의 "
"이름을 추가할 수 있습니다::"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:1430
msgid ""
"Our ``BattleLog`` node receives each element in the binds array as an extra "
"argument::"
msgstr "``BattleLog`` 노드는 바인딩 배열의 각 요소를 추가 인수로 받습니다::"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:1443
msgid "Coroutines with yield"
msgstr "yield를 가진 코루틴(Coroutine)"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:1445
msgid ""
"GDScript offers support for `coroutines <https://en.wikipedia.org/wiki/"
"Coroutine>`_ via the :ref:`yield<class_@GDScript_method_yield>` built-in "
"function. Calling ``yield()`` will immediately return from the current "
"function, with the current frozen state of the same function as the return "
"value. Calling ``resume()`` on this resulting object will continue execution "
"and return whatever the function returns. Once resumed, the state object "
"becomes invalid. Here is an example::"
msgstr ""
"GDScript는 :ref:`yield<class_@GDScript_method_yield>` 내장 함수를 통해 `코루"
"틴(Coroutines) <https://en.wikipedia.org/wiki/Coroutine>`_\\ 을 지원합니다. "
"``yield()``\\ 를 호출하면 즉시 현재 함수에서 같은 함수의 현재 상태를 반환합니"
"다. 그리고 ``resume``\\ 을 결과 객체에 호출하면 실행이 계속되고 함수가 반환하"
"는 값을 반환합니다. 다시 시작하면 상태 객체는 무효화됩니다. 여기 예제가 있습"
"니다::"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:1465
#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:1485
msgid "Will print::"
msgstr "이렇게 프린트됩니다::"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:1471
msgid ""
"It is also possible to pass values between ``yield()`` and ``resume()``, for "
"example::"
msgstr ""
"``yield()``\\ 와 ``resume()`` 사이에 값을 전달할 수도 있습니다. 예를 들면::"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:1491
msgid ""
"Remember to save the new function state, when using multiple ``yield``\\s::"
msgstr ""

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:1505
msgid "Coroutines & signals"
msgstr "코루틴 & 시그널"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:1507
msgid ""
"The real strength of using ``yield`` is when combined with signals. "
"``yield`` can accept two arguments, an object and a signal. When the signal "
"is received, execution will recommence. Here are some examples::"
msgstr ""
"``yield``\\ 의 진정한 힘은 시그널과 결합할 때 나타납니다. ``yield``\\ 는 두 "
"개의 인수를 받을 수 있습니다.하나는 객체, 다른 하나는 시그널이죠. 시그널을 받"
"으면 실행이 다시 시작됩니다. 여기 몇 가지 예제가 있습니다::"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:1520
msgid ""
"Coroutines themselves use the ``completed`` signal when they transition into "
"an invalid state, for example::"
msgstr ""
"코루틴은 무효 상태로 전환할 때 ``complated`` 시그널을 사용합니다. 예를 들어::"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:1531
msgid ""
"``my_func`` will only continue execution once both buttons have been pressed."
msgstr "``my_func``\\ 은 오직 두 버튼이 한번에 눌릴 때 계속 실행됩니다."

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:1534
msgid "Onready keyword"
msgstr "Onready 키워드"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:1536
msgid ""
"When using nodes, it's common to desire to keep references to parts of the "
"scene in a variable. As scenes are only warranted to be configured when "
"entering the active scene tree, the sub-nodes can only be obtained when a "
"call to ``Node._ready()`` is made."
msgstr ""
"노드를 쓸 때, 씬의 일부를 변수로 참조하는 것이 일반적입니다. 씬은 활성 씬 트"
"리에 들어갈 때만 구성하기 때문에, 하위 노드는 ``Node._ready()``\\ 로의 호출"
"이 있을 때만 가져올 수 있습니다."

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:1548
msgid ""
"This can get a little cumbersome, especially when nodes and external "
"references pile up. For this, GDScript has the ``onready`` keyword, that "
"defers initialization of a member variable until ``_ready()`` is called. It "
"can replace the above code with a single line::"
msgstr ""
"이 작업은 특히, 노드와 외부 참조가 쌓이다 보면 번거로울 수 있습니다. 이를 위"
"해 GDScript는 ``onready`` 키워드를 갖고 있습니다. 이 키워드로 멤버 변수의 초"
"기화는 ``_ready()``\\ 를 호출할 때까지 지연합니다. 위의 코드를 한 줄로 대체"
"가 가능합니다::"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:1556
msgid "Assert keyword"
msgstr "Assert 키워드"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:1558
msgid ""
"The ``assert`` keyword can be used to check conditions in debug builds. "
"These assertions are ignored in non-debug builds. This means that the "
"expression passed as argument won't be evaluated in a project exported in "
"release mode. Due to this, assertions must **not** contain expressions that "
"have side effects. Otherwise, the behavior of the script would vary "
"depending on whether the project is run in a debug build."
msgstr ""
"``assert`` 키워드는 디버그 빌드에서 상태를 확인할 때 사용할 수 있습니다. 디버"
"그 빌드가 아니면 assert 키워드는 무시됩니다. 즉, 인수로 보낸 명령문은 출시 모"
"드로 내보낸 프로젝트에서 평가하지 않습니다. 이 때문에, assert는 반드시 역효과"
"를 일으킬 소지가 있는 표현식을 가질 수 **없습니다**. 그렇지 않으면, 스크립트"
"는 프로젝트가 디버그 빌드인지 여부에 따라 매우 다르게 동작할 것입니다."

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:1570
msgid ""
"When running a project from the editor, the project will be paused if an "
"assertion error occurs."
msgstr ""
"편집기에서 프로젝트를 실행할 때, assert 오류가 발생하면 프로젝트는 일시정지합"
"니다."

#: ../../docs/getting_started/scripting/gdscript/gdscript_advanced.rst:4
msgid "GDScript: An introduction to dynamic languages"
msgstr "GDScript: 동적 언어 소개"

#: ../../docs/getting_started/scripting/gdscript/gdscript_advanced.rst:9
msgid ""
"This tutorial aims to be a quick reference for how to use GDScript more "
"efficiently. It focuses on common cases specific to the language, but also "
"covers a lot of information on dynamically typed languages."
msgstr ""
"이 튜토리얼은 GDScript를 더 효과적으로 사용하는 방법에 대한 빠른 참고 문헌입"
"니다. 언어와 관련된 일반적인 사례 뿐만 아니라, 동적 타입 언어의 많은 정보도 "
"다루고 있습니다."

#: ../../docs/getting_started/scripting/gdscript/gdscript_advanced.rst:13
msgid ""
"It's meant to be especially useful for programmers with little or no "
"previous experience with dynamically typed languages."
msgstr ""
"이전까지 동적 타입 언어에 대한 경험이 없던 프로그래머에게 이 문서는 특히 더 "
"유용합니다."

#: ../../docs/getting_started/scripting/gdscript/gdscript_advanced.rst:17
msgid "Dynamic nature"
msgstr "동적 성격"

#: ../../docs/getting_started/scripting/gdscript/gdscript_advanced.rst:20
msgid "Pros & cons of dynamic typing"
msgstr "동적 타이핑의 장단점"

#: ../../docs/getting_started/scripting/gdscript/gdscript_advanced.rst:22
msgid ""
"GDScript is a Dynamically Typed language. As such, its main advantages are "
"that:"
msgstr "GDScript는 동적 타입 언어입니다. 따라서, 주요 이점은 다음과 같습니다:"

#: ../../docs/getting_started/scripting/gdscript/gdscript_advanced.rst:25
msgid "The language is simple and easy to learn."
msgstr "언어가 간결하고 배우기 쉽습니다."

#: ../../docs/getting_started/scripting/gdscript/gdscript_advanced.rst:26
msgid "Most code can be written and changed quickly and without hassle."
msgstr "대부분의 코드를 쉽고 빠르게 작성하고 변경할 수 있습니다."

#: ../../docs/getting_started/scripting/gdscript/gdscript_advanced.rst:27
msgid "Less code written means less errors & mistakes to fix."
msgstr "적은 코드 작성으로 오류와 실수를 줄일 수 있습니다."

#: ../../docs/getting_started/scripting/gdscript/gdscript_advanced.rst:28
msgid "Easier to read the code (less clutter)."
msgstr "코드를 읽기 더 쉽습니다 (덜 혼란스러움)."

#: ../../docs/getting_started/scripting/gdscript/gdscript_advanced.rst:29
msgid "No compilation is required to test."
msgstr "테스트하기 위한 컴파일 작업이 필요 없습니다."

#: ../../docs/getting_started/scripting/gdscript/gdscript_advanced.rst:30
msgid "Runtime is tiny."
msgstr "런타임이 작습니다."

#: ../../docs/getting_started/scripting/gdscript/gdscript_advanced.rst:31
msgid "Duck-typing and polymorphism by nature."
msgstr "덕 타이핑(Duck-typing)과 폴리모피즘(polymorphism)."

#: ../../docs/getting_started/scripting/gdscript/gdscript_advanced.rst:33
msgid "While the main disadvantages are:"
msgstr "반면 주요 단점은 다음과 같습니다:"

#: ../../docs/getting_started/scripting/gdscript/gdscript_advanced.rst:35
msgid "Less performance than statically typed languages."
msgstr "정적 타입 언어보다 낮은 퍼포먼스."

#: ../../docs/getting_started/scripting/gdscript/gdscript_advanced.rst:36
msgid "More difficult to refactor (symbols can't be traced)"
msgstr "refactor하기 더 어려움(기호를 추적할 수 없음)"

#: ../../docs/getting_started/scripting/gdscript/gdscript_advanced.rst:37
msgid ""
"Some errors that would typically be detected at compile time in statically "
"typed languages only appear while running the code (because expression "
"parsing is more strict)."
msgstr ""
"정적 타입 언어에서 컴파일 시간에 감지되는 오류가 오직 코드를 실행할 때만 나타"
"납니다 (표현 문법 분석이 더 엄격하기 때문입니다)."

#: ../../docs/getting_started/scripting/gdscript/gdscript_advanced.rst:40
msgid ""
"Less flexibility for code-completion (some variable types are only known at "
"run-time)."
msgstr "코드 완성에 덜 유연함 (일부 변수 타입은 런타임에만 알려짐)."

#: ../../docs/getting_started/scripting/gdscript/gdscript_advanced.rst:43
msgid ""
"This, translated to reality, means that Godot+GDScript are a combination "
"designed to create games quickly and efficiently. For games that are very "
"computationally intensive and can't benefit from the engine built-in tools "
"(such as the Vector types, Physics Engine, Math library, etc), the "
"possibility of using C++ is present too. This allows you to still create "
"most of the game in GDScript and add small bits of C++ in the areas that "
"need a performance boost."
msgstr ""
"현실로 번역된 이 말은 Godot+GDScript가 게임을 빠르고 효율적으로 만들 수 있는 "
"조합임을 의미합니다. 매우 계산 집약적이고 엔진 내장 도구 (벡터 타입, 물리 엔"
"진, 수학 라이브러리 등)의 이점을 누릴 수 없는 게임의 경우, C++를 사용하는 경"
"우의 수도 존재합니다. 이걸로 GDScript에서 전체적인 게임을, 그리고 퍼포먼스 가"
"속이 필요한 영역에 약간의 C++를 첨가하는 것이 가능합니다."

#: ../../docs/getting_started/scripting/gdscript/gdscript_advanced.rst:52
msgid "Variables & assignment"
msgstr "변수 & 지정"

#: ../../docs/getting_started/scripting/gdscript/gdscript_advanced.rst:54
msgid ""
"All variables in a dynamically typed language are \"variant\"-like. This "
"means that their type is not fixed, and is only modified through assignment. "
"Example:"
msgstr ""
"동적 타입 언어의 모든 변수는 \"변형\"과 유사합니다. 즉, 그들의 타입은 고정되"
"어 있지 않고, 오직 지정을 통해 수정됩니다. 예제:"

#: ../../docs/getting_started/scripting/gdscript/gdscript_advanced.rst:58
#: ../../docs/getting_started/scripting/gdscript/gdscript_advanced.rst:80
msgid "Static:"
msgstr "정적 언어:"

#: ../../docs/getting_started/scripting/gdscript/gdscript_advanced.rst:66
#: ../../docs/getting_started/scripting/gdscript/gdscript_advanced.rst:94
msgid "Dynamic:"
msgstr "동적 언어:"

#: ../../docs/getting_started/scripting/gdscript/gdscript_advanced.rst:75
msgid "As function arguments:"
msgstr "함수 인수로:"

#: ../../docs/getting_started/scripting/gdscript/gdscript_advanced.rst:77
msgid ""
"Functions are of dynamic nature too, which means they can be called with "
"different arguments, for example:"
msgstr ""
"함수도 동적인 특성을 지닙니다, 그래서 함수를 다른 인수로 호출할 수 있습니다, "
"예를 들어:"

#: ../../docs/getting_started/scripting/gdscript/gdscript_advanced.rst:107
msgid "Pointers & referencing:"
msgstr "포인터(Pointer) & 참조:"

#: ../../docs/getting_started/scripting/gdscript/gdscript_advanced.rst:109
msgid ""
"In static languages, such as C or C++ (and to some extent Java and C#), "
"there is a distinction between a variable and a pointer/reference to a "
"variable. The latter allows the object to be modified by other functions by "
"passing a reference to the original one."
msgstr ""
"C 나 C++ (그리고 어느 정도는 Java와 C#) 같은 정적 언어에서, 변수와 변수에 대"
"한 포인터/참조는 구별됩니다. 후자는 원래의 참조를 전달하여 다른 함수에 의해 "
"객체가 수정되도록 할 수 있습니다."

#: ../../docs/getting_started/scripting/gdscript/gdscript_advanced.rst:114
msgid ""
"In C# or Java, everything not a built-in type (int, float, sometimes String) "
"is always a pointer or a reference. References are also garbage-collected "
"automatically, which means they are erased when no longer used. Dynamically "
"typed languages tend to use this memory model, too. Some Examples:"
msgstr ""
"C#이나 Java에서, 모든 것이 내장 타입 (정수, 실수, 때때로 문자열)이 아닌 포인"
"터나 참조입니다. 참조는 또한 자동으로 가비지를 모으는데, 더 이상 사용되지 않"
"으면 삭제됩니다. 동적 타입 언어 역시 이런 메모리 모델을 사용하는 경향이 있습"
"니다. 몇 가지 예제:"

#: ../../docs/getting_started/scripting/gdscript/gdscript_advanced.rst:120
msgid "C++:"
msgstr "C++:"

#: ../../docs/getting_started/scripting/gdscript/gdscript_advanced.rst:136
msgid "Java:"
msgstr "Java:"

#: ../../docs/getting_started/scripting/gdscript/gdscript_advanced.rst:154
msgid "GDScript:"
msgstr "GDScript:"

#: ../../docs/getting_started/scripting/gdscript/gdscript_advanced.rst:166
msgid ""
"In GDScript, only base types (int, float, string and the vector types) are "
"passed by value to functions (value is copied). Everything else (instances, "
"arrays, dictionaries, etc) is passed as reference. Classes that inherit :ref:"
"`class_Reference` (the default if nothing is specified) will be freed when "
"not used, but manual memory management is allowed too if inheriting manually "
"from :ref:`class_Object`."
msgstr ""
"GDScript에서 기본 타입 (정수, 실수, 문자열 그리고 벡터 타입)만이 함수에 값으"
"로 보낼 수 있습니다 (값은 복사됩니다). 나머지 (인스턴스, 배열, 딕셔너리 등)"
"는 참조로 보내집니다. :ref:`class_Reference` 를 상속한 클래스 (지정한 것이 없"
"으면 기본 값)는 사용되지 않을 때 해제되지만, :ref:`class_Object` 로 부터 수동"
"으로 상속하는 경우 수동 메모리 관리가 가능합니다."

#: ../../docs/getting_started/scripting/gdscript/gdscript_advanced.rst:174
#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:195
msgid "Arrays"
msgstr "배열"

#: ../../docs/getting_started/scripting/gdscript/gdscript_advanced.rst:176
msgid ""
"Arrays in dynamically typed languages can contain many different mixed "
"datatypes inside and are always dynamic (can be resized at any time). "
"Compare for example arrays in statically typed languages:"
msgstr ""
"동적 타입 언어에서의 배열은 다양한 혼합 데이터 타입을 포함할 수 있으며 항상 "
"동적입니다 (어느 때나 크기가 조절될 수 있습니다). 정적 타입 언어의 배열과 비"
"교하는 예제:"

#: ../../docs/getting_started/scripting/gdscript/gdscript_advanced.rst:203
msgid "And in GDScript:"
msgstr "그리고 GDScript에서는:"

#: ../../docs/getting_started/scripting/gdscript/gdscript_advanced.rst:212
msgid ""
"In dynamically typed languages, arrays can also double as other datatypes, "
"such as lists:"
msgstr ""
"동적 타입 언어에서, 배열은 목록과 같이, 다른 데이터 타입으로 두 배가 될 수도 "
"있습니다:"

#: ../../docs/getting_started/scripting/gdscript/gdscript_advanced.rst:222
msgid "Or unordered sets:"
msgstr "또는 순서가 없는 세트가 될 수 있습니다:"

#: ../../docs/getting_started/scripting/gdscript/gdscript_advanced.rst:231
msgid "Dictionaries"
msgstr "딕셔너리"

#: ../../docs/getting_started/scripting/gdscript/gdscript_advanced.rst:233
msgid ""
"Dictionaries are a powerful tool in dynamically typed languages. Most "
"programmers that come from statically typed languages (such as C++ or C#) "
"ignore their existence and make their life unnecessarily more difficult. "
"This datatype is generally not present in such languages (or only in limited "
"form)."
msgstr ""
"딕셔너리는 동적 타입 언어에서 강력한 도구입니다. 정적 타입 언어 (C++나 C#)에"
"서 온 대부분의 프로그래머들이 이 존재를 무시한 채 그들의 삶을 더 어렵게 만들"
"고 있습니다. 이 데이터 타입은 일반적으로 그러한 언어 (또는 제한된 형태)로 존"
"재하지 않습니다."

#: ../../docs/getting_started/scripting/gdscript/gdscript_advanced.rst:239
msgid ""
"Dictionaries can map any value to any other value with complete disregard "
"for the datatype used as either key or value. Contrary to popular belief, "
"they are efficient because they can be implemented with hash tables. They "
"are, in fact, so efficient that some languages will go as far as "
"implementing arrays as dictionaries."
msgstr ""
"딕셔너리는 키 또는 값으로 사용되는 데이터 타입을 무시하고 다른 값으로 매핑 "
"할 수 있습니다. 대중적 신념과는 반대로, 그들은 해시 테이블로 구현될 수 있기 "
"때문에 효과적입니다. 사실, 일부 언어는 배열을 딕셔너리로 구현하는 것이 더 효"
"과적입니다."

#: ../../docs/getting_started/scripting/gdscript/gdscript_advanced.rst:245
msgid "Example of Dictionary:"
msgstr "딕셔너리의 예제:"

#: ../../docs/getting_started/scripting/gdscript/gdscript_advanced.rst:252
msgid ""
"Dictionaries are also dynamic, keys can be added or removed at any point at "
"little cost:"
msgstr ""
"딕셔너리 또한 동적이기에, 적은 손해로 어디에나 키를 추가하고 삭제할 수 있습니"
"다:"

#: ../../docs/getting_started/scripting/gdscript/gdscript_advanced.rst:261
msgid ""
"In most cases, two-dimensional arrays can often be implemented more easily "
"with dictionaries. Here's a simple battleship game example:"
msgstr ""
"대부분의 경우, 2 차원 배열은 종종 딕셔너리로 더 쉽게 구현될 수 있습니다. 여"
"기 간단한 전함 게임 예제가 있습니다:"

#: ../../docs/getting_started/scripting/gdscript/gdscript_advanced.rst:294
msgid ""
"Dictionaries can also be used as data markup or quick structures. While "
"GDScript's dictionaries resemble python dictionaries, it also supports Lua "
"style syntax and indexing, which makes it useful for writing initial states "
"and quick structs:"
msgstr ""
"딕셔너리는 또한 데이터 마크업이나 빠른 구조에도 사용될 수 있습니다. GDScript "
"딕셔너리가 python 딕셔너리와 닮은 한편, GDScript는 초기 상태와 빠른 구조체를 "
"작성하는 데 유용한 Lua 스타일 문법과 인덱싱도 지원합니다:"

#: ../../docs/getting_started/scripting/gdscript/gdscript_advanced.rst:319
msgid "For & while"
msgstr "For & while"

#: ../../docs/getting_started/scripting/gdscript/gdscript_advanced.rst:321
msgid "Iterating in some statically typed languages can be quite complex:"
msgstr "일부 정적 타입 언어에서 반복은 꽤 복잡해질 수 있습니다:"

#: ../../docs/getting_started/scripting/gdscript/gdscript_advanced.rst:341
msgid "This is usually greatly simplified in dynamically typed languages:"
msgstr "보통 동적 타입 언어에서는 이것이 매우 단순화됩니다:"

#: ../../docs/getting_started/scripting/gdscript/gdscript_advanced.rst:348
msgid ""
"Container datatypes (arrays and dictionaries) are iterable. Dictionaries "
"allow iterating the keys:"
msgstr ""
"컨테이너 데이터 타입 (배열과 딕셔너리)도 반복 가능합니다. 딕셔너리는 키를 반"
"복할 수 있습니다:"

#: ../../docs/getting_started/scripting/gdscript/gdscript_advanced.rst:356
msgid "Iterating with indices is also possible:"
msgstr "인덱스로 반복하기도 가능합니다:"

#: ../../docs/getting_started/scripting/gdscript/gdscript_advanced.rst:363
msgid "The range() function can take 3 arguments:"
msgstr "range() 함수는 3개의 인수를 가질 수 있습니다:"

#: ../../docs/getting_started/scripting/gdscript/gdscript_advanced.rst:371
msgid "Some statically typed programming language examples:"
msgstr "일부 정적 타입 프로그래밍 언어 예제:"

#: ../../docs/getting_started/scripting/gdscript/gdscript_advanced.rst:381
msgid "Translate to:"
msgstr "번역:"

#: ../../docs/getting_started/scripting/gdscript/gdscript_advanced.rst:394
msgid "And backwards looping is done through a negative counter:"
msgstr "그리고 음수 카운터를 통해 역방향 루프가 됩니다:"

#: ../../docs/getting_started/scripting/gdscript/gdscript_advanced.rst:400
msgid "Becomes:"
msgstr "이렇게 됩니다:"

#: ../../docs/getting_started/scripting/gdscript/gdscript_advanced.rst:408
#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:384
msgid "While"
msgstr "While"

#: ../../docs/getting_started/scripting/gdscript/gdscript_advanced.rst:410
msgid "while() loops are the same everywhere:"
msgstr "while() 루프는 모든 곳에서 동일합니다:"

#: ../../docs/getting_started/scripting/gdscript/gdscript_advanced.rst:421
msgid "Custom iterators"
msgstr "맞춤 반복자(Iterator)"

#: ../../docs/getting_started/scripting/gdscript/gdscript_advanced.rst:422
msgid ""
"You can create custom iterators in case the default ones don't quite meet "
"your needs by overriding the Variant class's ``_iter_init``, ``_iter_next``, "
"and ``_iter_get`` functions in your script. An example implementation of a "
"forward iterator follows:"
msgstr ""
"기본 반복자가 필요에 맞지 않는다면 변수 클래스의 스크립트의 ``_iter_init``, "
"``_iter_next``, 그리고 ``_iter_get`` 함수를 오버라이딩하여 맞춤 반복자를 생성"
"하실 수 있습니다. forward 반복자의 예제 구현은 다음과 같습니다:"

#: ../../docs/getting_started/scripting/gdscript/gdscript_advanced.rst:454
msgid "And it can be used like any other iterator:"
msgstr "그리고 모든 다른 반복자처럼 사용될 수 있습니다:"

#: ../../docs/getting_started/scripting/gdscript/gdscript_advanced.rst:462
msgid ""
"Make sure to reset the state of the iterator in ``_iter_init``, otherwise "
"nested for-loops that use custom iterators will not work as expected."
msgstr ""
"``_iter_init`` 에서 반복자의 상태를 리셋해야 합니다, 그렇지 않으면 맞춤 반복"
"자에 사용하는 중첩된 for 루프가 예상대로 작동하지 않을 것입니다."

#: ../../docs/getting_started/scripting/gdscript/gdscript_advanced.rst:466
msgid "Duck typing"
msgstr "덕 타이핑(Duck typing)"

#: ../../docs/getting_started/scripting/gdscript/gdscript_advanced.rst:468
msgid ""
"One of the most difficult concepts to grasp when moving from a statically "
"typed language to a dynamic one is duck typing. Duck typing makes overall "
"code design much simpler and straightforward to write, but it's not obvious "
"how it works."
msgstr ""
"정적 타입 언어에서 동적 타입 언어로 바꿀 때 이해하기 어려운 개념들 중 하나가 "
"덕 타이핑입니다. 덕 타이핑은 전체 코드 설계를 더 간단하고 쓰기 쉽게 만들어주"
"지만, 어떻게 작동하는지 분명하지 않습니다."

#: ../../docs/getting_started/scripting/gdscript/gdscript_advanced.rst:473
msgid ""
"As an example, imagine a situation where a big rock is falling down a "
"tunnel, smashing everything on its way. The code for the rock, in a "
"statically typed language would be something like:"
msgstr ""
"예제와 같이, 큰 바위가 터널로 떨어지고 있는 상황을 생각해보세요, 그 길의 모"
"든 것들을 박살내 버립니다. 바위의 코드는, 정적 언어에서는 다음과 같이 될 것입"
"니다:"

#: ../../docs/getting_started/scripting/gdscript/gdscript_advanced.rst:484
msgid ""
"This way, everything that can be smashed by a rock would have to inherit "
"Smashable. If a character, enemy, piece of furniture, small rock were all "
"smashable, they would need to inherit from the class Smashable, possibly "
"requiring multiple inheritance. If multiple inheritance was undesired, then "
"they would have to inherit a common class like Entity. Yet, it would not be "
"very elegant to add a virtual method ``smash()`` to Entity only if a few of "
"them can be smashed."
msgstr ""
"이 방법은, 바위에 의해 박살날 수 있는 모든 것들은 Smashable(박살날 수 있음)"
"을 상속해야 합니다. 캐릭터, 적, 가구의 일부, 작은 돌들은 모두 박살날 수 있"
"고, 그들은 클래스 Smashable로 부터 상속해야 하고, 거기에 다중 상속이 필요할 "
"수도 있습니다. 다중 상속이 바람직하지 않은 경우, 그들은 Entity와 같은 일반 클"
"래스에 상속해야 합니다. 그러나 Entity들 중 일부만이 박살날 수 있다고 해서 가"
"상 메서드 ``smash()`` 를 추가하는 것은 그리 우아하지 않을 것입니다."

#: ../../docs/getting_started/scripting/gdscript/gdscript_advanced.rst:492
msgid ""
"With dynamically typed languages, this is not a problem. Duck typing makes "
"sure you only have to define a ``smash()`` function where required and "
"that's it. No need to consider inheritance, base classes, etc."
msgstr ""
"동적 타입 언어에서는, 문제없습니다. 덕 타이핑이 ``smash()`` 함수가 필요한 곳"
"에만 정의하도록 만듭니다. 상속, 기본 클래스 등등을 고려할 필요가 없습니다."

#: ../../docs/getting_started/scripting/gdscript/gdscript_advanced.rst:501
msgid ""
"And that's it. If the object that hit the big rock has a smash() method, it "
"will be called. No need for inheritance or polymorphism. Dynamically typed "
"languages only care about the instance having the desired method or member, "
"not what it inherits or the class type. The definition of Duck Typing should "
"make this clearer:"
msgstr ""
"그리고 됐습니다. 큰 오리를 치는 물체가 smash() 메서드를 갖고 있다면, 호출될 "
"것입니다. 상속이나 폴리모피즘이 필요 없습니다. 동적 타입 언어는 상속된 인스턴"
"스나 클래스 타입이 아니라, 바람직한 메서드나 멤버를 가진 인스턴스가 맞는지 관"
"리하시면 됩니다. 덕 타이핑의 정의는 이를 명확하게 만듭니다:"

#: ../../docs/getting_started/scripting/gdscript/gdscript_advanced.rst:507
msgid ""
"*\"When I see a bird that walks like a duck and swims like a duck and quacks "
"like a duck, I call that bird a duck\"*"
msgstr ""
"*\"내가 오리처럼 걷고 오리처럼 수영하고 오리처럼 우는 새를 볼 때, 나는 그 새"
"를 오리라고 부른다\"*"

#: ../../docs/getting_started/scripting/gdscript/gdscript_advanced.rst:510
msgid "In this case, it translates to:"
msgstr "우리의 경우에는, 다음과 같이 번역됩니다:"

#: ../../docs/getting_started/scripting/gdscript/gdscript_advanced.rst:512
msgid ""
"*\"If the object can be smashed, don't care what it is, just smash it.\"*"
msgstr "*\"물체를 박살낼 수 있다면, 무엇이든 상관없이, 그냥 박살낸다.\"*"

#: ../../docs/getting_started/scripting/gdscript/gdscript_advanced.rst:514
msgid "Yes, we should call it Hulk typing instead."
msgstr "예, 우리는 이를 대신 헐크 타이핑이라 불러야겠네요."

#: ../../docs/getting_started/scripting/gdscript/gdscript_advanced.rst:516
msgid ""
"It's possible that the object being hit doesn't have a smash() function. "
"Some dynamically typed languages simply ignore a method call when it doesn't "
"exist (like Objective C), but GDScript is stricter, so checking if the "
"function exists is desirable:"
msgstr ""
"맞은 물체가 smash() 함수를 갖지 않을 수 있습니다. 일부 동적 타입 언어는 존재"
"하지 않는 메서드 호출은 간단히 무시합니다 (Objective C 처럼 말이죠), 하지만 "
"GDScript는 더 엄격합니다, 그래서 함수가 존재하는 지 확인하는 것이 바람직합니"
"다:"

#: ../../docs/getting_started/scripting/gdscript/gdscript_advanced.rst:527
msgid ""
"Then, simply define that method and anything the rock touches can be smashed."
msgstr ""
"그런 다음, 간단히 바위에 닿는 모든 것들을 메서드로 정의하여 박살날 수 있도록 "
"합니다."

#: ../../docs/getting_started/scripting/gdscript/gdscript_exports.rst:4
msgid "GDScript exports"
msgstr "GDScript 내보내기(Export)"

#: ../../docs/getting_started/scripting/gdscript/gdscript_exports.rst:7
msgid "Introduction to exports"
msgstr "내보내기 소개"

#: ../../docs/getting_started/scripting/gdscript/gdscript_exports.rst:9
msgid ""
"In Godot, class members can be exported. This means their value gets saved "
"along with the resource (such as the :ref:`scene <class_PackedScene>`) "
"they're attached to. They will also be available for editing in the property "
"editor. Exporting is done by using the ``export`` keyword::"
msgstr ""
"Godot에서 클래스 멤버는 내보낼 수 있습니다. 즉, 멤버의 값은 (:ref:`씬 "
"<class_PackedScene>`\\ 처럼) 붙어있는 리소스와 함께 저장됩니다. 그리고 속성"
"(Property) 편집기에서 편집할 수 있습니다. 내보내려면 ``export`` 키워드를 사용"
"합니다::"

#: ../../docs/getting_started/scripting/gdscript/gdscript_exports.rst:18
msgid ""
"An exported variable must be initialized to a constant expression or have an "
"export hint in the form of an argument to the ``export`` keyword (see the "
"*Examples* section below)."
msgstr ""
"내보낸 변수는 상수 표현식으로 초기화하거나, 인수의 형태에 ``export`` 키워드"
"로 내보내기 힌트가 있어야 합니다 (아래의 *예제* 섹션을 참고하세요)."

#: ../../docs/getting_started/scripting/gdscript/gdscript_exports.rst:22
msgid ""
"One of the fundamental benefits of exporting member variables is to have "
"them visible and editable in the editor. This way, artists and game "
"designers can modify values that later influence how the program runs. For "
"this, a special export syntax is provided."
msgstr ""
"멤버 변수 내보내기의 기본적인 이점은 편집기에서 보이고 편집할 수 있는 것입니"
"다. 이 방법으로 아티스트와 게임 디자이너가 프로그램이 실행 방법에 영향을 주"
"는 값을 수정할 수 있습니다. 이를 위해, 특수 내보내기 문법이 제공됩니다."

#: ../../docs/getting_started/scripting/gdscript/gdscript_exports.rst:29
msgid ""
"Exporting properties can also be done in other languages such as C#. The "
"syntax varies depending on the language."
msgstr ""
"속성 내보내기는 C#과 같은 다른 언어에서도 가능합니다. 문법은 언어에 따라 다릅"
"니다."

#: ../../docs/getting_started/scripting/gdscript/gdscript_exports.rst:33
#: ../../docs/getting_started/scripting/c_sharp/c_sharp_features.rst:184
#: ../../docs/tutorials/physics/using_area_2d.rst:132
#: ../../docs/tutorials/physics/using_kinematic_body_2d.rst:157
#: ../../docs/development/compiling/compiling_with_mono.rst:120
msgid "Examples"
msgstr "예제"

#: ../../docs/getting_started/scripting/gdscript/gdscript_exports.rst:119
msgid ""
"It must be noted that even if the script is not being run while in the "
"editor, the exported properties are still editable. This can be used in "
"conjunction with a :ref:`script in \"tool\" mode <doc_gdscript_tool_mode>`."
msgstr ""
"스크립트가 편집기에서 실행하지 않는다면, 내보낸 속성은 편집할 수 있다는 것은 "
"꼭 알아두세요. 왜냐하면 :ref:`\"Tool(도구) 모드에서 스크립트 "
"<doc_gdscript_tool_mode>`\\ 를 사용할 수 있기 때문입니다."

#: ../../docs/getting_started/scripting/gdscript/gdscript_exports.rst:124
msgid "Exporting bit flags"
msgstr "비트 플래그(bit flags) 내보내기"

#: ../../docs/getting_started/scripting/gdscript/gdscript_exports.rst:126
msgid ""
"Integers used as bit flags can store multiple ``true``/``false`` (boolean) "
"values in one property. By using the export hint ``int, FLAGS``, they can be "
"set from the editor::"
msgstr ""
"비트 플래그로 사용되는 정수는 한 속성에 여러 ``참``/``거짓`` (불리언) 값을 저"
"장할 수 있습니다. 편집기에서 설정하도록 하려면 ``int, FLAGS`` 내보내기 힌트"
"를 사용합니다::"

#: ../../docs/getting_started/scripting/gdscript/gdscript_exports.rst:133
msgid ""
"Restricting the flags to a certain number of named flags is also possible. "
"The syntax is similar to the enumeration syntax::"
msgstr ""
"플래그를 특정 개수의 이름있는 플래그로 제한하는 것도 가능합니다. 문법은 열거"
"형 문법과 유사합니다::"

#: ../../docs/getting_started/scripting/gdscript/gdscript_exports.rst:139
msgid ""
"In this example, ``Fire`` has value 1, ``Water`` has value 2, ``Earth`` has "
"value 4 and ``Wind`` corresponds to value 8. Usually, constants should be "
"defined accordingly (e.g. ``const ELEMENT_WIND = 8`` and so on)."
msgstr ""
"이 예제에서, ``Fire`` 는 값 1, ``Water`` 는 값 2, ``Earth`` 는 값 4, 그리고 "
"``Wind`` 는 값 8에 해당합니다. 일반적으로, 상수는 이에 따라 정의되어야 합니"
"다 (예 ``const ELEMENT_WIND = 8`` 등등)."

#: ../../docs/getting_started/scripting/gdscript/gdscript_exports.rst:144
msgid ""
"Using bit flags requires some understanding of bitwise operations. If in "
"doubt, boolean variables should be exported instead."
msgstr ""
"비트 플래그를 사용하려면 비트 연산에 대한 이해가 필요합니다. 의심스럽다면, 불"
"리언 변수를 대신 내보내어야 합니다."

#: ../../docs/getting_started/scripting/gdscript/gdscript_exports.rst:148
msgid "Exporting arrays"
msgstr "배열 내보내기"

#: ../../docs/getting_started/scripting/gdscript/gdscript_exports.rst:150
msgid ""
"Exporting arrays works, but with an important caveat: while regular arrays "
"are created local to every class instance, exported arrays are *shared* "
"between all instances. This means that editing them in one instance will "
"cause them to change in all other instances. Exported arrays can have "
"initializers, but they must be constant expressions."
msgstr ""
"배열을 내보낼 수 있지만 중요한 주의 사항이 있습니다: 정규 배열은 모든 클래스 "
"인스턴스에 지역(Local)으로 만들어지지만, 내보낸 배열은 모든 인스턴스 간에 *공"
"유됩니다*. 즉, 한 인스턴스에서 배열을 편집하면 다른 인스턴스에서도 영향을 줍"
"니다. 내보낸 배열은 이니셜라이저(Initializer)를 갖지만, 반드시 상수 표현식이 "
"되어야 합니다."

#: ../../docs/getting_started/scripting/gdscript/gdscript_styleguide.rst:4
msgid "GDScript style guide"
msgstr "GDScript 스타일 가이드"

#: ../../docs/getting_started/scripting/gdscript/gdscript_styleguide.rst:6
msgid ""
"This style guide lists conventions to write elegant GDScript. The goal is to "
"encourage writing clean, readable code and promote consistency across "
"projects, discussions, and tutorials. Hopefully, this will also support the "
"development of auto-formatting tools."
msgstr ""
"여기에 있는 스타일 가이드는 GDScript를 아름답게 작성하도록 하는 관례를 나열했"
"습니다. 이 스타일 가이드의 목적은 프로젝트 사이, 사람들의 토론 사이, 튜토리"
"얼 사이에서 깨끗하고 읽기 쉬운 코드를 작성함과 동시에 일관성을 유지하도록 하"
"는 것입니다. 이 기능이 자동 서식 도구의 개발에 도움이 되길 바랍니다."

#: ../../docs/getting_started/scripting/gdscript/gdscript_styleguide.rst:11
msgid ""
"Since GDScript is close to Python, this guide is inspired by Python's `PEP 8 "
"<https://www.python.org/dev/peps/pep-0008/>`__ programming style guide."
msgstr ""
"GDScript가 Python과 밀접하기 때문에, 이 가이드는 Python의 `PEP 8 <https://"
"www.python.org/dev/peps/pep-0008/>`__ 프로그래밍 스타일 가이드에서 영감을 얻"
"었습니다."

#: ../../docs/getting_started/scripting/gdscript/gdscript_styleguide.rst:15
msgid ""
"Style guides aren't meant as hard rulebooks. At times, you may not be able "
"to apply some of the guidelines below. When that happens, use your best "
"judgment, and ask fellow developers for insights."
msgstr ""
"스타일 가이드는 빡빡한 법전이 아닙니다. 아직은 아래의 가이드라인을 적용하지 "
"못할 수도 있습니다. 그렇다 하더라도, 최선의 판단으로 동료 개발자에게 통찰력"
"을 갖도록 요청하세요."

#: ../../docs/getting_started/scripting/gdscript/gdscript_styleguide.rst:19
msgid ""
"In general, keeping your code consistent in your projects and within your "
"team is more important than following this guide to a tee."
msgstr ""
"일반적으로 프로젝트와 팀 내에서 코드를 일관적으로 유지하는 것이 아래의 가이드"
"보다 더 중요합니다."

#: ../../docs/getting_started/scripting/gdscript/gdscript_styleguide.rst:22
msgid ""
"Godot's built-in script editor uses a lot of these conventions by default. "
"Let it help you."
msgstr ""
"Godot의 내장 스크립트 편집기는 기본적으로 많은 규정을 사용합니다. 그것이 당신"
"을 돕도록 하십시오."

#: ../../docs/getting_started/scripting/gdscript/gdscript_styleguide.rst:25
msgid "Here is a complete class example based on these guidelines:"
msgstr "이 가이드라인을 기반으로 한 전체 클래스 예제입니다:"

#: ../../docs/getting_started/scripting/gdscript/gdscript_styleguide.rst:94
#: ../../docs/getting_started/scripting/c_sharp/c_sharp_style_guide.rst:31
msgid "Formatting"
msgstr "서식(Formatting)"

#: ../../docs/getting_started/scripting/gdscript/gdscript_styleguide.rst:97
msgid "Encoding and special characters"
msgstr "인코딩과 특수 문자"

#: ../../docs/getting_started/scripting/gdscript/gdscript_styleguide.rst:99
msgid ""
"Use line feed (**LF**) characters to break lines, not CRLF or CR. *(editor "
"default)*"
msgstr ""
"줄 바꿈을 위해 라인 피드 (**LF**) 문자를 사용합니다. CRLF나 CR은 사용하지 않"
"습니다 *(편집기 기본 설정)*"

#: ../../docs/getting_started/scripting/gdscript/gdscript_styleguide.rst:100
msgid "Use one line feed character at the end of each file. *(editor default)*"
msgstr ""
"각 파일의 끝에 하나의 라인 피드 문자를 사용합니다. *(편집기 기본 설정)*"

#: ../../docs/getting_started/scripting/gdscript/gdscript_styleguide.rst:101
msgid ""
"Use **UTF-8** encoding without a `byte order mark <https://en.wikipedia.org/"
"wiki/Byte_order_mark>`_. *(editor default)*"
msgstr ""
"`바이트 순서 표식 <https://ko.wikipedia.org/wiki/%EB%B0%94%EC%9D%B4%ED%8A%B8_"
"%EC%88%9C%EC%84%9C_%ED%91%9C%EC%8B%9D>`_ 없이 **UTF-8** 인코딩을 사용합니다. "
"*(편집기 기본 설정)*"

#: ../../docs/getting_started/scripting/gdscript/gdscript_styleguide.rst:102
msgid "Use **Tabs** instead of spaces for indentation. *(editor default)*"
msgstr ""
"들여쓰기로 스페이스바 대신 **Tab(탭)** 키를 사용합니다. *(편집기 기본 설정)*"

#: ../../docs/getting_started/scripting/gdscript/gdscript_styleguide.rst:105
msgid "Indentation"
msgstr "들여쓰기(Indentation)"

#: ../../docs/getting_started/scripting/gdscript/gdscript_styleguide.rst:107
msgid "Each indent level should be one greater than the block containing it."
msgstr "들여쓰기 너비는 블록 바깥보다 한 칸 더 커야 됩니다."

#: ../../docs/getting_started/scripting/gdscript/gdscript_styleguide.rst:109
#: ../../docs/getting_started/scripting/gdscript/gdscript_styleguide.rst:129
#: ../../docs/getting_started/scripting/gdscript/gdscript_styleguide.rst:148
#: ../../docs/getting_started/scripting/gdscript/gdscript_styleguide.rst:201
#: ../../docs/getting_started/scripting/gdscript/gdscript_styleguide.rst:225
#: ../../docs/getting_started/scripting/gdscript/gdscript_styleguide.rst:272
#: ../../docs/getting_started/scripting/gdscript/gdscript_styleguide.rst:302
#: ../../docs/getting_started/scripting/gdscript/gdscript_styleguide.rst:327
#: ../../docs/getting_started/scripting/gdscript/gdscript_styleguide.rst:347
#: ../../docs/getting_started/scripting/gdscript/gdscript_styleguide.rst:373
#: ../../docs/getting_started/scripting/gdscript/gdscript_styleguide.rst:662
msgid "**Good**:"
msgstr "**좋음**:"

#: ../../docs/getting_started/scripting/gdscript/gdscript_styleguide.rst:116
#: ../../docs/getting_started/scripting/gdscript/gdscript_styleguide.rst:137
#: ../../docs/getting_started/scripting/gdscript/gdscript_styleguide.rst:171
#: ../../docs/getting_started/scripting/gdscript/gdscript_styleguide.rst:212
#: ../../docs/getting_started/scripting/gdscript/gdscript_styleguide.rst:231
#: ../../docs/getting_started/scripting/gdscript/gdscript_styleguide.rst:282
#: ../../docs/getting_started/scripting/gdscript/gdscript_styleguide.rst:309
#: ../../docs/getting_started/scripting/gdscript/gdscript_styleguide.rst:334
#: ../../docs/getting_started/scripting/gdscript/gdscript_styleguide.rst:354
#: ../../docs/getting_started/scripting/gdscript/gdscript_styleguide.rst:383
#: ../../docs/getting_started/scripting/gdscript/gdscript_styleguide.rst:670
msgid "**Bad**:"
msgstr "**나쁨**:"

#: ../../docs/getting_started/scripting/gdscript/gdscript_styleguide.rst:126
msgid ""
"Use 2 indent levels to distinguish continuation lines from regular code "
"blocks."
msgstr ""
"정규 코드 블록과 이어지는 줄을 구분하기 위해 2 칸 들여쓰기를 사용하세요."

#: ../../docs/getting_started/scripting/gdscript/gdscript_styleguide.rst:145
msgid ""
"Exceptions to this rule are arrays, dictionaries, and enums. Use a single "
"indentation level to distinguish continuation lines:"
msgstr ""
"이 규칙의 예외는 배열, 딕셔너리, 열거형입니다. 연속 선을 구분하려면 한 칸 들"
"여쓰기를 사용하세요:"

#: ../../docs/getting_started/scripting/gdscript/gdscript_styleguide.rst:195
msgid "Trailing comma"
msgstr "쉼표 매달기(Trailing comma)"

#: ../../docs/getting_started/scripting/gdscript/gdscript_styleguide.rst:197
msgid ""
"Use a trailing comma on the last line in arrays, dictionaries, and enums. "
"This results in easier refactoring and better diffs in version control as "
"the last line doesn't need to be modified when adding new elements."
msgstr ""
"배열, 딕셔너리, 열거형의 마지막 줄에 쉼표 매달기를 사용하세요. 이렇게 하면 "
"새 요소를 추가해도 마지막 줄을 수정하지 않아도 되기 때문에, 리팩토링하기 쉽"
"고 버전 제어에서 비교가 더 좋습니다."

#: ../../docs/getting_started/scripting/gdscript/gdscript_styleguide.rst:223
msgid ""
"Trailing commas are unnecessary in single-line lists, so don't add them in "
"this case."
msgstr ""
"쉼표 매달기는 한 줄 목록에는 불필요합니다. 따라서 이 경우는 사용하지 마세요."

#: ../../docs/getting_started/scripting/gdscript/gdscript_styleguide.rst:238
msgid "Blank lines"
msgstr "공백 줄(Blank lines)"

#: ../../docs/getting_started/scripting/gdscript/gdscript_styleguide.rst:240
msgid "Surround functions and class definitions with two blank lines:"
msgstr "함수와 클래스 정의를 두 개의 공백 줄로 묶습니다:"

#: ../../docs/getting_started/scripting/gdscript/gdscript_styleguide.rst:255
msgid "Use one blank line inside functions to separate logical sections."
msgstr "논리 섹션을 분리하기 위해 함수 안에 하나의 공백 줄을 사용합니다."

#: ../../docs/getting_started/scripting/gdscript/gdscript_styleguide.rst:258
msgid "Line length"
msgstr "줄 길이"

#: ../../docs/getting_started/scripting/gdscript/gdscript_styleguide.rst:260
msgid "Keep individual lines of code under 100 characters."
msgstr "코드 한 줄은 100 문자 이내로 유지합니다."

#: ../../docs/getting_started/scripting/gdscript/gdscript_styleguide.rst:262
msgid ""
"If you can, try to keep lines under 80 characters. This helps to read the "
"code on small displays and with two scripts opened side-by-side in an "
"external text editor. For example, when looking at a differential revision."
msgstr ""
"가능하다면 80 문자 이내로 유지해보세요. 이렇게 하면 작은 화면에서도 코드를 읽"
"기 쉽고, 외부 텍스트 편집기에서 양쪽에 두 스크립트가 열려있는 화면에서도 읽"
"기 쉽습니다. 예를 들어 서로 다른 코드 개정판을 볼 때가 있죠."

#: ../../docs/getting_started/scripting/gdscript/gdscript_styleguide.rst:267
msgid "One statement per line"
msgstr "한 줄에 하나의 명령문"

#: ../../docs/getting_started/scripting/gdscript/gdscript_styleguide.rst:269
msgid ""
"Never combine multiple statements on a single line. No, C programmers, not "
"even with a single line conditional statement."
msgstr ""
"한 줄에 여러 명령문을 묶지 마세요. C 프로그래머라면 한 줄에 조건문을 함께 사"
"용하지 마세요."

#: ../../docs/getting_started/scripting/gdscript/gdscript_styleguide.rst:290
msgid "The only exception to that rule is the ternary operator:"
msgstr "유일한 예외라면 삼항(Ternary) 연산자일 것입니다:"

#: ../../docs/getting_started/scripting/gdscript/gdscript_styleguide.rst:297
msgid "Avoid unnecessary parentheses"
msgstr "불필요한 괄호 피하기"

#: ../../docs/getting_started/scripting/gdscript/gdscript_styleguide.rst:299
msgid ""
"Avoid parentheses in expressions and conditional statements. Unless "
"necessary for order of operations, they only reduce readability."
msgstr ""
"표현식과 조건문에 괄호를 사용하지 마십시오. 연산 명령에 필요한 경우가 아니라"
"면, 가독성만 떨어뜨릴 것입니다."

#: ../../docs/getting_started/scripting/gdscript/gdscript_styleguide.rst:317
msgid "Boolean operators"
msgstr "불리언(Boolean) 연산자"

#: ../../docs/getting_started/scripting/gdscript/gdscript_styleguide.rst:319
msgid ""
"Prefer the plain English versions of boolean operators, as they are the most "
"accessible:"
msgstr "불리언 연산자의 영어 버전이 가장 접근하기 쉽습니다:"

#: ../../docs/getting_started/scripting/gdscript/gdscript_styleguide.rst:321
msgid "Use ``and`` instead of ``&&``."
msgstr "``&&`` 대신 ``and``\\ 를 사용하세요."

#: ../../docs/getting_started/scripting/gdscript/gdscript_styleguide.rst:322
msgid "Use ``or`` instead of ``||``."
msgstr "``||`` 대신 ``or``\\ 를 사용하세요."

#: ../../docs/getting_started/scripting/gdscript/gdscript_styleguide.rst:324
msgid ""
"You may also use parentheses around boolean operators to clear any "
"ambiguity. This can make long expressions easier to read."
msgstr ""
"모호한 표현을 막고자 불리언 연산자 주변에 괄호를 사용합니다. 이렇게 하면 긴 "
"표현식도 읽기 쉬워집니다."

#: ../../docs/getting_started/scripting/gdscript/gdscript_styleguide.rst:342
msgid "Comment spacing"
msgstr "주석(Comment) 간격"

#: ../../docs/getting_started/scripting/gdscript/gdscript_styleguide.rst:344
msgid ""
"Regular comments should start with a space, but not code that you comment "
"out. This helps differentiate text comments from disabled code."
msgstr ""
"표준 주석은 한 칸 띄고 시작해야 합니다. 하지만 코드에 놓은 주석은 띄지 않습니"
"다. 이렇게 하면 코드를 비활성화한 것과 텍스트 주석을 구분하기 좋습니다."

#: ../../docs/getting_started/scripting/gdscript/gdscript_styleguide.rst:363
#, fuzzy
msgid ""
"In the script editor, to toggle the selected code commented, press :kbd:"
"`Ctrl + K`. This feature adds a single # sign at the start of the selected "
"lines."
msgstr ""
"스크립트 편집기에서 선택한 코드를 주석으로 바꾸려면 <kbd>Ctrl</kbd> <kbd>K</"
"kbd>\\ 를 누르세요. 누르면 선택한 줄의 처음 부분에 # 기호가 생깁니다."

#: ../../docs/getting_started/scripting/gdscript/gdscript_styleguide.rst:368
msgid "Whitespace"
msgstr "공백"

#: ../../docs/getting_started/scripting/gdscript/gdscript_styleguide.rst:370
msgid ""
"Always use one space around operators and after commas. Also, avoid extra "
"spaces in dictionary references and function calls."
msgstr ""
"연산자와 쉼표 뒤에는 한 칸을 띄어주세요. 그리고 딕셔너리 참조와 함수 호출에"
"는 띄어쓰기를 피하세요."

#: ../../docs/getting_started/scripting/gdscript/gdscript_styleguide.rst:393
msgid "Don't use spaces to align expressions vertically:"
msgstr "표현식이 수직으로 나열하는 띄어쓰기를 하지 마세요:"

#: ../../docs/getting_started/scripting/gdscript/gdscript_styleguide.rst:402
msgid "Quotes"
msgstr "따옴표"

#: ../../docs/getting_started/scripting/gdscript/gdscript_styleguide.rst:404
msgid ""
"Use double quotes unless single quotes make it possible to escape fewer "
"characters in a given string. See the examples below:"
msgstr ""
"작은 따옴표로 주어진 문자열을 더 작은 문자 수로 이스케이프하게 만드는 것이 아"
"니라면 큰 따옴표를 사용하세요. 아래의 예제를 참고하세요:"

#: ../../docs/getting_started/scripting/gdscript/gdscript_styleguide.rst:424
#: ../../docs/getting_started/scripting/c_sharp/c_sharp_style_guide.rst:197
msgid "Naming conventions"
msgstr "명명 규칙"

#: ../../docs/getting_started/scripting/gdscript/gdscript_styleguide.rst:426
msgid ""
"These naming conventions follow the Godot Engine style. Breaking these will "
"make your code clash with the built-in naming conventions, leading to "
"inconsistent code."
msgstr ""
"이러한 명명 규칙은 Godot 엔진 스타일을 따릅니다. 이 규칙을 깨면 코드는 내장 "
"명명 규칙으로 망가지며, 일관되지 않은 코드가 됩니다."

#: ../../docs/getting_started/scripting/gdscript/gdscript_styleguide.rst:431
msgid "Classes and nodes"
msgstr "클래스와 노드"

#: ../../docs/getting_started/scripting/gdscript/gdscript_styleguide.rst:433
msgid "Use PascalCase for class and node names:"
msgstr "클래스와 노드 이름에는 파스칼 표기법(PascalCase)을 사용하세요:"

#: ../../docs/getting_started/scripting/gdscript/gdscript_styleguide.rst:439
msgid "Also use PascalCase when loading a class into a constant or a variable:"
msgstr ""
"그리고 상수 또는 변수로 클래스를 불러올 때도 파스칼 표기법(PascalCase)을 사용"
"하세요:"

#: ../../docs/getting_started/scripting/gdscript/gdscript_styleguide.rst:446
msgid "Functions and variables"
msgstr "함수와 변수"

#: ../../docs/getting_started/scripting/gdscript/gdscript_styleguide.rst:448
msgid "Use snake\\_case to name functions and variables:"
msgstr "함수와 변수 이름에는 스네이크 표기법(snake\\_case)를 사용하세요:"

#: ../../docs/getting_started/scripting/gdscript/gdscript_styleguide.rst:455
msgid ""
"Prepend a single underscore (\\_) to virtual methods functions the user must "
"override, private functions, and private variables:"
msgstr ""
"개인 함수, 개인 변수, 사용자가 다시 정의하는 가상 메서드 함수 앞에는 밑줄 "
"(\\_) 하나가 있어야 합니다:"

#: ../../docs/getting_started/scripting/gdscript/gdscript_styleguide.rst:466
msgid "Use the past tense to name signals:"
msgstr "시그널의 이름에는 과거형을 사용합니다:"

#: ../../docs/getting_started/scripting/gdscript/gdscript_styleguide.rst:474
msgid "Constants and enums"
msgstr "상수(Constant)와 열거형(enum)"

#: ../../docs/getting_started/scripting/gdscript/gdscript_styleguide.rst:476
msgid ""
"Write constants with CONSTANT\\_CASE, that is to say in all caps with an "
"underscore (\\_) to separate words:"
msgstr ""
"CONSTANT\\_CASE로 상수를 작성합니다. 다시 말해, 모든 단어는 대문자로 하고 띄"
"어쓰기 대신 밑줄 (\\_)을 사용합니다:"

#: ../../docs/getting_started/scripting/gdscript/gdscript_styleguide.rst:483
msgid ""
"Use PascalCase for enum *names* and CONSTANT\\_CASE for their members, as "
"they are constants:"
msgstr ""
"열거형 *이름*\\ 에는 파스칼 표기법(PascalCase)을 사용하고, 열거형의 멤버에는 "
"상수와 마찬가지로 CONSTANT\\_CASE를 사용합니다:"

#: ../../docs/getting_started/scripting/gdscript/gdscript_styleguide.rst:497
msgid "Code order"
msgstr "코드 순서"

#: ../../docs/getting_started/scripting/gdscript/gdscript_styleguide.rst:499
msgid ""
"This first section focuses on code order. For formatting, see :ref:"
"`formatting`. For naming conventions, see :ref:`naming_conventions`."
msgstr ""
"이 섹션은 코드 순서에 중점을 둡니다. 서식에 관해서는 :ref:`formatting`\\ 을 "
"참고해주세요. 명명 규칙에 관해서는 :ref:`naming_conventions`\\ 을 참고해주세"
"요."

#: ../../docs/getting_started/scripting/gdscript/gdscript_styleguide.rst:502
msgid "We suggest to organize GDScript code this way:"
msgstr "제안하는 GDScript 코드 구조는 다음과 같습니다:"

#: ../../docs/getting_started/scripting/gdscript/gdscript_styleguide.rst:525
msgid ""
"We optimized the order to make it easy to read the code from top to bottom, "
"to help developers reading the code for the first time understand how it "
"works, and to avoid errors linked to the order of variable declarations."
msgstr ""
"이 순서는 위에서 아래까지 코드를 읽기 쉽게 최적화했습니다. 개발자가 한 눈에 "
"코드가 어떻게 작동하는 지 알도록, 그리고 변수 선언의 순서와 관련된 오류가 발"
"생하지 않도록 말이죠."

#: ../../docs/getting_started/scripting/gdscript/gdscript_styleguide.rst:529
msgid "This code order follows four rules of thumb:"
msgstr "이 코드 순서는 네 가지 규칙을 따릅니다:"

#: ../../docs/getting_started/scripting/gdscript/gdscript_styleguide.rst:531
msgid "Properties and signals come first, followed by methods."
msgstr "속성과 시그널이 첫 번째로 옵니다. 그 뒤는 메서드가 나옵니다."

#: ../../docs/getting_started/scripting/gdscript/gdscript_styleguide.rst:532
msgid "Public comes before private."
msgstr "공개(Public) 코드가 개인(Private) 코드보다 먼저 옵니다."

#: ../../docs/getting_started/scripting/gdscript/gdscript_styleguide.rst:533
msgid "Virtual callbacks come before the class's interface."
msgstr ""
"가상 콜백(Virtual Callback)이 클래스의 인터페이스(Class's Interface)보다 먼"
"저 옵니다."

#: ../../docs/getting_started/scripting/gdscript/gdscript_styleguide.rst:534
msgid ""
"The object's construction and initialization functions, ``_init`` and "
"``_ready``, come before functions that modify the object at runtime."
msgstr ""
"객체의 구조와 초기화 함수인 ``_init``\\ 과 ``_ready``\\ 는 런타임에서 객체를 "
"수정하도록 함수 이전에 옵니다."

#: ../../docs/getting_started/scripting/gdscript/gdscript_styleguide.rst:539
msgid "Class declaration"
msgstr "클래스 선언(Declaration)"

#: ../../docs/getting_started/scripting/gdscript/gdscript_styleguide.rst:541
msgid ""
"If the code is meant to run in the editor, place the ``tool`` keyword on the "
"first line of the script."
msgstr ""
"코드가 편집기에서 작동하게 하려면, 스크립트의 첫 번째 줄에 ``tool`` 키워드를 "
"배치하세요."

#: ../../docs/getting_started/scripting/gdscript/gdscript_styleguide.rst:544
msgid ""
"Follow with the `class_name` if necessary. You can turn a GDScript file into "
"a global type in your project using this feature. For more information, see :"
"ref:`doc_gdscript`."
msgstr ""
"`class_name`\\ 이 있다면 바로 아래에 배치하세요. tool 기능을 사용하면 "
"GDScript를 프로젝트의 전역 유형으로 바꿀 수 있습니다. 자세한 설명은 :ref:"
"`doc_gdscript`\\ 를 참고하세요."

#: ../../docs/getting_started/scripting/gdscript/gdscript_styleguide.rst:548
msgid "Then, add the `extends` keyword if the class extends a built-in type."
msgstr ""
"다음으로, 클래스가 내장 유형을 확장하고 있다면 `extends` 키워드를 추가하세요."

#: ../../docs/getting_started/scripting/gdscript/gdscript_styleguide.rst:550
msgid ""
"Following that, you should have the class's optional docstring as comments. "
"You can use that to explain the role of your class to your teammates, how it "
"works, and how other developers should use it, for example."
msgstr ""
"이 밑에는 클래스에 관한 별개의 문서(Docstring)를 주석으로 넣어야 합니다. 클래"
"스의 역할을 설명할 때 사용할 수 있습니다. 다른 동료나 사용설명서 등으로 쓸 "
"수 있죠."

#: ../../docs/getting_started/scripting/gdscript/gdscript_styleguide.rst:562
msgid "Signals and properties"
msgstr "시그널(Signal)과 속성(Property)"

#: ../../docs/getting_started/scripting/gdscript/gdscript_styleguide.rst:564
msgid ""
"Write signal declarations, followed by properties, that is to say, member "
"variables, after the docstring."
msgstr ""
"Docstring이 끝나면 시그널 선언을 작성한 뒤에 속성, 즉, 멤버 변수를 작성합니"
"다."

#: ../../docs/getting_started/scripting/gdscript/gdscript_styleguide.rst:567
msgid ""
"Enums should come after signals, as you can use them as export hints for "
"other properties."
msgstr ""
"열거형(Enum)은 시그널 뒤에 나와야 합니다. 다른 속성의 내보내기 힌트로 사용할 "
"수 있기 때문이죠."

#: ../../docs/getting_started/scripting/gdscript/gdscript_styleguide.rst:570
msgid ""
"Then, write constants, exported variables, public, private, and onready "
"variables, in that order."
msgstr ""
"그런 다음, 상수(Constant), 내보낸 변수, 공개(Public), 개인(Private), onready "
"변수를 순서대로 작성하세요."

#: ../../docs/getting_started/scripting/gdscript/gdscript_styleguide.rst:593
msgid ""
"The GDScript compiler evaluates onready variables right before the "
"``_ready`` callback. You can use that to cache node dependencies, that is to "
"say, to get child nodes in the scene that your class relies on. This is what "
"the example above shows."
msgstr ""
"GDScript 컴파일러는 onready 변수를 ``_ready`` 콜백 바로 이전에 실행합니다. 따"
"라서 노드 종속성을 처리할 때 사용할 수 있습니다. 말 그대로 씬에서 클래스에 의"
"존하는 자식 노드를 가져올 수 있다는 것이죠. 위 예제에서 이 작업을 보여줍니다."

#: ../../docs/getting_started/scripting/gdscript/gdscript_styleguide.rst:600
msgid "Methods and static functions"
msgstr "메서드(Method)와 정적(Static) 함수"

#: ../../docs/getting_started/scripting/gdscript/gdscript_styleguide.rst:602
msgid "After the class's properties come the methods."
msgstr "클래스 속성 뒤에는 메서드가 옵니다."

#: ../../docs/getting_started/scripting/gdscript/gdscript_styleguide.rst:604
msgid ""
"Start with the ``_init()`` callback method, that the engine will call upon "
"creating the object in memory. Follow with the ``_ready()`` callback, that "
"Godot calls when it adds a node to the scene tree."
msgstr ""
"엔진이 메모리에 객체를 만들 때 호출하는 ``_init()`` 콜백 메서드로 시작하세"
"요. 그 뒤로 Godot가 씬 트리에 노드를 추가할 때 호출하는 ``_ready()`` 콜백이 "
"옵니다."

#: ../../docs/getting_started/scripting/gdscript/gdscript_styleguide.rst:608
msgid ""
"These function should come first because they show how the object is "
"initialized."
msgstr ""
"이 함수가 객체를 어떻게 초기화할 지 보여주기 때문에 가장 먼저 와야 합니다."

#: ../../docs/getting_started/scripting/gdscript/gdscript_styleguide.rst:611
msgid ""
"Other built-in virtual callbacks, like ``_unhandled_input()`` and "
"``_physics_process``, should come next. These control the object's main loop "
"and interactions with the game engine."
msgstr ""
"``_unhandled_input()``\\ 과 ``_physics_process``\\ 와 같은 다른 내장 가상 콜"
"백은 다음에 나와야 합니다. 이 메서드는 객체의 메인 루프와 게임 엔진과의 상호"
"작용을 제어합니다."

#: ../../docs/getting_started/scripting/gdscript/gdscript_styleguide.rst:615
msgid ""
"The rest of the class's interface, public and private methods, come after "
"that, in that order."
msgstr ""
"이 다음은 순서에 따라 클래스 인터페이스의 나머지인, 공개 메서드와 개인 메서드"
"가 옵니다."

#: ../../docs/getting_started/scripting/gdscript/gdscript_styleguide.rst:652
msgid "Static typing"
msgstr "정적 타이핑(Static Typing)"

#: ../../docs/getting_started/scripting/gdscript/gdscript_styleguide.rst:654
msgid ""
"Since Godot 3.1, GDScript supports :ref:`optional static "
"typing<doc_gdscript_static_typing>`."
msgstr ""
"Godot 3.1부터, GDScript는 :ref:`선택 정적 타이핑<doc_gdscript_static_typing>`"
"\\ 을 지원합니다."

#: ../../docs/getting_started/scripting/gdscript/gdscript_styleguide.rst:657
msgid "Type hints"
msgstr "유형 힌트(Type Hint)"

#: ../../docs/getting_started/scripting/gdscript/gdscript_styleguide.rst:659
msgid ""
"Place the colon right after the variable's name, without a space, and let "
"the GDScript compiler infer the variable's type when possible."
msgstr ""
"변수의 이름 바로 뒤에, 띄어쓰기 없이 쌍점을 배치하세요. 그러면 GDScript 컴파"
"일러는 변수의 유형을 추론합니다."

#: ../../docs/getting_started/scripting/gdscript/gdscript_styleguide.rst:678
msgid ""
"When you let the compiler infer the type hint, write the colon and equal "
"signs together: ``:=``."
msgstr ""
"컴파일러가 유형 힌트를 추론할 때는 쌍점과 등호를 함께 작성합니다: ``:=``."

#: ../../docs/getting_started/scripting/gdscript/gdscript_styleguide.rst:684
msgid ""
"Add a space on either sides of the return type arrow when defining functions."
msgstr "함수를 정의할 때, 반환 유형 화살표의 양쪽에는 띄어쓰기를 추가하세요."

#: ../../docs/getting_started/scripting/gdscript/static_typing.rst:4
msgid "Static typing in GDScript"
msgstr "GDScript에서 정적 타이핑(Static typing)"

#: ../../docs/getting_started/scripting/gdscript/static_typing.rst:6
#: ../../docs/tutorials/physics/physics_introduction.rst:16
msgid "In this guide, you will learn:"
msgstr "이 가이드에서 다음 내용을 배울 것입니다:"

#: ../../docs/getting_started/scripting/gdscript/static_typing.rst:8
msgid "**How to use types in GDScript**"
msgstr "**GDScript에서 타입을 사용하는 방법**"

#: ../../docs/getting_started/scripting/gdscript/static_typing.rst:9
msgid "That **static types can help you avoid bugs**"
msgstr "이 **정적 타입은 버그를 피하는데 도움을 줍니다**"

#: ../../docs/getting_started/scripting/gdscript/static_typing.rst:11
msgid ""
"Where and how you use this new language feature is entirely up to you: you "
"can use it only in some sensitive GDScript files, use it everywhere, or "
"write code like you always did!"
msgstr ""
"새로운 언어 기능을 사용하는 위치와 방법은 당신에게 달렸습니다: 일부 민감한 "
"GDScript 파일에서만 이것을 사용할 수 있고, 어디에든 사용할 수 있고, 항상 그래"
"왔듯이 코드를 작성할 수 있습니다!"

#: ../../docs/getting_started/scripting/gdscript/static_typing.rst:15
msgid ""
"Static types can be used on variables, constants, functions, parameters, and "
"return types."
msgstr ""
"정적 타입은 변수, 상수, 함수, 매개 변수, 그리고 반환 타입에 사용될 수 있습니"
"다."

#: ../../docs/getting_started/scripting/gdscript/static_typing.rst:20
msgid "Typed GDScript is available since Godot 3.1."
msgstr "타입 GDScript는 Godot 3.1부터 사용할 수 있습니다."

#: ../../docs/getting_started/scripting/gdscript/static_typing.rst:23
msgid "A brief look at static typing"
msgstr "정적 타이핑에 대한 간단한 설명"

#: ../../docs/getting_started/scripting/gdscript/static_typing.rst:25
msgid ""
"With typed GDScript, Godot can detect even more errors as you write code! It "
"gives you and your teammates more information as you’re working, as the "
"arguments’ types show up when you call a method."
msgstr ""
"타입 GDScript로, 코드를 작성할 수록 훨씬 더 많은 오류를 Godot가 감지할 수 있"
"습니다! 즉, 메서드를 호출할 때, 인수의 타입이 나타나기 때문에 작업하는 동안 "
"당신과 당신의 동료에게 더 많은 정보를 제공합니다."

#: ../../docs/getting_started/scripting/gdscript/static_typing.rst:29
msgid ""
"Imagine you’re programming an inventory system. You code an ``Item`` node, "
"then an ``Inventory``. To add items to the inventory, the people who work "
"with your code should always pass an ``Item`` to the ``Inventory.add`` "
"method. With types, you can enforce this:"
msgstr ""
"인벤토리 시스템을 프로그래밍 한다고 상상해보세요. 당신은 ``Item`` 노드를 코딩"
"하고, ``Inventory``\\ 를 코딩합니다. 아이템은 인벤토리에 넣기 위해, 당신의 코"
"드로 작업하는 사람들은 항상 ``Item``\\ 을 ``Inventory.add``\\ 으로 전달해야 "
"합니다. 타입으로는, 다음을 시행할 수 있습니다:"

#: ../../docs/getting_started/scripting/gdscript/static_typing.rst:49
msgid ""
"Another significant advantage of typed GDScript is the new **warning "
"system**. From version 3.1, Godot gives you warnings about your code as you "
"write it: the engine identifies sections of your code that may lead to "
"issues at runtime, but lets you decide whether or not you want to leave the "
"code as it is. More on that in a moment."
msgstr ""
"타입 GDScript의 또 다른 두드러진 장점은 새로운 **경고 시스템**입니다. 3.1버전"
"부터 Godot는 당신이 코딩을 하는 중에 바로 경고를 보여줍니다: 엔진은 실행 중"
"에 문제가 될 수 있는 코드 부분을 식별하지만 당신이 코드를 그대로 둘지 말지는 "
"당신이 결정할 수 있도록 합니다. 잠시후에 더 설명합니다."

#: ../../docs/getting_started/scripting/gdscript/static_typing.rst:55
msgid ""
"Static types also give you better code completion options. Below, you can "
"see the difference between a dynamic and a static typed completion options "
"for a class called ``PlayerController``."
msgstr ""
"정적 타입 또한 더 나은 코드 완성 옵션을 제공합니다. 아래에서"
"``PlayerController`` 라는 클래스에 대한 동적 및 정적 타입 완료 옵션의 차이점"
"을 볼 수 있습니다."

#: ../../docs/getting_started/scripting/gdscript/static_typing.rst:59
msgid ""
"You’ve probably stored a node in a variable before, and typed a dot to be "
"left with no autocomplete suggestions:"
msgstr ""
"당신은 아마 전에 변수에 노드를 저장하고, 변수이름 뒤에 점을 입력했으나 자동완"
"성 제안이 표시되지 않았던 경험이 있었을 수 있습니다:"

#: ../../docs/getting_started/scripting/gdscript/static_typing.rst:65
msgid ""
"This is due to dynamic code. Godot cannot know what node or value type "
"you’re passing to the function. If you write the type explicitly however, "
"you will get all public methods and variables from the node:"
msgstr ""
"이는 동적 코드 때문입니다. Godot는 함수에 전달하는 노드나 값 타입을 알 수 없"
"습니다. 그러나 유형을 명시적으로 작성해주면, 노드에서 모든 공용 메서드 및 변"
"수를 가져옵니다:"

#: ../../docs/getting_started/scripting/gdscript/static_typing.rst:72
msgid ""
"In the future, typed GDScript will also increase code performance: Just-In-"
"Time compilation and other compiler improvements are already on the roadmap!"
msgstr ""
"향후에, 타입형 GDScript는 또한 코드 실행 속도 등의 성능을 개선할 것입니다: 즉"
"석(Just-In-Time) 컴파일과 다른 컴파일러 성능 향상이 이미 로드맵에 대기 중입니"
"다!"

#: ../../docs/getting_started/scripting/gdscript/static_typing.rst:76
msgid ""
"Overall, typed programming gives you a more structured experience. It helps "
"prevent errors and improves the self-documenting aspect of your scripts. "
"This is especially helpful when you’re working in a team or on a long-term "
"project: studies have shown that developers spend most of their time reading "
"other people’s code, or scripts they wrote in the past and forgot about. The "
"clearer and the more structured the code, the faster it is to understand, "
"the faster you can move forward."
msgstr ""
"전체적으로, 타입형 프로그래밍은 더 구조화된 경험을 제공합니다. 에러를 방지하"
"고 스크립트가 자체문서화되도록 돕습니다. 이러한 점은 긴 프로젝트를 하거난 팀 "
"프로젝트에서 유용합니다: 연구는 개발자들이 다른 개발자의 코드나 또는 자신이 "
"오래전에 작성하여 내용을 잊어버린 스크립트를 보는데 대부분의 시간을 보낸다고 "
"합니다. 코드가 더 명확하고 구조화될수록 이해하는 것은 더 빨라지며 더 빨리 진"
"도를 나갈 수 있습니다."

#: ../../docs/getting_started/scripting/gdscript/static_typing.rst:85
msgid "How to use static typing"
msgstr "정적 타입 사용법"

#: ../../docs/getting_started/scripting/gdscript/static_typing.rst:87
msgid ""
"To define the type of a variable or a constant, write a colon after the "
"variable’s name, followed by its type. E.g. ``var health: int``. This forces "
"the variable's type to always stay the same:"
msgstr ""
"변수나 상수의 형(type)을 정의하기 위해서, 변수이름뒤에 콜론을 붙이고 타입을 "
"명시하세요. 예를 들면 \"var health:int\". 이것은 변수의 타입이 항상 동일하도"
"록 강제합니다:"

#: ../../docs/getting_started/scripting/gdscript/static_typing.rst:96
msgid ""
"Godot will try to infer types if you write a colon, but you omit the type:"
msgstr ""
"Godot은 당신이 콜론을 입력했지만 타입을 생략한 경우 타입을 예측하기 위해서 노"
"력합니다:"

#: ../../docs/getting_started/scripting/gdscript/static_typing.rst:105
msgid "Currently you can use three types of… types:"
msgstr "현재 세 개의 타입을 사용할 수 있습니다:"

#: ../../docs/getting_started/scripting/gdscript/static_typing.rst:107
msgid ":ref:`Built-in <doc_gdscript_builtin_types>`"
msgstr ":ref:`내장 타입 <doc_gdscript_builtin_types>`"

#: ../../docs/getting_started/scripting/gdscript/static_typing.rst:108
msgid ""
"Core classes and nodes (``Object``, ``Node``, ``Area2D``, ``Camera2D``, etc.)"
msgstr ""
"핵심 클래스와 노드 (``Object``, ``Node``, ``Area2D``, ``Camera2D``, 등등)"

#: ../../docs/getting_started/scripting/gdscript/static_typing.rst:110
msgid ""
"Your own, custom classes. Look at the new :ref:`class_name "
"<doc_scripting_continued_class_name>` feature to register types in the "
"editor."
msgstr ""
"당신이 만들고 수정한 클래스들. 편집기에서 타입을 등록하려면 새로운 :ref:`클래"
"스이름 <doc_scripting_continued_class_name>` 특징을 보세요."

#: ../../docs/getting_started/scripting/gdscript/static_typing.rst:115
msgid ""
"You don't need to write type hints for constants, as Godot sets it "
"automatically from the assigned value. But you can still do so to make the "
"intent of your code clearer."
msgstr ""
"상수에 대해서는 Godot이 자동으로 대입된 값으로부터 타입을 인식하기 때문에 타"
"입 힌트를 쓸 필요가 없습니다. 하지만 여전히 코드의 의도를 명확히 하려면 그렇"
"게 하는게 좋습니다."

#: ../../docs/getting_started/scripting/gdscript/static_typing.rst:118
msgid "Custom variable types"
msgstr "맞춤 변수 타입"

#: ../../docs/getting_started/scripting/gdscript/static_typing.rst:120
msgid ""
"You can use any class, including your custom classes, as types. There are "
"two ways to use them in scripts. The first method is to preload the script "
"you want to use as a type in a constant:"
msgstr ""
"당신이 만든 클래스를 포함해 어떤 클래스든지 타입으로 사용할 수 있습니다. 스크"
"립트에서 쓸 수 있는 방법이 두 가지가 있는데, 첫번째 방법은 타입으로 사용할 스"
"크립트를 미리 로딩하여 상수로 저장하는 것입니다:"

#: ../../docs/getting_started/scripting/gdscript/static_typing.rst:129
msgid ""
"The second method is to use the ``class_name`` keyword when you create. For "
"the example above, your Rifle.gd would look like this:"
msgstr ""
"두 번째 방법은 생성할 때 ``class_name`` 키워드를 사용하는 것입니다. 위의 예제"
"에서 Rifle.gd는 다음과 같습니다:"

#: ../../docs/getting_started/scripting/gdscript/static_typing.rst:137
msgid ""
"If you use ``class_name``, Godot registers the Rifle type globally in the "
"editor, and you can use it anywhere, without having to preload it into a "
"constant:"
msgstr ""
"``class_name``\\ 을 사용한다면, Godot는 Rifle 타입을 편집기에서 전역으로 등록"
"합니다, 그리고 상수에 미리 불러올 필요 없이 어디에나 그것을 쓸 수 있습니다:"

#: ../../docs/getting_started/scripting/gdscript/static_typing.rst:146
msgid "Variable casting"
msgstr "변수 캐스팅(casting)"

#: ../../docs/getting_started/scripting/gdscript/static_typing.rst:148
msgid ""
"Type casting is a key concept in typed languages. Casting is the conversion "
"of a value from one type to another."
msgstr ""
"타이프 캐스팅(Type casting)은 타입 언어에서의 주요된 개념입니다. 어떤 값의 타"
"입을 다른 타입으로 바꾸는 것입니다."

#: ../../docs/getting_started/scripting/gdscript/static_typing.rst:151
msgid ""
"Imagine an Enemy in your game, that ``extends Area2D``. You want it to "
"collide with the Player, a ``KinematicBody2D`` with a script called "
"``PlayerController`` attached to it. You use the ``on_body_entered`` signal "
"to detect the collision. With typed code, the body you detect is going to be "
"a generic ``PhysicsBody2D``, and not your ``PlayerController`` on the "
"``_on_body_entered`` callback."
msgstr ""
"게임에 ``Area2D를 확장하는`` 적이 있다고 상상합시다. 거기에 "
"``PlayerController`` 스크립트가 붙은 ``KinematicBody2D``, 즉 플레이어가 충돌"
"해야 합니다. ``on_body_entered`` 시그널을 사용하면 충돌을 감지할 수 있습니"
"다. 타입형 코드로, 감지한 바디는 일반 ``PhysicsBody2D``\\ 이 될 것이며, "
"``_on_body_entered`` 콜백의 ``PlayerController``\\ 가 아닐 것입니다."

#: ../../docs/getting_started/scripting/gdscript/static_typing.rst:158
msgid ""
"You can check if this ``PhysicsBody2D`` is your Player with the ``as`` "
"casting keyword, and using the colon ``:`` again to force the variable to "
"use this type. This forces the variable to stick to the ``PlayerController`` "
"type:"
msgstr ""
"``PhysicsBody2D``\\ 가 ``as`` 캐스팅 키워드로 이루어진 플레이어인지 확인할 "
"수 있습니다, 그리고 콜론 ``:``\\ 을 다시 사용해 변수가 이 타입을 사용하도록 "
"강제합니다. 이렇게 하면 변수는 ``PlayerController`` 타입에 고정하게 합니다:"

#: ../../docs/getting_started/scripting/gdscript/static_typing.rst:172
msgid ""
"As we’re dealing with a custom type, if the ``body`` doesn’t extend "
"``PlayerController``, the ``player``\\ variable will be set to ``null``. We "
"can use this to check if the body is the player or not. We will also get "
"full autocompletion on the player variable thanks to that cast."
msgstr ""
"맞춤 타입을 다루고 있으니, ``body``\\ 가 ``PlayerController``\\ 를 확장하지 "
"않는다면, ``player``\\ 변수는 ``null``\\ 로 설정될 것입니다. 이걸로 바디가 플"
"레이어인지 아닌지 확인할 수 있습니다. 또한 캐스트 덕분에 플레이어 변수에 완전"
"한 자동 완성을 얻을 수 있습니다."

#: ../../docs/getting_started/scripting/gdscript/static_typing.rst:179
msgid ""
"If you try to cast with a built-in type and it fails, Godot will throw an "
"error."
msgstr ""
"내장 타입으로 캐스트를 하려 하다가 실패한다면, Godot는 오류를 내보낼 것입니"
"다."

#: ../../docs/getting_started/scripting/gdscript/static_typing.rst:182
msgid "Safe lines"
msgstr "안전 라인"

#: ../../docs/getting_started/scripting/gdscript/static_typing.rst:184
msgid ""
"You can also use casting to ensure safe lines. Safe lines are a new tool in "
"Godot 3.1 to tell you when ambiguous lines of code are type-safe. As you can "
"mix and match typed and dynamic code, at times, Godot doesn’t have enough "
"information to know if an instruction will trigger an error or not at "
"runtime."
msgstr ""
"안전 라인을 보장하기 위해 형 변환을 사용할 수도 있습니다. 안전 라인은 애매모"
"호한 코드가 형안전한지 알려주는 Godot 3.1에서 새로 추가된 도구입니다. 정적 타"
"입과 동적 타입을 섞어서 대입시킬 수 있기 때문에 Godot은 런타임에 오류가 발생"
"할 지에 대한 여부를 판명할 충분한 정보가 없습니다."

#: ../../docs/getting_started/scripting/gdscript/static_typing.rst:190
msgid ""
"This happens when you get a child node. Let’s take a timer for example: with "
"dynamic code, you can get the node with ``$Timer``. GDScript supports `duck-"
"typing <https://stackoverflow.com/a/4205163/8125343>`__, so even if your "
"timer is of type ``Timer``, it is also a ``Node`` and an ``Object``, two "
"classes it extends. With dynamic GDScript, you also don’t care about the "
"node’s type as long as it has the methods you need to call."
msgstr ""
"이것은 자식 노드를 얻을 때 발생합니다. 타이머를 예로 들어봅니다: 동적 코드를 "
"통해, ``$Timer``\\ 로 노드를 얻을 수 있습니다. GDScript는 `덕 타이핑 "
"<https://stackoverflow.com/a/4205163/8125343>`__\\ 을 지원하기 때문에, 타이머"
"가 ``Timer`` 타입에 속해 있다면, ``Node``\\ 와 ``Object``\\ 에도 속해있는 것"
"입니다, 확장된 두 클래스이죠. 동적 GDScript로, 또한 호출하는데 필요한 메서드"
"를 가진다면, 노드 타입에 대해 걱정하지 않아도 됩니다."

#: ../../docs/getting_started/scripting/gdscript/static_typing.rst:198
msgid ""
"You can use casting to tell Godot the type you expect when you get a node: "
"``($Timer as Timer)``, ``($Player as KinematicBody2D)``, etc. Godot will "
"ensure the type works and if so, the line number will turn green at the left "
"of the script editor."
msgstr ""
"노드를 얻을 때 예상하는 타입을 Godot에게 말하기 위해 캐스팅을 사용할 수 있습"
"니다: ``($Timer as Timer)``,  ``($Player as KinematicBody2D)`` 등. Godot는 타"
"입이 작동하는지 확인하고, 작동한다면 스크립트 편집기 왼쪽의 줄 숫자가 초록색"
"으로 바뀔 것입니다."

#: ../../docs/getting_started/scripting/gdscript/static_typing.rst:206
msgid "Safe vs Unsafe Line"
msgstr "안전 vs 불안전 라인"

#: ../../docs/getting_started/scripting/gdscript/static_typing.rst:210
msgid ""
"You can turn off safe lines or change their color in the editor settings."
msgstr "편집기 설정에서 안전 라인을 끌 수 있고 혹은 색상을 바꿀 수 있습니다."

#: ../../docs/getting_started/scripting/gdscript/static_typing.rst:213
msgid "Define the return type of a function with the arrow ->"
msgstr "-> 화살표로 함수의 반환 타입 정의하기"

#: ../../docs/getting_started/scripting/gdscript/static_typing.rst:215
msgid ""
"To define the return type of a function, write a dash and a right angle "
"bracket ``->`` after its declaration, followed by the return type:"
msgstr ""
"함수의 반환 타입을 정의하기 위해, 하이픈과 오른쪽 직각 괄호를 적습니다 ``-"
">`` 선언 후, 반환 타입이 뒤따릅니다:"

#: ../../docs/getting_started/scripting/gdscript/static_typing.rst:223
msgid ""
"The type ``void`` means the function does not return anything. You can use "
"any type, as with variables:"
msgstr ""
"``void`` 타입은 함수가 아무것도 반환하지 않는 것을 의미합니다. 변수와 마찬가"
"지로 어떤 타입도 사용할 수 있습니다:"

#: ../../docs/getting_started/scripting/gdscript/static_typing.rst:232
msgid "You can also use your own nodes as return types:"
msgstr "또한 자신의 노드를 반환 타입으로 사용할 수 있습니다:"

#: ../../docs/getting_started/scripting/gdscript/static_typing.rst:248
msgid "Typed or dynamic: stick to one style"
msgstr "타입형 혹은 동적: 하나의 스타일을 고수하기"

#: ../../docs/getting_started/scripting/gdscript/static_typing.rst:250
msgid ""
"Typed GDScript and dynamic GDScript can coexist in the same project. But I "
"recommended to stick to either style for consistency in your codebase, and "
"for your peers. It’s easier for everyone to work together if you follow the "
"same guidelines, and faster to read and understand other people’s code."
msgstr ""
"타입형 GDScript와 동적 GDScript는 같은 프로젝트에 공존할 수 있습니다. 하지만 "
"코드 베이스의 일관성과 동료들을 위해, 저는 하나의 스타일을 고수하기를 추천합"
"니다. 같은 가이드라인을 따른다면 모두가 함께 일하기 더 쉽고, 다른 사람의 코드"
"를 읽고 이해하는데 더 빠를 것입니다."

#: ../../docs/getting_started/scripting/gdscript/static_typing.rst:256
msgid ""
"Typed code takes a little more writing, but you get the benefits we "
"discussed above. Here’s an example of the same, empty script, in a dynamic "
"style:"
msgstr ""
"타입형 코드는 조금 더 쓸 것이 많지만, 위에서 말한대로 이득을 얻습니다. 여기 "
"같은, 빈 스크립트 예제가 있습니다, 동적 스타일에서는 이렇습니다:"

#: ../../docs/getting_started/scripting/gdscript/static_typing.rst:272
msgid "And with static typing:"
msgstr "그리고 정적 타입형에서는 이렇습니다:"

#: ../../docs/getting_started/scripting/gdscript/static_typing.rst:286
msgid ""
"As you can see, you can also use types with the engine’s virtual methods. "
"Signal callbacks, like any methods, can also use types. Here’s a "
"``body_entered`` signal in a dynamic style:"
msgstr ""
"보시다시피, 엔진의 가상 메서드로 타입형을 사용할 수도 있습니다. 메서드와 같"
"은 시그널 콜백도 타입형을 사용할 수 있습니다. 이것이 동적 스타일에서 "
"``body_entered`` 시그널입니다:"

#: ../../docs/getting_started/scripting/gdscript/static_typing.rst:295
msgid "And the same callback, with type hints:"
msgstr "그리고 타입형 힌트를 쓴 같은 콜백입니다:"

#: ../../docs/getting_started/scripting/gdscript/static_typing.rst:302
msgid ""
"You’re free to replace, e.g. the ``CollisionObject2D``, with your own type, "
"to cast parameters automatically:"
msgstr ""
"자유롭게 바꿀 수 있습니다, 예를 들어 자체 타입을 지닌 ``CollisionObject2D``"
"\\ 는 자동으로 매개변수를 캐스트합니다:"

#: ../../docs/getting_started/scripting/gdscript/static_typing.rst:313
msgid ""
"The ``bullet`` variable could hold any ``CollisionObject2D`` here, but we "
"make sure it is our ``Bullet``, a node we created for our project. If it’s "
"anything else, like an ``Area2D``, or any node that doesn’t extend "
"``Bullet``, the ``bullet`` variable will be ``null``."
msgstr ""
"``bullet`` 변수는 여기서 ``CollisionObject2D``\\ 를 가질 수 있습니다 ,하지만 "
"그것이 우리의 ``Bullet``\\ 이어야 합니다, 프로젝트에 생성한 노드 말이죠. "
"``Area2D``\\ 나 ``Bullet``\\ 을 확장하지 않는 다른 노드라면, ``bullet`` 변수"
"는 ``null``\\ 이 될 것입니다."

#: ../../docs/getting_started/scripting/gdscript/static_typing.rst:319
msgid "Warning system"
msgstr "경고 시스템(Warning system)"

#: ../../docs/getting_started/scripting/gdscript/static_typing.rst:321
msgid ""
"The warning system complements typed GDScript. It’s here to help you avoid "
"mistakes that are hard to spot during development, and that may lead to "
"runtime errors."
msgstr ""
"경고 시스템은 타입형 GDScript를 보완해줍니다. 개발 중에 발생하기 쉽고 런타임 "
"오류를 일으키는 실수를 피하도록 도와줍니다."

#: ../../docs/getting_started/scripting/gdscript/static_typing.rst:325
msgid ""
"You can configure warnings in the Project Settings under a new section "
"called ``GDScript``:"
msgstr ""
"프로젝트 설정에서 ``GDScript``\\ 라고 하는 섹션에서 경고를 구성할 수 있습니"
"다:"

#: ../../docs/getting_started/scripting/gdscript/static_typing.rst:331
msgid "warning system project settings"
msgstr "경고 시스템 프로젝트 설정"

#: ../../docs/getting_started/scripting/gdscript/static_typing.rst:333
msgid ""
"You can find a list of warnings for the active GDScript file in the script "
"editor’s status bar. The example below has 3 warnings:"
msgstr ""
"스크립트 편집기의 상태 바에서 활성화된 GDScript 파일을 위한 경고 목록을 찾을 "
"수 있습니다. 밑의 예제는 3개의 경고를 갖습니다:"

#: ../../docs/getting_started/scripting/gdscript/static_typing.rst:339
msgid "warning system example"
msgstr "경고 시스템 예제"

#: ../../docs/getting_started/scripting/gdscript/static_typing.rst:341
msgid ""
"To ignore specific warnings in one file, insert a special comment of the "
"form ``# warning-ignore:warning-id``, or click on the ignore link to the "
"right of the warning’s description. Godot will add a comment above the "
"corresponding line and the code won’t trigger the corresponding warning "
"anymore:"
msgstr ""
"한 파일에서 특정한 경고를 무시하려면, ``# warning-ignore:경고-id``\\ 와 같은 "
"형태의 특수 주석을 삽입하세요. 아니면 경고의 설명 오른쪽의 무시하기(Ignore)"
"를 클릭하세요. Godot는 해당하는 줄 위에 주석을 추가해서 더 이상 해당 경고를 "
"주지 않게 됩니다:"

#: ../../docs/getting_started/scripting/gdscript/static_typing.rst:350
msgid "warning system ignore example"
msgstr "경고 시스템 무시 예제"

#: ../../docs/getting_started/scripting/gdscript/static_typing.rst:352
msgid ""
"You can also choose to ignore not just one but all warnings of a certain "
"type in this file with ``# warning-ignore-all:warning-id``. To ignore all "
"warnings of all types in a file add the comment ``# warnings-disable`` to it."
msgstr ""
"그리고 파일에서 단순히 한 경고가 아닌 특정 유형의 모든 경고를 선택할 수 있습"
"니다. 주석은 ``# warning-ignore-all:경고-id``\\ 입니다. 파일에서 모든 유형의 "
"모든 경고를 무시하려면 ``# warnings-disable`` 주석을 추가하면 됩니다."

#: ../../docs/getting_started/scripting/gdscript/static_typing.rst:356
msgid ""
"Warnings won’t prevent the game from running, but you can turn them into "
"errors if you’d like. This way your game won’t compile unless you fix all "
"warnings. Head to the ``GDScript`` section of the Project Settings to turn "
"on this option. Here’s the same file as the previous example with warnings "
"as errors turned on:"
msgstr ""
"경고는 게임 실행을 방해하지 않지만, 원한다면 오류로 바꿀 수 있습니다. 이 방법"
"으로 모든 오류를 고치지 않는다면 게임이 컴파일 되지 않을 것입니다. 프로젝트 "
"설정의 ``GDScript`` 섹션으로 가서 이 설정을 킵니다. 이전 예제와 같은 파일로 "
"경고가 오류로 바뀐 것입니다:"

#: ../../docs/getting_started/scripting/gdscript/static_typing.rst:365
msgid "warnings as errors"
msgstr "오류와 같은 경고"

#: ../../docs/getting_started/scripting/gdscript/static_typing.rst:368
msgid "Cases where you can’t specify types"
msgstr "타입을 지정할 수 없는 경우"

#: ../../docs/getting_started/scripting/gdscript/static_typing.rst:370
msgid ""
"To wrap up this introduction, let’s cover a few cases where you can’t use "
"type hints. All the examples below **will trigger errors**."
msgstr ""
"이 소개를 마무리하며, 타입형 힌트를 사용할 수 없는 몇 몇 경우를 알아봅시다. "
"밑의 모든 예제는 **오류를 유발합니다**."

#: ../../docs/getting_started/scripting/gdscript/static_typing.rst:373
msgid "You can’t use Enums as types:"
msgstr "열거형(Enum)을 타입으로 사용할 수 없습니다:"

#: ../../docs/getting_started/scripting/gdscript/static_typing.rst:380
msgid ""
"You can’t specify the type of individual members in an array. This will give "
"you an error:"
msgstr "배열에서 각 멤버의 타입을 지정할 수 없습니다. 오류를 줄 것입니다:"

#: ../../docs/getting_started/scripting/gdscript/static_typing.rst:387
msgid ""
"You can’t force the assignment of types in a ``for`` loop, as each element "
"the ``for`` keyword loops over already has a different type. So you "
"**cannot** write:"
msgstr ""
"``for`` 루프에서 타입의 할당을 강제할 수 없습니다, ``for`` 키워드 루프에서 "
"각 요소는 이미 다른 타입을 갖고 있기 때문입니다. 따라서 작성할 수 **없습니다"
"**:"

#: ../../docs/getting_started/scripting/gdscript/static_typing.rst:397
msgid "Two scripts can’t depend on each other in a cyclic fashion:"
msgstr "두 개의 스크립트가 주기적으로 서로에게 의지할 수 없습니다:"

#: ../../docs/getting_started/scripting/gdscript/static_typing.rst:420
#: ../../docs/getting_started/workflow/export/exporting_pcks.rst:129
#: ../../docs/tutorials/2d/2d_movement.rst:347
#: ../../docs/tutorials/2d/2d_sprite_animation.rst:213
msgid "Summary"
msgstr "요약"

#: ../../docs/getting_started/scripting/gdscript/static_typing.rst:422
msgid ""
"Typed GDScript is a powerful tool. Available as of version 3.1 of Godot, it "
"helps you write more structured code, avoid common errors, and create "
"scalable systems. In the future, static types will also bring you a nice "
"performance boost thanks to upcoming compiler optimizations."
msgstr ""
"타입형 GDScript는 강력한 도구입니다. Godot 3.1 버전에 이용할 수 있으며, 일반"
"적인 오류들을 피하면서, 더 구조화된 코드와 확장성 있는 체계를 만드는 것을 도"
"와줍니다. 미래에서는 정적 타입도 향후 컴파일러 최적화로 좋은 퍼포먼스 향상을 "
"제공할 것입니다."

#: ../../docs/getting_started/scripting/gdscript/gdscript_format_string.rst:4
msgid "GDScript format strings"
msgstr "GDScript 형식 문자열(format strings)"

#: ../../docs/getting_started/scripting/gdscript/gdscript_format_string.rst:6
msgid ""
"GDScript offers a feature called *format strings*, which allows reusing text "
"templates to succinctly create different but similar strings."
msgstr ""
"GDscript는  *형식 문자열*\\ 이란 기능을 제공하는데, 비슷한 문자열들을 간결하"
"게 만들어 텍스트 템플릿으로 재 사용할 수 있도록 해줍니다."

#: ../../docs/getting_started/scripting/gdscript/gdscript_format_string.rst:9
msgid ""
"Format strings are just like normal strings, except they contain certain "
"placeholder character-sequences. These placeholders can then easily be "
"replaced by parameters handed to the format string."
msgstr ""
"형식 문자열은 평범한 문자열과 달리, 특정 플레이스 홀더 문자 순서를 갖습니다. "
"이 플레이스 홀더는 형식 문자열에 전달된 매개변수로 쉽게 대체될 수 있습니다."

#: ../../docs/getting_started/scripting/gdscript/gdscript_format_string.rst:13
msgid ""
"As an example, with ``%s`` as a placeholder, the format string ``\"Hello %s, "
"how are you?`` can easily be changed to ``\"Hello World, how are you?\"``. "
"Notice the placeholder is in the middle of the string; modifying it without "
"format strings could be cumbersome."
msgstr ""
"예를 들어, ``%s`` 인 플레이스 홀더는, 형식 문자열 ``\"Hello %s, how are you?"
"`` 을 간단히  ``\"Hello World, how are you?\"`` 로 바꿉니다. 플레이스 홀더가 "
"문자열의 핵심입니다; 형식 문자열 없이 문자열을 수정하는 것은 성가신 일이기 때"
"문입니다."

#: ../../docs/getting_started/scripting/gdscript/gdscript_format_string.rst:20
msgid "Usage in GDScript"
msgstr "GDScript에서 사용법"

#: ../../docs/getting_started/scripting/gdscript/gdscript_format_string.rst:22
msgid "Examine this concrete GDScript example:"
msgstr "구체적인 GDScript 예시를 참고해보세요:"

#: ../../docs/getting_started/scripting/gdscript/gdscript_format_string.rst:35
msgid ""
"Placeholders always start with a ``%``, but the next character or "
"characters, the *format specifier*, determines how the given value is "
"converted to a string."
msgstr ""
"플레이스 홀더는 항상 ``%`` 로 시작하지만, 다음 문자나 문자열인 *형식 지정자"
"(format specifier)* 는 주어진 값을 문자로 전환하는 방법을 결정합니다."

#: ../../docs/getting_started/scripting/gdscript/gdscript_format_string.rst:39
msgid ""
"The ``%s`` seen in the example above is the simplest placeholder and works "
"for most use cases: it converts the value by the same method by which an "
"implicit String conversion or ``str()`` would convert it. Strings remain "
"unchanged, Booleans turn into either ``\"True\"`` or ``\"False\"``, an "
"integral or real number becomes a decimal, other types usually return their "
"data in a human-readable string."
msgstr ""
"``%s`` 는 가장 간단하고 작업에 자주 쓰이는 플레이스홀더입니다: 암묵적 문자열 "
"변환이나 ``str()`` 이 문자열을 전환하는 방식과 같은 방식으로 값을 전환시킵니"
"다. 문자열은 바꾸지 않고, 불리언 방식은 ``\"True\"`` 나 ``\"False\"`` 로, 정"
"수나 실수는 십진수로, 그 외 다른 형식도 사람이 읽을 수 있는 정보로 바꿉니다."

#: ../../docs/getting_started/scripting/gdscript/gdscript_format_string.rst:46
msgid ""
"There is also another way to format text in GDScript, namely the ``String."
"format()`` method. It replaces all occurrences of a key in the string with "
"the corresponding value. The method can handle arrays or dictionaries for "
"the key/value pairs."
msgstr ""
"그리고 GDScript에서 텍스트를 형식화하는 또 다른 방법으로,``String.format()`` "
"메서드가 있습니다. 이것은 문자열 내 모든 항목의 키를 해당 값으로 바꿉니다. 이"
"것으로 배열이나 딕셔너리를 키/값 묶음으로 다룰 수 있습니다."

#: ../../docs/getting_started/scripting/gdscript/gdscript_format_string.rst:50
msgid ""
"Arrays can be used as key, index, or mixed style (see below examples). Order "
"only matters when the index or mixed style of Array is used."
msgstr ""
"배열은 키, 인덱스, 아니면 혼합 스타일로 사용됩니다 (밑의 예시를 참고하세요). "
"순서는 배열의 인덱스나 혼합 스타일을 사용할 때만 중요합니다."

#: ../../docs/getting_started/scripting/gdscript/gdscript_format_string.rst:53
msgid "A quick example in GDScript:"
msgstr "GDScript의 빠른 예제:"

#: ../../docs/getting_started/scripting/gdscript/gdscript_format_string.rst:66
msgid ""
"There are other `format specifiers`_, but they are only applicable when "
"using the ``%`` operator."
msgstr ""
"오직 ``%`` 연산자에만 적용할 수 있는 `형식 지정자(format specifiers)`_ 도 있"
"습니다."

#: ../../docs/getting_started/scripting/gdscript/gdscript_format_string.rst:71
msgid "Multiple placeholders"
msgstr "많은 플레이스 홀더"

#: ../../docs/getting_started/scripting/gdscript/gdscript_format_string.rst:73
msgid ""
"Format strings may contain multiple placeholders. In such a case, the values "
"are handed in the form of an array, one value per placeholder (unless using "
"a format specifier with ``*``, see `dynamic padding`_):"
msgstr ""
"형식 문자열은 여러가지 플레이스 홀더를 가질 수 있습니다. 예를 들어, 값은 배열"
"의 형식으로, 각각의 플레이스 홀더에 단일 값으로 전달됩니다 (``*`` 으로 이루어"
"진 형식 지정자를 사용하지 않는다면, `동적 패딩`_ 을 참고하세요):"

#: ../../docs/getting_started/scripting/gdscript/gdscript_format_string.rst:85
msgid ""
"Note the values are inserted in order. Remember all placeholders must be "
"replaced at once, so there must be an appropriate number of values."
msgstr ""
"값은 순서대로 삽입됩니다. 모든 플레이스 홀더는 한번에 바꾸어야 하기 때문에, "
"적절한 수의 값이 있어야 합니다."

#: ../../docs/getting_started/scripting/gdscript/gdscript_format_string.rst:90
msgid "Format specifiers"
msgstr "형식 지정자(Format specifiers)"

#: ../../docs/getting_started/scripting/gdscript/gdscript_format_string.rst:92
msgid ""
"There are format specifiers other than ``s`` that can be used in "
"placeholders. They consist of one or more characters. Some of them work by "
"themselves like ``s``, some appear before other characters, some only work "
"with certain values or characters."
msgstr ""
"플레이스 홀더에 사용되는 ``s`` 이외에도 다른 형식 지정자가 있습니다. 이들은 "
"하나 이상의 문자로 구성됩니다. ``s`` 처럼 스스로 작동하는 것이 있는 반면, 일"
"부는 다른 문자 앞에 나타나기도 하며, 어떤 것은 오직 특정 값이나 문자에만 작동"
"합니다."

#: ../../docs/getting_started/scripting/gdscript/gdscript_format_string.rst:99
msgid "Placeholder types"
msgstr "플레이스 홀더 유형"

#: ../../docs/getting_started/scripting/gdscript/gdscript_format_string.rst:101
msgid ""
"One and only one of these must always appear as the last character in a "
"format specifier. Apart from ``s``, these require certain types of "
"parameters."
msgstr ""
"이들 중 하나가 반드시 형식 지정자의 마지막 문자로 항상 나타나야 합니다. "
"``s`` 와는 별개로, 이들은 특정 유형의 매개변수가 필요합니다."

#: ../../docs/getting_started/scripting/gdscript/gdscript_format_string.rst:105
msgid "``s``"
msgstr "``s``"

#: ../../docs/getting_started/scripting/gdscript/gdscript_format_string.rst:105
msgid ""
"**Simple** conversion to String by the same method as implicit String "
"conversion."
msgstr "암시적 문자열 변환과 같은 방법으로 문자열을 **간단히** 변환합니다."

#: ../../docs/getting_started/scripting/gdscript/gdscript_format_string.rst:108
msgid "``c``"
msgstr "``c``"

#: ../../docs/getting_started/scripting/gdscript/gdscript_format_string.rst:108
msgid ""
"A single **Unicode character**. Expects an unsigned 8-bit integer (0-255) "
"for a code point or a single-character string."
msgstr ""
"하나의 **유니코드 문자**. 코드 포인트나 단일 문자의 경우 부호가 없는 8비트 정"
"수 (0-255) 가 필요합니다."

#: ../../docs/getting_started/scripting/gdscript/gdscript_format_string.rst:111
msgid "``d``"
msgstr "``d``"

#: ../../docs/getting_started/scripting/gdscript/gdscript_format_string.rst:111
msgid ""
"A **decimal integral** number. Expects an integral or real number (will be "
"floored)."
msgstr "**십진법 정수**. 정수나 (반올림 되는) 실수가 필요합니다."

#: ../../docs/getting_started/scripting/gdscript/gdscript_format_string.rst:114
msgid "``o``"
msgstr "``o``"

#: ../../docs/getting_started/scripting/gdscript/gdscript_format_string.rst:114
msgid ""
"An **octal integral** number. Expects an integral or real number (will be "
"floored)."
msgstr "**8진법 정수**. 정수나 (반올림 되는) 실수가 필요합니다."

#: ../../docs/getting_started/scripting/gdscript/gdscript_format_string.rst:117
msgid "``x``"
msgstr "``x``"

#: ../../docs/getting_started/scripting/gdscript/gdscript_format_string.rst:117
msgid ""
"A **hexadecimal integral** number with **lower-case** letters. Expects an "
"integral or real number (will be floored)."
msgstr ""
"**소문자** 로 이루어진 **16진법 정수**. 정수나 (반올림 되는) 실수가 필요합니"
"다."

#: ../../docs/getting_started/scripting/gdscript/gdscript_format_string.rst:120
msgid "``X``"
msgstr "``X``"

#: ../../docs/getting_started/scripting/gdscript/gdscript_format_string.rst:120
msgid ""
"A **hexadecimal integral** number with **upper-case** letters. Expects an "
"integral or real number (will be floored)."
msgstr ""
"**대문자** 로 이루어진 **16진법 정수**. 정수나 (반올림 되는) 실수가 필요합니"
"다."

#: ../../docs/getting_started/scripting/gdscript/gdscript_format_string.rst:123
msgid "``f``"
msgstr "``f``"

#: ../../docs/getting_started/scripting/gdscript/gdscript_format_string.rst:123
msgid "A **decimal real** number. Expects an integral or real number."
msgstr "**실수**. 정수나 실수가 필요합니다."

#: ../../docs/getting_started/scripting/gdscript/gdscript_format_string.rst:128
msgid "Placeholder modifiers"
msgstr "플레이스 홀더 수정자"

#: ../../docs/getting_started/scripting/gdscript/gdscript_format_string.rst:130
msgid ""
"These characters appear before the above. Some of them work only under "
"certain conditions."
msgstr ""
"이 문자는 위 문자들보다 앞에서 나타납니다. 일부는 특정 조건에서만 작동합니다."

#: ../../docs/getting_started/scripting/gdscript/gdscript_format_string.rst:134
msgid "In number specifiers, **show + sign** if positive."
msgstr "숫자 지정자에서, 숫자가 양수라면 **+ 부호를 표시합니다**."

#: ../../docs/getting_started/scripting/gdscript/gdscript_format_string.rst:136
#: ../../docs/tutorials/misc/binary_serialization_api.rst:94
#: ../../docs/tutorials/misc/binary_serialization_api.rst:103
#: ../../docs/tutorials/misc/binary_serialization_api.rst:121
#: ../../docs/tutorials/misc/binary_serialization_api.rst:312
#: ../../docs/tutorials/misc/binary_serialization_api.rst:332
#: ../../docs/tutorials/misc/binary_serialization_api.rst:334
#: ../../docs/tutorials/misc/binary_serialization_api.rst:342
#: ../../docs/tutorials/misc/binary_serialization_api.rst:361
#: ../../docs/tutorials/misc/binary_serialization_api.rst:373
#: ../../docs/tutorials/misc/binary_serialization_api.rst:385
#: ../../docs/tutorials/misc/binary_serialization_api.rst:398
#: ../../docs/tutorials/misc/binary_serialization_api.rst:400
#: ../../docs/tutorials/misc/binary_serialization_api.rst:409
#: ../../docs/tutorials/misc/binary_serialization_api.rst:411
#: ../../docs/tutorials/misc/binary_serialization_api.rst:420
#: ../../docs/tutorials/misc/binary_serialization_api.rst:428
#: ../../docs/tutorials/misc/binary_serialization_api.rst:441
#: ../../docs/tutorials/misc/binary_serialization_api.rst:454
#: ../../docs/tutorials/misc/binary_serialization_api.rst:469
msgid "Integer"
msgstr "정수(Integer)"

#: ../../docs/getting_started/scripting/gdscript/gdscript_format_string.rst:136
msgid ""
"Set **padding**. Padded with spaces or with zeroes if integer starts with "
"``0`` in an integer placeholder. When used after ``.``, see ``.``."
msgstr ""
"**패딩** 를 설정합니다. 정수 플레이스 홀더에서 정수가 ``0`` 으로 시작한다면 "
"그곳을 0이나 공백으로 채웁니다. ``.`` 뒤에서 쓰는 경우는, ``.`` 를 참고하세"
"요."

#: ../../docs/getting_started/scripting/gdscript/gdscript_format_string.rst:140
msgid "``.``"
msgstr "``.``"

#: ../../docs/getting_started/scripting/gdscript/gdscript_format_string.rst:140
msgid ""
"Before ``f``, set **precision** to 0 decimal places. Can be followed up with "
"numbers to change. Padded with zeroes."
msgstr ""
"``f``이전에, **정밀도** 를 소수점 이하 자릿수 0으로 설정합니다. 변경할 숫자"
"를 뒤따라 갈 수 있습니다. 0으로 채워집니다."

#: ../../docs/getting_started/scripting/gdscript/gdscript_format_string.rst:143
msgid "**Pad to the right** rather than the left."
msgstr "왼쪽 대신 **오른쪽을 채웁니다**."

#: ../../docs/getting_started/scripting/gdscript/gdscript_format_string.rst:145
msgid "``*``"
msgstr "``*``"

#: ../../docs/getting_started/scripting/gdscript/gdscript_format_string.rst:145
msgid ""
"**Dynamic padding**, expect additional integral parameter to set padding or "
"precision after ``.``, see `dynamic padding`_."
msgstr ""
"**동적 패딩(Dynamic padding)** 으로, 패딩이나 ``.`` 이후의 정밀도를 설정하기 "
"위한 추가 적분 매개변수가 필요합니다, `동적 패딩`_ 을 참고하세요."

#: ../../docs/getting_started/scripting/gdscript/gdscript_format_string.rst:151
msgid "Padding"
msgstr "패딩"

#: ../../docs/getting_started/scripting/gdscript/gdscript_format_string.rst:153
msgid ""
"The ``.`` (*dot*), ``*`` (*asterisk*), ``-`` (*minus sign*) and digit (``0``-"
"``9``) characters are used for padding. This allows printing several values "
"aligned vertically as if in a column, provided a fixed-width font is used."
msgstr ""
"``.`` (*점*), ``*`` (*별표*), ``-`` (*빼기 문자*) 그리고 한 자리 수 (``0``-"
"``9``) 문자들이 패딩에 사용됩니다. 이것을 고정 너비 글꼴에 사용한다면, 세로"
"로 정렬된 여러 값들을 프린트할 수 있습니다."

#: ../../docs/getting_started/scripting/gdscript/gdscript_format_string.rst:158
msgid "To pad a string to a minimum length, add an integer to the specifier:"
msgstr "문자열을 최소 길이로 패딩하기 위해선, 지정자에 정수를 추가하십시오:"

#: ../../docs/getting_started/scripting/gdscript/gdscript_format_string.rst:166
msgid ""
"If the integer starts with ``0``, integral values are padded with zeroes "
"instead of white space:"
msgstr "정수가 ``0``으로 시작한다면, 적분 값은 공백 대신 0으로 패딩됩니다:"

#: ../../docs/getting_started/scripting/gdscript/gdscript_format_string.rst:174
msgid ""
"Precision can be specified for real numbers by adding a ``.`` (*dot*) with "
"an integer following it. With no integer after ``.``, a precision of 0 is "
"used, rounding to integral value. The integer to use for padding must appear "
"before the dot."
msgstr ""
"정밀도는 정수 뒤에 ``.``(*점*)을 추가해서 실수로 지정할 수 있습니다. ``.``뒤"
"에 정수가 없다면, 정밀도가 0으로, 적분 값에 반올림됩니다. 패딩에 쓰이는 정수"
"는 점 앞에 나와야 합니다."

#: ../../docs/getting_started/scripting/gdscript/gdscript_format_string.rst:186
msgid ""
"The ``-`` character will cause padding to the right rather than the left, "
"useful for right text alignment:"
msgstr ""
"``-`` 문자는 왼쪽이 아닌 오른쪽으로 채우므로, 오른쪽 텍스트 정렬에 유용합니"
"다:"

#: ../../docs/getting_started/scripting/gdscript/gdscript_format_string.rst:197
msgid "Dynamic padding"
msgstr "동적 패딩"

#: ../../docs/getting_started/scripting/gdscript/gdscript_format_string.rst:199
msgid ""
"By using the ``*`` (*asterisk*) character, the padding or precision can be "
"set without modifying the format string. It is used in place of an integer "
"in the format specifier. The values for padding and precision are then "
"passed when formatting:"
msgstr ""
"``*`` (*별표*) 문자를 사용해서, 형식 문자열을 수정하지 않고 패딩이나 정밀도"
"를 설정할 수 있습니다. 이것은 형식 지정자에서 정수 대신 사용됩니다. 패딩과 정"
"밀도의 값은 서식을 지정할 때 전달됩니다:"

#: ../../docs/getting_started/scripting/gdscript/gdscript_format_string.rst:212
msgid ""
"It is still possible to pad with zeroes in integer placeholders by adding "
"``0`` before ``*``:"
msgstr ""
"``*`` 앞에 ``0`` 을 추가해 정수 플레이스 홀더를 0으로 채울 수도 있습니다:"

#: ../../docs/getting_started/scripting/gdscript/gdscript_format_string.rst:222
msgid "Escape sequence"
msgstr "이스케이프 시퀀스"

#: ../../docs/getting_started/scripting/gdscript/gdscript_format_string.rst:224
msgid ""
"To insert a literal ``%`` character into a format string, it must be escaped "
"to avoid reading it as a placeholder. This is done by doubling the character:"
msgstr ""
"상수 ``%`` 문자를 형식 문자열에 넣으려면, 플레이스 홀더처럼 읽히지 않도록 이"
"스케이프 해야 합니다. 잘못하면 문자를 두 배로 만들 것입니다:"

#: ../../docs/getting_started/scripting/gdscript/gdscript_format_string.rst:235
msgid "Format method examples"
msgstr "형식 메서드 예제"

#: ../../docs/getting_started/scripting/gdscript/gdscript_format_string.rst:237
msgid ""
"The following are some examples of how to use the various invocations of the "
"``String.format``  method."
msgstr "``String.format`` 메서드의 호출을 사용하는 방법은 다음과 같습니다."

#: ../../docs/getting_started/scripting/gdscript/gdscript_format_string.rst:242
msgid "**Style**"
msgstr "**스타일**"

#: ../../docs/getting_started/scripting/gdscript/gdscript_format_string.rst:242
#: ../../docs/getting_started/scripting/gdscript/gdscript_format_string.rst:264
#: ../../docs/getting_started/scripting/gdscript/gdscript_format_string.rst:277
msgid "**Example**"
msgstr "**예제**"

#: ../../docs/getting_started/scripting/gdscript/gdscript_format_string.rst:242
#: ../../docs/getting_started/scripting/gdscript/gdscript_format_string.rst:264
#: ../../docs/getting_started/scripting/gdscript/gdscript_format_string.rst:277
msgid "**Result**"
msgstr "**결과**"

#: ../../docs/getting_started/scripting/gdscript/gdscript_format_string.rst:244
#: ../../docs/getting_started/scripting/gdscript/gdscript_format_string.rst:246
#: ../../docs/getting_started/scripting/gdscript/gdscript_format_string.rst:248
#: ../../docs/getting_started/scripting/c_sharp/c_sharp_differences.rst:288
msgid "Dictionary"
msgstr "딕셔너리"

#: ../../docs/getting_started/scripting/gdscript/gdscript_format_string.rst:244
#: ../../docs/getting_started/scripting/gdscript/gdscript_format_string.rst:250
msgid "key"
msgstr "키"

#: ../../docs/getting_started/scripting/gdscript/gdscript_format_string.rst:244
msgid ""
"``\"Hi, {name} v{version}!\".format({\"name\":\"Godette\", \"version\":"
"\"3.0\"})``"
msgstr ""
"``\"안녕, {이름} v{버전}!\".format({\"이름\":\"Godette\", \"버전\":"
"\"3.0\"})``"

#: ../../docs/getting_started/scripting/gdscript/gdscript_format_string.rst:244
#: ../../docs/getting_started/scripting/gdscript/gdscript_format_string.rst:246
#: ../../docs/getting_started/scripting/gdscript/gdscript_format_string.rst:248
#: ../../docs/getting_started/scripting/gdscript/gdscript_format_string.rst:250
#: ../../docs/getting_started/scripting/gdscript/gdscript_format_string.rst:252
#: ../../docs/getting_started/scripting/gdscript/gdscript_format_string.rst:254
#: ../../docs/getting_started/scripting/gdscript/gdscript_format_string.rst:256
msgid "Hi, Godette v3.0!"
msgstr "안녕, Godette v3.0!"

#: ../../docs/getting_started/scripting/gdscript/gdscript_format_string.rst:246
#: ../../docs/getting_started/scripting/gdscript/gdscript_format_string.rst:252
msgid "index"
msgstr "인덱스"

#: ../../docs/getting_started/scripting/gdscript/gdscript_format_string.rst:246
msgid "``\"Hi, {0} v{1}!\".format({\"0\":\"Godette\", \"1\":\"3.0\"})``"
msgstr "``\"안녕, {0} v{1}!\".format({\"0\":\"Godette\", \"1\":\"3.0\"})``"

#: ../../docs/getting_started/scripting/gdscript/gdscript_format_string.rst:248
#: ../../docs/getting_started/scripting/gdscript/gdscript_format_string.rst:254
msgid "mix"
msgstr "믹스"

#: ../../docs/getting_started/scripting/gdscript/gdscript_format_string.rst:248
msgid ""
"``\"Hi, {0} v{version}!\".format({\"0\":\"Godette\", \"version\":\"3.0\"})``"
msgstr ""
"``\"안녕, {0} v{버전}!\".format({\"0\":\"Godette\", \"버전\":\"3.0\"})``"

#: ../../docs/getting_started/scripting/gdscript/gdscript_format_string.rst:250
#: ../../docs/getting_started/scripting/gdscript/gdscript_format_string.rst:252
#: ../../docs/getting_started/scripting/gdscript/gdscript_format_string.rst:254
#: ../../docs/getting_started/scripting/gdscript/gdscript_format_string.rst:256
#: ../../docs/getting_started/scripting/c_sharp/c_sharp_differences.rst:267
msgid "Array"
msgstr "배열"

#: ../../docs/getting_started/scripting/gdscript/gdscript_format_string.rst:250
msgid ""
"``\"Hi, {name} v{version}!\".format([[\"version\",\"3.0\"], [\"name\","
"\"Godette\"]])``"
msgstr ""
"``\"안녕, {이름} v{버전}!\".format([[\"버전\":\"3.0\"], [\"이름\":\"Godette"
"\"]])``"

#: ../../docs/getting_started/scripting/gdscript/gdscript_format_string.rst:252
msgid "``\"Hi, {0} v{1}!\".format([\"Godette\",\"3.0\"])``"
msgstr "``\"안녕, {0} v{1}!\".format([\"Godette\",\"3.0\"])``"

#: ../../docs/getting_started/scripting/gdscript/gdscript_format_string.rst:254
msgid "``\"Hi, {name} v{0}!\".format([3.0, [\"name\",\"Godette\"]])``"
msgstr "``\"안녕, {이름} v{0}!\".format([3.0, [\"이름\":\"Godette\"]])``"

#: ../../docs/getting_started/scripting/gdscript/gdscript_format_string.rst:256
msgid "no index"
msgstr "인덱스 없음"

#: ../../docs/getting_started/scripting/gdscript/gdscript_format_string.rst:256
msgid "``\"Hi, {} v{}!\".format([\"Godette\", 3.0], \"{}\")``"
msgstr "``\"안녕, {} v{}!\".format([\"Godette\", 3.0], \"{}\")``"

#: ../../docs/getting_started/scripting/gdscript/gdscript_format_string.rst:259
msgid ""
"Placeholders can also be customized when using ``String.format``, here's "
"some examples of that functionality."
msgstr ""
"플레이스 홀더도 ``String.format``을 사용할 때 사용자 정의를 할 수 있습니다, "
"이 기능의 몇 가지 예를 소개합니다."

#: ../../docs/getting_started/scripting/gdscript/gdscript_format_string.rst:266
msgid "Infix (default)"
msgstr "중위 (기본)"

#: ../../docs/getting_started/scripting/gdscript/gdscript_format_string.rst:266
msgid "``\"Hi, {0} v{1}\".format([\"Godette\", \"3.0\"], \"{_}\")``"
msgstr "``\"안녕, {0} v{1}\".format([\"Godette\", \"3.0\"], \"{_}\")``"

#: ../../docs/getting_started/scripting/gdscript/gdscript_format_string.rst:266
#: ../../docs/getting_started/scripting/gdscript/gdscript_format_string.rst:268
#: ../../docs/getting_started/scripting/gdscript/gdscript_format_string.rst:270
msgid "Hi, Godette v3.0"
msgstr "안녕, Godette v3.0"

#: ../../docs/getting_started/scripting/gdscript/gdscript_format_string.rst:268
msgid "Postfix"
msgstr "후위"

#: ../../docs/getting_started/scripting/gdscript/gdscript_format_string.rst:268
msgid "``\"Hi, 0% v1%\".format([\"Godette\", \"3.0\"], \"_%\")``"
msgstr "``\"안녕, 0% v1%\".format([\"Godette\", \"3.0\"], \"_%\")``"

#: ../../docs/getting_started/scripting/gdscript/gdscript_format_string.rst:270
msgid "Prefix"
msgstr "접두사"

#: ../../docs/getting_started/scripting/gdscript/gdscript_format_string.rst:270
msgid "``\"Hi, %0 v%1\".format([\"Godette\", \"3.0\"], \"%_\")``"
msgstr "``\"안녕, %0 v%1\".format([\"Godette\", \"3.0\"], \"%_\")``"

#: ../../docs/getting_started/scripting/gdscript/gdscript_format_string.rst:273
msgid ""
"Combining both the ``String.format`` method and the ``%`` operator could be "
"useful, as ``String.format`` does not have a way to manipulate the "
"representation of numbers."
msgstr ""
"``String.format`` 메서드와 ``%`` 연산자를 결합함으로써 ``String.format``\\ "
"이 다룰 수 없는 숫자 표현을 다룰 수 있게 됩니다."

#: ../../docs/getting_started/scripting/gdscript/gdscript_format_string.rst:279
msgid ""
"``\"Hi, {0} v{version}\".format({0:\"Godette\", \"version\":\"%0.2f\" % "
"3.114})``"
msgstr ""
"``\"안녕, {0} v{버전}\".format({0:\"Godette\", \"버전\":\"%0.2f\" % 3.114})``"

#: ../../docs/getting_started/scripting/gdscript/gdscript_format_string.rst:279
msgid "Hi, Godette v3.11"
msgstr "안녕, Godette v3.11"

#: ../../docs/getting_started/scripting/visual_script/what_is_visual_scripting.rst:4
msgid "What is Visual Scripting"
msgstr "Visual Scripting(비주얼 스크립팅)은 무엇인가요"

#: ../../docs/getting_started/scripting/visual_script/what_is_visual_scripting.rst:6
msgid ""
"Visual Scripting is a tool designed to make the entry barrier to programming "
"much lower. As code is more visual, it needs less abstract thinking to be "
"understood. Any artist, animator, game designer, etc. can look at it and "
"quickly grasp the flow of logic."
msgstr ""
"Visual Scripting은 프로그래밍 진입 장벽을 낮추기 위해 고안된 도구입니다. 코드"
"보다 더 시각적이어서 이해하는데 쉽습니다. 아티스트, 애니메이터, 게임 디자이"
"너 및 다른 사람들도 논리의 흐름을 쉽고 빠르게 파악할 수 있습니다."

#: ../../docs/getting_started/scripting/visual_script/what_is_visual_scripting.rst:11
msgid ""
"The reason it does not make existing programming obsolete is, simply, that "
"it does not scale as well. It takes considerably more time to create code "
"with it, and it's often more difficult to modify than just writing a few "
"characters."
msgstr ""
"이것이 기존의 프로그래밍을 구식으로 만들지는 못합니다, 간단히 말해 확장이 잘 "
"되지 못합니다. 코드로 만드는 것보다 훨씬 더 많은 시간이 소요되고, 때로는 단"
"지 몇 글자를 수정하는 것보다 더 어렵습니다."

#: ../../docs/getting_started/scripting/visual_script/what_is_visual_scripting.rst:15
msgid ""
"With the misunderstanding cleared up, the question that remains is what are "
"the practical uses for Visual Scripting."
msgstr "오해가 해결되면서, 남은 질문은 Visual Scripting의 실용적인 용도입니다."

#: ../../docs/getting_started/scripting/visual_script/what_is_visual_scripting.rst:18
msgid "The most common use cases are as follows:"
msgstr "가장 일반적인 사용 케이스는 다음과 같습니다:"

#: ../../docs/getting_started/scripting/visual_script/what_is_visual_scripting.rst:20
msgid ""
"Game development beginners who want to learn an engine but have no "
"programming experience yet."
msgstr ""
"엔진을 배우고 싶지만 아직 프로그래밍 경험이 전혀 없는 게임 개발 입문자."

#: ../../docs/getting_started/scripting/visual_script/what_is_visual_scripting.rst:21
msgid ""
"Artists and Game Designers who have no experience in programming and want to "
"create quick prototypes or simple games."
msgstr ""
"프로그래밍에 대한 경험이 없고 간단한 프로토타입이나 게임을 만들과 싶어하는 아"
"티스트와 게임 디자이너."

#: ../../docs/getting_started/scripting/visual_script/what_is_visual_scripting.rst:22
msgid ""
"Programmers working in a team that want to make part of the game logic "
"available to Artists or Game Designers in order to offload some of their "
"work."
msgstr ""
"팀으로 일하면서 아티스트나 게임 디자이너에게 게임 논리의 일부를 주어 그들의 "
"작업량을 줄이기 원하는 프로그래머."

#: ../../docs/getting_started/scripting/visual_script/what_is_visual_scripting.rst:24
msgid ""
"These scenarios are far more common than one might think, so this is why "
"Godot has added this feature."
msgstr ""
"이 시나리오는 생각보다 훨씬 더 흔합니다, 그래서 Godot가 이 기능을 추가한 것입"
"니다."

#: ../../docs/getting_started/scripting/visual_script/getting_started.rst:4
msgid "Getting started with Visual Scripting"
msgstr "Visual Scripting 시작하기"

#: ../../docs/getting_started/scripting/visual_script/getting_started.rst:6
msgid ""
"As with everything in Godot, we prioritize a good experience over copying or "
"integrating third party solutions which might not fit nicely in the current "
"workflow. This led us to write our own version of how we believe this "
"feature would work best with the engine."
msgstr ""
"Godot의 모든 기능처럼, Visual Scripting도 좋은 경험을 우선 순위로 두고 개발했"
"습니다. 현재 작업 흐름에 잘 맞지 않는 제 3자 솔루션과 결합하거나 복사하는 것 "
"이상으로 말이죠. 이렇게 해서 엔진에 가장 적합한 기능이라고 생각되는 독자적인 "
"버전을 작성하게 됐습니다."

#: ../../docs/getting_started/scripting/visual_script/getting_started.rst:10
msgid ""
"In Godot, a Visual Script fits smoothly together with regular scripts in the "
"Editor tab"
msgstr ""
"Godot에서 Visual Script는 일반 스크립트와 함께 편집기 탭에 잘 들어 맞습니다"

#: ../../docs/getting_started/scripting/visual_script/getting_started.rst:15
msgid ""
"In fact, Visual Scripting integrates so well to Godot that it's hard to "
"believe it was added only in version 3.0. This is because, when editing, the "
"rest of Godot panels and docks act like a palette from where you can drag "
"and drop all sorts of information to the script canvas:"
msgstr ""
"실제로 Visual Scripting이 Godot와 아주 잘 통합해서 버전 3.0만에 추가되었다고 "
"믿기 어려울 것입니다. 스크립트 편집 중에 Godot 패널과 독은 팔래트처럼 스크랩"
"트 캔버스로 모든 종류의 정보를 드래그 앤 드롭할 수 있기 때문입니다:"

#: ../../docs/getting_started/scripting/visual_script/getting_started.rst:23
msgid "Creating a script"
msgstr "스크립트 만들기(Creating a script)"

#: ../../docs/getting_started/scripting/visual_script/getting_started.rst:25
msgid ""
"Creating scripts works the same as with other scripting languages: Select "
"any node in the scene and push the \"New Script\" button at the top right "
"corner of the Scene Tree dock:"
msgstr ""
"스크립트 만들기는 다른 스크립팅 언어와 같은 방식입니다: 씬에서 아무 노드나 선"
"택하고, 씬 트리 독의 오른쪽 위에 있는 \"새 스크립트(New Script)\" 버튼을 누르"
"세요:"

#: ../../docs/getting_started/scripting/visual_script/getting_started.rst:31
msgid ""
"Once it opens, the script type \"Visual Script\" must be selected from the "
"drop down list. The script extension must be \".vs\" (for Visual Script!)."
msgstr ""
"만들기 창이 열리면 스크립트 유형의 드롭 다운 메뉴에서 \"Visual Script\"로 선"
"택해야 합니다. 스크립트 확장자 이름은 (Visual Script를 의미하는) \".vs\"가 됩"
"니다."

#: ../../docs/getting_started/scripting/visual_script/getting_started.rst:37
msgid ""
"Finally, the Script Editor will open, allowing you to start editing the "
"visual script:"
msgstr ""
"그러면 이제 Script 편집기가 열리고 Visual Script를 편집할 수 있게 됩니다:"

#: ../../docs/getting_started/scripting/visual_script/getting_started.rst:43
msgid "Adding a function"
msgstr "함수 추가하기(Adding a function)"

#: ../../docs/getting_started/scripting/visual_script/getting_started.rst:45
msgid ""
"Unlike other visual scripting implementations, Visual Scripting in Godot is "
"heavily based on functions. This happens because it uses the same interface "
"to communicate with the engine as other scripting engines. In Godot, the "
"scripting interface is universal and all implementations conform to it."
msgstr ""
"다른 Visual Scripting 구현 방식과 달리, Godot의 Visual Scripting은 함수와 깊"
"게 연관되어 있습니다. 이는 다른 스크립팅 엔진처럼 엔진과 소통하도록 같은 인터"
"페이스를 사용하기 때문입니다. Godot에서 스크립팅 인터페이스는 범용적이고 이 "
"인터페이스 내에서 전부 구현합니다."

#: ../../docs/getting_started/scripting/visual_script/getting_started.rst:49
msgid "A function is an individual canvas with nodes connected."
msgstr "함수는 노드가 연결된 개별 캔버스입니다."

#: ../../docs/getting_started/scripting/visual_script/getting_started.rst:51
msgid ""
"A single script can contain many functions, each of which will have a canvas "
"of its own, allowing for more organization."
msgstr ""
"하나의 스크립트에는 많은 함수를 가질 수 있고, 각 함수는 고유의 캔버스를 갖고 "
"있기 때문에 더 조직적으로 만들 수 있습니다."

#: ../../docs/getting_started/scripting/visual_script/getting_started.rst:53
msgid "There are three main ways to add functions in a script:"
msgstr "스크립트에 함수를 추가하는 세 가지 주요 방법이 있습니다:"

#: ../../docs/getting_started/scripting/visual_script/getting_started.rst:56
msgid "Overriding a virtual function"
msgstr "가상 함수 다시 정의하기(Override)"

#: ../../docs/getting_started/scripting/visual_script/getting_started.rst:58
msgid ""
"Most types of nodes and other types of objects in Godot contain virtual "
"functions. These are functions that will be called (run your code) when "
"something happens and can be looked up in the reference. Virtual functions "
"are listed when pressing the \"Override\" icon in the member panel:"
msgstr ""
"Godot의 대부분의 노드 유형과 객체의 유형은 가상 함수를 갖고 있습니다. 이벤트"
"가 일어나면 함수는 호출되며 (코드를 실행하며), 그 이벤트는 참조에서 볼 수 있"
"습니다. 가상 함수는 멤버(Members) 패널의 \"다시 정의하기(Override)\" 아이콘"
"을 클릭하면 나열됩니다:"

#: ../../docs/getting_started/scripting/visual_script/getting_started.rst:65
msgid ""
"In the following example, a function will be executed when the node is "
"loaded and added to the running scene. For this, the _ready() virtual method "
"will be overridden:"
msgstr ""
"다음 예시는 노드를 불러오고 실행하는 씬에 추가될 때 실행하는 함수입니다. "
"_ready() 가상 메서드가 다시 정의됩니다:"

#: ../../docs/getting_started/scripting/visual_script/getting_started.rst:71
msgid "Finally, a canvas appears for this function, showing the override:"
msgstr "그러면 이제 이 함수의 캔버스가 나타나고, 재정의를 표시합니다:"

#: ../../docs/getting_started/scripting/visual_script/getting_started.rst:76
msgid ""
"As some functions expect you to return a value, they will also add a return "
"node where such value is supposed to be provided:"
msgstr ""
"일부 함수는 반환 값을 추측하기 때문에, 해당 값을 제공하도록 return 노드를 추"
"가해야 합니다:"

#: ../../docs/getting_started/scripting/visual_script/getting_started.rst:83
msgid "Connecting a signal to a function"
msgstr "함수에 시그널(Signal) 연결하기"

#: ../../docs/getting_started/scripting/visual_script/getting_started.rst:85
msgid ""
"Nodes in a tree emit signals when something happens. Godot uses signals for "
"all sorts of things. A typical example would be a button that emits a "
"\"pressed\" signal when actually pressed."
msgstr ""
"노드는 트리에서 무언가 발생하면 시그널을 방출합니다. Godot는 시그널로 모든 작"
"업을 합니다. 전형적인 예제로 \"pressed\" 시그널을 방출하는 버튼으로, 버튼을 "
"누를 때 방출합니다."

#: ../../docs/getting_started/scripting/visual_script/getting_started.rst:88
msgid ""
"For this, a node must be selected and the Node tab opened. This will allow "
"inspecting the signals. Once they are displayed, connect the \"pressed\" "
"signal:"
msgstr ""
"그렇게 하려면, 시그널을 방출할 노드를 선택한 채로 노드(Node) 탭을 여세요. 거"
"기에는 시그널을 확인할 수 있습니다. 시그널을 확인한 뒤, \"pressed\" 시그널을 "
"연결하세요:"

#: ../../docs/getting_started/scripting/visual_script/getting_started.rst:94
msgid ""
"This will open the connection dialog. In this dialog, you must select the "
"node where the signal will be connected to, and the function that will "
"receive the signal:"
msgstr ""
"그러면 연결 대화 상자가 열립니다. 대화 상자에서 시그널을 연결할 노드를 선택하"
"고 시그널을 받는 함수를 선택해야 합니다:"

#: ../../docs/getting_started/scripting/visual_script/getting_started.rst:100
msgid ""
"If this is done right, a new function will be created in our script and a "
"signal will automatically be connected to it:"
msgstr ""
"잘 설정했다면, 새 함수가 스크립트에 만들어지고 자동으로 시그널이 연결됩니다:"

#: ../../docs/getting_started/scripting/visual_script/getting_started.rst:107
msgid "Creating a function manually"
msgstr "수동으로 함수 만들기"

#: ../../docs/getting_started/scripting/visual_script/getting_started.rst:109
msgid ""
"The last way to create functions is to do it manually. In general, this is "
"not as common unless you really need it. Custom functions work when another "
"(or the same) script calls them manually. The main use cases for this are "
"breaking a larger function up into several manageable chunks and reusing "
"your visual code."
msgstr ""
"함수를 만드는 마지막 방법은 수동으로 만드는 것입니다. 일반적으로 정말 필요한 "
"경우가 아니라면 수동으로 만들지 않을 것입니다. 다른 (혹은 같은) 스크립트에서 "
"함수를 수동으로 호출할 때 맞춤(Custom) 함수는 작동합니다. 주된 사용 예로는 커"
"다란 함수를 여러 개의 덩어리로 만드는 것입니다. 관리하기 좋으면서도 다른 "
"Visual 코드에 다시 쓸 수 있도록 만드는 것이죠."

#: ../../docs/getting_started/scripting/visual_script/getting_started.rst:113
msgid ""
"To create a function manually, push the big \"Plus\" button, and a new "
"function will be added with a default name:"
msgstr ""
"함수를 수동으로 만들려면, 큰 \"더하기\" 버튼을 누르세요. 그러면 새 함수가 기"
"본 이름으로 추가됩니다:"

#: ../../docs/getting_started/scripting/visual_script/getting_started.rst:119
msgid ""
"This will add a new function, which can be renamed by simply double clicking "
"its name:"
msgstr "함수는 이름에서 더블 클릭하면 이름을 새로 지을 수 있습니다:"

#: ../../docs/getting_started/scripting/visual_script/getting_started.rst:125
msgid ""
"To edit the \"arguments\" this function can get (the values you pass to it "
"when you call this function), simply click the Function node and check the "
"inspector:"
msgstr ""
"이 함수가 갖는 (함수를 호출할 때 값을 전달하는) \"인수(Argument)\"를 편집하려"
"면, 간단히 Function(함수) 노드를 클릭하고 인스펙터(Inspector)를 확인하세요:"

#: ../../docs/getting_started/scripting/visual_script/getting_started.rst:131
msgid "More on that will be explained later in this document."
msgstr "자세한 내용은 이 문서의 뒷부분에서 설명합니다."

#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:4
msgid "Nodes and terminology"
msgstr "노드와 전문 용어(Nodes and terminology)"

#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:6
msgid ""
"Before continuing, it must be noted that the *Node* terminology needs to be "
"used with care. When referring to *Visual Script Nodes* (or generally "
"*Nodes*) this text will refer to the little boxes you connect with lines, "
"which are part of a graph. When referring to *Scene Nodes*, it is implied "
"that the elements that make up a Scene are being referred, which are part of "
"a tree. Their naming is similar but their function is different. When "
"referring to *Node* here, it will be implied that a *Visual Script Node* is "
"referred to unless indicated otherwise."
msgstr ""
"계속하기 전, *노드(Node)* 용어 사용을 유의해야 합니다. *Visual Script "
"Nodes(비주얼 스크립트 노드)* (혹은 일반적으로 *Nodes*)를 언급할 때 이 단어는 "
"선으로 연결되어 있는 작은 상자를 의미합니다. 그래프의 일부분이죠. 만일 *씬 노"
"드(Scene Node)*\\ 를 언급하면 그것은 씬(Scene)을 구성하는 요소를 함축하고 있"
"습니다. 이는 트리의 일부분이죠. 이 둘의 이름은 비슷하지만 기능은 천차만별입니"
"다. 여기서 언급하는 *노드(Node)*\\ 는 *Visual Script Node*\\ 만을 의미합니다."

#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:15
msgid "Node properties"
msgstr "노드 속성(Node Property)"

#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:17
msgid ""
"Like in most visual scripting implementations, each node has editable "
"properties. In Godot, though, we try to avoid bloating the nodes with "
"editable controls for the sake of readability."
msgstr ""
"대부분의 Visual scripting 구현과 마찬가지로, 각 노드는 편집할 수 있는 속성을 "
"갖습니다. 하지만 Godot는 가독성을 위해, 편집할 수 있는 기능으로 인해 노드가 "
"부풀려지는 일을 피하려고 했습니다."

#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:20
msgid ""
"Nodes still display the required information as text, but editing is done "
"via the *Inspector*. To edit them, select any node and edit its properties "
"in the *Inspector*."
msgstr ""
"노드는 여전히 필요한 정보를 텍스트로 표시하지만, 편집은 *인스펙터(Inspecter)*"
"\\ 를 통해 이루어집니다. 노드를 편집하려면, 아무 노드나 선택하고 *인스펙터"
"(Inspecter)*\\ 에서 해당 속성을 편집합니다."

#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:25
msgid "Ports and connections"
msgstr "포트 그리고 연결"

#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:27
msgid ""
"Programming in Godot Visual Scripting is done via *Nodes* and *Port "
"Connections* inside each function."
msgstr ""
"Godot Visual Scripting에서 프로그래밍은 각 함수 안에서 *노드*\\ 와 *포트 연결"
"*\\ 을 통해 이루어집니다."

#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:31
msgid "Ports"
msgstr "포트(Ports)"

#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:33
msgid ""
"Nodes in Godot Visual Scripting have *Ports*. These are endpoints that "
"appear to the left and right of nodes and which can be used to make "
"*Connections*: There are two types of *Ports*: *Sequence* and *Data*."
msgstr ""
"Godot Visual Scripting의 노드는 *포트*\\ 를 가지고 있습니다. 노드의 왼쪽과 오"
"른쪽에는 끝 점이 나타나고 거기서 *연결(Connections)*\\ 을 만들 수 있습니다: "
"두 가지 유형의 *포트*\\ 가 있습니다: *시퀀스(Sequence)* 그리고 *데이터"
"(Data)*."

#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:40
msgid ""
"*Sequence Ports* indicate the order in which operations are executed. "
"Typically when a *Node* is done processing, it will go to the next node from "
"one of the ports at the right. If nothing is connected, the function may "
"end, or another output *Sequence Port* might be tried (this depends on the "
"node). Thanks to this, you can follow the logic flow within a function by "
"following the white lines. Not every *Node* has *Sequence Ports*. In fact, "
"most do not."
msgstr ""
"*시퀀스 포트*\\ 는 작업이 실행되는 순서를 나타냅니다. 일반적으로 *노드*\\ 가 "
"처리를 완료하면, 오른쪽에 있는 포트 중 하나에서 다음 노드로 이동합니다. 연결"
"된 것이 없으면 함수는 종료되거나, 다른 출력 *시퀀스 포트*\\ 가 작업될 수 있습"
"니다 (노드마다 다름). 이 덕분에, 흰색 선을 따라 함수 내의 논리 흐름을 따라갈 "
"수 있습니다. 모든 *노드*\\ 가 *시퀀스 포트*\\ 를 가지고 있지는 않습니다. 사"
"실, 대부분이 없습니다."

#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:46
msgid ""
"*Data Ports* ports contain typed values. Types can be any regular Godot "
"types, such as a boolean, an integer, a string, a Vector3, an array, any "
"Object or Scene Node, etc. A *Data Port* on the right side of a node is "
"considered an output, while, a port on the left side is an input. Connecting "
"them allows information to flow to the next node."
msgstr ""
"*데이터 포트(Data Ports)* 포트는 타입 값을 포함합니다. 타입은 불리언, 정수, "
"문자열, Vector3, 배열, 모든 객체 또는 씬 노드 등과 같은 일반 Godot 타입이 될 "
"수 있습니다. 노드의 오른쪽에 있는 *데이터 포트*는 출력으로 간주되며, 한편 왼"
"쪽의 포트는 입력입니다. 이들을 연결하면 정보를 다음 노드로 전달할 수 있습니"
"다."

#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:51
msgid ""
"Not all *Data Port* types are compatible and will allow connections, though. "
"Pay special attention to colors and icons, as each type has a different "
"representation:"
msgstr ""
"모든 *데이터 포트* 타입이 호환되거나 연결이 되는 것은 아닙니다. 각 타입마다 "
"다르게 표현되어있는, 색상과 아이콘에 특히 주의를 기울이세요:"

#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:58
#: ../../docs/development/file_formats/tscn.rst:27
msgid "Connections"
msgstr "연결(Connections)"

#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:60
msgid ""
"Connecting is a relatively simple process. Drag an *Output Port* towards an "
"*Input Port*."
msgstr ""
"연결은 비교적 간단한 과정입니다. *출력 포트(Output Port)*\\ 를 *입력 포트"
"(Input Port)*\\ 로 드래그 합니다."

#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:65
msgid ""
"Disconnecting takes a bit more practice. Disconnecting in *Data Ports* "
"happens by dragging the *Input* away, while for *Sequence Ports*, this "
"happens by dragging the *Output* away."
msgstr ""
"연결 해제는 좀 더 연습이 필요합니다. *데이터 포트*\\ 에서 연결 해제는 *입력*"
"\\ 을 드래그 하는 것으로 이루어지는 반면, *시퀀스 포트*\\ 의 경우 *출력*\\ "
"을 드래그 하는 것으로 이루어집니다."

#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:71
msgid ""
"This may seem strange at first, but it happens because *Data Ports* are 1:N "
"(A single output port can connect to many inputs), while *Sequence Ports* "
"are N:1 (Many sequence outputs can be connected to a single input)."
msgstr ""
"처음에는 이상하게 보일 수도 있습니다, 하지만 *데이터 포트*\\ 는 1:N (단일 출"
"력 포트가 많은 입력에 연결될 수 있음)인 반면, *시퀀스 포트*\\ 는 N:1 (많은 시"
"퀀스 출력이 단일 입력에 연결될 수 있음)이기 때문입니다."

#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:75
msgid ""
"Connecting to empty space (drag to connect but unpress over empty space) is "
"also context sensitive, it will supply a list of most common operations. For "
"sequences, it will be conditional nodes:"
msgstr ""
"빈 공간에 연결하는 것 (드래그 하여 연결하고 빈 공간을 누르지 않은 경우) 또한 "
"컨텍스트에 민감하여, 가장 흔한 작업 목록을 제공 합니다. 시퀀스의 경우에는 조"
"건부 노드가 됩니다:"

#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:81
msgid "While, for data, a contextual set/get/call menu will open:"
msgstr "한편 데이터의 경우, 컨텍스트적 Set/Get/Call 메뉴가 열립니다:"

#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:87
msgid "Adding nodes"
msgstr "노드 추가하기"

#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:89
msgid ""
"Finally! We got to the fun part! But, before explaining in more detail what "
"each type of node does, let's take a short look at how nodes are most "
"commonly added and dealt with."
msgstr ""
"마침내! 재미있는 부분에 도착했습니다! 하지만 각 노드 타입이 하는 일에 대해 구"
"체적으로 설명하기 전에, 어떻게 노드가 가장 일반적으로 추가되고 처리되는 지 짧"
"게 한번 알아봅시다."

#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:94
msgid "Accessing scene nodes"
msgstr "씬 노드 접근하기"

#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:96
msgid ""
"One of the most common tasks is accessing Scene Tree Nodes (again, not to "
"mistake with *Visual Script Nodes*). Dragging from the Scene Tree and "
"dropping into the canvas will ask you to *call a method* (sometimes referred "
"to as *member function*) on this node."
msgstr ""
"흔한 작업들 중 하나로는 씬 트리 노드(Scene Tree Nodes)에 접근하는 것이 있습니"
"다 (다시 한번 말하건데, *Visual Script Nodes*\\ 로 착각하지 마십시오). 씬 트"
"리에서 캔버스로 드래그 하여 놓으면 이 노드에서 \"메서드 호출(call a "
"method)\" (*멤버 함수(member function)*\\ 라고 하기도 함) 여부를 물어봅니다."

#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:102
msgid ""
"While accessing properties is desired in most cases (more on that below), "
"sometimes *calling methods* can be useful too. Methods execute specific "
"actions on objects. In the above case, the mouse pointer can be warped to a "
"position in local coordinates to the control. Another common use case is "
"queueing a node for deletion, which is done with the *queue_free* method."
msgstr ""
"대부분의 경우 속성에 접근하는 것이 좋지만 (아래에 자세히 설명되어 있음), 때로"
"는 *메서드 호출*\\ 도 유용할 수 있습니다. 메서드는 객체에서 특정 작업을 실행"
"합니다. 위의 경우로는, 마우스 포인터는 컨트롤에 대한 지역 좌표의 위치로 비틀 "
"수 있습니다. 또 다른 일반적인 사용 사례는 노드를 삭제하기 위해 대기하는 것으"
"로, *queue_free* 메서드를 사용하여 이루어집니다."

#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:109
msgid ""
"Care must be taken that this only works if the scene being edited contains "
"your *Visual Script* in one of the nodes! Otherwise, a warning will be shown."
msgstr ""
"편집 중인 씬들 중 한 노드가 *Visual Script*\\ 를 포함하고 있어야만 작동된다"
"는 것에 주의하세요! 그렇지 않으면, 경고가 표시됩니다."

#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:113
msgid "Accessing scene node properties"
msgstr "씬 노드 속성 접근하기"

#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:115
msgid ""
"This is the most common way to edit *Scene Nodes* in Visual Scripting. "
"Select a *Scene Node* from the *Scene Tree*, go to the Inspector, find *the "
"Name* of the property you want to edit (hint, *not* the value!) and drag it "
"to the canvas:"
msgstr ""
"이것은 Visual Scripting에서 *씬 노드*\\ 를 편집하는 가장 일반적인 방법입니"
"다. *씬 트리*\\ 에서 *씬 노드*\\ 를 선택하고, 인스펙터(Inspecter)로 가서, 편"
"집하려는 속성의 *이름*\\ 을 찾고 (힌트, 값이 *아닙니다!*) 캔버스로 드래그 해"
"옵니다:"

#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:120
msgid ""
"The result is that this value can be changed from your script by writing to "
"a *Data Port*."
msgstr ""
"결과적으로 이 값은 *데이터 포트*\\ 에 기록하여 스크립트에서 변경할 수 있습니"
"다."

#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:122
#, fuzzy
msgid ""
"If instead reading this value is desired, drag the node again but hold :kbd:"
"`Ctrl` (or :kbd:`Cmd` on macOS). This will create a getter:"
msgstr ""
"이 값을 가져오는 대신, *Ctrl* 키 (혹은 Mac에서 Command 키)를 누른 채로 드래"
"그 합니다. Getter가 생성됩니다:"

#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:127
msgid "In this case, the value can be read from a *Data Port*."
msgstr "이 경우에, *데이터 포트*\\ 에서 값을 읽을 수 있습니다."

#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:133
msgid ""
"Variables are memory containers local to the script which can hold a value. "
"This value can be read from any of the functions of the script or from other "
"scripts via the method described in the previous step."
msgstr ""
"변수는 값을 저장할 수 있는 스크립트의 지역 메모리 컨테이너입니다. 이 값은 스"
"크립트의 모든 기능이나 이전 단계에서 설명한 방법을 통해 다른 스크립트에서 읽"
"을 수 있습니다."

#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:135
msgid ""
"To add a Variable, push the \"+\" button on the *Variables* section of the "
"Members panel. Double-click the new variable to rename it:"
msgstr ""
"변수를 추가하려면, 멤버 패널의 *변수* 섹션에 있는 \"+\"버튼을 누릅니다. 새 변"
"수를 더블 클릭하여 이름을 바꿉니다:"

#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:140
msgid "Right-clicking the variable allows you to configure its properties:"
msgstr "우클릭으로 변수의 속성을 구성할 수 있습니다:"

#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:147
msgid ""
"As it can be seen above, the type and initial value of the variable can be "
"changed, as well as some property hints. Ticking the \"Export\" option makes "
"the variable visible in the Inspector when selecting the node. This also "
"makes it available to other scripts via the method described in the previous "
"step."
msgstr ""
"위에서 볼 수 있듯이, 변수의 타입과 초기 값은 물론 일부 속성 힌트도 변경할 수 "
"있습니다. \"Export\"옵션을 선택하면 노드를 선택할 때 인스펙터(Inspecter)에 변"
"수가 표시됩니다. 이 또한 이전 단계에서 설명한 방법으로 다른 스크립트에서도 사"
"용할 수 있습니다."

#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:153
msgid ""
"To use the variable in the script, simply drag it to the canvas to create a "
"getter:"
msgstr ""
"스크립트에서 변수를 사용하려면, 간단히 캔버스로 드래그 하여 Getter를 생성합니"
"다:"

#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:158
#, fuzzy
msgid "Likewise, hold :kbd:`Ctrl` (or :kbd:`Cmd` on macOS) to drop a setter:"
msgstr ""
"마찬가지로, *Ctrl* (혹은 Mac에서 *Command*)을 눌러서 Setter를 놓습니다:"

#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:166
msgid ""
"It is also possible to create your own signals in a script and use them. For "
"this, do the same steps you did for variables in the previous step, except "
"for *Signals*:"
msgstr ""
"스크립트에서 자신의 시그널을 만들어서 사용하는 것도 가능합니다. 이를 위해 *시"
"그널*\\ 을 제외하고, 이전 단계의 변수에 작업한 것과 같은 절차를 진행해야 합니"
"다:"

#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:171
msgid ""
"A signal can also be edited via the right-click menu to customize its "
"arguments:"
msgstr "우클릭 메뉴를 통해 시그널의 인수를 정의하도록 편집할 수 있습니다:"

#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:176
msgid ""
"The signal you have created will appear in the Inspector, along with the "
"built-in node signals. This allows you to connect it from another script "
"from another *Scene Node*:"
msgstr ""
"생성된 시그널은 내장 노드 시그널과 함께 인스펙터(Inspecter)에 나타납니다. 이"
"를 통해 다른 *씬 노드*\\ 의 다른 스크립트에 시그널을 연결할 수 있습니다:"

#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:181
msgid "Finally, to emit the signal, simply drag it to the canvas:"
msgstr "마침내, 시그널이 방출하도록, 간단히 캔버스로 드래그 합니다:"

#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:186
msgid ""
"Remember that emitting a signal is a sequenced operation, so it must come "
"from a Sequence port."
msgstr ""
"시그널이 방출한다는 것은 시퀀스 된 동작이므로, 반드시 시퀀스 포트로부터 와야 "
"한다는 것을 잊지 마세요."

#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:190
msgid "Adding more nodes"
msgstr "더 많은 노드 추가하기"

#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:192
msgid ""
"Now that the basics are covered, let's discuss the large amount of utility "
"nodes available for your canvas! Below the member panel, exists the list of "
"all available node types:"
msgstr ""
"이제 기초가 다듬어졌으니, 캔버스에 쓸 수 있는 많은 양의 유용한 노드에 대해 이"
"야기해봅시다! 멤버 패널 아래에, 이용 가능한 노드 타입 목록이 존재합니다:"

#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:198
#, fuzzy
msgid ""
"Pressing :kbd:`Ctrl + F` (or :kbd:`Cmd + F` on macOS) allows you to search "
"the list."
msgstr "Ctrl-F (혹은 Mac에서 Command-F)로 목록을 검색할 수 있습니다."

#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:200
msgid ""
"Any of them can be dragged to the scene. Unlike nodes (e.g. dragging a "
"property from the Inspector sets the context to the node being edited "
"automatically), these are added without any \"contextual\" information, so "
"this has to be done manually."
msgstr ""
"어느 것들이든 씬으로 드래그 할 수 있습니다. 노드와 달리 (예를 들어 인스펙터"
"(Inspecter)에서 속성을 드래그 하는 것으로 자동으로 편집된 노드에 대한 컨텍스"
"트를 설정하는 것), 그들은 어떤 \"컨텍스트적\" 정보 없이 추가됩니다, 따라서 작"
"업을 수동으로 수행하여야 합니다."

#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:206
msgid ""
"Remember that you can check the class reference for what each node does, as "
"they are documented there. That mentioned, a brief overview of node types "
"follows:"
msgstr ""
"노드들이 문서화 되어있기 때문에, 어떤 각각의 노드가 무엇을 하는지 알기 위해 "
"클래스 레퍼런스를 확인할 수 있다는 것을 기억하세요. 즉, 노드 타입의 간단한 개"
"요는 다음과 같습니다:"

#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:213
msgid ""
"Constant nodes are nodes that provide values that, while not changing over "
"time, can be useful as reference values. Most of the time they are integer "
"or float."
msgstr ""
"상수 노드는 값을 제공하고, 시간이 지나도 값이 변하지 않는 노드로서, 참조 값으"
"로 유용합니다. 대부분 정수 또는 실수입니다."

#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:219
msgid ""
"The first one is \"Constant\", which allows you to select any value of any "
"type as constant, from an integer (42) to a String (\"Hello!\"). In general, "
"this node is not used that often because of default input values in *Data "
"Ports*, but it's good to know it exists."
msgstr ""
"첫 번째 것은 \"Constant\"로 상수 값이나 타입을 선택할 수 있습니다, 상수 (42)"
"부터 문자열 (\"Hello!\")까지 말이죠. 기본적으로 이 노드는 *데이터 포트*\\ 의 "
"기본 입력 값 때문에 자주 쓰이지는 않지만, 알아두면 좋습니다."

#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:221
msgid ""
"The second is the GlobalConstant node, which contains a long list of "
"constants for global types in Godot. In there you can find some useful "
"constants to refer to key names, joystick or mouse buttons, etc."
msgstr ""
"두 번째 것은 GlobalConstant 노드로, Godot에서 전역 타입을 위한 긴 상수 목록"
"을 포함합니다. 여기서는 키 이름, 조이스틱이나 마우스 버튼 등을 나타내는 유용"
"한 상수를 볼 수 있습니다."

#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:224
msgid ""
"The third one is MathConstant, which provides typical mathematical "
"constants, such as PI, E, etc."
msgstr ""
"세 번째 것은 MathConstant로, PI, E 등과 같은 전형적인 수학적 상수를 제공합니"
"다."

#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:230
msgid ""
"Data nodes deal with all sorts of access to information. Any information in "
"Godot is accessed via these nodes, so they are some of the most important "
"ones to use and pretty diverse."
msgstr ""
"데이터 노드는 정보에 대한 모든 종류의 접근를 처리합니다. Godot에서는 어떤 정"
"보도 이 노드를 통해 접근되므로, 그들은 중요하게 쓰이는 것들 중 하나로서 꽤 다"
"양합니다."

#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:236
msgid ""
"There are many types of nodes of interest here, so a short attempt to "
"describe them will follow:"
msgstr ""
"흥미를 가질만한 많은 타입의 노드가 있으므로, 그들을 설명하기 위한 간단한 시도"
"가 따르겠습니다:"

#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:240
msgid "Action"
msgstr "액션"

#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:242
msgid ""
"Action nodes are vital when dealing with input from a device. You can read "
"more about actions in the (@TODO ACTION TUTE LINK). In the following example "
"below, the control is moved to the right when the \"move_right\" action is "
"pressed."
msgstr ""
"액션 노드는 기기의 입력을 처리할 때 중요합니다. 액션에 대한 더 자세한 것은 "
"(@TODO ACTION TUTE LINK)에서 볼 수 있습니다. 아래의 다음 예시는, \"move_right"
"\" 액션이 눌렸을 때 컨트롤이 오른쪽으로 움직이는 것입니다."

#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:249
msgid "Engine Singleton"
msgstr "엔진 싱글톤(Engine Singleton)"

#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:251
msgid ""
"Engine singletons are global interfaces (meaning they can be accessed "
"without a reference; unlike Scene Nodes, they are always available). They "
"have several purposes, but in general, they are useful for low-level access "
"or OS-related access."
msgstr ""
"엔진 싱글톤은 전역 인터페이스입니다 (즉 씬 노드와 달리, 참조 없이 접근할 수 "
"있고 항상 이용 가능합니다). 그들은 여러 목적을 지니지만, 대개 로우 레벨 접근"
"이나 OS 관련 접근에 유용합니다."

#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:257
msgid ""
"Remember that dragging a connection to empty space will help you call "
"functions or set/get properties on these:"
msgstr ""
"연결을 빈 공간에 드래그 하는 것으로 함수나 Set/Get 속성을 불러오는 것(Call)"
"을 기억하세요:"

#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:263
msgid "Local Variables"
msgstr "지역 변수(Local Variables)"

#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:265
msgid ""
"These are nodes you can use as temporary storage for your graphs. Make sure "
"they all have the same name and type when using them and they will reference "
"the same piece of memory."
msgstr ""
"이 노드는 그래프의 임시 저장소로 사용할 수 있는 노드입니다. 반드시 그들을 사"
"용할 때 모두 같은 이름과 타입을 가져야 한다는 것을 명심하세요, 그러면 그들은 "
"같은 메모리를 참조할 것입니다."

#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:270
msgid ""
"As it can be seen above, there are two nodes available: A simple getter, and "
"a sequenced getter (setting requires a sequence port)."
msgstr ""
"위에서 볼 수 있듯이, 두 개의 노드를 사용할 수 있습니다: 간단한 Getter, 그리"
"고 시퀀스된 Getter (설정에 시퀀스 포트가 필요합니다)."

#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:274
msgid "Scene Node"
msgstr "씬 노드(Scene Node)"

#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:276
msgid ""
"This is just a reference to a node in the tree, but it's easier to use this "
"node by dragging the actual node from the scene tree to the canvas (this "
"will create it and configure it)."
msgstr ""
"단순히 트리에서 노드의 참조이지만, 씬 트리에서 실제 노드를 캔버스로 드래그 하"
"여 그 노드를 더 쉽게 사용할 수 있습니다 (노드가 만들어지고 구성될 것입니다)."

#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:281
msgid "Self"
msgstr "셀프"

#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:283
msgid ""
"In some rare occasions, it may be desired to pass this Scene Node as "
"argument. It can be used to call functions and set/get properties, or drag "
"nodes (or event the node itself that has the script) from the Scene Tree to "
"the canvas for this."
msgstr ""
"드물긴 하지만, 씬 노드를 인수로 전달하고 싶을지도 모릅니다. 함수와 set/get 속"
"성을 호출할 때, 혹은 이를 위해 씬 트리에서 캔버스로 노드를 드래그 할 때 (아니"
"면 스크립트를 갖고 있는 노드에 이벤트를 줄 때) 사용될 수 있습니다."

#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:290
msgid ""
"This node is similar to the Singleton node because it references the "
"SceneTree, which contains the active scene. SceneTree, however, only works "
"when the node is sitting in the scene and active, otherwise accessing it "
"will return an error."
msgstr ""
"이 노드는 활성화된 씬을 갖고 있는 SceneTree를 참조한다는 점에서 싱글톤 노드"
"와 비슷하지만, 오직 노드가 씬에 있고 활성화된 상태이어야만 작동합니다, 그렇"
"지 않고 접근하면 오류를 반환합니다."

#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:294
msgid ""
"SceneTree allows for many low-level things, like setting stretch options, "
"calling groups, make timers, or even load another scene. It's a good class "
"to get familiar with."
msgstr ""
"SceneTree는 많은 로우 레벨 것들, 늘이기 설정, 그룹 호출, 타이머 만들기, 혹은 "
"다른 씬 불러오기와 같은 것을 할 수 있습니다. 익숙해지기 좋은 클래스입니다."

#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:299
msgid "Preload"
msgstr "Preload(미리 불러오기)"

#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:301
msgid ""
"This does the same function as preload() in GDScript. It maintains this "
"resource loaded and ready to use. Rather than instancing the node, it's "
"simpler to drag the desired resource from the filesystem dock to the canvas."
msgstr ""
"이것은 GDScript에서 preload()와 같은 함수입니다. 이 리소스가 불러와지고 사용"
"할 준비인 상태를 유지합니다. 노드를 인스턴스 하는 대신, 더 쉽게 파일 시스템 "
"독에서 원하는 리소스를 캔버스로 드래그 하면 됩니다."

#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:306
msgid "Resource Path"
msgstr "리소스 경로"

#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:308
msgid ""
"This node is a simple helper to get a string with a path to a resource you "
"can pick. It's useful in functions that load things from disk."
msgstr ""
"이 노드는 선택할 수 있는 리소스에 대한 경로를 문자열로 가질 수 있게 하는 도우"
"미입니다. 함수에서 디스크에서 리소스를 불러올 떄 유용합니다."

#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:313
msgid "Comment"
msgstr "주석(Comment)"

#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:315
msgid ""
"A Comment node works as a node you can resize to put around other nodes. It "
"will not try to get focus or be brought to top when selecting it. It can "
"also be used to write text on it."
msgstr ""
"주석 노드는 크기 조절을 할 수 있는 노드로 다른 노드 주변에 놓을 수 있습니다. "
"그것은 눈에 띄지 않고 선택할 때 최상단으로 올라가지 않습니다. 또한 글자를 쓸 "
"때 사용할 수 있습니다."

#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:322
msgid "Flow Control"
msgstr "Flow Control(흐름 제어)"

#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:324
msgid ""
"Flow control nodes allow the execution to take different branches, usually "
"depending on a given condition."
msgstr ""
"Flow Control 노드는 다른 지점으로 데려가 실행할 수 있게 하며, 보통은 주어진 "
"조건에 따라 다릅니다."

#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:331
msgid "Condition"
msgstr "Condition(조건)"

#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:333
#, fuzzy
msgid ""
"This is a simple node that checks a bool port. If ``true``, it will go via "
"the \"true\" sequence port. If ``false``, the second. After going for either "
"of them, it goes via the \"done\" port. Leaving sequence ports disconnected "
"is fine if not all of them are used."
msgstr ""
"불 포트를 확인하는 간단한 노드입니다. 참이라면, \"true\" 시퀀스 포트를 통해 "
"갑니다. 거짓이라면, 두 번째로 갑니다. 둘 중 하나로 간 후, \"done\" 포트를 통"
"해 갑니다. 모든 시퀀스 포트를 사용하지 않는다면 연결을 끊어 두는 것이 좋습니"
"다."

#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:339
msgid "Iterator"
msgstr "Iterator(반복자)"

#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:341
msgid ""
"Some data types in Godot (ie, arrays, dictionaries) are iterable. This means "
"that a bit of code can run for each element that it has."
msgstr ""
"Godot에서 일부 데이터 타입 (즉, 배열, 딕셔너리)은 반복이 가능합니다. 이는 약"
"간의 코드로도 가지고 있는 각 요소를 실행할 수 있다는 것을 뜻합니다."

#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:344
msgid ""
"The Iterator node goes through all elements and, for each of them, it goes "
"via the \"each\" sequence port, making the element available in the \"elem\" "
"data port."
msgstr ""
"Iterator 노드는 모든 요소를 거치면서, 그들 각각을 \"each\" 시퀀스 포트를 통"
"해 갑니다, 그리고 \"elem\" 데이터 포트에서 요소를 사용할 수 있게 만듭니다."

#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:347
msgid "When done, it goes via the \"exit\" sequence port."
msgstr "끝나면, \"exit\" 시퀀스 포트를 통해 갑니다."

#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:351
msgid "Return"
msgstr "Return(반환)"

#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:353
msgid ""
"Some functions can return values. In general for virtual ones, Godot will "
"add the Return node for you. A return node forces the function to end."
msgstr ""
"일부 함수는 값을 반환할 수 있습니다. 일반적으로 가상의 경우, Godot는 Return "
"노드를 추가할 것입니다. Return 노드는 함수를 강제 종료합니다."

#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:358
msgid "Sequence"
msgstr "Sequence(시퀀스)"

#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:360
msgid ""
"This node is useful mostly for organizing your graph. It calls its sequence "
"ports in order."
msgstr ""
"이 노드는 그래프를 조직하는 대부분에 유용합니다. 이것은 시퀀스 포트를 순서대"
"로 호출합니다."

#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:364
msgid "TypeCast"
msgstr "TypeCast(타입캐스트)"

#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:366
msgid ""
"This is a useful and commonly used node. You can use it to cast arguments or "
"other objects to the type you desire. Afterwards, you can even drag the "
"object output to get full completion."
msgstr ""
"이것은 유용하며 일반적으로 사용되는 노드입니다. 인수나 다른 객체를 원하는 타"
"입으로 캐스트할 때 이것을 사용할 수 있습니다. 나중에 객체 출력을 드래그 하여 "
"완전 완료를 얻을 수 있습니다."

#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:372
msgid ""
"It is also possible to cast to a script, which will allow complete script "
"properties and functions:"
msgstr ""
"스크립트를 캐스트하는 것도 가능하여, 완전한 스크립트 속성과 함수를 갖게 합니"
"다:"

#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:378
msgid "Switch"
msgstr "Switch(스위치)"

#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:380
msgid ""
"The Switch node is similar to the Condition node, but it matches many values "
"at the same time."
msgstr ""
"Switch 노드는 Condition 노드와 비슷하지만, 많은 값을 동시에 맞춰봅니다."

#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:386
msgid ""
"This is a more primitive form of iteration. \"repeat\" sequence output will "
"be called as long as the condition in the \"cond\" data port is met."
msgstr ""
"반복의 더 원시적인 형태입니다. \"repeat\" 시퀀스 출력은 \"cond\" 데이터 포트"
"가 충족되면 호출됩니다."

#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:393
msgid ""
"Functions are simple helpers, most of the time deterministic. They take some "
"arguments as input and return an output. They are almost never sequenced."
msgstr ""
"함수는 단순한 도우미로 대부분은 결정론적 입니다. 몇 가지 인수를 입력으로 받아"
"서 출력으로 반환합니다. 시퀀스는 거의 일어나지 않습니다."

#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:398
msgid "Built-In"
msgstr "Built-In(내장)"

#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:400
#, fuzzy
msgid ""
"There is a list of built-in helpers. The list is almost identical to the one "
"from :ref:`GDScript<class_@GDScript>`. Most of them are mathematical "
"functions, but others can be useful helpers. Make sure to take a look at the "
"list at some point."
msgstr ""
"내장 도우미 목록입니다. GDScript와 거의 동일합니다 (@TODO, GDScript 메서드 링"
"크?). 대부분은 수학적 함수지만, 어떤 것은 유용한 도우미입니다. 여러 시점으로 "
"목록들을 살펴보세요."

#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:404
msgid "By Type"
msgstr "By Type(타입 별)"

#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:406
msgid ""
"Those are the methods available to basic types. For example, if you want a "
"dot-product, you can search for \"dot\" instead of the Vector3 category. In "
"most cases just search the list of nodes, it should be faster."
msgstr ""
"기본 타입에서 이용할 수 있는 메서드들 입니다. 예를 들어, 내적을 원한다면, "
"Vector3 카테고리 대신 \"dot\"을 검색할 수 있습니다. 대부분의 경우는 노드 목록"
"을 검색하는 것이 더 빠릅니다."

#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:411
msgid "Call"
msgstr "Call(호출)"

#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:413
msgid ""
"This is the generic calling node. It is rarely used directly but by dragging "
"to empty space on an already configured node."
msgstr ""
"일반적인 호출 노드입니다. 직접적으로 쓰이는 일은 거의 없고 이미 구성된 노드"
"의 빈 공간으로 드래그 하여 사용됩니다."

#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:417
msgid "Constructors"
msgstr "Constructors(생성자)"

#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:419
msgid ""
"These are all the functions needed to create Godot basic datatypes. For "
"example, If you need to create a Vector3 out of 3 floats, a constructor must "
"be used."
msgstr ""
"Godot 기본 데이터 타입을 생성하는 데 필요한 모든 함수들 입니다. 예를 들어, 3"
"개의 실수가 있는 Vector3를 생성한다면, Constructor가 사용되어야 합니다."

#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:425
msgid "Destructor"
msgstr "Destructor(분해자)"

#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:427
msgid ""
"This is the opposite to Constructor, it allows to separate any basic type "
"(ie, Vector3) into its sub-elements."
msgstr ""
"Constructor의 반대 성격으로, (Vector3와 같은) 기본 타입을 하위 원소로 분리합"
"니다."

#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:433
msgid "Emit Signal"
msgstr "Emit Signal(시그널 방출)"

#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:435
msgid ""
"Emits signals from any object. In general it's not that useful, as dragging "
"a signal to the canvas works better."
msgstr ""
"객체로부터 시그널을 방출합니다. 일반적으로 유용하지는 않고, 시그널을 캔버스"
"로 드래그 하는 것이 더 잘 작동합니다."

#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:439
msgid "Get/Set"
msgstr "Get/Set"

#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:441
msgid ""
"Generic Getter/Setter node. Dragging properties from the Inspector works "
"better, as they appear properly configured on drop."
msgstr ""
"일반적인 Getter/Setter 노드. 인스펙터(Inspecter)에서 속성을 드래그 하고 드롭"
"하면 잘 구성되면 더 잘 작동합니다."

#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:445
msgid "Wait"
msgstr "Wait(기다림)"

#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:447
msgid ""
"The Wait nodes will suspend execution of the function until something "
"happens (many frames can pass until resuming, in fact). Default nodes allow "
"you to wait for a frame to pass, a fixed frame or a given amount of time "
"until execution is resumed."
msgstr ""
"Wait 노드는 무슨 일이 발생할 때 까지 함수의 실행을 중지합니다 (사실 다시 시작"
"할 때까지 많은 프레임이 지나갈 수 있습니다). 기본 노드는 실행이 재개될 때까"
"지 1 프레임, 혹은 고정된 프레임, 아니면 고정된 시간을 기다릴 수 있습니다."

#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:452
#: ../../docs/getting_started/scripting/c_sharp/c_sharp_differences.rst:306
msgid "Yield"
msgstr "Yield"

#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:454
msgid ""
"This node completely suspends the execution of the script, and it will make "
"the function return a value that can be used to resume execution."
msgstr ""
"이 노드는 스크립트의 실행을 완전히 중지하고, 함수가 실행을 재개하는 값을 반환"
"하게 만듭니다."

#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:458
msgid "Yield Signal"
msgstr "Yield Signal(Yield 시그널)"

#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:460
msgid "Same as Yield, but will wait until a given signal is emitted."
msgstr "Yield와 같지만, 주어진 시그널이 방출될 때까지 기다립니다."

#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:464
msgid "Index"
msgstr "Index(인덱스)"

#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:466
msgid ""
"Generic indexing operator, not often used but it's good that it exists just "
"in case."
msgstr ""
"일반적인 인덱스 연산자로, 자주 쓰이진 않지만 있다는 것은 좋은 일입니다."

#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:472
msgid ""
"These are mostly generic operators, such as addition, multiplication, "
"comparison, etc. By default, these mostly accept any datatype (and will "
"throw an error at run-time if the types fed do not match those expected by "
"the operator). It is always recommended to set the right type for operators "
"to catch errors faster and make the graph easier to read."
msgstr ""
"대개 일반적인 연산자들로, 덧셈, 곱셈, 비교 등이 있습니다. 기본적으로 이들은 "
"대부분 모든 데이터 타입을 받아들입니다 (그리고 연산자가 예측한 타입이 입력한 "
"타입과 맞지 않으면 런타임 시 오류가 발생합니다). 항상 오류를 빠르게 잡고 그래"
"프를 읽기 쉽게 하기 위해 연산자에 맞는 타입을 설정하기를 추천합니다."

#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:481
msgid "Expression Node"
msgstr "Expression Node(표현식 노드)"

#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:483
msgid ""
"Among the operators, the *Expression* node is the most powerful. If well "
"used, it allows you to enormously simplify visual scripts that are math or "
"logic heavy. Type any expression on it and it will be executed in real-time."
msgstr ""
"연산자들 사이에서, *Expression* 노드는 가장 강력합니다. 잘만 쓴다면, 수학이"
"나 논리로 무거워진 VisualScript를 엄청 간단하게 만들 수 있습니다. 표현식을 입"
"력하면 실시간으로 실행됩니다."

#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:486
msgid "Expression nodes can:"
msgstr "Expression 노드는 가능합니다:"

#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:488
msgid ""
"Perform math and logic expressions based on custom inputs (eg: \"a*5+b\", "
"where a and b are custom inputs):"
msgstr ""
"맞춤 입력에 따라 수학 및 논리 표현식을 실행 (예:  \"a*5+b\"에서, a와 b는 맞"
"춤 입력입니다):"

#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:493
msgid "Access local variables or properties:"
msgstr "지역 변수나 속성을 접근:"

#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:498
msgid ""
"Use most of the existing built-in functions that are available to GDScript, "
"such as sin(),cos(),print(), as well as constructors, such as Vector3(x,y,z),"
"Rect2(..), etc.:"
msgstr ""
"Vector3(x,y,z),Rect2(..) 등과 같은 Constructor나 sin(),cos(),print()와 같은 "
"GDScript에서 사용할 수 있는 존재하는 내장 함수 대부분을 사용:"

#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:503
msgid "Call API functions:"
msgstr "API 함수를 호출:"

#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:508
msgid ""
"Use sequenced mode, which makes more sense in case of respecting the "
"processing order:"
msgstr "처리 순서를 따르는 경우에 더 적합한 시퀀스 모드를 사용:"

#: ../../docs/getting_started/scripting/c_sharp/index.rst:2
#: ../../docs/getting_started/scripting/c_sharp/c_sharp_differences.rst:30
#: ../../docs/getting_started/scripting/c_sharp/c_sharp_differences.rst:59
#: ../../docs/getting_started/scripting/c_sharp/c_sharp_differences.rst:199
#: ../../docs/getting_started/scripting/c_sharp/c_sharp_differences.rst:214
#: ../../docs/getting_started/scripting/c_sharp/c_sharp_differences.rst:226
#: ../../docs/getting_started/scripting/c_sharp/c_sharp_differences.rst:237
#: ../../docs/getting_started/scripting/c_sharp/c_sharp_differences.rst:245
#: ../../docs/getting_started/scripting/c_sharp/c_sharp_differences.rst:260
#: ../../docs/getting_started/scripting/c_sharp/c_sharp_differences.rst:272
#: ../../docs/getting_started/scripting/c_sharp/c_sharp_differences.rst:329
#: ../../docs/getting_started/workflow/export/exporting_for_web.rst:114
msgid "C#"
msgstr "C#"

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_basics.rst:6
msgid ""
"C# support is a new feature available since Godot 3.0. As such, you may "
"still run into some issues, or find spots where the documentation could be "
"improved. Please report issues with C# in Godot on the `engine GitHub page "
"<https://github.com/godotengine/godot/issues>`_, and any documentation "
"issues on the `documentation GitHub page <https://github.com/godotengine/"
"godot-docs/issues>`_."
msgstr ""
"C# 지원은 Godot 3.0의 새로운 기능입니다. 따라서, 실행 중 여전히 문제가 발생"
"할 수 있고, 문서를 개선할 수 있는 부분을 발견할 수도 있습니다. `엔진 Github "
"페이지 <https://github.com/godotengine/godot/issues>`_\\ 에서 Godot의 C#관련 "
"문제들을 보고해주세요. 그리고 문서상의 문제는`문서 Github 페이지 <https://"
"github.com/godotengine/godot-docs/issues>`_\\ 에서 보고해주세요."

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_basics.rst:14
msgid ""
"This page provides a brief introduction to C#, both what it is and how to "
"use it in Godot. Afterwards, you may want to look at :ref:`how to use "
"specific features <doc_c_sharp_features>`, read about the :ref:`differences "
"between the C# and the GDScript API <doc_c_sharp_differences>` and (re)visit "
"the :ref:`Scripting section <doc_scripting>` of the step-by-step tutorial."
msgstr ""
"이 페이지는 C#에 대한 간단한 소개와 그것이 무엇인지, 그리고 그것을 Godot에서 "
"사용하는 방법을 제공합니다. 그런 다음, :ref:`특정 기능을 사용하는 방법 "
"<doc_c_sharp_features>`\\ 을 원한다면, :ref:`C# 과 GDScript API의 차이점 "
"<doc_c_sharp_differences>`\\ 에 대해 읽고 단계별 튜토리얼의 :ref:`스크립팅 섹"
"션 <doc_scripting>`\\ 을 (다시) 확인하세요."

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_basics.rst:21
#, fuzzy
msgid ""
"C# is a high-level programming language developed by Microsoft. In Godot, it "
"is implemented with the Mono 6.x .NET framework, including full support for "
"C# 8.0. Mono is an open source implementation of Microsoft's .NET Framework "
"based on the ECMA standards for C# and the Common Language Runtime. A good "
"starting point for checking its capabilities is the `Compatibility <http://"
"www.mono-project.com/docs/about-mono/compatibility/>`_ page in the Mono "
"documentation."
msgstr ""
"C#은 하이 레벨 프로그래밍 언어로 Microsoft가 개발했습니다. Godot에서는 Mono "
"6.x .NET framework로 구현되었으며, C# 8.0을 완전 지원합니다. Mono는 Microsoft"
"의 .NET Framework의 오픈 소스로 C#을 위한 ECMA 표준과 Common Language Runtime"
"에 기반으로 구현되었습니다. 적합성을 확인하기 위한 좋은 출발점으로 Mono 문서"
"에 있는 `적합성<http://www.mono-project.com/docs/about-mono/compatibility/"
">`_ 페이지 입니다."

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_basics.rst:29
msgid ""
"This is **not** a full-scale tutorial on the C# language as a whole. If you "
"aren't already familiar with its syntax or features, see the `Microsoft C# "
"guide <https://docs.microsoft.com/en-us/dotnet/csharp/index>`_ or look for a "
"suitable introduction elsewhere."
msgstr ""
"이것은 전체적으로 C# 언어에 대한 본격적인 튜토리얼이 **아닙니다**. 문법이나 "
"기능에 익숙하지 않다면  `Microsoft C# 가이드 <https://docs.microsoft.com/en-"
"us/dotnet/csharp/index>`_\\ 를 보거나 다른 적합한 설명을 찾아보세요."

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_basics.rst:36
msgid "Setting up C# for Godot"
msgstr "Godot에 C# 설치하기"

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_basics.rst:41
msgid ""
"Download and install the latest version of `Visual Studio <https://"
"visualstudio.microsoft.com/downloads/>`_ (*not* Visual Studio Code), which "
"contains utilities required to use C# in Godot. If you don't plan on using "
"the Visual Studio IDE, you can download just the `Visual Studio Build Tools "
"<https://visualstudio.microsoft.com/thank-you-downloading-visual-studio/?"
"sku=BuildTools&rel=15>`_ instead. Make sure you at least have the .NET "
"Framework 4.5 targeting pack installed, you can get it using any of the "
"installers mentioned above inside the \"Individual components\" tab."
msgstr ""
"`Visual Studio <https://visualstudio.microsoft.com/downloads/>`_\\ 의 최신 버"
"전을 다운로드 하고 설치하세요 (Visual Studio Code *아닙니다*), 여기에는 Godot"
"에서 C#을 사용하기 위한 기능들이 있습니다. Visual Studio IDE를 사용할 계획이 "
"없다면, 대신 `Visual Studio Build Tools <https://visualstudio.microsoft.com/"
"thank-you-downloading-visual-studio/?sku=BuildTools&rel=15>`_\\ 를 다운로드 "
"할 수 있습니다. 최소한 설치 대상이 .NET Framework 4.5를 갖고 있어야 합니다, "
"앞에서 언급한 설치 프로그램를 보면 \"Individual components\" 탭 안에서 그것"
"을 얻을 수 있습니다."

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_basics.rst:51
msgid "macOS and Linux"
msgstr "macOS와 Linux"

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_basics.rst:53
msgid ""
"Download and install the latest version of the `Mono SDK <http://www.mono-"
"project.com/download/>`_. As of Godot 3.1 beta 3, the version number doesn't "
"matter since Godot bundles its own Mono 5.18 installation. We only need the "
"Mono installation for NuGet and MSBuild which are required to use C# in "
"Godot."
msgstr ""
"`Mono SDK <http://www.mono-project.com/download/>`_\\ 의 최신 버전을 다운로"
"드 하고 설치하세요. Godot 3.1 베타 3에서부터, Godot는 자체적인 Mono 5.18 설치"
"를 포함하므로 버전 숫자는 문제가 되지 않습니다. Godot에서 C#을 사용하기 위해 "
"필요한 것은 NuGet과 MSBuild 용 Mono 설치 뿐입니다."

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_basics.rst:59
msgid ""
"To download Mono on macOS, use the \"Stable Channel\" link from the `Mono "
"Downloads Page <http://www.mono-project.com/download/>`_. The Visual Studio "
"channel is an earlier version of Mono and will not work."
msgstr ""
"macOS에서 Mono를 다운로드 하기 위해, `Mono 다운로드 페이지 <http://www.mono-"
"project.com/download/>`_\\ 로 가서 \"Stable Channel\" 링크로 가세요. Visual "
"Studio 채널은 이전 버전의 Mono로 작동되지 않을 것입니다."

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_basics.rst:65
msgid "Additional notes"
msgstr "추가 정보"

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_basics.rst:67
msgid ""
"Your Godot version must have Mono support enabled, so make sure to download "
"the **Mono version** of Godot. If you are building Godot from source, make "
"sure to follow the steps to enable Mono support in your build as outlined in "
"the :ref:`doc_compiling_with_mono` page."
msgstr ""
"당신의 Godot 버전이 Mono를 지원해야 하는데, 그러기 위해 Godot의 **Mono 버전**"
"\\ 을 다운로드 해야 합니다. 소스에서 Godot를 빌드하는 경우, :ref:"
"`doc_compiling_with_mono` 페이지에서 설명하는 Mono 지원을 활성화 하는 순서를 "
"따라야 합니다."

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_basics.rst:73
msgid ""
"In summary, you must have installed Visual Studio or Mono (depending on your "
"operating system) **and** the Mono-enabled version of Godot."
msgstr ""
"요약하자면, Visual Studio나 Mono가 (운영체제에 맞게) 설치되어 있어야 하며 **"
"그리고** Mono를 사용할 수 있는 버전의 Godot이어야 합니다."

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_basics.rst:77
msgid "Configuring an external editor"
msgstr "외부 편집기 구성하기"

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_basics.rst:79
#, fuzzy
msgid ""
"C# support in Godot's script editor is minimal. Consider using an external "
"IDE or editor, such as  `Visual Studio Code <https://code.visualstudio.com/"
">`_ or MonoDevelop. These provide autocompletion, debugging, and other "
"useful features for C#. To select an external editor in Godot, click on "
"**Editor → Editor Settings** and scroll down to **Mono**. Under **Mono**, "
"click on **Editor**, and select your external editor of choice. Godot "
"currently supports the following external editors:"
msgstr ""
"Godot의 스크립트 편집기에서 C# 지원은 최소한입니다. `Visual Studio Code "
"<https://code.visualstudio.com/>`_\\ 나 MonoDevelop과 같은 외부 IDE나 편집기"
"를 사용하는 것을 고려해보세요. 이 둘은 자동 완성, 디버깅을 제공하며 C#으로 작"
"업하면서 쓰이는 유용한 기능이 있습니다. Godot에서 외부 편집기를 선택하려면, "
"**편집기 → 편집기 설정**\\ 으로 가서 **Mono**\\ 로 내려갑니다. **Mono**\\ 에"
"서 **Editor**\\ 를 클릭하면 외부 편집기를 선택하는 페이지가 나타납니다."

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_basics.rst:88
#, fuzzy
msgid "Visual Studio 2019"
msgstr "Visual Studio 2019"

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_basics.rst:90
msgid "MonoDevelop"
msgstr "MonoDevelop"

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_basics.rst:91
msgid "Visual Studio for Mac"
msgstr "Visual Studio for Mac"

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_basics.rst:94
#, fuzzy
msgid ""
"If you are using Visual Studio Code, ensure you download and install the `C# "
"extension <https://marketplace.visualstudio.com/items?itemName=ms-vscode."
"csharp>`_ to enable features like syntax highlighting and IntelliSense."
msgstr ""
"만약 Visual Studio Code를 사용하고 있다면, `C# 확장 프로그램<https://"
"marketplace.visualstudio.com/items?itemName=ms-vscode.csharp>`_\\ 을 설치하"
"여 문법 하이라이트 효과나 IntelliSense같은 기능을 사용 할 수 있습니다."

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_basics.rst:99
msgid ""
"If you are using Visual Studio 2019, you must follow the instructions found "
"in the \"Configure VS2019 for Debugging\" section below."
msgstr ""
"Visual Studio 2019를 사용하는 경우 아래 \"Configure VS2019 for Debugging\" 지"
"침을 따라야합니다."

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_basics.rst:103
msgid "Creating a C# script"
msgstr "C# 스크립트 만들기"

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_basics.rst:105
msgid ""
"After you successfully set up C# for Godot, you should see the following "
"option when selecting ``Attach script`` in the context menu of a node in "
"your scene:"
msgstr ""
"Godot를 위한 C# 설정이 성공적으로 마친 후, 씬의 노드 메뉴에서 ``스크립트 붙이"
"기``\\ 를 눌렀을 때, 다음 설정이 보여야 합니다:"

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_basics.rst:110
msgid ""
"Note that while some specifics change, most concepts work the same when "
"using C# for scripting. If you're new to Godot, you may want to follow the "
"tutorials on :ref:`doc_scripting` at this point. While some places in the "
"documentation still lack C# examples, most concepts can be transferred "
"easily from GDScript."
msgstr ""
"일부 세부 사항이 변경되는 동안, 대부분의 작업은 스크립팅을 C#으로 하는 것과 "
"동일합니다. Godot를 처음 접해보신다면, 이 시점에서 :ref:`doc_scripting` 튜토"
"리얼을 정독하시는 것이 좋습니다. 문서의 일부는 C# 예제가 부족하지만, 대부분"
"은 일찍이 GDScript에서 옮길 수 있습니다."

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_basics.rst:117
msgid "Project setup and workflow"
msgstr "프로젝트 설정과 작업 흐름"

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_basics.rst:119
msgid ""
"When you create the first C# script, Godot initializes the C# project files "
"for your Godot project. This includes generating a C# solution (``.sln``) "
"and a project file (``.csproj``), as well as some utility files and folders "
"(``.mono`` and ``Properties/AssemblyInfo.cs``). All of these but ``.mono`` "
"are important and should be committed to your version control system. ``."
"mono`` can be safely added to the ignore list of your VCS. When "
"troubleshooting, it can sometimes help to delete the ``.mono`` folder and "
"let it regenerate."
msgstr ""
"첫 C# 스크립트를 생성하면, Godot는 Godot 프로젝트를 위한 C# 프로젝트 파일을 "
"초기화합니다. 여기에는 C# 솔루션 (``.sin``)이나 프로젝트 파일 (``.csproj``) "
"뿐만 아니라, 일부 유용 파일과 폴더들 (``.mono``\\ 와 ``Properties/"
"AssemblyInfo.cs``)을 생성하는 것도 포함합니다. ``.mono``\\ 를 제외하고는 모"
"두 중요하므로 버전 관리 시스템에 유지해 두어야 합니다. ``.mono``\\ 는 버전 관"
"리 시스템의 무시 목록에 쉽게 추가할 수 있습니다. 문제를 해결할 때, ``.mono`` "
"폴더를 삭제하고 다시 만드는 것이 때로는 도움이 됩니다."

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_basics.rst:128
msgid ""
"Note that currently, there are some issues where Godot and the C# project "
"don't stay in sync; if you delete, rename or move a C# script, the change "
"may not be reflected in the C# project file. In cases like this, you will "
"have to edit the C# project file manually."
msgstr ""
"현재, Godot와 C# 프로젝트가 동기화되지 않는 문제가 있습니다; C# 스크립트를 삭"
"제, 이름 변경, 이동을 한다면, 변경사항이 C# 프로젝트 파일에 반영되지 않을지"
"도 모릅니다. 이 경우, 수동으로 C# 프로젝트 파일을 편집해야 할 것입니다."

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_basics.rst:133
msgid ""
"For example, if you created a script (e.g. ``Test.cs``) and delete it in "
"Godot, compilation will fail because the missing file is still expected to "
"be there by the C# project file. For now, you can simply open up the ``."
"csproj`` file and look for the ``ItemGroup``, there should be a line "
"included like the following:"
msgstr ""
"예를 들어 스크립트를 생성하고 (예: ``Test.cs``) Godot에서 삭제한다면,누락된 "
"파일이 C 프로젝트 파일에 남아있기 때문에 컴파일에 실패할 것입니다. 지금은, 단"
"순히 ``.csproj`` 파일을 열고 ``ItemGroup``\\ 을 볼수 있고, 다음과 같은 글이 "
"있어야 합니다:"

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_basics.rst:147
msgid ""
"Simply remove that line and your project should build correctly again. Same "
"for renaming and moving things, simply rename and move them in the project "
"file if needed."
msgstr ""
"단순히 이 줄을 삭제하면 프로젝트는 다시 올바르게 빌드됩니다. 이름 변경과 이동"
"도 이와 마찬가지로, 필요에 따라 이름을 바꾸고 프로젝트 파일로 옮깁니다."

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_basics.rst:152
#: ../../docs/tutorials/io/background_loading.rst:87
#: ../../docs/tutorials/misc/pausing_games.rst:80
msgid "Example"
msgstr "예제"

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_basics.rst:154
msgid ""
"Here's a blank C# script with some comments to demonstrate how it works."
msgstr ""
"여기 몇 가지 주석으로 작업이 이루어지는 방법을 설명하는 공백 C# 스크립트가 있"
"습니다."

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_basics.rst:181
msgid ""
"As you can see, functions normally in global scope in GDScript like Godot's "
"``print`` function are available in the ``GD`` class which is part of the "
"``Godot`` namespace. For a list of methods in the ``GD`` class, see the "
"class reference pages for :ref:`@GDScript <class_@gdscript>` and :ref:"
"`@GlobalScope <class_@globalscope>`."
msgstr ""
"보시다시피, Godot의 ``print`` 함수와 마찬가지로 GDScript에서 함수는 기본적으"
"로 전역 범위에 있기 때문에 ``Godot`` 네임스페이스의 일부분인 ``GD`` 클래스에"
"서 사용할 수 있습니다. ``GD`` 클래스에서의 메서드 목록을 보려면, :ref:"
"`@GDScript <class_@gdscript>`\\ 와 :ref:`@GlobalScope <class_@globalscope>`"
"\\ 에서 클래스 참조 페이지를 참고하세요."

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_basics.rst:188
#, fuzzy
msgid ""
"Keep in mind that the class you wish to attach to your node should have the "
"same name as the ``.cs`` file. Otherwise, you will get the following error "
"and won't be able to run the scene: *\"Cannot find class XXX for script "
"res://XXX.cs\"*"
msgstr ""
"노드에 붙이고 싶은 클래스 이름이 ``.cs`` 파일이어야 한다는 사실을 명심하세"
"요. 그렇지 않으면, 다음과 같은 오류를 받게 되며 씬을 실행할 수 없을 것입니"
"다: *\"스크립트 res://XXX.cs에서 클래스 XXX를 찾을 수 없음\"*"

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_basics.rst:194
msgid "General differences between C# and GDScript"
msgstr "C#과 GDScript와의 일반적인 차이"

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_basics.rst:196
msgid ""
"The C# API uses ``PascalCase`` instead of ``snake_case`` in GDScript/C++. "
"Where possible, fields and getters/setters have been converted to "
"properties. In general, the C# Godot API strives to be as idiomatic as is "
"reasonably possible."
msgstr ""
"GDScript/C++에서는 ``snake_case``\\ 를 쓰지만 C# API는 ``PascalCase``\\ 를 씁"
"니다. 가능하면 공백과 getters/setters이 속성으로 변환됩니다. 일반적으로 C# "
"Godot API는 합리적으로 가능한 것처럼 관용적이도록 노력합니다."

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_basics.rst:200
msgid "For more information, see the :ref:`doc_c_sharp_differences` page."
msgstr "더 자세한 내용은, :ref:`doc_c_sharp_differences` 페이지를 참고하세요."

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_basics.rst:203
msgid "Current gotchas and known issues"
msgstr "현재 문제와 알려진 문제"

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_basics.rst:205
msgid ""
"As C# support is quite new in Godot, there are some growing pains and things "
"that need to be ironed out. Below is a list of the most important issues you "
"should be aware of when diving into C# in Godot, but if in doubt, also take "
"a look over the official `issue tracker for Mono issues <https://github.com/"
"godotengine/godot/labels/topic%3Amono>`_."
msgstr ""
"C# 지원이 Godot에서 꽤 새롭기 때문에, 성장통이 있고 다듬어야 할 곳이 여전히 "
"있습니다. 아래에는 중요한 문제 목록으로 Godot에서 C#으로 갈아탈 때 명심해야 "
"합니다, 하지만 의심스러운 점이 있다면 공식 `Mono 이슈를 위한 이슈 트래커 "
"<https://github.com/godotengine/godot/labels/topic%3Amono>`_\\ 를 살펴보세요."

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_basics.rst:211
msgid ""
"As explained above, the C# project isn't always kept in sync automatically "
"when things are deleted, renamed or moved in Godot (`#12917 <https://github."
"com/godotengine/godot/issues/12917>`_)."
msgstr ""
"위에서 설명했듯이, C# 프로젝트가 Godot에서 삭제, 이름 변경, 이동을 할 때 항"
"상 동기화를 자동으로 하지는 않습니다 (`#12917 <https://github.com/"
"godotengine/godot/issues/12917>`_)."

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_basics.rst:214
msgid ""
"Writing editor plugins is possible, but it is currently quite convoluted."
msgstr ""
"편집기 플러그인을 작성하는 것은 가능하지만, 현재로썬 상당히 복잡합니다."

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_basics.rst:215
msgid ""
"State is currently not saved and restored when hot-reloading, with the "
"exception of exported variables."
msgstr ""
"내보낸 변수를 제외하고, 현재 상태는 핫 리로드 중일 때 저장되고 복원되지 않습"
"니다."

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_basics.rst:217
msgid ""
"Exporting Mono projects is only supported for desktop platforms (Linux, "
"Windows and macOS). Android, iOS, HTML5 and UWP are not currently supported "
"(`#20267 <https://github.com/godotengine/godot/issues/20267>`_, `#20268 "
"<https://github.com/godotengine/godot/issues/20268>`_ `#20270 <https://"
"github.com/godotengine/godot/issues/20270>`_ `#20271 <https://github.com/"
"godotengine/godot/issues/20271>`_)."
msgstr ""
"Mono 프로젝트를 내보내는 것은 데스크탑 플랫폼 (Linux, Windows, 그리고 macOS)"
"만 지원합니다. Android, iOS, HTML5 그리고 UWP는 현재는 지원하지 않습니다 "
"(`#20267 <https://github.com/godotengine/godot/issues/20267>`_, `#20268 "
"<https://github.com/godotengine/godot/issues/20268>`_ `#20270 <https://"
"github.com/godotengine/godot/issues/20270>`_ `#20271 <https://github.com/"
"godotengine/godot/issues/20271>`_)."

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_basics.rst:223
msgid ""
"Attached C# scripts should refer to a class that has a class name that "
"matches the file name."
msgstr ""
"첨부된 C# 스크립트가 파일 이름과 일치하는 클래스 이름을 가진 클래스를 참조해"
"야 합니다."

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_basics.rst:225
msgid ""
"There are some methods such as ``Get()``/``Set()``, ``Call()``/"
"``CallDeferred()`` and signal connection method ``Connect()`` that rely on "
"Godot's ``snake_case`` API naming conventions. So when using e.g. "
"``CallDeferred(\"AddChild\")``, ``AddChild`` will not work because the API "
"is expecting the original ``snake_case`` version ``add_child``. However, you "
"can use any custom properties or methods without this limitation."
msgstr ""
"Godot 의 ``snake_case\" API 명명 규칙에 의존하는 ``Get ()\"/\"Set()\" "
"\"Call()\"/\"CallDeferred()\"와\" 시그널 연결 메서드 ``Connect()\"와 같은 방"
"법이 있습니다. 그러므로 예를 들어 ``CallDeferred\"(\"AddChild\")를 사용할 때 "
"``AddChild\"는 API가 원래의 ``snake_case\" 버전의 ``add_child\"를 기대하기 때"
"문에 작동하지 않을 것입니다. 그러나 당신은 이러한 제한 없이 모든 맞춤 속성이"
"나 메서드를 사용할 수 있습니다."

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_basics.rst:233
msgid "Performance of C# in Godot"
msgstr "Godot에서 C#의 퍼포먼스"

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_basics.rst:235
msgid ""
"According to some preliminary `benchmarks <https://github.com/cart/godot3-"
"bunnymark>`_, the performance of C# in Godot — while generally in the same "
"order of magnitude — is roughly **~4×** that of GDScript in some naive "
"cases. C++ is still a little faster; the specifics are going to vary "
"according to your use case. GDScript is likely fast enough for most general "
"scripting workloads. C# is faster, but requires some expensive marshalling "
"when talking to Godot."
msgstr ""
"일부 예비  `벤치마크 <https://github.com/cart/godot3-bunnymark>`_\\ 에 따르"
"면, Godot에서 C#의 퍼포먼스는 — 일반적으로 같은 순서의 크기에서 — 순수한 경우"
"에서 대략 GDScript의 **~4x**\\ 입니다. C++이 아직 조금 더 빠릅니다; 하지만 세"
"부 사항은 사용하는 경우에 따라 다릅니다. GDScript는 대부분의 일반적인 스크립"
"팅 작업에 충분히 빠릅니다. C#이 더 빠르지만, Godot에 대화하려면 마샬링이 필요"
"합니다."

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_basics.rst:243
msgid "Using NuGet packages in Godot"
msgstr "Godot에서 NuGet 패키지 사용하기"

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_basics.rst:245
msgid ""
"`NuGet <https://www.nuget.org/>`_ packages can be installed and used with "
"Godot, as with any C# project. Many IDEs are able to add packages directly. "
"They can also be added manually by adding the package reference in the ``."
"csproj`` file located in the project root:"
msgstr ""
"`NuGet <https://www.nuget.org/>`_ 패키지를 설치하여 프로젝트처럼, Godot와 사"
"용할 수 있습니다. 많은 IDE는 직접 패키지를 추가할 수 있습니다. 또한 프로젝트 "
"루트에 있는 ``.csproj`` 파일에 패키지 참조를 수동으로 추가할 수 있습니다:"

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_basics.rst:262
msgid ""
"By default, tools like NuGet put ``Version`` as an attribute of the "
"```PackageReference``` Node. **You must manually create a Version node as "
"shown above.**  This is because the version of MSBuild used requires this. "
"(This will be fixed in Godot 4.0.)"
msgstr ""

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_basics.rst:264
#, fuzzy
msgid ""
"Whenever packages are added or modified, run ``nuget restore`` (*not* "
"``dotnet restore``) in the root of the project directory. To ensure that "
"NuGet packages will be available for msbuild to use, run:"
msgstr ""
"패키지가 추가되고 수정될 때마다, 프로젝트 디렉토리 루트에서 ``nuget restore``"
"\\ 를 실행하여, msbuild가 사용하고 실행하기 위한 NuGet 패키지를 이용할 수 있"
"도록 합니다:"

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_basics.rst:273
msgid "Profiling your C# code"
msgstr "C# 코드 프로파일링"

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_basics.rst:275
#, fuzzy
msgid ""
"`Mono log profiler <https://www.mono-project.com/docs/debug+profile/profile/"
"profiler/>`_ is available for Linux and macOS. Due to a Mono change, it does "
"not work on Windows currently."
msgstr ""
"`Mono 로그 프로파일러 <https://www.mono-project.com/docs/debug+profile/"
"profile/profiler/>`_ 를 지원합니다. `this PR <https://github.com/godotengine/"
"godot/pull/26513>`_."

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_basics.rst:276
msgid ""
"External Mono profiler like `JetBrains dotTrace <https://www.jetbrains.com/"
"profiler/>`_ can be used as described `here <https://github.com/godotengine/"
"godot/pull/34382>`_."
msgstr ""
"다른 Mono 프로파일러로는 `JetBrains dotTrace <https://www.jetbrains.com/"
"profiler/>`_ 을 사용 할 수 있습니다. 해당 설명 - `here <https://github.com/"
"godotengine/godot/pull/34382>`_."

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_basics.rst:279
msgid "Configuring VS 2019 for debugging"
msgstr "디버깅을 위한 VS 2019 구성"

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_basics.rst:283
msgid ""
"Godot has built-in support for workflows involving several popular C# IDEs. "
"Built-in support for Visual Studio will be including in future versions, but "
"in the meantime, the steps below can let you configure VS 2019 for use with "
"Godot C# projects."
msgstr ""
"Godot은 몇몇 인기 있는 C# IDE와 관련된 워크플로에 대한 기본 지원을 가지고 있"
"습니다. Visual Studio에 대한 내장 지원은 향후 버전에서 포함되지만, 그 동안 아"
"래 단계를 통해 Godot C# 프로젝트와 함께 사용할 VS 2019를 구성할 수 있습니다."

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_basics.rst:288
msgid ""
"Install VS 2019 with ``.NET desktop development`` and ``Desktop development "
"with C++`` workloads selected."
msgstr ""
"``.NET desktop development`` 및``Desktop development with C++``워크로드로 VS "
"2019를 설치하십시오."

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_basics.rst:289
msgid ""
"**Ensure that you do not have Xamarin installed.** Do not choose the "
"``Mobile development with .NET`` workload. Xamarin changes the DLLs used by "
"MonoDebugger, which breaks debugging."
msgstr ""
"**Xamarin 이 설치되지 않았는지 확인하십시오.** ``.NET을 사용한 모바일 개발`` "
"워크로드를 선택하지 마십시오. Xamarin은 MonoDebugger에서 사용하는 DLL을 변경"
"하여 디버깅을 중단합니다."

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_basics.rst:290
msgid ""
"Install the `VSMonoDebugger extension <https://marketplace.visualstudio.com/"
"items?itemName=GordianDotNet.VSMonoDebugger0d62>`_."
msgstr ""
"`VSMonoDebugger 확장 프로그램 <https://marketplace.visualstudio.com/items?"
"itemName=GordianDotNet.VSMonoDebugger0d62>`_를 설치하십시오."

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_basics.rst:291
msgid "In VS 2019 --> Extensions --> Mono --> Settings:"
msgstr ""

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_basics.rst:293
msgid "Select ``Debug/Deploy to local Windows``."
msgstr ""

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_basics.rst:294
msgid "Leave ``Local Deploy Path`` blank."
msgstr ""

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_basics.rst:295
msgid ""
"Set the ``Mono Debug Port`` to the port in Godot --> Project --> Project "
"Settings --> Mono --> Debugger Agent."
msgstr ""

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_basics.rst:296
msgid ""
"Also select ``Wait for Debugger`` in the Godot Mono options. `This Godot "
"Addon <https://godotengine.org/asset-library/asset/435>`_ may be helpful."
msgstr ""

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_basics.rst:298
msgid ""
"Run the game in Godot. It should hang at the Godot splash screen while it "
"waits for your debugger to attach."
msgstr ""

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_basics.rst:299
msgid ""
"In VS 2019, open your project and choose Extensions --> Mono --> Attach to "
"Mono Debugger."
msgstr ""

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_features.rst:4
msgid "Features"
msgstr "기능"

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_features.rst:6
msgid ""
"This page provides an overview of the commonly used features of both C# and "
"Godot and how they are used together."
msgstr ""
"이 페이지는 C#과 Godot에서 일반적으로 사용되는 기능과 어떻게 이 둘이 함께 사"
"용되는 지에 대한 개요입니다."

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_features.rst:12
msgid "Type conversion and casting"
msgstr "형 변환(Type conversion)과 캐스팅(casting)"

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_features.rst:14
msgid ""
"C# is a statically typed language. Therefore, you can't do the following:"
msgstr "C#은 정적으로 타입형 언어입니다. 그러므로 다음을 할 수 없습니다:"

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_features.rst:21
msgid ""
"The method ``GetNode()`` returns a ``Node`` instance. You must explicitly "
"convert it to the desired derived type, ``Sprite`` in this case."
msgstr ""
"``Node`` 인스턴스를 반환하는 ``GetNode()`` 메서드. ``Sprite``\\ 의 경우, 원하"
"는 파생 타입을 명시적으로 변환해야 합니다."

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_features.rst:24
msgid "For this, you have various options in C#."
msgstr "이를 위해, C#에서는 다양한 설정이 있습니다."

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_features.rst:26
msgid "**Casting and Type Checking**"
msgstr "**캐스트(Cast)와 타입 체크(Type Check)하기**"

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_features.rst:28
msgid ""
"Throws ``InvalidCastException`` if the returned node cannot be cast to "
"Sprite. You would use it instead of the ``as`` operator if you are pretty "
"sure it won't fail."
msgstr ""
"반환된 노드를 Sprite로 캐스트 할 수 없는 경우 ``InvalidCastException``\\ 을 "
"발생시킵니다. 실패하지 않는다고 확신하면 ``as`` 연산자 대신에 그것을 사용할 "
"것입니다."

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_features.rst:36
msgid "**Using the AS operator**"
msgstr "**AS 연산자 사용하기**"

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_features.rst:38
#, fuzzy
msgid ""
"The ``as`` operator returns ``null`` if the node cannot be cast to Sprite, "
"and for that reason, it cannot be used with value types."
msgstr ""
"노드가 Sprite를 캐스트 하지 않는다면 ``as`` 연산자는 null을 반환합니다, 그리"
"고 그 이유에서, 이것이 값 타입과 함께 사용될 수 없습니다."

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_features.rst:47
msgid "**Using the generic methods**"
msgstr "**일반 메서드 사용하기**"

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_features.rst:49
msgid ""
"Generic methods are also provided to make this type conversion transparent."
msgstr "일반 메서드는 이 타입 변환을 투명하게 만들기 위해 제공됩니다."

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_features.rst:51
msgid ""
"``GetNode<T>()`` casts the node before returning it. It will throw an "
"``InvalidCastException`` if the node cannot be cast to the desired type."
msgstr ""
"``GetNode<T>()``\\ 은 반환하기 전에 노드를 캐스트 합니다. 노드가 원하는 타입"
"으로 캐스트 되지 않는다면 ``InvalidCastException``\\ 을 발생시킵니다."

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_features.rst:58
msgid ""
"``GetNodeOrNull<T>()`` uses the ``as`` operator and will return ``null`` if "
"the node cannot be cast to the desired type."
msgstr ""
"``GetNodeOrNull<T>()``\\ 는 ``as`` 연산자를 사용하고 노드가 원하는 타입으로 "
"캐스트 되지 않는다면 ``null``\\ 을 반환합니다."

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_features.rst:66
msgid "**Type checking using the IS operator**"
msgstr "**IS 연산자를 사용하여 타입 체크하기**"

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_features.rst:68
msgid ""
"To check if the node can be cast to Sprite, you can use the ``is`` operator. "
"The ``is`` operator returns false if the node cannot be cast to Sprite, "
"otherwise it returns true."
msgstr ""
"노드가 Sprite로 캐스트 되도록 체크하기 위해, ``is`` 연산자를 사용할 수 있습니"
"다. Sprite가 캐스트 되지 않는다면 ``is`` 연산자는 거짓을 반환하고, 그렇지 않"
"으면 참을 반환합니다."

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_features.rst:79
msgid ""
"For more advanced type checking, you can look into `Pattern Matching "
"<https://docs.microsoft.com/en-us/dotnet/csharp/pattern-matching>`_."
msgstr ""
"더 많은 고급 타입 체크하기의 경우, `패턴 일치 <https://docs.microsoft.com/ko-"
"kr/dotnet/csharp/pattern-matching>`_\\ 에서 찾아볼 수 있습니다."

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_features.rst:84
msgid "C# signals"
msgstr "C# 시그널"

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_features.rst:86
msgid ""
"For a complete C# example, see the **Handling a signal** section in the step "
"by step :ref:`doc_scripting` tutorial."
msgstr ""
"완전한 C# 예제를 위해, 단계별 :ref:`doc_scripting` 튜토리얼에서 **시그널 다루"
"기**\\ 를 참고하세요."

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_features.rst:88
msgid ""
"Declaring a signal in C# is done with the ``[Signal]`` attribute on a "
"delegate."
msgstr ""
"C#에서 시그널 선언은 델리게이트(delegate)에서 ``[Signal]`` 속성으로 됩니다."

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_features.rst:98
msgid ""
"These signals can then be connected either in the editor or from code with "
"``Connect``. If you want to connect a signal in the editor, you need to "
"(re)build the project assemblies to see the new signal. This build can be "
"manually triggered by clicking the “Build” button at the top right corner of "
"the editor window."
msgstr ""

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_features.rst:119
msgid "Emitting signals is done with the ``EmitSignal`` method."
msgstr "``EmitSignal`` 메서드로 시그널을 방출할 수 있습니다."

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_features.rst:129
msgid ""
"Notice that you can always reference a signal name with the ``nameof`` "
"keyword (applied on the delegate itself)."
msgstr ""
"``nameof`` 키워드로 항상 시그널 이름을 참조할 수 있다는 것을 명심하세요 델리"
"게이트 자체에 적용됨)."

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_features.rst:131
msgid ""
"It is possible to bind values when establishing a connection by passing an "
"object array."
msgstr "객체 배열을 전달함으로써 연결을 지을 때 값들을 묶을 수 있습니다."

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_features.rst:151
msgid ""
"Signals support parameters and bound values of all the `built-in types "
"<https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/"
"built-in-types-table>`_ and Classes derived from :ref:`Godot.Object "
"<class_Object>`. Consequently, any ``Node`` or ``Reference`` will be "
"compatible automatically, but custom data objects will need to extend from "
"`Godot.Object` or one of its subclasses."
msgstr ""
"시그널은 매개변수를 지원하고, 모든 `내장 타입 <https://docs.microsoft.com/en-"
"us/dotnet/csharp/language-reference/keywords/built-in-types-table>`_\\ 의 값"
"들과 :ref:`Godot.Object <class_Object>`\\ 에서 파생된 클래스들을 묶습니다. 결"
"과적으로, 모든 ``Node``\\ 나 ``Reference``\\ 는 자동으로 호환될 것이지만, 맞"
"춤 데이터 객체는 `Godot.Object`\\ 나 그 하위 클래스에서 확장해야 할 것입니다."

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_features.rst:163
msgid ""
"Finally, signals can be created by calling ``AddUserSignal``, but be aware "
"that it should be executed before any use of said signals (with ``Connect`` "
"or ``EmitSignal``)."
msgstr ""
"마침내, 시그널은 ``AddUserSignal``\\ 로 호출하는 것으로 생성될 수 있지만, 시"
"그널을 사용하기 전에 실행되어야 한다는 것을 명심하세요 (``Connect``\\ 나 "
"``EmitSignal``\\ 로 말이죠)."

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_features.rst:174
#, fuzzy
msgid "Preprocessor defines"
msgstr "프로세싱(Processing)"

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_features.rst:176
msgid ""
"Godot has a set of defines that allow you to change your C# code depending "
"on the environment you are compiling to."
msgstr ""

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_features.rst:179
msgid ""
"If you created your project before Godot 3.2, you have to modify or "
"regenerate your `csproj` file to use this feature (compare "
"``<DefineConstants>`` with a new 3.2+ project)."
msgstr ""

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_features.rst:186
msgid "For example, you can change code based on the platform:"
msgstr ""

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_features.rst:203
msgid ""
"Or you can detect which engine your code is in, useful for making cross-"
"engine libraries:"
msgstr ""

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_features.rst:219
msgid "Full list of defines"
msgstr ""

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_features.rst:221
msgid "``GODOT`` is always defined for Godot projects."
msgstr ""

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_features.rst:223
msgid ""
"One of ``GODOT_64`` or ``GODOT_32`` is defined depending on if the "
"architecture is 64-bit or 32-bit."
msgstr ""

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_features.rst:225
msgid ""
"One of ``GODOT_X11``, ``GODOT_WINDOWS``, ``GODOT_OSX``, ``GODOT_ANDROID``, "
"``GODOT_HTML5``, or ``GODOT_SERVER`` depending on the OS. These names may "
"change in the future. These are created from the ``get_name()`` method of "
"the :ref:``OS <class_OS>`` singleton, but not every possible OS the method "
"returns is an OS that Godot with Mono runs on."
msgstr ""

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_features.rst:230
msgid ""
"When **exporting**, the following may also be defined depending on the "
"export features:"
msgstr ""

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_features.rst:232
msgid ""
"One of ``GODOT_PC``, ``GODOT_MOBILE``, or ``GODOT_WEB`` depending on the "
"platform type."
msgstr ""

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_features.rst:234
msgid ""
"One of ``GODOT_ARM64_V8A`` or ``GODOT_ARMEABI_V7A`` on Android only "
"depending on the architecture."
msgstr ""

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_features.rst:236
msgid ""
"One of ``GODOT_S3TC``, ``GODOT_ETC``, or ``GODOT_ETC2`` depending on the "
"texture compression type."
msgstr ""

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_features.rst:238
msgid ""
"Any custom features added in the export menu will be capitalized and "
"prefixed: ``foo`` -> ``GODOT_FOO``."
msgstr ""

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_differences.rst:4
msgid "API differences to GDScript"
msgstr "GDScript와의 API 차이점"

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_differences.rst:6
msgid "This is a (incomplete) list of API differences between C# and GDScript."
msgstr "이것은 C#과 GDScript간의 (불완전한) API 차이점 목록입니다."

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_differences.rst:9
msgid "General differences"
msgstr "일반적인 차이점"

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_differences.rst:11
msgid ""
"As explained in the :ref:`doc_c_sharp`, C# generally uses ``PascalCase`` "
"instead of the ``snake_case`` used in GDScript and C++."
msgstr ""
":ref:`doc_c_sharp`\\ 에서 설명했듯이, GDScript와 C++에서 ``snake_case``\\ 가 "
"사용되는 반면, C#은 ``PascalCase``\\ 를 사용합니다."

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_differences.rst:15
#: ../../docs/tutorials/threads/thread_safe_apis.rst:15
msgid "Global scope"
msgstr "전역 범위"

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_differences.rst:17
msgid ""
"Global functions and some constants had to be moved to classes, since C# "
"does not allow declaring them in namespaces. Most global constants were "
"moved to their own enums."
msgstr ""
"C#은 네임 스페이스에서 전역 함수와 일부 상수는 선언하지 않기 때문에 이 둘은 "
"클래스로 이동해야 합니다. 대부분의 전역 상수는 자신의 열거형으로 이동합니다."

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_differences.rst:24
msgid ""
"Global constants were moved to their own enums. For example, ``ERR_*`` "
"constants were moved to the ``Error`` enum."
msgstr ""
"전역 상수는 자신의 열거형으로 이동합니다. 예를 들어 ``ERR_*`` 상수는 "
"``Error`` 열거형으로 이동합니다."

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_differences.rst:27
msgid "Special cases:"
msgstr "특별한 경우:"

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_differences.rst:32
msgid "``SPKEY``"
msgstr "``SPKEY``"

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_differences.rst:32
msgid "``GD.SpKey``"
msgstr "``GD.SpKey``"

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_differences.rst:33
msgid "``TYPE_*``"
msgstr "``TYPE_*``"

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_differences.rst:33
msgid "``Variant.Type`` enum"
msgstr "``Variant.Type`` 열거형"

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_differences.rst:34
msgid "``OP_*``"
msgstr "``OP_*``"

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_differences.rst:34
msgid "``Variant.Operator`` enum"
msgstr "``Variant.Operator`` 열거형"

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_differences.rst:38
msgid "Math functions"
msgstr "수학 함수"

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_differences.rst:40
msgid ""
"Math global functions, like ``abs``, ``acos``, ``asin``, ``atan`` and "
"``atan2``, are located under ``Mathf`` as ``Abs``, ``Acos``, ``Asin``, "
"``Atan`` and ``Atan2``. The ``PI`` constant can be found as ``Mathf.Pi``."
msgstr ""
"``abs``, ``acos``, ``asin``, ``atan`` 그리고 ``atan2``\\ 와 같은 수학 전역 함"
"수는 ``Mathf``\\ 에 위치하며,  ``Abs``, ``Acos``, ``Asin``, ``Atan`` 그리고 "
"``Atan2``\\ 로 존재합니다. ``PI`` 상수는 ``Mathf.Pi``\\ 입니다."

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_differences.rst:45
msgid "Random functions"
msgstr "랜덤 함수"

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_differences.rst:47
msgid ""
"Random global functions, like ``rand_range`` and ``rand_seed``, are located "
"under ``GD``. Example: ``GD.RandRange`` and ``GD.RandSeed``."
msgstr ""
"``rand_range``\\ 와 ``rand_seed``\\ 와 같은 랜덤 전역 함수는 ``GD``\\ 에 위치"
"합니다. 예: ``GD.RandRange``\\ 와 ``GD.RandSeed``."

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_differences.rst:51
msgid "Other functions"
msgstr "기타 함수"

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_differences.rst:53
msgid ""
"Many other global functions like ``print`` and ``var2str`` are located under "
"``GD``. Example: ``GD.Print`` and ``GD.Var2Str``."
msgstr ""
"``print``\\ 와 ``var2str``\\ 와 같은 기타 다른 전역 함수는 ``GD``\\ 에 위치합"
"니다. 예: ``GD.Print``\\ 와 ``GD.Var2Str``."

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_differences.rst:56
msgid "Exceptions:"
msgstr "예외:"

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_differences.rst:61
msgid "``weakref(obj)``"
msgstr "``weakref(obj)``"

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_differences.rst:61
msgid "``Object.WeakRef(obj)``"
msgstr "``Object.WeakRef(obj)``"

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_differences.rst:62
msgid "``is_instance_valid(obj)``"
msgstr "``is_instance_valid(obj)``"

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_differences.rst:62
msgid "``Object.IsInstanceValid(obj)``"
msgstr "``Object.IsInstanceValid(obj)``"

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_differences.rst:66
msgid "Tips"
msgstr "팁"

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_differences.rst:68
msgid ""
"Sometimes it can be useful to use the ``using static`` directive. This "
"directive allows to access the members and nested types of a class without "
"specifying the class name."
msgstr ""
"때로는 ``using static`` 지시문을 사용하는 게 유용할 수 있습니다. 이 지시문이"
"면 클래스 이름을 지정하지 않고도 클래스의 멤버와 중첩된 타입에 접근할 수 있습"
"니다."

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_differences.rst:71
#: ../../docs/getting_started/scripting/c_sharp/c_sharp_differences.rst:92
#: ../../docs/getting_started/scripting/c_sharp/c_sharp_differences.rst:132
#: ../../docs/getting_started/scripting/c_sharp/c_sharp_differences.rst:143
#: ../../docs/getting_started/scripting/c_sharp/c_sharp_differences.rst:155
#: ../../docs/getting_started/scripting/c_sharp/c_sharp_differences.rst:313
#: ../../docs/tutorials/io/background_loading.rst:268
#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:90
#: ../../docs/tutorials/platform/services_for_ios.rst:205
#: ../../docs/tutorials/platform/services_for_ios.rst:252
#: ../../docs/community/contributing/code_style_guidelines.rst:150
msgid "Example:"
msgstr "예시:"

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_differences.rst:86
msgid "Export keyword"
msgstr "Export 키워드"

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_differences.rst:88
msgid ""
"Use the ``[Export]`` attribute instead of the GDScript ``export`` keyword. "
"This attribute can also be provided with optional :ref:"
"`PropertyHint<enum_@GlobalScope_PropertyHint>` and ``hintString`` "
"parameters. Default values can be set by assigning a value."
msgstr ""

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_differences.rst:114
msgid "Signal keyword"
msgstr "Signal 키워드"

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_differences.rst:116
msgid ""
"Use the ``[Signal]`` attribute to declare a signal instead of the GDScript "
"``signal`` keyword. This attribute should be used on a `delegate`, whose "
"name signature will be used to define the signal."
msgstr ""
"GDScript의 ``signal`` 키워드 대신 ``[Signal]`` 속성을 사용하여 시그널을 선언"
"합니다. 이 속성은 `delegate`\\ 에 사용되어야 하며, 이름은 시그널을 정의하는 "
"데 사용됩니다."

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_differences.rst:124
msgid "See also: :ref:`c_sharp_signals`"
msgstr "이것도 보세요: :ref:`c_sharp_signals`"

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_differences.rst:127
msgid "Singletons"
msgstr "Singletons"

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_differences.rst:129
msgid ""
"Singletons are available as static classes rather than using the singleton "
"pattern. This is to make code less verbose than it would be with an "
"``Instance`` property."
msgstr ""
"싱글톤은 싱글톤 패턴을 사용하는 대신 정적 클래스로 사용할 수 있습니다. 이것으"
"로 ``Instance`` 속성으로 작업하는 것과 비슷하면서도 더 적은 문장의 코드를 만"
"들 수 있습니다."

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_differences.rst:138
msgid ""
"However, in some very rare cases this is not enough. For example, you may "
"want to access a member from the base class ``Godot.Object``, like "
"``Connect``. For such use cases we provide a static property named "
"``Singleton`` that returns the singleton instance. The type of this instance "
"is ``Godot.Object``."
msgstr ""
"하지만, 일부 드문 경우가 있어 충분하지 않습니다. 예를 들어 ``Connect``\\ 처"
"럼 기본 클래스 ``Godot.Object``\\ 의 멤버로 접근해야하는 경우가 있습니다. 이"
"런 경우를 위해, 싱글톤 인스턴스를 반환하는 ``Singleton`` 정적 속성을 제공합니"
"다. 인스턴스의 타입은 ``Godot.Object``\\ 입니다."

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_differences.rst:150
#: ../../docs/tutorials/plugins/editor/import_plugins.rst:242
#: ../../docs/tutorials/plugins/editor/import_plugins.rst:248
#: ../../docs/development/cpp/core_types.rst:174
msgid "String"
msgstr "String"

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_differences.rst:152
msgid ""
"Use ``System.String`` (``string``). Most of Godot's String methods are "
"provided by the ``StringExtensions`` class as extension methods."
msgstr ""
"``System.String`` (``string``)을 사용합니다. 모든 Godot 문자열 메서드는 "
"``StringExtensions`` 클래스에서 확장 메서드 형태로 제공됩니다."

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_differences.rst:162
msgid "There are a few differences, though:"
msgstr "하지만 몇 가지 차이점은 있습니다:"

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_differences.rst:164
msgid ""
"``erase``: Strings are immutable in C#, so we cannot modify the string "
"passed to the extension method. For this reason, ``Erase`` was added as an "
"extension method of ``StringBuilder`` instead of string. Alternatively, you "
"can use ``string.Remove``."
msgstr ""
"``erase``: C#에서는 문자열이 변경되지 않아서 확장 메서드에 전달된 문자열을 수"
"정할 수 없습니다. 이런 이유로 ``Erase``\\ 는 문자열의 확장 메서드가 아닌, "
"``StringBuilder``\\ 의 확장 메서드 형태로 추가되었습니다. 이를 대체하기 위해 "
"``string.Remove``\\ 를 사용할 수 있습니다."

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_differences.rst:168
msgid ""
"``IsSubsequenceOf``/``IsSubsequenceOfi``: An additional method is provided, "
"which is an overload of ``IsSubsequenceOf``, allowing you to explicitly "
"specify case sensitivity:"
msgstr ""
"``IsSubsequenceOf``/``IsSubsequenceOfi``: ``IsSubsequenceOf``\\ 의 오버로드"
"(overload)인 추가 메서드를 제공하여, 명시적으로 대소문자를 구분할 수 있습니"
"다:"

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_differences.rst:179
msgid ""
"``Match``/``Matchn``/``ExprMatch``: An additional method is provided besides "
"``Match`` and ``Matchn``, which allows you to explicitly specify case "
"sensitivity:"
msgstr ""
"``Match``/``Matchn``/``ExprMatch``: ``Match``\\ 와 ``Matchn``\\ 이외에 추가 "
"메서드를 제공하여, 명시적으로 대소문자를 구분할 수 있습니다:"

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_differences.rst:190
msgid "Basis"
msgstr "Basis"

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_differences.rst:192
msgid ""
"Structs cannot have parameterless constructors in C#. Therefore, ``new "
"Basis()`` initializes all primitive members to their default value. Use "
"``Basis.Identity`` for the equivalent of ``Basis()`` in GDScript and C++."
msgstr ""
"C#에서 Struct은 매개변수 없는 생성자를 가질 수 없습니다. 따라서 ``new "
"Basis()``\\ 는 모든 기본 멤버를 기본 값으로 초기화합니다. GDScript와 C++에서 "
"``Basis()``\\ 에 해당하는 것으로 ``Basis.Identity``\\ 를 사용합니다."

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_differences.rst:196
#: ../../docs/getting_started/scripting/c_sharp/c_sharp_differences.rst:242
msgid "The following method was converted to a property with a different name:"
msgstr "다음 메서드들는 다른 이름으로 변경된 속성들입니다:"

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_differences.rst:201
#: ../../docs/getting_started/scripting/c_sharp/c_sharp_differences.rst:217
msgid "``get_scale()``"
msgstr "``get_scale()``"

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_differences.rst:201
#: ../../docs/getting_started/scripting/c_sharp/c_sharp_differences.rst:217
msgid "``Scale``"
msgstr "``Scale``"

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_differences.rst:205
msgid "Transform2D"
msgstr "Transform2D"

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_differences.rst:207
msgid ""
"Structs cannot have parameterless constructors in C#. Therefore, ``new "
"Transform2D()`` initializes all primitive members to their default value. "
"Please use ``Transform2D.Identity`` for the equivalent of ``Transform2D()`` "
"in GDScript and C++."
msgstr ""
"C#에서 Struct는 매개변수 없는 생성자를 가질 수 없습니다. 따라서, ``new "
"Transform2D()``\\ 는 모든 기본 멤버를 기본 값으로 초기화합니다. GDScript와 C+"
"+에서 ``Transform2D()``\\ 에 해당하는 것으로 ``Transform2D.Identity``\\ 를 사"
"용해주세요."

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_differences.rst:211
msgid ""
"The following methods were converted to properties with their respective "
"names changed:"
msgstr "다음 메서드들은 관련된 이름으로 변경된 속성들입니다:"

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_differences.rst:216
msgid "``get_rotation()``"
msgstr "``get_rotation()``"

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_differences.rst:216
msgid "``Rotation``"
msgstr "``Rotation``"

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_differences.rst:221
msgid "Plane"
msgstr "Plane"

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_differences.rst:223
msgid ""
"The following method was converted to a property with a *slightly* different "
"name:"
msgstr "다음 메서드는 *약간* 다른 이름으로 변경된 속성입니다:"

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_differences.rst:228
msgid "``center()``"
msgstr "``center()``"

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_differences.rst:228
msgid "``Center``"
msgstr "``Center``"

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_differences.rst:232
msgid "Rect2"
msgstr "Rect2"

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_differences.rst:234
msgid ""
"The following field was converted to a property with a *slightly* different "
"name:"
msgstr "다음 영역은 *약간* 다른 이름으로 변경된 속성입니다:"

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_differences.rst:239
msgid "``end``"
msgstr "``end``"

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_differences.rst:239
msgid "``End``"
msgstr "``End``"

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_differences.rst:247
msgid "``get_area()``"
msgstr "``get_area()``"

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_differences.rst:247
msgid "``Area``"
msgstr "``Area``"

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_differences.rst:251
msgid "Quat"
msgstr "Quat"

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_differences.rst:253
msgid ""
"Structs cannot have parameterless constructors in C#. Therefore, ``new "
"Quat()`` initializes all primitive members to their default value. Please "
"use ``Quat.Identity`` for the equivalent of ``Quat()`` in GDScript and C++."
msgstr ""
"C#에서 Struct는 매개변수 없는 생성자를 가질 수 없습니다. 따라서, ``new "
"Quat()``\\ 는 모든 기본 멤버를 기본 값으로 초기화합니다. GDScript와 C++에서 "
"``Quat()``\\ 에 해당하는 것으로 ``Quat.Identity``\\ 를 사용해주세요."

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_differences.rst:257
msgid ""
"The following methods were converted to a property with a different name:"
msgstr "다음 메서드는 다른 이름으로 변경된 속성들입니다:"

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_differences.rst:262
msgid "``length()``"
msgstr "``length()``"

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_differences.rst:262
msgid "``Length``"
msgstr "``Length``"

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_differences.rst:263
msgid "``length_squared()``"
msgstr "``length_squared()``"

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_differences.rst:263
msgid "``LengthSquared``"
msgstr "``LengthSquared``"

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_differences.rst:269
msgid ""
"*This is temporary. PoolArrays will need their own types to be used the way "
"they are meant to.*"
msgstr ""
"*이것은 일시적인 것입니다. PoolArray도 자신을 의미하는 자체적인 타입이 필요"
"할 것입니다.*"

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_differences.rst:274
msgid "``Array``"
msgstr "``Array``"

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_differences.rst:274
#, fuzzy
msgid "``Godot.Collections.Array``"
msgstr "``Godot.Array``"

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_differences.rst:275
msgid "``PoolIntArray``"
msgstr "``PoolIntArray``"

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_differences.rst:275
msgid "``int[]``"
msgstr "``int[]``"

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_differences.rst:276
msgid "``PoolByteArray``"
msgstr "``PoolByteArray``"

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_differences.rst:276
msgid "``byte[]``"
msgstr "``byte[]``"

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_differences.rst:277
msgid "``PoolFloatArray``"
msgstr "``PoolFloatArray``"

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_differences.rst:277
msgid "``float[]``"
msgstr "``float[]``"

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_differences.rst:278
msgid "``PoolStringArray``"
msgstr "``PoolStringArray``"

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_differences.rst:278
msgid "``String[]``"
msgstr "``String[]``"

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_differences.rst:279
msgid "``PoolColorArray``"
msgstr "``PoolColorArray``"

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_differences.rst:279
msgid "``Color[]``"
msgstr "``Color[]``"

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_differences.rst:280
msgid "``PoolVector2Array``"
msgstr "``PoolVector2Array``"

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_differences.rst:280
msgid "``Vector2[]``"
msgstr "``Vector2[]``"

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_differences.rst:281
msgid "``PoolVector3Array``"
msgstr "``PoolVector3Array``"

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_differences.rst:281
msgid "``Vector3[]``"
msgstr "``Vector3[]``"

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_differences.rst:284
#, fuzzy
msgid ""
"``Godot.Collections.Array<T>`` is a type-safe wrapper around ``Godot."
"Collections.Array``. Use the ``Godot.Collections.Array<T>(Godot.Collections."
"Array)`` constructor to create one."
msgstr ""
"``Godot.Array<T>``\\ 는 ``Godot.Array``\\ 를 둘러싸는 타입 안전 포장지입니"
"다. 만들기 위해 ``Godot.Array<T>(Godot.Array)`` 생성자를 사용합니다."

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_differences.rst:290
#, fuzzy
msgid "Use ``Godot.Collections.Dictionary``."
msgstr "``Godot.Dictionary``\\ 를 사용합니다."

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_differences.rst:292
#, fuzzy
msgid ""
"``Godot.Collections.Dictionary<T>`` is a type-safe wrapper around ``Godot."
"Collections.Dictionary``. Use the ``Godot.Collections.Dictionary<T>(Godot."
"Collections.Dictionary)`` constructor to create one."
msgstr ""
"``Godot.Dictionary<T>``\\ 는 ``Godot.Dictionary``\\ 를 둘러싸는 타입 안전 포"
"장지입니다. 만들기 위해 ``Godot.Dictionary<T>(Godot.Dictionary)`` 생성자를 사"
"용합니다."

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_differences.rst:296
msgid "Variant"
msgstr "Variant"

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_differences.rst:298
msgid "``System.Object`` (``object``) is used instead of ``Variant``."
msgstr "``Variant`` 대신 ``System.Object`` (``object``)를 사용하세요."

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_differences.rst:301
msgid "Communicating with other scripting languages"
msgstr "다른 스크립팅 언어와 소통하기"

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_differences.rst:303
msgid "This is explained extensively in :ref:`doc_cross_language_scripting`."
msgstr ""
"이것은 : ref :`doc_cross_language_scripting`에 광범위하게 설명되어 있습니다."

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_differences.rst:308
msgid ""
"Something similar to GDScript's ``yield`` with a single parameter can be "
"achieved with C#'s `yield keyword <https://docs.microsoft.com/en-US/dotnet/"
"csharp/language-reference/keywords/yield>`_."
msgstr ""
"단일 매개변수를 사용하는 GDScript의 ``yield``\\ 와 비슷한 C#의 `yield 키워드 "
"<https://docs.microsoft.com/ko/dotnet/csharp/language-reference/keywords/"
"yield>`_."

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_differences.rst:311
msgid ""
"The equivalent of yield on signal can be achieved with async/await and "
"``Godot.Object.ToSignal``."
msgstr ""
"async/await와 ``Godot.Object.ToSignal``\\로 시그널에서 yield와 동일한 효과를 "
"얻을 수 있습니다."

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_differences.rst:321
msgid "Other differences"
msgstr "다른 차이점"

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_differences.rst:323
msgid ""
"``preload``, as it works in GDScript, is not available in C#. Use ``GD."
"Load`` or ``ResourceLoader.Load`` instead."
msgstr ""
"GDScript에서 쓰이는 ``preload``\\ 는 C#에서 사용할 수 없습니다. 대신 ``GD."
"Load`` 또는 ``ResourceLoader.Load``\\ 를 사용합니다."

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_differences.rst:326
msgid "Other differences:"
msgstr "다른 차이점:"

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_differences.rst:331
msgid "``Color8``"
msgstr "``Color8``"

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_differences.rst:331
msgid "``Color.Color8``"
msgstr "``Color.Color8``"

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_differences.rst:332
msgid "``is_inf``"
msgstr "``is_inf``"

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_differences.rst:332
msgid "``float.IsInfinity``"
msgstr "``float.IsInfinity``"

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_differences.rst:333
msgid "``is_nan``"
msgstr "``is_nan``"

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_differences.rst:333
msgid "``float.IsNaN``"
msgstr "``float.IsNaN``"

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_differences.rst:334
msgid "``dict2inst``"
msgstr "``dict2inst``"

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_differences.rst:334
#: ../../docs/getting_started/scripting/c_sharp/c_sharp_differences.rst:335
msgid "TODO"
msgstr "TODO"

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_differences.rst:335
msgid "``inst2dict``"
msgstr "``inst2dict``"

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_style_guide.rst:4
msgid "C# style guide"
msgstr "C# 스타일 가이드"

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_style_guide.rst:6
msgid ""
"Having well-defined and consistent coding conventions is important for every "
"project, and Godot is no exception to this rule."
msgstr ""
"잘 정의되고 일관된 코딩 규칙을 정하는 것은 모든 프로젝트에 중요하며 Godot도 "
"마찬가지입니다."

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_style_guide.rst:9
msgid ""
"This page contains a coding style guide, which is followed by developers of "
"and contributors to Godot itself. As such, it is mainly intended for those "
"who want to contribute to the project, but since the conventions and "
"guidelines mentioned in this article are those most widely adopted by the "
"users of the language, we encourage you to do the same, especially if you do "
"not have such a guide yet."
msgstr ""
"이 페이지는 코딩 스타일 가이드로, Godot의 개발자나 기여자들이 지켜야 하는 문"
"서들입니다. 따라서 이 문서는 주로 프로젝트에 기여하는 사람들이 대상이지만, 여"
"기에서 말하는 규칙이나 가이드 라인은 프로그래밍 언어 사용자들에 의해 가장 널"
"리 채택된 것이고 우리는 이를 따라가길 권장합니다, 특히 이러한 가이드를 아직 "
"찾지 못했다면 말이죠."

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_style_guide.rst:14
msgid ""
"This article is by no means an exhaustive guide on how to follow the "
"standard coding conventions or best practices. If you feel unsure of an "
"aspect which is not covered here, please refer to more comprehensive "
"documentation, such as `C# Coding Conventions <https://docs.microsoft.com/en-"
"us/dotnet/csharp/programming-guide/inside-a-program/coding-conventions>`_ or "
"`Framework Design Guidelines <https://docs.microsoft.com/en-us/dotnet/"
"standard/design-guidelines/naming-guidelines>`_."
msgstr ""
"이 문서는 표준 코딩 규칙이나 최고의 방법에 관한 포괄적인 가이드가 아닙니다. "
"혹시 다루지 않은 불확실한 면이 있다면, `C# 코딩 규칙 <https://docs.microsoft."
"com/ko-kr/dotnet/csharp/programming-guide/inside-a-program/coding-"
"conventions>`_ \\ 이나 `명명 지침 <https://docs.microsoft.com/ko-kr/dotnet/"
"standard/design-guidelines/naming-guidelines>`_\\ 에서 더 포괄적인 문서를 참"
"고하세요."

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_style_guide.rst:21
msgid "Language specification"
msgstr "언어 사양"

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_style_guide.rst:23
#, fuzzy
msgid ""
"Godot currently uses **C# version 7.0** in its engine and example source "
"code. So, before we move to a newer version, care must be taken to avoid "
"mixing language features only available in C# 7.1 or later."
msgstr ""
"현재로썬 Godot는 엔진과 예제 소스 코드로 C# 6.0 버전을 사용합니다. 그러므로 "
"신규 버전으로 옮기기 전까지는 C# 7.0이나 그 이상에서만 사용할 수 있는 언어 기"
"능이 섞이는 지 주의하세요, 패턴 매칭이나 get/set 접근자 내 표현 바디 멤버와 "
"같은 것이 있습니다."

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_style_guide.rst:27
msgid ""
"For detailed information on C# features in different versions, please see "
"`What's New in C# <https://docs.microsoft.com/en-us/dotnet/csharp/whats-new/"
">`_."
msgstr ""
"다른 버전에서 C# 기능에 대한 더 자세한 정보는 `C#의 새로운 기능<https://docs."
"microsoft.com/ko-kr/dotnet/csharp/whats-new/>`_\\ 을 참고하세요."

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_style_guide.rst:34
#, fuzzy
msgid "General guidelines"
msgstr "일반적인 차이점"

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_style_guide.rst:36
#, fuzzy
msgid "Use line feed (**LF**) characters to break lines, not CRLF or CR."
msgstr ""
"새로운 파일을 생성하면, 줄 바꿈을 위해 라인피드 (*LF*) 문자를 사용하는 것을 "
"염두하세요, *CRLF*\\ 이나 *CR*\\ 이 아닙니다."

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_style_guide.rst:37
#, fuzzy
msgid ""
"Use one line feed character at the end of each file, except for `csproj` "
"files."
msgstr ""
"`csproj` 파일을 제외하고 각 파일의 끝에 한 줄 바꿈 문자를 사용하십시오."

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_style_guide.rst:38
#, fuzzy
msgid ""
"Use **UTF-8** encoding without a `byte order mark <https://en.wikipedia.org/"
"wiki/Byte_order_mark>`_."
msgstr ""
"바이트 순서 표식 (`BOM <https://ko.wikipedia.org/wiki/바이트_순서_표식>`_)없"
"이 UTF-8 인코딩을 사용합니다."

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_style_guide.rst:39
#, fuzzy
msgid ""
"Use **4 spaces** instead of tabs for indentation (which is referred to as "
"\"soft tabs\")."
msgstr ""
"들여 쓰기를 위해 탭 대신 4개의 스페이스를 사용합니다 ('소프트 탭'\\ 이라고 "
"함)."

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_style_guide.rst:40
#, fuzzy
msgid ""
"Consider breaking a line into several if it's longer than 100 characters."
msgstr "100자를 초과하는 경우 한 줄을 여러 줄로 나누는것을 고려하세요."

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_style_guide.rst:44
msgid "Line breaks and blank lines"
msgstr "줄 바꿈 및 공백 줄"

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_style_guide.rst:46
#, fuzzy
msgid ""
"For a general indentation rule, follow `the \"Allman Style\" <https://en."
"wikipedia.org/wiki/Indentation_style#Allman_style>`_ which recommends "
"placing the brace associated with a control statement on the next line, "
"indented to the same level:"
msgstr ""
"일반적인 들여쓰기 규칙으로, `The 'Allman Style' <https://en.wikipedia.org/"
"wiki/Indentation_style#Allman_style>`_\\ 에 따라 제어문과 관련된 중괄호를 다"
"음 줄에 놓으면서, 같은 높이의 들여쓰기를 하기를 권장합니다:"

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_style_guide.rst:63
msgid "However, you may choose to omit line breaks inside brackets:"
msgstr "그러나, 중괄호 안에 줄 바꿈을 생략할 수 있습니다:"

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_style_guide.rst:65
msgid "For simple property accessors."
msgstr "간단한 속성 접근자를 위해."

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_style_guide.rst:66
msgid "For simple object, array, or collection initializers."
msgstr "간단한 객체, 배열, 혹은 컬렉션 이니셜라이저를 위해."

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_style_guide.rst:67
msgid "For abstract auto property, indexer, or event declarations."
msgstr "추상적 auto 속성, 인덱서, 혹은 이벤트 선언을 위해."

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_style_guide.rst:89
msgid "Insert a blank line:"
msgstr "다음 경우에 공백 줄을 넣습니다:"

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_style_guide.rst:91
#, fuzzy
msgid "After a list of ``using`` statements."
msgstr "명령문 목록을 *사용한* 후."

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_style_guide.rst:92
msgid "Between method, properties, and inner type declarations."
msgstr "메서드, 속성, 그리고 내부 타입 선언 사이."

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_style_guide.rst:93
#, fuzzy
msgid "At the end of each file."
msgstr "각 파일의 끝에."

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_style_guide.rst:95
msgid ""
"Field and constant declarations can be grouped together according to "
"relevance. In that case, consider inserting a blank line between the groups "
"for easier reading."
msgstr ""
"공백과 상수 선언은 관련성에 따라 함께 묶을 수 있습니다. 이 경우, 가독성을 위"
"해, 묶음 사이에 공백 줄을 넣는 것을 고려해볼 수 있습니다."

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_style_guide.rst:98
msgid "Avoid inserting a blank line:"
msgstr "다음 경우에 공백 줄을 삽입하는 것을 피하세요:"

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_style_guide.rst:100
msgid "After ``{``, the opening brace."
msgstr "``{``, 괄호 열기 이후."

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_style_guide.rst:101
msgid "Before ``}``, the closing brace."
msgstr "``}``, 괄호 닫기 이전."

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_style_guide.rst:102
#, fuzzy
msgid "After a comment block or a single-line comment."
msgstr "커맨드 블록이나, 한 줄 짜리 주석 이후."

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_style_guide.rst:103
msgid "Adjacent to another blank line."
msgstr "다른 공백 줄과 인접한 경우."

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_style_guide.rst:142
msgid "Using spaces"
msgstr "공백 사용하기"

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_style_guide.rst:144
msgid "Insert a space:"
msgstr "다음 경우에 공백을 넣습니다:"

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_style_guide.rst:146
msgid "Around a binary and tertiary operator."
msgstr "이진 및 삼항 연산자 주변."

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_style_guide.rst:147
#, fuzzy
msgid ""
"Between an opening parenthesis and ``if``, ``for``, ``foreach``, ``catch``, "
"``while``, ``lock`` or ``using`` keywords."
msgstr ""
"괄호 열기와 *if*, *for*, *foreach*, *catch*, *while*, *lock* 혹은 *using* 키"
"워드 사이."

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_style_guide.rst:148
msgid "Before and within a single line accessor block."
msgstr "한 줄 접근자 블록 전이나 앞."

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_style_guide.rst:149
msgid "Between accessors in a single line accessor block."
msgstr "한 줄 접근자 블록에서 접근자들 사이."

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_style_guide.rst:150
#, fuzzy
msgid "After a comma which is not at the end of a line."
msgstr "줄의 맨 끝에 있지 않는 쉼표 뒤에."

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_style_guide.rst:151
#, fuzzy
msgid "After a semicolon in a ``for`` statement."
msgstr "*for* 명령문에서 세미콜론 이후."

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_style_guide.rst:152
#, fuzzy
msgid "After a colon in a single line ``case`` statement."
msgstr "한 줄 *case* 명령문에서 콜론 이후."

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_style_guide.rst:153
msgid "Around a colon in a type declaration."
msgstr "타입 선언에서 콜론 주변."

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_style_guide.rst:154
msgid "Around a lambda arrow."
msgstr "Lambda arrow(람다 화살표) 주변."

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_style_guide.rst:155
#, fuzzy
msgid ""
"After a single-line comment symbol (``//``), and before it if used at the "
"end of a line."
msgstr "한 줄 주석 상징 ('//')이후, 그리고 문장의 끝에서 쓰일 때는 이전."

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_style_guide.rst:157
msgid "Do not use a space:"
msgstr "공백을 사용하지 마세요:"

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_style_guide.rst:159
msgid "After type cast parentheses."
msgstr "타입 캐스트 괄호 이후."

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_style_guide.rst:160
msgid "Within single line initializer braces."
msgstr "한 줄 이니셜라이저 중괄호 안."

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_style_guide.rst:162
msgid ""
"The following example shows a proper use of spaces, according to some of the "
"above mentioned conventions:"
msgstr "다음 예제는 위에서 언급한 규칙에 따라 적절한 공백의 사용을 보여줍니다:"

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_style_guide.rst:199
#, fuzzy
msgid ""
"Use **PascalCase** for all namespaces, type names and member level "
"identifiers (i.e. methods, properties, constants, events), except for "
"private fields:"
msgstr ""
"private 영역을 제외한 모든 네임스페이스, 즉 타입 이름과 멤버 레벨 식별자 "
"(예: 메서드, 속성, 상수, 이벤트)에 *PascalCase*\\ 를 사용합니다:"

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_style_guide.rst:220
#, fuzzy
msgid ""
"Use **camelCase** for all other identifiers (i.e. local variables, method "
"arguments), and use an underscore (``_``) as a prefix for private fields "
"(but not for methods or properties, as explained above):"
msgstr ""
"모든 다른 식별자 (예: 지역 변수, 메서드 인수)에 *camelCase*\\ 를 사용하고, "
"private 영역의 접두사로 밑줄('_')을 사용합니다 (하지만 위에서 설명했듯이, 메"
"서드나 속성은 아닙니다):"

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_style_guide.rst:234
#, fuzzy
msgid ""
"There's an exception with acronyms which consist of two letters, like "
"``UI``, which should be written in uppercase letters where PascalCase would "
"be expected, and in lowercase letters otherwise."
msgstr ""
"두 글자로 구성된 약자는 예외입니다, *'UI'*\\ 같은 것으로, Pascal case가 쓰이"
"는 곳이면 대문자로 써야하고, 그렇지 않다면 소문자를 써야합니다."

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_style_guide.rst:237
#, fuzzy
msgid ""
"Note that ``id`` is **not** an acronym, so it should be treated as a normal "
"identifier:"
msgstr ""
"*'id'*\\ 는 약자가 **아닙니다**, 따라서 일반적인 식별자로 취급해야 합니다:"

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_style_guide.rst:248
#, fuzzy
msgid ""
"It is generally discouraged to use a type name as a prefix of an identifier, "
"like ``string strText`` or ``float fPower``, for example. An exception is "
"made, however, for interfaces, which **should**, in fact, have an uppercase "
"letter ``I`` prefixed to their names, like ``IInventoryHolder`` or "
"``IDamageable``."
msgstr ""
"일반적으로 타입 이름을 식별자의 접두사로 사용하는 것은 바람직하지 않습니다, "
"예를 들면  *'string strText'*\\ 나 *'float fPower'*\\ 가 있죠. 하지만 예외로 "
"인터페이스에서, **반드시** 이름의 접두어 대문자 *'I'*\\ 를 갖는 것이 있습니"
"다, *'IInventoryHolder'*\\ 나 *'IDamageable'*\\ 이 있죠."

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_style_guide.rst:252
msgid ""
"Lastly, consider choosing descriptive names and do not try to shorten them "
"too much if it affects readability."
msgstr ""
"마지막으로 서술적인 이름을 고르는 것은 생각하되 너무 축약해서 가독성에 해를 "
"끼치게 해서는 안됩니다."

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_style_guide.rst:255
#, fuzzy
msgid ""
"For instance, if you want to write code to find a nearby enemy and hit it "
"with a weapon, prefer:"
msgstr ""
"예를 들어, 근처의 적을 찾고 무기로 공격하는 코드를 짜고 싶다면 이렇게 하는 "
"게 좋습니다"

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_style_guide.rst:261
#, fuzzy
msgid "Rather than:"
msgstr "이것보다는 말이죠,"

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_style_guide.rst:268
msgid "Implicitly typed local variables"
msgstr "암시적 형식 지역 변수"

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_style_guide.rst:270
#, fuzzy
msgid ""
"Consider using implicitly typing (``var``) for declaration of a local "
"variable, but do so **only when the type is evident** from the right side of "
"the assignment:"
msgstr ""
"지역 변수의 선언을 위해 암시적 형식 (*'var'*)를 사용하는 것을 생각해보세요, "
"하지만 할당의 오른쪽에서 **타입이 분명할 때만** 해야합니다:"

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_style_guide.rst:300
msgid "Other considerations"
msgstr "기타 고려 사항"

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_style_guide.rst:302
msgid "Use explicit access modifiers."
msgstr "명시적 접근 모디파이어를 사용하세요."

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_style_guide.rst:303
msgid "Use properties instead of non-private fields."
msgstr "비공개 영역 대신 속성을 사용하세요."

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_style_guide.rst:304
#, fuzzy
msgid ""
"Use modifiers in this order: ``public``/``protected``/``private``/"
"``internal``/``virtual``/``override``/``abstract``/``new``/``static``/"
"``readonly``."
msgstr ""
"이 순서로 모디파이어를 사용하세요: *'public/protected/private/internal "
"virtual/override/abstract/new static readonly'*."

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_style_guide.rst:306
#, fuzzy
msgid ""
"Avoid using fully-qualified names or ``this.`` prefix for members when it's "
"not necessary."
msgstr ""
"꼭 필요하지 않다면 완전한 이름이나 멤버에게 *'this.'* 접두사를 사용하지 마세"
"요."

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_style_guide.rst:307
#, fuzzy
msgid "Remove unused ``using`` statements and unnecessary parentheses."
msgstr "사용하지 않는 *'using'* 명령문과 불필요한 괄호는 지우세요."

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_style_guide.rst:308
#, fuzzy
msgid "Consider omitting the default initial value for a type."
msgstr "한 타입에 대한 기본 초기 값을 생략하는 것을 고려하세요."

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_style_guide.rst:309
msgid ""
"Consider using null-conditional operators or type initializers to make the "
"code more compact."
msgstr ""
"코드를 더 간결하게 만들기 위해 null 조건의 연산자나 타입 이니셜라이저를 사용"
"하는 것을 고려해보세요."

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_style_guide.rst:310
msgid ""
"Use safe cast when there is a possibility of the value being a different "
"type, and use direct cast otherwise."
msgstr ""
"값이 다른 타입의 가능성이 있을 때 안전한 캐스트를 사용하고, 그렇지 않으면 직"
"접 캐스트를 사용하세요."

#: ../../docs/getting_started/scripting/cross_language_scripting.rst:4
#, fuzzy
msgid "Cross-language scripting"
msgstr "스크립트 생성하기"

#: ../../docs/getting_started/scripting/cross_language_scripting.rst:6
msgid ""
"Godot allows you to mix and match scripting languages to suit your needs. "
"This means a single project can define nodes in both C# and GDScript. This "
"page will go through the possible interactions between two nodes writen in "
"different languages."
msgstr ""

#: ../../docs/getting_started/scripting/cross_language_scripting.rst:11
msgid ""
"The following two scripts will be used as references throughout this page."
msgstr ""

#: ../../docs/getting_started/scripting/cross_language_scripting.rst:66
#, fuzzy
msgid "Instantiating nodes"
msgstr "씬 인스턴스하기"

#: ../../docs/getting_started/scripting/cross_language_scripting.rst:68
msgid ""
"If you're not using nodes from the scene tree, you'll probably want to "
"instantiate nodes directly from the code."
msgstr ""

#: ../../docs/getting_started/scripting/cross_language_scripting.rst:72
#, fuzzy
msgid "Instantiating C# nodes from GDScript"
msgstr "GDScript에서 사용법"

#: ../../docs/getting_started/scripting/cross_language_scripting.rst:74
msgid ""
"Using C# from GDScript doesn't need much work. Once loaded (see :ref:"
"`doc_gdscript_classes_as_resources`) the script can be instantiated with :"
"ref:`new() <class_CSharpScript_method_new>`."
msgstr ""

#: ../../docs/getting_started/scripting/cross_language_scripting.rst:86
msgid ""
"When creating .cs scripts you should always keep in mind that the class "
"Godot will use is the one named like the .cs file itself. If that class does "
"not exist in the file, you'll see the following error: ``Invalid call. "
"Nonexistent function `new` in base``."
msgstr ""

#: ../../docs/getting_started/scripting/cross_language_scripting.rst:91
msgid "For example, MyCoolNode.cs should contain a class named MyCoolNode."
msgstr ""

#: ../../docs/getting_started/scripting/cross_language_scripting.rst:93
msgid ""
"You also need to check your .cs file is referenced in the project's .csproj "
"file. Otherwise, the same error will occur."
msgstr ""

#: ../../docs/getting_started/scripting/cross_language_scripting.rst:97
#, fuzzy
msgid "Instantiating GDScript nodes from C#"
msgstr "쿼터니언(quaternions) 으로 보간하기"

#: ../../docs/getting_started/scripting/cross_language_scripting.rst:99
msgid ""
"From the C# side, everything work the same way. Once loaded, the GDScript "
"can be instantiated with :ref:`GDScript.New() <class_GDScript_method_new>`."
msgstr ""

#: ../../docs/getting_started/scripting/cross_language_scripting.rst:107
msgid ""
"Here we are using an :ref:`class_Object` but you can use type convertion "
"like explained in :ref:`doc_c_sharp_features_type_conversion_and_casting`."
msgstr ""

#: ../../docs/getting_started/scripting/cross_language_scripting.rst:111
#, fuzzy
msgid "Accessing fields"
msgstr "공간에 접근하기"

#: ../../docs/getting_started/scripting/cross_language_scripting.rst:114
#, fuzzy
msgid "Accessing C# fields from GDScript"
msgstr "GDScript에서 사용법"

#: ../../docs/getting_started/scripting/cross_language_scripting.rst:116
msgid ""
"Accessing C# fields from GDScript is straightforward, you shouldn't have "
"anything to worry about."
msgstr ""

#: ../../docs/getting_started/scripting/cross_language_scripting.rst:128
msgid ""
"Note that it doesn't matter if the field is defined as a property or an "
"attribute, but trying to set a value on a property that does not define a "
"setter will result in a crash."
msgstr ""

#: ../../docs/getting_started/scripting/cross_language_scripting.rst:133
msgid "Accessing GDScript fields from C#"
msgstr ""

#: ../../docs/getting_started/scripting/cross_language_scripting.rst:135
msgid ""
"As C# is statically typed, accessing GDScript from C# is a bit more "
"convoluted, you will have to use :ref:`Object.Get() "
"<class_Object_method_get>` and :ref:`Object.Set() "
"<class_Object_method_set>`. The first argument is the name of the field you "
"want to access."
msgstr ""

#: ../../docs/getting_started/scripting/cross_language_scripting.rst:148
msgid ""
"Keep in mind that when setting a field value you should only use types the "
"GDScript side knows about. Essentially, you want to work with built-in types "
"as described in :ref:`doc_gdscript` or classes extending :ref:`class_Object`."
msgstr ""

#: ../../docs/getting_started/scripting/cross_language_scripting.rst:153
#, fuzzy
msgid "Calling methods"
msgstr "메서드"

#: ../../docs/getting_started/scripting/cross_language_scripting.rst:156
#, fuzzy
msgid "Calling C# methods from GDScript"
msgstr "GDScript에서 사용법"

#: ../../docs/getting_started/scripting/cross_language_scripting.rst:158
msgid ""
"Again, calling C# methods from GDScript should be straightforward. The "
"marshalling process will do its best to cast your the arguments to match "
"function signatures. If that's impossible you'll see the following error: "
"``Invalid call. Nonexistent function `FunctionName```."
msgstr ""

#: ../../docs/getting_started/scripting/cross_language_scripting.rst:174
#, fuzzy
msgid "Calling GDScript methods from C#"
msgstr "스크립트에서 JavaScript 호출하기"

#: ../../docs/getting_started/scripting/cross_language_scripting.rst:176
msgid ""
"To call GDScript methods from C# you'll need to use :ref:`Object.Call() "
"<class_Object_method_call>`. The first arguments is the name of the method "
"you want to call. The following arguments will be passed to said method."
msgstr ""

#: ../../docs/getting_started/scripting/cross_language_scripting.rst:198
msgid ""
"As you can see, if the first argument of the called method is an array, "
"you'll need to cast it as ``object``. Otherwise each element of your array "
"will be treated as a single argument and the function signature won't match."
msgstr ""

#: ../../docs/getting_started/workflow/project_setup/project_organization.rst:9
msgid ""
"Since Godot has no restrictions on project structure or filesystem usage, "
"organizing files when learning the engine can seem challenging. This "
"tutorial suggests a workflow which should be a good starting point. We will "
"also cover using version control with Godot."
msgstr ""
"Godot는 프로젝트 구조나 파일 시스템 사용에 있어 제한을 두지 않기 때문에 엔진"
"을 배울 때, 파일을 조직하는 것은 도전적인 것처럼 보일 수 있습니다. 이 튜토리"
"얼에서는 좋은 출발점이 될만한 워크플로를 제안합니다. 그리고 Godot로 버전 제어"
"를 사용하는 것도 다룰 것입니다."

#: ../../docs/getting_started/workflow/project_setup/project_organization.rst:15
msgid "Organization"
msgstr "구성"

#: ../../docs/getting_started/workflow/project_setup/project_organization.rst:17
msgid ""
"Godot is scene-based in nature, and uses the filesystem as-is, without "
"metadata or an asset database."
msgstr ""
"Godot는 본질적으로 씬 기반이고, 파일 시스템을 메타데이터나 애셋 데이터베이스"
"가 아닌, 있는 그대로 사용합니다."

#: ../../docs/getting_started/workflow/project_setup/project_organization.rst:20
msgid ""
"Unlike other engines, many resources are contained within the scene itself, "
"so the amount of files in the filesystem is considerably lower."
msgstr ""
"다른 엔진과 달리, 많은 리소스가 씬 자체에 내장되어 있기에, 파일 시스템에 있"
"는 파일의 양은 상당히 적습니다."

#: ../../docs/getting_started/workflow/project_setup/project_organization.rst:23
msgid ""
"Considering that, the most common approach is to group assets as close to "
"scenes as possible; when a project grows, it makes it more maintainable."
msgstr ""
"그것을 고려해보면, 가장 일반적인 접근법은 애셋들을 씬과 가능한 밀접하게 묶어"
"내는 것입니다; 프로젝트가 커지다 보면, 프로젝트를 더 유지할 수 있게 만듭니다."

#: ../../docs/getting_started/workflow/project_setup/project_organization.rst:27
msgid ""
"As an example, one can usually place into a single folder their basic "
"assets, such as sprite images, 3D model meshes, materials, and music, etc. "
"They can then use a separate folder to store built levels that use them."
msgstr ""
"예로서, 보통은 하나의 폴더에 기본 애셋을 넣습니다, 스프라이트 이미지나, 3D 모"
"델 메시, 머티리얼, 그리고 음악 등이죠. 그런 다음 별도의 폴더를 사용하여 만든 "
"레벨을 저장할 수 있습니다."

#: ../../docs/getting_started/workflow/project_setup/project_organization.rst:48
msgid "Importing"
msgstr "가져오기"

#: ../../docs/getting_started/workflow/project_setup/project_organization.rst:50
msgid ""
"Godot versions prior to 3.0 did the import process from files outside the "
"project. While this can be useful in large projects, it resulted in an "
"organization hassle for most developers."
msgstr ""
"3.0 버전 이전의 Godot에서는 프로젝트 밖에서 파일을 접근하는 것으로 가져왔습니"
"다. 이것이 큰 규모의 프로젝트에는 유용하지만, 대부분의 개발자들에게는 조직의 "
"번거로움을 초래했습니다."

#: ../../docs/getting_started/workflow/project_setup/project_organization.rst:54
msgid ""
"Because of this, assets are now transparently imported from within the "
"project folder."
msgstr "이 때문에, 애셋은 이제 프로젝트 폴더 내에서 투명하게 가져옵니다."

#: ../../docs/getting_started/workflow/project_setup/project_organization.rst:58
#, fuzzy
msgid "Ignoring specific folders"
msgstr "특정 객체를 비활성화하기"

#: ../../docs/getting_started/workflow/project_setup/project_organization.rst:60
msgid ""
"To prevent Godot from importing files contained in a specific folder, create "
"an empty file called ``.gdignore`` in the folder (the leading ``.`` is "
"required). This can be useful to speed up the initial project importing."
msgstr ""

#: ../../docs/getting_started/workflow/project_setup/project_organization.rst:66
msgid ""
"To create a file whose name starts with a dot on Windows, you can use a text "
"editor such as Notepad++ or use the following command in a command prompt: "
"``type nul > .gdignore``"
msgstr ""

#: ../../docs/getting_started/workflow/project_setup/project_organization.rst:70
msgid ""
"Once the folder is ignored, resources in that folder can't be loaded anymore "
"using the ``load()`` and ``preload()`` methods."
msgstr ""

#: ../../docs/getting_started/workflow/project_setup/project_organization.rst:73
msgid ""
"Ignoring a folder will also automatically hide it from the FileSystem dock, "
"which can be useful to reduce clutter."
msgstr ""

#: ../../docs/getting_started/workflow/assets/escn_exporter/index.rst:2
msgid "Blender ESCN exporter"
msgstr "블렌더 ESCN 내보내기(Exporter)"

#: ../../docs/getting_started/workflow/assets/escn_exporter/index.rst:4
msgid ""
"This chapter relates to the Blender plugin called \"Godot Blender Exporter"
"\", which can be downloaded here: https://github.com/godotengine/godot-"
"blender-exporter"
msgstr ""
"이 챕터는 블렌더 플러그인  \"Godot Blender Exporter\"와 관련이 있습니다, 여기"
"서 다운로드 할 수 있습니다: https://github.com/godotengine/godot-blender-"
"exporter"

#: ../../docs/getting_started/workflow/assets/escn_exporter/index.rst:7
msgid ""
"This plugin can be used to export Blender scenes in a Godot-specific scene "
"format called ESCN, which is similar to TSCN (text format) but will be "
"imported as binary SCN for performance."
msgstr ""
"이 플러그인은 블렌더 씬을 Godot 특화된 씬 형식인 ESCN으로 내보내는 데 사용할 "
"수 있습니다, TSCN (텍스트 형식)과 유사하지만 퍼포먼스를 위해 이진 SCN으로 가"
"져옵니다."

#: ../../docs/getting_started/workflow/assets/escn_exporter/index.rst:12
msgid "Details on exporting"
msgstr "내보내기에 대한 세부 정보"

#: ../../docs/getting_started/workflow/assets/escn_exporter/index.rst:27
msgid "Disabling specific objects"
msgstr "특정 객체를 비활성화하기"

#: ../../docs/getting_started/workflow/assets/escn_exporter/index.rst:29
msgid ""
"Sometimes you don't want some objects exported (e.g. high-res models used "
"for baking). An object will not be exported if it is not rendered in the "
"scene. This can be set in the outliner:"
msgstr ""
"때때로 일부 객체는 내보내지 않도록 하고 싶습니다 (예: 베이크에 사용되는 높은 "
"리소스의 모델). 씬에 렌더가 되지 않으면 객체는 내보내지지 않을 것입니다. 이"
"는 아웃라이너에서 설정할 수 있습니다:"

#: ../../docs/getting_started/workflow/assets/escn_exporter/index.rst:35
msgid ""
"Objects hidden in the viewport will be exported, but will be hidden in the "
"Godot scene."
msgstr "객체를 뷰포드에서 숨기면, 내보내지지만 Godot 씬에서는 숨겨질 것입니다."

#: ../../docs/getting_started/workflow/assets/escn_exporter/index.rst:40
msgid "Build pipeline integration"
msgstr "파이프라인 통합 빌드"

#: ../../docs/getting_started/workflow/assets/escn_exporter/index.rst:42
msgid ""
"If you have hundreds of model files, you don't want your artists to waste "
"time manually exporting their blend files. To combat this, the exporter "
"provides a python function ``io_scene_godot.export(out_file_path)`` that can "
"be called to export a file. This allows easy integration with other build "
"systems. An example Makefile and python script that exports all the blends "
"in a directory are present in the Godot-Blender-exporter repository."
msgstr ""
"수 백 개의 모델 파일을 갖고 있다면, 아티스트가 수동으로 blend 파일을 내보내"
"는 것에 시간을 낭비하는 일은 원하지 않을 겁니다. 이에 맞서, 내보내기는 "
"python 함수로 ``io_scene_godot.export(out_file_path)``\\ 를 제공하며, 파일을 "
"내보내기 위해 호출할 수 있습니다. 이를 통해 다른 빌드 시스템과 쉽게 통합할 "
"수 있습니다. 디렉토리에서 모든 blend 파일을 내보내는 Makefile과 Python 스크립"
"트 예제는 Godot-Blender-exporter 저장소에 있습니다."

#: ../../docs/getting_started/workflow/assets/escn_exporter/material.rst:2
#: ../../docs/getting_started/workflow/assets/importing_scenes.rst:151
#: ../../docs/tutorials/3d/using_gridmaps.rst:60
msgid "Materials"
msgstr "머티리얼(Materials)"

#: ../../docs/getting_started/workflow/assets/escn_exporter/material.rst:5
msgid "Using existing Godot materials"
msgstr "존재하는 Godot 머티리얼 사용하기"

#: ../../docs/getting_started/workflow/assets/escn_exporter/material.rst:7
msgid ""
"One way in which the exporter can handle materials is to attempt to match "
"the Blender material with an existing Godot material. This has the advantage "
"of being able to use all of the features of Godot's material system, but it "
"means that you cannot see your model with the material applied inside "
"Blender."
msgstr ""
"내보내기가 머티리얼을 다룰 수 있는 하나의 방법으로 블렌더 머티리얼과 존재하"
"는 Godot 머티리얼을 맞춰보는 것입니다. Godot의 모든 머티리얼 시스템을 사용할 "
"수 있는 이점이 있지만, 블렌더 내부에 적용된 머티리얼로 모델을 볼 수 없다는 것"
"이기도 합니다."

#: ../../docs/getting_started/workflow/assets/escn_exporter/material.rst:12
msgid ""
"To do this, the exporter attempts to find Godot materials with names that "
"match those of the material name in Blender. So if you export an object in "
"Blender with the material name ``PurpleDots`` then the exporter will search "
"for the file ``PurpleDots.tres`` and assign it to the object. If this file "
"is not a ``SpatialMaterial`` or ``ShaderMaterial`` or if it cannot be found, "
"then the exporter will fall back to exporting the material from Blender."
msgstr ""
"하기 위해, 내보내기는 블렌더에서 머티리얼 이름과 일치하는 이름의 Godot 머티리"
"얼을 찾아야 합니다. 즉, 블렌더에서 ``PurpleDots``\\ 이라는 이름의 머티리얼 이"
"름을 가진 객체를 내보낸다면, 내보내기는 ``PurpleDots.tres`` 파일을 찾을 것이"
"고 그것을 객체에 지정할 것입니다. 이 파일이 ``SpatialMaterial``\\ 이나 "
"``ShaderMaterial``\\ 이 아니거나, 찾을 수 없다면, 내보내기는 블렌더에서 머티"
"리얼을 다시 내보내기 위해 돌아올 것입니다."

#: ../../docs/getting_started/workflow/assets/escn_exporter/material.rst:20
msgid ""
"Where the exporter searches for the ``.tres`` file is determined by the "
"\"Material Search Paths\" option:"
msgstr ""
"내보내기가 ``.tres`` 파일을 찾는 위치는 \"Material Search Paths\" 설정에서 결"
"정합니다:"

#: ../../docs/getting_started/workflow/assets/escn_exporter/material.rst:34
msgid "This can take the value of:"
msgstr "다음 값을 사용할 수 있습니다:"

#: ../../docs/getting_started/workflow/assets/escn_exporter/material.rst:26
msgid ""
"Project Directory - Attempts to find the ``project.Godot`` and recursively "
"searches through subdirectories. If ``project.Godot`` cannot be found it "
"will throw an error. This is useful for most projects where naming conflicts "
"are unlikely."
msgstr ""
"Project Directory - ``project.Godot``\\ 을 찾고 재귀적으로 하위 디렉토리로 검"
"색합니다. ``project.Godot``\\ 을 찾을 수 없다면 오류를 발생합니다. 이름 충돌"
"이 거의 없는 대부분의 프로젝트에서 유용합니다."

#: ../../docs/getting_started/workflow/assets/escn_exporter/material.rst:30
msgid ""
"Export Directory - Look for materials in subdirectories of the export "
"location. This is useful for projects where you may have duplicate material "
"names and need more control over what material gets assigned."
msgstr ""
"Export Directory - 내보내기 위치의 하위 디렉토리에서 머티리얼을 봅니다. 머티"
"리얼 이름을 복사해서 어떤 머티리얼이 지정되었는지 좀 더 제어가 필요한 프로젝"
"트에서 유용합니다."

#: ../../docs/getting_started/workflow/assets/escn_exporter/material.rst:33
msgid "None - Do not search for materials. Export them from the Blender file."
msgstr ""
"None - 머티리얼을 찾지 않습니다. 머티리얼을 블렌더 파일에서 내보냅니다."

#: ../../docs/getting_started/workflow/assets/escn_exporter/material.rst:37
msgid "Export of Cycles/EEVEE materials"
msgstr "Cycles/EEVEE 머티리얼 내보내기"

#: ../../docs/getting_started/workflow/assets/escn_exporter/material.rst:39
msgid ""
"The exporter has a primitive support for converting Cycles/EEVEE material "
"node tree to Godot Shader Material. Note that some of the Shader Node are "
"not supported yet due to difficulties in implementation, which are:"
msgstr ""
"이 내보내기는 Cycles/EEVEE 머티리얼 노드 트리를 Godot 셰이더 머티리얼로 변환"
"하기 위한 원시적인 지원을 갖고 있습니다. 일부 셰이더 노드는 구현의 어려움으"
"로 아직 지원하지 않습니다, 다음과 같습니다:"

#: ../../docs/getting_started/workflow/assets/escn_exporter/material.rst:43
msgid "all the ``noisy textures``"
msgstr "모든 ``노이즈 텍스처``"

#: ../../docs/getting_started/workflow/assets/escn_exporter/material.rst:44
msgid "``generated texture coordinates``"
msgstr "``생성된 텍스처 좌표``"

#: ../../docs/getting_started/workflow/assets/escn_exporter/material.rst:45
msgid "``group node``"
msgstr "``그룹 노드``"

#: ../../docs/getting_started/workflow/assets/escn_exporter/material.rst:46
msgid ""
"shader nodes except ``PrincipledBSDF``, ``Diffuse``, ``Glossy``, ``Glass``, "
"``add shader`` and ``mix shader``"
msgstr ""
"``PrincipledBSDF``, ``Diffuse``, ``Glossy``, ``Glass``, ``add shader`` 그리"
"고 ``mix shader``\\ 를 제외한 셰이더 노드들"

#: ../../docs/getting_started/workflow/assets/escn_exporter/material.rst:50
#, fuzzy
msgid ""
"If possible, try to use PrincipledBSDF node with GGX distribution as the "
"output shader node, it is the only one guaranteed to be exactly correct. "
"Others are just based on approximation."
msgstr ""
"PrincipledBSDF 노드가 정확하게 된다는 것을 보장하기 위해, 가능하다면 GGX 분포"
"를 셰이더 노드 출력으로 하도록 하세요. 다른 것은 단지 근사치를 기반으로 합니"
"다."

#: ../../docs/getting_started/workflow/assets/escn_exporter/material.rst:53
msgid ""
"Sometimes materials may not be valid for exporting (e.g. has some "
"unsupported node) or it is using Blender Internal Engine, only the diffuse "
"color and a few flags (e.g. unshaded) are exported and form a Spatial "
"Material."
msgstr ""
"때로 머티리얼이 내보내기에 좋지 않을 수 있습니다 (예: 내보낼 수 없는 노드를 "
"가져서) 혹은 블렌더 내장 엔진을 사용하는 등의 이유로, 오직 확산 색상과 몇 가"
"지 플래그 (예: 셰이드 없음)가 내보내지고 Spatial 머티리얼의 형태가 됩니다."

#: ../../docs/getting_started/workflow/assets/escn_exporter/material.rst:59
msgid "Generate external materials"
msgstr "외부 머티리얼 생성하기"

#: ../../docs/getting_started/workflow/assets/escn_exporter/material.rst:61
msgid ""
"The default configuration of material exporting would keep all the materials "
"internal to the ``escn`` file. There is an option which could enable "
"generating external ``.material`` file when the ``escn`` file opens in Godot."
msgstr ""
"머티리얼 내보내기의 기본 구성은 모든 머티리얼을 ``escn`` 파일에 내부적으로 유"
"지하는 것입니다. 설정을 통해 Godot에서 ``escn`` 파일을 열 때 외부 ``."
"material`` 파일을 생성하도록 할 수 있습니다."

#: ../../docs/getting_started/workflow/assets/escn_exporter/material.rst:67
msgid ""
"``.material`` file can be assigned to any material slot to be a external "
"resource."
msgstr ""
"``.material`` 파일은 아무 머티리얼 슬롯에 지정해 외부 리소스로 사용될 수 있습"
"니다."

#: ../../docs/getting_started/workflow/assets/escn_exporter/physics.rst:2
msgid "Physics properties"
msgstr "물리 속성"

#: ../../docs/getting_started/workflow/assets/escn_exporter/physics.rst:4
msgid ""
"Exporting physics properties is done by enabling \"Rigid Body\" in Blender's "
"physics tab:"
msgstr ""
"물리 속성 내보내기는 블렌더의 물리 탭에서 \"Rigid Body\"를 활성화하여 가능합"
"니다:"

#: ../../docs/getting_started/workflow/assets/escn_exporter/physics.rst:10
msgid ""
"By default, a single Blender object with rigid body enabled will export as "
"three nodes: a PhysicsBody, a CollisionShape, and a MeshInstance."
msgstr ""
"기본적으로, 리지드 바디가 활성화된 하나의 블렌더 객체는 3개의 노드로 내보내집"
"니다: PhysicsBody, CollisionShape, 그리고 MeshInstance입니다."

#: ../../docs/getting_started/workflow/assets/escn_exporter/physics.rst:14
msgid "Body type"
msgstr "바디 타입"

#: ../../docs/getting_started/workflow/assets/escn_exporter/physics.rst:16
msgid ""
"Blender only has the concept of \"Active\" and \"Passive\" rigid bodies. "
"These turn into Static and RigidBody nodes. To create a kinematic body, "
"enable the \"animated\" checkbox on an \"Active\" body:"
msgstr ""
"블렌더는 \"Active\"와 \"Passive\" 리지드 바티의 개념만을 갖습니다. 이들은 각"
"각 StaticBody와 RigidBody 노드가 됩니다. KinematicBody를 만들기 위해선, "
"\"Active\" 바디에서 \"animated\" 체크 박스를 활성화해야 합니다:"

#: ../../docs/getting_started/workflow/assets/escn_exporter/physics.rst:23
#: ../../docs/tutorials/physics/physics_introduction.rst:55
msgid "Collision shapes"
msgstr "충돌 모양"

#: ../../docs/getting_started/workflow/assets/escn_exporter/physics.rst:25
msgid ""
"Many of the parameters for collision shapes are missing from Blender, and "
"many of the collision shapes are also not present. However, almost all of "
"the options in Blender's rigid body collision and rigid body dynamics "
"interfaces are supported:"
msgstr ""
"충돌 모양을 위한 대부분의 매개변수는 블렌더에 없습니다, 그리고 많은 충돌 모"
"양 역시 존재하지 않습니다. 하지만 블렌더의 리지드 바디 충돌과 리지드 바디 역"
"학 인터페이스의 거의 모든 설정이 지원됩니다:"

#: ../../docs/getting_started/workflow/assets/escn_exporter/physics.rst:39
msgid "There are the following caveats:"
msgstr "다음과 같은 주의 사항이 있습니다:"

#: ../../docs/getting_started/workflow/assets/escn_exporter/physics.rst:33
msgid ""
"Not all of the collision shapes are supported. Only ``Mesh``, ``Convex "
"Hull``, ``Capsule``, ``Sphere`` and ``Box`` are supported in both Blender "
"and Godot"
msgstr ""
"모든 충돌 모양이 지원되는 것은 아닙니다. 오직 ``Mesh``, ``Convex Hull``, "
"``Capsule``, ``Sphere`` 그리고 ``Box``\\ 만이 블렌더와 Godot 둘 다 지원되는 "
"것입니다"

#: ../../docs/getting_started/workflow/assets/escn_exporter/physics.rst:36
msgid ""
"In Godot, you can have different collision groups and collision masks. In "
"Blender you only have collision groups. As a result, the exported object's "
"collision mask is equal to its collision group. Most of the time, this is "
"what you want."
msgstr ""
"Godot에서, 다른 충돌 그룹과 충돌 마스크를 가질 수 있습니다. 블렌더에서는 오"
"직 충돌 마스크만 가질 수 있습니다. 그 결과, 내보낸 객체의 충돌 마스크는 충돌 "
"그룹과 동일합니다. 대부분의 경우, 그것이 원하는 것이겠죠."

#: ../../docs/getting_started/workflow/assets/escn_exporter/physics.rst:42
msgid ""
"To build compound physics shapes, parent together multiple objects with "
"rigid body enabled. The physics properties are taken from the parent-most "
"rigid body, and the rest are used as collision shapes."
msgstr ""
"복합 물리 모양을 만들기 위해, 리지드 바디가 활성화된 여러 객체들을 모으세요. "
"물리 속성은 부모 제일의 리지드 바디에서 가져옵니다, 그리고 나머지는 충돌 모양"
"으로 사용됩니다."

#: ../../docs/getting_started/workflow/assets/escn_exporter/physics.rst:47
msgid "Collision geometry only"
msgstr "충돌 모양만"

#: ../../docs/getting_started/workflow/assets/escn_exporter/physics.rst:49
msgid ""
"Frequently you want different geometry for your collision meshes and your "
"graphical meshes, but by default the exporter will export a mesh along with "
"the collision shape. To only export the collision shape, set the object's "
"maximum draw type to Wire:"
msgstr ""
"자주 충돌 메시와 그래픽적인 메시에 각기 다른 모양을 원하지만, 기본적으로 내보"
"내기는 충돌 모양과 함께 메시를 내보낼 것입니다. 충돌 모양 만을 내보내기 위해"
"서는, 객체의 최대 그리기 타입을 Wire로 설정하세요:"

#: ../../docs/getting_started/workflow/assets/escn_exporter/physics.rst:56
msgid ""
"This will also influence how the object is shown in Blender's viewport. Most "
"of the time, you want your collision geometry to be shown see-through when "
"working on the models, so this works out fairly nicely."
msgstr ""
"이는 객체가 블렌더의 뷰포트에서 보이는 방식에도 영향을 줍니다. 대부분의 경"
"우, 모델을 작업할 때 충돌 모양이 투명하게 보이게 하고 싶을 겁니다, 그래서 이"
"것은 꽤 잘 작동합니다."

#: ../../docs/getting_started/workflow/assets/escn_exporter/lights.rst:2
#: ../../docs/tutorials/2d/2d_lights_and_shadows.rst:68
#: ../../docs/tutorials/3d/introduction_to_3d.rst:223
msgid "Lights"
msgstr "빛(Lights)"

#: ../../docs/getting_started/workflow/assets/escn_exporter/lights.rst:4
msgid ""
"By default, lamps in Blender have shadows enabled. This can cause "
"performance issues in Godot."
msgstr ""
"기본적으로, 블렌더의 램프는 그림자를 활성화합니다. 이는 Godot에서 퍼포먼스 문"
"제를 발생할 수 있습니다."

#: ../../docs/getting_started/workflow/assets/escn_exporter/lights.rst:8
msgid ""
"Lamps are exported using their \"Blender Render\" settings. When Blender 2.8 "
"is released, this will be removed and this part of the exporter will change."
msgstr ""
"램프는 \"Blender Render\" 설정에서 내보냅니다. 블렌더 2.8이 출시될 때, 이것"
"은 제거되고 내보내기의 일부분이 바뀔 것입니다."

#: ../../docs/getting_started/workflow/assets/escn_exporter/lights.rst:11
msgid ""
"Sun, point and spot lamps are all exported from Blender along with many of "
"their properties:"
msgstr ""
"해(Sun), 포인트(Point), 그리고 스폿(Spot) 램프는 많은 속성과 함께 모두 블렌더"
"에서 내보내집니다:"

#: ../../docs/getting_started/workflow/assets/escn_exporter/lights.rst:16
msgid "There are some things to note:"
msgstr "적어 놓을 만한 사항들이 있습니다:"

#: ../../docs/getting_started/workflow/assets/escn_exporter/lights.rst:18
msgid ""
"In Blender, a light casts light all the way to infinity. In Godot, it is "
"clamped by the attenuation distance. To most closely match between the "
"viewport and Godot, enable the \"Sphere\" checkbox. (Highlighted green)"
msgstr ""
"블렌더에서, 빛은 무한대로 빛을 캐스트합니다. Godot에서는, 이것이 감쇠 거리"
"(attenuation distance)에 의해 고정됩니다.뷰포트와 Godot를 더 밀접하게 맞춰보"
"기 위해선, \"Sphere\" 체크 박스를 활성화하세요 (녹색으로 강조됨)"

#: ../../docs/getting_started/workflow/assets/escn_exporter/lights.rst:21
msgid ""
"Light attenuation models differ between Godot and Blender. The exporter "
"attempts to make them match, but it isn't always very good."
msgstr ""
"빛 감쇠 모델은 Godot와 블렌더가 서로 다릅니다. 내보내기는 이들을 맞춰야 하지"
"만, 항상 좋게 되진 않습니다."

#: ../../docs/getting_started/workflow/assets/escn_exporter/lights.rst:23
msgid ""
"Spotlight angular attenuation models also differ between Godot and Blender. "
"The exporter attempts to make them similar, but it doesn't always look the "
"same."
msgstr ""
"스포트라이트 각도 감쇠 모델 또한 Godot과 블렌더가 서로 다릅니다. 내보내기는 "
"이들을 비슷하게 만들려고 하지만, 항상 같게 보이지는 않습니다."

#: ../../docs/getting_started/workflow/assets/escn_exporter/lights.rst:26
msgid ""
"There is no difference between buffer shadow and ray shadow in the export."
msgstr ""
"내보내기에서 버퍼 섀도우(buffer shadow)와 레이 섀도우(ray shadow)간의 차이는 "
"없습니다."

#: ../../docs/getting_started/workflow/assets/escn_exporter/mesh.rst:2
msgid "Mesh"
msgstr "메시"

#: ../../docs/getting_started/workflow/assets/escn_exporter/mesh.rst:5
msgid "Modifiers"
msgstr "모디파이어(Modifiers)"

#: ../../docs/getting_started/workflow/assets/escn_exporter/mesh.rst:6
msgid ""
"There is an exporting option :code:`Apply Modifiers` to control whether mesh "
"modifiers are applied to the exported mesh."
msgstr ""
"내보내는 설정 :code:`Apply Modifiers`\\ 로 어떤 메시 모디파이어를 내보낸 메시"
"에 적용할 지 제어할 수 있습니다."

#: ../../docs/getting_started/workflow/assets/escn_exporter/mesh.rst:11
msgid "Shape Key"
msgstr "셰이프 키(Shape Key)"

#: ../../docs/getting_started/workflow/assets/escn_exporter/mesh.rst:12
msgid ""
"Exporting mesh shape key is supported, however exporting each shape key is "
"almost like exporting the mesh again, so don't be surprised it takes a "
"relatively long time."
msgstr ""
"메시 셰이프 키 내보내기도 지원하지만, 각 셰이프 키를 내보내는 것은 메시를 다"
"시 내보내는 것과 거의 같기 때문에, 상대적으로 오랜 시간이 걸리는 것에 놀라지 "
"마세요."

#: ../../docs/getting_started/workflow/assets/escn_exporter/mesh.rst:17
msgid ""
"A lot of modifiers are not compatible with shape keys (e.g. subsurface "
"modifier), so if you found you have incorrect shape keys exported, try to "
"disable :code:`Apply Modifiers` and do the exporting again. Besides, it is "
"worthwhile to report the incompatible modifier to the `issue list <https://"
"github.com/godotengine/godot-blender-exporter/issues>`__, which helps to "
"develop the exporter to have a more precise check of modifiers."
msgstr ""
"많은 모디파이어가 셰이프 키와 호환하지 않습니다 (예: 서브서페이스 모디파이"
"어), 그래서 맞지 않은 셰이프 키가 내보내진 것을 발견했다면, :code:`Apply "
"Modifiers`\\ 를 비활성화하고 다시 내보내보세요. 그 밖에, 호환하지 않은 모디파"
"이어를 `issue list <https://github.com/godotengine/godot-blender-exporter/"
"issues>`__\\ 에 보고하여 모디파이어를 더 정확하게 확인하는 내보내기를 개발하"
"도록 도울 수 있습니다."

#: ../../docs/getting_started/workflow/assets/escn_exporter/skeleton.rst:2
#: ../../docs/development/file_formats/tscn.rst:161
msgid "Skeleton"
msgstr "스켈레톤"

#: ../../docs/getting_started/workflow/assets/escn_exporter/skeleton.rst:7
msgid "Rest Bone"
msgstr "휴식 본"

#: ../../docs/getting_started/workflow/assets/escn_exporter/skeleton.rst:9
msgid ""
"Armature object in Blender is exported as a Skeleton node along with rest "
"position (transform in Godot) of bones."
msgstr ""
"블렌더에서 뼈대 객체는 본의 휴식 위치 (Godot에서 변형)와 함께 Skeleton 노드"
"로 내보내집니다."

#: ../../docs/getting_started/workflow/assets/escn_exporter/skeleton.rst:13
msgid ""
"The three check boxes :code:`Inherit Rotation`, :code:`Inherit Scale`, :code:"
"`Local Location` (colored in red) must be ticked when building armature in "
"Blender, so that the exported bone transform be consistent between Blender "
"and Godot"
msgstr ""
"세 개의 체크 박스, :code:`Inherit Rotation`, :code:`Inherit Scale`, :code:"
"`Local Location` (붉게 색칠됨)은 블렌더에서 뼈대를 만들 때 반드시 체크해야 하"
"고, 이를 통해 내보낸 본은 Godot와 블렌더 간 일정하게 변형됩니다"

#: ../../docs/getting_started/workflow/assets/escn_exporter/skeleton.rst:18
msgid ""
"It is important that the mesh is not deformed by bones when exporting in "
"Blender. Make sure that the skeleton is reset to its T-pose or default rest "
"pose."
msgstr ""
"블렌더에서 메시를 내보낼 때, 메시가 본에 의해 형태가 변하지 않는 것이 중요합"
"니다. 스켈레톤이 기존의 T 포즈나 기본 휴식 포즈로 되어있는지 확인하세요."

#: ../../docs/getting_started/workflow/assets/escn_exporter/skeleton.rst:22
msgid "Bone Weights"
msgstr "본 무게값"

#: ../../docs/getting_started/workflow/assets/escn_exporter/skeleton.rst:24
msgid ""
"Blender put rigged mesh vertices which has no bone weights at its original "
"position, but these vertices would be placed at (0, 0, 0) in Godot, making "
"the mesh deformed. Therefore, the exporter would raise an error for any "
"vertex with no bone weights detected in a rigged mesh."
msgstr ""
"블렌더는 원래 위치에서 본 무게값이 없는 리깅된 메시 꼭짓점을 넣었습니다, 하지"
"만 이 꼭짓점은 Godot에서 (0, 0, 0)에 위치하게 되고, 메시가 변형되도록 만듭니"
"다. 그러므로, 내보내기는 리깅된 메시에서 본 무게값이 없는 꼭짓점이 감지되면 "
"오류를 내보낼 것입니다."

#: ../../docs/getting_started/workflow/assets/escn_exporter/skeleton.rst:30
msgid "Non-Deform Bone"
msgstr "비 변형 본"

#: ../../docs/getting_started/workflow/assets/escn_exporter/skeleton.rst:32
msgid ""
"Note that the non-deform bone can be configured as not exported by enabling "
"the :code:`Exclude Control Bones`; the deform bone checkbox is shown in the "
"picture."
msgstr ""
":code:`Exclude Control Bones`\\ 를 활성화해서 비 변형 본을 내보내지 않은 것으"
"로 설정할 수 있습니다; 변형 본 체크 박스는 사진에 보입니다."

#: ../../docs/getting_started/workflow/assets/escn_exporter/skeleton.rst:38
msgid "Bone Attachment"
msgstr "본 부착(Bone Attachment)"

#: ../../docs/getting_started/workflow/assets/escn_exporter/skeleton.rst:39
msgid ""
"A bone can be the parent of an object in Blender; this relation is exported "
"as a BoneAttachment node in the Godot scene."
msgstr ""
"본은 블렌더에서 객체의 부모가 될 수 있습니다; 이 관계는 Godot 씬에서 "
"BoneAttachment 노드로 내보내집니다."

#: ../../docs/getting_started/workflow/assets/escn_exporter/animation.rst:8
msgid "Animation supported:"
msgstr "애니메이션 지원됨:"

#: ../../docs/getting_started/workflow/assets/escn_exporter/animation.rst:4
msgid "transform animation of all types of objects"
msgstr "모든 타입 객체의 변형 애니메이션"

#: ../../docs/getting_started/workflow/assets/escn_exporter/animation.rst:5
msgid "transform animation of pose bones"
msgstr "포즈 본의 변형 애니메이션"

#: ../../docs/getting_started/workflow/assets/escn_exporter/animation.rst:6
msgid "shape key animation"
msgstr "셰이프 키 애니메이션"

#: ../../docs/getting_started/workflow/assets/escn_exporter/animation.rst:7
msgid "light animation"
msgstr "빛 애니메이션"

#: ../../docs/getting_started/workflow/assets/escn_exporter/animation.rst:8
msgid "camera animation"
msgstr "카메라 애니메이션"

#: ../../docs/getting_started/workflow/assets/escn_exporter/animation.rst:11
msgid "Multiple Actions For Single Object"
msgstr "한 객체에 대한 여러 동작"

#: ../../docs/getting_started/workflow/assets/escn_exporter/animation.rst:12
msgid ""
"In most games, one object would have several animations to switch between. "
"This add-on has support for exporting multiple actions all at once into a "
"single AnimationPlayer and makes it easy to switch actions."
msgstr ""
"대부분의 게임은, 하나의 객체가 여러 애니메이션을 가져 번갈아가며 씁니다. 이 "
"애드온은 여러 동작 모두를 하나의 AnimationPlayer로 내보내서 쉽게 동작을 바꿀 "
"수 있도록 합니다."

#: ../../docs/getting_started/workflow/assets/escn_exporter/animation.rst:16
msgid ""
"This workflow makes use of blender nla_tracks. Here is a brief guide on how "
"to use this feature:"
msgstr ""
"이 워크플로는 블렌더 nla_tracks를 사용합니다. 다음은 이 기능을 사용하는 간단"
"한 가이드입니다:"

#: ../../docs/getting_started/workflow/assets/escn_exporter/animation.rst:19
msgid "**1. Stash active action**"
msgstr "**1. 활성화 동작 숨기기(Stash)**"

#: ../../docs/getting_started/workflow/assets/escn_exporter/animation.rst:21
#, fuzzy
msgid ""
"New created action is always an active action bound to object. There are "
"several ways to place an active action into NLA track, one is of course "
"doing it in ``NLA Editor``"
msgstr ""
"새롭게 만든 액션은 항상 객체에 묶여 활성화된 액션입니다. NLA 트랙에 활성화된 "
"액션을 놓는 방법은 여러 가지가 있고, 그 중 하나는 ``NLA 편집기``\\ 에서 할 "
"수 있습니다"

#: ../../docs/getting_started/workflow/assets/escn_exporter/animation.rst:28
msgid "Or it can be done stashing the action in ``Dope Sheet``"
msgstr "혹은 ``Dope Sheet``\\ 에서 액션을 숨길 수 있습니다"

#: ../../docs/getting_started/workflow/assets/escn_exporter/animation.rst:33
msgid "**2. Check mute status of NLA tracks**"
msgstr "**2. NLA 트랙의 mute 상태 확인하기**"

#: ../../docs/getting_started/workflow/assets/escn_exporter/animation.rst:35
msgid ""
"An NLA track can be ``mute`` or ``unmute``, the exporter will export all the "
"``mute`` NLA track as a separate action, while blends all the ``unmute`` NLA "
"tracks into every action (including the action action) being exported."
msgstr ""
"NLA 트랙은 ``mute``\\ 나 ``unmute``\\ 를 할 수 있고, 내보내기는 ``mute`` 상태"
"인 모든 NLA 트랙을 개별 액션으로 내보낼 것이며, ``unmute`` 상태의 모든 NLA 트"
"랙은 (액션을 포함한) 모든 액션으로 혼합하여 내보낼 것입니다."

#: ../../docs/getting_started/workflow/assets/escn_exporter/animation.rst:41
msgid "**3. Export the scene**"
msgstr "**3. 씬 내보내기**"

#: ../../docs/getting_started/workflow/assets/escn_exporter/animation.rst:43
msgid "Make sure the ``Export Stashed Actions`` option has been turned on."
msgstr "``Export Stashed Actions`` 설정이 켜져 있어야 합니다."

#: ../../docs/getting_started/workflow/assets/escn_exporter/animation.rst:47
msgid ""
"Then all the stashed actions, as well as the active action, are exported to "
"an AnimationPlayer."
msgstr "그러면 모든 숨겨진 동작, 활성화 동작을 AnimationPlayer로 내보냅니다."

#: ../../docs/getting_started/workflow/assets/escn_exporter/animation.rst:54
msgid "Constraints"
msgstr "제한(Constraints)"

#: ../../docs/getting_started/workflow/assets/escn_exporter/animation.rst:55
msgid ""
"Sometimes complicated animation is built with object constraint; a usual "
"example is inverse kinematics. The add-on would automatically check if an "
"object has some constraint; if it does, all the constraints are baked into "
"actions and then exported along with the object."
msgstr ""
"때로 복잡한 애니메이션은 객체 제한으로 만들어집니다; 보통 예시로는 역운동학"
"(inverse kinematics)이 있습니다. 애드온은 객체가 제한이 있는지 자동으로 확인"
"할 것입니다; 제한이 있다면 모든 제한은 액션에 베이크되어 객체와 함께 내보냅니"
"다."

#: ../../docs/getting_started/workflow/assets/escn_exporter/animation.rst:62
msgid "Animation Mode"
msgstr "애니메이션 모드"

#: ../../docs/getting_started/workflow/assets/escn_exporter/animation.rst:63
msgid ""
"Godot and Blender have different structure to store animation data. In Godot "
"animation data is stored in an AnimationPlayer node, instead of in each "
"animated node. In order to fix this inconsistence and still make the "
"animation play versatile, this add-on has three animation exporting modes."
msgstr ""
"Godot와 블렌더는 애니메이션 데이터를 저장하는 다른 구조를 갖고 있습니다. "
"Godot에서 애니메이션은 각각의 움직이는 노드 대신 AnimationPlayer 노드에 저장"
"됩니다.이 불일치를 고치고 그럼에도 애니메이션을 다용도로 재생하도록 하기 위"
"해, 이 애드온은 세 개의 애니메이션 내보내기 모드를 갖고 있습니다."

#: ../../docs/getting_started/workflow/assets/escn_exporter/animation.rst:70
msgid "**Mode 'Animation as Actions'**"
msgstr "**'Animation as Actions' 모드**"

#: ../../docs/getting_started/workflow/assets/escn_exporter/animation.rst:72
msgid ""
"Treat all the animations as object actions, so in the exported scene, every "
"object would have its own AnimationPlayer and hold its actions."
msgstr ""
"모든 애니메이션을 객체의 동작으로 취급합니다, 따라서 내보낸 씬에서 모든 객체"
"는 고유의 AnimationPlayer를 가지며 동작을 갖고 있습니다."

#: ../../docs/getting_started/workflow/assets/escn_exporter/animation.rst:76
msgid "**Mode 'Scene Animation'**"
msgstr "**'Scene Animation' 모드**"

#: ../../docs/getting_started/workflow/assets/escn_exporter/animation.rst:78
msgid ""
"If you want your animation to generate the same result as playing at "
"Blender's timeline, this is what you want. In this mode, all the animations "
"in the scene are placed in just one AnimationPlayer in the scene root."
msgstr ""
"블렌더의 타임라인에서 재생한 것과 같은 결과를 만들고 싶다면, 이것을 써야 합니"
"다. 이 모드에서, 씬의 모든 애니메이션은 씬 루트의 한 AnimationPlayer에 배치됩"
"니다."

#: ../../docs/getting_started/workflow/assets/escn_exporter/animation.rst:82
msgid "**Mode 'Animation as Action with Squash'**"
msgstr "**'Animation as Action with Squash' 모드**"

#: ../../docs/getting_started/workflow/assets/escn_exporter/animation.rst:84
msgid ""
"This mode has very similar behaviour of mode 'Animation as Action', but it "
"can generate fewer AnimationPlayers; objects in parent-children relationship "
"would share their AnimationPlayer. It is useful when you have several rigs, "
"and each Skeleton and Mesh has actions; then one rig would have just one "
"AnimationPlayer."
msgstr ""
"이 모드는  'Animation as Action' 모드와 비슷한 작업을 하지만, 더 적은 "
"AnimationPlayers를 만듭니다; 객체는 부모 자식 관계에서 AnimationPlayer를 공유"
"합니다. 여러 리깅을 해야할 때나, 각 Skeleton과 Mesh가 동작을 가질 때 유용합니"
"다; 하나의 리깅은 하나의 AnimationPlayer만 있으면 됩니다."

#: ../../docs/getting_started/workflow/assets/index.rst:2
msgid "Assets workflow"
msgstr "애셋 워크플로"

#: ../../docs/getting_started/workflow/assets/import_process.rst:4
msgid "Import process"
msgstr "가져오기 방법"

#: ../../docs/getting_started/workflow/assets/import_process.rst:7
msgid "Importing assets in Godot 3.0+"
msgstr "Godot 3.0+에서 애셋 가져오기"

#: ../../docs/getting_started/workflow/assets/import_process.rst:9
msgid ""
"Previously, importing assets in Godot 2.x required manual maintenance of a "
"separate directory with source assets. Without doing this, it was impossible "
"to specify how to convert and change import flags for textures, audio files, "
"scenes, etc."
msgstr ""
"이제까지는, Godot 2.x에서 애셋을 가져오려면 원본 애셋이 있는 별개의 디렉토리"
"를 수동으로 유지해야 했습니다. 이렇게 하지 않으면, 텍스처, 오디오 파일, 씬 등"
"을 위한 가져오기 플래그를 변환하고 변경하는 방식을 지정하는 일은 불가능했습니"
"다."

#: ../../docs/getting_started/workflow/assets/import_process.rst:14
msgid ""
"In Godot 3.0, we use a more modern approach to importing: Simply drop your "
"assets (image files, scenes, audio files, fonts, etc) directly in the "
"project folder (copy them manually with your OS file explorer). Godot will "
"automatically import these files internally and keep the imported resources "
"hidden in a res://.import folder."
msgstr ""
"Godot 3.0에서, 가져오기에 더 현대적인 접근법을 사용합니다: 간단히 애셋 (이미"
"지 파일, 씬, 오디오 파일, 폰트 등)을 프로젝트 폴더에 직접 드롭합니다 (OS 파"
"일 탐색기로 애셋을 수동으로 복사합니다). Godot은 이 파일을 내부로 가져오며 가"
"져온 리소스를 res://.import 폴더에 숨겨 놓습니다."

#: ../../docs/getting_started/workflow/assets/import_process.rst:20
msgid "This allows changing all the import parameters transparently."
msgstr "이를 통해 모든 가져오기 매개변수를 투명하게 변경할 수 있습니다."

#: ../../docs/getting_started/workflow/assets/import_process.rst:23
msgid "Changing import parameters"
msgstr "가져오기 매개변수 변경하기"

#: ../../docs/getting_started/workflow/assets/import_process.rst:25
msgid ""
"Changing the import parameters of an asset in Godot (again, keep in mind "
"import parameters are only present in non-native Godot resource types) is "
"easy. Select the relevant resource in the filesystem dock:"
msgstr ""
"Godot에서 애셋의 가져오기 매개변수를 변경하는 것은 쉽습니다 (다시 말하지만, "
"가져오기 매개변수는 오직 네이티브가 아닌 Godot 리소스 타입에 있습니다). 파일 "
"시스템 독에서 관련된 리소스를 선택합니다:"

#: ../../docs/getting_started/workflow/assets/import_process.rst:31
msgid ""
"Then, after adjusting the parameters, press \"Reimport\". These parameters "
"will only be used for this asset and on future reimports."
msgstr ""
"매개변수를 조정한 후에, \"다시 가져오기\"를 눌러줍니다. 매개변수는 이 애셋과 "
"향후 다시 가져오기에만 사용될 것입니다."

#: ../../docs/getting_started/workflow/assets/import_process.rst:34
msgid ""
"Changing the import parameters of several assets at the same time is also "
"possible. Simply select all of them together in the resources dock and the "
"exposed parameters will apply to all of them when reimporting."
msgstr ""
"여러 애셋 가져오기 매개변수를 동시에 바꾸는 것도 가능합니다. 간단히 리소스 독"
"에서 모두를 선택하고 다시 가져올 때 가져온 매개변수를 적용합니다."

#: ../../docs/getting_started/workflow/assets/import_process.rst:39
msgid "Automatic reimport"
msgstr "자동 다시 가져오기"

#: ../../docs/getting_started/workflow/assets/import_process.rst:41
msgid ""
"When the MD5 checksum of the source asset changes, Godot will perform an "
"automatic reimport of it, applying the preset configured for that specific "
"asset."
msgstr ""
"원본 애셋의 MD5 체크섬이 바꿀 때, Godot는 튿정 애셋을 위해 구성된 프리셋을 적"
"용하면서, 그것에 자동 다시 내보내기를 실행할 것입니다."

#: ../../docs/getting_started/workflow/assets/import_process.rst:46
msgid "Files generated"
msgstr "생성된 파일"

#: ../../docs/getting_started/workflow/assets/import_process.rst:48
msgid ""
"Importing will add an extra <asset>.import file, containing the import "
"configuration. Make sure to commit these to your version control system!"
msgstr ""
"가져오기는 추가 <asset>.import 파일을 추가하는데, 가져오기 구성이 거기에 들어"
"있습니다. 이것을 버전 제어 시스템에 커밋하도록 하세요!"

#: ../../docs/getting_started/workflow/assets/import_process.rst:53
msgid ""
"Additionally, extra assets will be preset in the hidden res://.import folder:"
msgstr ""
"또한, 추가 애셋은 숨겨진 res://.import 폴더에 프리셋이 되어 있을 것입니다:"

#: ../../docs/getting_started/workflow/assets/import_process.rst:57
msgid ""
"If any of the files present in this folder is erased (or the whole folder), "
"the asset or assets will be reimported automatically. As such, committing "
"this folder to the version control system is optional. It can shorten "
"reimporting time when checking out on another computer, but it takes "
"considerably more space and transfer time. Pick your poison!"
msgstr ""
"이 폴더에 있는 파일이 (혹은 폴더 전체가) 지워진다면, 애셋은 자동으로 다시 가"
"져올 것입니다. 따라서, 이 폴더를 버전 제어 시스템에 커밋하는 것은 선택적입니"
"다. 다른 컴퓨터에서 확인할 때 다시 가져오는 시간이 짧을 수 있지만, 상당히 많"
"은 시간과 공간을 잡아먹습니다. 오십보백보입니다!"

#: ../../docs/getting_started/workflow/assets/import_process.rst:64
msgid "Changing import resource type"
msgstr "가져오기 리소스 타입 변경하기"

#: ../../docs/getting_started/workflow/assets/import_process.rst:66
msgid ""
"Some source assets can be imported as different types of resources. For "
"this, select the relevant type of resource desired and press \"Reimport\":"
msgstr ""
"일부 원본 애셋은 리소스의 다른 타입으로 가져올 수 있습니다. 이를 위해, 원하"
"는 리소스의 관련된 타입을 선택하고 \"Reimport\"를 누르세요:"

#: ../../docs/getting_started/workflow/assets/import_process.rst:74
msgid "Changing default import parameters"
msgstr "기본값 가져오기 매개변수 변경하기"

#: ../../docs/getting_started/workflow/assets/import_process.rst:76
msgid ""
"Different types of games might require different defaults. Changing the "
"defaults per project can be achieved by using the \"Preset..\" Menu. Besides "
"some resource types offering presets, the default setting can be saved and "
"cleared too:"
msgstr ""
"다른 타입의 게임에는 다른 기본 값이 필요할 것입니다. 프로젝트마다 기본 값을 "
"바꾸려면 \"Preset..\" 메뉴를 사용할 수 있습니다. 프리셋을 제공하는 일부 리소"
"스 타입 밖에도, 기본 값 설정을 저장하고 지울 수도 있습니다:"

#: ../../docs/getting_started/workflow/assets/import_process.rst:84
msgid "Simplicity is key!"
msgstr "단순함이 핵심입니다!"

#: ../../docs/getting_started/workflow/assets/import_process.rst:86
msgid ""
"This is a very simple workflow which should take very little time to get "
"used to. It also enforces a more correct way to deal with resources."
msgstr ""
"이것은 매우 간단한 워크플로로 익숙해지는데 얼마 안 걸릴 것입니다. 그리고 리소"
"스를 다루는데 더 정확한 방법을 유도합니다."

#: ../../docs/getting_started/workflow/assets/import_process.rst:89
msgid ""
"There are many types of assets available for import, so please continue "
"reading to understand how to work with all of them!"
msgstr ""
"많은 타입의 애셋을 가져오기로 이용할 수 있습니다, 따라서 이 모든 것들을 가지"
"고 작업하는 방법을 이해하기 위해 계속 읽어주세요!"

#: ../../docs/getting_started/workflow/assets/importing_images.rst:4
msgid "Importing images"
msgstr "이미지 가져오기"

#: ../../docs/getting_started/workflow/assets/importing_images.rst:7
msgid "Why import them?"
msgstr "왜 이미지를 가져오나요?"

#: ../../docs/getting_started/workflow/assets/importing_images.rst:9
msgid ""
"In Godot 3+, image files are no longer native resources and they must be "
"imported. The reason behind this is the large amount of configuration "
"parameters that image files can be imported with."
msgstr ""
"Godot 3+에서, 이미지 파일은 더 이상 고유 리소스가 아니고 반드시 가져와야 합니"
"다. 그 이유는 이것이 가져올 수 있는 이미지 파일의 많은 양의 구성 매개변수 때"
"문입니다."

#: ../../docs/getting_started/workflow/assets/importing_images.rst:13
msgid ""
"This small tutorial will explain what these parameters are and how to best "
"make use of them."
msgstr ""
"이 간단한 튜토리얼에서는 매개변수가 무엇이며 어떻게 사용하는 것이 최선인지를 "
"설명하겠습니다."

#: ../../docs/getting_started/workflow/assets/importing_images.rst:17
msgid "Importing textures"
msgstr "텍스처 가져오기"

#: ../../docs/getting_started/workflow/assets/importing_images.rst:19
msgid ""
"The default action in Godot is to import images as textures. Textures are "
"stored in video memory and can't be accessed directly. This is what makes "
"drawing them efficient."
msgstr ""
"Godot에서 기본 값 행동은 이미지를 텍스처로 가져오는 것입니다. 텍스처는 비디"
"오 메모리에 저장되며 직접 접근할 수 없습니다. 이것이 효율적으로 그리는 것입니"
"다."

#: ../../docs/getting_started/workflow/assets/importing_images.rst:23
msgid "Import options are vast:"
msgstr "가져오기 설정은 거대합니다:"

#: ../../docs/getting_started/workflow/assets/importing_images.rst:28
msgid "Detect 3D"
msgstr "Detect 3D(3D 감지)"

#: ../../docs/getting_started/workflow/assets/importing_images.rst:30
msgid ""
"This option makes Godot be aware of when a texture (which is imported for 2D "
"as default) is used in 3D. If this happens, setting are changed so the "
"texture flags are friendlier to 3D (mipmaps, filter and repeat become "
"enabled and compression is changed to VRAM). Texture is also reimported "
"automatically."
msgstr ""
"이 설정은 Godot가 (기본 값에 따라 2D로 가져온) 텍스처를 3D에 사용한다는 것을 "
"인식하도록 만듭니다. 이 경우, 설정이 변경되고 텍스처 플래그는 3D에 맞게 변합"
"니다 (mipmaps, filter 그리고 repeat가 활성화되고 compression은 VRAM으로 변합"
"니다). 텍스처도 자동으로 다시 가져옵니다."

#: ../../docs/getting_started/workflow/assets/importing_images.rst:34
#, fuzzy
msgid "Supported image formats"
msgstr "지원되는 애니메이션"

#: ../../docs/getting_started/workflow/assets/importing_images.rst:36
#, fuzzy
msgid "Godot can import the following image formats:"
msgstr "Godot는 다음 3D *씬 파일 형식*\\ 을 지원합니다:"

#: ../../docs/getting_started/workflow/assets/importing_images.rst:38
msgid "BMP (``.bmp``)"
msgstr ""

#: ../../docs/getting_started/workflow/assets/importing_images.rst:39
msgid ""
"DirectDraw Surface (``.dds``) - If mipmaps are present in the texture, they "
"will be loaded directly. This can be used to achieve effects using custom "
"mipmaps."
msgstr ""

#: ../../docs/getting_started/workflow/assets/importing_images.rst:42
msgid ""
"OpenEXR (``.exr``) - Supports HDR (highly recommended for panorama skies)."
msgstr ""

#: ../../docs/getting_started/workflow/assets/importing_images.rst:44
msgid ""
"Radiance HDR (``.hdr``) - Supports HDR (highly recommended for panorama "
"skies)."
msgstr ""

#: ../../docs/getting_started/workflow/assets/importing_images.rst:46
msgid ""
"JPEG (``.jpg``, ``.jpeg``) - Doesn't support transparency per the format's "
"limitations."
msgstr ""

#: ../../docs/getting_started/workflow/assets/importing_images.rst:48
msgid ""
"PNG (``.png``) - Precision is limited to 8 bits per channel upon importing "
"(no HDR images)."
msgstr ""

#: ../../docs/getting_started/workflow/assets/importing_images.rst:50
msgid "Truevision Targa (``.tga``)"
msgstr ""

#: ../../docs/getting_started/workflow/assets/importing_images.rst:51
msgid ""
"SVG (``.svg``, ``.svgz``) - SVGs are rasterized using `NanoSVG <https://"
"github.com/memononen/nanosvg>`__ when importing them. Support is limited; "
"complex vectors may not render correctly. For complex vectors, rendering "
"them to PNGs using Inkscape is often a better solution. This can be "
"automated thanks to its `command-line interface <https://wiki.inkscape.org/"
"wiki/index.php/Using_the_Command_Line#Export_files>`__."
msgstr ""

#: ../../docs/getting_started/workflow/assets/importing_images.rst:56
msgid "WebP (``.webp``)"
msgstr ""

#: ../../docs/getting_started/workflow/assets/importing_images.rst:60
msgid ""
"If you've compiled the Godot editor from source with specific modules "
"disabled, some formats may not be available."
msgstr ""

#: ../../docs/getting_started/workflow/assets/importing_images.rst:64
msgid "Compression"
msgstr "압축"

#: ../../docs/getting_started/workflow/assets/importing_images.rst:66
msgid ""
"Images are one of the largest assets in a game. To handle them efficiently, "
"they need to be compressed. Godot offers several compression methods, "
"depending on the use case."
msgstr ""
"이미지는 게임의 거대한 애셋들 중 하나 입니다. 이를 효율적으로 다루기 위해, 압"
"축이 필요합니다. Godot는 여러 압축 방식을 제공하며, 사용 사례에 따라 다릅니"
"다."

#: ../../docs/getting_started/workflow/assets/importing_images.rst:70
msgid "Compress Mode"
msgstr "압축 모드"

#: ../../docs/getting_started/workflow/assets/importing_images.rst:72
#, fuzzy
msgid ""
"**VRAM Compression:** This is the most common compression mode for 3D "
"assets. Size on disk is reduced and video memory usage is also decreased "
"considerably (usually by a factor between 4 and 6). This mode should be "
"avoided for 2D as it exhibits noticeable artifacts."
msgstr ""
"VRAM 압축: 이것은 3D 애셋을 위한 가장 일반적인 압축 모드입니다. 디스크의 파일"
"은 줄어들고 비디오 메모리 사용량도 상당히 줄어듭니다. 3D의 경우, 원치 않은 결"
"과물이 나올 수 있습니다."

#: ../../docs/getting_started/workflow/assets/importing_images.rst:76
#, fuzzy
msgid ""
"**Lossless Compression:** This is the most common compression mode for 2D "
"assets. It shows assets without any kind of artifacting, and disk "
"compression is decent. It will use considerably more amount of video memory "
"than VRAM Compression, though. This is also the recommended setting for "
"pixel art."
msgstr ""
"무손실 압축: 이것은 2D 애셋을 위한 가장 일반적인 압축입니다. 어떤 인위적 처리"
"없이 애셋을 보여주고, 디스크 압축은 괜찮습니다. VRAM보다 상당히 많은 양의 비"
"디오 메모리를 사용할 것입니다."

#: ../../docs/getting_started/workflow/assets/importing_images.rst:80
msgid ""
"**Lossy Compression:** This is a good choice for large 2D assets. It has "
"some artifacts, but less than VRAM and the file size is several times lower "
"compared to Lossless or Uncompressed. Video memory usage isn't decreased by "
"this mode; it's the same as with Lossless Compression or Uncompressed."
msgstr ""

#: ../../docs/getting_started/workflow/assets/importing_images.rst:84
#, fuzzy
msgid ""
"**Uncompressed:** Only useful for formats that can't be compressed (such as "
"raw float images)."
msgstr "압축하지 않음: (raw float와 같이) 압축할 수 없는 형식에만 유용합니다."

#: ../../docs/getting_started/workflow/assets/importing_images.rst:87
#, fuzzy
msgid ""
"In this table, each of the four options are described together with their "
"advantages and disadvantages (|good| = best, |bad| = worst):"
msgstr ""
"이 표에서, 4개의 설정 각각은 이점과 손실을 설명합니다 ( |good| = 좋음, |bad| "
"= 나쁨):"

#: ../../docs/getting_started/workflow/assets/importing_images.rst:91
msgid "Uncompressed"
msgstr "압축하지 않음"

#: ../../docs/getting_started/workflow/assets/importing_images.rst:91
msgid "Compress Lossless (PNG)"
msgstr "무손실 압축 (PNG)"

#: ../../docs/getting_started/workflow/assets/importing_images.rst:91
msgid "Compress Lossy (WebP)"
msgstr "손실 압축 (WebP)"

#: ../../docs/getting_started/workflow/assets/importing_images.rst:91
msgid "Compress VRAM"
msgstr "VRAM 압축"

#: ../../docs/getting_started/workflow/assets/importing_images.rst:93
msgid "Stored as raw pixels"
msgstr "순수 화소로 저장됨"

#: ../../docs/getting_started/workflow/assets/importing_images.rst:93
msgid "Stored as PNG"
msgstr "PNG로 저장됨"

#: ../../docs/getting_started/workflow/assets/importing_images.rst:93
msgid "Stored as WebP"
msgstr "WebP로 저장됨"

#: ../../docs/getting_started/workflow/assets/importing_images.rst:93
#, fuzzy
msgid "Stored as S3TC/BC or PVRTC/ETC depending on platform"
msgstr "플랫폼에 따라, S3TC/BC,PVRTC/ETC로 저장됨"

#: ../../docs/getting_started/workflow/assets/importing_images.rst:95
msgid "Size on Disk"
msgstr "디스크에 저장됨"

#: ../../docs/getting_started/workflow/assets/importing_images.rst:95
#: ../../docs/getting_started/workflow/assets/importing_images.rst:97
msgid "|bad| Large"
msgstr "|bad| 거대함"

#: ../../docs/getting_started/workflow/assets/importing_images.rst:95
msgid "|regular| Small"
msgstr "|regular| 작음"

#: ../../docs/getting_started/workflow/assets/importing_images.rst:95
msgid "|good| Very Small"
msgstr "|good| 매우 작음"

#: ../../docs/getting_started/workflow/assets/importing_images.rst:97
msgid "Memory Usage"
msgstr "메모리 사용량"

#: ../../docs/getting_started/workflow/assets/importing_images.rst:97
msgid "|good| Small"
msgstr "|good| 작음"

#: ../../docs/getting_started/workflow/assets/importing_images.rst:99
msgid "Performance"
msgstr "성능"

#: ../../docs/getting_started/workflow/assets/importing_images.rst:99
#: ../../docs/getting_started/workflow/assets/importing_images.rst:103
msgid "|regular| Normal"
msgstr "|regular| 보통"

#: ../../docs/getting_started/workflow/assets/importing_images.rst:99
#: ../../docs/getting_started/workflow/assets/importing_images.rst:103
msgid "|good| Fast"
msgstr "|good| 빠름"

#: ../../docs/getting_started/workflow/assets/importing_images.rst:101
msgid "Quality Loss"
msgstr "품질 손실"

#: ../../docs/getting_started/workflow/assets/importing_images.rst:101
msgid "|good| None"
msgstr "|good| 없음"

#: ../../docs/getting_started/workflow/assets/importing_images.rst:101
msgid "|regular| Slight"
msgstr "|regular| 약간 있음"

#: ../../docs/getting_started/workflow/assets/importing_images.rst:101
msgid "|bad| Moderate"
msgstr "|bad| 보통"

#: ../../docs/getting_started/workflow/assets/importing_images.rst:103
msgid "Load Time"
msgstr "불러오기 시간"

#: ../../docs/getting_started/workflow/assets/importing_images.rst:103
msgid "|bad| Slow"
msgstr "|bad| 느림"

#: ../../docs/getting_started/workflow/assets/importing_images.rst:113
msgid "HDR Mode"
msgstr "HDR 모드"

#: ../../docs/getting_started/workflow/assets/importing_images.rst:115
msgid ""
"Godot supports high dynamic range textures (as .HDR or .EXR). These are "
"mostly useful as high dynamic range equirectangular panorama skies (the "
"internet has plenty if you search for them), which replace Cubemaps in Godot "
"2.x. Modern PCs support the BC6H VRAM format, but there are still plenty "
"that do not."
msgstr ""
"Godot는 높은 동적 범위 텍스처 (.HDR 또는 .EXR)를 지원합니다. 대개 높은 동적 "
"범위 equirectangular 파노라마 하늘에 유용하며 Godot 2.x의 큐브맵을 대신하기"
"도 합니다 (검색해보면 쉽게 찾을 수 있습니다). 최신 PC는 BC6H VRAM 형식을 지원"
"하지만, 지원하지 않는 형식도 많이 있습니다."

#: ../../docs/getting_started/workflow/assets/importing_images.rst:118
msgid ""
"If you want Godot to ensure full compatibility in terms of the kind of "
"textures, enable the \"Force RGBE\" option."
msgstr ""
"Godot가 텍스처의 종류와의 완전한 호환성을 보장하고 싶다면, \"Force RGBE\" 설"
"정을 활성화하세요."

#: ../../docs/getting_started/workflow/assets/importing_images.rst:121
msgid "Normal Map"
msgstr "노말맵"

#: ../../docs/getting_started/workflow/assets/importing_images.rst:123
msgid ""
"When using a texture as normal map, only the red and green channels are "
"required. Given regular texture compression algorithms produce artifacts "
"that don't look that nice in normal maps, the RGTC compression format is the "
"best fit for this data. Forcing this option to \"Enabled\" will make Godot "
"import the image as RGTC compressed. By default, it's set to \"Detect\", "
"which means that if the texture is ever used as a normal map, it will be "
"changed to \"Enabled\" and reimported automatically."
msgstr ""
"텍스처를 노말맵으로 사용할 때, 빨강과 초록 채널만 필요합니다. 주어진 표준 텍"
"스처 압축 알고리즘은 인위 구조를 만드는데 노말맵에서는 좋게 보이지는 않습니"
"다, RGTC 압축 형식이 이 데이터에 가장 적합합니다. 이 설정을 \"Enabled\"로 하"
"면 Godot는 이미지를 RGTC 압축 형식으로 가져올 것입니다. 기본적으로, \"Detect"
"\"로 설정하는데, 텍스처가 노말맵으로 사용된다면 자동으로 \"Enabled\"로 바뀌"
"며 다시 가져온다는 것을 뜻합니다."

#: ../../docs/getting_started/workflow/assets/importing_images.rst:128
msgid ""
"Note that RGTC compression affects the resulting normal map image. You will "
"have to adjust custom shaders that use the normal map to take this into "
"account."
msgstr ""

#: ../../docs/getting_started/workflow/assets/importing_images.rst:131
#: ../../docs/tutorials/3d/spatial_material.rst:30
msgid "Flags"
msgstr "플래그"

#: ../../docs/getting_started/workflow/assets/importing_images.rst:133
msgid ""
"There are plenty of settings that can be toggled when importing an image as "
"a texture, depending on the use case."
msgstr ""
"사용 사례에 따라, 이미지를 텍스처로 가져올 때 쓸 수 있는 많은 설정이 있습니"
"다."

#: ../../docs/getting_started/workflow/assets/importing_images.rst:136
msgid "Repeat"
msgstr "Repeat(반복)"

#: ../../docs/getting_started/workflow/assets/importing_images.rst:138
msgid ""
"This setting is most commonly used in 3D, and is therefore generally "
"disabled in 2D. It sets UV coordinates going beyond the 0,0 - 1,1 range to "
"\"loop\"."
msgstr ""
"이 설정은 3D에 가장 일반적으로 사용하며, 그렇기에 기본적으로 2D에서는 꺼져있"
"습니다. 0,0 - 1,1 범위를 넘는 UV 좌표를 \"loop\"로 설정합니다."

#: ../../docs/getting_started/workflow/assets/importing_images.rst:140
msgid "Repeating can optionally be set to mirrored mode."
msgstr "반복은 선택에 따라 거울 모드로 설정할 수 있습니다."

#: ../../docs/getting_started/workflow/assets/importing_images.rst:143
#: ../../docs/tutorials/audio/audio_buses.rst:180
msgid "Filter"
msgstr "Filter(필터)"

#: ../../docs/getting_started/workflow/assets/importing_images.rst:145
msgid ""
"When pixels become larger than the screen pixels, this option enables linear "
"interpolation for them. The result is a smoother (less blocky) texture. This "
"setting can be commonly used in 2D and 3D, but it's usually disabled when "
"making pixel perfect games."
msgstr ""
"픽셀이 화면 화소보다 커지게 되면, 이 설정은 선형 보간을 활성화합니다. 그 결과"
"는 더 부드러운 (덜 각진) 텍스처가 됩니다. 이 설정은 보통은 2D와 3D에 사용될 "
"수 있지만, 픽셀 퍼펙트 게임을 만들 때는 보통 비활성화합니다."

#: ../../docs/getting_started/workflow/assets/importing_images.rst:148
msgid "Mipmaps"
msgstr "Mipmaps(밉맵)"

#: ../../docs/getting_started/workflow/assets/importing_images.rst:150
msgid ""
"When pixels become smaller than the screen, mipmaps kick in. This helps "
"reduce the grainy effect when shrinking the textures. Keep in mind that, in "
"older hardware (GLES2, mainly mobile), there are some requirements to use "
"mipmaps:"
msgstr ""
"픽셀이 화면보다 더 작아질 때, 밉맵이 등장합니다. 텍스처가 줄어들 때, 거친 효"
"과를 줄여줍니다. 명심하세요, 오래된 하드웨어 (GLES2, 주로 모바일)에서, 밉맵"
"을 사용하려면 몇 가지 요구 사항이 있습니다:"

#: ../../docs/getting_started/workflow/assets/importing_images.rst:153
msgid "Texture width and height must be powers of 2"
msgstr "텍스처 가로와 세로는 반드시 2의 제곱이어야 합니다"

#: ../../docs/getting_started/workflow/assets/importing_images.rst:154
msgid "Repeat must be enabled"
msgstr "Repeat가 활성화되어 있어야 합니다"

#: ../../docs/getting_started/workflow/assets/importing_images.rst:156
msgid ""
"Keep in mind the above when making phone games and applications, want to aim "
"for full compatibility, and need mipmaps."
msgstr ""
"스마트폰 게임과 애플리케이션을 만들 때, 완전한 호환성과 밉맵이 필요하다면 위"
"의 내용을 명심하세요."

#: ../../docs/getting_started/workflow/assets/importing_images.rst:158
msgid ""
"When doing 3D, mipmap should be turned on, as this also improves performance "
"(smaller versions of the texture are used for objects further away)."
msgstr ""
"3D 작업에서, 밉맵은 켜져 있어야 성능이 향상됩니다 (더 작은 버전의 텍스처는 멀"
"리 있는 객체에 사용됩니다)."

#: ../../docs/getting_started/workflow/assets/importing_images.rst:161
msgid "Anisotropic"
msgstr "Anisotropic(비등방성)"

#: ../../docs/getting_started/workflow/assets/importing_images.rst:163
msgid ""
"When textures are near parallel to the view (like floors), this option makes "
"them have more detail by reducing blurriness."
msgstr ""
"텍스처가 (바닥과 같이) 화면과 거의 평행할 때, 이 설정은 흐려지는 것을 줄여서 "
"더 세세하게 표현하도록 만듭니다."

#: ../../docs/getting_started/workflow/assets/importing_images.rst:166
msgid "SRGB"
msgstr "SRGB"

#: ../../docs/getting_started/workflow/assets/importing_images.rst:168
msgid ""
"Godot uses Linear colorspace when rendering 3D. Textures mapped to albedo or "
"detail channels need to have this option turned on in order for colors to "
"look correct. When set to \"Detect\" mode, the texture will be marked as "
"SRGB when used in albedo channels."
msgstr ""
"Godot는 3D를 렌더링 할 때 선형 colorspace를 사용합니다. 반사율(albedo)이나 세"
"부 채널에 맵핑된 텍스처는 색상이 올바르게 보이기 위해 이 설정을 켜져 있어야 "
"합니다. \"Detect\" 모드로 설정할 때, 텍스처는 반사율 채널을 사용할 때 SRGB로 "
"표시될 것입니다."

#: ../../docs/getting_started/workflow/assets/importing_images.rst:172
msgid "Process"
msgstr "Process(가공)"

#: ../../docs/getting_started/workflow/assets/importing_images.rst:174
msgid ""
"Some special processes can be applied to images when imported as textures."
msgstr "이미지를 텍스처로 가져올 때, 일부 특수 가공을 적용할 수 있습니다."

#: ../../docs/getting_started/workflow/assets/importing_images.rst:177
msgid "Fix Alpha Border"
msgstr "Fix Alpha Border(알파 테두리 수정)"

#: ../../docs/getting_started/workflow/assets/importing_images.rst:179
msgid ""
"This puts pixels of the same surrounding color in transition from "
"transparency to non transparency. It helps mitigate the outline effect when "
"exporting images from Photoshop and the like."
msgstr ""
"이렇게 하면 같은 주변 색상의 픽셀을 넣어서 테두리를 투명에서 불투명으로 만듭"
"니다. 포토샵 등에서 이미지를 가져올 때 테두리 효과를 완화하는데 도움을 줍니"
"다."

#: ../../docs/getting_started/workflow/assets/importing_images.rst:184
msgid ""
"It's a good idea to leave it on by default, unless specific values are "
"needed."
msgstr "특정한 값이 필요하지 않다면, 기본 값으로 두는 것이 좋습니다."

#: ../../docs/getting_started/workflow/assets/importing_images.rst:187
msgid "Premultiplied Alpha"
msgstr "Premultiplied Alpha(미리 곱하기 알파)"

#: ../../docs/getting_started/workflow/assets/importing_images.rst:189
msgid ""
"An alternative to fix darkened borders is to use premultiplied alpha. By "
"enabling this option, the texture will be converted to this format. Keep in "
"mind that a material will need to be created that uses the PREMULT ALPHA "
"blend mode on canvas items that need it."
msgstr ""
"어두워진 테두리를 고치는 법으로 Premultiplied Alpha를 사용하는 것입니다. 이 "
"설정을 키면, 텍스처는 이 형식으로 변환될 것입니다. 이 텍스처가 필요한 캔버스 "
"항목에 PREMULT ALPHA 블렌드 모드를 사용하는 머티리얼을 만들어야 합니다."

#: ../../docs/getting_started/workflow/assets/importing_images.rst:193
msgid "HDR as sRGB"
msgstr "HDR as sRGB(sRGB로서의 HDR)"

#: ../../docs/getting_started/workflow/assets/importing_images.rst:195
msgid ""
"A few HDR files are broken and contain sRGB color data. It is advised not to "
"use them, but, in the worst-case scenario, toggling this option on will make "
"them look right."
msgstr ""
"몇 몇 HDR 파일은 손상되고 sRGB 색상 데이터를 갖고 있습니다. 사용하지 않는 것"
"이 좋지만, 최악의 경우에서, 이 설정을 켜면 좋게 보이게 만듭니다."

#: ../../docs/getting_started/workflow/assets/importing_images.rst:198
msgid "Invert Color"
msgstr "Invert Color(색상 반전)"

#: ../../docs/getting_started/workflow/assets/importing_images.rst:200
msgid ""
"Reverses the image's color. This is useful, for example, to convert a height "
"map generated by external programs to depth map to use with :ref:"
"`doc_spatial_material`."
msgstr ""
"이미지의 색상을 거꾸로합니다. 예를 들어, 외부 프로그램으로 생성된 높이 맵을 :"
"ref:`doc_spatial_material`\\ 에 사용하기 위해 깊이 맵으로 변환할 때 유용하게 "
"쓸 수 있습니다."

#: ../../docs/getting_started/workflow/assets/importing_audio_samples.rst:4
msgid "Importing audio samples"
msgstr "오디오 샘플 가져오기"

#: ../../docs/getting_started/workflow/assets/importing_audio_samples.rst:7
msgid "Why import?"
msgstr "왜 가져오나요?"

#: ../../docs/getting_started/workflow/assets/importing_audio_samples.rst:9
#, fuzzy
msgid ""
"Raw audio data in general is large and undesired. Godot provides two main "
"options to import your audio data: WAV and Ogg Vorbis."
msgstr ""
"순수 오디오 데이터는 일반적으로 크고 바람직하지 않습니다. Godot는 오디오 데이"
"터를 가져오기 위해 두 가지 주요 설정을 제공합니다: WAV와 OGG Vorbis입니다."

#: ../../docs/getting_started/workflow/assets/importing_audio_samples.rst:12
msgid "Each has different advantages."
msgstr ""

#: ../../docs/getting_started/workflow/assets/importing_audio_samples.rst:14
#, fuzzy
msgid ""
"WAV files use raw data or light compression, make few demands on the CPU to "
"play back (hundreds of simultaneous voices in this format are fine), but "
"take up significant space."
msgstr ""
"각각은 다른 이점을 갖습니다. * Wav 파일은 순수 데이터나 가벼운 압축을 사용합"
"니다, 재생을 위한 CPU의 요구가 거의 없습니다 (수 백 개의 동시 목소리는 이 형"
"식에 맞습니다), 하지만 상당한 공간을 차지합니다. * Ogg Vorbis 파일은 더 강한 "
"압축으로 파일 크기를 훨씬 더 작게 만듭니다, 하지만 재생하기 위해 상당한 처리 "
"능력이 필요합니다."

#: ../../docs/getting_started/workflow/assets/importing_audio_samples.rst:15
msgid ""
"Ogg Vorbis files use a stronger compression that results in much smaller "
"file size, but require significantly more processing power to play back."
msgstr ""

#: ../../docs/getting_started/workflow/assets/importing_audio_samples.rst:20
msgid "Here is a comparative chart."
msgstr "이것이 비교하는 차트입니다."

#: ../../docs/getting_started/workflow/assets/importing_audio_samples.rst:23
msgid "Format"
msgstr "형식"

#: ../../docs/getting_started/workflow/assets/importing_audio_samples.rst:23
#, fuzzy
msgid "1 second of audio"
msgstr "오디오의 1초"

#: ../../docs/getting_started/workflow/assets/importing_audio_samples.rst:25
#, fuzzy
msgid "WAV 24-bit, 96 kHz, stereo"
msgstr "WAV 24 bits, 96 kHz, 스테레오"

#: ../../docs/getting_started/workflow/assets/importing_audio_samples.rst:25
msgid "576 KB"
msgstr ""

#: ../../docs/getting_started/workflow/assets/importing_audio_samples.rst:27
#, fuzzy
msgid "WAV 16-bit, 44 kHz, mono"
msgstr "WAV 16 bits, 44 kHz, 모노"

#: ../../docs/getting_started/workflow/assets/importing_audio_samples.rst:27
msgid "88 KB"
msgstr ""

#: ../../docs/getting_started/workflow/assets/importing_audio_samples.rst:29
#, fuzzy
msgid "WAV 16-bit, IMA-ADPCM, mono"
msgstr "WAV 16 bits, IMA-ADPCM, 모노"

#: ../../docs/getting_started/workflow/assets/importing_audio_samples.rst:29
msgid "22 KB"
msgstr ""

#: ../../docs/getting_started/workflow/assets/importing_audio_samples.rst:31
#, fuzzy
msgid "Ogg Vorbis 128 Kb/s, stereo"
msgstr "OGG Vorbis 96kbps, 스테레오"

#: ../../docs/getting_started/workflow/assets/importing_audio_samples.rst:31
msgid "16 KB"
msgstr ""

#: ../../docs/getting_started/workflow/assets/importing_audio_samples.rst:33
#, fuzzy
msgid "Ogg Vorbis 96 Kb/s, stereo"
msgstr "OGG Vorbis 96kbps, 스테레오"

#: ../../docs/getting_started/workflow/assets/importing_audio_samples.rst:33
msgid "12 KB"
msgstr ""

#: ../../docs/getting_started/workflow/assets/importing_audio_samples.rst:36
#, fuzzy
msgid ""
"Consider using WAV for short and repetitive sound effects, and Ogg Vorbis "
"for music, speech, and long sound effects."
msgstr ""
"짧고 반복적인 음향 효과에는 WAV를 사용하고, 음악, 발음, 그리고 긴 음향 효과에"
"는 OGG를 사용해보세요."

#: ../../docs/getting_started/workflow/assets/importing_audio_samples.rst:40
#: ../../docs/getting_started/workflow/best_practices/index.rst:2
msgid "Best practices"
msgstr "모범 사례"

#: ../../docs/getting_started/workflow/assets/importing_audio_samples.rst:42
#, fuzzy
msgid ""
"Godot has an :ref:`extensive bus system <doc_audio_buses>` with built-in "
"effects. This saves SFX artists the need to add reverb to the sound effects, "
"reducing their size greatly and ensuring correct trimming. Say no to SFX "
"with baked reverb!"
msgstr ""
"Godot 3+는 내장 효과가 있는 놀라운 버스 시스템을 갖고 있습니다. 이걸로 SFX 아"
"티스트가 음향 효과에 울림(reverb)을 추가하는 번거로움을 줄여주며, 파일 크기"
"를 크게 줄이고 올바른 트리밍을 보장합니다. 베이크된 reverb인 SFX에 아니라고 "
"말해봐요!"

#: ../../docs/getting_started/workflow/assets/importing_audio_samples.rst:49
msgid "As you can see above, sound effects become huge with reverb added."
msgstr "위에서 볼 수 있듯이, reverb가 추가되면서 음향 효과는 거대해졌습니다."

#: ../../docs/getting_started/workflow/assets/importing_audio_samples.rst:52
msgid "Trimming"
msgstr "트리밍(Trimming)"

#: ../../docs/getting_started/workflow/assets/importing_audio_samples.rst:54
msgid ""
"One issue that happens often is that the waveform is exported with long "
"silences at the beginning and at the end. These are inserted by DAWs when "
"saving to a waveform, increase their size unnecessarily and add latency to "
"the moment they are played back."
msgstr ""
"종종 발생하는 문제로 파형을 가져올 때 시작과 끝에 긴 묵음이 있는 것입니다. 이"
"것은 파형을 저장할 때 DAW에 의해 삽입되며, 불필요하게 파일 크기를 키우면서 재"
"생하는 순간 대기 시간이 추가됩니다."

#: ../../docs/getting_started/workflow/assets/importing_audio_samples.rst:59
#, fuzzy
msgid "Importing as WAV with the **Trimming** option enabled solves this."
msgstr "Trimming 설정이 활성화된 상태로 WAV로 가져오면 이를 해결합니다."

#: ../../docs/getting_started/workflow/assets/importing_audio_samples.rst:63
msgid "Looping"
msgstr "루핑(Looping)"

#: ../../docs/getting_started/workflow/assets/importing_audio_samples.rst:65
#, fuzzy
msgid ""
"Godot supports looping in the samples (tools such as Sound Forge or Audition "
"can add loop points to WAV files). This is useful for sound effects, such as "
"engines, machine guns etc. Ping-pong looping is also supported."
msgstr ""
"Godot는 샘플로 루핑을 지원합니다 (Sound Forge나 Audition와 같이 wav 파일에 반"
"복 포인트를 추가할 수 있는 도구). 이것은 엔진, 머신 건과 같은 음향 효과에 유"
"용합니다. 핑퐁 루핑 역시 지원합니다."

#: ../../docs/getting_started/workflow/assets/importing_audio_samples.rst:70
#, fuzzy
msgid ""
"As an alternative, the Import dock has a **Loop** option that enables "
"looping for the entire sample when importing."
msgstr ""
"대안으로, 가져오기 화면은 \"loop\" 설정을 갖고 있고 이걸로 가져올 때 전체 샘"
"플에 루핑을 활성화할 수 있습니다."

#: ../../docs/getting_started/workflow/assets/importing_translations.rst:4
msgid "Importing translations"
msgstr "번역 가져오기"

#: ../../docs/getting_started/workflow/assets/importing_translations.rst:7
msgid "Games and internationalization"
msgstr "게임과 현지화"

#: ../../docs/getting_started/workflow/assets/importing_translations.rst:9
msgid ""
"The world is full of different markets and cultures and, to maximize "
"profits™, nowadays games are released in several languages. To solve this, "
"internationalized text must be supported in any modern game engine."
msgstr ""
"세상은 다른 시장과 문화로 가득하며, 이익™을 극대화하기 위해 오늘날의 게임은 "
"여러 언어로 출시됩니다. 이를 해결하기 위해, 모든 최신 게임 엔진은 현지화된 문"
"자를 반드시 지원해야 합니다."

#: ../../docs/getting_started/workflow/assets/importing_translations.rst:14
msgid ""
"In regular desktop or mobile applications, internationalized text is usually "
"located in resource files (or .po files for GNU stuff). Games, however, can "
"use several orders of magnitude more text than applications, so they must "
"support efficient methods for dealing with loads of multilingual text."
msgstr ""
"표준 데스크톱이나 모바일 애플리케이션에서, 현지화된 문자는 보통 리소스 파일"
"에 위치합니다 (혹은 GNU 물건을 위한 .po 파일). 하지만, 게임은 응용 프로그램보"
"다 몇 배나 더 많은 문자를 사용할 수 있습니다, 따라서 다국어 문자를 불러오는"
"데 효율적인 방법을 지원해야 합니다."

#: ../../docs/getting_started/workflow/assets/importing_translations.rst:20
msgid ""
"There are two approaches to generate multilingual language games and "
"applications. Both are based on a key:value system. The first is to use one "
"of the languages as the key (usually English), the second is to use a "
"specific identifier. The first approach is probably easier for development "
"if a game is released first in English, later in other languages, but a "
"complete nightmare if working with many languages at the same time."
msgstr ""
"다국어 언어 게임과 응용 프로그램을 만들기 위한 두 가지 접근법이 있습니다. 두 "
"가지 모두 키:값 시스템을 기반으로 이루어집니다. 첫 번째는 하나의 언어를 키로 "
"사용하는 것이고 (보통은 영어), 두 번째는 특정 식별자를 사용하는 것입니다. 첫 "
"번째 접근은 게임을 영어로 먼저 출시하고, 이후 다른 언어로 출시한다면 더 쉬울 "
"수도 있습니다, 하지만 동시에 다른 언어를 작업한다면, 이는 완벽한 악몽이 될 것"
"입니다."

#: ../../docs/getting_started/workflow/assets/importing_translations.rst:28
msgid ""
"In general, games use the second approach and a unique ID is used for each "
"string. This allows you to revise the text while it is being translated to "
"other languages. The unique ID can be a number, a string, or a string with a "
"number (it's just a unique string anyway)."
msgstr ""
"일반적으로, 게임은 두 번째 접근법을 사용하고 고유 ID는 각 문자열에 사용됩니"
"다. 이를 통해 다른 언어로 번역되는 동안 문자를 개정할 수 있습니다. 고유 ID는 "
"숫자, 문자열, 혹은 숫자가 있는 문자열이 될 수 있습니다 (아무튼 고유한 문자열"
"이라는 것입니다)."

#: ../../docs/getting_started/workflow/assets/importing_translations.rst:33
msgid ""
"If you need a more powerful file format, Godot also supports loading "
"translations written in the gettext ``.po`` format. See :ref:"
"`doc_localization_using_gettext` for details."
msgstr ""

#: ../../docs/getting_started/workflow/assets/importing_translations.rst:38
msgid "Translation format"
msgstr "번역 형식"

#: ../../docs/getting_started/workflow/assets/importing_translations.rst:40
#, fuzzy
msgid ""
"To complete the picture and allow efficient support for translations, Godot "
"has a special importer that can read CSV files. Most spreadsheet editors can "
"export to this format, so the only requirement is that the files have a "
"special arrangement. The CSV files **must** be saved with UTF-8 encoding "
"without a `byte order mark <https://en.wikipedia.org/wiki/"
"Byte_order_mark>`__."
msgstr ""
"작품을 완성하고 번역에 효율적인 지원을 하기 위해, Godot는 CSV 파일을 읽을 수 "
"있는 특수 가져오기를 갖고 있습니다. 모든 스프레드시트 편집기는 (Libreoffice, "
"Microsoft Office, Google Docs 등이 있죠) 이 형식으로 내보낼 수 있습니다, 따라"
"서 필요한 것은 파일이 특별한 배열로 되어야 하는 것입니다. CSV 파일은 UTP-8 인"
"코딩으로 저장되어야 하며 다음과 같은 형식이어야 합니다:"

#: ../../docs/getting_started/workflow/assets/importing_translations.rst:48
msgid ""
"By default, Microsoft Excel will always save CSV files with ANSI encoding "
"rather than UTF-8. There is no built-in way to do this, but there are "
"workarounds as described `here <https://stackoverflow.com/questions/4221176/"
"excel-to-csv-with-utf8-encoding>`__."
msgstr ""

#: ../../docs/getting_started/workflow/assets/importing_translations.rst:53
msgid ""
"We recommend using `LibreOffice <https://www.libreoffice.org/>`__ or Google "
"Sheets instead."
msgstr ""

#: ../../docs/getting_started/workflow/assets/importing_translations.rst:55
msgid "CSV files must be formatted as follows:"
msgstr ""

#: ../../docs/getting_started/workflow/assets/importing_translations.rst:58
#: ../../docs/getting_started/workflow/assets/importing_translations.rst:77
msgid "keys"
msgstr ""

#: ../../docs/getting_started/workflow/assets/importing_translations.rst:58
msgid "<lang1>"
msgstr "<lang1>"

#: ../../docs/getting_started/workflow/assets/importing_translations.rst:58
msgid "<lang2>"
msgstr "<lang2>"

#: ../../docs/getting_started/workflow/assets/importing_translations.rst:58
msgid "<langN>"
msgstr "<langN>"

#: ../../docs/getting_started/workflow/assets/importing_translations.rst:60
msgid "KEY1"
msgstr "KEY1"

#: ../../docs/getting_started/workflow/assets/importing_translations.rst:60
#: ../../docs/getting_started/workflow/assets/importing_translations.rst:62
#: ../../docs/getting_started/workflow/assets/importing_translations.rst:64
#: ../../docs/tutorials/misc/binary_serialization_api.rst:33
msgid "string"
msgstr "문자열"

#: ../../docs/getting_started/workflow/assets/importing_translations.rst:62
msgid "KEY2"
msgstr "KEY2"

#: ../../docs/getting_started/workflow/assets/importing_translations.rst:64
msgid "KEYN"
msgstr "KEYN"

#: ../../docs/getting_started/workflow/assets/importing_translations.rst:67
#, fuzzy
msgid ""
"The \"lang\" tags must represent a language, which must be one of the :ref:"
"`valid locales <doc_locales>` supported by the engine. The \"KEY\" tags must "
"be unique and represent a string universally (they are usually in uppercase, "
"to differentiate from other strings). These keys will be replaced at runtime "
"by the matching translated string. Note that the case is important, \"KEY1\" "
"and \"Key1\" will be different keys. The top-left cell is ignored and can be "
"left empty or having any content. Here's an example:"
msgstr ""
"\"lang\" 태그는 언어를 표현해야 하는데, 엔진이 지원하는 :ref:`valid locales "
"<doc_locales>` 중 하나로 표현해야 합니다. \"KEY\" 태그는 고유해야 하고 보편적"
"으로 문자열을 표현해야 합니다 (보통은 대문자로, 다른 문자열과 구분됩니다). 예"
"제입니다:"

#: ../../docs/getting_started/workflow/assets/importing_translations.rst:77
#: ../../docs/tutorials/i18n/locales.rst:178
msgid "en"
msgstr "en"

#: ../../docs/getting_started/workflow/assets/importing_translations.rst:77
#: ../../docs/tutorials/i18n/locales.rst:220
msgid "es"
msgstr "es"

#: ../../docs/getting_started/workflow/assets/importing_translations.rst:77
#: ../../docs/tutorials/i18n/locales.rst:372
msgid "ja"
msgstr "ja"

#: ../../docs/getting_started/workflow/assets/importing_translations.rst:79
msgid "GREET"
msgstr "GREET(인사)"

#: ../../docs/getting_started/workflow/assets/importing_translations.rst:79
msgid "Hello, friend!"
msgstr "Hello, friend!"

#: ../../docs/getting_started/workflow/assets/importing_translations.rst:79
#, fuzzy
msgid "Hola, amigo!"
msgstr "Hola, Amigo!"

#: ../../docs/getting_started/workflow/assets/importing_translations.rst:79
msgid "こんにちは"
msgstr "こんにちは"

#: ../../docs/getting_started/workflow/assets/importing_translations.rst:81
msgid "ASK"
msgstr "ASK(질문)"

#: ../../docs/getting_started/workflow/assets/importing_translations.rst:81
msgid "How are you?"
msgstr "How are you?"

#: ../../docs/getting_started/workflow/assets/importing_translations.rst:81
msgid "Cómo está?"
msgstr "Cómo está?"

#: ../../docs/getting_started/workflow/assets/importing_translations.rst:81
msgid "元気ですか"
msgstr "元気ですか"

#: ../../docs/getting_started/workflow/assets/importing_translations.rst:83
msgid "BYE"
msgstr "BYE(헤어짐)"

#: ../../docs/getting_started/workflow/assets/importing_translations.rst:83
#, fuzzy
msgid "Goodbye"
msgstr "Good Bye"

#: ../../docs/getting_started/workflow/assets/importing_translations.rst:83
msgid "Adiós"
msgstr "Adiós"

#: ../../docs/getting_started/workflow/assets/importing_translations.rst:83
msgid "さようなら"
msgstr "さようなら"

#: ../../docs/getting_started/workflow/assets/importing_translations.rst:85
msgid "QUOTE"
msgstr ""

#: ../../docs/getting_started/workflow/assets/importing_translations.rst:85
msgid "\"Hello\" said the man."
msgstr ""

#: ../../docs/getting_started/workflow/assets/importing_translations.rst:85
msgid "\"Hola\" dijo el hombre."
msgstr ""

#: ../../docs/getting_started/workflow/assets/importing_translations.rst:85
msgid "「こんにちは」男は言いました"
msgstr ""

#: ../../docs/getting_started/workflow/assets/importing_translations.rst:88
msgid ""
"The same example is shown below as a comma-separated plain text file, which "
"should be the result of editing the above in a spreadsheet. When editing the "
"plain text version, be sure to enclose with double quotes any message that "
"contains commas, line breaks or double quotes, so that commas are not parsed "
"as delimiters, line breaks don't create new entries and double quotes are "
"not parsed as enclosing characters. Be sure to escape any double quotes a "
"message may contain by preceding them with another double quote. "
"Alternatively, you can select another delimiter than comma in the import "
"options."
msgstr ""

#: ../../docs/getting_started/workflow/assets/importing_translations.rst:107
msgid "CSV importer"
msgstr "CSV 가져오기"

#: ../../docs/getting_started/workflow/assets/importing_translations.rst:109
msgid ""
"Godot will treat CSV files as translations by default. It will import them "
"and generate one or more compressed translation resource files next to it."
msgstr ""
"Godot은 CSV 파일을 기본적으로 번역을 취급합니다. 파일을 가져오고 옆에 하나 이"
"상의 압축된 번역 리소스 파일을 생성합니다."

#: ../../docs/getting_started/workflow/assets/importing_translations.rst:112
msgid ""
"Importing will also add the translation to the list of translations to load "
"when the game runs, specified in project.godot (or the project settings). "
"Godot allows loading and removing translations at runtime as well."
msgstr ""
"가져오기는 또한 게임을 실행할 때 불러올 번역 목록에 번역을 추가할 것입니다, "
"project.godot (혹은 프로젝트 설정)에서 지정됩니다. Godot는 런타임에 번역을 불"
"러오거나 삭제할 수 있도록 합니다."

#: ../../docs/getting_started/workflow/assets/importing_translations.rst:117
msgid ""
"Select the ``.csv`` file and access the **Import** dock to define import "
"options. You can toggle the compression of the imported translations, and "
"select the delimiter to use when parsing the CSV file."
msgstr ""

#: ../../docs/getting_started/workflow/assets/importing_translations.rst:123
msgid "Be sure to click **Reimport** after any change to these options."
msgstr ""

#: ../../docs/getting_started/workflow/assets/importing_scenes.rst:4
msgid "Importing 3D scenes"
msgstr "3D 씬 가져오기"

#: ../../docs/getting_started/workflow/assets/importing_scenes.rst:7
msgid "Godot scene importer"
msgstr "Godot 씬 가져오기"

#: ../../docs/getting_started/workflow/assets/importing_scenes.rst:9
msgid ""
"When dealing with 3D assets, Godot has a flexible and configurable importer."
msgstr ""
"3D 애셋을 다룰 때, Godot는 유연하면서 구성할 수 있는 가져오기를 갖고 있습니"
"다."

#: ../../docs/getting_started/workflow/assets/importing_scenes.rst:11
msgid ""
"Godot works with *scenes*. This means that the entire scene being worked on "
"in your favorite 3D DCC will be transferred as close as possible."
msgstr ""
"Godot는 *씬*\\ 으로 작업합니다. 이는 즉, 좋아하는 3D DCC에서 작업한 전체 씬"
"을 최대한 가깝게 전송한다는 것입니다."

#: ../../docs/getting_started/workflow/assets/importing_scenes.rst:14
#, fuzzy
msgid "Godot supports the following 3D *scene file formats*:"
msgstr "Godot는 다음 3D *씬 파일 형식*\\ 을 지원합니다:"

#: ../../docs/getting_started/workflow/assets/importing_scenes.rst:16
msgid "glTF 2.0. Godot has full support for text and binary formats."
msgstr ""

#: ../../docs/getting_started/workflow/assets/importing_scenes.rst:17
msgid "DAE (COLLADA), an older format that is fully supported."
msgstr ""

#: ../../docs/getting_started/workflow/assets/importing_scenes.rst:18
msgid ""
"OBJ (Wavefront) formats. It is also fully supported, but pretty limited (no "
"support for pivots, skeletons, etc)."
msgstr ""
"OBJ (Wavefront) 형식. 또한 완벽하게 지원하지만, 꽤 제한적입니다 (피봇, 스켈레"
"톤 등을 지원하지 않음)."

#: ../../docs/getting_started/workflow/assets/importing_scenes.rst:19
msgid "ESCN, a Godot specific format that Blender can export with a plugin."
msgstr ""

#: ../../docs/getting_started/workflow/assets/importing_scenes.rst:20
msgid ""
"FBX, supported via the Open Asset Import library. However, FBX is "
"proprietary so we recommend using other formats listed above, if suitable "
"for your workflow."
msgstr ""

#: ../../docs/getting_started/workflow/assets/importing_scenes.rst:23
msgid ""
"Just copy the scene file together with the texture to the project "
"repository, and Godot will do a full import."
msgstr ""
"그냥 텍스처와 함께 씬 파일을 프로젝트 저장소에 복사하면 됩니다, 그리고 Godot"
"는 완전히 가져올 것입니다."

#: ../../docs/getting_started/workflow/assets/importing_scenes.rst:25
msgid ""
"It is important that the mesh is not deformed by bones when exporting. Make "
"sure that the skeleton is reset to its T-pose or default rest pose before "
"exporting with your favorite 3D editor."
msgstr ""
"메시를 내보낼 때, 메시가 본에 의해 형태가 변하지 않는 것이 중요합니다. 좋아하"
"는 3D 편집기에서 메시를 내보낼 때, 스켈레톤이 기존의 T 포즈나 기본 휴식 포즈"
"로 되어있는지 확인하세요."

#: ../../docs/getting_started/workflow/assets/importing_scenes.rst:29
msgid "Exporting DAE files from Maya and 3DS Max"
msgstr "Maya와 3DS Max에서 DAE 파일을 가져오기"

#: ../../docs/getting_started/workflow/assets/importing_scenes.rst:31
msgid ""
"Autodesk added built-in COLLADA support to Maya and 3DS Max, but it's broken "
"by default and should not be used. The best way to export this format is by "
"using the `OpenCollada <https://github.com/KhronosGroup/OpenCOLLADA/wiki/"
"OpenCOLLADA-Tools>`__ plugins. They work well, although they are not always "
"up-to date with the latest version of the software."
msgstr ""
"Autodesk는 Maya와 3DS Max를 위한 내장 COLLADA 지원을 추가했습니다, 하지만 기"
"본적으로 고장나고 사용하지 않아야 합니다. 이 형식을 내보내는 최선의 방법은 "
"`OpenCollada <https://github.com/KhronosGroup/OpenCOLLADA/wiki/OpenCOLLADA-"
"Tools>`__ 플러그인을 사용하는 것입니다. 항상 소프트웨어의 최신 버전으로 업데"
"이트 되진 않지만 잘 작동합니다."

#: ../../docs/getting_started/workflow/assets/importing_scenes.rst:39
#, fuzzy
msgid "Exporting glTF 2.0 files from Blender"
msgstr "블렌더에서 DAE 파일 가져오기"

#: ../../docs/getting_started/workflow/assets/importing_scenes.rst:41
msgid ""
"There are three ways to export glTF files from Blender. As a glTF binary (``."
"glb`` file), glTF embedded (``.gltf`` file), and with textures (``gltf`` + "
"``.bin`` + textures)."
msgstr ""

#: ../../docs/getting_started/workflow/assets/importing_scenes.rst:44
msgid ""
"glTF binary files are the smallest of the three options. They include the "
"mesh and textures set up in Blender. When brought into Godot the textures "
"are part of the object's material file."
msgstr ""

#: ../../docs/getting_started/workflow/assets/importing_scenes.rst:47
msgid ""
"glTF embedded files function the same way as binary files. They don't "
"provide extra functionality in Godot, and shouldn't be used since they have "
"a larger file size."
msgstr ""

#: ../../docs/getting_started/workflow/assets/importing_scenes.rst:50
msgid ""
"There are two reasons to use glTF with the textures separate. One is to have "
"the scene description in a text based format and the binary data in a "
"separate binary file. This can be useful for version control if you want to "
"review changes in a text based format. The second is you need the texture "
"files separate from the material file. If you don't need either of those "
"glTF binary files are fine."
msgstr ""

#: ../../docs/getting_started/workflow/assets/importing_scenes.rst:55
msgid ""
"Blender does not export emissive textures with the glTF file. If your model "
"uses one it must be brought in separately."
msgstr ""

#: ../../docs/getting_started/workflow/assets/importing_scenes.rst:58
msgid "Exporting DAE files from Blender"
msgstr "블렌더에서 DAE 파일 가져오기"

#: ../../docs/getting_started/workflow/assets/importing_scenes.rst:60
#, fuzzy
msgid ""
"Blender has built-in COLLADA support, but it does not work properly for the "
"needs of game engines and should not be used as is."
msgstr ""
"블렌더도 내장 COLLADA 지원을 갖고 있지만, 역시 고장나고 사용해서는 안됩니다."

#: ../../docs/getting_started/workflow/assets/importing_scenes.rst:63
#, fuzzy
msgid ""
"Godot provides a `Blender plugin <https://github.com/godotengine/collada-"
"exporter>`_ that will correctly export COLLADA scenes for use in Godot."
msgstr ""
"Godot는 `파이썬 플러그인 <https://github.com/godotengine/collada-exporter>`__"
"\\ 을 지원하며 씬을 가져오는 작업이 훨씬 더 좋을 것입니다."

#: ../../docs/getting_started/workflow/assets/importing_scenes.rst:67
msgid "Exporting ESCN files from Blender"
msgstr "블렌더에서 ESCN 파일 가져오기"

#: ../../docs/getting_started/workflow/assets/importing_scenes.rst:69
msgid ""
"The most powerful one, called `godot-blender-exporter <https://github.com/"
"godotengine/godot-blender-exporter>`__. It uses a .escn file, which is kind "
"of another name for a .tscn file (Godot scene file); it keeps as much "
"information as possible from a Blender scene."
msgstr ""
"가장 강력한 것으로,`godot-blender-exporter <https://github.com/godotengine/"
"godot-blender-exporter>`__\\ 라고 부릅니다. .escn 파일을 사용하며, .tscn 파"
"일 (Godot 씬 파일)의 다른 이름의 일종입니다; 가능한 한 많은 정보를 블렌더 씬"
"에서 유지해줍니다."

#: ../../docs/getting_started/workflow/assets/importing_scenes.rst:74
msgid ""
"The ESCN exporter has a detailed `document <escn_exporter/index.html>`__ "
"describing its functionality and usage."
msgstr ""
"ESCN 내보내기는 기능과 사용법을 설명하는 세부적인 `문서 <escn_exporter/index."
"html>`__\\ 를 갖고 있습니다."

#: ../../docs/getting_started/workflow/assets/importing_scenes.rst:78
msgid "Import workflows"
msgstr "가져오기 워크플로"

#: ../../docs/getting_started/workflow/assets/importing_scenes.rst:80
msgid ""
"Godot scene importer allows different workflows regarding how data is "
"imported. Depending on many options, it is possible to import a scene with:"
msgstr ""
"Godot 씬 가져오기 어떻게 데이터를 가져오는 지에 따라 다른 워크플로가 있습니"
"다. 많은 설정에 따라, 다음으로 씬을 가져올 수 있습니다:"

#: ../../docs/getting_started/workflow/assets/importing_scenes.rst:83
msgid ""
"External materials (default): Where each material is saved to a file "
"resource. Modifications to them are kept."
msgstr ""
"외부 머티리얼 (기본 값): 각 머티리얼은 파일 리소스에 저장됩니다. 모디파이어"
"는 유지됩니다."

#: ../../docs/getting_started/workflow/assets/importing_scenes.rst:84
msgid ""
"External meshes: Where each mesh is saved to a different file. Many users "
"prefer to deal with meshes directly."
msgstr ""
"외부 메시: 각 메시는 다른 파일로 저장됩니다. 많은 사용자는 메시를 직접 처리하"
"는 것을 선호합니다."

#: ../../docs/getting_started/workflow/assets/importing_scenes.rst:85
msgid ""
"External animations: Allowing saved animations to be modified and merged "
"when sources change."
msgstr ""
"외부 애니메이션: 원본이 변경될 때 저장된 애니메이션을 수정하고 병합할 수 있도"
"록 합니다."

#: ../../docs/getting_started/workflow/assets/importing_scenes.rst:86
msgid ""
"External scenes: Save each of the root nodes of the imported scenes as a "
"separate scene."
msgstr "외부 씬: 가져온 씬의 각 루트 노드를 별도의 씬으로 저장합니다."

#: ../../docs/getting_started/workflow/assets/importing_scenes.rst:87
msgid "Single scene: A single scene file with everything built in."
msgstr "단일 씬: 모든 것이 내장된 하나의 씬 파일입니다."

#: ../../docs/getting_started/workflow/assets/importing_scenes.rst:91
msgid ""
"As different developers have different needs, this import process is highly "
"customizable."
msgstr ""
"다른 개발자가 다른 요구가 있듯이, 이 가져오기 처리는 많이 커스터마이징 할 수 "
"있습니다."

#: ../../docs/getting_started/workflow/assets/importing_scenes.rst:94
msgid "Import options"
msgstr "설정 가져오기"

#: ../../docs/getting_started/workflow/assets/importing_scenes.rst:96
msgid "The importer has several options, which will be discussed below:"
msgstr "가져오기는 여러 설정이 있고, 밑에서 설명합니다:"

#: ../../docs/getting_started/workflow/assets/importing_scenes.rst:104
msgid "Root Type"
msgstr "Root Type(루트 타입)"

#: ../../docs/getting_started/workflow/assets/importing_scenes.rst:106
msgid ""
"By default, the type of the root node in imported scenes is \"Spatial\", but "
"this can be modified."
msgstr ""
"기본적으로, 가져온 씬의 루트 노드 타입은 \"Spatial\"이지만, 수정될 수 있습니"
"다."

#: ../../docs/getting_started/workflow/assets/importing_scenes.rst:109
msgid "Root Name"
msgstr "Root Name(루트 이름)"

#: ../../docs/getting_started/workflow/assets/importing_scenes.rst:111
msgid "Allows setting a specific name to the generated root node."
msgstr "생성된 루트 노드에 특정 이름을 설정할 수 있습니다."

#: ../../docs/getting_started/workflow/assets/importing_scenes.rst:114
#, fuzzy
msgid "Root Scale"
msgstr "Root Name(루트 이름)"

#: ../../docs/getting_started/workflow/assets/importing_scenes.rst:116
#, fuzzy
msgid "The scale of the root node."
msgstr "스크립트의 역할"

#: ../../docs/getting_started/workflow/assets/importing_scenes.rst:119
msgid "Custom Script"
msgstr "Custom Script(맞춤 스크립트)"

#: ../../docs/getting_started/workflow/assets/importing_scenes.rst:121
msgid ""
"A special script to process the whole scene after import can be provided. "
"This is great for post processing, changing materials, doing funny stuff "
"with the geometry etc."
msgstr ""
"특수 스크립트로 가져오기 후 전체 씬을 처리하기 위해 제공할 수 있습니다. 후처"
"리, 머티리얼 변경, 아니면 기하학으로 하는 재미있는 짓 등에 좋습니다."

#: ../../docs/getting_started/workflow/assets/importing_scenes.rst:125
msgid "Create a script like this:"
msgstr "다음과 같은 스크립트를 만드세요:"

#: ../../docs/getting_started/workflow/assets/importing_scenes.rst:136
msgid ""
"The ``post_import`` function takes the imported scene as argument (the "
"parameter is actually the root node of the scene). The scene that will "
"finally be used must be returned. It can be a different one."
msgstr ""
"``post_import`` 함수는 가져온 씬을 인수로 받습니다 (매개변수는 사실 씬의 루"
"트 노드입니다). 마지막으로 사용되는 씬은 반환되어야 합니다. 다른 것이 될 수 "
"있습니다."

#: ../../docs/getting_started/workflow/assets/importing_scenes.rst:141
#: ../../docs/getting_started/workflow/assets/importing_scenes.rst:160
#: ../../docs/getting_started/workflow/assets/importing_scenes.rst:215
#: ../../docs/getting_started/workflow/assets/importing_scenes.rst:307
msgid "Storage"
msgstr "Storage(저장소)"

#: ../../docs/getting_started/workflow/assets/importing_scenes.rst:143
msgid ""
"By default, Godot imports a single scene. This option allows specifying that "
"nodes below the root will each be a separate scene and instanced into the "
"imported one."
msgstr ""
"기본적으로, Godot은 하나의 씬을 가져옵니다. 이 설정으로 루트 아래의 노드들을 "
"각자의 씬으로 만들고 가져온 것을 인스턴스 하도록 지정할 수 있습니다."

#: ../../docs/getting_started/workflow/assets/importing_scenes.rst:147
msgid ""
"Of course, instancing such imported scenes in other places manually works, "
"too."
msgstr "물론 다른 곳에서 가져온 씬을 인스턴스 하는 것도 수동으로는 작동합니다."

#: ../../docs/getting_started/workflow/assets/importing_scenes.rst:154
#: ../../docs/tutorials/io/data_paths.rst:51
msgid "Location"
msgstr "Location(위치)"

#: ../../docs/getting_started/workflow/assets/importing_scenes.rst:156
msgid ""
"Godot supports materials in meshes or nodes. By default, materials will be "
"put on each node."
msgstr ""
"Godot는 메시나 노드에서 머티리얼을 지원합니다. 기본적으로, 머티리얼은 각 노드"
"에 들어갑니다."

#: ../../docs/getting_started/workflow/assets/importing_scenes.rst:162
msgid ""
"Materials can be stored within the scene or in external files. By default, "
"they are stored in external files so editing them is possible. This is "
"because most 3D DCCs don't have the same material options as those present "
"in Godot."
msgstr ""
"머티리얼은 씬이나 외부 파일 안에 저장될 수 있습니다. 기본적으로, 외부 파일에 "
"저장되므로 편집하는 것이 가능합니다. 대부분의 3D DCC가 Godot와 같은 머티리얼 "
"설정을 갖고 있지 않기 때문입니다."

#: ../../docs/getting_started/workflow/assets/importing_scenes.rst:166
msgid ""
"When materials are built-in, they will be lost each time the source scene is "
"modified and re-imported."
msgstr ""
"머티리얼이 내장된 상태일 때, 원본 씬을 수정하고 다시 가져올 때마다 사라질 것"
"입니다."

#: ../../docs/getting_started/workflow/assets/importing_scenes.rst:170
msgid "Keep On Reimport"
msgstr "Keep On Reimport(다시 가져오기 유지)"

#: ../../docs/getting_started/workflow/assets/importing_scenes.rst:172
msgid ""
"Once materials are edited to use Godot features, the importer will keep the "
"edited ones and ignore the ones coming from the source scene. This option is "
"only present if materials are saved as files."
msgstr ""
"한번Godot 기능을 사용하기 위해 머티리얼을 편집한다면, 가져오기는 편집한 것을 "
"유지하고 원본 씬에서 오는 것은 무시합니다. 이 설정은 머티리얼이 파일로 저장"
"된 경우에만 존재합니다."

#: ../../docs/getting_started/workflow/assets/importing_scenes.rst:177
msgid "Meshes"
msgstr "Meshes(메시)"

#: ../../docs/getting_started/workflow/assets/importing_scenes.rst:180
msgid "Compress"
msgstr "Compress(압축)"

#: ../../docs/getting_started/workflow/assets/importing_scenes.rst:182
msgid ""
"Makes meshes use less precise numbers for multiple aspects of the mesh in "
"order to save space."
msgstr ""
"공간을 절약하기 위해 메시의 여러 측면에 덜 정확한 수치를 사용하도록 합니다."

#: ../../docs/getting_started/workflow/assets/importing_scenes.rst:195
msgid "These are:"
msgstr "이렇게 됩니다:"

#: ../../docs/getting_started/workflow/assets/importing_scenes.rst:186
msgid ""
"Transform Matrix (Location, rotation, and scale)             : 32-bit float "
"to 16-bit signed integer."
msgstr ""
"Transform Matrix (Location, rotation, and scale)             : 32비트 실수에"
"서 16비트 부호 있는 정수로."

#: ../../docs/getting_started/workflow/assets/importing_scenes.rst:187
msgid ""
"Vertices                                                     : 32-bit float "
"to 16-bit signed integer."
msgstr ""
"Vertices                                                     : 32비트 실수에"
"서 16비트 부호 있는 정수로."

#: ../../docs/getting_started/workflow/assets/importing_scenes.rst:188
msgid ""
"Normals                                                      : 32-bit float "
"to 32-bit unsigned integer."
msgstr ""
"Normals                                                      : 32비트 실수에"
"서 32비트 부호 있는 정수로."

#: ../../docs/getting_started/workflow/assets/importing_scenes.rst:189
msgid ""
"Tangents                                                     : 32-bit float "
"to 32-bit unsigned integer."
msgstr ""
"Tangents                                                     : 32비트 실수에"
"서 32비트 부호 있는 정수로."

#: ../../docs/getting_started/workflow/assets/importing_scenes.rst:190
msgid ""
"Vertex Colors                                                : 32-bit float "
"to 32-bit unsigned integer."
msgstr ""
"Vertex Colors                                                : 32비트 실수에"
"서 32비트 부호 있는 정수로."

#: ../../docs/getting_started/workflow/assets/importing_scenes.rst:191
msgid ""
"UV                                                           : 32-bit float "
"to 32-bit unsigned integer."
msgstr ""
"UV                                                           : 32비트 실수에"
"서 32비트 부호 있는 정수로."

#: ../../docs/getting_started/workflow/assets/importing_scenes.rst:192
msgid ""
"UV2                                                          : 32-bit float "
"to 32-bit unsigned integer."
msgstr ""
"UV2                                                          : 32비트 실수에"
"서 32비트 부호 있는 정수로."

#: ../../docs/getting_started/workflow/assets/importing_scenes.rst:193
msgid ""
"Vertex weights                                               : 32-bit float "
"to 16-bit unsigned integer."
msgstr ""
"Vertex weights                                               : 32비트 실수에"
"서 16비트 부호 있는 정수로."

#: ../../docs/getting_started/workflow/assets/importing_scenes.rst:194
msgid ""
"Armature bones                                               : 32-bit float "
"to 16-bit unsigned integer."
msgstr ""
"Armature bones                                               : 32비트 실수에"
"서 16비트 부호 있는 정수로."

#: ../../docs/getting_started/workflow/assets/importing_scenes.rst:195
msgid ""
"Array index                                                  : 32-bit or 16-"
"bit unsigned integer based on how many elements there are."
msgstr ""
"Array index                                                  : 얼마나 많은 원"
"소가 있는 지에 따라 32비트나 16비트 부호 있는 정수로."

#: ../../docs/getting_started/workflow/assets/importing_scenes.rst:199
msgid "Additional info:"
msgstr "추가 정보:"

#: ../../docs/getting_started/workflow/assets/importing_scenes.rst:198
msgid ""
"UV2 = The second UV channel for detail textures and baked lightmap textures."
msgstr "UV2 = 세부적인 텍스처와 베이크된 텍스처를 위한 두 번째 UV 채널."

#: ../../docs/getting_started/workflow/assets/importing_scenes.rst:199
msgid ""
"Array index = An array of numbers that number each element of the arrays "
"above; i.e. they number the vertices and normals."
msgstr ""
"Array index = 위 배열의 각 요소에 순서를 매기는 배열; 즉, 꼭짓점과 노말에 순"
"서를 매깁니다."

#: ../../docs/getting_started/workflow/assets/importing_scenes.rst:201
msgid ""
"In some cases, this might lead to loss of precision, so disabling this "
"option may be needed. For instance, if a mesh is very big or there are "
"multiple meshes being imported that cover a large area, compressing the "
"import of this mesh(es) may lead to gaps in geometry or vertices not being "
"exactly where they should be."
msgstr ""
"이로 인해 정밀도가 떨어질 수 있으니, 필요하다면 이 옵션을 끌 수 있습니다. 예"
"를 들어, 메시가 매우 크거나 큰 영역을 포함하는 여러 메시를 가져온다면, 메시"
"의 가져오기를 압축하는 것으로 기하학이나 꼭짓점이 있어야 할 자리에 없을 수도 "
"있습니다."

#: ../../docs/getting_started/workflow/assets/importing_scenes.rst:207
msgid "Ensure Tangents"
msgstr "Ensure Tangents(탄젠트 보장)"

#: ../../docs/getting_started/workflow/assets/importing_scenes.rst:209
msgid ""
"If textures with normal mapping are to be used, meshes need to have tangent "
"arrays. This option ensures that these are generated if not present in the "
"source scene. Godot uses Mikktspace for this, but it's always better to have "
"them generated in the exporter."
msgstr ""
"노말 맵핑 된 텍스처가 사용된다면, 메시는 탄젠트 배열을 가져야 합니다. 이 설정"
"으로 원본 씬에서 탄젠트 배열이 없다면 생성하게 해줍니다. Godot는 Mikktspace"
"를 사용하지만, 가져오기에서 생성하는 것이 항상 더 좋습니다."

#: ../../docs/getting_started/workflow/assets/importing_scenes.rst:217
msgid ""
"Meshes can be stored in separate files (resources) instead of built-in. This "
"does not have much practical use unless one wants to build objects with them "
"directly."
msgstr ""
"메시는 내장 대신 별개의 파일 (리소스)로 저장될 수 있습니다. 직접 객체를 짓는 "
"것이 아니라면 이것은 꽤 실용적인 사용을 갖지는 않습니다."

#: ../../docs/getting_started/workflow/assets/importing_scenes.rst:220
msgid ""
"This option is provided to help those who prefer working directly with "
"meshes instead of scenes."
msgstr ""
"이 설정은 씬 대신 메시로 직접 작업하기를 선호하는 사람들을 돕기 위해 제공됩니"
"다."

#: ../../docs/getting_started/workflow/assets/importing_scenes.rst:224
msgid "Light Baking"
msgstr ""

#: ../../docs/getting_started/workflow/assets/importing_scenes.rst:226
msgid "Whether or not the mesh is used in baked lightmaps."
msgstr ""

#: ../../docs/getting_started/workflow/assets/importing_scenes.rst:228
msgid "**Disabled:** The mesh is not used in baked lightmaps."
msgstr ""

#: ../../docs/getting_started/workflow/assets/importing_scenes.rst:229
msgid "**Enable:** The mesh is used in baked lightmaps."
msgstr ""

#: ../../docs/getting_started/workflow/assets/importing_scenes.rst:230
msgid ""
"**Gen Lightmaps:** The mesh is used in baked lightmaps, and unwraps a second "
"UV layer for lightmaps."
msgstr ""

#: ../../docs/getting_started/workflow/assets/importing_scenes.rst:232
#, fuzzy
msgid "For more information on light baking see :ref:`doc_baked_lightmaps`."
msgstr "더 자세한 내용은, :ref:`doc_c_sharp_differences` 페이지를 참고하세요."

#: ../../docs/getting_started/workflow/assets/importing_scenes.rst:235
msgid "External Files"
msgstr "External Files(외부 파일)"

#: ../../docs/getting_started/workflow/assets/importing_scenes.rst:237
msgid ""
"Generated meshes and materials can be optionally stored in a subdirectory "
"with the name of the scene."
msgstr ""
"생성된 메시와 머티리얼은 하위 디렉토리에 씬의 이름을 가지면서 선택적으로 저장"
"될 수 있습니다."

#: ../../docs/getting_started/workflow/assets/importing_scenes.rst:241
msgid "Animation options"
msgstr "애니메이션 설정"

#: ../../docs/getting_started/workflow/assets/importing_scenes.rst:243
msgid ""
"Godot provides many options regarding how animation data is dealt with. Some "
"exporters (such as Blender) can generate many animations in a single file. "
"Others, such as 3DS Max or Maya, need many animations put into the same "
"timeline or, at worst, put each animation in a separate file."
msgstr ""
"Godot는 애니메이션 데이터를 어떻게 다루는 지에 따라 많은 설정을 제공합니다. "
"(블렌더처럼) 일부 내보내기는 하나의 파일에 많은 애니메이션을 생성할 수 있습니"
"다. 3DS Max나 Maya와 같은 것은 같은 타임라인에 많은 애니메이션을 넣어야 하거"
"나, 최악의 경우, 애니메이션을 별도의 파일에 넣어야 합니다."

#: ../../docs/getting_started/workflow/assets/importing_scenes.rst:250
msgid "Import of animations is enabled by default."
msgstr "애니메이션 가져오기는 기본적으로 활성화되어 있습니다."

#: ../../docs/getting_started/workflow/assets/importing_scenes.rst:253
msgid "FPS"
msgstr "초당 프레임"

#: ../../docs/getting_started/workflow/assets/importing_scenes.rst:255
msgid ""
"Most 3D export formats store animation timeline in seconds instead of "
"frames. To ensure animations are imported as faithfully as possible, please "
"specify the frames per second used to edit them. Failing to do this may "
"result in shaky animations."
msgstr ""
"대부분의 3D 가져오기 형식은 프레임 대신 초 당 타임라인으로 애니메이션을 저장"
"합니다. 애니메이션을 가능한 한 충실하게 가져오기 위해선, 편집에 사용된 초 당 "
"프레임을 지정하세요. 이를 잘못하면 부들거리는 애니메이션을 만들게 됩니다."

#: ../../docs/getting_started/workflow/assets/importing_scenes.rst:260
msgid "Filter Script"
msgstr "Filter Script(필터 스크립트)"

#: ../../docs/getting_started/workflow/assets/importing_scenes.rst:262
#, fuzzy
msgid ""
"It is possible to specify a filter script in a special syntax to decide "
"which tracks from which animations should be kept."
msgstr ""
"어떤 애니메이션에서 트랙을 유지할 지 결정하기 위한 특수 문법에 filter script"
"를 지정할 수 있습니다. (@TODO 이것은 문서가 필요합니다)"

#: ../../docs/getting_started/workflow/assets/importing_scenes.rst:265
msgid ""
"The filter script is executed against each imported animation. The syntax "
"consists of two types of statements, the first for choosing which animations "
"to filter, and the second for filtering individual tracks within the matched "
"animation. All name patterns are performed using a case insensitive "
"expression match, using ``?`` and ``*`` wildcards (using ``String.matchn()`` "
"under the hood)."
msgstr ""

#: ../../docs/getting_started/workflow/assets/importing_scenes.rst:271
msgid ""
"The script must start with an animation filter statement (as denoted by the "
"line beginning with an ``@``). For example, if we would like to apply "
"filters to all imported animations which have a name ending in ``\"_Loop"
"\"``::"
msgstr ""

#: ../../docs/getting_started/workflow/assets/importing_scenes.rst:277
msgid ""
"Similarly, additional patterns can be added to the same line, separated by "
"commas. Here is a modified example to additionally *include* all animations "
"with names that begin with ``\"Arm_Left\"``, but also *exclude* all "
"animations which have names ending in ``\"Attack\"``::"
msgstr ""

#: ../../docs/getting_started/workflow/assets/importing_scenes.rst:283
msgid ""
"Following the animation selection filter statement, we add track filtering "
"patterns to indicate which animation tracks should be kept or discarded. If "
"no track filter patterns are specified, then all tracks within the matched "
"animations will be discarded!"
msgstr ""

#: ../../docs/getting_started/workflow/assets/importing_scenes.rst:287
msgid ""
"It's important to note that track filter statements are applied in order for "
"each track within the animation, this means that one line may include a "
"track, a later rule can still discard it. Similarly, a track excluded by an "
"early rule may then be re-included once again by a filter rule further down "
"in the filter script."
msgstr ""

#: ../../docs/getting_started/workflow/assets/importing_scenes.rst:292
msgid ""
"For example: include all tracks in animations with names ending in ``\"_Loop"
"\"``, but discard any tracks affecting a ``\"Skeleton\"`` which end in ``"
"\"Control\"``, unless they have ``\"Arm\"`` in their name::"
msgstr ""

#: ../../docs/getting_started/workflow/assets/importing_scenes.rst:301
msgid ""
"In the above example, tracks like ``\"Skeleton:Leg_Control\"`` would be "
"discarded, while tracks such as ``\"Skeleton:Head\"`` or ``\"Skeleton:"
"Arm_Left_Control\"`` would be retained."
msgstr ""

#: ../../docs/getting_started/workflow/assets/importing_scenes.rst:304
msgid ""
"Any track filter lines that do not begin with a ``+`` or ``-`` are ignored."
msgstr ""

#: ../../docs/getting_started/workflow/assets/importing_scenes.rst:309
msgid ""
"By default, animations are saved as built-in. It is possible to save them to "
"a file instead. This allows adding custom tracks to the animations and "
"keeping them after a reimport."
msgstr ""
"기본적으로, 애니메이션은 내장으로 저장됩니다. 대신 파일에 애니메이션을 저장"
"할 수 있습니다. 이렇게 하면 맞춤 트랙을 애니메이션에 추가하고 다시 가져온 후"
"에도 이를 유지할 수 있습니다."

#: ../../docs/getting_started/workflow/assets/importing_scenes.rst:313
msgid "Optimizer"
msgstr "Optimizer(최적화 도구)"

#: ../../docs/getting_started/workflow/assets/importing_scenes.rst:315
msgid ""
"When animations are imported, an optimizer is run, which reduces the size of "
"the animation considerably. In general, this should always be turned on "
"unless you suspect that an animation might be broken due to it being enabled."
msgstr ""
"애니메이션을 가져올 때, Optimizer는 실행됩니다, 이걸로 애니메이션의 크기는 상"
"당히 줄어듭니다. 일반적으로, 애니메이션이 활성화되어 있기 때문에 애니메이션"
"이 손상되었다고 의심되는 상황이 아니라면 항상 켜져 있어야 합니다."

#: ../../docs/getting_started/workflow/assets/importing_scenes.rst:319
msgid "Clips"
msgstr "Clips(클립)"

#: ../../docs/getting_started/workflow/assets/importing_scenes.rst:321
msgid ""
"It is possible to specify multiple animations from a single timeline as "
"clips. Specify from which frame to which frame each clip must be taken (and, "
"of course, don't forget to specify the FPS option above)."
msgstr ""
"하나의 타임라인에서 여러 애니메이션을 클립처럼 지정하는 것이 가능합니다. 어"
"떤 프레임에서 각 클립을 가져와야 하는 프레임으로 지정하세요 (그리고 물론, 위"
"의 FPS 설정을 지정하는 것도 잊지 마세요)."

#: ../../docs/getting_started/workflow/assets/importing_scenes.rst:325
msgid "Scene inheritance"
msgstr "씬 상속"

#: ../../docs/getting_started/workflow/assets/importing_scenes.rst:327
#, fuzzy
msgid ""
"In many cases, it may be desired to make modifications to the imported "
"scene. By default, this is not possible because if the source asset changes "
"(source ``.dae``, ``.gltf``, ``.obj`` file re-exported from 3D modelling "
"app), Godot will re-import the whole scene."
msgstr ""
"많은 상황에서, 가져온 씬을 수정하고 싶을 것입니다. 기본적으로 원본 애셋이 바"
"뀌기 때문에 그렇게 할 수는 없고 (3D 모델링 앱에서 다시 가져온 원본 .dae, ."
"gltf, .obj 파일), Godot는 전체 씬을 다시 가져올 것입니다."

#: ../../docs/getting_started/workflow/assets/importing_scenes.rst:330
msgid ""
"It is possible, however, to make local modifications by using *Scene "
"Inheritance*. Try to open the imported scene and the following dialog will "
"appear:"
msgstr ""
"하지만, *씬 상속*\\ 을 사용하면 지역 수정을 만드는 것이 가능합니다. 가져온 씬"
"을 열면 다음 대화 상자가 나타납니다:"

#: ../../docs/getting_started/workflow/assets/importing_scenes.rst:335
msgid "In inherited scenes, the only limitations for modifications are:"
msgstr "상속된 씬에서, 수정에 대한 유일한 제한은 다음과 같습니다:"

#: ../../docs/getting_started/workflow/assets/importing_scenes.rst:337
msgid "Nodes can't be removed (but can be added anywhere)."
msgstr "노드는 삭제될 수 없습니다 (하지만 어디에나 추가될 수 있습니다)."

#: ../../docs/getting_started/workflow/assets/importing_scenes.rst:338
msgid ""
"Sub-Resources can't be edited (save them externally as described above for "
"this)"
msgstr ""
"하위 리소스를 편집할 수 없습니다 (이를 위해선 위에서 설명했듯 외부로 저장해"
"야 합니다)"

#: ../../docs/getting_started/workflow/assets/importing_scenes.rst:340
msgid "Other than that, everything is allowed!"
msgstr "그 외에는 모든 것이 허용됩니다!"

#: ../../docs/getting_started/workflow/assets/importing_scenes.rst:343
msgid "Import hints"
msgstr "가져오기 힌트"

#: ../../docs/getting_started/workflow/assets/importing_scenes.rst:345
msgid ""
"Many times, when editing a scene, there are common tasks that need to be "
"done after exporting:"
msgstr "여러번 씬을 편집할 때, 내보낸 후 해야 하는 일반적인 작업이 있습니다:"

#: ../../docs/getting_started/workflow/assets/importing_scenes.rst:347
msgid "Adding collision detection to objects"
msgstr "객체에 충돌 감지를 추가하기"

#: ../../docs/getting_started/workflow/assets/importing_scenes.rst:348
msgid "Setting objects as navigation meshes"
msgstr "객체를 내비게이션 메시로 설정하기"

#: ../../docs/getting_started/workflow/assets/importing_scenes.rst:349
msgid ""
"Deleting nodes that are not used in the game engine (like specific lights "
"used for modelling)"
msgstr ""
"(모델링에 사용되는 특정 빛과 같이) 게임 엔진에 사용되는 않는 노드 지우기"

#: ../../docs/getting_started/workflow/assets/importing_scenes.rst:351
msgid ""
"To simplify this workflow, Godot offers a few suffixes that can be added to "
"the names of the objects in your 3D modelling software. When imported, Godot "
"will detect them and perform actions automatically:"
msgstr ""
"이 워크플로를 간단히 하기 위해, Godot는 3D 모델링 소프트웨어에서 객체의 이름"
"에 붙일 수 있는 일부 접미사를 제공합니다. 가져올 때, Godot는 이를 감지하고 자"
"동으로 동작을 수행합니다:"

#: ../../docs/getting_started/workflow/assets/importing_scenes.rst:356
msgid "Remove nodes (-noimp)"
msgstr "노드 삭제 (-noimp)"

#: ../../docs/getting_started/workflow/assets/importing_scenes.rst:358
msgid ""
"Node names that have this suffix will be removed at import time, no matter "
"what their type is. They will not appear in the imported scene."
msgstr ""
"이 접미사를 갖고 있는 이름의 노드는 가져오는 순간 삭제될 것이며, 이는 타입과 "
"관계없습니다. 가져온 씬에서는 나타나지 않습니다."

#: ../../docs/getting_started/workflow/assets/importing_scenes.rst:362
msgid "Create collisions (-col, -colonly, -convcolonly)"
msgstr "충돌 생성 (-col, -colonly, -convcolonly)"

#: ../../docs/getting_started/workflow/assets/importing_scenes.rst:364
msgid ""
"Option \"-col\" will work only for Mesh nodes. If it is detected, a child "
"static collision node will be added, using the same geometry as the mesh."
msgstr ""
"\"-col\" 설정은 오직 Mesh 노드에만 작동할 것입니다. 이것이 감지되면, 메시와 "
"같은 기하학을 사용하여 자식 정적 충돌 노드가 추가될 것입니다."

#: ../../docs/getting_started/workflow/assets/importing_scenes.rst:367
msgid ""
"However, it is often the case that the visual geometry is too complex or too "
"un-smooth for collisions, which ends up not working well."
msgstr ""
"하지만, 시각적인 기하학이 너무 복잡하거나 충돌에 너무 부드럽지 않은 경우, 잘 "
"작업되지 않을 수 있습니다."

#: ../../docs/getting_started/workflow/assets/importing_scenes.rst:370
msgid ""
"To solve this, the \"-colonly\" modifier exists, which will remove the mesh "
"upon import and create a :ref:`class_staticbody` collision instead. This "
"helps the visual mesh and actual collision to be separated."
msgstr ""
"이를 해결하기 위해, \"-colonly\" 모디파이어가 존재합니다, 가져오면 메시는 제"
"거되고 :ref:`class_staticbody` 충돌이 대신 생성됩니다. 이렇게 하면 시각적 메"
"시와 실제 충돌을 분리할 수 있습니다."

#: ../../docs/getting_started/workflow/assets/importing_scenes.rst:374
msgid ""
"Option \"-convcolonly\" will create a :ref:`class_convexpolygonshape` "
"instead of a :ref:`class_concavepolygonshape`."
msgstr ""
"\"-convcolonly\" 설정은 :ref:`class_concavepolygonshape` 대신 :ref:"
"`class_convexpolygonshape`\\ 를 만들 것입니다."

#: ../../docs/getting_started/workflow/assets/importing_scenes.rst:376
msgid ""
"Option \"-colonly\" can also be used with Blender's empty objects. On "
"import, it will create a :ref:`class_staticbody` with a collision node as a "
"child. The collision node will have one of a number of predefined shapes, "
"depending on Blender's empty draw type:"
msgstr ""
"\"-colonly\" 설정은 블렌더의 Empty 객체와 함께 사용될 수도 있습니다. 가져올 "
"때, :ref:`class_staticbody`\\ 와 자식으로 충돌 노드를 생성할 것입니다. 충돌 "
"노드는 미리 정의된 모양 중 하나를 가지며, 블렌더의 Empty 형태 타입에 따라 다"
"릅니다:"

#: ../../docs/getting_started/workflow/assets/importing_scenes.rst:383
msgid "Single arrow will create a :ref:`class_rayshape`"
msgstr "Single arrow는 :ref:`class_rayshape`\\ 를 만들 것입니다"

#: ../../docs/getting_started/workflow/assets/importing_scenes.rst:384
msgid "Cube will create a :ref:`class_boxshape`"
msgstr "Cube는 :ref:`class_boxshape`\\ 를 만들 것입니다"

#: ../../docs/getting_started/workflow/assets/importing_scenes.rst:385
msgid "Image will create a :ref:`class_planeshape`"
msgstr "Image는 :ref:`class_planeshape`\\ 를 만들 것입니다"

#: ../../docs/getting_started/workflow/assets/importing_scenes.rst:386
msgid ""
"Sphere (and the others not listed) will create a :ref:`class_sphereshape`"
msgstr ""
"Sphere (그리고 나열되지 않은 나머지)는 :ref:`class_sphereshape`\\ 를 만들 것"
"입니다"

#: ../../docs/getting_started/workflow/assets/importing_scenes.rst:388
msgid ""
"For better visibility in Blender's editor, the user can set \"X-Ray\" option "
"on collision empties and set some distinct color for them in User "
"Preferences / Themes / 3D View / Empty."
msgstr ""
"블렌더의 편집기에서 더 좋은 가시성을 위해, 충돌 Empty에 \"X-Ray\"를 설정하고 "
"User Preferences / Themes / 3D View / Empty에서 뚜렷한 색상을 설정할 수 있습"
"니다."

#: ../../docs/getting_started/workflow/assets/importing_scenes.rst:392
msgid "Create navigation (-navmesh)"
msgstr "내비게이션 생성 (-navmesh)"

#: ../../docs/getting_started/workflow/assets/importing_scenes.rst:394
msgid ""
"A mesh node with this suffix will be converted to a navigation mesh. "
"Original Mesh node will be removed."
msgstr ""
"이 접미사를 가진 메시 노드는 내비게이션 메시로 변환될 것입니다. 기존 메시 노"
"드는 삭제될 것입니다."

#: ../../docs/getting_started/workflow/assets/importing_scenes.rst:398
msgid "Create a VehicleBody (-vehicle)"
msgstr "VehicleBody 만들기 (-vehicle)"

#: ../../docs/getting_started/workflow/assets/importing_scenes.rst:400
msgid ""
"A mesh node with this suffix will be imported as a child to a :ref:"
"`VehicleBody <class_VehicleBody>` node."
msgstr ""
"이 접미사를 가진 메시 노드는 :ref:`VehicleBody <class_VehicleBody>` 노드의 자"
"식으로 가져오게 됩니다."

#: ../../docs/getting_started/workflow/assets/importing_scenes.rst:403
msgid "Create a VehicleWheel (-wheel)"
msgstr "VehicleWheel 만들기 (-wheel)"

#: ../../docs/getting_started/workflow/assets/importing_scenes.rst:405
msgid ""
"A mesh node with this suffix will be imported as a child to a :ref:"
"`VehicleWheel <class_VehicleWheel>` node."
msgstr ""
"이 접미사를 가진 메시 노드는 :ref:`VehicleWheel <class_VehicleWheel>` 노드의 "
"자식으로 가져오게 됩니다."

#: ../../docs/getting_started/workflow/assets/importing_scenes.rst:408
msgid "Rigid Body (-rigid)"
msgstr "리지드 바디 (-rigid)"

#: ../../docs/getting_started/workflow/assets/importing_scenes.rst:410
msgid "Creates a rigid body from this mesh."
msgstr "이 메시에서 리지드 바디를 만듭니다."

#: ../../docs/getting_started/workflow/assets/importing_scenes.rst:413
msgid "Animation loop (-loop, -cycle)"
msgstr "애니메이션 루프 (-loop, -cycle)"

#: ../../docs/getting_started/workflow/assets/importing_scenes.rst:415
msgid ""
"Animation clips in the COLLADA document that start or end with the token "
"\"loop\" or \"cycle\" will be imported as a Godot Animation with the loop "
"flag set. This is case-sensitive and does not require a hyphen."
msgstr ""
"시작과 끝에 \"loop\"나 \"cycle\" 표시가 있는 COLLADA 문서에서 애니메이션 클립"
"은 루프 플래그가 설정된 Godot 애니메이션을 가져올 것입니다. 대소문자를 구분하"
"고 하이픈(-)이 필요하지 않습니다."

#: ../../docs/getting_started/workflow/assets/importing_scenes.rst:419
msgid ""
"In Blender, this requires using the NLA Editor and naming the Action with "
"the \"loop\" or \"cycle\" prefix or suffix."
msgstr ""
"블렌더에서, 이를 위해 NLA 편집기를 사용하여 Action 이름에 \"loop\"나 \"cycle"
"\" 접두사 혹은 접미사를 붙여야 합니다."

#: ../../docs/getting_started/workflow/export/index.rst:2
msgid "Export"
msgstr "내보내기"

#: ../../docs/getting_started/workflow/export/exporting_projects.rst:4
msgid "Exporting projects"
msgstr "프로젝트 내보내기"

#: ../../docs/getting_started/workflow/export/exporting_projects.rst:9
msgid "Why export?"
msgstr "왜 내보내나요?"

#: ../../docs/getting_started/workflow/export/exporting_projects.rst:11
msgid ""
"Originally, Godot did not have any means to export projects. The developers "
"would compile the proper binaries and build the packages for each platform "
"manually."
msgstr ""
"원래, Godot는 프로젝트를 내보내는 수단이 없었습니다. 개발자는 적절한 바이너리"
"를 컴파일하고 각 플랫폼으로 패키지를 수동으로 만들었습니다."

#: ../../docs/getting_started/workflow/export/exporting_projects.rst:15
msgid ""
"When more developers (and even non-programmers) started using it, and when "
"our company started taking more projects at the same time, it became evident "
"that this was a bottleneck."
msgstr ""
"더 많은 개발자가 (그리고 심지어 비프로그래머까지) Godot를 사용하기 시작했고, "
"우리 회사가 동시에 더 많은 프로젝트를 시작하면서, 이것이 병목 현상인 것이 분"
"명해 졌습니다."

#: ../../docs/getting_started/workflow/export/exporting_projects.rst:20
msgid "On PC"
msgstr "PC에서"

#: ../../docs/getting_started/workflow/export/exporting_projects.rst:22
msgid ""
"Distributing a game project on PC with Godot is rather easy. Drop the Godot "
"binary in the same directory as the ``project.godot`` file, then compress "
"the project directory and you are done."
msgstr ""
"Godot로 PC에서 게임 프로젝트를 배포하는 것은 비교적 쉽습니다. Godot 바이너리"
"를 ``project.godot`` 파일의 형태로 같은 디렉토리에 드롭하고, 프로젝트 디렉토"
"리를 압축하면 끝입니다."

#: ../../docs/getting_started/workflow/export/exporting_projects.rst:26
msgid ""
"It sounds simple, but there are probably a few reasons why the developer may "
"not want to do this. The first one is that it may not be desirable to "
"distribute loads of files. Some developers may not like curious users "
"peeking at how the game was made, others may find it inelegant, and so on. "
"Another reason is that the developer might prefer a specially-compiled "
"binary, which is smaller in size, more optimized and does not include tools "
"like the editor and debugger."
msgstr ""
"간단해 보이지만, 개발자들이 이 방식을 원하지 않는 몇 가지 이유가 있을 것입니"
"다. 첫 째로 많은 파일을 배포하는 것은 바람직하지 않을 수 있습니다. 일부 개발"
"자들은 호기심 많은 사용자가 게임이 만들어진 방법을 알아내는 것을 좋아하지 않"
"을 수도 있고, 다른 개발자들이 게임이 잘 만들어지지 않은 것을 발견할 수도 있습"
"니다. 또 다른 이유는 개발자가 특별히 컴파일된 바이너리를 선호하기 때문인데, "
"크기 면에서 더 작지만 더 많이 최적화되어 있으면서, 편집기와 디버거같은 도구들"
"을 갖지 않기 때문입니다."

#: ../../docs/getting_started/workflow/export/exporting_projects.rst:34
msgid ""
"Finally, Godot has a simple but efficient system for creating DLCs as extra "
"package files."
msgstr ""
"마침내, Godot는 추가 패키지 파일로 DLC를 만드는 간단하면서도 효율적인 시스템"
"을 갖고 있습니다."

#: ../../docs/getting_started/workflow/export/exporting_projects.rst:38
msgid "On mobile"
msgstr "모바일에서"

#: ../../docs/getting_started/workflow/export/exporting_projects.rst:40
msgid ""
"The same scenario on mobile platforms is a little worse. To distribute a "
"project on those devices, a binary for each of those platforms is built, "
"then added to a native project together with the game data."
msgstr ""
"모바일 플랫폼에서의 같은 시나리오는 좀 더 나쁩니다. 이 기기로 프로젝트를 배포"
"하기 위해, 각 플랫폼을 위한 바이너리가 지어지고, 네이티브 프로젝트에 게임 데"
"이터와 함께 추가됩니다."

#: ../../docs/getting_started/workflow/export/exporting_projects.rst:45
msgid ""
"This can be troublesome because it means that the developer must be "
"familiarized with the SDK of each platform before even being able to export. "
"While learning each SDK is always encouraged, it can be frustrating to be "
"forced to do it at an undesired time."
msgstr ""
"이것은 개발자가 각 플랫폼의 SDK에 익숙해져야 내보낼 수 있음을 의미하기 때문"
"에 번거로울 수 있습니다. 각 SDK를 배우는 것을 항상 권장하는 반면, 바람직하지 "
"않은 시간에 SDK를 강제 실행하는 것은 방해가 될 수 있습니다."

#: ../../docs/getting_started/workflow/export/exporting_projects.rst:50
msgid ""
"There is also another problem with this approach: different devices prefer "
"some data in different formats to run. The main example of this is texture "
"compression. All PC hardware uses S3TC (BC) compression and that has been "
"standardized for more than a decade, but mobile devices use different "
"formats for texture compression, such as PVRTC (iOS) or ETC (Android)."
msgstr ""
"이 접근법에는 다른 문제가 있습니다: 기기들은 실행하기 위한 각기 다른 형식의 "
"데이터를 선호합니다. 주요 예시로 텍스처 압축이 있습니다. 모든 PC 하드웨어는 "
"S3TC (BC) 압축을 사용하고 10년 이상 표준화 되어 왔습니다, 하지만 모바일 기기"
"는 텍스처 압축에  PVRTC (iOS)나 ETC (Android)와 같이 다른 형식을 사용합니다."

#: ../../docs/getting_started/workflow/export/exporting_projects.rst:58
msgid "Export menu"
msgstr "내보내기 메뉴"

#: ../../docs/getting_started/workflow/export/exporting_projects.rst:60
msgid ""
"After many attempts at different export workflows, the current one has "
"proven to work the best. At the time of this writing, not all platforms are "
"supported yet, but the supported platforms continue to grow."
msgstr ""
"다른 내보내기 워크플로에서 여러번 시도한 끝에, 현재의 것이 작업에 가장 좋다"
"는 것을 증명했습니다. 이 글을 쓰는 시점에는, 모든 플랫폼을 지원하고 있지는 않"
"겠지만, 지원되는 플랫폼이 계속 커져 갈 것입니다."

#: ../../docs/getting_started/workflow/export/exporting_projects.rst:64
msgid "To open the export menu, click the **Export** button:"
msgstr "내보내기 메뉴를 열려면, **내보내기** 버튼을 클릭하세요:"

#: ../../docs/getting_started/workflow/export/exporting_projects.rst:68
msgid ""
"The export menu will open. However, it will be completely empty. This is "
"because we need to add an export preset."
msgstr ""
"내보내기 메뉴가 열릴 것입니다. 하지만 완전히 비어있죠. 내보내기 프리셋을 추가"
"해야 되기 때문입니다."

#: ../../docs/getting_started/workflow/export/exporting_projects.rst:73
msgid ""
"To create an export preset, click the **Add…** button at the top of the "
"export menu. This will open a drop-down list of platforms to choose from for "
"an export preset."
msgstr ""
"내보내기 프리셋을 만들기 위해, 내보내기 메뉴 위에 **추가…** 버튼을 클릭합니"
"다. 그러면 내보내기 프리셋을 고를 수 있는 플랫폼의 드롭 다운 목록이 열립니다."

#: ../../docs/getting_started/workflow/export/exporting_projects.rst:79
msgid ""
"The default options are often enough to export, so tweaking them is usually "
"not necessary. However, many platforms require additional tools (SDKs) to be "
"installed to be able to export. Additionally, Godot needs export templates "
"installed to create packages. The export menu will complain when something "
"is missing and will not allow the user to export for that platform until "
"they resolve it:"
msgstr ""
"기본 설정은 대개 내보내기에 충분합니다, 그래서 내보내기를 만져보는 것은 보통"
"은 필수적이지 않습니다. 하지만 많은 플랫폼에서는 내보낼 수 있도록 추가 도구 "
"(SDKs)가 설치되어 있어야 합니다. 또한, Godot는 패키지를 만들기 위해 설치된 내"
"보내기 템플릿이 필요합니다. 메뉴가 없으면 내보내기 메뉴가 불평하고 사용자가 "
"문제를 해결할 때까지 해당 플랫폼으로 내보낼 수 없습니다:"

#: ../../docs/getting_started/workflow/export/exporting_projects.rst:88
msgid ""
"At that time, the user is expected to come back to the documentation and "
"follow instructions on how to properly set up that platform."
msgstr ""
"그 순간, 사용자는 문서를 다시 읽고 플랫폼을 어떻게 정확히 설정하는 지에 대한 "
"설명서를 따라야 한다는 것을 직감합니다."

#: ../../docs/getting_started/workflow/export/exporting_projects.rst:94
msgid ""
"Apart from setting up the platform, the export templates must be installed "
"to be able to export projects. They can be obtained as a TPZ file (which is "
"a renamed ZIP archive) from the `download page of the website <https://www."
"godotengine.org/download>`_."
msgstr ""
"플랫폼 설정 외에도, 내보내기 템플릿은 프로젝트를 내보내기 위해 반드시 설치되"
"어 있어야 합니다. 이들은 `웹사이트의 다룬로드 페이지 <https://www."
"godotengine.org/download>`_\\ 에서 (ZIP 아카이브에서 이름을 바꾼) TPZ 파일에 "
"들어있습니다."

#: ../../docs/getting_started/workflow/export/exporting_projects.rst:99
msgid ""
"Once downloaded, they can be installed using the **Install Export "
"Templates** option in the editor:"
msgstr ""
"다운로드 했다면, 편집기에서 **내보내기 템플릿 관리** 설정으로 설치할 수 있습"
"니다:"

#: ../../docs/getting_started/workflow/export/exporting_projects.rst:105
msgid "Export mode"
msgstr "내보내기 모드"

#: ../../docs/getting_started/workflow/export/exporting_projects.rst:107
msgid ""
"When exporting, Godot makes a list of all the files to export and then "
"creates the package. There are 3 different modes for exporting:"
msgstr ""
"내보낼 때, Godot는 내보내고 패키지를 만들기 위한 모든 파일의 목록을 만듭니"
"다. 내보내기 위한 3가지 다른 모드가 있습니다:"

#: ../../docs/getting_started/workflow/export/exporting_projects.rst:110
msgid "Export every single file in the project"
msgstr "프로젝트에 모든 단일 파일을 내보내기"

#: ../../docs/getting_started/workflow/export/exporting_projects.rst:111
msgid "Export only resources (+ custom filter), this is the default."
msgstr "리소스 (+ 맞춤 필터)만 내보내기, 기본 값입니다."

#: ../../docs/getting_started/workflow/export/exporting_projects.rst:112
msgid "Export only selected resources (+ custom filter)"
msgstr "선택된 리소스 (+ 맞춤 필더)만 내보내기"

#: ../../docs/getting_started/workflow/export/exporting_projects.rst:116
msgid ""
"**Export every single file** - This mode exports every single file in the "
"project. This is good to test if something is being forgotten, but "
"developers often have a lot of unrelated stuff around in the project "
"directory, which makes it a bad idea."
msgstr ""
"**모든 단일 파일 내보내기** - 이 모드는 프로젝트에서 모든 단일 파일을 내보냅"
"니다. 잊어버린 것이 있는지 테스트하기는 좋지만, 개발자는 프로젝트 디렉토리에 "
"종종 많은 관련은 없으므로, 나쁜 생각입니다."

#: ../../docs/getting_started/workflow/export/exporting_projects.rst:121
msgid ""
"**Export only resources** - Only resources are exported. For most projects, "
"this is enough. However many developers like to use custom datafiles in "
"their games. To compensate for this, filters can be added for extra "
"extensions (for instance, ``*.txt,*.csv``)."
msgstr ""
"**리소스만 내보내기** - 리소스만 내보냅니다. 대부분의 프로젝트에는 충분합니"
"다. 하지만 많은 개발자가 게임에 맞춤 데이터 파일을 사용하기를 좋아합니다. 이"
"를 보완하기 위해, 추가 확장을 위한 필터가 추가될 수 있습니다 (예를 들어, ``*."
"txt,*.csv``\\ 가 있습니다)."

#: ../../docs/getting_started/workflow/export/exporting_projects.rst:126
msgid ""
"**Export only selected resources** - Only select resources from a list are "
"exported. This is probably overkill for most projects, but in some cases it "
"is justified (usually huge projects). This mode offers total control of what "
"is exported. Individual resources can be selected and dependency detection "
"is performed to ensure that everything needed is added."
msgstr ""
"**선택된 리소스만 내보내기** - 목록에서 선택된 리소스만 내보냅니다. 이것도 대"
"부분의 프로젝트에는 과분할 정도일지 몰라도, 몇몇 경우에는 이것이 합당하다 (보"
"통 거대한 프로젝트). 이 모드로 내보내는 것을 전부다 관리할 수 있습니다. 개별 "
"리소스를 선택하고 필요한 모든 것을 추가하도록 종속 감지 여부를 확인합니다."

#: ../../docs/getting_started/workflow/export/exporting_projects.rst:136
msgid "Exporting from the command line"
msgstr "명령줄에서 내보내기"

#: ../../docs/getting_started/workflow/export/exporting_projects.rst:138
msgid ""
"In production, it is useful to automate builds, and Godot supports this with "
"the ``--export`` and ``--export-debug`` command line parameters. Exporting "
"from the command line still requires an export preset to define the export "
"parameters. A basic invocation of the command would be:"
msgstr ""
"개발에 있어, 빌드를 자동화하는 것이 유용합니다, 그리고 Godot은 명령줄 매개 변"
"수``--export``\\ 와 ``--export-debug``\\ 를 사용하여 이를 지원합니다. 명령줄"
"에서 내보내려면 여전히 내보내기 매개 변수를 정의하기 위한 내보내기 프리셋이 "
"필요합니다. 명령의 기본 호출은 다음과 같습니다:"

#: ../../docs/getting_started/workflow/export/exporting_projects.rst:147
msgid ""
"This will export to ``some_name.exe``, assuming there is a preset called "
"\"Windows Desktop\" and the template can be found. The output path is "
"relative to the project path or absolute; it does not respect the directory "
"the command was invoked from."
msgstr ""
"\"Windows Desktop\"이라는 프리셋이 있으며 템플릿을 찾을 수 있다고 가정하면, "
"이것은 ``some_name.exe``\\ 로 내보냅니다. 출력 경로는 프로젝트 경로 또는 절"
"대 경로를 기준으로 합니다; 명령이 호출 된 디렉토리를 따르지 않습니다."

#: ../../docs/getting_started/workflow/export/exporting_projects.rst:152
#, fuzzy
msgid ""
"You can also configure it to export only the PCK or ZIP file, allowing a "
"single export to be used with multiple Godot executables. This takes place "
"if the target name ends with ``.pck`` or ``.zip``."
msgstr ""
"PCK 또는 ZIP 파일만 내보내도록 설정할 수도 있습니다 (여러 Godot 실행 파일에"
"서 단일 내보내기를 사용할 수 있음). 다음과 같은 경우에 발생합니다:"

#: ../../docs/getting_started/workflow/export/exporting_projects.rst:156
msgid ""
"It is often useful to combine the ``--export`` flag with the ``--path`` "
"flag, and to create a dedicated export preset for automated export:"
msgstr ""
"때로는 ``--export`` 플래그와 ``--path`` 플래그를 결합하거나, 자동화된 내보내"
"기를 위해 전용 내보내기 프리셋을 만드는 것이 유용합니다:"

#: ../../docs/getting_started/workflow/export/exporting_pcks.rst:4
msgid "Exporting packs, patches, and mods"
msgstr "패키지, 패치, 모드 내보내기"

#: ../../docs/getting_started/workflow/export/exporting_pcks.rst:7
msgid "Use cases"
msgstr "사용 사례"

#: ../../docs/getting_started/workflow/export/exporting_pcks.rst:9
msgid ""
"Oftentimes one would like to add functionality to one's game after it has "
"been deployed."
msgstr "때때로 게임을 배포한 후에 기능을 추가하고 싶습니다."

#: ../../docs/getting_started/workflow/export/exporting_pcks.rst:12
msgid "Examples of this include..."
msgstr "이런 예시로는..."

#: ../../docs/getting_started/workflow/export/exporting_pcks.rst:14
msgid ""
"Downloadable Content: the ability to add features and content to one's game."
msgstr ""
"다운로드 가능한 콘텐츠(DLC): 자신의 게임에 기능과 콘텐츠를 추가하는 기능."

#: ../../docs/getting_started/workflow/export/exporting_pcks.rst:15
msgid "Patches: the ability to fix a bug that is present in a shipped product."
msgstr "패치: 배포된 제품에 존재하는 버그를 고치는 기능."

#: ../../docs/getting_started/workflow/export/exporting_pcks.rst:16
msgid "Mods: grant other people the ability to create content for one's game."
msgstr "모드: 다른 사람들에게 게임의 콘텐츠를 만드는 기능을 허가함."

#: ../../docs/getting_started/workflow/export/exporting_pcks.rst:18
msgid ""
"These tools help developers to extend their development beyond the initial "
"release."
msgstr "이 도구는 개발자가 초기 출시 단계를 넘어 확장하는 것을 도와줍니다."

#: ../../docs/getting_started/workflow/export/exporting_pcks.rst:22
msgid "Overview of PCK files"
msgstr "PCK 파일의 개요"

#: ../../docs/getting_started/workflow/export/exporting_pcks.rst:24
msgid ""
"Godot enables this via a feature called **resource packs** (PCK files, with "
"extension ``.pck``)."
msgstr ""
"Godot는 **리소스 팩**\\ 이라는 기능을 통해 이를 허용합니다 (``.pck`` 확장자명"
"을 가진 PCK 파일)."

#: ../../docs/getting_started/workflow/export/exporting_pcks.rst:27
msgid "**Advantages:**"
msgstr "**이점:**"

#: ../../docs/getting_started/workflow/export/exporting_pcks.rst:29
msgid "incremental updates/patches"
msgstr "증가하는 업데이트/패치"

#: ../../docs/getting_started/workflow/export/exporting_pcks.rst:30
msgid "offer DLCs"
msgstr "DLC 제공"

#: ../../docs/getting_started/workflow/export/exporting_pcks.rst:31
msgid "offer mod support"
msgstr "모드 지원 제공"

#: ../../docs/getting_started/workflow/export/exporting_pcks.rst:32
msgid "no source code disclosure needed for mods"
msgstr "모드에 필요한 소스 코드 공개 없음"

#: ../../docs/getting_started/workflow/export/exporting_pcks.rst:33
msgid "more modular project structure"
msgstr "더 많은 모듈형 프로젝트 구조"

#: ../../docs/getting_started/workflow/export/exporting_pcks.rst:34
msgid "users don’t have to replace the entire game"
msgstr "사용자는 게임 전체를 교체할 필요가 없음"

#: ../../docs/getting_started/workflow/export/exporting_pcks.rst:36
msgid ""
"The first part of using them involves exporting and delivering the project "
"to players. Then, when one wants to add functionality or content later on, "
"they just deliver the updates via PCK files to the users."
msgstr ""
"파일을 사용하는 첫번째는 프로젝트를 내보내고 플레이어에게 전달하는 것입니다. "
"그 뒤, 나중에 기능이나 콘텐츠를 추가하려 한다면, 단지 PCK 파일을 통해 사용자"
"에게 업데이트를 전달하면 됩니다."

#: ../../docs/getting_started/workflow/export/exporting_pcks.rst:40
msgid "PCK files usually contain, but are not limited to:"
msgstr "PCK 파일은 보통 다음을 포함하지만, 제한은 없습니다:"

#: ../../docs/getting_started/workflow/export/exporting_pcks.rst:42
msgid "scripts"
msgstr "스크립트"

#: ../../docs/getting_started/workflow/export/exporting_pcks.rst:43
msgid "scenes"
msgstr "씬"

#: ../../docs/getting_started/workflow/export/exporting_pcks.rst:44
msgid "shaders"
msgstr "셰이더"

#: ../../docs/getting_started/workflow/export/exporting_pcks.rst:45
msgid "models"
msgstr "모델"

#: ../../docs/getting_started/workflow/export/exporting_pcks.rst:46
msgid "textures"
msgstr "텍스처"

#: ../../docs/getting_started/workflow/export/exporting_pcks.rst:47
msgid "sound effects"
msgstr "음향 효과"

#: ../../docs/getting_started/workflow/export/exporting_pcks.rst:48
msgid "music"
msgstr "음악"

#: ../../docs/getting_started/workflow/export/exporting_pcks.rst:49
msgid "any other asset suitable for import into the game"
msgstr "게임으로 가져오기 적당한 다른 애셋"

#: ../../docs/getting_started/workflow/export/exporting_pcks.rst:51
msgid ""
"The PCK files can even be an entirely different Godot project, which the "
"original game loads in at runtime."
msgstr ""
"PCK 파일은 원래 게임이 런타임에 불러오는 완전히 다른 Godot 프로젝트가 될 수"
"도 있습니다."

#: ../../docs/getting_started/workflow/export/exporting_pcks.rst:55
msgid "Generating PCK files"
msgstr "PCK 파일 생성하기"

#: ../../docs/getting_started/workflow/export/exporting_pcks.rst:57
msgid ""
"In order to pack all resources of a project into a PCK file open the project "
"and go to Project/Export and click on “Export PCK/Zip”. Also make sure to "
"have an export template selected while doing so."
msgstr ""
"프로젝트의 모든 리소스를 하나의 PCK 파일에 포장하기(pack) 위해선 프로젝트를 "
"열고 프로젝트/내보내기로 가고 “PCK/Zip 내보내기”를 클릭합니다. 또한 내보내기 "
"템플릿이 선택되어 있는지 확인해야 합니다."

#: ../../docs/getting_started/workflow/export/exporting_pcks.rst:63
msgid ""
"Another method would be to :ref:`export from the command line "
"<doc_command_line_tutorial_exporting>`. If the output file ends with a PCK "
"or ZIP file extension, then the export process will build that type of file "
"for the chosen platform."
msgstr ""
"다른 방법은 :ref:`명령줄에서 내보내기 <doc_command_line_tutorial_exporting>`"
"\\ 가 있습니다. 출력 파일은 PCK나 ZIP 파일 확장자명으로 끝나고, 그 뒤 내보내"
"기 처리는 선택한 플랫폼에 맞는 타입의 파일로 빌드할 것입니다."

#: ../../docs/getting_started/workflow/export/exporting_pcks.rst:69
msgid ""
"If one wishes to support mods for their game, they will need their users to "
"create similarly exported files. Assuming the original game expects a "
"certain structure for the PCK's resources and/or a certain interface for its "
"scripts, then either..."
msgstr ""
"누군가는 게임에 모드를 지원하고 싶을 것이고, 그러려면 사용자는 내보낸 파일과 "
"비슷한 파일을 만들어야 합니다. 기존 게임이 PCK의 리소스를 위한 특정 구조를, "
"그리고/또는 스크립트를 위한 특정 인터페이스를 예상한다고 가정한다면..."

#: ../../docs/getting_started/workflow/export/exporting_pcks.rst:74
msgid ""
"The developer must publicize documentation of these expected structures/ "
"interfaces, expect modders to install Godot Engine, and then also expect "
"those modders to conform to the documentation's defined API when building "
"mod content for the game (so that it will work). Users would then use "
"Godot's built in exporting tools to create a PCK file, as detailed above."
msgstr ""
"개발자는 예상되는 구조/ 인터페이스의 문서를 공개해야 하며, 모드 제작자들이 "
"Godot 엔진을 설치한다고 생각해야 합니다, 그리고 모드 제작자들도 게임의 모드 "
"콘텐츠를 제작할 때 문서에 정의된 API를 준수할 것입니다 (따라서 잘 될 것입니"
"다). 그런 다음 사용자는 Godot에 내장된 내보내기 도구로 위와 같은 PCK 파일을 "
"만듭니다."

#: ../../docs/getting_started/workflow/export/exporting_pcks.rst:80
msgid ""
"The developer uses Godot to build a GUI tool for adding their exact API "
"content to a project. This Godot tool must either run on a tools-enabled "
"build of the engine or have access to one (distributed alongside or perhaps "
"in the original game's files). The tool can then use the Godot executable to "
"export a PCK file from the command line with :ref:`OS.execute() "
"<class_OS_method_execute>`. It makes the most sense for the game to not use "
"a tool-build though (for security) and for the modding tools to *do* use a "
"tool-enabled engine build."
msgstr ""
"개발자는 Godot로 정확한 API 콘텐츠를 프로젝트에 추가하기 위한 GUI 도구를 빌드"
"합니다. Godot 도구는 도구를 쓰는 엔진의 빌드에서 실행되거나 엔진 또는 게임 파"
"일에 접근할 수 있어야 합니다. 그런 다음 도구는 Godot 실행 파일을 사용하여 명"
"령행에서 :ref:`OS.execute() <class_OS_method_execute>`\\ 로 PCK 파일을 내보냅"
"니다. (보안을 위해) 게임에는 도구 빌드를 사용하지 않으면서 모딩 도구에는 도"
"구 사용 엔진 빌드를 *사용하는 것*\\ 으로 이해하면 됩니다."

#: ../../docs/getting_started/workflow/export/exporting_pcks.rst:90
msgid "Opening PCK files at runtime"
msgstr "런타임에 PCK 파일 열기"

#: ../../docs/getting_started/workflow/export/exporting_pcks.rst:92
msgid ""
"To import a PCK file, one uses a one-liner. Keep in mind, there is no error "
"or exception if the import fails. Instead, one might have to create some "
"validation code as a layer on top. The following example expects a “mod.pck” "
"file in the directory of the games executable. The PCK file contains a "
"“mod_scene.tscn” test scene in its root."
msgstr ""
"PCK 파일을 가져오기 위해, 한마디만 하겠습니다. 가져오기가 실패한다면 오류나 "
"예외 사항은 없습니다. 대신 확인할 수 있는 코드를 만들어야 할 것입니다. 다음 "
"예제는 게임 디렉토리에 “mod.pck”으로 보이는 파일을 실행하는 것입니다. PCK 파"
"일은 루트에 “mod_scene.tscn”라는 테스트 씬을 갖고 있습니다."

#: ../../docs/getting_started/workflow/export/exporting_pcks.rst:117
msgid ""
"If you import a file with the same file path/name as one you already have in "
"your project, the imported one will replace it. This is something to watch "
"out for when creating DLC or mods (solved easily with a tool isolating mods "
"to a specific mods subfolder). However, it is also a way of creating patches "
"for one's own game. A PCK file of this kind can fix the content of a "
"previously loaded PCK."
msgstr ""
"이미 동일한 파일 경로/이름을 가진 파일을 가진 프로젝트로 파일을 가져온다면, "
"가져온 것으로 바꿀 것입니다. 이는 DLC나 모드를 만들 때 주의해야 하는 점입니"
"다 (모드를 특정 모드 하위 폴더로 분리하는 도구로 쉽게 해결됩니다). 하지만, 이"
"것 또한 게임의 패치를 만드는 방식이기도 합니다. 이런 종류의 PCK 파일은 이전"
"에 불러온 PCK 파일의 콘텐츠를 고칠 수 있습니다."

#: ../../docs/getting_started/workflow/export/exporting_pcks.rst:124
msgid ""
"For a C# project, you need to build the DLL and place it in the project "
"directory first. Then, before loading the resource pack, you need to load "
"its DLL as follows: ``Assembly.LoadFile(\"mod.dll\")``"
msgstr ""

#: ../../docs/getting_started/workflow/export/exporting_pcks.rst:131
msgid ""
"This tutorial should illustrate how easy adding mods, patches or DLC to a "
"game is. The most important thing is to identify how one plans to distribute "
"future content for their game and develop a workflow that is customized for "
"that purpose. Godot should make that process smooth regardless of which "
"route a developer pursues."
msgstr ""
"이 튜토리얼에서는 게임에 모드, 패치 또는 DLC를 추가하기가 얼마나 쉬운 지에 대"
"해 설명합니다. 가장 중요한 것은 게임의 미래 콘텐츠를 배포하기 위해 어떻게 계"
"획을 짜고 이를 위해 어떻게 워크플로를 개발하는 것입니다. Godot는 개발자가 추"
"구하는 방향에 관계없이 작업을 부드럽게 만들어줍니다."

#: ../../docs/getting_started/workflow/export/feature_tags.rst:4
msgid "Feature tags"
msgstr "기능 태그"

#: ../../docs/getting_started/workflow/export/feature_tags.rst:9
msgid ""
"Godot has a special system to tag availability of features. Each *feature* "
"is represented as a string, which can refer to many of the following:"
msgstr ""
"Godot는 기능의 사용 여부를 태그하는 특수 시스템을 갖고 있습니다. 각 *기능*\\ "
"은 문자열으로 나타나며, 다음과 같은 것을 언급할 수 있습니다:"

#: ../../docs/getting_started/workflow/export/feature_tags.rst:12
msgid "Platform name."
msgstr "플랫폼 이름."

#: ../../docs/getting_started/workflow/export/feature_tags.rst:13
msgid "Platform architecture (64-bit or 32-bit, x86 or ARM)."
msgstr "플랫폼 구조 (64비트나 32비트, x86이나 ARM)."

#: ../../docs/getting_started/workflow/export/feature_tags.rst:14
msgid "Platform type (desktop, mobile, Web)."
msgstr "플랫폼 유형 (데스크톱, 모바일, 웹)."

#: ../../docs/getting_started/workflow/export/feature_tags.rst:15
msgid "Supported texture compression algorithms on the platform."
msgstr "플랫폼에서 지원하는 텍스처 압축 알고리즘."

#: ../../docs/getting_started/workflow/export/feature_tags.rst:16
msgid ""
"Whether a build is ``debug`` or ``release`` (``debug`` includes the editor)."
msgstr ""
"빌드가 ``디버그``\\ 인지 ``출시``\\ 인지 여부 (``디버그``\\ 는 편집기가 포함"
"됨)."

#: ../../docs/getting_started/workflow/export/feature_tags.rst:17
msgid ""
"Whether the project is running from the editor or a \"standalone\" binary."
msgstr "프로젝트가 편집기에서 실행 중인지 \"독립 실행형\" 바이너리인지 여부."

#: ../../docs/getting_started/workflow/export/feature_tags.rst:18
msgid "Many more things."
msgstr "더 많은 것들."

#: ../../docs/getting_started/workflow/export/feature_tags.rst:20
msgid "Features can be queried at run-time from the singleton API by calling:"
msgstr ""
"기능은 다음과 같이 호출하여 런타임에서 싱글톤 API로 부터 질문(query)을 받을 "
"수 있습니다:"

#: ../../docs/getting_started/workflow/export/feature_tags.rst:28
msgid "Default features"
msgstr "기본 기능"

#: ../../docs/getting_started/workflow/export/feature_tags.rst:30
msgid ""
"Here is a list of most feature tags in Godot. Keep in mind they are **case-"
"sensitive**:"
msgstr ""
"다음은 Godot의 대부분의 기능 태그 목록입니다. 이들은 **대소문자을 구별**\\ 합"
"니다:"

#: ../../docs/getting_started/workflow/export/feature_tags.rst:33
msgid "**Feature tag**"
msgstr "**기능 태그**"

#: ../../docs/getting_started/workflow/export/feature_tags.rst:35
msgid "**Android**"
msgstr "**Android**"

#: ../../docs/getting_started/workflow/export/feature_tags.rst:35
msgid "Running on Android"
msgstr "Android에서 실행 중"

#: ../../docs/getting_started/workflow/export/feature_tags.rst:37
msgid "**HTML5**"
msgstr "**HTML5**"

#: ../../docs/getting_started/workflow/export/feature_tags.rst:37
msgid "Running on HTML5"
msgstr "HTML5에서 실행 중"

#: ../../docs/getting_started/workflow/export/feature_tags.rst:39
msgid "**JavaScript**"
msgstr "**JavaScript**"

#: ../../docs/getting_started/workflow/export/feature_tags.rst:39
msgid ":ref:`JavaScript singleton <doc_javascript_eval>` is available"
msgstr ":ref:`JavaScript 싱글톤 <doc_javascript_eval>` 사용 가능"

#: ../../docs/getting_started/workflow/export/feature_tags.rst:42
msgid "**OSX**"
msgstr "**OSX**"

#: ../../docs/getting_started/workflow/export/feature_tags.rst:42
msgid "Running on macOS"
msgstr "macOS에서 실행 중"

#: ../../docs/getting_started/workflow/export/feature_tags.rst:44
msgid "**iOS**"
msgstr "**iOS**"

#: ../../docs/getting_started/workflow/export/feature_tags.rst:44
msgid "Running on iOS"
msgstr "iOS에서 실행 중"

#: ../../docs/getting_started/workflow/export/feature_tags.rst:46
msgid "**UWP**"
msgstr "**UWP**"

#: ../../docs/getting_started/workflow/export/feature_tags.rst:46
msgid "Running on UWP"
msgstr "UWP에서 실행 중"

#: ../../docs/getting_started/workflow/export/feature_tags.rst:48
msgid "**Windows**"
msgstr "**Windows**"

#: ../../docs/getting_started/workflow/export/feature_tags.rst:48
msgid "Running on Windows"
msgstr "Windows에서 실행 중"

#: ../../docs/getting_started/workflow/export/feature_tags.rst:50
msgid "**X11**"
msgstr "**X11**"

#: ../../docs/getting_started/workflow/export/feature_tags.rst:50
msgid "Running on X11 (Linux/BSD desktop)"
msgstr "X11에서 실행 중 (Linux/BSD 데스크톱)"

#: ../../docs/getting_started/workflow/export/feature_tags.rst:52
msgid "**Server**"
msgstr "**Server**"

#: ../../docs/getting_started/workflow/export/feature_tags.rst:52
msgid "Running on the headless server platform"
msgstr "헤드리스 서버 플랫폼에서 실행 중"

#: ../../docs/getting_started/workflow/export/feature_tags.rst:54
msgid "**debug**"
msgstr "**debug**"

#: ../../docs/getting_started/workflow/export/feature_tags.rst:54
msgid "Running on a debug build (including the editor)"
msgstr "디버그 빌드에서 실행 중 (편집기를 포함)"

#: ../../docs/getting_started/workflow/export/feature_tags.rst:56
msgid "**release**"
msgstr "**release**"

#: ../../docs/getting_started/workflow/export/feature_tags.rst:56
msgid "Running on a release build"
msgstr "출시 빌드에서 실행 중"

#: ../../docs/getting_started/workflow/export/feature_tags.rst:58
msgid "**editor**"
msgstr "**editor**"

#: ../../docs/getting_started/workflow/export/feature_tags.rst:58
msgid "Running on an editor build"
msgstr "편집기 빌드에서 실행 중"

#: ../../docs/getting_started/workflow/export/feature_tags.rst:60
msgid "**standalone**"
msgstr "**standalone**"

#: ../../docs/getting_started/workflow/export/feature_tags.rst:60
msgid "Running on a non-editor build"
msgstr "편집기 없는 빌드에서 실행 중"

#: ../../docs/getting_started/workflow/export/feature_tags.rst:62
msgid "**64**"
msgstr "**64**"

#: ../../docs/getting_started/workflow/export/feature_tags.rst:62
msgid "Running on a 64-bit build (any architecture)"
msgstr "64비트 빌드에서 실행 중 (모든 구조)"

#: ../../docs/getting_started/workflow/export/feature_tags.rst:64
msgid "**32**"
msgstr "**32**"

#: ../../docs/getting_started/workflow/export/feature_tags.rst:64
msgid "Running on a 32-bit build (any architecture)"
msgstr "32빌드에서 실행 중 (모든 구조)"

#: ../../docs/getting_started/workflow/export/feature_tags.rst:66
msgid "**x86_64**"
msgstr "**x86_64**"

#: ../../docs/getting_started/workflow/export/feature_tags.rst:66
msgid "Running on a 64-bit x86 build"
msgstr "64비트에서 x86 빌드를 실행 중"

#: ../../docs/getting_started/workflow/export/feature_tags.rst:68
msgid "**x86**"
msgstr "**x86**"

#: ../../docs/getting_started/workflow/export/feature_tags.rst:68
msgid "Running on a 32-bit x86 build"
msgstr "32비트에서 x86 빌드를 실행 중"

#: ../../docs/getting_started/workflow/export/feature_tags.rst:70
msgid "**arm64**"
msgstr "**arm64**"

#: ../../docs/getting_started/workflow/export/feature_tags.rst:70
msgid "Running on a 64-bit ARM build"
msgstr "64비트에서 ARM 빌드를 실행 중"

#: ../../docs/getting_started/workflow/export/feature_tags.rst:72
msgid "**arm**"
msgstr "**arm**"

#: ../../docs/getting_started/workflow/export/feature_tags.rst:72
msgid "Running on a 32-bit ARM build"
msgstr "32비트에서 ARM 빌드를 실행 중"

#: ../../docs/getting_started/workflow/export/feature_tags.rst:74
msgid "**mobile**"
msgstr "**mobile**"

#: ../../docs/getting_started/workflow/export/feature_tags.rst:74
msgid "Host OS is a mobile platform"
msgstr "호스트 OS가 모바일 플랫폼이다"

#: ../../docs/getting_started/workflow/export/feature_tags.rst:76
msgid "**pc**"
msgstr "**pc**"

#: ../../docs/getting_started/workflow/export/feature_tags.rst:76
msgid "Host OS is a PC platform (desktop/laptop)"
msgstr "호스트 OS가 PC 플랫폼이다 (데스크톱/랩톱)"

#: ../../docs/getting_started/workflow/export/feature_tags.rst:78
msgid "**web**"
msgstr "**web**"

#: ../../docs/getting_started/workflow/export/feature_tags.rst:78
msgid "Host OS is a Web browser"
msgstr "호스트 OS가 웹 브라우저이다"

#: ../../docs/getting_started/workflow/export/feature_tags.rst:80
msgid "**etc**"
msgstr "**etc**"

#: ../../docs/getting_started/workflow/export/feature_tags.rst:80
msgid "Textures using ETC1 compression are supported"
msgstr "ETC1 압축을 사용하는 텍스처를 지원한다"

#: ../../docs/getting_started/workflow/export/feature_tags.rst:82
msgid "**etc2**"
msgstr "**etc2**"

#: ../../docs/getting_started/workflow/export/feature_tags.rst:82
msgid "Textures using ETC2 compression are supported"
msgstr "ETC2 압축을 사용하는 텍스처를 지원한다"

#: ../../docs/getting_started/workflow/export/feature_tags.rst:84
msgid "**s3tc**"
msgstr "**s3tc**"

#: ../../docs/getting_started/workflow/export/feature_tags.rst:84
msgid "Textures using S3TC (DXT/BC) compression are supported"
msgstr "S3TC (DXT/BC) 압축을 사용하는 텍스처를 지원한다"

#: ../../docs/getting_started/workflow/export/feature_tags.rst:86
msgid "**pvrtc**"
msgstr "**pvrtc**"

#: ../../docs/getting_started/workflow/export/feature_tags.rst:86
msgid "Textures using PVRTC compression are supported"
msgstr "PVRTC 압축을 사용하는 텍스처를 지원한다"

#: ../../docs/getting_started/workflow/export/feature_tags.rst:90
msgid "Custom features"
msgstr "맞춤 기능"

#: ../../docs/getting_started/workflow/export/feature_tags.rst:92
msgid ""
"It is possible to add custom features to a build; use the relevant field in "
"the *export preset* used to generate it:"
msgstr ""
"빌드에 맞춤 기능을 추가할 수 있습니다; 생성하기 위해 *내보내기 프리셋*\\ 에"
"서 관련 필드를 사용하세요:"

#: ../../docs/getting_started/workflow/export/feature_tags.rst:98
msgid "Overriding project settings"
msgstr "프로젝트 설정 재정의하기"

#: ../../docs/getting_started/workflow/export/feature_tags.rst:100
msgid ""
"Features can be used to override specific configuration values in the "
"*Project Settings*. This allows you to better customize any configuration "
"when doing a build."
msgstr ""
"기능을 사용하여 *프로젝트 설정*\\ 의 특정 구성 값을 재정의할 수 있습니다. 이"
"를 통해 빌드를 작업할 때 모든 구성을 더 잘 커스터마이즈할 수 있습니다."

#: ../../docs/getting_started/workflow/export/feature_tags.rst:103
msgid ""
"In the following example, a different icon is added for the demo build of "
"the game (which was customized in a special export preset, which, in turn, "
"includes only demo levels)."
msgstr ""
"다음 예제에서, 게임의 데모 빌드를 위해 다른 아이콘이 추가되었습니다 (이것은 "
"특수 내보내기 프리셋에서 커스터마이즈되었으며, 데모 레벨에만 있습니다)."

#: ../../docs/getting_started/workflow/export/feature_tags.rst:108
msgid "After overriding, a new field is added for this specific configuration:"
msgstr "재정의한 후, 지정된 구성을 위한 새로운 영역이 추가됩니다:"

#: ../../docs/getting_started/workflow/export/feature_tags.rst:113
msgid "Default overrides"
msgstr "기본 재정의"

#: ../../docs/getting_started/workflow/export/feature_tags.rst:115
msgid ""
"There are already a lot of settings that come with overrides by default; "
"they can be found in many sections of the project settings."
msgstr ""
"기본적으로 재정의를 통해 오는 많은 설정이 있습니다; 프로젝트 설정의 많은 섹션"
"에서 이를 확인할 수 있습니다."

#: ../../docs/getting_started/workflow/export/feature_tags.rst:121
msgid "Customizing the build"
msgstr "빌드 커스터마이징하기"

#: ../../docs/getting_started/workflow/export/feature_tags.rst:123
msgid ""
"Feature tags can be used to customize a build process too, by writing a "
"custom **ExportPlugin**. They are also used to specify which shared library "
"is loaded and exported in **GDNative**."
msgstr ""
"기능 태그는 맞춤 **ExportPlugin**\\ 을 작성하는 것으로, 빌드 처리를 커스터마"
"이즈하는데 사용할 수도 있습니다. 그리고 **GDNative**\\ 에서 불러오고 내보내"
"는 공유된 라이브러리를 지정하는데에도 사용됩니다."

#: ../../docs/getting_started/workflow/export/exporting_for_pc.rst:4
msgid "Exporting for PC"
msgstr "PC로 내보내기"

#: ../../docs/getting_started/workflow/export/exporting_for_pc.rst:6
msgid ""
"The simplest way to distribute a game for PC is to copy the executables "
"(``godot.exe`` on Windows, ``godot`` on the rest), compress the folder and "
"send it to someone else. However, this is often not desired."
msgstr ""
"게임을 PC로 배포하는 가장 쉬운 방법은 실행 파일을 복사하는 것입니다 (Windows"
"에서는 ``godot.exe``, 그 외로는 ``godot``), 폴더를 압축하고 다른 이에게 보내"
"는 것입니다. 하지만 때로는 생각같지 않습니다."

#: ../../docs/getting_started/workflow/export/exporting_for_pc.rst:10
msgid ""
"Godot offers a more elegant approach for PC distribution when using the "
"export system. When exporting for PC (Linux, Windows, macOS), the exporter "
"takes all the project files and creates a ``data.pck`` file. This file is "
"bundled with a specially optimized binary that is smaller, faster and does "
"not contain the editor and debugger."
msgstr ""
"Godot는 내보내기 시스템을 사용할 때 PC 배포에 있어 더 우아한 접근법을 제공합"
"니다. PC로 내보낼 때 (Linux, Windows, macOS), 내보내기는 모든 프로젝트 파일"
"을 가지고 ``data.pck`` 파일을 만듭니다. 이 파일은 특별히 최적화된 이진으로 묶"
"여있어, 더 작고 빠르며, 편집기와 디버거를 포함하지 않습니다."

#: ../../docs/getting_started/workflow/export/exporting_for_ios.rst:4
msgid "Exporting for iOS"
msgstr "iOS로 내보내기"

#: ../../docs/getting_started/workflow/export/exporting_for_ios.rst:6
msgid ""
"These are the steps to load a Godot project in Xcode. This allows you to "
"build and deploy to an iOS device, build a release for the App Store, and do "
"everything else you can normally do with Xcode."
msgstr ""
"Xcode에 Godot 프로젝트를 불러오려면 몇 가지 과정이 필요합니다. 이렇게 하면 "
"iOS 기기에 빌드하고 배포할 수 있고, App Store에 출시할 수 있으며, Xcode에서 "
"하는 다른 것도 정상적으로 할 수 있습니다."

#: ../../docs/getting_started/workflow/export/exporting_for_ios.rst:11
#: ../../docs/tutorials/assetlib/uploading_to_assetlib.rst:23
#: ../../docs/tutorials/legal/complying_with_licenses.rst:15
#: ../../docs/development/compiling/compiling_for_windows.rst:9
#: ../../docs/development/compiling/compiling_for_x11.rst:9
#: ../../docs/development/compiling/compiling_for_osx.rst:9
#: ../../docs/development/compiling/compiling_for_android.rst:20
#: ../../docs/development/compiling/compiling_for_ios.rst:9
#: ../../docs/development/compiling/cross-compiling_for_ios_on_linux.rst:27
#: ../../docs/development/compiling/compiling_for_uwp.rst:9
#: ../../docs/development/compiling/compiling_for_web.rst:9
#: ../../docs/development/compiling/compiling_with_mono.rst:9
msgid "Requirements"
msgstr "요구사항"

#: ../../docs/getting_started/workflow/export/exporting_for_ios.rst:13
msgid ""
"You must export for iOS from a computer running macOS with Xcode installed."
msgstr "반드시 Xcode가 설치된 macOS 컴퓨터에서 iOS를 내보내야 합니다."

#: ../../docs/getting_started/workflow/export/exporting_for_ios.rst:14
msgid ""
"Download the Godot export templates. Use the Godot menu: Editor > Manage "
"Export Templates"
msgstr ""
"Godoy 내보내기 템플릿을 다운로드하세요. Godot 메뉴를 사용하세요: 편집기 > 내"
"보내기 템플릿 관리"

#: ../../docs/getting_started/workflow/export/exporting_for_ios.rst:17
msgid "Export a Godot project to Xcode"
msgstr "Godot 프로젝트를 Xcode로 내보내기"

#: ../../docs/getting_started/workflow/export/exporting_for_ios.rst:19
msgid ""
"In the Godot editor, open the **Export** window from the **Project** menu. "
"When the Export window opens, click **Add..** and select **iOS**."
msgstr ""
"Godot 편집기에서, **프로젝트** 메뉴에서 **내보내기** 창으로 갑니다. 내보내기 "
"창이 열리면, **추가하기..**\\ 를 클릭하고 **iOS**\\ 를 선택합니다."

#: ../../docs/getting_started/workflow/export/exporting_for_ios.rst:22
msgid ""
"The following export options are required. Leaving any blank will cause the "
"exporter to throw an error:"
msgstr ""
"다음 내보내기 설정은 필수입니다. 하나라도 공백으로 둔다면 내보내기는 오류가 "
"발생할 것입니다:"

#: ../../docs/getting_started/workflow/export/exporting_for_ios.rst:25
msgid "In the **Application** category * **App Store Team ID**"
msgstr "**Application** 카테고리에서 **App Store Team ID**"

#: ../../docs/getting_started/workflow/export/exporting_for_ios.rst:27
msgid "Everything in the **Required Icons** category"
msgstr "**Required Icons** 카테고리 전체"

#: ../../docs/getting_started/workflow/export/exporting_for_ios.rst:28
msgid "Everything in the **Landscape Launch Screens** category"
msgstr "**Landscape Launch Screens** 카테고리 전체"

#: ../../docs/getting_started/workflow/export/exporting_for_ios.rst:29
msgid "Everything in the **Portrait Launch Screens** category"
msgstr "**Portrait Launch Screens** 카테고리 전체"

#: ../../docs/getting_started/workflow/export/exporting_for_ios.rst:31
msgid ""
"After you click **Export Project**, there are still two important options "
"left:"
msgstr ""
"**프로젝트 내보내기**\\ 를 클릭한 뒤에도, 두 개의 중요한 설정이 남아있습니다:"

#: ../../docs/getting_started/workflow/export/exporting_for_ios.rst:33
msgid ""
"**Path** is an empty folder that will contain the exported Xcode project "
"files."
msgstr "**경로**\\ 는 내보낸 Xcode 프로젝트 파일이 들어가는 빈 폴더입니다."

#: ../../docs/getting_started/workflow/export/exporting_for_ios.rst:34
msgid ""
"**File** will be the name of the Xcode project and several project specific "
"files and directories."
msgstr ""
"**파일**\\ 은 Xcode 프로젝트의 이름과 여러 프로젝트 별 파일과 디렉토리의 이름"
"이 될 것입니다."

#: ../../docs/getting_started/workflow/export/exporting_for_ios.rst:38
msgid ""
"This tutorial uses **exported_xcode_project_name**, but you will use your "
"project's name. When you see **exported_xcode_project_name** in the "
"following steps, replace it with the name you used instead."
msgstr ""
"이 튜토리얼은 **exported_xcode_project_name**\\ 을 사용하지만, 나중엔 당신의 "
"프로젝트 이름을 사용할 것입니다. 다음 단계에서 "
"**exported_xcode_project_name**\\ 을 본다면, 그곳을 당신이 사용하는 이름으로 "
"바꾸면 됩니다."

#: ../../docs/getting_started/workflow/export/exporting_for_ios.rst:42
msgid ""
"Avoid using spaces when you choose your **exported_xcode_project_name** as "
"this can lead to corruption in your XCode project file."
msgstr ""

#: ../../docs/getting_started/workflow/export/exporting_for_ios.rst:45
msgid "When the export completes, the output folder should look like this:"
msgstr "내보내기를 마치면, 출력 폴더는 다음과 같아야 합니다:"

#: ../../docs/getting_started/workflow/export/exporting_for_ios.rst:49
msgid ""
"Opening **exported_xcode_project_name.xcodeproj** lets you build and deploy "
"like any other iOS app."
msgstr ""
"**exported_xcode_project_name.xcodeproj**\\ 를 열면 다른 iOS 앱처럼 게임을 빌"
"드하고 배포할 수 있게 됩니다."

#: ../../docs/getting_started/workflow/export/exporting_for_ios.rst:53
msgid "Active development considerations"
msgstr "능동적 개발 고려사항"

#: ../../docs/getting_started/workflow/export/exporting_for_ios.rst:55
msgid ""
"The above method creates an exported project that you can build for release, "
"but you have to re-export every time you make a change in Godot."
msgstr ""
"위의 방법으로 프로젝트를 내보내서 출시를 위한 빌드를 할 수 있지만, Godot에서 "
"변경사항이 있다면 그 때마다 다시 내보내어야 합니다."

#: ../../docs/getting_started/workflow/export/exporting_for_ios.rst:58
msgid ""
"While developing, you can speed this process up by linking your Godot "
"project files directly into your app."
msgstr ""
"개발 도중, Godot 프로젝트 파일을 앱에 직접 연결함으로써 이 처리 속도를 높일 "
"수 있습니다."

#: ../../docs/getting_started/workflow/export/exporting_for_ios.rst:61
msgid "In the following example:"
msgstr "다음 예제에서:"

#: ../../docs/getting_started/workflow/export/exporting_for_ios.rst:63
msgid ""
"**exported_xcode_project_name** is the name of the exported iOS application "
"(as above)."
msgstr ""
"**exported_xcode_project_name**\\ 은 내보낸 iOS 애플리케이션의 이름입니다 (위"
"와 같이)."

#: ../../docs/getting_started/workflow/export/exporting_for_ios.rst:64
msgid "**godot_project_to_export** is the name of the Godot project."
msgstr "**godot_project_to_export**\\ 는 Godot 프로젝트의 이름입니다."

#: ../../docs/getting_started/workflow/export/exporting_for_ios.rst:67
msgid "Steps to link a Godot project folder to Xcode"
msgstr "Godot 프로젝트 폴더를 Xcode에 연결하는 단계"

#: ../../docs/getting_started/workflow/export/exporting_for_ios.rst:69
msgid "Start from an exported iOS project (follow the steps above)."
msgstr "내보낸 iOS 프로젝트에서 시작합니다 (앞의 단계를 따라야 합니다)."

#: ../../docs/getting_started/workflow/export/exporting_for_ios.rst:70
msgid "In Finder, drag the Godot project folder into the Xcode file browser."
msgstr "Finder에서, Godot 프로젝트 폴더를 Xcode 파일 브라우저로 드래그합니다."

#: ../../docs/getting_started/workflow/export/exporting_for_ios.rst:74
msgid ""
"3. In the dialog, make sure **Create folder references** is selected. This "
"means you will be able to continue to edit your Godot project in its current "
"location."
msgstr ""
"3. 대화 상자에서, **Create folder references**\\ 가 선택되어야 합니다. 이게 "
"있어야 Godot 프로젝트를 현재 위치에서 계속 편집할 수 있습니다."

#: ../../docs/getting_started/workflow/export/exporting_for_ios.rst:79
msgid "See the **godot_project_to_export** folder in the Xcode file browser."
msgstr "Xcode 파일 브라우저에서 **godot_project_to_export** 폴더를 봅니다."

#: ../../docs/getting_started/workflow/export/exporting_for_ios.rst:80
msgid "Delete **exported_xcode_project_name.pck** from the Xcode project."
msgstr ""
"Xcode 프로젝트에서 **exported_xcode_project_name.pck**\\ 를 삭제합니다."

#: ../../docs/getting_started/workflow/export/exporting_for_ios.rst:84
msgid ""
"6. Open **exported_xcode_project_name-Info.plist** and add a string property "
"named **godot_path** (this is the real key name) with a value "
"**godot_project_to_export** (this is the name of your project)"
msgstr ""
"6. **exported_xcode_project_name-Info.plist**\\ 를 열고 **godot_path**\\ 라"
"는 문자열 속성을 추가하고 (이것이 진짜 키 이름입니다) "
"**godot_project_to_export** 값을 줍니다 (이것이 프로젝트의 이름입니다)"

#: ../../docs/getting_started/workflow/export/exporting_for_ios.rst:90
msgid ""
"That's it! You can now edit your project in the Godot editor and build it in "
"Xcode when you want to run it on a device."
msgstr ""
"됬습니다! 이제 Godot 편집기에서 프로젝트를 편집할 수 있고 기기에서 실행하고 "
"싶을 때 Xcode에서 빌드할 수 있습니다."

#: ../../docs/getting_started/workflow/export/exporting_for_ios.rst:94
#: ../../docs/tutorials/platform/services_for_ios.rst:4
msgid "Services for iOS"
msgstr "iOS 용 서비스"

#: ../../docs/getting_started/workflow/export/exporting_for_ios.rst:96
msgid ""
"Special iOS services can be used in Godot. Check out the :ref:"
"`doc_services_for_ios` page."
msgstr ""
"Godot에서 특별한 iOS 서비스를 사용할 수 있습니다. :ref:"
"`doc_services_for_ios` 페이지를 확인하세요."

#: ../../docs/getting_started/workflow/export/exporting_for_uwp.rst:4
msgid "Exporting for Universal Windows Platform"
msgstr "유니버설 Windows 플랫폼으로 내보내기"

#: ../../docs/getting_started/workflow/export/exporting_for_uwp.rst:6
msgid ""
"There's no extra requirement to export an ``.appx`` package that can be "
"installed as a Windows App or submitted to the Windows Store. Exporting UWP "
"packages also works from any platform, not only from Windows."
msgstr ""
"Windows 앱으로 설치하거나 Windows 스토어에 제출할 수 있는 ``.appx`` 패키지를 "
"내보내기 위한 추가 요구사항은 없습니다. UWP 패키지를 내보내는 것은 Windows 뿐"
"만 아니라 어느 플랫폼에서든지 가능합니다."

#: ../../docs/getting_started/workflow/export/exporting_for_uwp.rst:10
msgid ""
"However, if you want to install and run the app, you need to sign it with a "
"trusted signature. Currently, Godot does not support signing of packages, so "
"you need to use external tools to do so."
msgstr ""
"하지만, 앱을 설치하고 실행하고 싶다면, 신뢰할 수 있는 서명으로 서명해야합니"
"다. 현재 Godot는 패키지 서명을 지원하지 않으므로, 외부의 도구를 사용해야합니"
"다."

#: ../../docs/getting_started/workflow/export/exporting_for_uwp.rst:14
msgid ""
"Also, make sure the Publisher Name you set when exporting the package "
"matches the name used on the certificate."
msgstr ""
"그리고 패키지를 내보낼 때 설정한 퍼블리셔 이름이 인증서에 사용되는 이름과 같"
"아야 합니다."

#: ../../docs/getting_started/workflow/export/exporting_for_uwp.rst:18
msgid "Limitations on Xbox One"
msgstr "Xbox One의 제한사항"

#: ../../docs/getting_started/workflow/export/exporting_for_uwp.rst:20
msgid ""
"As described in the `UWP documentation <https://docs.microsoft.com/en-us/"
"windows/uwp/xbox-apps/system-resource-allocation>`__:"
msgstr ""
"`UWP 문서 <https://docs.microsoft.com/en-us/windows/uwp/xbox-apps/system-"
"resource-allocation>`__\\ 의 설명에 따라:"

#: ../../docs/getting_started/workflow/export/exporting_for_uwp.rst:25
msgid "Submitted as an \"App\""
msgstr "\"App\"으로 제출됨"

#: ../../docs/getting_started/workflow/export/exporting_for_uwp.rst:23
msgid "available memory is 1GB"
msgstr "사용 가능한 메모리는 1GB이다"

#: ../../docs/getting_started/workflow/export/exporting_for_uwp.rst:24
msgid "share of 2-4 CPU cores"
msgstr "2-4 CPU 코어의 점유율"

#: ../../docs/getting_started/workflow/export/exporting_for_uwp.rst:25
msgid "shared access of GPU power (45%)"
msgstr "GPU 전력의 공유 접근 (45%)"

#: ../../docs/getting_started/workflow/export/exporting_for_uwp.rst:30
msgid ""
"Submitted as a \"Game\" (through `Xbox Live Creators Program <https://www."
"xbox.com/en-US/developers/creators-program>`__)"
msgstr ""
"\"Game\"으로 제출됨 (`Xbox Live 크리에이터스 프로그램 <https://www.xbox.com/"
"ko-kr/developers/creators-program>`__\\ 을 통해)"

#: ../../docs/getting_started/workflow/export/exporting_for_uwp.rst:28
msgid "available memory is 5GB"
msgstr "사용 가능한 메모리는 5GB이다"

#: ../../docs/getting_started/workflow/export/exporting_for_uwp.rst:29
msgid "4 exclusive CPU cores and 2 shared CPU cores"
msgstr "4개의 전용 CPU 코어와 2개의 공유 CPU 코어"

#: ../../docs/getting_started/workflow/export/exporting_for_uwp.rst:30
msgid "exclusive access to GPU power (100%)"
msgstr "GPU 전력에 대한 독점적 접근 (100%)"

#: ../../docs/getting_started/workflow/export/exporting_for_uwp.rst:32
msgid ""
"Exceeding these memory limitations will cause allocation failures and the "
"application will crash."
msgstr ""
"이 메모리 한도를 넘게되면 할당에 실패하고 애플리케이션이 팅길 것입니다."

#: ../../docs/getting_started/workflow/export/exporting_for_uwp.rst:35
msgid "Creating a signing certificate"
msgstr "서명 인증서 만들기"

#: ../../docs/getting_started/workflow/export/exporting_for_uwp.rst:37
msgid ""
"This requires the ``MakeCert.exe`` and ``Pvk2Pfx.exe`` tools, which come "
"with the Windows SDK. If you use Visual Studio, you can open one of its "
"Developer Prompts, since it comes with these tools and they can be located "
"in the path."
msgstr ""
"Windows SDK에 있는 ``MakeCert.exe``\\ 와 ``Pvk2Pfx.exe`` 도구가 필요합니다. "
"Visual Stuido를 사용한다면, 이 도구들을 갖고 있고 경로가 존재하기 때문에, "
"Developer Prompts에서 이것을 열 수 있습니다."

#: ../../docs/getting_started/workflow/export/exporting_for_uwp.rst:41
msgid ""
"You can get more detailed instructions from `Microsoft's documentation "
"<https://msdn.microsoft.com/en-us/library/windows/desktop/jj835832(v=vs.85)."
"aspx>`__."
msgstr ""
"더 자세한 설명은 `Microsoft의 문서 <https://msdn.microsoft.com/en-us/library/"
"windows/desktop/jj835832(v=vs.85).aspx>`__\\ 에서 확인할 수 있습니다."

#: ../../docs/getting_started/workflow/export/exporting_for_uwp.rst:44
msgid "First, run ``MakeCert`` to create a private key::"
msgstr "먼저, 개인 키를 만들기 위해 ``MakeCert``\\ 를 실행합니다::"

#: ../../docs/getting_started/workflow/export/exporting_for_uwp.rst:48
msgid ""
"Where ``publisherName`` matches the Publisher Name of your package and "
"``expirationDate`` is in the ``mm/dd/yyyy`` format."
msgstr ""
"여기서 ``publisherName``\\ 은 패키지 내 퍼블리셔 이름과 일치하고 "
"``expirationDate``\\ 가 ``mm/dd/yyyy`` 형식입니다."

#: ../../docs/getting_started/workflow/export/exporting_for_uwp.rst:51
msgid ""
"Next, create a Personal Information Exchange (.pfx) file using ``Pvk2Pfx."
"exe``::"
msgstr ""
"다음으로, ``Pvk2Pfx.exe``\\ 를 사용해서 개인 정보 교환 (.pfx) 파일을 만듭니"
"다::"

#: ../../docs/getting_started/workflow/export/exporting_for_uwp.rst:55
msgid ""
"If you don't specify a password with ``/po`` argument, the PFX will have the "
"same password as the private key."
msgstr ""
"``/po`` 인수로 암호를 지정하지 않으면, PFX는 개인 키와 같은 암호일 것입니다."

#: ../../docs/getting_started/workflow/export/exporting_for_uwp.rst:58
msgid ""
"You will also need to trust this certificate in order to be able to install "
"your app. Open the Command Prompt as Administrator and run the following "
"command::"
msgstr ""
"그리고 앱을 설치하도록 하기 위해 이 인증서를 신뢰하여야 합니다. 관리자 권한으"
"로 명령 프롬포트를 열고 다음 명령을 실행하세요::"

#: ../../docs/getting_started/workflow/export/exporting_for_uwp.rst:64
msgid "Signing the package"
msgstr "패키지 서명하기"

#: ../../docs/getting_started/workflow/export/exporting_for_uwp.rst:66
msgid "Finally, use ``SignTool.exe`` from the Windows SDK or Visual Studio::"
msgstr ""
"마지막으로, Windows SDK나 Visual Studio에서 ``SignTool.exe``\\ 를 사용합니"
"다::"

#: ../../docs/getting_started/workflow/export/exporting_for_uwp.rst:71
msgid "Installing the package"
msgstr "패키지 설치하기"

#: ../../docs/getting_started/workflow/export/exporting_for_uwp.rst:73
msgid ""
"As of the Windows 10 Anniversary Update, you are able to install packages "
"simply by double clicking the ``.appx`` file from Windows Explorer."
msgstr ""
"Windows 10 1주년 업데이트로, 파일 탐색기에서 단순히 ``.appx`` 파일을 더블 클"
"릭하는 것으로 패키지를 설치할 수 있습니다."

#: ../../docs/getting_started/workflow/export/exporting_for_uwp.rst:76
msgid ""
"It's also possible to install by using the ``Add-AppxPackage`` PowerShell "
"cmdlet."
msgstr "``Add-AppxPackage`` PowerShell cmdlet을 사용해서 설치할 수도 있습니다."

#: ../../docs/getting_started/workflow/export/exporting_for_uwp.rst:78
msgid ""
"If you want to update your already installed app, you must update the "
"version number on the new package or first uninstall the previous package."
msgstr ""
"이미 설치된 앱을 업데이트 하는 경우, 새 패키지의 버전 이름을 업데이트하거나 "
"먼저 이전 패키지를 제거해야합니다."

#: ../../docs/getting_started/workflow/export/exporting_for_android.rst:4
msgid "Exporting for Android"
msgstr "Android로 내보내기"

#: ../../docs/getting_started/workflow/export/exporting_for_android.rst:6
msgid ""
"Exporting for Android has fewer requirements than compiling Godot for it. "
"The following steps detail what is needed to setup the SDK and the engine."
msgstr ""
"Android로 내보내려면 Godot를 컴파일하는 것보다 요구사항이 적습니다. 다음 단계"
"는 SDK와 엔진을 설정하는데 필요한 것에 대해 설명합니다."

#: ../../docs/getting_started/workflow/export/exporting_for_android.rst:10
msgid "Download the Android SDK"
msgstr "Android SDK 다운로드하기"

#: ../../docs/getting_started/workflow/export/exporting_for_android.rst:12
#, fuzzy
msgid ""
"Download and install the Android SDK from `developer.android.com <https://"
"developer.android.com/studio/>`__."
msgstr ""
"https://developer.android.com/studio/ 에서 Android SDK를 다운로드하고 설치하"
"세요"

#: ../../docs/getting_started/workflow/export/exporting_for_android.rst:15
msgid ""
"If you install Android Studio, you need to run it once to complete the SDK "
"setup."
msgstr ""

#: ../../docs/getting_started/workflow/export/exporting_for_android.rst:18
msgid "Install OpenJDK or Oracle JDK"
msgstr "OpenJDK 또는 Oracle JDK 설치하기"

#: ../../docs/getting_started/workflow/export/exporting_for_android.rst:20
msgid ""
"Download and install  `OpenJDK <https://github.com/ojdkbuild/ojdkbuild>`__ "
"or `Oracle JDK <http://www.oracle.com/technetwork/java/javase/downloads/"
"index.html>`__. Versions below JDK 8 may not work; some users have reported "
"issues with the jarsigner (used to sign the APKs) in JDK 7."
msgstr ""
"`OpenJDK <https://github.com/ojdkbuild/ojdkbuild>`__ 또는 `Oracle JDK "
"<http://www.oracle.com/technetwork/java/javase/downloads/index.html>`__\\ 를 "
"다운로드하고 설치하세요. JDK 8 버전 아래는 작동하지 않을 것입니다; 일부 사용"
"자가 JDK 7에서 jarsigner (APK를 서명하는데 사용됨)와 관련된 이슈를 제보했습니"
"다."

#: ../../docs/getting_started/workflow/export/exporting_for_android.rst:22
msgid ""
"If you install OpenJDK, choose ``1.8``. Don't choose the ``openjdk-jre`` "
"files as that only contains the JRE, not the JDK which is required here."
msgstr ""

#: ../../docs/getting_started/workflow/export/exporting_for_android.rst:25
msgid "Create a debug.keystore"
msgstr "debug.keystore 만들기"

#: ../../docs/getting_started/workflow/export/exporting_for_android.rst:27
msgid ""
"Android needs a debug keystore file to install to devices and distribute non-"
"release APKs. If you have used the SDK before and have built projects, ant "
"or eclipse probably generated one for you (on Linux and macOS, you can find "
"it in the ``~/.android`` directory)."
msgstr ""
"Android는 기기에 설치하고 출시하지 않은 APK를 배포하기 위해 디버그 키스토어 "
"파일이 필요합니다. 이전에 SDK를 사용하고 프로젝트를 만든 적이 있다면, ant나 "
"eclipse가 파일이 있을 것입니다 (Linux와 macOS에서, ``~/.android`` 디렉토리에"
"서 찾을 수 있습니다)."

#: ../../docs/getting_started/workflow/export/exporting_for_android.rst:32
#, fuzzy
msgid ""
"If you can't find it or need to generate one, the keytool command from the "
"JDK can be used for this purpose::"
msgstr ""
"찾을 수 없거나 만들어야 하는 경우, 이 용도를 위해 JDK에서 keytool 명령어를 사"
"용할 수 있습니다:"

#: ../../docs/getting_started/workflow/export/exporting_for_android.rst:37
msgid ""
"This will create a ``debug.keystore`` file in your current directory. You "
"should move it to a memorable location such as ``%USERPROFILE%\\.android"
"\\``, because you will need its location in a later step. For more "
"information on ``keytool`` usage, see `this Q&A article <https://godotengine."
"org/qa/21349/jdk-android-file-missing>`__."
msgstr ""

#: ../../docs/getting_started/workflow/export/exporting_for_android.rst:40
msgid "Make sure you have adb"
msgstr "adb가 있는지 확인하세요"

#: ../../docs/getting_started/workflow/export/exporting_for_android.rst:42
#, fuzzy
msgid ""
"Android Debug Bridge (``adb``) is the command line tool used to communicate "
"with Android devices. It's installed with the SDK, but you may need to "
"install one (any) of the Android API levels for it to be installed in the "
"SDK directory."
msgstr ""
"Android Debug Bridge (adb)는 명령줄 도구로 Android 기기와 통신하는데 사용됩니"
"다. SDK와 함께 설치되지만, SDK 디렉토리에 설치하기 위해 Android API 수준에 맞"
"는 것을 설치해야 할 지도 모릅니다."

#: ../../docs/getting_started/workflow/export/exporting_for_android.rst:47
msgid "Setting it up in Godot"
msgstr "Godot에서 설정하기"

#: ../../docs/getting_started/workflow/export/exporting_for_android.rst:49
msgid ""
"Enter the Editor Settings screen. This screen contains the editor settings "
"for the user account in the computer (it's independent from the project)."
msgstr ""
"편집기 설정 화면으로 갑니다. 이 화면은 컴퓨터의 사용자 계정을 위한 편집기 설"
"정을 갖고 있습니다 (프로젝트와는 독립된 것입니다)."

#: ../../docs/getting_started/workflow/export/exporting_for_android.rst:55
msgid "Scroll down to the section where the Android settings are located:"
msgstr "Android 설정이 있는 섹션까지 내립니다:"

#: ../../docs/getting_started/workflow/export/exporting_for_android.rst:59
msgid "In that screen, the path to 3 files needs to be set:"
msgstr "이 화면에서 3개의 파일 경로가 설정되어야 합니다:"

#: ../../docs/getting_started/workflow/export/exporting_for_android.rst:61
msgid ""
"The ``adb`` executable (``adb.exe`` on Windows) - It can usually be found at "
"``%LOCALAPPDATA%\\Android\\Sdk\\platform-tools\\adb.exe``."
msgstr ""

#: ../../docs/getting_started/workflow/export/exporting_for_android.rst:64
msgid ""
"The ``jarsigner`` executable (from JDK 6 or 8) - On Windows, OpenJDK "
"installs to a dir like ``%PROGRAMFILES%\\ojdkbuild\\java-1.8.0-"
"openjdk-1.8.0.232-2\\bin``. The exact path may vary depending on the OpenJDK "
"update you've installed."
msgstr ""

#: ../../docs/getting_started/workflow/export/exporting_for_android.rst:67
msgid ""
"The debug ``.keystore`` file - It can be found in the folder where you put "
"the ``debug.keystore`` file you created above."
msgstr ""

#: ../../docs/getting_started/workflow/export/exporting_for_android.rst:70
msgid "Once that is configured, everything is ready to export to Android!"
msgstr "일단 구성되면, Android에 내보낼 준비가 끝납니다!"

#: ../../docs/getting_started/workflow/export/exporting_for_android.rst:73
msgid "Providing launcher icons"
msgstr "실행 아이콘 제공"

#: ../../docs/getting_started/workflow/export/exporting_for_android.rst:75
msgid ""
"Launcher icons are used by Android launcher apps to represent your "
"application to users. Godot only requires high-resolution icons (for "
"``xxxhdpi`` density screens) and will automatically generate lower-"
"resolution variants."
msgstr ""
"런처 아이콘은 Android 앱에서 사용자에게 애플리케이션을 나타내는 데 사용됩니"
"다. Godot은 고해상도 아이콘 (``xxxhdpi``) 만 필요하며 저해상도는 자동으로 생"
"성합니다."

#: ../../docs/getting_started/workflow/export/exporting_for_android.rst:77
#, fuzzy
msgid "There are two types of icons required by Godot:"
msgstr "Godot에는 UI를 디자인하는 두 가지 방법이 있습니다. 먼저 당신은:"

#: ../../docs/getting_started/workflow/export/exporting_for_android.rst:79
msgid ""
"**Main Icon:**: The \"classic\" icon. This will be used on all Android "
"versions up to Android 8 (Oreo), exclusive. Must be at least 192×192 px."
msgstr ""
"** Main Icon : ** : \"classic\" icon. 이는 모든 Android 버전에서 최대 "
"Android 8 (Oreo)까지만 사용됩니다. 192 × 192 픽셀 이상이어야합니다."

#: ../../docs/getting_started/workflow/export/exporting_for_android.rst:80
msgid ""
"**Adaptive Icons:** Starting from Android 8 (inclusive), `Adaptive Icons "
"<https://developer.android.com/guide/practices/ui_guidelines/"
"icon_design_adaptive>`_ were introduced. Applications will need to include "
"separate background and foreground icons to have a native look. The user's "
"launcher application will control the icon's animation and masking. Must be "
"at least 432×432 px."
msgstr ""
"** Adaptive Icons : ** Android 8 (포함)부터 `Adaptive Icons <https://"
"developer.android.com/guide/practices/ui_guidelines/icon_design_adaptive>`_ "
"가 도입되었습니다. 앱은 배경 및 전경 아이콘을 포함해야합니다. 사용자의 런처 "
"응용 프로그램은 아이콘의 애니메이션 및 마스킹을 제어합니다. 432 × 432 픽셀 이"
"상이어야합니다."

#: ../../docs/getting_started/workflow/export/exporting_for_android.rst:82
msgid ""
"It's important to adhere to some rules when designing adaptive icons. "
"`Google Design has provided a nice article <https://medium.com/google-design/"
"designing-adaptive-icons-515af294c783>`_ that helps to understand those "
"rules and some of the capabilities of adaptive icons."
msgstr ""

#: ../../docs/getting_started/workflow/export/exporting_for_android.rst:84
msgid ""
"The most important adaptive icon design rule is to have your icon critical "
"elements inside the safe zone: a centered circle with a radius of 66dp (264 "
"pixels on ``xxxhdpi``) to avoid being clipped by the launcher."
msgstr ""

#: ../../docs/getting_started/workflow/export/exporting_for_android.rst:86
msgid ""
"If you don't provide some of the requested icons, Godot will replace them "
"using a fallback chain, trying the next in line when the current one fails:"
msgstr ""

#: ../../docs/getting_started/workflow/export/exporting_for_android.rst:88
msgid ""
"**Main Icon:** Provided main icon -> Project icon -> Default Godot main icon."
msgstr ""

#: ../../docs/getting_started/workflow/export/exporting_for_android.rst:89
msgid ""
"**Adaptive Icon Foreground:** Provided foreground icon -> Provided main icon "
"-> Project icon -> Default Godot foreground icon."
msgstr ""

#: ../../docs/getting_started/workflow/export/exporting_for_android.rst:90
msgid ""
"**Adaptive Icon Background:** Provided background icon -> Default Godot "
"background icon."
msgstr ""

#: ../../docs/getting_started/workflow/export/exporting_for_android.rst:92
msgid ""
"It's highly recommended to provide all of the requested icons, and at least "
"with the specified resolutions. Only this way your application will look "
"great on all the Android devices and versions."
msgstr ""

#: ../../docs/getting_started/workflow/export/exporting_for_android.rst:95
msgid "Exporting for Google Play Store"
msgstr "구글 플레이 스토어로 내보내기"

#: ../../docs/getting_started/workflow/export/exporting_for_android.rst:97
msgid ""
"Uploading an APK to Google's Play Store requires you to sign using a non-"
"debug keystore file; such file can be generated like this:"
msgstr ""
"APK를 구글 플레이 스토어에 업로드 하려면 비 디버그 키스토어 파일을 서명해야합"
"니다; 그러한 파일은 다음과 같이 생성될 수 있습니다:"

#: ../../docs/getting_started/workflow/export/exporting_for_android.rst:104
msgid ""
"This keystore and key are used to verify your developer identity, remember "
"the password and keep it in a safe place! Use Google's Android Developer "
"guides to learn more about `APK signing <https://developer.android.com/"
"studio/publish/app-signing>`__."
msgstr ""
"이 키스토어와 키는 개발자 ID를 확인하는데 사용됩니다, 암호를 기억하고 안전한 "
"장소에 보관하세요! `APK 서명 <https://developer.android.com/studio/publish/"
"app-signing>`__\\ 에 대해 더 자세히 배우고 싶다면 구글 Android 개발자 가이드"
"를 사용하세요."

#: ../../docs/getting_started/workflow/export/exporting_for_android.rst:107
msgid "Now fill in the following forms in your Android Export Presets:"
msgstr "이제 Android 내보내기 프리셋에서 다음 항목을 채우세요:"

#: ../../docs/getting_started/workflow/export/exporting_for_android.rst:111
#, fuzzy
msgid "**Release:** Enter the path to the keystore file you just generated."
msgstr "Release: 막 생성한 키스토어 파일의 경로를 입력하세요."

#: ../../docs/getting_started/workflow/export/exporting_for_android.rst:112
#, fuzzy
msgid "**Release User:** Replace with the key alias."
msgstr "Release User: 키 별명으로 바꾸세요."

#: ../../docs/getting_started/workflow/export/exporting_for_android.rst:113
#, fuzzy
msgid ""
"**Release Password:** Key password. Note that the keystore password and the "
"key password currently have to be the same."
msgstr ""
"Release Password: 키 암호. 키스토어 암호와 키 암호는 현재로선 같아야 합니다."

#: ../../docs/getting_started/workflow/export/exporting_for_android.rst:115
#, fuzzy
msgid ""
"**Your export_presets.cfg file now contains sensitive information.** If you "
"use a version control system, you should remove it from public repositories "
"and add it to your ``.gitignore`` file or equivalent."
msgstr ""
"**이제 export_presets.cfg 파일에는 민감한 정보가 들어있습니다;** 버전 제어 시"
"스템을 사용한다면, 공개 저장소에서 이것을 제거하는 것이 좋을 것입니다."

#: ../../docs/getting_started/workflow/export/exporting_for_android.rst:119
#, fuzzy
msgid ""
"Don't forget to uncheck the **Export With Debug** checkbox while choosing "
"the APK's name."
msgstr ""
"APK의 이름을 고르면서 ``Export With Debug`` 버튼을 비활성화하는 것을 잊지마세"
"요."

#: ../../docs/getting_started/workflow/export/exporting_for_android.rst:124
msgid "Optimizing the APK size"
msgstr ""

#: ../../docs/getting_started/workflow/export/exporting_for_android.rst:126
msgid ""
"By default, the APK will contain native libraries for both ARMv7 and ARMv8 "
"architectures. This increases its size significantly. To create a smaller "
"APK, uncheck either **Armeabi-v 7a** or **Arm 64 -v 8a** in your project's "
"Android export preset. This will create an APK that only contains a library "
"for a single architecture. Note that applications targeting ARMv7 can also "
"run on ARMv8 devices, but the opposite is not true."
msgstr ""

#: ../../docs/getting_started/workflow/export/exporting_for_android.rst:133
msgid ""
"Since August 2019, Google Play requires all applications to be available in "
"64-bit form. This means you cannot upload an APK that contains *just* an "
"ARMv7 library. To solve this, you can upload several APKs to Google Play "
"using its `Multiple APK support <https://developer.android.com/google/play/"
"publishing/multiple-apks>`__. Each APK should target a single architecture; "
"creating an APK for ARMv7 and ARMv8 is usually sufficient to cover most "
"devices in use today."
msgstr ""

#: ../../docs/getting_started/workflow/export/exporting_for_android.rst:140
msgid ""
"You can optimize the size further by compiling an Android export template "
"with only the features you need. See :ref:`doc_optimizing_for_size` for more "
"information."
msgstr ""

#: ../../docs/getting_started/workflow/export/exporting_for_web.rst:4
msgid "Exporting for the Web"
msgstr "웹으로 내보내기"

#: ../../docs/getting_started/workflow/export/exporting_for_web.rst:6
msgid ""
"HTML5 export allows publishing games made in Godot Engine to the browser. "
"This requires support for `WebAssembly <https://webassembly.org/>`__ and "
"`WebGL <https://www.khronos.org/webgl/>`__ in the user's browser."
msgstr ""
"HTML5 내보내기로 Godot Engine에서 만든 게임을 브라우저에 게시할 수 있습니다. "
"이를 위해서 사용자의 브라우저가 `WebAssembly <https://webassembly.org/>`\\ "
"와 `WebGL <https://www.khronos.org/webgl/>`__\\ 을 지원해야 합니다."

#: ../../docs/getting_started/workflow/export/exporting_for_web.rst:11
msgid ""
"Use the browser-integrated developer console, usually opened with :kbd:"
"`F12`, to view **debug information** like JavaScript, engine, and WebGL "
"errors."
msgstr ""
"브라우저 통합 개발자 콘솔을 사용하세요, JavaScript, 엔진, WebGL 에러와 같은 "
"**디버그 정보를 보기 위해선** 보통 :kbd:`F12` 키로 열 수 있습니다."

#: ../../docs/getting_started/workflow/export/exporting_for_web.rst:15
#, fuzzy
msgid ""
"Many browsers, including Firefox and Chromium-based browsers, will not load "
"exported projects when **opened locally** per ``file://`` protocol. To get "
"around this, use a local server."
msgstr ""
"많은 브라우저, 특히 크로뮴 기반 브라우저들이 ``file://`` 프로토콜마다 **지역"
"으로 열릴 때** 내보낸 프로젝트를 불러오지 않습니다. 이 문제를 해결하려면, 지"
"역 서버를 사용해야 합니다."

#: ../../docs/getting_started/workflow/export/exporting_for_web.rst:19
msgid ""
"Python offers an easy method to start a local server. Use ``python -m "
"SimpleHTTPServer`` with Python 2 or ``python -m http.server`` with Python 3 "
"to serve the current working directory at ``http://localhost:8000``."
msgstr ""
"파이썬은 지역 서버를 시작하기 위한 좋은 방법이 있습니다. 파이썬 2에서는  "
"``python -m SimpleHTTPServer``\\ 를, 파이썬 3에서는 ``python -m http.server``"
"\\ 를 사용해 ``http://localhost:8000``\\ 으로 현재 작업 중인 디렉토리를 전달"
"합니다."

#: ../../docs/getting_started/workflow/export/exporting_for_web.rst:25
msgid "WebGL 2"
msgstr "WebGL 2"

#: ../../docs/getting_started/workflow/export/exporting_for_web.rst:27
#, fuzzy
msgid ""
"Until the *OpenGL ES 3* renderer is removed from Godot in favor of *Vulkan*, "
"HTML5 export uses *WebGL 2* when the *GLES3* option is selected."
msgstr ""
"*OpenGL ES 3* 렌더러가 *Vulkan*\\ 을 위해 Godot에서 사라질 때까지는, HTML5 내"
"보내기는 *GLES3* 옵션이 선택되어있다면 *WebGL 2*\\ 을 사용합니다."

#: ../../docs/getting_started/workflow/export/exporting_for_web.rst:30
msgid ""
"Usage of WebGL 2 is not recommended due to its expected removal from Godot "
"without replacement."
msgstr ""
"WebGL 2은 향후 Godot에서 교체없이 제거될 것이기에 사용하는 것을 추천하지 않습"
"니다."

#: ../../docs/getting_started/workflow/export/exporting_for_web.rst:33
msgid ""
"WebGL 2 is not supported in all browsers. **Firefox** and **Chromium** "
"(Chrome, Opera) are the most popular supported browsers, **Safari** and "
"**Edge** do not work. On **iOS**, all browsers are based on WebKit (i.e. "
"Safari), so they will also not work."
msgstr ""
"WebGL 2은 모든 브라우저를 지원하지 않습니다. **파이어폭스**\\ 와 **크로뮴** "
"(크롬, 오페라)은 가장 인기있는 브라우저로 지원하지만, **사파리**\\ 와 **엣지"
"**\\ 는 그렇지 않습니다. **iOS**\\ 는, 모든 브라우저가 WebKit (즉, 사파리)기"
"반이기 때문에 역시 작동하지 않습니다."

#: ../../docs/getting_started/workflow/export/exporting_for_web.rst:38
msgid ""
"Godot's WebGL 2 renderer has issues with 3D and is no longer maintained."
msgstr ""
"Godot의 WebGL 2 렌더러는 3D에 문제가 있어 더 이상 유지 관리가 되지 않습니다."

#: ../../docs/getting_started/workflow/export/exporting_for_web.rst:41
msgid "Limitations"
msgstr "제한사항"

#: ../../docs/getting_started/workflow/export/exporting_for_web.rst:43
msgid ""
"For security and privacy reasons, many features that work effortlessly on "
"native platforms are more complicated on the web platform. Following is a "
"list of limitations you should be aware of when porting a Godot game to the "
"web."
msgstr ""
"보안 및 개인 정보의 이유로, 네이티브 플랫폼에서 여유롭게 작동하는 많은 기능"
"이 웹 플랫폼에서는 더 복잡합니다. 다음은 Godot 게임을 웹으로 이식할 때 알아"
"야 할 제한사항 목록입니다."

#: ../../docs/getting_started/workflow/export/exporting_for_web.rst:48
msgid "Using cookies for data persistence"
msgstr "데이터 지속성을 위한 쿠키 사용"

#: ../../docs/getting_started/workflow/export/exporting_for_web.rst:50
msgid ""
"Users must **allow cookies** (specifically IndexedDB) if persistence of the "
"``user://`` file system is desired. When playing a game presented in an "
"``iframe``, **third-party** cookies must also be enabled. Incognito/private "
"browsing mode also prevents persistence."
msgstr ""
"``user://``\\ 의 파일 시스템이 지속성을 갖길 원한다면 (특히 IndexedDB에서) 사"
"용자는 반드시 **쿠키를 허용해야합니다**. ``iframe``\\ 에 게임을 하는 것을 보"
"여준다면, **서드 파티** 쿠키도 허용해야합니다. 시크릿/비밀 브라우징 모드도 "
"이 지속성을 방해합니다."

#: ../../docs/getting_started/workflow/export/exporting_for_web.rst:55
msgid ""
"The method ``OS.is_userfs_persistent()`` can be used to check if the "
"``user://`` file system is persistent, but can give false positives in some "
"cases."
msgstr ""
"메서드 ``OS.is_userfs_persistent()``\\ 로 ``user://`` 파일 시스템이 존재하는 "
"지를 확인할 수 있습니다, 하지만 어떤 경우에는 잘못된 반응을 가져올 수 있습니"
"다."

#: ../../docs/getting_started/workflow/export/exporting_for_web.rst:60
msgid "Full screen and mouse capture"
msgstr "전체화면과 마우스 캡쳐"

#: ../../docs/getting_started/workflow/export/exporting_for_web.rst:62
msgid ""
"Browsers do not allow arbitrarily **entering full screen**. The same goes "
"for **capturing the cursor**. Instead, these actions have to occur as a "
"response to a JavaScript input event. In Godot, this means entering full "
"screen from within a pressed input event callback such as ``_input`` or "
"``_unhandled_input``. Querying the :ref:`class_Input` singleton is not "
"sufficient, the relevant input event must currently be active."
msgstr ""
"브라우저는 임의로 **전체화면으로 가기**\\ 를 하용하지 않습니다. **마우스 캡쳐"
"하기**\\ 도 마찬가지입니다. 대신 이러한 동작은 JavaScript 입력 이벤트의 결과"
"로 일어나야합니다. Godot에서는, ``_input``\\ 이나 ``_unhandled_input``\\ 과 "
"같은 입력된 이벤트 콜백 내에서 전체화면으로 들어가는 것입니다. :ref:"
"`class_Input` 싱글톤을 쿼리하는 것으로는 충분하지 않고, 관련된 입력 이벤트가 "
"현재 활성화되어야 합니다."

#: ../../docs/getting_started/workflow/export/exporting_for_web.rst:69
msgid ""
"For the same reason, the full screen project setting doesn't work unless the "
"engine is started from within a valid input event handler. This requires :"
"ref:`customization of the HTML page <doc_customizing_html5_shell>`."
msgstr ""
"같은 이유에서, 전체화면 프로젝트 설정은 유효한 입력 이벤트 핸들러 내에서 엔진"
"이 시작해야 작동합니다. 여기에는 :ref:`HTML 페이지의 커스터마이징"
"<doc_customizing_html5_shell>`\\ 이 필요합니다."

#: ../../docs/getting_started/workflow/export/exporting_for_web.rst:74
msgid "Audio autoplay"
msgstr "오디오 자동재생"

#: ../../docs/getting_started/workflow/export/exporting_for_web.rst:76
msgid ""
"Chrome restricts how websites may play audio. It may be necessary for the "
"player to click or tap or press a key to enable audio."
msgstr ""
"크롬은 웹사이트가 오디오를 재생하는 법을 제한합이다. 반드시 플레이어가 클릭이"
"나 키를 누르는 것으로 오디오를 재생해야 할 지도 모릅니다."

#: ../../docs/getting_started/workflow/export/exporting_for_web.rst:79
msgid ""
"Google offers additional information about their `Web Audio autoplay "
"policies <https://sites.google.com/a/chromium.org/dev/audio-video/"
"autoplay>`__."
msgstr ""
"구글은 `웹 오디오 자동재생 규칙 <https://sites.google.com/a/chromium.org/dev/"
"audio-video/autoplay>`__\\ 에 대한 정보를 제공합니다."

#: ../../docs/getting_started/workflow/export/exporting_for_web.rst:83
msgid ":ref:`class_HTTPClient` and :ref:`class_HTTPRequest`"
msgstr ":ref:`class_HTTPClient` 그리고 :ref:`class_HTTPRequest`"

#: ../../docs/getting_started/workflow/export/exporting_for_web.rst:85
msgid "The HTTP classes have several restrictions on the HTML5 platform:"
msgstr "HTTP 클래스는 HTML5 플랫폼에 여러 제한을 갖고 있습니다:"

#: ../../docs/getting_started/workflow/export/exporting_for_web.rst:87
msgid "Accessing or changing the ``StreamPeer`` is not possible"
msgstr "``StreamPeer``\\ 로 접근하거나 바꾸는 것이 불가능합니다"

#: ../../docs/getting_started/workflow/export/exporting_for_web.rst:88
msgid "Threaded/Blocking mode is not available"
msgstr "Threaded/Blocking 모드를 사용할 수 없습니다"

#: ../../docs/getting_started/workflow/export/exporting_for_web.rst:89
msgid ""
"Cannot progress more than once per frame, so polling in a loop will freeze"
msgstr ""
"한 프레임에 여러 번 처리할 수 없습니다, 그래서 루프에서 폴링은 멈춥니다"

#: ../../docs/getting_started/workflow/export/exporting_for_web.rst:90
msgid "No chunked responses"
msgstr "청크 응답 없음"

#: ../../docs/getting_started/workflow/export/exporting_for_web.rst:91
msgid "Host verification cannot be disabled"
msgstr "호스트 확인을 비활성화할 수 없습니다"

#: ../../docs/getting_started/workflow/export/exporting_for_web.rst:92
msgid ""
"Subject to `same-origin policy <https://developer.mozilla.org/en-US/docs/Web/"
"Security/Same-origin_policy>`__"
msgstr ""
"`동일 출처 정책 <https://developer.mozilla.org/en-US/docs/Web/Security/Same-"
"origin_policy>`\\ 이 적용됨"

#: ../../docs/getting_started/workflow/export/exporting_for_web.rst:95
msgid "Exported ``.html`` file must not be reused"
msgstr "내보낸 ``.html`` 파일은 반드시 재 사용될 수 없습니다"

#: ../../docs/getting_started/workflow/export/exporting_for_web.rst:97
#, fuzzy
msgid ""
"Each project must generate their own HTML file. On export, several text "
"placeholders are replaced in the **generated HTML file** specifically for "
"the given export options. Any direct modifications to the **generated HTML "
"file** will be lost in future exports. To customize the generated file, see :"
"ref:`doc_customizing_html5_shell`."
msgstr ""
"내보낼 시, 지정된 내보내기 설정에 따라  여러 문자 자리 표시자를 **생성된 "
"HTML 파일**\\ 로 대체합니다. 더 이상 내보내기에 다시 사용할 수 없어야 합니다."

#: ../../docs/getting_started/workflow/export/exporting_for_web.rst:101
msgid "Boot splash is not displayed"
msgstr "부팅 스플래시가 표시되지 않습니다"

#: ../../docs/getting_started/workflow/export/exporting_for_web.rst:103
msgid ""
"The default HTML page does not display the boot splash while loading. "
"However, the image is exported as a PNG file, so :ref:`custom HTML pages "
"<doc_customizing_html5_shell>` can display it."
msgstr ""
"기본 HTML 페이지는 로딩 중에 부팅 스플래시를 보여주지 않습니다. 하지만 이미지"
"를 PNG 파일로 내보낼 수 있기 때문에,  :ref:`맞춤 HTML 페이지 "
"<doc_customizing_html5_shell>` \\ 가 부팅 스플래시를 보여줄 수 있습니다."

#: ../../docs/getting_started/workflow/export/exporting_for_web.rst:108
msgid "Unimplemented functionality"
msgstr "구현되지 않은 기능"

#: ../../docs/getting_started/workflow/export/exporting_for_web.rst:110
msgid ""
"The following functionality is currently unavailable on the HTML5 platform:"
msgstr "다음 기능은 현재 HTML5 플랫폼에서 사용할 수 없습니다:"

#: ../../docs/getting_started/workflow/export/exporting_for_web.rst:112
#: ../../docs/tutorials/threads/using_multiple_threads.rst:7
#: ../../docs/tutorials/threads/thread_safe_apis.rst:7
msgid "Threads"
msgstr "스레드(Threads)"

#: ../../docs/getting_started/workflow/export/exporting_for_web.rst:113
#: ../../docs/tutorials/plugins/gdnative/index.rst:2
msgid "GDNative"
msgstr "GDNative"

#: ../../docs/getting_started/workflow/export/exporting_for_web.rst:115
msgid "Clipboard synchronisation between engine and operating system"
msgstr "엔진과 운영체제 간의 클립보드 동기화"

#: ../../docs/getting_started/workflow/export/exporting_for_web.rst:116
msgid ""
"Networking other than :ref:`class_HTTPClient` and :ref:"
"`class_WebSocketClient`"
msgstr ""
":ref:`class_HTTPClient`\\ 와 :ref:`class_WebSocketClient` 이외의 네트워킹"

#: ../../docs/getting_started/workflow/export/exporting_for_web.rst:118
msgid ""
"Check the `list of open HTML5 issues on Github <https://github.com/"
"godotengine/godot/issues?q=is:open+is:issue+label:platform:html5>`__ to see "
"if the functionality you're interested in has an issue yet. If not, open one "
"to communicate your interest."
msgstr ""
"`Github에서 열린 HTML5 이슈 목록 <https://github.com/godotengine/godot/"
"issues?q=is:open+is:issue+label:platform:html5>`__\\ 을 확인해서 관심있는 기"
"능에 아직 이슈가 있는지 찾아보세요. 기능이 아직 없다면 하나를 열어서 관심있"
"는 기능을 이야기를 해보세요."

#: ../../docs/getting_started/workflow/export/exporting_for_web.rst:124
msgid "Serving the files"
msgstr "파일 전달하기"

#: ../../docs/getting_started/workflow/export/exporting_for_web.rst:126
msgid ""
"Exporting for the web generates several files to be served from a web "
"server, including a default HTML page for presentation. A custom HTML file "
"can be used, see :ref:`doc_customizing_html5_shell`."
msgstr ""
"웹으로 내보내면 웹 서버로 보낼 여러 파일들을 생성합니다, 표시하기 위한 기본 "
"HTML 페이지도 이에 속합니다. 맞춤 HTML 파일을 사용할 수 있습니다, :ref:"
"`doc_customizing_html5_shell`\\ 을 보세요."

#: ../../docs/getting_started/workflow/export/exporting_for_web.rst:130
msgid ""
"The generated ``.html`` file can be used as ``DirectoryIndex`` in Apache "
"servers and can be renamed to e.g. ``index.html`` at any time, its name is "
"never depended on by default."
msgstr ""
"생성된 ``.html`` 파일을 Apache 서버에서  ``DirectoryIndex``\\ 로 사용할 수 있"
"고 언제든지 ``index.html``\\ 과 같은 이름으로 바꿀 수 있습니다, 이름은 기본적"
"으로 파일에 의지하지 않습니다."

#: ../../docs/getting_started/workflow/export/exporting_for_web.rst:134
msgid ""
"The HTML page draws the game at maximum size within the browser window. This "
"way it can be inserted into an ``<iframe>`` with the game's size, as is "
"common on most web game hosting sites."
msgstr ""
"HTML 페이지는 브라우저 창에 최대 크기로 게임을 표시합니다. 이렇게 하면 게임"
"을 게임의 크기가 있는 ``<iframe>``\\ 에 넣을 수 있습니다, 흔한 웹 게임 호스"
"팅 사이트에서 쓰는 방식이죠."

#: ../../docs/getting_started/workflow/export/exporting_for_web.rst:138
msgid ""
"The other exported files are served as they are, next to the ``.html`` file, "
"names unchanged. The ``.wasm`` file is a binary WebAssembly module "
"implementing the engine. The ``.pck`` file is the Godot main pack containing "
"your game. The ``.js`` file contains start-up code and is used by the ``."
"html`` file to access the engine. The ``.png`` file contains the boot splash "
"image. It is not used in the default HTML page, but is included for :ref:"
"`custom HTML pages <doc_customizing_html5_shell>`."
msgstr ""
"``.html`` 파일 옆의 다른 내보낸 파일은 그대로 전달되지만, 이름은 바뀌지 않습"
"니다. ``.wasm`` 파일은 엔진을 구현하는 이진 WebAssembly 모듈입니다. ``.pck`` "
"파일은 Godot 메인 팩으로 게임을 갖고 있습니다. ``.js`` 파일은 시작 코드가 있"
"으며 ``.html`` 파일이 엔진에 접근하는 데 사용됩니다. ``.png`` 파일은 부팅 스"
"플래시 이미지입니다. 기본 HTML 페이지에서는 쓰이지 않지만,  :ref:`맞춤 HTML "
"페이지 <doc_customizing_html5_shell>`\\ 를 위해 포함됩니다."

#: ../../docs/getting_started/workflow/export/exporting_for_web.rst:146
msgid ""
"The ``.pck`` file is binary, usually delivered with the MIME-type :mimetype:"
"`application/octet-stream`. The ``.wasm`` file is delivered as :mimetype:"
"`application/wasm`."
msgstr ""
"``.pck`` 파일은 이진 파일로, 보통 MIME 타입 :mimetype:`application/octet-"
"stream`\\ 으로 전달됩니다.  ``.wasm`` 파일은 :mimetype:`application/wasm`\\ "
"으로 전달됩니다."

#: ../../docs/getting_started/workflow/export/exporting_for_web.rst:150
msgid ""
"Delivering the WebAssembly module (``.wasm``) with a MIME-type other than :"
"mimetype:`application/wasm` can prevent some start-up optimizations."
msgstr ""
"WebAssembly 모듈  (``.wasm``)을  :mimetype:`application/wasm`\\ 이외의 MIME "
"타입으로 전달하면 일부 시작 최적화를 방지할 수 있습니다."

#: ../../docs/getting_started/workflow/export/exporting_for_web.rst:154
msgid ""
"Delivering the files with server-side compression is recommended especially "
"for the ``.pck`` and ``.wasm`` files, which are usually large in size. The "
"WebAssembly module compresses particularly well, down to around a quarter of "
"its original size with gzip compression."
msgstr ""
"서버 측에서 압축한 파일을 전달하는 것이 ``.pck`` \\ 와 ``.wasm`` 파일 같은 "
"큰 사이즈의 파일에 적합합니다. WebAssembly 모듈은 압축을 특히 잘하는데, gzip "
"압축을 사용하여 원번 크기의 약 4분의 1까지 줄일 수 있습니다."

#: ../../docs/getting_started/workflow/export/exporting_for_web.rst:160
msgid "Export options"
msgstr "내보내기 설정"

#: ../../docs/getting_started/workflow/export/exporting_for_web.rst:162
msgid ""
"If a runnable web export template is available, a button appears between the "
"*Stop scene* and *Play edited Scene* buttons in the editor to quickly open "
"the game in the default browser for testing."
msgstr ""
"실행 가능한 웹 내보내기 템플릿을 이용할 수 있다면, 편집기에서 *씬 멈추기* 버"
"튼과 *편집 중인 씬 실행* 버튼 사이에 버튼이 나타나 테스트를 위해 빠르게 기본 "
"브라우저에서 게임을 열 수 있습니다."

#: ../../docs/getting_started/workflow/export/exporting_for_web.rst:166
msgid ""
"If a path to a **Custom HTML shell** file is given, it will be used instead "
"of the default HTML page. See :ref:`doc_customizing_html5_shell`."
msgstr ""
"**맞춤 HTML 셸** 파일에 대한 경로가 주어진다면, 그것이 기본 HTML 페이지 대신 "
"사용됩니다. :ref:`doc_customizing_html5_shell`\\ 을 참고하세요."

#: ../../docs/getting_started/workflow/export/exporting_for_web.rst:169
msgid ""
"**Head Include** is appended into the ``<head>`` element of the generated "
"HTML page. This allows to, for example, load webfonts and third-party "
"JavaScript APIs, include CSS, or run JavaScript code."
msgstr ""
"**Head Include**\\ 는 생성된 HTML 페이지의 ``<head>``\\ 에 나타납니다. 이걸"
"로 웹 폰트나CSS가 포함된 타사 JavaScript API를 불러오거나, JavaScript 코드를 "
"실행할 수 있습니다."

#: ../../docs/getting_started/workflow/export/exporting_for_web.rst:176
msgid "Calling JavaScript from script"
msgstr "스크립트에서 JavaScript 호출하기"

#: ../../docs/getting_started/workflow/export/exporting_for_web.rst:178
msgid ""
"In web builds, the ``JavaScript`` singleton is implemented. It offers a "
"single method called ``eval`` that works similarly to the JavaScript "
"function of the same name. It takes a string as an argument and executes it "
"as JavaScript code. This allows interacting with the browser in ways not "
"possible with script languages integrated into Godot."
msgstr ""
"웹 빌드에서 ``JavaScript`` 싱글톤이 구현됩니다. ``eval``\\ 이라는 하나의 메서"
"드를 제공하는데, 같은 이름의 JavaScript 함수와 비슷하게 작동합니다. 문자열을 "
"인수로 가지며 JavaScript 코드로 실행합니다. 이걸로 Godot와 통합될 수 없는 스"
"크립트 언어를 브라우저와 상호작용할 수 있게됩니다."

#: ../../docs/getting_started/workflow/export/exporting_for_web.rst:189
msgid ""
"The value of the last JavaScript statement is converted to a GDScript value "
"and returned by ``eval()`` under certain circumstances:"
msgstr ""
"마지막 JavaScript 명령문의 값은 GDScript 값으로 변환되며 특정 경우에 "
"``eval()``\\ 에 의해 반환됩니다:"

#: ../../docs/getting_started/workflow/export/exporting_for_web.rst:192
msgid "JavaScript ``number`` is returned as GDScript :ref:`class_float`"
msgstr "JavaScript ``number``\\ 는 GDScript에서 :ref:`class_float`\\ 로 반환됨"

#: ../../docs/getting_started/workflow/export/exporting_for_web.rst:193
msgid "JavaScript ``boolean`` is returned as GDScript :ref:`class_bool`"
msgstr "JavaScript ``boolean``\\ 은 GDScript에서 :ref:`class_bool`\\ 로 반환됨"

#: ../../docs/getting_started/workflow/export/exporting_for_web.rst:194
msgid "JavaScript ``string`` is returned as GDScript :ref:`class_String`"
msgstr "JavaScript ``string``\\ GDScript에서 :ref:`class_String`\\ 으로 반환됨"

#: ../../docs/getting_started/workflow/export/exporting_for_web.rst:195
msgid ""
"JavaScript ``ArrayBuffer``, ``TypedArray`` and ``DataView`` are returned as "
"GDScript :ref:`class_PoolByteArray`"
msgstr ""
"JavaScript ``ArrayBuffer``, ``TypedArray`` 그리고 ``DataView``\\ 는 GDScript"
"에서 :ref:`class_PoolByteArray`\\ 로 반환됨"

#: ../../docs/getting_started/workflow/export/exporting_for_web.rst:204
msgid "Any other JavaScript value is returned as ``null``."
msgstr "다른 JavaScript 값은 ``null``\\ 로 반환됩니다."

#: ../../docs/getting_started/workflow/export/exporting_for_web.rst:206
msgid ""
"HTML5 export templates may be built without support for the singleton. With "
"such templates, and on platforms other than HTML5, calling ``JavaScript."
"eval`` will also return ``null``.  The availability of the singleton can be "
"checked with the ``JavaScript`` :ref:`feature tag <doc_feature_tags>`::"
msgstr ""
"HTML5 내보내기 템플릿이 싱글톤에 대한 지원 없이 빌드할 지도 모릅니다. 그런 템"
"플릿과 ``JavaScript.eval``\\ 이름을 가진 HTML 이외에는 ``null``\\ 을 반환할 "
"것입니다. 싱글톤의 유효성은 ``Javascript`` :ref:`기능 태그 "
"<doc_feature_tags>`\\ 로 확인할 수 있습니다::"

#: ../../docs/getting_started/workflow/export/exporting_for_web.rst:219
msgid ""
"GDScript's multi-line strings, surrounded by 3 quotes ``\"\"\"`` as in "
"``my_func3()`` above, are useful to keep JavaScript code readable."
msgstr ""
"위의 ``my_func3()``\\ 에서 3개의 큰따옴표 ``\"\"\"``\\ 로 둘러싸인 GDScript"
"의 여러 줄의 문자열은 JavaScript 코드가 읽을 수 있도록 유지할 수 있습니다."

#: ../../docs/getting_started/workflow/export/exporting_for_web.rst:222
msgid ""
"The ``eval`` method also accepts a second, optional Boolean argument, which "
"specifies whether to execute the code in the global execution context, "
"defaulting to ``false`` to prevent polluting the global namespace::"
msgstr ""
"``eval`` 메서드는 두번째 옵션인 Boolean 인자도 받으며 이 인자는 전역 실행 컨"
"텍스트에서 코드를 실행하는 것들을 지정합니다, 전역 네임스페이스가 오염되지않"
"기 위해 기본적으로 ``false``\\ 입니다::"

#: ../../docs/getting_started/workflow/export/one-click_deploy.rst:4
msgid "One-click deploy"
msgstr "원 클릭 배포"

#: ../../docs/getting_started/workflow/export/one-click_deploy.rst:7
msgid "Sounds good, what is it?"
msgstr "좋은거 같은데요, 이게 뭔가요?"

#: ../../docs/getting_started/workflow/export/one-click_deploy.rst:9
#, fuzzy
msgid ""
"This feature will pop up automatically once a platform is properly "
"configured and a supported device is connected to the computer. Since things "
"can go wrong at many levels (platform may not be configured correctly, SDK "
"may be incorrectly installed, device may be improperly configured, etc.), "
"it's good to let the user know that it exists."
msgstr ""
"이 기능은 플랫폼을 올바르게 구성하고 지원하는 기기가 컴퓨터에 연결되어 있으"
"면 나타납니다. 여러 단계에서 작업이 잘못될 수 있기 때문에 (플랫폼이 잘못 구성"
"할 수도 있고, SDK가 올바르지 않게 설치되거나, 기기가 잘못 구성될 수도 있고, "
"냥이가 USB 선을 먹어버리는 등), 사용자는 이 기능을 알아두는 것이 좋습니다."

#: ../../docs/getting_started/workflow/export/one-click_deploy.rst:15
#, fuzzy
msgid ""
"Some platforms (at the time of this writing, only Android) can detect when a "
"USB device is connected to the computer, and offer the user to automatically "
"export, install and run the project (in debug mode) on the device. This "
"feature is called, in industry buzzwords, \"One-Click Deploy\"."
msgstr ""
"일부 플랫폼 (이 글을 쓰는 시점에는 Android와 블랙베리 10)은 USB 기기가 컴퓨터"
"가 연결되는 지를 감지할 수 있으며, 사용자가 자동으로 내보낼 수 있도록 기기에 "
"프로젝트를 (디버그 모드로) 설치하고 실행합니다. 이 기능은 업계 속어로, \"원 "
"클릭 배포\"라고 합니다 (물론 기술적으로는 두 번 클릭합니다...)."

#: ../../docs/getting_started/workflow/export/one-click_deploy.rst:21
msgid "Steps for one-click deploy"
msgstr "원 클릭 배포 단계"

#: ../../docs/getting_started/workflow/export/one-click_deploy.rst:23
msgid "Configure target platform."
msgstr "대상 플랫폼을 설정한다."

#: ../../docs/getting_started/workflow/export/one-click_deploy.rst:24
#, fuzzy
msgid ""
"Configure device (make sure it's in developer mode, likes the computer, USB "
"cable is plugged, USB is recognized, etc.)."
msgstr ""
"기기를 설정한다 (개발자 모드인지, 컴퓨터를 좋아하는지, usb 선이 꽂혀있고 usb"
"는 감지되는 지 등을 확인해야 합니다)."

#: ../../docs/getting_started/workflow/export/one-click_deploy.rst:26
#, fuzzy
msgid "Connect the device..."
msgstr "기기를 연결합니다.."

#: ../../docs/getting_started/workflow/export/one-click_deploy.rst:27
msgid "And voilà!"
msgstr "그리고 짜잔!"

#: ../../docs/getting_started/workflow/export/one-click_deploy.rst:31
#, fuzzy
msgid "Click once... and deploy!"
msgstr "한번 클릭하세요.. 그러면 배포합니다!"

#: ../../docs/getting_started/workflow/export/android_custom_build.rst:4
msgid "Custom builds for Android"
msgstr "Android 용 맞춤 빌드"

#: ../../docs/getting_started/workflow/export/android_custom_build.rst:6
msgid ""
"Godot provides the option to use custom build Android templates. Instead of "
"using the already pre-built template that ships with Godot, an actual "
"Android Java project gets installed into your project folder. Godot will "
"then build it and use it as an export template every time you export the "
"project."
msgstr ""
"Godot는 맞춤 빌드 Android 템플릿을 사용하기 위한 설정을 제공합니다. Godot와 "
"함께 제공되는 미리 빌드된 템플릿을 사용하는 대신, 실제로 Android Java 프로젝"
"트를 프로젝트 폴더에 설치합니다. Godot는 이제 프로젝트를 빌드하며, 프로젝트"
"를 내보낼 때마다 내보내기 템플릿으로 사용될 것입니다."

#: ../../docs/getting_started/workflow/export/android_custom_build.rst:11
msgid "There are some reasons why you may want to do this:"
msgstr "이렇게 하고 싶어하는 몇 가지 이유가 있습니다:"

#: ../../docs/getting_started/workflow/export/android_custom_build.rst:13
#, fuzzy
msgid "Modify the project before it's built."
msgstr "빌드하기 전 프로젝트를 수정하기"

#: ../../docs/getting_started/workflow/export/android_custom_build.rst:14
#, fuzzy
msgid "Add external SDKs that build with your project."
msgstr "프로젝트가 있는 빌드에 외부 SDK를 추가하기"

#: ../../docs/getting_started/workflow/export/android_custom_build.rst:16
#, fuzzy
msgid ""
"Configuring the custom build is a more or less straightforward process, but "
"it may take a while to get used to how the Android SDK works."
msgstr ""
"맞춤 빌드를 구성하는 것은 다소 간단한 과정이지만, Android SDK가 작동하는 방식"
"에 익숙해지는 데는 시간이 걸릴 수 있습니다."

#: ../../docs/getting_started/workflow/export/android_custom_build.rst:19
msgid ""
"Instructions will be provided as detailed as possible to do this process."
msgstr "이 과정을 따르기 위해 가능한 디테일하게 설명하겠습니다."

#: ../../docs/getting_started/workflow/export/android_custom_build.rst:22
#, fuzzy
msgid "Set up the custom build environment"
msgstr "맞춤 빌드 환경 설정하기"

#: ../../docs/getting_started/workflow/export/android_custom_build.rst:24
msgid "Go to the Project menu, and install the *Custom Build* template:"
msgstr "프로젝트 메뉴로 갑니다, 그리고 *Custom Build* 템플릿을 설치합니다:"

#: ../../docs/getting_started/workflow/export/android_custom_build.rst:28
#, fuzzy
msgid ""
"Make sure export templates are downloaded. If not, this menu will help you "
"download them."
msgstr ""
"내보내기 템플릿을 다운로드했어야 합니다. 그렇지 않았더라도 이 메뉴가 도움을 "
"줄 것입니다."

#: ../../docs/getting_started/workflow/export/android_custom_build.rst:31
#, fuzzy
msgid ""
"This will create an Gradle-based Android project in ``res://android/build`` "
"and place a ``.gdignore`` file in ``res://android`` so the Godot filesystem "
"ignores this folder. Editing these files is not needed unless you want to :"
"ref:`create your own add-ons<doc_android_plugin>`, or you really need to "
"modify the project."
msgstr ""
"이것은 *\"res://android/build\"*\\ 에 Gradle 기반 Android 프로젝트를 만듭니"
"다, 그리고 .gdignore 파일을 *\"res://android\"*\\ 에 놓습니다, 따라서 Godot "
"파일 시스템은 이 폴더를 무시합니다. :ref:`자신만의 애드온을 만들기"
"<doc_android_plugin>`\\ 나, 정말로 프로젝트를 수정해야 하는 경우가 아니면 이 "
"파일들은 편집하지 않아도 됩니다."

#: ../../docs/getting_started/workflow/export/android_custom_build.rst:37
#, fuzzy
msgid "Install the Android SDK (command-line version)"
msgstr "Android SDK 설치하기 (명령줄 버전)"

#: ../../docs/getting_started/workflow/export/android_custom_build.rst:39
#, fuzzy
msgid ""
"These are the steps for installing the Android SDK using command line. The "
"advantage of this approach is the simplicity and small download/install "
"size. It can be more challenging though. The Android Studio approach is "
"easier, but it requires downloading and installing Android Studio (which may "
"require more than 1 GB of storage)."
msgstr ""
"명령줄을 사용해서 Android SDK를 설치하려면 몇 가지 절차가 있습니다. 이 방식"
"의 장점은 간단하며 작은 다운로드/설치 크기입니다. 그렇지만 조금 더 힘들 수 있"
"습니다. Android 스튜디오 방식은 더 쉽지만, Android 스튜디오를 다운로드하고 설"
"치해야 합니다 (이는 1기가보다 더 클 수도 있습니다)."

#: ../../docs/getting_started/workflow/export/android_custom_build.rst:46
#, fuzzy
msgid "Install a JDK"
msgstr "Java 설치하기"

#: ../../docs/getting_started/workflow/export/android_custom_build.rst:48
#, fuzzy
msgid ""
"The Android SDK doesn't come with Java, so it needs to be installed "
"manually. You need to install a Java SDK (**not** just the runtime or JRE). "
"`OpenJDK 8 <https://adoptopenjdk.net/index.html>`__ is recommended. Oracle "
"JDK 8 should also work. Later versions may not work for Android development."
msgstr ""
"Android SDK에는 Java가 포함되지 않습니다, 따라서 수동으로 설치해야 합니다. "
"Java SDK를 설치합니다 (runtime이나 JRE가 **아닙니다**). OpenSDK 8을 추천합니"
"다, 다른 방법으로 Oracle의 버전 8 용 Java SDK도 가능합니다. 이후 버전은 "
"Android 개발에 작동하지 않을 수 있습니다."

#: ../../docs/getting_started/workflow/export/android_custom_build.rst:55
#, fuzzy
msgid "Download the command-line tools"
msgstr "명령줄 도구 다운로드하기"

#: ../../docs/getting_started/workflow/export/android_custom_build.rst:57
#, fuzzy
msgid ""
"Go to the `Android Studio download page <https://developer.android.com/"
"studio/#command-tools>`_. To save disk space, you don't want the full IDE, "
"so don't download it."
msgstr "Android SDK: https://developer.android.com/studio/"

#: ../../docs/getting_started/workflow/export/android_custom_build.rst:62
msgid ""
"If you do want Android Studio, read further down for instructions for doing "
"the same using Android Studio."
msgstr ""

#: ../../docs/getting_started/workflow/export/android_custom_build.rst:65
#, fuzzy
msgid ""
"Look on that page for the *Command line tools only* section. Currently, they "
"are listed under *Download Options*. Scroll down a bit until you see them."
msgstr ""
"해당 페이지에서 *Command Line Tools*\\ 를 찾아봅니다. 현재 *Download "
"Options* 아래에 있습니다. 아래로 화면을 스크롤합니다."

#: ../../docs/getting_started/workflow/export/android_custom_build.rst:70
#, fuzzy
msgid ""
"Download the ZIP file for your platform, there will be a single ``tools`` "
"folder inside:"
msgstr ""
"플랫폼에 맞는 zip 파일을 다운로드합니다, 거기에는 하나의 *tools* 폴더가 있습"
"니다:"

#: ../../docs/getting_started/workflow/export/android_custom_build.rst:75
msgid ""
"This may appear a little confusing, but be sure to follow these instructions "
"carefully:"
msgstr "약간 혼란스러울 수 있습니다, 그러므로 다음 설명을 주의깊게 따르세요:"

#: ../../docs/getting_started/workflow/export/android_custom_build.rst:78
#, fuzzy
msgid ""
"Create a new folder anywhere you want named ``android-sdk`` (it **must** be "
"an empty directory). On Windows, the following path is usually good enough:"
msgstr ""
"아무 위치에서 새 폴더를 만들고 *android-sdk*\\ 로 이름을 짓습니다 (**빈 디렉"
"토리이어야 합니다). Windows에서는,"

#: ../../docs/getting_started/workflow/export/android_custom_build.rst:85
#, fuzzy
msgid ""
"Unzip the Android SDK ZIP file you just downloaded there. The only thing in "
"the directory you created in the previous step should be the ``tools`` "
"folder with its contents inside, like this:"
msgstr ""
"다음 명령이 충분합니다. 방금 다운로드한 *sdk zip 파일*\\ 의 압축을 풉니다. 이"
"전 단계를 거치고 디렉토리에 있는 것은 파일이 들어 있는 *tools* 폴더이어야합니"
"다, 이렇게 말입니다:"

#: ../../docs/getting_started/workflow/export/android_custom_build.rst:97
#, fuzzy
msgid "Accepting the licenses"
msgstr "라이선스 수락하기"

#: ../../docs/getting_started/workflow/export/android_custom_build.rst:99
#, fuzzy
msgid ""
"To be able to use the Android SDK tools, Google requires you to accept its "
"licenses."
msgstr ""
"여기에서 하는 모든 것이 좋거나 나쁠 수 있습니다, 하지만 무엇을 하든 지 구글"
"은 라이선스 수락을 요청합니다."

#: ../../docs/getting_started/workflow/export/android_custom_build.rst:102
#, fuzzy
msgid ""
"To do this, the ``sdkmanager`` must be executed from the command line with a "
"special argument. Navigate to the ``tools/bin`` directory inside the SDK "
"folder (instructions provided for Windows users, as Linux and macOS users "
"are expected to understand how command line navigation works):"
msgstr ""
"수락하기 위해선, *sdkmanager*\\ 를 특별한 인수를 가진 명령줄에서 실행해야 합"
"니다. sdk 폴더 내의 *tools/bin* 디렉토리로 갑니다 (Windows 사용자를 위한 설명"
"이며, Unix 사용자는 명령줄 내비게이션이 작동하는 방식을 알고 있다고 가정합니"
"다):"

#: ../../docs/getting_started/workflow/export/android_custom_build.rst:109
msgid "Then open a command line window:"
msgstr "그 후 명령줄 창을 엽니다:"

#: ../../docs/getting_started/workflow/export/android_custom_build.rst:113
#, fuzzy
msgid "In there, run ``sdkmanager --licenses``:"
msgstr "여기서 \"--licenses\" 인수가 있는 sdkmanager를 수동으로 실행합니다:"

#: ../../docs/getting_started/workflow/export/android_custom_build.rst:117
#, fuzzy
msgid ""
"This will ask you to accept several licenses, just write ``y`` and press :"
"kbd:`Enter` on every of them until it's done."
msgstr ""
"이것으로 몇 가지 라이선스를 수락하는 요청들이 들어옵니다, 모든 요청이 끝날 때"
"까지 *\"y\"*\\ 를 치고 *엔터*\\ 를 누릅니다."

#: ../../docs/getting_started/workflow/export/android_custom_build.rst:120
#, fuzzy
msgid ""
"Afterwards, install the platform tools (this is required to install ``adb``):"
msgstr ""
"그런 다음, 플랫폼 도구를 실행합니다 (*adb*\\ 를 설치하는 데 필요합니다):"

#: ../../docs/getting_started/workflow/export/android_custom_build.rst:126
#: ../../docs/getting_started/workflow/export/android_custom_build.rst:210
#, fuzzy
msgid "Generating the keystore"
msgstr "Keystore 생성하기"

#: ../../docs/getting_started/workflow/export/android_custom_build.rst:128
#, fuzzy
msgid ""
"Once the *platform tools* are installed, the last step is to generate a "
"debug keystore (this is needed to build). Go up two folders by writing:"
msgstr ""
"*플랫폼 도구*\\ 를 설치하면, 마지막 단계는 디버그 Keystore를 생성하는 것입니"
"다 (빌드에 필요합니다). 다음 명령을 쳐서 두 폴더 위로 이동합니다:"

#: ../../docs/getting_started/workflow/export/android_custom_build.rst:135
#, fuzzy
msgid "(or open a new shell in the ``android-sdk`` folder)."
msgstr "(혹은 *android-sdk* 폴더에서 새 셸을 엽니다)."

#: ../../docs/getting_started/workflow/export/android_custom_build.rst:137
#, fuzzy
msgid ""
"And you need to input the following line (on Linux and macOS, this should "
"work out of the box, for Windows there are further instructions below):"
msgstr ""
"그리고 다음 문장을 입력해야 합니다 (Unix에서 즉시 실행될 것이며, Windows에서"
"는 아래 추가 설명이 있습니다):"

#: ../../docs/getting_started/workflow/export/android_custom_build.rst:144
#, fuzzy
msgid ""
"On Windows, the full path to Java should be provided. You need to add ``&`` "
"at the beginning of the line if you use PowerShell; it's not needed for the "
"regular ``cmd.exe`` console."
msgstr ""
"Windows에서는, Java를 향하는 전체 경로를 제공해야 합니다 (그리고 PowerShell"
"을 사용한다면 문장의 시작에 &를 추가해야 합니다, 일반적인 콘솔에는 필요하지 "
"않습니다)."

#: ../../docs/getting_started/workflow/export/android_custom_build.rst:148
#, fuzzy
msgid ""
"To make it clearer, here is an capture of a line that works on PowerShell "
"(by adding ``&`` and the full Java path before ``keytool.exe``). Again, keep "
"in mind that you need Java installed:"
msgstr ""
"명확하게 하기 위해, PowerShell에서 작동하는 문장 캡쳐본이 있습니다 (&를 추가"
"하고 keytool.exe에 대한 전체 Java 경로를 추가함). 다시 말하지만, Java가 설치"
"되어 있어야 합니다:"

#: ../../docs/getting_started/workflow/export/android_custom_build.rst:154
#: ../../docs/getting_started/workflow/export/android_custom_build.rst:165
#: ../../docs/getting_started/workflow/export/android_custom_build.rst:237
#: ../../docs/getting_started/workflow/export/android_custom_build.rst:248
#, fuzzy
msgid "(right-click and open the image in a new tab if this appears too small)"
msgstr "(이미지가 너무 작으면, 우클릭하고 새 탭에서 이미지를 여세요)"

#: ../../docs/getting_started/workflow/export/android_custom_build.rst:158
#: ../../docs/getting_started/workflow/export/android_custom_build.rst:241
msgid "Setting up Godot"
msgstr "Godot에서 설정하기"

#: ../../docs/getting_started/workflow/export/android_custom_build.rst:160
#: ../../docs/getting_started/workflow/export/android_custom_build.rst:243
#, fuzzy
msgid ""
"Go to the **Editor Settings** and set up a few fields in **Export > "
"Android**. Make sure they look like the following:"
msgstr ""
"*편집기 설정*\\ 으로 가서 *Export -> Android*\\ 의 몇 가지 영역을 설정합니"
"다. 다음과 같아야 합니다:"

#: ../../docs/getting_started/workflow/export/android_custom_build.rst:167
#: ../../docs/getting_started/workflow/export/android_custom_build.rst:250
#, fuzzy
msgid ""
"As it can be seen, most paths are inside either the ``android-sdk`` folder "
"you originally created, or inside the Java install. For Linux and macOS "
"users, ``jarsigner`` is often located in ``/usr/bin``."
msgstr ""
"보시다시피, 대부분의 경로는 원래 만든 *android-sdk*\\ 에 있거나 Java 내부에 "
"있습니다. Unix 사용자의 경우, *jarsigner*\\ 는 종종 \"/usr/bin\"\\ 에 있습니"
"다."

#: ../../docs/getting_started/workflow/export/android_custom_build.rst:171
#: ../../docs/getting_started/workflow/export/android_custom_build.rst:254
msgid "With this, you should be all set."
msgstr "이것으로 모두 설정되었습니다."

#: ../../docs/getting_started/workflow/export/android_custom_build.rst:175
msgid "Install the Android SDK (Android Studio)"
msgstr "Android SDK 설치하기 (Android 스튜디오)"

#: ../../docs/getting_started/workflow/export/android_custom_build.rst:177
#, fuzzy
msgid ""
"If you just finished installing the SDK via the command-line tools, feel "
"free to skip this section entirely. The Android Studio path is easier, but "
"it takes up more disk space. It's also useful if you plan to develop Godot "
"for Android (modify the Java source code) or if you plan to develop add-ons."
msgstr ""
"명령줄 도구를 통해 SDK 설치하기를 끝냈다면, 이 섹션은 편하게 넘어가세요. "
"Android 스튜디오 경로는 더 쉽지만, 더 많은 디스크 공간을 차지합니다. Android "
"용 Godot를 개발하려는 계획이라면 (Java 소스 코드 수정), 혹은 애드온을 개발할 "
"계획이라면 좋을 것입니다."

#: ../../docs/getting_started/workflow/export/android_custom_build.rst:183
#, fuzzy
msgid "Download and install Android Studio"
msgstr "Android 스튜디오 다운로드하고 설치하기"

#: ../../docs/getting_started/workflow/export/android_custom_build.rst:185
msgid ""
"Download the latest version of Android Studio. When installing, pay "
"attention to where the *android-sdk* directory is created."
msgstr ""
"최신 Android 스튜디오를 다운로드합니다. 설치할 때, 어디에 *android-sdk* 디렉"
"토리가 만들어지는 지 확인하세요."

#: ../../docs/getting_started/workflow/export/android_custom_build.rst:190
msgid ""
"This is funny, the path it proposes by default contains whitespace (and "
"complains about it). It must be changed."
msgstr ""
"이게 재밌는 것이, 기본적으로 제안하는 경로에는 공백이 포함됩니다 (그리고 그것"
"에 불평합니다). 이것은 바꾸어야 합니다."

#: ../../docs/getting_started/workflow/export/android_custom_build.rst:192
msgid ""
"In any case, it's better to select a different path inside your user "
"folders. The recommended one is usually:"
msgstr ""
"어쨌든, 사용자 폴더 내에서 다른 경로를 선택하는 것이 좋습니다. 추천하는 경로"
"는 보통 이렇습니다:"

#: ../../docs/getting_started/workflow/export/android_custom_build.rst:199
msgid ""
"Replace *yourusername* by your actual user name. Once it's correct, select "
"from the list above in the same screen:"
msgstr ""
"*yourusername* 부분을 실제 사용자 이름으로 바꿉니다. 올바르면 위와 같은 화면"
"에서 다음을 선택하세요:"

#: ../../docs/getting_started/workflow/export/android_custom_build.rst:202
msgid "Android SDK"
msgstr "Android SDK"

#: ../../docs/getting_started/workflow/export/android_custom_build.rst:203
msgid "Android SDK Platform"
msgstr "Android SDK Platform"

#: ../../docs/getting_started/workflow/export/android_custom_build.rst:205
msgid ""
"The rest are not needed, because the build system will fetch them itself. "
"After selecting them, go on with the installation."
msgstr ""
"나머지는 필요없습니다, 빌드 시스템이 자체적으로 이들을 가져오기 때문이죠. 선"
"택한 추 설치를 계속하세요."

#: ../../docs/getting_started/workflow/export/android_custom_build.rst:212
#, fuzzy
msgid ""
"Go to the folder where you installed ``android-sdk`` in the previous step, "
"use File Explorer and open a command line tool there:"
msgstr ""
"이전 단계에서 android-sdk를 설치한 폴더로 가서, 파일 탐색기를 사용하고 거기에"
"서 명령줄 도구를 엽니다:"

#: ../../docs/getting_started/workflow/export/android_custom_build.rst:217
#, fuzzy
msgid ""
"The actual command line to type is the following. On Linux and macOS, it "
"should work out of the box, but on Windows, it needs additional details "
"(keep reading afterwards)."
msgstr ""
"실제 입력할 명령 문장은 다음과 같습니다. Unix에서 이것은 즉시 작동하지만, "
"Windows에서는 추가 세부 사항이 필요합니다 (계속 읽어주세요)."

#: ../../docs/getting_started/workflow/export/android_custom_build.rst:225
#, fuzzy
msgid ""
"On Windows, the full path to Java should be provided (and ``&`` needs to be "
"added at the beginning on the line if you use PowerShell, it's not needed "
"for the regular ``cmd.exe`` console). Don't worry, at least by using Android "
"Studio on Windows, Java comes bundled with it."
msgstr ""
"Windows에서는, Java에 대한 전체 경로를 제공해야 합니다 (그리고 PowerShell을 "
"사용한다면, 문장의 시작 부분에 &를 추가해야 합니다, 일반 명령줄에서는 필요하"
"지 않습니다). 걱정하지 마세요, 적어도 Windows에서 Android 스튜디오를 쓴다면, "
"Java가 번들로 제공됩니다."

#: ../../docs/getting_started/workflow/export/android_custom_build.rst:230
#, fuzzy
msgid ""
"To make it clearer, here is a screen capture of a line that works on "
"PowerShell (by adding ``&`` and the full Java Path to ``keytool.exe``; "
"remove ``&`` if you use ``cmd.exe``). It uses a path to the Java version "
"that comes with Android Studio:"
msgstr ""
"명확하게 하기 위해, PowerShell에서 작동하는 문장 캡쳐본이 있습니다 (&를 추가"
"하고 keytool.exe에 대한 전체 Java 경로를 추가합니다, 일반 콘솔을 사용한다면 &"
"를 제거하세요). Android 스튜디오와 함께 제공되는 Java 버전에 대한 경로를 사용"
"합니다:"

#: ../../docs/getting_started/workflow/export/android_custom_build.rst:258
#, fuzzy
msgid "Enabling the custom build and exporting"
msgstr "맞춤 빌드를 활성화하고 내보내기"

#: ../../docs/getting_started/workflow/export/android_custom_build.rst:260
#, fuzzy
msgid ""
"When setting up the Android project in the **Project > Export** dialog, "
"**Custom Build** needs to be enabled:"
msgstr ""
"*프로젝트 -> 내보내기* 대화 상자에서 Android 프로젝트를 설정할 때, *custiom "
"build*\\ 가 켜져있어야 합니다:"

#: ../../docs/getting_started/workflow/export/android_custom_build.rst:265
#, fuzzy
msgid ""
"From now on, attempting to export the project or one-click deploy will call "
"the `Gradle <https://gradle.org/>`__ build system to generate fresh "
"templates (this window will appear every time):"
msgstr ""
"지금부터 프로젝트를 내보내거나, 원 클릭 배포를 하면 *Gradle* 빌드 시스템으로 "
"새로운 템플릿을 생성하게 됩니다 (매 번 이 창이 나타날 것입니다):"

#: ../../docs/getting_started/workflow/export/android_custom_build.rst:271
msgid ""
"The templates built will be used automatically afterwards, so no further "
"configuration is needed."
msgstr ""
"작성된 템플릿은 나중에 자동으로 사용되므로, 더 이상 구성할 필요가 없습니다."

#: ../../docs/getting_started/workflow/export/changing_application_icon_for_windows.rst:4
msgid "Changing application icon for Windows"
msgstr "Windows에 응용 프로그램 아이콘 바꾸기"

#: ../../docs/getting_started/workflow/export/changing_application_icon_for_windows.rst:6
msgid ""
"By default, the exported project's icon will be the Godot icon. You will "
"most likely want to change that for your project. There are two types of "
"icons that can be changed on Windows: the file icon and the taskbar icon."
msgstr ""
"기본적으로 내보낸 프로젝트의 아이콘은 Godot 아이콘입니다. 프로젝트를 위해 아"
"이콘을 바꾸고 싶을 것입니다. Windows에서 바꿀 수 있는 두 가지 유형의 아이콘"
"이 있습니다: 파일 아이콘하고 작업 표시줄 아이콘입니다."

#: ../../docs/getting_started/workflow/export/changing_application_icon_for_windows.rst:11
msgid "Changing the taskbar icon"
msgstr "작업 표시줄 아이콘 바꾸기"

#: ../../docs/getting_started/workflow/export/changing_application_icon_for_windows.rst:13
msgid ""
"The taskbar icon is the icon that shows up on the taskbar when your project "
"is running."
msgstr ""
"작업 표시줄 아이콘은 프로젝트가 실행하면 작업 표시줄에 나타나는 아이콘입니다."

#: ../../docs/getting_started/workflow/export/changing_application_icon_for_windows.rst:18
msgid ""
"To change the taskbar icon, go to **Project → Project Settings → Application "
"→ Config → Icon**. Click on the folder icon and select your desired icon."
msgstr ""
"작업 표시줄 아이콘을 바꾸기 위해선, **프로젝트 → 프로젝트 설정 → Application "
"→ Config → Icon**\\ 으로 갑니다. 폴더 아이콘을 클릭하고 원하는 아이콘을 선택"
"합니다."

#: ../../docs/getting_started/workflow/export/changing_application_icon_for_windows.rst:22
msgid "This is also the icon that gets displayed in the Godot project list."
msgstr "Godot 프로젝트 목록에서 표시되는 아이콘이기도 합니다."

#: ../../docs/getting_started/workflow/export/changing_application_icon_for_windows.rst:27
msgid "Changing the file icon"
msgstr "파일 아이콘 바꾸기"

#: ../../docs/getting_started/workflow/export/changing_application_icon_for_windows.rst:29
msgid ""
"The file icon is the icon of the executable that you click on to start the "
"project."
msgstr ""
"파일 아이콘은 프로젝트를 실행하기 위해 클릭하는 실행 파일의 아이콘입니다."

#: ../../docs/getting_started/workflow/export/changing_application_icon_for_windows.rst:34
msgid ""
"Before selecting it in the export options, you will need to install an extra "
"tool called **rcedit**. You can download it `here <https://github.com/"
"electron/rcedit/releases>`_."
msgstr ""
"내보내기 설정에서 아이콘을 선택하기 전에, **rcedit**\\ 이라는 추가 도구를 설"
"치해야합니다. `여기서 <https://github.com/electron/rcedit/releases>`_ 다운로"
"드할 수 있습니다."

#: ../../docs/getting_started/workflow/export/changing_application_icon_for_windows.rst:38
msgid ""
"After downloading, you need to tell Godot the path to the rcedit executable "
"on your computer. Go to **Editor → Editor Settings → Export → Windows**. "
"Click on the folder icon for the **rcedit** entry. Navigate to and select "
"the rcedit executable."
msgstr ""
"다운로드한 후, Godot에 컴퓨터에서 rcedit 실행 파일의 경로를 주어야 합니다. **"
"편집기 → 편집기 설정 → Export → Windows**\\ 로 갑니다. **rcedit** 항목의 폴"
"더 아이콘을 클릭합니다. rcedit 실행 파일로 가서 선택합니다."

#: ../../docs/getting_started/workflow/export/changing_application_icon_for_windows.rst:44
msgid ""
"Linux and macOS users will also need to install `WINE <https://www.winehq."
"org/>`_ to use rcedit."
msgstr ""
"Linux와 macOS 사용자는 rcedit를 사용하려면 `WINE <https://www.winehq.org/>`_"
"\\ 을 별도로 설치해야 합니다."

#: ../../docs/getting_started/workflow/export/changing_application_icon_for_windows.rst:49
msgid ""
"You should now have everything in place to change the file icon. To do that, "
"you will need to specify the icon when exporting. Go to **Project → "
"Export**. Assuming you have already created a Windows Desktop preset, select "
"your icon in ICO format in the **Application → Icon** field."
msgstr ""
"이제 파일 아이콘을 바꾸기 위한 준비가 되었습니다. 하기 위해선, 내보낼 때 아이"
"콘을 지정해야 합니다. **프로젝트 → 내보내기**\\ 로 갑니다. 이미 Windows 데스"
"크톱 프리셋이 준비되었다고 가정합니다, **Application → Icon** 영역에서 ICO 형"
"식으로 된 아이콘을 선택합니다."

#: ../../docs/getting_started/workflow/export/changing_application_icon_for_windows.rst:55
msgid ""
"You can use software such as GIMP to export an ICO image. For more "
"information, please refer to `this tutorial <http://skyboygames.com/easily-"
"create-a-windows-app-icon-with-gimp/>`_."
msgstr ""
"GIMP와 같은 소프트웨어로 ICO 이미지를 내보낼 수 있습니다. 더 자세한 정보는  `"
"이 튜토리얼 <http://skyboygames.com/easily-create-a-windows-app-icon-with-"
"gimp/>`_\\ 을 참고하세요."

#: ../../docs/getting_started/workflow/export/changing_application_icon_for_windows.rst:62
msgid "Testing the result"
msgstr "결과 시험하기"

#: ../../docs/getting_started/workflow/export/changing_application_icon_for_windows.rst:64
msgid ""
"You can now export the project. If it worked correctly, you should see this:"
msgstr ""
"이제 프로젝트를 내보낼 수 있습니다. 작업이 잘 됬다면 이렇게 보여야 합니다:"

#: ../../docs/getting_started/workflow/export/changing_application_icon_for_windows.rst:69
msgid "ICO file requirements"
msgstr "ICO 파일 요구사항"

#: ../../docs/getting_started/workflow/export/changing_application_icon_for_windows.rst:71
msgid ""
"Regardless of which program you use to create your `ICO file <https://en."
"wikipedia.org/wiki/ICO_(file_format)>`_, there are some requirements to "
"ensure the icon (and your executable) works on Windows."
msgstr ""
"`ICO 파일 <https://en.wikipedia.org/wiki/ICO_(file_format)>`_\\ 을 만드는 어"
"떤 프로그램이든 관계없이, Windows에 맞는 아이콘 (그리고 실행 파일)에는 몇 가"
"지 요구사항이 있습니다."

#: ../../docs/getting_started/workflow/export/changing_application_icon_for_windows.rst:75
msgid ""
"This is a bit tricky, as can be seen in the following Stack Overflow "
"threads: `one <https://stackoverflow.com/q/3236115/>`_, `two <https://"
"stackoverflow.com/q/40749785/>`_."
msgstr ""
"다음 Stack Overflow 스레드가 있을 정도로 조금 까다롭습니다: `하나 <https://"
"stackoverflow.com/q/3236115/>`_, `둘 <https://stackoverflow.com/q/40749785/"
">`_."

#: ../../docs/getting_started/workflow/export/changing_application_icon_for_windows.rst:79
msgid ""
"Your ICO file should at least contain icons in the following resolutions: "
"16×16, 48×48 and 256×256."
msgstr ""
"ICO 파일은 적어도 아이콘이 다음 화면 비율에 있어야 합니다: 16x16, 48x48 그리"
"고 256x256."

#: ../../docs/getting_started/workflow/export/changing_application_icon_for_windows.rst:82
msgid ""
"If you want to fully support high-DPI screens, this is the full list of "
"supported icon sizes on Windows 10: 16, 20, 24, 28, 30, 31, 32, 40, 42, 47, "
"48, 56, 60, 63, 84 and one larger than 255 pixels (such as 256, 512 or 1024)."
msgstr ""
"높은 DPI 화면을 완벽하게 지원하고 싶다면, 다음은 Windows 10에서 지원하는 아이"
"콘 크기 전체 목록입니다: 16, 20, 24, 28, 30, 31, 32, 40, 42, 47, 48, 56, 60, "
"63, 84 그리고 255 화소보다 큰 것 하나 (256, 512 또는 1024같은 것)."

#: ../../docs/getting_started/workflow/export/changing_application_icon_for_windows.rst:87
msgid ""
"It is also possible to convert a PNG image to an hiDPI-friendly ICO file "
"using this `ImageMagick <https://www.imagemagick.org/>`_ command:"
msgstr ""
"다음 `ImageMagick <https://www.imagemagick.org/>`_ 명령문을 사용하면 PNG 이미"
"지를 hiDPI 친화적인 ICO 파일로 변환할 수 있습니다:"

#: ../../docs/getting_started/workflow/best_practices/introduction_best_practices.rst:6
msgid ""
"This series is a collection of best practices to help you work efficiently "
"with Godot."
msgstr ""

#: ../../docs/getting_started/workflow/best_practices/introduction_best_practices.rst:9
msgid ""
"Godot allows for a great amount of flexibility in how you structure a "
"project's codebase and break it down into scenes. Each approach has its own "
"pros and cons, and they can be hard to weigh until you've worked with the "
"engine for long enough."
msgstr ""

#: ../../docs/getting_started/workflow/best_practices/introduction_best_practices.rst:13
msgid ""
"There are always many ways to structure your code and solve specific "
"programming problems. It would be impossible to cover them all here."
msgstr ""

#: ../../docs/getting_started/workflow/best_practices/introduction_best_practices.rst:16
msgid ""
"That is why each article starts from a real-world problem. We will break "
"down each problem in fundamental questions, suggest solutions, analyze the "
"pros and cons of each option, and highlight the best course of action for "
"the problem at hand."
msgstr ""

#: ../../docs/getting_started/workflow/best_practices/introduction_best_practices.rst:20
msgid ""
"You should start by reading :ref:`doc_what_are_godot_classes`. It explains "
"how Godot's nodes and scenes relate to classes and objects in another Object-"
"Oriented programming language. It will help you make sense of the rest of "
"the series."
msgstr ""

#: ../../docs/getting_started/workflow/best_practices/introduction_best_practices.rst:26
msgid ""
"The best practices in Godot rely on Object-Oriented design principles. We "
"use tools like the `single responsibility <https://en.wikipedia.org/wiki/"
"Single_responsibility_principle>`_ principle and `encapsulation <https://en."
"wikipedia.org/wiki/Encapsulation_(computer_programming)>`_."
msgstr ""

#: ../../docs/getting_started/workflow/best_practices/what_are_godot_classes.rst:4
#, fuzzy
msgid "Godot scenes and scripts are classes"
msgstr "클래스로 스크립트를 등록하기"

#: ../../docs/getting_started/workflow/best_practices/what_are_godot_classes.rst:6
msgid ""
"In Godot, scripts and scenes can both be the equivalent of classes in an "
"Object-Oriented programming language. The main difference is that scenes are "
"`declarative code <https://en.wikipedia.org/wiki/Declarative_programming>`_, "
"while scripts can contain `imperative code <https://en.wikipedia.org/wiki/"
"Imperative_programming>`_."
msgstr ""

#: ../../docs/getting_started/workflow/best_practices/what_are_godot_classes.rst:12
msgid ""
"As a result, many best practices in Godot boil down to applying Object-"
"Oriented design principles to the scenes, nodes, or script that make up your "
"game."
msgstr ""

#: ../../docs/getting_started/workflow/best_practices/what_are_godot_classes.rst:15
msgid ""
"This guide explains how scripts and scenes work in the engine's core, to "
"help you get a sense of how Godot works under the hood, and to help you "
"better understand where some of this series' best practices come from."
msgstr ""

#: ../../docs/getting_started/workflow/best_practices/what_are_godot_classes.rst:20
#, fuzzy
msgid "Making sense of classes in Godot"
msgstr "Godot 3.0+에서 에셋 가져오기"

#: ../../docs/getting_started/workflow/best_practices/what_are_godot_classes.rst:22
#, fuzzy
msgid ""
"Godot Engine provides built-in classes like :ref:`Node <class_Node>`. User-"
"created types are not technically classes. Instead, they are resources that "
"tell the engine a sequence of initializations to perform on one of the "
"engine's built-in classes."
msgstr ""
"Godot 엔진은 별도의 설치없이 클래스를 제공합니다 (:ref:`Node <class_Node>`\\ "
"처럼 말이죠), 하지만 사용자가 만든 타입은 사실 클래스가 아닙니다. 대신 엔진 "
"클래스에서 작동하기 위해 엔진에게 초기화 시퀀스를 알려주는 리소스입나다."

#: ../../docs/getting_started/workflow/best_practices/what_are_godot_classes.rst:27
#, fuzzy
msgid ""
"Godot's internal classes have methods that register a class's data with a :"
"ref:`ClassDB <class_ClassDB>`. This database provides runtime access to "
"class information. ``ClassDB`` contains information about classes like:"
msgstr ""
"Godot의 내장 클래스는 메서드를 가지며 클래스의 데이터를 :ref:`ClassDB "
"<class_ClassDB>`\\ 로 등록합니다. 이 데이터베이스는 (\"reflection\"이라 하"
"는) 클래스 정보에 액세스하여 런타임을 제공합니다. ClassDB에 저장된 것은 다음 "
"것도 포함됩니다..."

#: ../../docs/getting_started/workflow/best_practices/what_are_godot_classes.rst:31
msgid "properties"
msgstr "속성"

#: ../../docs/getting_started/workflow/best_practices/what_are_godot_classes.rst:32
msgid "methods"
msgstr "메서드"

#: ../../docs/getting_started/workflow/best_practices/what_are_godot_classes.rst:33
msgid "constants"
msgstr "상수"

#: ../../docs/getting_started/workflow/best_practices/what_are_godot_classes.rst:34
msgid "signals"
msgstr "시그널"

#: ../../docs/getting_started/workflow/best_practices/what_are_godot_classes.rst:36
#, fuzzy
msgid ""
"This ``ClassDB`` is what Objects check against when performing an operation "
"like accessing a property or calling a method. ``ClassDB`` checks the "
"database's records and the records of the Object's base types to see if the "
"Object supports the operation."
msgstr ""
"게다가 ClassDB는 어떤 객체가 언제 연산을 수행하는 지를 확인합니다. 속성에 액"
"세스하는가? 메서드를 호출하는가? 시그널을 방출하는가? 이 모두를 데이터베이스"
"의 기록 (그리고 객체의 기본 타입의 기록)에서 확인함으로써 객체가 연산을 지원"
"하는 지 여부를 볼 수 있습니다. 모든 C++ 객체는 정적 `_bind_methods()` 함수를 "
"정의하는데 이걸로 데이터베이스에 등록한 C++ 내용물이 무엇이고 어떻게 등록했는"
"지를 설명합니다."

#: ../../docs/getting_started/workflow/best_practices/what_are_godot_classes.rst:41
msgid ""
"On the engine's side, every class defines a static ``_bind_methods()`` "
"function that describes what C++ content it registers to the database and "
"how. When you use the engine, you can extend the methods, properties, and "
"signals available from the ``ClassDB`` by attaching a :ref:`Script "
"<class_Script>` to your node."
msgstr ""

#: ../../docs/getting_started/workflow/best_practices/what_are_godot_classes.rst:46
#, fuzzy
msgid ""
"Objects check their attached script before the database. This is why scripts "
"can override built-in methods. If a script defines a "
"``_get_property_list()`` method, Godot appends that data to the list of "
"properties the Object fetches from the ClassDB. The same is true for other "
"declarative code."
msgstr ""
"*이것*\\ 이 바로 :ref:`Script <class_Script>`\\ 입니다. 객체는 데이터베이스 "
"이전에 붙어있는 스크립트를 확인합니다, 즉 스크립트는 메서드를 재정의할 수도 "
"있습니다. 스크립트가  `_get_property_list()` 메서드를 정의한다면, ClassDB에"
"서 객체가 가져오는 속성 목록이 데이터로 추가됩니다. 이는 다른 선언적 코드에서"
"도 마찬가지입니다."

#: ../../docs/getting_started/workflow/best_practices/what_are_godot_classes.rst:51
msgid ""
"Even scripts that don't inherit from a built-in type, i.e. scripts that "
"don't start with the ``extends`` keyword, implicitly inherit from the "
"engine's base :ref:`Reference <class_Reference>` class. This allows the "
"Object to defer to the script's content where the engine logic deems "
"appropriate."
msgstr ""

#: ../../docs/getting_started/workflow/best_practices/what_are_godot_classes.rst:58
msgid ""
"As a result, you can instance scripts without the ``extends`` keyword from "
"code, but you cannot attach them to a :ref:`Node <class_Node>`"
msgstr ""

#: ../../docs/getting_started/workflow/best_practices/what_are_godot_classes.rst:63
msgid "Scripting performances and PackedScene"
msgstr ""

#: ../../docs/getting_started/workflow/best_practices/what_are_godot_classes.rst:65
#, fuzzy
msgid ""
"As the size of Objects increases, the scripts' necessary size to create them "
"grows much, much larger. Creating node hierarchies demonstrates this. Each "
"individual Node's logic could be several hundred lines of code in length."
msgstr ""
"자체적인 문제가 있습니다. 객체의 규모가 커질수록, 그것을 만드는 데 필요한 스"
"크립트의 규모도 더욱 더 커집니다. 이것은 노드 계층 구조를 만드는 것으로 드러"
"납니다. 각 노드의 논리는 수 백줄의 코드가 될 수 있습니다."

#: ../../docs/getting_started/workflow/best_practices/what_are_godot_classes.rst:69
msgid ""
"Let's see a simple example of creating a single ``Node`` as a child. The "
"code below creates a new ``Node``, changes its name, assigns a script to it, "
"sets its future parent as its owner so it gets saved to disk along with it, "
"and finally adds it as a child of the ``Main`` node:"
msgstr ""

#: ../../docs/getting_started/workflow/best_practices/what_are_godot_classes.rst:109
msgid ""
"Script code like this is much slower than engine-side C++ code. Each change "
"makes a separate call to the scripting API which leads to many \"look-ups\" "
"on the back-end to find the logic to execute."
msgstr ""

#: ../../docs/getting_started/workflow/best_practices/what_are_godot_classes.rst:113
msgid ""
"Scenes help to avoid this performance issue. :ref:`PackedScene "
"<class_PackedScene>`, the base type that scenes inherit from, are resources "
"that use serialized data to create objects. The engine can process scenes in "
"batches on the back-end and provide much better performance than scripts."
msgstr ""

#: ../../docs/getting_started/workflow/best_practices/what_are_godot_classes.rst:119
#, fuzzy
msgid "Scenes and scripts are objects"
msgstr "씬과 노드(Scenes and nodes)"

#: ../../docs/getting_started/workflow/best_practices/what_are_godot_classes.rst:121
#, fuzzy
msgid ""
"Why is any of this important to scene organization? Because scenes *are* "
"objects. One often pairs a scene with a scripted root node that makes use of "
"the sub-nodes. This means that the scene is often an extension of the "
"script's declarative code."
msgstr ""
"자, 왜 이렇게 씬 조직이 중요할까요? 씬이 *바로* 객체라는 것을 이해해야합니"
"다. 때로는 하나의 씬과 스크립트과 붙은 루트 노드로 된 씬을 하위 노드로 사용하"
"는 경우도 있습니다. 즉, 씬은 때로 스크립트의 선언적 코드의 확장이 됩니다."

#: ../../docs/getting_started/workflow/best_practices/what_are_godot_classes.rst:126
msgid "The content of a scene helps to define:"
msgstr ""

#: ../../docs/getting_started/workflow/best_practices/what_are_godot_classes.rst:128
#, fuzzy
msgid "What nodes are available to the script"
msgstr "어떤 객체를 스크립트에서 사용할 수 있는지?"

#: ../../docs/getting_started/workflow/best_practices/what_are_godot_classes.rst:129
#, fuzzy
msgid "How they are organized"
msgstr "어떻게 그들이 조직되어있는지?"

#: ../../docs/getting_started/workflow/best_practices/what_are_godot_classes.rst:130
#, fuzzy
msgid "How are they initialized"
msgstr "어떻게 그들이 초기화되는지?"

#: ../../docs/getting_started/workflow/best_practices/what_are_godot_classes.rst:131
msgid "What signal connections they have with each other"
msgstr ""

#: ../../docs/getting_started/workflow/best_practices/what_are_godot_classes.rst:133
msgid ""
"Many Object-Oriented principles which apply to written code *also* apply to "
"scenes."
msgstr ""

#: ../../docs/getting_started/workflow/best_practices/what_are_godot_classes.rst:136
msgid ""
"The scene is *always an extension of the script attached to its root node*. "
"You can see all the nodes it contains as part of a single class."
msgstr ""

#: ../../docs/getting_started/workflow/best_practices/what_are_godot_classes.rst:139
msgid ""
"Most of the tips and techniques explained in this series will build on this."
msgstr ""

#: ../../docs/getting_started/workflow/best_practices/scene_organization.rst:4
msgid "Scene organization"
msgstr "씬 조직"

#: ../../docs/getting_started/workflow/best_practices/scene_organization.rst:6
msgid ""
"This article covers topics related to the effective organization of scene "
"content. Which nodes should one use? Where should one place them? How should "
"they interact?"
msgstr ""
"이 문서는 효과적인 씬 내용 조직에 관련된 주제를 다룹니다. 어떤 노드가 사용되"
"어야 할까?  어디에 그들을 배치해야할까? 어떻게 그들을 상호작용할까?"

#: ../../docs/getting_started/workflow/best_practices/scene_organization.rst:11
msgid "How to build relationships effectively"
msgstr "효과적으로 관계를 짓는 방법"

#: ../../docs/getting_started/workflow/best_practices/scene_organization.rst:13
msgid ""
"When Godot users begin crafting their own scenes, they often run into the "
"following problem:"
msgstr ""
"Godot 사용자는 그들만의 씬을 제작하려 했을 때, 종종 다음과 같은 문제점에 봉착"
"했습니다:"

#: ../../docs/getting_started/workflow/best_practices/scene_organization.rst:16
msgid ""
"They create their first scene and fill it with content before the creeping "
"sense that they need to split it up into re-usable pieces haunts them. They "
"save branches of their scene into their own scene. However, they then notice "
"that the hard references they were able to rely on before are no longer "
"possible. Re-using the scene in multiple places creates issues because the "
"node paths do not find their targets. Signal connections established in the "
"editor break."
msgstr ""
"사용자들은 먼저 첫 씬을 만들고 거기에 내용물을 넣습니다, 이후 씬을 재 사용할 "
"수 있는 조각들로 나눠야 하는 섬뜩한 기운이 그들에게 엄습할 줄은 몰랐을 것입니"
"다. 사용자들은 씬 분기들을 그들의 씬에 저장합니다. 하지만 그 뒤 그들은 이제까"
"지 의지해온 어려운 참고가 더 이상 효과가 없다는 것을 알게됩니다. 씬을 여러 방"
"면에서 재 사용할 수 있는 것이 문제를 일으켰는데, 노드 경로가 대상을 찾지 못하"
"기 때문입니다. 편집기에서 설정된 시그널 연결이 끊어집니다."

#: ../../docs/getting_started/workflow/best_practices/scene_organization.rst:24
msgid ""
"To fix these problems, one must instantiate the sub-scenes without them "
"requiring details about their environment. One needs to be able to trust "
"that the sub-scene will create itself without being picky about how one uses "
"it."
msgstr ""
"이 문제를 해결하기 위해, 환경에 대한 세부 정보가 필요없는 하위 씬을 인스턴스"
"화해야 합니다. 하위 씬은 쓰이는 방식에 따라 까다롭게 만들어지진 않는다는 신뢰"
"를 가져야 합니다."

#: ../../docs/getting_started/workflow/best_practices/scene_organization.rst:29
msgid ""
"One of the biggest things to consider in OOP is maintaining focused, "
"singular-purpose classes with `loose coupling <https://en.wikipedia.org/wiki/"
"Loose_coupling>`_ to other parts of the codebase. This keeps the size of "
"objects small (for maintainability) and improves their reusability so that "
"re-writing completed logic is unnecessary."
msgstr ""
"객체 기반 프로그래밍에서 고려해야할 가장 큰 점은 집중된 단일 목적의 클래스를 "
"코드베이스의 다른 부분과의 `느슨한 연결(loose coupling) <https://en."
"wikipedia.org/wiki/Loose_coupling>`_\\ 을 유지하는 것입니다. 이것으로 객체의 "
"크기를 (유지 보수성을 위해) 작게 유지하며 재사용성을 높여줍니다, 완전한 논리"
"를 다시 짤 필요가 없어집니다."

#: ../../docs/getting_started/workflow/best_practices/scene_organization.rst:36
msgid ""
"These OOP best practices have *several* ramifications for the best practices "
"in scene structure and script usage."
msgstr ""
"이런 객체 지향 프로그래밍 모범 사례는 씬 구조와 스크립트 사용의 모범 사례에 "
"있어 *여러 가지* 파급 효과가 있습니다."

#: ../../docs/getting_started/workflow/best_practices/scene_organization.rst:39
msgid ""
"**If at all possible, one should design scenes to have no dependencies.** "
"That is, one should create scenes that keep everything they need within "
"themselves."
msgstr ""
"**가능하다면 의존성이 없는 씬을 설계해야합니다.** 이는 즉, 외부로 의존하지 않"
"아 모든 것을 유지하는 씬을 만들어야합니다."

#: ../../docs/getting_started/workflow/best_practices/scene_organization.rst:43
msgid ""
"If a scene must interact with an external context, experienced developers "
"recommend the use of `Dependency Injection <https://en.wikipedia.org/wiki/"
"Dependency_injection>`_. This technique involves having a high-level API "
"provide the dependencies of the low-level API. Why do this? Because classes "
"which rely on their external environment can inadvertently trigger bugs and "
"unexpected behavior."
msgstr ""
"씬이 외부 컨텍스트와 상호작용해야 한다면, 경험있는 개발자들은 `의존성 주입 "
"<https://ko.wikipedia.org/wiki/의존성 주입>`_\\ 사용을 권장합니다. 이 기술은 "
"하이 레벨 API를 사용해 로우 레벨 API의 의존성을 제공하는 것과 관련이 있습니"
"다. 왜 이럴까요? 외부 환경에 의존하는 클래스가 우연히 버그를 일으키거나 예측"
"하지 못한 행동을 할 수 있기 때문입니다."

#: ../../docs/getting_started/workflow/best_practices/scene_organization.rst:50
msgid ""
"To do this, one must expose data and then rely on a parent context to "
"initialize it:"
msgstr ""
"이러기 위해, 데이터를 드러낸 다음 초기화하기 위해 부모 컨텍스트에 의존하게 해"
"야합니다:"

#: ../../docs/getting_started/workflow/best_practices/scene_organization.rst:53
msgid ""
"Connect to a signal. Extremely safe, but should use only to \"respond\" to "
"behavior, not start it. Note that signal names are usually past-tense verbs "
"like \"entered\", \"skill_activated\", or \"item_collected\"."
msgstr ""
"시그널에 연결합니다. 매우 안전하지만 행동에 \"응답\"하는 데에만 사용해야하"
"고, 시작에는 쓰면 안됩니다. 시그널 이름은 보통 과거 시제 동사를 사용합니다, "
"\"entered\", \"skill_activated\", 혹은 \"item_collected\"처럼 말이죠."

#: ../../docs/getting_started/workflow/best_practices/scene_organization.rst:74
msgid "Call a method. Used to start behavior."
msgstr "메서드를 호출합니다. 시작 동작에 사용됩니다."

#: ../../docs/getting_started/workflow/best_practices/scene_organization.rst:93
msgid ""
"Initialize a :ref:`FuncRef <class_FuncRef>` property. Safer than a method as "
"ownership of the method is unnecessary. Used to start behavior."
msgstr ""
":ref:`FuncRef <class_FuncRef>` 속성을 초기화합니다. 소유권이 불필요한 메서드"
"보다 안전합니다. 시작 동작에 사용됩니다."

#: ../../docs/getting_started/workflow/best_practices/scene_organization.rst:113
msgid "Initialize a Node or other Object reference."
msgstr "노드나 다른 객체 참조를 초기화합니다."

#: ../../docs/getting_started/workflow/best_practices/scene_organization.rst:132
msgid "Initialize a NodePath."
msgstr "노드 경로를 초기화합니다."

#: ../../docs/getting_started/workflow/best_practices/scene_organization.rst:151
msgid ""
"These options hide the source of accesses from the child node. This in turn "
"keeps the child **loosely coupled** to its environment. One can re-use it in "
"another context without any extra changes to its API."
msgstr ""
"이런 설정은 자식 노드로부터의 접근 소스를 숨깁니다. 이것은 차례대로 자식을 환"
"경에 **느슨하게 결합합니다**. API에 다른 추가 변경사항 없이 다른 컨텍스트에 "
"재 사용할 수 있습니다."

#: ../../docs/getting_started/workflow/best_practices/scene_organization.rst:157
msgid ""
"Although the examples above illustrate parent-child relationships, the same "
"principles apply towards all object relations. Nodes which are siblings "
"should only be aware of their hierarchies while an ancestor mediates their "
"communications and references."
msgstr ""
"위의 예제는 부모 자식 관계를 설명하고 있지만, 모든 객체 관계에 이 원리를 적용"
"할 수 있습니다. 형제 노드는 그들의 계층 구조만 알아야 하며 부모 노드가 그들"
"의 상호작용과 참조를 조정해야 합니다."

#: ../../docs/getting_started/workflow/best_practices/scene_organization.rst:204
msgid ""
"The same principles also apply to non-Node objects that maintain "
"dependencies on other objects. Whichever object actually owns the objects "
"should manage the relationships between them."
msgstr ""
"다른 객체에 종속하는 노드가 아닌 객체도 같은 원리가 적용됩니다. 어떤 객체든"
"지 사실 객체들을 소유하며 그들 간의 관계를 관리해야 합니다."

#: ../../docs/getting_started/workflow/best_practices/scene_organization.rst:210
msgid ""
"One should favor keeping data in-house (internal to a scene) though as "
"placing a dependency on an external context, even a loosely coupled one, "
"still means that the node will expect something in its environment to be "
"true. The project's design philosophies should prevent this from happening. "
"If not, the code's inherent liabilities will force developers to use "
"documentation to keep track of object relations on a microscopic scale; this "
"is otherwise known as development hell. Writing code that relies on external "
"documentation for one to use it safely is error-prone by default."
msgstr ""
"외부 컨텍스트에 종속성을 배치하듯이 데이터를, 심지어 느슨하게 결합된 것도 작"
"업 내 (씬 내부)에 유지하는 것이 좋지만, 여전히 노드가 환경의 무언가가 참이라"
"는 것을 생각하는 것입니다. 프로젝트의 디자인 철학은 문제가 발생하기 전에 이"
"를 예방하는 것입니다. 그렇지 않으면, 코드의 고유 책임이 개발자에게 넘어가 아"
"주 작은 규모에서 객체 관계를 추적하기 위해 문서를 사용하게 될 것입니다; 달리 "
"말해 개발 지옥으로 알려져 있습니다. 외부 문서를 사용하여 코드를 안전하게 사용"
"하는 코드 작성은 기본적으로 오류가 발생하기 쉽습니다."

#: ../../docs/getting_started/workflow/best_practices/scene_organization.rst:219
msgid ""
"To avoid creating and maintaining such documentation, one converts the "
"dependent node (\"child\" above) into a tool script that implements :ref:"
"`_get_configuration_warning() "
"<class_Node_method__get_configuration_warning>`. Returning a non-empty "
"string from it will make the Scene dock generate a warning icon with the "
"string as a tooltip by the node. This is the same icon that appears for "
"nodes such as the :ref:`Area2D <class_Area2D>` node when it has no child :"
"ref:`CollisionShape2D <class_CollisionShape2D>` nodes defined. The editor "
"then self-documents the scene through the script code. No content "
"duplication via documentation is necessary."
msgstr ""
"그러한 문서를 작성하고 유지하는 것을 피하려면, 종속 노드 (위의 \"child\")를  "
"tool 스크립트로 변환하여 :ref:`_get_configuration_warning() "
"<class_Node_method__get_configuration_warning>`\\ 을 구현해야 합니다. 여기서 "
"비어있지 않은 문자열을 반환하는 것으로 씬 독은 노드에 의해 툴팁 문자열과 함"
"께 경고 아이콘을 생성합니다.  :ref:`Area2D <class_Area2D>`\\ 에서 자식 :ref:"
"`CollisionShape2D <class_CollisionShape2D>` 노드가 없을 때 나타나는 그런 아이"
"콘과 같습니다.  그런 다음 편집기는 씬을 스크립트 코드를 통해 자체 문서화합니"
"다. 문서를 통한 콘텐츠 중복은 없습니다."

#: ../../docs/getting_started/workflow/best_practices/scene_organization.rst:230
msgid ""
"A GUI like this can better inform project users of critical information "
"about a Node. Does it have external dependencies? Have those dependencies "
"been satisfied? Other programmers, and especially designers and writers, "
"will need clear instructions in the messages telling them what to do to "
"configure it."
msgstr ""
"이런 GUI는 프로젝트 사용자에게 노드에 대한 중요한 정보를 더 잘 전달할 수 있습"
"니다. 외부 종속성을 갖고 있나요? 그러한 종속성을 만족시켰나요? 다른 프로그래"
"머들, 특히 디자이너와 작가들에게 노드에 무엇을 구성해야 하는 지를 메시지로 명"
"확하게 설명해야 할 것입니다."

#: ../../docs/getting_started/workflow/best_practices/scene_organization.rst:235
msgid ""
"So, why do all this complex switcharoo work? Well, because scenes operate "
"best when they operate alone. If unable to work alone, then working with "
"others anonymously (with minimal hard dependencies, i.e. loose coupling). If "
"the inevitable changes made to a class cause it to interact with other "
"scenes in unforeseen ways, then things break down. A change to one class "
"could result in damaging effects to other classes."
msgstr ""
"그럼 이런 밑장빼기 식의 작업을 왜 할까요? 음, 씬은 홀로 작동할 때 가장 잘 작"
"동하기 때문입니다. 홀로 작동하지 않는 경우, 익명으로 다른 것들과 작동합니다 "
"(최소한의 하드 종속성, 예: 느슨한 결합). 뜻밖의 방법으로 씬과 상호작용하기 위"
"해 클래스가 씬에게 피할 수 없는 변경을 만든다면, 작업은 무너집니다. 한 클래스"
"로의 변경은 다른 클래스에 영향을 끼칠 수 있습니다."

#: ../../docs/getting_started/workflow/best_practices/scene_organization.rst:242
msgid ""
"Scripts and scenes, as extensions of engine classes should abide by *all* "
"OOP principles. Examples include..."
msgstr ""
"스크립트와 씬은, 엔진 클래스의 확장 프로그램으로 *모든* 객체 지향 프로그래밍 "
"원칙을 준수해야 합니다. 예시는 다음을 포함합니다..."

#: ../../docs/getting_started/workflow/best_practices/scene_organization.rst:245
msgid "`SOLID <https://en.wikipedia.org/wiki/SOLID>`_"
msgstr ""
"`SOLID (객체 지향 설계) <https://ko.wikipedia.org/wiki/SOLID_(%EA%B0%9D%EC"
"%B2%B4_%EC%A7%80%ED%96%A5_%EC%84%A4%EA%B3%84)>`_"

#: ../../docs/getting_started/workflow/best_practices/scene_organization.rst:246
msgid "`DRY <https://en.wikipedia.org/wiki/Don%27t_repeat_yourself>`_"
msgstr "`DRY <https://en.wikipedia.org/wiki/Don%27t_repeat_yourself>`_"

#: ../../docs/getting_started/workflow/best_practices/scene_organization.rst:247
msgid "`KISS <https://en.wikipedia.org/wiki/KISS_principle>`_"
msgstr "`KISS 원칙 <https://ko.wikipedia.org/wiki/KISS_%EC%9B%90%EC%B9%99>`_"

#: ../../docs/getting_started/workflow/best_practices/scene_organization.rst:248
msgid "`YAGNI <https://en.wikipedia.org/wiki/You_aren%27t_gonna_need_it>`_"
msgstr "`YAGNI <https://en.wikipedia.org/wiki/You_aren%27t_gonna_need_it>`_"

#: ../../docs/getting_started/workflow/best_practices/scene_organization.rst:251
msgid "Choosing a node tree structure"
msgstr "노드 트리 구조 선택하기"

#: ../../docs/getting_started/workflow/best_practices/scene_organization.rst:253
msgid ""
"So, a developer starts work on a game only to stop at the vast possibilities "
"before them. They might know what they want to do, what systems they want to "
"have, but *where* to put them all? Well, how one goes about making their "
"game is always up to them. One can construct node trees in a myriad of ways. "
"But, for those who are unsure, this helpful guide can give them a sample of "
"a decent structure to start with."
msgstr ""
"따라서 개발자는 게임을 작업하기 전에 게임에 있어서의 막대한 가능성을 막을 수 "
"있습니다. 그들은 그들이 작업하고 싶은 것, 그들이 갖고 싶은 시스템을 알고 있"
"을 것입니다, 하지만 *어디에* 그것들을 넣을 수 있을까요? 음, 게임을 만드는 것"
"은 항상 그들에게 달려있습니다. 노드 트리는 무수한 방법으로 만들 수 있습니다. "
"하지만 확실하지 않은 사람들을 위해, 이 유용한 가이드가 시작하기에 알맞은 구"
"조 샘플을 보여드리겠습니다."

#: ../../docs/getting_started/workflow/best_practices/scene_organization.rst:260
msgid ""
"A game should always have a sort of \"entry point\"; somewhere the developer "
"can definitively track where things begin so that they can follow the logic "
"as it continues elsewhere. This place also serves as a bird's eye view to "
"all of the other data and logic in the program. For traditional "
"applications, this would be the \"main\" function. In this case, it would be "
"a Main node."
msgstr ""
"게임은 항상 일종은 \"진입 지점\"을 갖습니다; 때로는 개발자들이 어디서 진입 지"
"점이 시작하는지 명확하게 추적하고 그렇게 해서 다른 곳에서도 그 논리를 따르게 "
"할 수 있습니다. 이 지점은 프로그램에서 조감 시점으로 모든 다른 데이터와 논리"
"를 전달하는 곳이기도 합니다. 전통적인 애플리케이션의 경우, 이것은 \"main\" 함"
"수가 될 것입니다. 이 경우에는, Main 노드가 될 것입니다."

#: ../../docs/getting_started/workflow/best_practices/scene_organization.rst:266
#: ../../docs/getting_started/workflow/best_practices/scene_organization.rst:277
msgid "Node \"Main\" (main.gd)"
msgstr "노드 \"Main\" (main.gd)"

#: ../../docs/getting_started/workflow/best_practices/scene_organization.rst:268
msgid ""
"The ``main.gd`` script would then serve as the primary controller of one's "
"game."
msgstr "``main.gd`` 스크립트는 게임의 주된 컨트롤러 역할을 할 것입니다."

#: ../../docs/getting_started/workflow/best_practices/scene_organization.rst:271
msgid ""
"Then one has their actual in-game \"World\" (a 2D or 3D one). This can be a "
"child of Main. In addition, one will need a primary GUI for their game that "
"manages the various menus and widgets the project needs."
msgstr ""
"그런 다음 실제 게임 내 \"World\" (2D나 3D)를 갖습니다. Main의 자식이 될 수 있"
"습니다. 그리고 프로젝트에 필요한 다양한 메뉴와 위젯을 관리하는 게임용 기본 "
"GUI가 필요합니다."

#: ../../docs/getting_started/workflow/best_practices/scene_organization.rst:276
msgid "Node2D/Spatial \"World\" (game_world.gd)"
msgstr "Node2D/Spatial \"World\" (game_world.gd)"

#: ../../docs/getting_started/workflow/best_practices/scene_organization.rst:277
msgid "Control \"GUI\" (gui.gd)"
msgstr "Control \"GUI\" (gui.gd)"

#: ../../docs/getting_started/workflow/best_practices/scene_organization.rst:279
msgid ""
"When changing levels, one can then swap out the children of the \"World\" "
"node. :ref:`Changing scenes manually <doc_change_scenes_manually>` gives "
"users full control over how their game world transitions."
msgstr ""
"레벨을 변경할 때, \"World\" 노드의 자식을 바꾸면 됩니다. :ref:`씬을 수동으로 "
"바꾸는 것 <doc_change_scenes_manually>`\\ 으로 사용자는 게임 월드 전환 방식"
"을 완전히 제어할 수 있습니다."

#: ../../docs/getting_started/workflow/best_practices/scene_organization.rst:283
msgid ""
"The next step is to consider what gameplay systems one's project requires. "
"If one has a system that..."
msgstr ""
"다음 단계는 이 프로젝트에는 무슨 게임 플레이 시스템이 필요한 지 고려해야 합니"
"다. 시스템은 다음을 갖고 있습니다..."

#: ../../docs/getting_started/workflow/best_practices/scene_organization.rst:286
msgid "tracks all of its data internally"
msgstr "모든 데이터를 내부적으로 추적하고"

#: ../../docs/getting_started/workflow/best_practices/scene_organization.rst:287
msgid "should be globally accessible"
msgstr "전역으로 접근해야 하고"

#: ../../docs/getting_started/workflow/best_practices/scene_organization.rst:288
msgid "should exist in isolation"
msgstr "독립적으로 존재해야 하는 것"

#: ../../docs/getting_started/workflow/best_practices/scene_organization.rst:290
msgid ""
"... then one should create an :ref:`autoload 'singleton' node "
"<doc_singletons_autoload>`."
msgstr ""
"... 그러려면  :ref:`오토로드 '싱글톤' 노드 <doc_singletons_autoload>`\\ 를 만"
"들어야 합니다."

#: ../../docs/getting_started/workflow/best_practices/scene_organization.rst:294
msgid ""
"For smaller games, a simpler alternative with less control would be to have "
"a \"Game\" singleton that simply calls the :ref:`SceneTree.change_scene() "
"<class_SceneTree_method_change_scene>` method to swap out the main scene's "
"content. This structure more or less keeps the \"World\" as the main game "
"node."
msgstr ""
"더 작은 게임일수록, 더 적은 제어로 \"Game\" 싱글톤을 갖는 간단한 대안이 필요"
"한데, :ref:`SceneTree.change_scene() <class_SceneTree_method_change_scene>` "
"\\ 이라고 하는 이 메서드는 메인 씬의 내용물을 바꿔 넣습니다. 이 구조는 "
"\"World\"를 메인 게임 노드로 어느정도는 유지해줍니다."

#: ../../docs/getting_started/workflow/best_practices/scene_organization.rst:300
msgid ""
"Any GUI would need to also be a singleton, be transitory parts of the \"World"
"\", or be manually added as a direct child of the root. Otherwise, the GUI "
"nodes would also delete themselves during scene transitions."
msgstr ""
"모든 GUI는 \"World\"의 일시적인 일부로, 싱글톤이 되어야 합니다, 아니면 수동으"
"로 루트의 자식으로 추가해야 합니다. 그렇지 않으면, GUI 노드는 씬을 전환하는 "
"동안 자신 또한 삭제됩니다."

#: ../../docs/getting_started/workflow/best_practices/scene_organization.rst:305
msgid ""
"If one has systems that modify other systems' data, one should define those "
"as their own scripts or scenes rather than autoloads. For more information "
"on the reasons, please see the :ref:`'Autoloads vs. Internal Nodes' "
"<doc_autoloads_versus_internal_nodes>` documentation."
msgstr ""
"다은 시스템의 데이터를 수정하는 시스템을 갖고 있다면, 오토로드보다는 자체 스"
"크립트나 씬으로 데이터를 정의해야 합니다. 그 이유에 대한 더 자세한 정보는 "
"ref:`'오토로드 vs. 내장 노드' <doc_autoloads_versus_internal_nodes>` 문서를 "
"참고하세요."

#: ../../docs/getting_started/workflow/best_practices/scene_organization.rst:311
msgid ""
"Each subsystem within one's game should have its own section within the "
"SceneTree. One should use parent-child relationships only in cases where "
"nodes are effectively elements of their parents. Does removing the parent "
"reasonably mean that one should also remove the children? If not, then it "
"should have its own place in the hierarchy as a sibling or some other "
"relation."
msgstr ""
"게임 내 각 하위 시스템은 SceneTree 안에 자체 섹션을 가져야 합니다. 노드가 부"
"모의 실질적인 요소가 되는 경우에만 노드 자식 관계를 사용해야 합니다. 자식을 "
"제거해야 부모를 합리적으로 제거하는 것일까요? 그렇지 않으면 노드는 형제나 다"
"른 관계로서 계층 구조 내에 자리를 잡아야 합니다."

#: ../../docs/getting_started/workflow/best_practices/scene_organization.rst:319
msgid ""
"In some cases, one needs these separated nodes to *also* position themselves "
"relative to each other. One can use the :ref:`RemoteTransform "
"<class_RemoteTransform>` / :ref:`RemoteTransform2D "
"<class_RemoteTransform2D>` nodes for this purpose. They will allow a target "
"node to conditionally inherit selected transform elements from the Remote\\* "
"node. To assign the ``target`` :ref:`NodePath <class_NodePath>`, use one of "
"the following:"
msgstr ""
"몇몇 경우에는, 분리된 노드 간의 상대적인 위치가 필요합니다. 이를 위해  :ref:"
"`RemoteTransform <class_RemoteTransform>` / :ref:`RemoteTransform2D "
"<class_RemoteTransform2D>`노드를 사용할 수 있습니다. 이것으로 대상 노드는 조"
"건부로 선택된  Remote\\* 노드의 변형 요소를 상속할 수 있습니다. ``대상``  :"
"ref:`NodePath <class_NodePath>`\\ 에 접근하려면 다음 방식 중 하나를 사용하세"
"요:"

#: ../../docs/getting_started/workflow/best_practices/scene_organization.rst:327
msgid ""
"A reliable third party, likely a parent node, to mediate the assignment."
msgstr "지정하는 것을 조정하기 위한, 부모 노드와 같은, 신뢰할 수 있는 제 3자."

#: ../../docs/getting_started/workflow/best_practices/scene_organization.rst:328
msgid ""
"A group, to easily pull a reference to the desired node (assuming there will "
"only ever be one of the targets)."
msgstr ""
"원하는 노드에 쉽게 참조를 끌어올 수 있는 그룹 (대상 하나만 속한다고 가정)."

#: ../../docs/getting_started/workflow/best_practices/scene_organization.rst:331
msgid ""
"When should one do this? Well, it's up to them to decide. The dilemma arises "
"when one must micro-manage when a node must move around the SceneTree to "
"preserve itself. For example..."
msgstr ""
"언제 해봐야 할까요? 흠, 결정하는 것은 여러분에게 달렸습니다. 마이크로 급 관리"
"를 해야 할 때나, 노드 자체를 보존하기 위해 SceneTree의 여기 저기로 움직여야 "
"할 때 이 딜레마가 발생합니다. 예를 들어..."

#: ../../docs/getting_started/workflow/best_practices/scene_organization.rst:335
msgid "Add a \"player\" node to a \"room\"."
msgstr "\"플레이어\" 노드를 \"방\"에 추가하기."

#: ../../docs/getting_started/workflow/best_practices/scene_organization.rst:336
msgid "Need to change rooms, so one must delete the current room."
msgstr "방을 바꿔야 해서, 현재 방을 삭제해야 합니다."

#: ../../docs/getting_started/workflow/best_practices/scene_organization.rst:337
msgid ""
"Before the room can be deleted, one must preserve and/or move the player."
msgstr "방을 삭제할 수 있기 전, 플레이어를 보존하거나/혹은 움직여야 합니다."

#: ../../docs/getting_started/workflow/best_practices/scene_organization.rst:339
msgid "Is memory a concern?"
msgstr "메모리가 걱정인가?"

#: ../../docs/getting_started/workflow/best_practices/scene_organization.rst:341
msgid ""
"If not, one can just create the two rooms, move the player and delete the "
"old one. No problem."
msgstr ""
"걱정되지 않다면, 그냥 두 개의 방을 만들고, 플레이어를 이동시키고, 이전 것을 "
"삭제합니다. 문제없습니다."

#: ../../docs/getting_started/workflow/best_practices/scene_organization.rst:344
msgid "If so, one will need to..."
msgstr "걱정된다면, 이렇게 해보죠..."

#: ../../docs/getting_started/workflow/best_practices/scene_organization.rst:346
msgid "Move the player somewhere else in the tree."
msgstr "플레이어를 트리 어딘가로 이동시킵니다."

#: ../../docs/getting_started/workflow/best_practices/scene_organization.rst:347
msgid "Delete the room."
msgstr "방을 삭제합니다."

#: ../../docs/getting_started/workflow/best_practices/scene_organization.rst:348
msgid "Instantiate and add the new room."
msgstr "새로운 방을 인스턴스화하고 추가합니다."

#: ../../docs/getting_started/workflow/best_practices/scene_organization.rst:349
msgid "Re-add the player."
msgstr "플레이어를 다시 추가합니다."

#: ../../docs/getting_started/workflow/best_practices/scene_organization.rst:351
msgid ""
"The issue is that the player here is a \"special case\", one where the "
"developers must *know* that they need to handle the player this way for the "
"project. As such, the only way to reliably share this information as a team "
"is to *document* it. Keeping implementation details in documentation however "
"is dangerous. It's a maintenance burden, strains code readability, and "
"bloats the intellectual content of a project unnecessarily."
msgstr ""
"이 문제에서 플레이어는 \"특수한 상황\"에 있습니다, 개발자는 프로젝트를 위해 "
"플레이어를 이런 방식으로 다룰 줄 *알아야 하죠*. 즉, 팀원으로서 이 정보를 확실"
"히 공유하는 유일한 방법은 *문서화*\\ 하는 것입니다. 하지만 문서에 구현 방법"
"의 세부 사항을 유지하는 것은 위험합니다. 유지 관리의 부담과, 코드의 가독성을 "
"해치고, 불필요하게 프로젝트의 지적 내용을 부풀리기 때문입니다."

#: ../../docs/getting_started/workflow/best_practices/scene_organization.rst:358
msgid ""
"In a more complex game with larger assets, it can be a better idea to simply "
"keep the player somewhere else in the SceneTree entirely. This involves..."
msgstr ""
"더 많은 자원을 사용하는 더 복잡한 게임이라면, 차라리 플레이어를 SceneTree 어"
"딘가에 통째로 유지하는 것이 더 좋은 생각일 수 있습니다. 이것이 의미하는 것"
"은..."

#: ../../docs/getting_started/workflow/best_practices/scene_organization.rst:361
msgid "More consistency."
msgstr "더 일관성 있음."

#: ../../docs/getting_started/workflow/best_practices/scene_organization.rst:362
msgid "No \"special cases\" that must be documented and maintained somewhere."
msgstr "문서화하거나 어딘가에 남겨둬야 하는 \"특수한 상황\"이 없음."

#: ../../docs/getting_started/workflow/best_practices/scene_organization.rst:363
msgid ""
"No opportunity for errors to occur because these details are not accounted "
"for."
msgstr "이러한 세부 사항이 고려되지 않았기 때문에 오류가 발생하지 않음."

#: ../../docs/getting_started/workflow/best_practices/scene_organization.rst:366
msgid ""
"In contrast, if one ever needs to have a child node that does *not* inherit "
"the transform of their parent, one has the following options:"
msgstr ""
"반대로 부모의 변형을 상속받지 *않는* 자식 노드가 필요하다면, 다음 옵션이 있습"
"니다:"

#: ../../docs/getting_started/workflow/best_practices/scene_organization.rst:369
msgid ""
"The **declarative** solution: place a :ref:`Node <class_Node>` in between "
"them. As nodes with no transform, Nodes will not pass along such information "
"to their children."
msgstr ""
"**선언형** 해결: :ref:`Node <class_Node>`\\ 를 둘의 계층 구조 사이에 놓습니"
"다. 변형이 없는 노드이므로 노드는 자식들에게 부모의 정보를 전달하지 않을 것입"
"니다."

#: ../../docs/getting_started/workflow/best_practices/scene_organization.rst:372
msgid ""
"The **imperative** solution: Use the ``set_as_toplevel`` setter for the :ref:"
"`CanvasItem <class_CanvasItem_method_set_as_toplevel>` or :ref:`Spatial "
"<class_Spatial_method_set_as_toplevel>` node. This will make the node ignore "
"its inherited transform."
msgstr ""
"**명령형** 해결: :ref:`CanvasItem <class_CanvasItem_method_set_as_toplevel>`"
"또는  :ref:`Spatial <class_Spatial_method_set_as_toplevel>` 노드의 "
"``set_as_toplevel`` Setter를 사용합니다. 이것으로 노드는 상속된 변형의 영향"
"을 무시합니다."

#: ../../docs/getting_started/workflow/best_practices/scene_organization.rst:379
msgid ""
"If building a networked game, keep in mind which nodes and gameplay systems "
"are relevant to all players versus those just pertinent to the authoritative "
"server. For example, users do not all need to have a copy of every players' "
"\"PlayerController\" logic. Instead, they need only their own. As such, "
"keeping these in a separate branch from the \"world\" can help simplify the "
"management of game connections and the like."
msgstr ""
"네트워크 게임을 만든다면, 어떤 노드와 게임 플레이 시스템이 모든 플레이어와 관"
"련 있는지, 단지 권위 있는 서버와 관련 있는지 알아야 합니다. 예를 들어, 사용자"
"는 모든 플레이어의 \"PlayerController\" 논리 사본을 가질 필요가 없습니다. 대"
"신 그들의 것만이 필요합니다. 따라서 \"World\"에서 그들을 분리하여 게임 연결"
"의 관리를 단순화할 수 있습니다."

#: ../../docs/getting_started/workflow/best_practices/scene_organization.rst:386
msgid ""
"The key to scene organization is to consider the SceneTree in relational "
"terms rather than spatial terms. Do the nodes need to be dependent on their "
"parent's existence? If not, then they can thrive all by themselves somewhere "
"else. If so, then it stands to reason they should be children of that parent "
"(and likely part of that parent's scene if they aren't already)."
msgstr ""
"씬 조직의 핵심은 SceneTree를 공간적 용어보다는 관계적 용어로 생각하는 것입니"
"다. 노드가 부모의 존재에 의존해야 할까요? 그렇지 않아도 된다면, 그들은 다른 "
"어딘가에서 스스로 잘 있을 수 있을 겁니다. 의존해야 한다면, 그들은 부모의 자식"
"으로 (그리고 준비가 되지 않았다면 부모의 씬의 일부로) 존재해야 할 것입니다."

#: ../../docs/getting_started/workflow/best_practices/scene_organization.rst:392
msgid ""
"Does this mean nodes themselves are components? Not at all. Godot's node "
"trees form an aggregation relationship, not one of composition. But while "
"one still has the flexibility to move nodes around, it is still best when "
"such moves are unnecessary by default."
msgstr ""
"이것이 노드 자체가 구성 요소를 뜻하는 걸까요? 전혀요. Godot의 노드 트리는 집"
"합 관계를 형성합니다, 구성의 일부가 아닙니다. 하지만 노드가 움직이는 유동성"
"을 지니고 있더라도, 그것이 기본적으로 불필요한 것이 가장 좋습니다."

#: ../../docs/getting_started/workflow/best_practices/scenes_versus_scripts.rst:4
msgid "When to use scenes versus scripts"
msgstr "씬과 스크립트 중 하나를 사용해야 하는 경우"

#: ../../docs/getting_started/workflow/best_practices/scenes_versus_scripts.rst:6
msgid ""
"We've already covered how scenes and scripts are different. Scripts define "
"an engine class extension with imperative code, scenes with declarative code."
msgstr ""
"우리는 이미 씬과 스크립트가 다르다는 것을 압니다. 스크립트는 명령형 코드, 선"
"언형 코드로 만든 씬을 사용해 엔진 클래스 확장을 정의합니다."

#: ../../docs/getting_started/workflow/best_practices/scenes_versus_scripts.rst:10
msgid ""
"Each system's capabilities are different as a result. Scenes can define how "
"an extended class initializes, but not what its behavior actually is. Scenes "
"are often used in conjunction with a script so that the scene acts as an "
"extension of the scripts declarative code."
msgstr ""
"각 시스템의 능력은 결과적으로는 다릅니다. 씬은 어떻게 확장된 클래스를 초기화"
"하는 지 정의할 수 있지만, 씬은 종종 스크립트와 함께 사용되어 선언형 코드 스크"
"립트의 확장으로 작업하기도 합니다."

#: ../../docs/getting_started/workflow/best_practices/scenes_versus_scripts.rst:16
msgid "Anonymous types"
msgstr "익명 타입"

#: ../../docs/getting_started/workflow/best_practices/scenes_versus_scripts.rst:18
msgid ""
"It *is* possible to completely define a scenes' contents using a script "
"alone. This is, in essence, what the Godot Editor does, only in the C++ "
"constructor of its objects."
msgstr ""
"스크립트 하나 만으로 씬의 내용을 완전히 정의하는 것은 *가능합니다*. 본질적으"
"로, Godot 편집기가 하는 일은 오직 개체의 C++ 생성자에서 이루어집니다."

#: ../../docs/getting_started/workflow/best_practices/scenes_versus_scripts.rst:22
msgid ""
"But, choosing which one to use can be a dilemma. Creating script instances "
"is identical to creating in-engine classes whereas handling scenes requires "
"a change in API:"
msgstr ""
"하지만 어떤 것을 사용해야 하는지 결정하는 것은 딜레마가 됩니다. 스크립트 인스"
"턴스를 만드는 것은 인 게임 클래스를 만드는 것과 동일하지만 씬을 다루려면 API"
"를 변경해야 합니다:"

#: ../../docs/getting_started/workflow/best_practices/scenes_versus_scripts.rst:59
msgid ""
"Also, scripts will operate a little slower than scenes due to the speed "
"differences between engine and script code. The larger and more complex the "
"node, the more reason there is to build it as a scene."
msgstr ""
"또한 엔진과 스크립트 코드 간의 속도 차 때문에 스크립트가 씬에 비해 조금 더 느"
"리게 작동합니다. 노드가 크고 복잡할수록, 씬으로 작업하는 것이 더 좋습니다."

#: ../../docs/getting_started/workflow/best_practices/scenes_versus_scripts.rst:64
msgid "Named types"
msgstr "명명된 타입"

#: ../../docs/getting_started/workflow/best_practices/scenes_versus_scripts.rst:66
msgid ""
"In some cases, a user can register a script as a new type within the editor "
"itself. This displays it as a new type in the node or resource creation "
"dialog with an optional icon. In these cases, the user's ability to use the "
"script is much more streamlined. Rather than having to..."
msgstr ""
"몇 가지 경우에서, 사용자는 편집기 자체 내에서 스크립트를 새로운 타입으로 등록"
"할 수 있습니다. 노드 생성 또는 리소스 생성 대화상자에서 선택한 아이콘이 있는 "
"새 타입으로 나타납니다. 이런 경우, 스크립트를 사용하는 사용자의 능력은 훨씬 "
"더 간소화 되었습니다. 더 이상 다음과 같이 하지 않아도 됩니다..."

#: ../../docs/getting_started/workflow/best_practices/scenes_versus_scripts.rst:71
msgid "Know the base type of the script they would like to use."
msgstr "사용하고 싶은 스크립트의 기본 타입을 알기."

#: ../../docs/getting_started/workflow/best_practices/scenes_versus_scripts.rst:73
msgid "Create an instance of that base type."
msgstr "기본 타입의 인스턴스를 생성하기."

#: ../../docs/getting_started/workflow/best_practices/scenes_versus_scripts.rst:75
msgid "Add the script to the node."
msgstr "노드에 스크립트를 추가하기."

#: ../../docs/getting_started/workflow/best_practices/scenes_versus_scripts.rst:77
msgid "(Drag-n-drop method)"
msgstr "(드래그 앤 드롭 방식)"

#: ../../docs/getting_started/workflow/best_practices/scenes_versus_scripts.rst:79
msgid "Find the script in the FileSystem dock."
msgstr "파일 시스템 독에서 스크립트를 찾기."

#: ../../docs/getting_started/workflow/best_practices/scenes_versus_scripts.rst:81
msgid "Drag and drop the script onto the node in the Scene dock."
msgstr "스크립트를 씬 독의 노드로 드래그 앤 드롭하기."

#: ../../docs/getting_started/workflow/best_practices/scenes_versus_scripts.rst:83
msgid "(Property method)"
msgstr "(속성 방식)"

#: ../../docs/getting_started/workflow/best_practices/scenes_versus_scripts.rst:85
msgid ""
"Scroll down to the bottom of the Inspector to find the ``script`` property "
"and select it."
msgstr ""
"인스펙터(Inspecter)의 맨 아래로 내려서 ``script`` 속성을 찾고 선택하기."

#: ../../docs/getting_started/workflow/best_practices/scenes_versus_scripts.rst:87
msgid "Select \"Load\" from the dropdown."
msgstr "드롭다운 메뉴에서 \"불러오기\" 선택하기."

#: ../../docs/getting_started/workflow/best_practices/scenes_versus_scripts.rst:89
msgid "Select the script from the file dialog."
msgstr "파일 대화 상자에서 스크립트를 선택하기."

#: ../../docs/getting_started/workflow/best_practices/scenes_versus_scripts.rst:91
msgid ""
"With a registered script, the scripted type instead becomes a creation "
"option like the other nodes and resources in the system. One need not do any "
"of the above work. The creation dialog even has a search bar to look up the "
"type by name."
msgstr ""
"등록된 스크립트를 사용하면, 스크립트된 타입에서 다른 시스템 내 노드와 리소스"
"와 같은 생성 옵션이 됩니다. 위의 작업을 하지 않아도 됩니다. 생성 대화 상자는 "
"타입을 이름으로 찾아볼 수 있는 검색 상자도 있습니다."

#: ../../docs/getting_started/workflow/best_practices/scenes_versus_scripts.rst:96
msgid "There are two systems for registering types..."
msgstr "타입을 등록하는 데는 두 가지 시스템이 있습니다..."

#: ../../docs/getting_started/workflow/best_practices/scenes_versus_scripts.rst:98
msgid ":ref:`Custom Types <doc_making_plugins>`"
msgstr ":ref:`맞춤 타입 <doc_making_plugins>`"

#: ../../docs/getting_started/workflow/best_practices/scenes_versus_scripts.rst:100
msgid "Editor-only. Typenames are not accessible at runtime."
msgstr "편집기만 가능. 런타임 도중 타입이름에 접근할 수 없습니다."

#: ../../docs/getting_started/workflow/best_practices/scenes_versus_scripts.rst:102
msgid "Does not support inherited custom types."
msgstr "상속된 맞춤 타입을 지원하지 않습니다."

#: ../../docs/getting_started/workflow/best_practices/scenes_versus_scripts.rst:104
msgid "An initializer tool. Creates the node with the script. Nothing more."
msgstr "초기화 도구. 스크립트로 노드를 만듭니다. 더 이상은 없습니다."

#: ../../docs/getting_started/workflow/best_practices/scenes_versus_scripts.rst:106
msgid ""
"Editor has no type-awareness of the script or its relationship to other "
"engine types or scripts."
msgstr ""
"편집기는 스크립트에 대한 타입 인식이나 다른 엔진 타입이나 스크립트 간의 관계"
"가 없습니다."

#: ../../docs/getting_started/workflow/best_practices/scenes_versus_scripts.rst:109
#: ../../docs/getting_started/workflow/best_practices/scenes_versus_scripts.rst:127
msgid "Allows users to define an icon."
msgstr "사용자가 아이콘을 정의할 수 있도록 합니다."

#: ../../docs/getting_started/workflow/best_practices/scenes_versus_scripts.rst:111
msgid ""
"Works for all scripting languages because it deals with Script resources in "
"abstract."
msgstr "스크립트 리소스를 추상화하기 때문에 모든 스크립트 언어에서 작동합니다."

#: ../../docs/getting_started/workflow/best_practices/scenes_versus_scripts.rst:113
msgid ""
"Set up using :ref:`EditorPlugin.add_custom_type "
"<class_EditorPlugin_method_add_custom_type>`."
msgstr ""
":ref:`EditorPlugin.add_custom_type "
"<class_EditorPlugin_method_add_custom_type>`\\ 을 사용해 설정합니다."

#: ../../docs/getting_started/workflow/best_practices/scenes_versus_scripts.rst:115
msgid ":ref:`Script Classes <doc_scripting_continued_class_name>`"
msgstr ":ref:`스크립트 클래스 <doc_scripting_continued_class_name>`"

#: ../../docs/getting_started/workflow/best_practices/scenes_versus_scripts.rst:117
msgid "Editor and runtime accessible."
msgstr "편집기와 런타임에 접근할 수 있습니다."

#: ../../docs/getting_started/workflow/best_practices/scenes_versus_scripts.rst:119
msgid "Displays inheritance relationships in full."
msgstr "상속 관계를 전체적으로 표시합니다."

#: ../../docs/getting_started/workflow/best_practices/scenes_versus_scripts.rst:121
msgid ""
"Creates the node with the script, but can also change types or extend the "
"type from the editor."
msgstr ""
"스크립트로 노드를 만듭니다, 하지만 편집기에서 타입을 바꾸거나 확장할 수도 있"
"습니다."

#: ../../docs/getting_started/workflow/best_practices/scenes_versus_scripts.rst:124
msgid ""
"Editor is aware of inheritance relationships between scripts, script "
"classes, and engine C++ classes."
msgstr ""
"편집기는 스크립트, 스크립트 클래스 및 엔진 C++ 클래스 간의 상속 관계를 인식합"
"니다."

#: ../../docs/getting_started/workflow/best_practices/scenes_versus_scripts.rst:129
msgid ""
"Engine developers must add support for languages manually (both name "
"exposure and runtime accessibility)."
msgstr ""
"엔진 개발자는 수동으로 언어 지원을 추가해야 합니다 (이름 표시와 런타임 접근 "
"가능성 모두)."

#: ../../docs/getting_started/workflow/best_practices/scenes_versus_scripts.rst:132
msgid "Godot 3.1+ only."
msgstr "Godot 3.1+에서만 가능합니다."

#: ../../docs/getting_started/workflow/best_practices/scenes_versus_scripts.rst:134
msgid ""
"The Editor scans project folders and registers any exposed names for all "
"scripting languages. Each scripting language must implement its own support "
"for exposing this information."
msgstr ""
"편집기는 프로젝트 폴더를 스캔하고 모든 스크립팅 언어의 노출된 이름을 등록합니"
"다.  각 스크립팅 언어가 이 정보가 노출되는 것을 자체적인 지원으로 구현해야 합"
"니다."

#: ../../docs/getting_started/workflow/best_practices/scenes_versus_scripts.rst:138
msgid ""
"Both methodologies add names to the creation dialog, but script classes, in "
"particular, also allow for users to access the typename without loading the "
"script resource. Creating instances and accessing constants or static "
"methods is viable from anywhere."
msgstr ""
"두 방법론 모두 생성 대화 상자에 이름을 추가할 수 있습니다, 하지만 특히 스크립"
"트 클래스는 사용자가 스크립트 리소스를 불러오지 않고도 타입이름에 접근할 수 "
"있습니다. 인스턴스를 만들고 상수나 정적 메서드에 접근하는 것은 어디서나 가능"
"합니다."

#: ../../docs/getting_started/workflow/best_practices/scenes_versus_scripts.rst:143
msgid ""
"With features like these, one may wish their type to be a script without a "
"scene due to the ease of use it grants users. Those developing plugins or "
"creating in-house tools for designers to use will find an easier time of "
"things this way."
msgstr ""
"이러한 기능으로, 사람들은 사용자가 사용하기 쉽도록 그들의 타입이 씬이 없는 스"
"크립트가 되길 원합니다. 플러그인을 개발하거나 디자이너를 위한 사내 도구를 만"
"드는 사람들에게 이러한 방식은 더 쉬운 작업 시간을 찾을 수 있을 겁니다."

#: ../../docs/getting_started/workflow/best_practices/scenes_versus_scripts.rst:148
msgid ""
"On the downside, it also means having to use largely imperative programming."
msgstr "단점은 명령형 프로그래밍을 주로 사용해야 하는 것입니다."

#: ../../docs/getting_started/workflow/best_practices/scenes_versus_scripts.rst:153
msgid "In the end, the best approach is to consider the following:"
msgstr "마지막으로, 최선의 접근법은 다음을 고려해보는 것입니다:"

#: ../../docs/getting_started/workflow/best_practices/scenes_versus_scripts.rst:155
msgid ""
"If one wishes to create a basic tool that is going to be re-used in several "
"different projects and which people of all skill levels will likely use "
"(including those who don't label themselves as \"programmers\"), then "
"chances are that it should probably be a script, likely one with a custom "
"name/icon."
msgstr ""
"여러 다른 프로젝트에서 재 사용하며, (\"프로그래머\"라는 이름표가 없는 사람들"
"을 포함한) 모든 실력 수준의 사람들이 사용할 수 있는 기본 도구를 만들고 싶다"
"면, 아마 스크립트로 만들어야 할 것입니다, 맞춤 이름/아이콘을 줄 수 있으니까"
"요."

#: ../../docs/getting_started/workflow/best_practices/scenes_versus_scripts.rst:160
msgid ""
"If one wishes to create a concept that is particular to their game, then it "
"should always be a scene. Scenes are easier to track/edit and provide more "
"security than scripts."
msgstr ""
"게임에 특화된 개념을 만들고 시다면, 그것은 항상 씬이 되어야 합니다. 씬이 스크"
"립트보다 더 쉽게 연결/편집하고 더 보안이 좋습니다."

#: ../../docs/getting_started/workflow/best_practices/scenes_versus_scripts.rst:164
msgid ""
"If one would like to give a name to a scene, then they can still sort of do "
"this in 3.1 by declaring a script class and giving it a scene as a constant. "
"The script becomes, in effect, a namespace:"
msgstr ""
"씬에 이름을 주고 싶다면, 스크립트 클래스를 선언하고 상수로 씬을 지정하여 3.1"
"에서 이 작업을 수행할 수 있습니다. 스크립트는 사실상 네임스페이스가 됩니다:"

#: ../../docs/getting_started/workflow/best_practices/autoloads_versus_internal_nodes.rst:4
#, fuzzy
msgid "Autoloads versus regular nodes"
msgstr "오토로드 대 내장 노드"

#: ../../docs/getting_started/workflow/best_practices/autoloads_versus_internal_nodes.rst:6
msgid ""
"Godot offers a feature to automatically load nodes at the root of your "
"project, allowing you to access them globally, that can fulfill the role of "
"a Singleton: :ref:`doc_singletons_autoload`. These auto-loaded nodes are not "
"freed when you change the scene from code with :ref:`SceneTree.change_scene "
"<class_SceneTree_method_change_scene>`."
msgstr ""

#: ../../docs/getting_started/workflow/best_practices/autoloads_versus_internal_nodes.rst:11
msgid ""
"In this guide, you will learn when to use the Autoload feature, and "
"techniques you can use to avoid it."
msgstr ""

#: ../../docs/getting_started/workflow/best_practices/autoloads_versus_internal_nodes.rst:15
#, fuzzy
msgid "The cutting audio issue"
msgstr "시작 값"

#: ../../docs/getting_started/workflow/best_practices/autoloads_versus_internal_nodes.rst:17
#, fuzzy
msgid ""
"Other engines can encourage the use of creating manager classes, singletons "
"that organize a lot of functionality into a globally accessible object. "
"Godot offers many ways to avoid global state thanks to the node tree and "
"signals."
msgstr ""
"다른 엔진에서는 전역으로 접근 가능할 개체에 다양한 기능을 구성하는 \"관리자"
"\" 클래스를 만들어 쓰는 것을 권장할 지도 모릅니다. Godot는 이러한 객체의 크기"
"를 줄이는 방식을 지원하는 것으로 커집니다. 대신 내용물을 가능한 한 개별 노드"
"로 이동시킵니다."

#: ../../docs/getting_started/workflow/best_practices/autoloads_versus_internal_nodes.rst:21
#, fuzzy
msgid ""
"For example, let's say we are building a platformer and want to collect "
"coins that play a sound effect. There's a node for that: the :ref:"
"`AudioStreamPlayer <class_AudioStreamPlayer>`. But if we call the "
"``AudioStreamPlayer`` while it is already playing a sound, the new sound "
"interrupts the first."
msgstr ""
"예를 들어, 한 개발자가 플랫포머 게임을 제작하면서 동전을 먹을 때 음향 효과가 "
"나게 하려면 어떻게 해야 할까요? 글쎄요, 이를 위한 노드가 있습니다: :ref:"
"`AudioStreamPlayer <class_AudioStreamPlayer>`. 하지만 소리가 재생되고 있는 도"
"중 AudioStreamPlayer를 \"재생(play)\"하면, 새로운 소리는 첫 번째 소리가 끝나"
"기 전에 재생하면서 방해가 된다는 것을, 테스트를 하면서 알게 됩니다."

#: ../../docs/getting_started/workflow/best_practices/autoloads_versus_internal_nodes.rst:26
#, fuzzy
msgid ""
"A solution is to code a global, auto-loaded sound manager class. It "
"generates a pool of ``AudioStreamPlayer`` nodes that cycle through as each "
"new request for sound effects comes in. Say we call that class ``Sound``, "
"you can use it from anywhere in your project by calling ``Sound."
"play(\"coin_pickup.ogg\")``. This solves the problem in the short term but "
"causes more problems:"
msgstr ""
"사용자는 SoundManager 오토로드 노드를 만들어 더 똑똑한 전체 시스템을 만드는 "
"것이 최선의 해결책이라고 생각하는 경향이 있습니다. 이것은 새로운 음향 효과 요"
"청이 들어올 때마다 순환하는 AudioStreamPlayer들의 풀(Pool)을 만들어냅니다. 그"
"런 다음 SoundManager를 오토로드로 만들어 어디서든 `SFX.play(\"coin_pickup.ogg"
"\")`\\ 를 가지고 접근하도록 합니다. 사용자는 거의 알지 못했습니다, 자신이 많"
"은 복잡한 문제를 코드로 가지고 왔습니다."

#: ../../docs/getting_started/workflow/best_practices/autoloads_versus_internal_nodes.rst:32
#, fuzzy
msgid ""
"**Global state**: one object is now responsible for all objects' data. If "
"the ``Sound`` class has errors or doesn't have an AudioStreamPlayer "
"available, all the nodes calling it can break."
msgstr ""
"**전역 상태**: 한 객체가 이제 모든 객체의 데이터를 담당합니다. SFX가 오류가 "
"발생하거나 AudioStreamPlayer를 사용할 수 없다면, 전부 망가집니다."

#: ../../docs/getting_started/workflow/best_practices/autoloads_versus_internal_nodes.rst:36
#, fuzzy
msgid ""
"**Global access**: now that any object can call ``Sound.play(sound_path)`` "
"from anywhere, there's no longer an easy way to find the source of a bug."
msgstr ""
"**전역 접근**: 이제 모든 객체가 어디서든 `SFX.play(sound_path)`\\ 를 호출할 "
"수 있습니다, SFX 버그가 어디서 시작했는 지를 아는 쉬운 방법은 더 이상 없습니"
"다."

#: ../../docs/getting_started/workflow/best_practices/autoloads_versus_internal_nodes.rst:39
msgid ""
"**Global resource allocation**: with a pool of ``AudioStreamPlayer`` nodes "
"stored from the start, you can either have too few and face bugs, or too "
"many and use more memory than you need."
msgstr ""

#: ../../docs/getting_started/workflow/best_practices/autoloads_versus_internal_nodes.rst:45
msgid ""
"About global access, the problem is that Any code anywhere could pass wrong "
"data to the ``Sound`` autoload in our example. As a result, the domain to "
"explore to fix the bug spans the entire project."
msgstr ""

#: ../../docs/getting_started/workflow/best_practices/autoloads_versus_internal_nodes.rst:49
msgid ""
"When you keep code inside a scene, only one or two scripts may be involved "
"in audio."
msgstr ""

#: ../../docs/getting_started/workflow/best_practices/autoloads_versus_internal_nodes.rst:52
#, fuzzy
msgid ""
"Contrast this with each scene keeping as many ``AudioStreamPlayer`` nodes as "
"it needs within itself and all these problems go away:"
msgstr ""
"이것과 반대로 각 씬이 필요한 만큼의 AudioStreamPlayer 노드를 유지하면 이 문제"
"는 사라집니다."

#: ../../docs/getting_started/workflow/best_practices/autoloads_versus_internal_nodes.rst:55
msgid ""
"Each scene manages its own state information. If there is a problem with the "
"data, it will only cause issues in that one scene."
msgstr ""
"각 씬은 자체적인 상태 정보를 관리합니다. 데이터에 문제가 생기면, 해당 데이터"
"가 있는 씬 내에서만 사고를 일으킵니다."

#: ../../docs/getting_started/workflow/best_practices/autoloads_versus_internal_nodes.rst:58
msgid ""
"Each scene accesses only its own nodes. Now, if there is a bug, it's easy to "
"find which node is at fault."
msgstr ""

#: ../../docs/getting_started/workflow/best_practices/autoloads_versus_internal_nodes.rst:61
msgid "Each scene allocates exactly the amount of resources it needs."
msgstr ""

#: ../../docs/getting_started/workflow/best_practices/autoloads_versus_internal_nodes.rst:64
msgid "Managing shared functionality or data"
msgstr ""

#: ../../docs/getting_started/workflow/best_practices/autoloads_versus_internal_nodes.rst:66
msgid ""
"Another reason to use an Autoload can be that you want to reuse the same "
"method or data across many scenes."
msgstr ""

#: ../../docs/getting_started/workflow/best_practices/autoloads_versus_internal_nodes.rst:69
msgid ""
"In the case of functions, you can create a new type of ``Node`` that "
"provides that feature for an individual scene using the :ref:`class_name "
"<doc_scripting_continued_class_name>` keyword in GDScript."
msgstr ""

#: ../../docs/getting_started/workflow/best_practices/autoloads_versus_internal_nodes.rst:73
msgid "When it comes to data, you can either:"
msgstr ""

#: ../../docs/getting_started/workflow/best_practices/autoloads_versus_internal_nodes.rst:75
msgid ""
"Create a new type of :ref:`Resource <class_Resource>` to share the data."
msgstr ""

#: ../../docs/getting_started/workflow/best_practices/autoloads_versus_internal_nodes.rst:77
msgid ""
"Store the data in an object to which each node has access, for example using "
"the ``owner`` property to access the scene's root node."
msgstr ""

#: ../../docs/getting_started/workflow/best_practices/autoloads_versus_internal_nodes.rst:81
#, fuzzy
msgid "When you should use an Autoload"
msgstr "그러면 언제 오토로드를 *사용해야 할까요*?"

#: ../../docs/getting_started/workflow/best_practices/autoloads_versus_internal_nodes.rst:83
msgid "Auto-loaded nodes can simplify your code in some cases:"
msgstr ""

#: ../../docs/getting_started/workflow/best_practices/autoloads_versus_internal_nodes.rst:85
msgid ""
"**Static Data**: if you need data that is exclusive to one class, like a "
"database, then an autoload can be a good tool. There is no scripting API in "
"Godot to create and manage static data otherwise."
msgstr ""

#: ../../docs/getting_started/workflow/best_practices/autoloads_versus_internal_nodes.rst:89
msgid ""
"**Static functions**: creating a library of functions that only return "
"values."
msgstr ""

#: ../../docs/getting_started/workflow/best_practices/autoloads_versus_internal_nodes.rst:91
#, fuzzy
msgid ""
"**Systems with a wide scope**: If the singleton is managing its own "
"information and not invading the data of other objects, then it's a great "
"way to create systems that handle broad-scoped tasks. For example, a quest "
"or a dialogue system."
msgstr ""
"싱글톤이 자체 정보를 관리하고 있고, 다른 객체의 데이터에 침범하지 않는다면, "
"넓은 범위의 작업을 다루기 위해 \"시스템\" 클래스를 만드는 것이 좋은 방법입니"
"다. 예를 들어 타겟팅 시스템, 퀘스트 시스템, 아니면 대화 상자 시스템이 대표적"
"인 싱글톤 구현 사례입니다."

#: ../../docs/getting_started/workflow/best_practices/autoloads_versus_internal_nodes.rst:96
msgid ""
"Until Godot 3.1, another use was just for convenience: autoloads have a "
"global variable for their name generated in GDScript, allowing you to call "
"them from any script file in your project. But now, you can use the "
"``class_name`` keyword instead to get auto-completion for a type in your "
"entire project."
msgstr ""

#: ../../docs/getting_started/workflow/best_practices/autoloads_versus_internal_nodes.rst:103
msgid ""
"Autoload is not exactly a Singleton. Nothing prevents you from instantiating "
"copies of an auto-loaded node. It is only a tool that makes a node load "
"automatically as a child of the root of your scene tree, regardless of your "
"game's node structure or which scene you run, e.g. by pressing :kbd:`F6` key."
msgstr ""

#: ../../docs/getting_started/workflow/best_practices/autoloads_versus_internal_nodes.rst:108
msgid ""
"As a result, you can get the auto-loaded node, for example an autoload "
"called ``Sound``, by calling ``get_node(\"/root/Sound\")``."
msgstr ""

#: ../../docs/getting_started/workflow/best_practices/node_alternatives.rst:4
msgid "When and how to avoid using nodes for everything"
msgstr "노드를 모든 용도로 사용하는 것을 피하는 시기와 방법"

#: ../../docs/getting_started/workflow/best_practices/node_alternatives.rst:7
msgid ""
"Nodes are cheap to produce, but even they have their limits. A project may "
"have tens of thousands of nodes all doing things. The more complex their "
"behavior though, the larger the strain each one adds to a project's "
"performance."
msgstr ""
"노드는 생산하기 저렴하지만 한계가 있습니다. 한 프로젝트는 모든 작업을 하는 "
"수 만 개의 노드로 이루어질 수 있습니다. 행동이 더 복잡할 수록, 프로젝트 성능"
"에 추가하는 각 변형은 더 커집니다."

#: ../../docs/getting_started/workflow/best_practices/node_alternatives.rst:12
msgid ""
"Godot provides more lightweight objects for creating APIs which nodes use. "
"Be sure to keep these in mind as options when designing how you wish to "
"build your project's features."
msgstr ""
"Godot는 노드가 사용하는 API를 만들기 위한 더 가벼운 객체를 제공합니다. 어떻"
"게 프로젝트의 기능을 만들고 싶은 지를 설계할 때 옵션으로 다음을 명심하세요."

#: ../../docs/getting_started/workflow/best_practices/node_alternatives.rst:16
msgid ""
":ref:`Object <class_Object>`: The ultimate lightweight object, the original "
"Object must use manual memory management. With that said, it isn't too "
"difficult to create one's own custom data structures, even node structures, "
"that are also lighter than the :ref:`Node <class_Node>` class."
msgstr ""
":ref:`객체 <class_Object>`: 궁극의 경량 객체로, 오리지널 객체는 수동으로 메모"
"리 관리를 하는데 사용해야 합니다. 말인 즉슨, 자체 맞춤 데이터 구조를 만드는 "
"것이 그리 어렵지 않습니다, 심지어 맞춤 노드 구조도 만들 수 있는데 :ref:`노드 "
"<class_Node>`\\ 클래스보다 가볍죠."

#: ../../docs/getting_started/workflow/best_practices/node_alternatives.rst:21
msgid ""
"**Example:** See the :ref:`Tree <class_Tree>` node. It supports a high level "
"of customization for a table of content with an arbitrary number of rows and "
"columns. The data that it uses to generate its visualization though is "
"actually a tree of :ref:`TreeItem <class_TreeItem>` Objects."
msgstr ""
"**예시:** :ref:`Tree <class_Tree>` 노드를 참고하세요. 이 노드는 임의의 수의 "
"행과 열이 있는 콘텐츠 테이블의 하이 레벨 맞춤 설정을 제공합니다. 시각화에 사"
"용하는 데이터는 사실 :ref:`TreeItem <class_TreeItem>` 객체들의 트리입니다."

#: ../../docs/getting_started/workflow/best_practices/node_alternatives.rst:26
msgid ""
"**Advantages:** Simplifying one's API to smaller scoped objects helps "
"improve its accessibility improve iteration time. Rather than working with "
"the entire Node library, one creates an abbreviated set of Objects from "
"which a node can generate and manage the appropriate sub-nodes."
msgstr ""
"**이점:** API를 더 작은 유효 범위의 객체로 단순화하여 접근성과 반복 시간을 향"
"상시켜 줍니다. 전체 노드 라이브러리에서 작업하는 대신, 한 노드가 적절한 하위 "
"노드를 생성하고 관리할 수 있는 단축된 객체들의 집합을 만듭니다."

#: ../../docs/getting_started/workflow/best_practices/node_alternatives.rst:31
msgid ""
"One should be careful when handling them. One can store an Object into a "
"variable, but these references can become invalid without warning. For "
"example, if the object's creator decides to delete it out of nowhere, this "
"would trigger an error state when one next accesses it."
msgstr ""
"객체들을 다룰 때는 조심해야 합니다. 객체를 변수 안에 저장할 수 있지만, 객체"
"의 참조는 경고 없이 올바르지 않게 될 수 있습니다. 예를 들어 객체의 생성자가 "
"객체를 아무 곳에도 삭제하지 않기로 결정하면, 다음에 객체에 접근하려 하면 오"
"류 상태가 발동합니다."

#: ../../docs/getting_started/workflow/best_practices/node_alternatives.rst:36
msgid ""
":ref:`Reference <class_Reference>`: Only a little more complex than Object. "
"They track references to themselves, only deleting loaded memory when no "
"further references to themselves exist. These are useful in the majority of "
"cases where one needs data in a custom class."
msgstr ""
":ref:`참조 <class_Reference>`: 객체보다 오직 조금 더 복잡함. 참조는 자신을 참"
"조하는 지를 추적해서 더 이상 참조하지 않으면 불러온 메모리를 삭제합니다.  이"
"는 데이터가 필요한 맞춤 클래스에 있어 대부분의 경우에 유용합니다."

#: ../../docs/getting_started/workflow/best_practices/node_alternatives.rst:41
msgid ""
"**Example:** See the :ref:`File <class_File>` object. It functions just like "
"a regular Object except that one need not delete it themselves."
msgstr ""
"**예시:** :ref:`File <class_File>` 객체를 참고하세요. 이것은 자기 자신을 삭제"
"할 필요가 없다는 것 빼면 보통 객체처럼 작동합니다."

#: ../../docs/getting_started/workflow/best_practices/node_alternatives.rst:44
msgid "**Advantages:** same as the Object."
msgstr "**이점:** 객체와 같음."

#: ../../docs/getting_started/workflow/best_practices/node_alternatives.rst:46
msgid ""
":ref:`Resource <class_Resource>`: Only slightly more complex than Reference. "
"They have the innate ability to serialize/deserialize (i.e. save and load) "
"their object properties to/from Godot resource files."
msgstr ""
":ref:`리소스 <class_Resource>`: 참조보다 오직 조금 더 복잡함. 리소스는 그들"
"의 객체 속성을 Godot 리소스 파일로 직렬화, 혹은 그 반대로 비직렬화하는데 타고"
"났습니다 (예를 들어, 저장 및 불러오기)."

#: ../../docs/getting_started/workflow/best_practices/node_alternatives.rst:50
msgid ""
"**Example:** Scripts, PackedScene (for scene files), and other types like "
"each of the :ref:`AudioEffect <class_AudioEffect>` classes. Each of these "
"can be save and loaded, therefore they extend from Resource."
msgstr ""
"**예시:** 스크립트, PackedScene (씬 파일 용), 그리고 각 :ref:`AudioEffect "
"<class_AudioEffect>` 클래스와 같은 다른 타입들. 각각은 저장되고 불러와 질 수 "
"있습니다. 따라서 이들은 리소스에서 분화된 것들입니다."

#: ../../docs/getting_started/workflow/best_practices/node_alternatives.rst:54
msgid ""
"**Advantages:** Much has :ref:`already been said <doc_resources>` on :ref:"
"`Resource <class_Resource>`'s advantages over traditional data storage "
"methods. In the context of using Resources over Nodes though, their main "
"advantage is in Inspector-compatibility. While nearly as lightweight as "
"Object/Reference, they can still display and export properties in the "
"Inspector. This allows them to fulfill a purpose much like sub-Nodes on the "
"usability front, but also improve performance if one plans to have many such "
"Resources/Nodes in their scenes."
msgstr ""
"**이점:** 기본의 데이터 저장 방법보다 :ref:`리소스 <class_Resource>`\\ 가 갖"
"는 이점 대부분은 :ref:`이미 말했습니다. <doc_resources>` 노드를 통한 리소스 "
"사용의 관점에서, 주요 이점은 인스펙터(Inspecter) 호환성에 있습니다. 객체/참조"
"처럼 가벼우면서도, 리소스는 인스펙터(Inspecter)에서 볼 수 있고, 속성을 내보"
"낼 수 있습니다. 이를 통해 사용성 측면에서 하위 노드와 같은 목적을 달성할 수 "
"있으면서도, 씬에 그러한 리소스/노드를 갖게 한다면 성능을 향상시킬 수 있습니"
"다."

#: ../../docs/getting_started/workflow/best_practices/godot_interfaces.rst:4
msgid "Godot interfaces"
msgstr "Godot 인터페이스"

#: ../../docs/getting_started/workflow/best_practices/godot_interfaces.rst:6
msgid ""
"Often one needs scripts that rely on other objects for features. There are 2 "
"parts to this process:"
msgstr ""
"기능을 위해 다른 객체에 의존하는 스크립트가 필요한 경우가 종종 있습니다. 이 "
"과정에는 2부분이 있습니다:"

#: ../../docs/getting_started/workflow/best_practices/godot_interfaces.rst:9
msgid "Acquiring a reference to the object that presumably has the features."
msgstr "아마도 기능을 갖는 객체에 대한 참조를 얻기."

#: ../../docs/getting_started/workflow/best_practices/godot_interfaces.rst:11
msgid "Accessing the data or logic from the object."
msgstr "객체에서 데이터 또는 논리에 접근하기."

#: ../../docs/getting_started/workflow/best_practices/godot_interfaces.rst:13
msgid "The rest of this tutorial outlines the various ways of doing all this."
msgstr ""
"이 튜토리얼의 나머지 부분에서는 이 모든 작업을 하는 다양한 방법을 간략하게 설"
"명합니다."

#: ../../docs/getting_started/workflow/best_practices/godot_interfaces.rst:16
msgid "Acquiring object references"
msgstr "객체 참조 얻기"

#: ../../docs/getting_started/workflow/best_practices/godot_interfaces.rst:18
msgid ""
"For all :ref:`Object <class_Object>`\\s, the most basic way of referencing "
"them is to get a reference to an existing object from another acquired "
"instance."
msgstr ""
"모든 :ref:`객체 <class_Object>\\ 에 있어, 객체를 참조하는 가장 기본이 되는 방"
"식은 획득한 다른 인스턴스로부터 존재하는 객체로 참조를 가져오는 것이다."

#: ../../docs/getting_started/workflow/best_practices/godot_interfaces.rst:32
msgid ""
"The same principle applies for :ref:`Reference <class_Reference>` objects. "
"While users often access :ref:`Node <class_Node>` and :ref:`Resource "
"<class_Resource>` this way, alternative measures are available."
msgstr ""
":ref:`참조 <class_Reference>` 객체에게도 같은 원리가 적용됩니다. 사용자들은 "
"종종 :ref:`노드 <class_Node>`\\ 와 :ref:`리소스 <class_Resource>`\\ 를 이런 "
"방식으로 연결하지만, 대체 조치가 가능합니다."

#: ../../docs/getting_started/workflow/best_practices/godot_interfaces.rst:36
msgid ""
"Instead of property or method access, one can get Resources by load access."
msgstr ""

#: ../../docs/getting_started/workflow/best_practices/godot_interfaces.rst:115
#, fuzzy
msgid "Note the following:"
msgstr "다음의 코드를 추가하세요:"

#: ../../docs/getting_started/workflow/best_practices/godot_interfaces.rst:117
msgid "There are many ways in which a language can load such resources."
msgstr ""

#: ../../docs/getting_started/workflow/best_practices/godot_interfaces.rst:119
msgid ""
"When designing how objects will access data, don't forget that one can pass "
"resources around as references as well."
msgstr ""

#: ../../docs/getting_started/workflow/best_practices/godot_interfaces.rst:122
msgid ""
"Keep in mind that loading a resource fetches the cached resource instance "
"maintained by the engine. To get a new object, one must :ref:`duplicate "
"<class_Resource_method_duplicate>` an existing reference or instantiate one "
"from scratch with ``new()``."
msgstr ""

#: ../../docs/getting_started/workflow/best_practices/godot_interfaces.rst:127
msgid "Nodes likewise have an alternative access point: the SceneTree."
msgstr ""

#: ../../docs/getting_started/workflow/best_practices/godot_interfaces.rst:242
msgid "Accessing data or logic from an object"
msgstr ""

#: ../../docs/getting_started/workflow/best_practices/godot_interfaces.rst:244
msgid ""
"Godot's scripting API is duck-typed. This means that if a script executes an "
"operation, Godot doesn't validate that it supports the operation by "
"**type**. It instead checks that the object **implements** the individual "
"method."
msgstr ""

#: ../../docs/getting_started/workflow/best_practices/godot_interfaces.rst:248
msgid ""
"For example, the :ref:`CanvasItem <class_CanvasItem>` class has a "
"``visible`` property. All properties exposed to the scripting API are in "
"fact a setter and getter pair bound to a name. If one tried to access :ref:"
"`CanvasItem.visible <class_CanvasItem_property_visible>`, then Godot would "
"do the following checks, in order:"
msgstr ""

#: ../../docs/getting_started/workflow/best_practices/godot_interfaces.rst:254
msgid ""
"If the object has a script attached, it will attempt to set the property "
"through the script. This leaves open the opportunity for scripts to override "
"a property defined on a base object by overriding the setter method for the "
"property."
msgstr ""

#: ../../docs/getting_started/workflow/best_practices/godot_interfaces.rst:259
msgid ""
"If the script does not have the property, it performs a HashMap lookup in "
"the ClassDB for the \"visible\" property against the CanvasItem class and "
"all of its inherited types. If found, it will call the bound setter or "
"getter. For more information about HashMaps, see the :ref:`data preferences "
"<doc_data_preferences>` docs."
msgstr ""

#: ../../docs/getting_started/workflow/best_practices/godot_interfaces.rst:265
msgid ""
"If not found, it does an explicit check to see if the user wants to access "
"the \"script\" or \"meta\" properties."
msgstr ""

#: ../../docs/getting_started/workflow/best_practices/godot_interfaces.rst:268
msgid ""
"If not, it checks for a ``_set``/``_get`` implementation (depending on type "
"of access) in the CanvasItem and its inherited types. These methods can "
"execute logic that gives the impression that the Object has a property. This "
"is also the case with the ``_get_property_list`` method."
msgstr ""

#: ../../docs/getting_started/workflow/best_practices/godot_interfaces.rst:273
msgid ""
"Note that this happens even for non-legal symbol names such as in the case "
"of :ref:`TileSet <class_TileSet>`'s \"1/tile_name\" property. This refers to "
"the name of the tile with ID 1, i.e. :ref:`TileSet.tile_get_name(1) "
"<class_TileSet_method_tile_get_name>`."
msgstr ""

#: ../../docs/getting_started/workflow/best_practices/godot_interfaces.rst:278
msgid ""
"As a result, this duck-typed system can locate a property either in the "
"script, the object's class, or any class that object inherits, but only for "
"things which extend Object."
msgstr ""

#: ../../docs/getting_started/workflow/best_practices/godot_interfaces.rst:282
msgid ""
"Godot provides a variety of options for performing runtime checks on these "
"accesses:"
msgstr ""

#: ../../docs/getting_started/workflow/best_practices/godot_interfaces.rst:285
msgid ""
"A duck-typed property access. These will property check (as described "
"above). If the operation isn't supported by the object, execution will halt."
msgstr ""

#: ../../docs/getting_started/workflow/best_practices/godot_interfaces.rst:313
msgid ""
"A method check. In the case of :ref:`CanvasItem.visible "
"<class_CanvasItem_property_visible>`, one can access the methods, "
"``set_visible`` and ``is_visible`` like any other method."
msgstr ""

#: ../../docs/getting_started/workflow/best_practices/godot_interfaces.rst:445
msgid ""
"Outsource the access to a :ref:`FuncRef <class_FuncRef>`. These may be "
"useful in cases where one needs the max level of freedom from dependencies. "
"In this case, one relies on an external context to setup the method."
msgstr ""

#: ../../docs/getting_started/workflow/best_practices/godot_interfaces.rst:504
msgid ""
"These strategies contribute to Godot's flexible design. Between them, users "
"have a breadth of tools to meet their specific needs."
msgstr ""

#: ../../docs/getting_started/workflow/best_practices/godot_notifications.rst:4
#, fuzzy
msgid "Godot notifications"
msgstr "알림(Notifications)"

#: ../../docs/getting_started/workflow/best_practices/godot_notifications.rst:6
msgid ""
"Every Object in Godot implements a :ref:`_notification "
"<class_Object_method__notification>` method. Its purpose is to allow the "
"Object to respond to a variety of engine-level callbacks that may relate to "
"it. For example, if the engine tells a :ref:`CanvasItem <class_CanvasItem>` "
"to \"draw\", it will call ``_notification(NOTIFICATION_DRAW)``."
msgstr ""

#: ../../docs/getting_started/workflow/best_practices/godot_notifications.rst:13
msgid ""
"Some of these notifications, like draw, are useful to override in scripts. "
"So much so that Godot exposes many of them with dedicated functions:"
msgstr ""

#: ../../docs/getting_started/workflow/best_practices/godot_notifications.rst:16
msgid "``_ready()`` : NOTIFICATION_READY"
msgstr ""

#: ../../docs/getting_started/workflow/best_practices/godot_notifications.rst:18
msgid "``_enter_tree()`` : NOTIFICATION_ENTER_TREE"
msgstr ""

#: ../../docs/getting_started/workflow/best_practices/godot_notifications.rst:20
msgid "``_exit_tree()`` : NOTIFICATION_EXIT_TREE"
msgstr ""

#: ../../docs/getting_started/workflow/best_practices/godot_notifications.rst:22
msgid "``_process(delta)`` : NOTIFICATION_PROCESS"
msgstr ""

#: ../../docs/getting_started/workflow/best_practices/godot_notifications.rst:24
msgid "``_physics_process(delta)`` : NOTIFICATION_PHYSICS_PROCESS"
msgstr ""

#: ../../docs/getting_started/workflow/best_practices/godot_notifications.rst:26
msgid "``_input()`` : NOTIFICATION_INPUT"
msgstr ""

#: ../../docs/getting_started/workflow/best_practices/godot_notifications.rst:28
msgid "``_unhandled_input()`` : NOTIFICATION_UNHANDLED_INPUT"
msgstr ""

#: ../../docs/getting_started/workflow/best_practices/godot_notifications.rst:30
msgid "``_draw()`` : NOTIFICATION_DRAW"
msgstr ""

#: ../../docs/getting_started/workflow/best_practices/godot_notifications.rst:32
msgid ""
"What users might *not* realize is that notifications exist for types other "
"than Node alone:"
msgstr ""

#: ../../docs/getting_started/workflow/best_practices/godot_notifications.rst:35
msgid ""
":ref:`Object::NOTIFICATION_POSTINITIALIZE "
"<class_Object_constant_NOTIFICATION_POSTINITIALIZE>`: a callback that "
"triggers during object initialization. Not accessible to scripts."
msgstr ""

#: ../../docs/getting_started/workflow/best_practices/godot_notifications.rst:38
msgid ""
":ref:`Object::NOTIFICATION_PREDELETE "
"<class_Object_constant_NOTIFICATION_PREDELETE>`: a callback that triggers "
"before the engine deletes an Object, i.e. a 'destructor'."
msgstr ""

#: ../../docs/getting_started/workflow/best_practices/godot_notifications.rst:42
msgid ""
":ref:`MainLoop::NOTIFICATION_WM_MOUSE_ENTER "
"<class_MainLoop_constant_NOTIFICATION_WM_MOUSE_ENTER>`: a callback that "
"triggers when the mouse enters the window in the operating system that "
"displays the game content."
msgstr ""

#: ../../docs/getting_started/workflow/best_practices/godot_notifications.rst:46
msgid ""
"And many of the callbacks that *do* exist in Nodes don't have any dedicated "
"methods, but are still quite useful."
msgstr ""

#: ../../docs/getting_started/workflow/best_practices/godot_notifications.rst:49
msgid ""
":ref:`Node::NOTIFICATION_PARENTED "
"<class_Node_constant_NOTIFICATION_PARENTED>`: a callback that triggers "
"anytime one adds a child node to another node."
msgstr ""

#: ../../docs/getting_started/workflow/best_practices/godot_notifications.rst:52
msgid ""
":ref:`Node::NOTIFICATION_UNPARENTED "
"<class_Node_constant_NOTIFICATION_UNPARENTED>`: a callback that triggers "
"anytime one removes a child node from another node."
msgstr ""

#: ../../docs/getting_started/workflow/best_practices/godot_notifications.rst:56
msgid ""
":ref:`Popup::NOTIFICATION_POST_POPUP "
"<class_Popup_constant_NOTIFICATION_POST_POPUP>`: a callback that triggers "
"after a Popup node completes any ``popup*`` method. Note the difference from "
"its ``about_to_show`` signal which triggers *before* its appearance."
msgstr ""

#: ../../docs/getting_started/workflow/best_practices/godot_notifications.rst:61
msgid ""
"One can access all these custom notifications from the universal "
"``_notification`` method."
msgstr ""

#: ../../docs/getting_started/workflow/best_practices/godot_notifications.rst:65
msgid ""
"Methods in the documentation labeled as \"virtual\" are also intended to be "
"overridden by scripts."
msgstr ""

#: ../../docs/getting_started/workflow/best_practices/godot_notifications.rst:68
msgid ""
"A classic example is the :ref:`_init <class_Object_method__init>` method in "
"Object. While it has no ``NOTIFICATION_*`` equivalent, the engine still "
"calls the method. Most languages (except C#) rely on it as a constructor."
msgstr ""

#: ../../docs/getting_started/workflow/best_practices/godot_notifications.rst:73
msgid ""
"So, in which situation should one use each of these notifications or virtual "
"functions?"
msgstr ""

#: ../../docs/getting_started/workflow/best_practices/godot_notifications.rst:77
msgid "_process vs. _physics_process vs. \\*_input"
msgstr ""

#: ../../docs/getting_started/workflow/best_practices/godot_notifications.rst:79
msgid ""
"Use ``_process`` when one needs a framerate-dependent deltatime between "
"frames. If code that updates object data needs to update as often as "
"possible, this is the right place. Recurring logic checks and data caching "
"often execute here, but it comes down to the frequency at which one needs "
"the evaluations to update. If they don't need to execute every frame, then "
"implementing a Timer-yield-timeout loop is another option."
msgstr ""

#: ../../docs/getting_started/workflow/best_practices/godot_notifications.rst:97
msgid ""
"Use ``_physics_process`` when one needs a framerate-independent deltatime "
"between frames. If code needs consistent updates over time, regardless of "
"how fast or slow time advances, this is the right place. Recurring kinematic "
"and object transform operations should execute here."
msgstr ""

#: ../../docs/getting_started/workflow/best_practices/godot_notifications.rst:102
msgid ""
"While it is possible, to achieve the best performance, one should avoid "
"making input checks during these callbacks. ``_process`` and "
"``_physics_process`` will trigger at every opportunity (they do not \"rest\" "
"by default). In contrast, ``*_input`` callbacks will trigger only on frames "
"in which the engine has actually detected the input."
msgstr ""

#: ../../docs/getting_started/workflow/best_practices/godot_notifications.rst:108
msgid ""
"One can check for input actions within the input callbacks just the same. If "
"one wants to use delta time, one can fetch it from the related deltatime "
"methods as needed."
msgstr ""

#: ../../docs/getting_started/workflow/best_practices/godot_notifications.rst:156
msgid "_init vs. initialization vs. export"
msgstr ""

#: ../../docs/getting_started/workflow/best_practices/godot_notifications.rst:158
msgid ""
"If the script initializes its own node subtree, without a scene, that code "
"should execute here. Other property or SceneTree-independent initializations "
"should also run here. This triggers before ``_ready`` or ``_enter_tree``, "
"but after a script creates and initializes its properties."
msgstr ""

#: ../../docs/getting_started/workflow/best_practices/godot_notifications.rst:163
msgid ""
"Scripts have three types of property assignments that can occur during "
"instantiation:"
msgstr ""

#: ../../docs/getting_started/workflow/best_practices/godot_notifications.rst:210
msgid ""
"When instantiating a scene, property values will set up according to the "
"following sequence:"
msgstr ""

#: ../../docs/getting_started/workflow/best_practices/godot_notifications.rst:213
msgid ""
"**Initial value assignment:** instantiation will assign either the "
"initialization value or the init assignment value. Init assignments take "
"priority over initialization values."
msgstr ""

#: ../../docs/getting_started/workflow/best_practices/godot_notifications.rst:217
msgid ""
"**Exported value assignment:** If instancing from a scene rather than a "
"script, Godot will assign the exported value to replace the initial value "
"defined in the script."
msgstr ""

#: ../../docs/getting_started/workflow/best_practices/godot_notifications.rst:221
msgid ""
"As a result, instantiating a script versus a scene will affect both the "
"initialization *and* the number of times the engine calls the setter."
msgstr ""

#: ../../docs/getting_started/workflow/best_practices/godot_notifications.rst:225
msgid "_ready vs. _enter_tree vs. NOTIFICATION_PARENTED"
msgstr ""

#: ../../docs/getting_started/workflow/best_practices/godot_notifications.rst:227
msgid ""
"When instantiating a scene connected to the first executed scene, Godot will "
"instantiate nodes down the tree (making ``_init`` calls) and build the tree "
"going downwards from the root. This causes ``_enter_tree`` calls to cascade "
"down the tree. Once the tree is complete, leaf nodes call ``_ready``. A node "
"will call this method once all child nodes have finished calling theirs. "
"This then causes a reverse cascade going up back to the tree's root."
msgstr ""

#: ../../docs/getting_started/workflow/best_practices/godot_notifications.rst:234
msgid ""
"When instantiating a script or a standalone scene, nodes are not added to "
"the SceneTree upon creation, so no ``_enter_tree`` callbacks trigger. "
"Instead, only the ``_init`` and later ``_ready`` calls occur."
msgstr ""

#: ../../docs/getting_started/workflow/best_practices/godot_notifications.rst:238
msgid ""
"If one needs to trigger behavior that occurs as nodes parent to another, "
"regardless of whether it occurs as part of the main/active scene or not, one "
"can use the :ref:`PARENTED <class_Node_constant_NOTIFICATION_PARENTED>` "
"notification. For example, here is a snippet that connects a node's method "
"to a custom signal on the parent node without failing. Useful on data-"
"centric nodes that one might create at runtime."
msgstr ""

#: ../../docs/getting_started/workflow/best_practices/data_preferences.rst:4
#, fuzzy
msgid "Data preferences"
msgstr "현재 씬 변경하기"

#: ../../docs/getting_started/workflow/best_practices/data_preferences.rst:6
msgid ""
"Ever wondered whether one should approach problem X with data structure Y or "
"Z? This article covers a variety of topics related to these dilemmas."
msgstr ""

#: ../../docs/getting_started/workflow/best_practices/data_preferences.rst:11
msgid ""
"This article makes references to \"[something]-time\" operations. This "
"terminology comes from algorithm analysis' `Big O Notation <https://rob-bell."
"net/2009/06/a-beginners-guide-to-big-o-notation/>`_."
msgstr ""

#: ../../docs/getting_started/workflow/best_practices/data_preferences.rst:15
msgid ""
"Long-story short, it describes the worst-case scenario of runtime length. In "
"laymen's terms:"
msgstr ""

#: ../../docs/getting_started/workflow/best_practices/data_preferences.rst:18
msgid ""
"\"As the size of a problem domain increases, the runtime length of the "
"algorithm...\""
msgstr ""

#: ../../docs/getting_started/workflow/best_practices/data_preferences.rst:21
msgid "Constant-time, ``O(1)``: \"...does not increase.\""
msgstr ""

#: ../../docs/getting_started/workflow/best_practices/data_preferences.rst:22
msgid "Logarithmic-time, ``O(log n)``: \"...increases at a slow rate.\""
msgstr ""

#: ../../docs/getting_started/workflow/best_practices/data_preferences.rst:23
msgid "Linear-time, ``O(n)``: \"...increases at the same rate.\""
msgstr ""

#: ../../docs/getting_started/workflow/best_practices/data_preferences.rst:24
msgid "Etc."
msgstr ""

#: ../../docs/getting_started/workflow/best_practices/data_preferences.rst:26
msgid ""
"Imagine if one had to process 3 million data points within a single frame. "
"It would be impossible to craft the feature with a linear-time algorithm "
"since the sheer size of the data would increase the runtime far beyond the "
"time allotted. In comparison, using a constant-time algorithm could handle "
"the operation without issue."
msgstr ""

#: ../../docs/getting_started/workflow/best_practices/data_preferences.rst:32
msgid ""
"By and large, developers want to avoid engaging in linear-time operations as "
"much as possible. But, if one keeps the scale of a linear-time operation "
"small, and if one does not need to perform the operation often, then it may "
"be acceptable. Balancing these requirements and choosing the right "
"algorithm / data structure for the job is part of what makes programmers' "
"skills valuable."
msgstr ""

#: ../../docs/getting_started/workflow/best_practices/data_preferences.rst:40
msgid "Array vs. Dictionary vs. Object"
msgstr ""

#: ../../docs/getting_started/workflow/best_practices/data_preferences.rst:42
msgid ""
"Godot stores all variables in the scripting API in the `Variant <https://"
"docs.godotengine.org/en/latest/development/cpp/variant_class.html>`_ class. "
"Variants can store Variant-compatible data structures such as :ref:`Array "
"<class_Array>` and :ref:`Dictionary <class_Dictionary>` as well as :ref:"
"`Object <class_Object>` s."
msgstr ""

#: ../../docs/getting_started/workflow/best_practices/data_preferences.rst:48
msgid ""
"Godot implements Array as a ``Vector<Variant>``. The engine stores the Array "
"contents in a contiguous section of memory, i.e. they are in a row adjacent "
"to each other."
msgstr ""

#: ../../docs/getting_started/workflow/best_practices/data_preferences.rst:53
msgid ""
"For those unfamiliar with C++, a Vector is the name of the array object in "
"traditional C++ libraries. It is a \"templated\" type, meaning that its "
"records can only contain a particular type (denoted by angled brackets). So, "
"for example, a :ref:`PoolStringArray <class_PoolStringArray>` would be "
"something like a ``Vector<String>``."
msgstr ""

#: ../../docs/getting_started/workflow/best_practices/data_preferences.rst:60
msgid "Contiguous memory stores imply the following operation performance:"
msgstr ""

#: ../../docs/getting_started/workflow/best_practices/data_preferences.rst:62
msgid "**Iterate:** Fastest. Great for loops."
msgstr ""

#: ../../docs/getting_started/workflow/best_practices/data_preferences.rst:64
msgid "Op: All it does is increment a counter to get to the next record."
msgstr ""

#: ../../docs/getting_started/workflow/best_practices/data_preferences.rst:66
msgid "**Insert, Erase, Move:** Position-dependent. Generally slow."
msgstr ""

#: ../../docs/getting_started/workflow/best_practices/data_preferences.rst:68
msgid ""
"Op: Adding/removing/moving content involves moving the adjacent records over "
"(to make room / fill space)."
msgstr ""

#: ../../docs/getting_started/workflow/best_practices/data_preferences.rst:71
msgid "Fast add/remove *from the end*."
msgstr ""

#: ../../docs/getting_started/workflow/best_practices/data_preferences.rst:73
msgid "Slow add/remove *from an arbitrary position*."
msgstr ""

#: ../../docs/getting_started/workflow/best_practices/data_preferences.rst:75
msgid "Slowest add/remove *from the front*."
msgstr ""

#: ../../docs/getting_started/workflow/best_practices/data_preferences.rst:77
msgid "If doing many inserts/removals *from the front*, then..."
msgstr ""

#: ../../docs/getting_started/workflow/best_practices/data_preferences.rst:79
msgid "invert the array."
msgstr ""

#: ../../docs/getting_started/workflow/best_practices/data_preferences.rst:81
msgid "do a loop which executes the Array changes *at the end*."
msgstr ""

#: ../../docs/getting_started/workflow/best_practices/data_preferences.rst:83
msgid "re-invert the array."
msgstr ""

#: ../../docs/getting_started/workflow/best_practices/data_preferences.rst:85
msgid ""
"This makes only 2 copies of the array (still constant time, but slow) versus "
"copying roughly 1/2 of the array, on average, N times (linear time)."
msgstr ""

#: ../../docs/getting_started/workflow/best_practices/data_preferences.rst:88
msgid ""
"**Get, Set:** Fastest *by position*. Ex. can request 0th, 2nd, 10th record, "
"etc. but cannot specify which record you want."
msgstr ""

#: ../../docs/getting_started/workflow/best_practices/data_preferences.rst:91
msgid "Op: 1 addition operation from array start position up to desired index."
msgstr ""

#: ../../docs/getting_started/workflow/best_practices/data_preferences.rst:93
msgid "**Find:** Slowest. Identifies the index/position of a value."
msgstr ""

#: ../../docs/getting_started/workflow/best_practices/data_preferences.rst:95
msgid ""
"Op: Must iterate through array and compare values until one finds a match."
msgstr ""

#: ../../docs/getting_started/workflow/best_practices/data_preferences.rst:97
msgid ""
"Performance is also dependent on whether one needs an exhaustive search."
msgstr ""

#: ../../docs/getting_started/workflow/best_practices/data_preferences.rst:100
msgid ""
"If kept ordered, custom search operations can bring it to logarithmic time "
"(relatively fast). Laymen users won't be comfortable with this though. Done "
"by re-sorting the Array after every edit and writing an ordered-aware search "
"algorithm."
msgstr ""

#: ../../docs/getting_started/workflow/best_practices/data_preferences.rst:105
msgid ""
"Godot implements Dictionary as an ``OrderedHashMap<Variant, Variant>``. The "
"engine stores a giant array (initialized to 1000 records) of key-value "
"pairs. When one attempts to access a value, they provide it a key. It then "
"*hashes* the key, i.e. converts it into a number. The \"hash\" becomes the "
"index into the array, giving the OHM a quick lookup for the value within the "
"conceptual \"table\" of keys mapped to values."
msgstr ""

#: ../../docs/getting_started/workflow/best_practices/data_preferences.rst:112
msgid ""
"Hashes are to reduce the chance of a key collision. If one occurs, the table "
"must recalculate another index for the value that takes the previous "
"position into account. In all, this results in constant-time access to all "
"records at the expense of memory and some minor operational efficiency."
msgstr ""

#: ../../docs/getting_started/workflow/best_practices/data_preferences.rst:117
msgid "Hashing every key an arbitrary number of times."
msgstr ""

#: ../../docs/getting_started/workflow/best_practices/data_preferences.rst:119
msgid ""
"Hash operations are constant-time, so even if an algorithm must do more than "
"one, as long as the number of hash calculations doesn't become too dependent "
"on the density of the table, things will stay fast. Which leads to..."
msgstr ""

#: ../../docs/getting_started/workflow/best_practices/data_preferences.rst:124
msgid "Maintaining a huge size for the table."
msgstr ""

#: ../../docs/getting_started/workflow/best_practices/data_preferences.rst:126
msgid ""
"The reason it starts with 1000 records, and the reason it forces large gaps "
"of unused memory interspersed in the table is to minimize hash collisions "
"and maintain the speed of the accesses."
msgstr ""

#: ../../docs/getting_started/workflow/best_practices/data_preferences.rst:130
msgid ""
"As one might be able to tell, Dictionaries specialize in tasks that Arrays "
"aren't. An overview of their operational details is as follows:"
msgstr ""

#: ../../docs/getting_started/workflow/best_practices/data_preferences.rst:133
msgid "**Iterate:** Fast."
msgstr ""

#: ../../docs/getting_started/workflow/best_practices/data_preferences.rst:135
msgid ""
"Op: Iterate over the map's internal vector of hashes. Return each key. "
"Afterwards, users then use the key to jump to and return the desired value."
msgstr ""

#: ../../docs/getting_started/workflow/best_practices/data_preferences.rst:139
msgid "**Insert, Erase, Move:** Fastest."
msgstr ""

#: ../../docs/getting_started/workflow/best_practices/data_preferences.rst:141
msgid ""
"Op: Hash the given key. Do 1 addition operation to look up the appropriate "
"value (array start + offset). Move is two of these (one insert, one erase). "
"The map must do some maintenance to preserve its capabilities:"
msgstr ""

#: ../../docs/getting_started/workflow/best_practices/data_preferences.rst:146
msgid "update ordered List of records."
msgstr ""

#: ../../docs/getting_started/workflow/best_practices/data_preferences.rst:148
msgid "determine if table density mandates a need to expand table capacity."
msgstr ""

#: ../../docs/getting_started/workflow/best_practices/data_preferences.rst:150
msgid ""
"The Dictionary remembers in what order users inserted its keys. This enables "
"it to execute reliable iterations."
msgstr ""

#: ../../docs/getting_started/workflow/best_practices/data_preferences.rst:153
msgid "**Get, Set:** Fastest. Same as a lookup *by key*."
msgstr ""

#: ../../docs/getting_started/workflow/best_practices/data_preferences.rst:155
msgid "Op: Same as insert/erase/move."
msgstr ""

#: ../../docs/getting_started/workflow/best_practices/data_preferences.rst:157
msgid "**Find:** Slowest. Identifies the key of a value."
msgstr ""

#: ../../docs/getting_started/workflow/best_practices/data_preferences.rst:159
msgid ""
"Op: Must iterate through records and compare the value until a match is "
"found."
msgstr ""

#: ../../docs/getting_started/workflow/best_practices/data_preferences.rst:162
msgid ""
"Note that Godot does not provide this feature out-of-the-box (because they "
"aren't meant for this task)."
msgstr ""

#: ../../docs/getting_started/workflow/best_practices/data_preferences.rst:165
msgid ""
"Godot implements Objects as stupid, but dynamic containers of data content. "
"Objects query data sources when posed questions. For example, to answer the "
"question, \"do you have a property called, 'position'?\", it might ask its :"
"ref:`script <class_Script>` or the :ref:`ClassDB <class_ClassDB>`. One can "
"find more information about what objects are and how they work in the :ref:"
"`doc_what_are_godot_classes` article."
msgstr ""

#: ../../docs/getting_started/workflow/best_practices/data_preferences.rst:172
msgid ""
"The important detail here is the complexity of the Object's task. Every time "
"it performs one of these multi-source queries, it runs through *several* "
"iteration loops and HashMap lookups. What's more, the queries are linear-"
"time operations dependent on the Object's inheritance hierarchy size. If the "
"class the Object queries (its current class) doesn't find anything, the "
"request defers to the next base class, all the way up until the original "
"Object class. While these are each fast operations in isolation, the fact "
"that it must make so many checks is what makes them slower than both of the "
"alternatives for looking up data."
msgstr ""

#: ../../docs/getting_started/workflow/best_practices/data_preferences.rst:184
msgid ""
"When developers mention how slow the scripting API is, it is this chain of "
"queries they refer to. Compared to compiled C++ code where the application "
"knows exactly where to go to find anything, it is inevitable that scripting "
"API operations will take much longer. They must locate the source of any "
"relevant data before they can attempt to access it."
msgstr ""

#: ../../docs/getting_started/workflow/best_practices/data_preferences.rst:190
msgid ""
"The reason GDScript is slow is because every operation it performs passes "
"through this system."
msgstr ""

#: ../../docs/getting_started/workflow/best_practices/data_preferences.rst:193
msgid ""
"C# can process some content at higher speeds via more optimized bytecode. "
"But, if the C# script calls into an engine class' content or if the script "
"tries to access something external to it, it will go through this pipeline."
msgstr ""

#: ../../docs/getting_started/workflow/best_practices/data_preferences.rst:198
msgid ""
"NativeScript C++ goes even further and keeps everything internal by default. "
"Calls into external structures will go through the scripting API. In "
"NativeScript C++, registering methods to expose them to the scripting API is "
"a manual task. It is at this point that external, non-C++ classes will use "
"the API to locate them."
msgstr ""

#: ../../docs/getting_started/workflow/best_practices/data_preferences.rst:204
msgid ""
"So, assuming one extends from Reference to create a data structure, like an "
"Array or Dictionary, why choose an Object over the other two options?"
msgstr ""

#: ../../docs/getting_started/workflow/best_practices/data_preferences.rst:207
msgid ""
"**Control:** With objects comes the ability to create more sophisticated "
"structures. One can layer abstractions over the data to ensure the external "
"API doesn't change in response to internal data structure changes. What's "
"more, Objects can have signals, allowing for reactive behavior."
msgstr ""

#: ../../docs/getting_started/workflow/best_practices/data_preferences.rst:212
msgid ""
"**Clarity:** Objects are a reliable data source when it comes to the data "
"that scripts and engine classes define for them. Properties may not hold the "
"values one expects, but one doesn't need to worry about whether the property "
"exists in the first place."
msgstr ""

#: ../../docs/getting_started/workflow/best_practices/data_preferences.rst:217
msgid ""
"**Convenience:** If one already has a similar data structure in mind, then "
"extending from an existing class makes the task of building the data "
"structure much easier. In comparison, Arrays and Dictionaries don't fulfill "
"all use cases one might have."
msgstr ""

#: ../../docs/getting_started/workflow/best_practices/data_preferences.rst:222
msgid ""
"Objects also give users the opportunity to create even more specialized data "
"structures. With it, one can design their own List, Binary Search Tree, "
"Heap, Splay Tree, Graph, Disjoint Set, and any host of other options."
msgstr ""

#: ../../docs/getting_started/workflow/best_practices/data_preferences.rst:226
msgid ""
"\"Why not use Node for tree structures?\" one might ask. Well, the Node "
"class contains things that won't be relevant to one's custom data structure. "
"As such, it can be helpful to construct one's own node type when building "
"tree structures."
msgstr ""

#: ../../docs/getting_started/workflow/best_practices/data_preferences.rst:270
msgid ""
"From here, one can then create their own structures with specific features, "
"limited only by their imagination."
msgstr ""

#: ../../docs/getting_started/workflow/best_practices/data_preferences.rst:274
msgid "Enumerations: int vs. string"
msgstr ""

#: ../../docs/getting_started/workflow/best_practices/data_preferences.rst:276
msgid ""
"Most languages offer an enumeration type option. GDScript is no different, "
"but unlike most other languages, it allows one to use either integers or "
"strings for the enum values. The question then arises, \"which should one "
"use?\""
msgstr ""

#: ../../docs/getting_started/workflow/best_practices/data_preferences.rst:281
msgid ""
"The short answer is, \"whichever you are more comfortable with.\" This is a "
"feature specific to GDScript and not Godot scripting in general; The "
"languages prioritizes usability over performance."
msgstr ""

#: ../../docs/getting_started/workflow/best_practices/data_preferences.rst:285
msgid ""
"On a technical level, integer comparisons (constant-time) will happen faster "
"than string comparisons (linear-time). If one wants to keep up other "
"languages' conventions though, then one should use integers."
msgstr ""

#: ../../docs/getting_started/workflow/best_practices/data_preferences.rst:289
msgid ""
"The primary issue with using integers comes up when one wants to *print* an "
"enum value. As integers, attempting to print MY_ENUM will print ``5`` or "
"what-have-you, rather than something like ``\"MyEnum\"``. To print an "
"integer enum, one would have to write a Dictionary that maps the "
"corresponding string value for each enum."
msgstr ""

#: ../../docs/getting_started/workflow/best_practices/data_preferences.rst:295
msgid ""
"If the primary purpose of using an enum is for printing values and one "
"wishes to group them together as related concepts, then it makes sense to "
"use them as strings. That way, a separate data structure to execute on the "
"printing is unnecessary."
msgstr ""

#: ../../docs/getting_started/workflow/best_practices/data_preferences.rst:301
msgid ""
"AnimatedTexture vs. AnimatedSprite vs. AnimationPlayer vs. AnimationTree"
msgstr ""

#: ../../docs/getting_started/workflow/best_practices/data_preferences.rst:303
msgid ""
"Under what circumstances should one use each of Godot's animation classes? "
"The answer may not be immediately clear to new Godot users."
msgstr ""

#: ../../docs/getting_started/workflow/best_practices/data_preferences.rst:306
msgid ""
":ref:`AnimatedTexture <class_AnimatedTexture>` is a texture that the engine "
"draws as an animated loop rather than a static image. Users can manipulate..."
msgstr ""

#: ../../docs/getting_started/workflow/best_practices/data_preferences.rst:310
msgid "the rate at which it moves across each section of the texture (fps)."
msgstr ""

#: ../../docs/getting_started/workflow/best_practices/data_preferences.rst:312
msgid "the number of regions contained within the texture (frames)."
msgstr ""

#: ../../docs/getting_started/workflow/best_practices/data_preferences.rst:314
msgid ""
"Godot's :ref:`VisualServer <class_VisualServer>` then draws the regions in "
"sequence at the prescribed rate. The good news is that this involves no "
"extra logic on the part of the engine. The bad news is that users have very "
"little control."
msgstr ""

#: ../../docs/getting_started/workflow/best_practices/data_preferences.rst:319
msgid ""
"Also note that AnimatedTexture is a :ref:`Resource <class_Resource>` unlike "
"the other :ref:`Node <class_Node>` objects discussed here. One might create "
"a :ref:`Sprite <class_Sprite>` node that uses AnimatedTexture as its "
"texture. Or (something the others can't do) one could add AnimatedTextures "
"as tiles in a :ref:`TileSet <class_TileSet>` and integrate it with a :ref:"
"`TileMap <class_TileMap>` for many auto-animating backgrounds that all "
"render in a single batched draw call."
msgstr ""

#: ../../docs/getting_started/workflow/best_practices/data_preferences.rst:327
msgid ""
"The AnimatedSprite node, in combination with the :ref:`SpriteFrames "
"<class_SpriteFrames>` resource, allows one to create a variety of animation "
"sequences through spritesheets, flip between animations, and control their "
"speed, regional offset, and orientation. This makes them well-suited to "
"controlling 2D frame-based animations."
msgstr ""

#: ../../docs/getting_started/workflow/best_practices/data_preferences.rst:333
msgid ""
"If one needs trigger other effects in relation to animation changes (for "
"example, create particle effects, call functions, or manipulate other "
"peripheral elements besides the frame-based animation), then will need to "
"use an :ref:`AnimationPlayer <class_AnimationPlayer>` node in conjunction "
"with the AnimatedSprite."
msgstr ""

#: ../../docs/getting_started/workflow/best_practices/data_preferences.rst:339
msgid ""
"AnimationPlayers are also the tool one will need to use if they wish to "
"design more complex 2D animation systems, such as..."
msgstr ""

#: ../../docs/getting_started/workflow/best_practices/data_preferences.rst:342
msgid "**Cut-Out animations:** editing sprites' transforms at runtime."
msgstr ""

#: ../../docs/getting_started/workflow/best_practices/data_preferences.rst:344
msgid ""
"**2D Mesh animations:** defining a region for the sprite's texture and "
"rigging a skeleton to it. Then one animates the bones which stretch and bend "
"the texture in proportion to the bones' relationships to each other."
msgstr ""

#: ../../docs/getting_started/workflow/best_practices/data_preferences.rst:349
msgid "A mix of the above."
msgstr ""

#: ../../docs/getting_started/workflow/best_practices/data_preferences.rst:351
msgid ""
"While one needs an AnimationPlayer to design each of the individual "
"animation sequences for a game, it can also be useful to combine animations "
"for blending, i.e. enabling smooth transitions between these animations. "
"There may also be a hierarchical structure between animations that one plans "
"out for their object. These are the cases where the :ref:`AnimationTree "
"<class_AnimationTree>` shines. One can find an in-depth guide on using the "
"AnimationTree :ref:`here <doc_animation_tree>`."
msgstr ""

#: ../../docs/getting_started/workflow/best_practices/logic_preferences.rst:4
#, fuzzy
msgid "Logic preferences"
msgstr "현재 씬 변경하기"

#: ../../docs/getting_started/workflow/best_practices/logic_preferences.rst:6
msgid ""
"Ever wondered whether one should approach problem X with strategy Y or Z? "
"This article covers a variety of topics related to these dilemmas."
msgstr ""

#: ../../docs/getting_started/workflow/best_practices/logic_preferences.rst:10
#, fuzzy
msgid "Loading vs. preloading"
msgstr "씬 불러오기"

#: ../../docs/getting_started/workflow/best_practices/logic_preferences.rst:12
msgid ""
"In GDScript, there exists the global :ref:`preload "
"<class_@GDScript_method_preload>` method. It loads resources as early as "
"possible to front-load the \"loading\" operations and avoid loading "
"resources while in the middle of performance-sensitive code."
msgstr ""

#: ../../docs/getting_started/workflow/best_practices/logic_preferences.rst:17
msgid ""
"Its counterpart, the :ref:`load <class_@GDScript_method_load>` method, loads "
"a resource only when it reaches the load statement. That is, it will load a "
"resource in-place which can cause slowdowns then it occurs in the middle of "
"sensitive processes. The ``load`` function is also an alias for :ref:"
"`ResourceLoader.load(path) <class_ResourceLoader_method_load>` which is "
"accessible to *all* scripting languages."
msgstr ""

#: ../../docs/getting_started/workflow/best_practices/logic_preferences.rst:24
msgid ""
"So, when exactly does preloading occur versus loading, and when should one "
"use either? Let's see an example:"
msgstr ""

#: ../../docs/getting_started/workflow/best_practices/logic_preferences.rst:88
msgid ""
"Preloading allows the script to handle all the loading the moment one loads "
"the script. Preloading is useful, but there are also times when one doesn't "
"wish for it. To distinguish these situations, there are a few things one can "
"consider:"
msgstr ""

#: ../../docs/getting_started/workflow/best_practices/logic_preferences.rst:93
msgid ""
"If one cannot determine when the script might load, then preloading a "
"resource, especially a scene or script, could result in further loads one "
"does not expect. This could lead to unintentional, variable-length load "
"times on top of the original script's load operations."
msgstr ""

#: ../../docs/getting_started/workflow/best_practices/logic_preferences.rst:98
msgid ""
"If something else could replace the value (like a scene's exported "
"initialization), then preloading the value has no meaning. This point isn't "
"a significant factor if one intends to always create the script on its own."
msgstr ""

#: ../../docs/getting_started/workflow/best_practices/logic_preferences.rst:102
msgid ""
"If one wishes only to 'import' another class resource (script or scene), "
"then using a preloaded constant is often the best course of action. However, "
"in exceptional cases, one my wish not to do this:"
msgstr ""

#: ../../docs/getting_started/workflow/best_practices/logic_preferences.rst:106
msgid ""
"If the 'imported' class is liable to change, then it should be a property "
"instead, initialized either using an ``export`` or a ``load`` (and perhaps "
"not even initialized until later)."
msgstr ""

#: ../../docs/getting_started/workflow/best_practices/logic_preferences.rst:110
msgid ""
"If the script requires a great many dependencies, and one does not wish to "
"consume so much memory, then one may wish to, load and unload various "
"dependencies at runtime as circumstances change. If one preloads resources "
"into constants, then the only way to unload these resources would be to "
"unload the entire script. If they are instead loaded properties, then one "
"can set them to ``null`` and remove all references to the resource entirely "
"(which, as a :ref:`Reference <class_Reference>`-extending type, will cause "
"the resources to delete themselves from memory)."
msgstr ""

#: ../../docs/getting_started/workflow/best_practices/logic_preferences.rst:121
msgid "Large levels: static vs. dynamic"
msgstr ""

#: ../../docs/getting_started/workflow/best_practices/logic_preferences.rst:123
msgid ""
"If one is creating a large level, which circumstances are most appropriate? "
"Should they create the level as one static space? Or should they load the "
"level in pieces and shift the world's content as needed?"
msgstr ""

#: ../../docs/getting_started/workflow/best_practices/logic_preferences.rst:127
msgid ""
"Well, the simple answer is , \"when the performance requires it.\" The "
"dilemma associated with the two options is one of the age-old programming "
"choices: does one optimize memory over speed, or vice versa?"
msgstr ""

#: ../../docs/getting_started/workflow/best_practices/logic_preferences.rst:131
msgid ""
"The naive answer is to use a static level that loads everything at once. "
"But, depending on the project, this could consume a large amount of memory. "
"Wasting users' RAM leads to programs running slow or outright crashing from "
"everything else the computer tries to do at the same time."
msgstr ""

#: ../../docs/getting_started/workflow/best_practices/logic_preferences.rst:136
msgid ""
"No matter what, one should break larger scenes into smaller ones (to aid in "
"reusability of assets). Developers can then design a node that manages the "
"creation/loading and deletion/unloading of resources and nodes in real-time. "
"Games with large and varied environments or procedurally generated elements "
"often implement these strategies to avoid wasting memory."
msgstr ""

#: ../../docs/getting_started/workflow/best_practices/logic_preferences.rst:142
msgid ""
"On the flip side, coding a dynamic system is more complex, i.e. uses more "
"programmed logic, which results in opportunities for errors and bugs. If one "
"isn't careful, they can develop a system that bloats the technical debt of "
"the application."
msgstr ""

#: ../../docs/getting_started/workflow/best_practices/logic_preferences.rst:147
msgid "As such, the best options would be..."
msgstr ""

#: ../../docs/getting_started/workflow/best_practices/logic_preferences.rst:149
msgid "To use a static level for smaller games."
msgstr ""

#: ../../docs/getting_started/workflow/best_practices/logic_preferences.rst:151
msgid ""
"If one has the time/resources on a medium/large game, create a library or "
"plugin that can code the management of nodes and resources. If refined over "
"time, so as to improve usability and stability, then it could evolve into a "
"reliable tool across projects."
msgstr ""

#: ../../docs/getting_started/workflow/best_practices/logic_preferences.rst:156
msgid ""
"Code the dynamic logic for a medium/large game because one has the coding "
"skills, but not the time or resources to refine the code (game's gotta get "
"done). Could potentially refactor later to outsource the code into a plugin."
msgstr ""

#: ../../docs/getting_started/workflow/best_practices/logic_preferences.rst:161
msgid ""
"For an example of the various ways one can swap scenes around at runtime, "
"please see the :ref:`\"Change scenes manually\" "
"<doc_change_scenes_manually>` documentation."
msgstr ""

#: ../../docs/tutorials/2d/canvas_layers.rst:4
msgid "Canvas layers"
msgstr ""

#: ../../docs/tutorials/2d/canvas_layers.rst:7
msgid "Viewport and Canvas items"
msgstr ""

#: ../../docs/tutorials/2d/canvas_layers.rst:9
#, fuzzy
msgid ""
"Regular 2D nodes, such as :ref:`Node2D <class_Node2D>` or :ref:`Control "
"<class_Control>` both inherit from :ref:`CanvasItem <class_CanvasItem>`, "
"which is the base for all 2D nodes. CanvasItems can be arranged in trees. "
"Each item will inherit its parent's transform. This means that when the "
"parent is moved, the children will move too."
msgstr ""
":ref:`Node2D <class_Node2D>` 또는 :ref:`Control <class_Control>` 와 같은 2D "
"노드는 모든 2D 노드의 기초가 되는 :ref:`CanvasItem <class_CanvasItem>` 로부"
"터 상속됩니다. CanvasItems은 트리 형태로 배열될 수 있고 변형을 상속받게 됩니"
"다. 이는 부모를 옮길 때 자식들도 함께 움직이는 것을 의미합니다."

#: ../../docs/tutorials/2d/canvas_layers.rst:16
#, fuzzy
msgid ""
"CanvasItem nodes, and nodes inheriting from them, are direct or indirect "
"children of a :ref:`Viewport <class_Viewport>`, and will be displayed "
"through it."
msgstr ""
"이러한 노드는 뷰포트의 간접 또는 직접적인 자식으로 배치되고 이를 통해 보여집"
"니다."

#: ../../docs/tutorials/2d/canvas_layers.rst:19
#, fuzzy
msgid ""
"A Viewport has the property :ref:`Viewport.canvas_transform "
"<class_Viewport_property_canvas_transform>`, which allows applying a custom :"
"ref:`Transform2D <class_Transform2D>` transform to the CanvasItem hierarchy "
"it contains. Nodes such as :ref:`Camera2D <class_Camera2D>` work by changing "
"that transform."
msgstr ""
"뷰포트는 :ref:`Viewport.canvas_transform "
"<class_Viewport_property_canvas_transform>` 속성을 가지는데 사용자 정의 :ref:"
"`Transform2D <class_Transform2D>` 변형을 통해 모든 CanvasItem 계층을 변형할 "
"수 있습니다. :ref:`Camera2D <class_Camera2D>`와 같은 노드는 이 변형을 바꾸는 "
"것에 의해 작동됩니다."

#: ../../docs/tutorials/2d/canvas_layers.rst:25
msgid ""
"Effects like scrolling are best achieved by manipulating the canvas "
"transform property. This approach is more efficient than moving the root "
"canvas item (and hence the whole scene)."
msgstr ""

#: ../../docs/tutorials/2d/canvas_layers.rst:28
#, fuzzy
msgid ""
"Usually though, we don't want *everything* in the game or app to be subject "
"to the canvas transform. Examples of this are:"
msgstr ""
"하지만 이 방법이 충분하지 않습니다. 게임이나 어플리케이션에서 캔버스 변형에 "
"의해 모든 것이 변형되는 것을 종종 원하지 않는 상황이 있습니다. 다음과 같은 "
"예:"

#: ../../docs/tutorials/2d/canvas_layers.rst:31
msgid ""
"**Parallax Backgrounds**: Backgrounds that move slower than the rest of the "
"stage."
msgstr "**페럴렉스 배경**: 무대 나머지 부분보다 느리게 움직이는 배경."

#: ../../docs/tutorials/2d/canvas_layers.rst:33
msgid ""
"**UI**: Think of a user interface (UI) or Heads-up display (HUD) "
"superimposed on our view of the game world. We want a life counter, score "
"display and other elements to retain their screen positions even when our "
"view of the game world is changing."
msgstr ""

#: ../../docs/tutorials/2d/canvas_layers.rst:34
#, fuzzy
msgid ""
"**Transitions**: We may want visual effects used for transitions (fades, "
"blends) to remain at a fixed screen location."
msgstr ""
"**전환**: 전환에 사용되는 효과(페이드, 혼합)가 고정된 위치에 남아 있기를 원"
"할 수 있습니다."

#: ../../docs/tutorials/2d/canvas_layers.rst:36
msgid "How can these problems be solved in a single scene tree?"
msgstr "단일 씬 트리에서 어떻게 이 문제들을 해결할 수 있을까요?"

#: ../../docs/tutorials/2d/canvas_layers.rst:39
msgid "CanvasLayers"
msgstr ""

#: ../../docs/tutorials/2d/canvas_layers.rst:41
#, fuzzy
msgid ""
"The answer is :ref:`CanvasLayer <class_CanvasLayer>`, which is a node that "
"adds a separate 2D rendering layer for all its children and grand-children. "
"Viewport children will draw by default at layer \"0\", while a CanvasLayer "
"will draw at any numeric layer. Layers with a greater number will be drawn "
"above those with a smaller number. CanvasLayers also have their own "
"transform and do not depend on the transform of other layers. This allows "
"the UI to be fixed in screen-space while our view on the game world changes."
msgstr ""
"이 해답은 자식들과 자손들에 분리된 2D 렌더링 레이어를 추가하는 :ref:"
"`CanvasLayer <class_CanvasLayer>` 노드에 있습니다. 뷰포트 자식들은 기본적으"
"로 \"0\" 레이어에 그려집니다. 반면에 CanvasLayer는 아무 숫자 레이어에 그려집"
"니다. 더 큰 숫자를 가진 레이어가 위에 그려집니다. 또한 각 CanvasLayers 만의 "
"변형을 가지고 다른 레이어의  변형에 의존하지 않습니다. 이것은 세계가 움직이"
"는 동안에 UI를 고정될 수 있게 해줍니다."

#: ../../docs/tutorials/2d/canvas_layers.rst:50
msgid ""
"An example of this is creating a parallax background. This can be done with "
"a CanvasLayer at layer \"-1\". The screen with the points, life counter and "
"pause button can also be created at layer \"1\"."
msgstr ""

#: ../../docs/tutorials/2d/canvas_layers.rst:54
#, fuzzy
msgid "Here's a diagram of how it looks:"
msgstr "도표는 다음과 같습니다:"

#: ../../docs/tutorials/2d/canvas_layers.rst:58
#, fuzzy
msgid ""
"CanvasLayers are independent of tree order, and they only depend on their "
"layer number, so they can be instantiated when needed."
msgstr ""
"CanvasLayer들은 트리 순서에 독립적이고 레이어 수에만 의존합니다. 그래서 필요"
"할 때 인스턴스화 될 수 있습니다."

#: ../../docs/tutorials/2d/canvas_layers.rst:61
msgid ""
"CanvasLayers aren't necessary to control the drawing order of nodes. The "
"standard way to ensuring that a node is  correctly drawn 'in front' or "
"'behind' others is to manipulate the order of the nodes in the scene panel. "
"Perhaps counterintuitively, the topmost nodes in the scene panel are drawn "
"on *behind* lower ones in the viewport. 2d nodes also have a property for "
"controlling their drawing order (see :ref:`Node2D.z_index "
"<class_Node2D_property_z_index>`)."
msgstr ""

#: ../../docs/tutorials/2d/2d_transforms.rst:4
msgid "Viewport and canvas transforms"
msgstr "뷰포트와 캔버스 변형"

#: ../../docs/tutorials/2d/2d_transforms.rst:9
#, fuzzy
msgid ""
"This is an overview of the 2D transforms going on for nodes from the moment "
"they draw their content locally to the time they are drawn onto the screen. "
"This overview discusses very low level details of the engine."
msgstr ""
"노드에서 콘텐츠를 지역으로 그리는 순간부터 화면에 그려지는 시간까지 진행되는 "
"2D 변환에 대한 개요입니다. 이 개요는 엔진에서 매우 저수준의 세부 정보를 설명"
"합니다."

#: ../../docs/tutorials/2d/2d_transforms.rst:14
msgid "Canvas transform"
msgstr "캔버스 변형"

#: ../../docs/tutorials/2d/2d_transforms.rst:16
#, fuzzy
msgid ""
"As mentioned in the previous tutorial, :ref:`doc_canvas_layers`, every "
"CanvasItem node (remember that Node2D and Control based nodes use CanvasItem "
"as their common root) will reside in a *Canvas Layer*. Every canvas layer "
"has a transform (translation, rotation, scale, etc.) that can be accessed as "
"a :ref:`Transform2D <class_Transform2D>`."
msgstr ""
"이전 :ref:`doc_canvas_layers` 튜토리얼에서 언급한 것과 같이 모든 CanvasItem "
"노드(Node2D와 Control를 기반으로 두는 노드는 CanvasItem를 공통의 루트로 사용"
"하는 것을 기억하세요)는 *Canvas Layer*에 있습니다. 모든 canvas layer는 :ref:"
"`Transform2D <class_Transform2D>`로 접근할 수 있는 변형(옮김(translation), 회"
"전, 스케일 등)이 있습니다."

#: ../../docs/tutorials/2d/2d_transforms.rst:22
#, fuzzy
msgid ""
"Also covered in the previous tutorial, nodes are drawn by default in Layer "
"0, in the built-in canvas. To put nodes in a different layer, a :ref:"
"`CanvasLayer <class_CanvasLayer>` node can be used."
msgstr ""
"또한 이전 튜토리얼에서도 다뤘듯이 노드는 기본적으로 내장된 캔버스의 레이어 0"
"에서 그려집니다. 노드를 다른 레이어에 배치하려면 :ref:\"CanvasLayer "
"<class_CanvasLayer> 노드를 사용할 수 있습니다."

#: ../../docs/tutorials/2d/2d_transforms.rst:27
msgid "Global canvas transform"
msgstr "전역 캔버스 변형(Global canvas transform)"

#: ../../docs/tutorials/2d/2d_transforms.rst:29
#, fuzzy
msgid ""
"Viewports also have a Global Canvas transform (also a :ref:`Transform2D "
"<class_Transform2D>`). This is the master transform and affects all "
"individual *Canvas Layer* transforms. Generally, this transform is not of "
"much use, but is used in the CanvasItem Editor in Godot's editor."
msgstr ""
"뷰포트에는 전역 캔버스 변형(또한 :ref:\"Transform2D <class_Transform2D>도)이 "
"있습니다. 이는 모든 각각의 *Canvas Layer* 변형에 영향을 미치는 마스터 변형입"
"니다. 일반적으로 이 변형은 별로 쓸모가 없지만 Godot 편집기의 CanvasItem 편집"
"기에서 사용된다."

#: ../../docs/tutorials/2d/2d_transforms.rst:36
msgid "Stretch transform"
msgstr "늘이기 변형(Stretch transform)"

#: ../../docs/tutorials/2d/2d_transforms.rst:38
#, fuzzy
msgid ""
"Finally, viewports have a *Stretch Transform*, which is used when resizing "
"or stretching the screen. This transform is used internally (as described "
"in :ref:`doc_multiple_resolutions`), but can also be manually set on each "
"viewport."
msgstr ""
"마지막으로, 뷰포트에는 *늘이기 변형*이 있으며, 이는 화면 크기를 조정하거나 늘"
"일 때 사용됩니다. 이 변형은 내부적으로 사용되지만( :ref:"
"`doc_multiple_resolutions`에 설명됨) 각 뷰포트에서 수동으로 설정할 수도 있습"
"니다."

#: ../../docs/tutorials/2d/2d_transforms.rst:43
#, fuzzy
msgid ""
"Input events received in the :ref:`MainLoop._input_event() "
"<class_MainLoop_method__input_event>` callback are multiplied by this "
"transform but lack the ones above. To convert InputEvent coordinates to "
"local CanvasItem coordinates, the :ref:`CanvasItem.make_input_local() "
"<class_CanvasItem_method_make_input_local>` function was added for "
"convenience."
msgstr ""
"Input events received in the :ref:`MainLoop._input_event() "
"<class_MainLoop_method__input_event>` callback are multiplied by this "
"transform but lack the ones above. InputEvent 좌표를 지역 CanvasItem 좌표로 "
"변환하기 위해서는 :ref:`CanvasItem.make_input_local() "
"<class_CanvasItem_method_make_input_local>` 기능을 편의를 위해 추가했습니다."

#: ../../docs/tutorials/2d/2d_transforms.rst:50
msgid "Transform order"
msgstr "변형 순서"

#: ../../docs/tutorials/2d/2d_transforms.rst:52
msgid ""
"For a coordinate in CanvasItem local properties to become an actual screen "
"coordinate, the following chain of transforms must be applied:"
msgstr ""
"CanvasItem 지역 속성의 좌표가 실제 화면 좌표가 되려면 다음과 같은 변형 체인"
"이 적용되어야 합니다:"

#: ../../docs/tutorials/2d/2d_transforms.rst:58
msgid "Transform functions"
msgstr "변형 기능들"

#: ../../docs/tutorials/2d/2d_transforms.rst:60
msgid "Obtaining each transform can be achieved with the following functions:"
msgstr "각 변형을 얻으려면 다음과 같은 기능을 사용합니다:"

#: ../../docs/tutorials/2d/2d_transforms.rst:63
#: ../../docs/tutorials/io/data_paths.rst:51
#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:21
#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:585
#: ../../docs/tutorials/shading/migrating_to_godot_shader_language.rst:92
#: ../../docs/tutorials/shading/migrating_to_godot_shader_language.rst:158
#: ../../docs/tutorials/shading/migrating_to_godot_shader_language.rst:218
#: ../../docs/tutorials/plugins/editor/import_plugins.rst:240
#: ../../docs/tutorials/misc/binary_serialization_api.rst:23
#: ../../docs/tutorials/misc/binary_serialization_api.rst:92
#: ../../docs/tutorials/misc/binary_serialization_api.rst:101
#: ../../docs/tutorials/misc/binary_serialization_api.rst:110
#: ../../docs/tutorials/misc/binary_serialization_api.rst:119
#: ../../docs/tutorials/misc/binary_serialization_api.rst:132
#: ../../docs/tutorials/misc/binary_serialization_api.rst:143
#: ../../docs/tutorials/misc/binary_serialization_api.rst:158
#: ../../docs/tutorials/misc/binary_serialization_api.rst:171
#: ../../docs/tutorials/misc/binary_serialization_api.rst:190
#: ../../docs/tutorials/misc/binary_serialization_api.rst:205
#: ../../docs/tutorials/misc/binary_serialization_api.rst:220
#: ../../docs/tutorials/misc/binary_serialization_api.rst:239
#: ../../docs/tutorials/misc/binary_serialization_api.rst:264
#: ../../docs/tutorials/misc/binary_serialization_api.rst:295
#: ../../docs/tutorials/misc/binary_serialization_api.rst:310
#: ../../docs/tutorials/misc/binary_serialization_api.rst:319
#: ../../docs/tutorials/misc/binary_serialization_api.rst:330
#: ../../docs/tutorials/misc/binary_serialization_api.rst:340
#: ../../docs/tutorials/misc/binary_serialization_api.rst:359
#: ../../docs/tutorials/misc/binary_serialization_api.rst:371
#: ../../docs/tutorials/misc/binary_serialization_api.rst:383
#: ../../docs/tutorials/misc/binary_serialization_api.rst:396
#: ../../docs/tutorials/misc/binary_serialization_api.rst:407
#: ../../docs/tutorials/misc/binary_serialization_api.rst:418
#: ../../docs/tutorials/misc/binary_serialization_api.rst:426
#: ../../docs/tutorials/misc/binary_serialization_api.rst:439
#: ../../docs/tutorials/misc/binary_serialization_api.rst:452
#: ../../docs/tutorials/misc/binary_serialization_api.rst:467
msgid "Type"
msgstr "유형"

#: ../../docs/tutorials/2d/2d_transforms.rst:63
msgid "Transform"
msgstr "변형"

#: ../../docs/tutorials/2d/2d_transforms.rst:65
msgid "CanvasItem"
msgstr ""

#: ../../docs/tutorials/2d/2d_transforms.rst:65
msgid ""
":ref:`CanvasItem.get_global_transform() "
"<class_CanvasItem_method_get_global_transform>`"
msgstr ""
":ref:`CanvasItem.get_global_transform() "
"<class_CanvasItem_method_get_global_transform>`"

#: ../../docs/tutorials/2d/2d_transforms.rst:67
msgid "CanvasLayer"
msgstr ""

#: ../../docs/tutorials/2d/2d_transforms.rst:67
msgid ""
":ref:`CanvasItem.get_canvas_transform() "
"<class_CanvasItem_method_get_canvas_transform>`"
msgstr ""

#: ../../docs/tutorials/2d/2d_transforms.rst:69
msgid "CanvasLayer+GlobalCanvas+Stretch"
msgstr ""

#: ../../docs/tutorials/2d/2d_transforms.rst:69
msgid ""
":ref:`CanvasItem.get_viewport_transform() "
"<class_CanvasItem_method_get_viewport_transform>`"
msgstr ""

#: ../../docs/tutorials/2d/2d_transforms.rst:72
msgid ""
"Finally, then, to convert a CanvasItem local coordinates to screen "
"coordinates, just multiply in the following order:"
msgstr ""
"마지막으로 CanvasItem 지역 좌표를 화면 좌표로 변환하려면 다음 순서로 곱하세"
"요:"

#: ../../docs/tutorials/2d/2d_transforms.rst:84
msgid ""
"Keep in mind, however, that it is generally not desired to work with screen "
"coordinates. The recommended approach is to simply work in Canvas "
"coordinates (``CanvasItem.get_global_transform()``), to allow automatic "
"screen resolution resizing to work properly."
msgstr ""
"그러나 화면 좌표를 사용하여 작업하는 것은 일반적으로 바람직하지 않음을 명심하"
"세요. 권장되는 접근방식은 Canvas 좌표(``CanvasItem.get_global_transform()``)"
"로 자동으로 화면 해상도를 제대로 크기 조정할 수 있게 간단히 작동해야 합니다."

#: ../../docs/tutorials/2d/2d_transforms.rst:90
msgid "Feeding custom input events"
msgstr ""

#: ../../docs/tutorials/2d/2d_transforms.rst:92
#, fuzzy
msgid ""
"It is often desired to feed custom input events to the scene tree. With the "
"above knowledge, to correctly do this, it must be done the following way:"
msgstr ""
"씬 트리에 사용자 지정 이벤트를 주는 것이 바람직합니다. 위의 지식으로 이벤트"
"를 주려면 다음과 같은 방법으로 해야 됩니다."

#: ../../docs/tutorials/2d/using_tilemaps.rst:4
msgid "Using tilemaps"
msgstr "타일맵 사용하기"

#: ../../docs/tutorials/2d/using_tilemaps.rst:9
msgid ""
"A tilemap is a grid of tiles used to create a game's layout. There are "
"several benefits to using :ref:`TileMap <class_TileMap>` nodes to design "
"your levels. First, they make it possible to draw the layout by \"painting' "
"the tiles onto a grid, which is much faster than placing individual :ref:"
"`Sprite <class_Sprite>` nodes one by one. Second, they allow for much larger "
"levels because they are optimized for drawing large numbers of tiles. "
"Finally, you can add collision, occlusion, and navigation shapes to tiles, "
"adding additional functionality to the TileMap."
msgstr ""

#: ../../docs/tutorials/2d/using_tilemaps.rst:23
msgid ""
"This demo we'll use the following tiles taken from Kenney's \"Abstract "
"Platformer\" art pack. You can find the complete set `here <https://kenney."
"nl/assets/abstract-platformer>`_ but for this demo we'll stick to this small "
"set."
msgstr ""

#: ../../docs/tutorials/2d/using_tilemaps.rst:29
msgid "Create a new project and place the above image in the project folder."
msgstr ""

#: ../../docs/tutorials/2d/using_tilemaps.rst:31
msgid ""
"When using a tileset, it's important that adjacent tiles match up. Godot's "
"default is to import 2D images using an interpolated \"filter\" mode, which "
"will result in ugly borders between the tiles. Select the image and click "
"the Import tab. Turn off ``Filter`` and click \"Reimport\". See :ref:"
"`doc_import_images` for details."
msgstr ""

#: ../../docs/tutorials/2d/using_tilemaps.rst:37
#, fuzzy
msgid "TileMap node"
msgstr "카메라 노드"

#: ../../docs/tutorials/2d/using_tilemaps.rst:39
msgid ""
"Add a new :ref:`TileMap <class_TileMap>` node to the scene. By default, a "
"TileMap uses a square grid of tiles. You can also use a perspective-based "
"\"Isometric\" mode or define your own custom tile shape."
msgstr ""

#: ../../docs/tutorials/2d/using_tilemaps.rst:45
msgid ""
"Under the \"Cell\" section in the Inspector are many properties you can "
"adjust to customize your tilemap's behavior:"
msgstr ""

#: ../../docs/tutorials/2d/using_tilemaps.rst:52
#, fuzzy
msgid "``Cell Size``"
msgstr "``Center``"

#: ../../docs/tutorials/2d/using_tilemaps.rst:51
msgid ""
"This defines the size of the grid. This should match the pixel size of your "
"tiles. The default value is ``(64, 64)``."
msgstr ""

#: ../../docs/tutorials/2d/using_tilemaps.rst:56
msgid "``YSort``"
msgstr ""

#: ../../docs/tutorials/2d/using_tilemaps.rst:55
msgid ""
"This causes tiles to be drawn in order of their ``Y`` position, so that "
"\"lower\" tiles are drawn on top of \"higher\" ones."
msgstr ""

#: ../../docs/tutorials/2d/using_tilemaps.rst:59
msgid "``Half Offset`` and ``Tile Origin``"
msgstr ""

#: ../../docs/tutorials/2d/using_tilemaps.rst:59
msgid ""
"These properties affect the position of the tile relative to the grid "
"position."
msgstr ""

#: ../../docs/tutorials/2d/using_tilemaps.rst:63
msgid "``Quadrant``"
msgstr ""

#: ../../docs/tutorials/2d/using_tilemaps.rst:62
msgid ""
"Defines the chunk size used for batched drawing. This can negatively affect "
"performance. Don't change it unless you know what you're doing."
msgstr ""

#: ../../docs/tutorials/2d/using_tilemaps.rst:66
#, fuzzy
msgid "``Custom Transform``"
msgstr "변형"

#: ../../docs/tutorials/2d/using_tilemaps.rst:66
msgid "Used to alter the tile's shape. Use this if you have non-square tiles."
msgstr ""

#: ../../docs/tutorials/2d/using_tilemaps.rst:68
msgid "All of these options can be left at their defaults for this demo."
msgstr ""

#: ../../docs/tutorials/2d/using_tilemaps.rst:71
#, fuzzy
msgid "Creating a TileSet"
msgstr "타일셋(TileSet) 내보내기"

#: ../../docs/tutorials/2d/using_tilemaps.rst:73
msgid ""
"Once you've configured your tilemap, it's time to add a :ref:`TileSet "
"<class_TileSet>`. A TileSet is a :ref:`Resource <class_Resource>` that "
"contains the data about your tiles - their   textures, collision shapes, and "
"other properties. When the game runs, the TileMap combines the individual "
"tiles into a single object."
msgstr ""

#: ../../docs/tutorials/2d/using_tilemaps.rst:79
msgid ""
"To add a new TileSet, click on the \"Tile Set\" property and select \"New "
"TileSet\"."
msgstr ""

#: ../../docs/tutorials/2d/using_tilemaps.rst:84
#, fuzzy
msgid ""
"When you do this, the \"TileSet\" panel will open at the bottom of the "
"editor window:"
msgstr ""
"새 SpriteFrames 리소스를 클릭하면 에디터 창 하단에 새로운 패널이 나타날 것입"
"니다:"

#: ../../docs/tutorials/2d/using_tilemaps.rst:89
msgid ""
"First, you need to add the texture(s) that you'll use for the tiles. Click "
"the \"Add Texture(s) to TileSet\" button and select the ``tilesheet.png`` "
"image."
msgstr ""

#: ../../docs/tutorials/2d/using_tilemaps.rst:92
msgid ""
"Next, click \"New Single Tile\" and drag in the image to select the tile you "
"want. Click the \"Enable Snap\" button to make it easier to select the "
"entire tile. A yellow rectangle appears around the selected tile."
msgstr ""

#: ../../docs/tutorials/2d/using_tilemaps.rst:98
msgid ""
"Click on the TileMap in the scene tree, and you'll see that the newly "
"created tile now appears on the right side. Click in the viewport and you "
"can place tiles. Right-click to remove them."
msgstr ""

#: ../../docs/tutorials/2d/using_tilemaps.rst:104
msgid ""
"It's easy to accidentally select and move the tilemap node. To avoid this, "
"use the node's lock button:"
msgstr ""

#: ../../docs/tutorials/2d/using_tilemaps.rst:110
#, fuzzy
msgid "Collision Shapes"
msgstr "충돌 모양"

#: ../../docs/tutorials/2d/using_tilemaps.rst:112
msgid ""
"If you're making a map that needs collisions - walls, floor, or other "
"obstacles, for example - then you'll need to add collision shapes to any "
"tiles that you want to be considered \"solid\"."
msgstr ""

#: ../../docs/tutorials/2d/using_tilemaps.rst:116
msgid ""
"Click \"TileSet\" at the bottom of the editor window to return to the "
"tileset tool. Click the tile you previously defined (outlined in yellow). "
"Select the \"Collision\" tab and click the \"Create a new rectangle\" "
"button. Make sure you still have grid snap enabled, then click and drag in "
"the tile. A square collision shape appears in light blue:"
msgstr ""

#: ../../docs/tutorials/2d/using_tilemaps.rst:124
msgid ""
"You can add occlusion and navigation shapes to the tile in the same way."
msgstr ""

#: ../../docs/tutorials/2d/using_tilemaps.rst:127
msgid "Atlas tiles"
msgstr ""

#: ../../docs/tutorials/2d/using_tilemaps.rst:129
msgid ""
"Rather than adding individual tiles one at a time, you can define a group of "
"tiles all at once using an atlas. Click \"New Atlas\" and drag to select the "
"entire tile sheet."
msgstr ""

#: ../../docs/tutorials/2d/using_tilemaps.rst:135
msgid ""
"If you haven't already, make sure to change the \"Step\" in the snap "
"settings to `(64, 64)`, or your tiles may be chopped into smaller pieces. "
"You can find this in the Inspector:"
msgstr ""

#: ../../docs/tutorials/2d/using_tilemaps.rst:141
msgid ""
"Once you've defined the atlas you can add collision shapes to the individual "
"tiles as before. You can also click \"Icon\" to select one of the tiles to "
"represent the atlas."
msgstr ""

#: ../../docs/tutorials/2d/using_tilemaps.rst:145
msgid ""
"Back in the TileMap, you can select the atlas tile and you'll see all of the "
"tiles it contains:"
msgstr ""

#: ../../docs/tutorials/2d/using_tilemaps.rst:150
msgid ""
"In addition to saving time when defining the tiles, this can help by "
"grouping similar tiles together when you're working with a large number of "
"tiles."
msgstr ""

#: ../../docs/tutorials/2d/using_tilemaps.rst:154
msgid "Tips and tricks"
msgstr ""

#: ../../docs/tutorials/2d/using_tilemaps.rst:156
msgid ""
"If you're using a :ref:`Camera2D <class_Camera2D>` to scroll your level, you "
"may notice lines appearing between your tiles. To fix this, open Project "
"Settings and enable \"Use Pixel Snap\" in the \"Rendering/Quality\" section."
msgstr ""

#: ../../docs/tutorials/2d/using_tilemaps.rst:160
msgid ""
"You can flip and rotate tiles using the icons at the top right of the editor."
msgstr ""

#: ../../docs/tutorials/2d/using_tilemaps.rst:162
msgid ""
"To draw straight lines, hold :kbd:`Shift` while clicking and dragging a tile."
msgstr ""

#: ../../docs/tutorials/2d/using_tilemaps.rst:164
msgid ""
"Tools such as copy, paste, and bucket fill, can be found in the \"TileMap\" "
"menu in the upper-right."
msgstr ""

#: ../../docs/tutorials/2d/particle_systems_2d.rst:4
msgid "Particle systems (2D)"
msgstr "입자(Particle) 시스템 (2D)"

#: ../../docs/tutorials/2d/particle_systems_2d.rst:9
msgid ""
"A simple (but flexible enough for most uses) particle system is provided. "
"Particle systems are used to simulate complex physical effects, such as "
"sparks, fire, magic particles, smoke, mist, etc."
msgstr ""
"간단한(간단하지만 대부분 용도에 충분히 유연한) 입자 시스템이 제공됩니다. 입"
"자 시스템은 스파크나 불, 마법 입자, 연기, 안개 등 복잡한 물리적 효과를 시뮬레"
"이션하기 위해 쓰입니다."

#: ../../docs/tutorials/2d/particle_systems_2d.rst:13
msgid ""
"The idea is that a \"particle\" is emitted at a fixed interval and with a "
"fixed lifetime. During its lifetime, every particle will have the same base "
"behavior. What makes each particle different from the rest and provides a "
"more organic look is the \"randomness\" associated with each parameter. In "
"essence, creating a particle system means setting base physics parameters "
"and then adding randomness to them."
msgstr ""

#: ../../docs/tutorials/2d/particle_systems_2d.rst:21
#, fuzzy
msgid "Particle nodes"
msgstr "파티클(Particles)"

#: ../../docs/tutorials/2d/particle_systems_2d.rst:23
msgid ""
"Godot provides two different nodes for 2D particles, :ref:"
"`class_Particles2D` and :ref:`class_CPUParticles2D`. Particles2D is more "
"advanced and uses the GPU to process particle effects, but that limits it to "
"higher end graphics API, and in our case to the GLES3 renderer. For projects "
"using the GLES2 backend, CPUParticles2D is a CPU-driven option with near "
"feature parity with Particles2D, but lesser performance. While Particles2D "
"is configured via a :ref:`class_ParticlesMaterial` (and optionally with a "
"custom shader), the matching options are provided via node properties in "
"CPUParticles2D (with the exception of the trail settings). You can convert a "
"Particles2D node into a CPUParticles2D node by clicking on the node in the "
"inspector, and selecting \"Convert to CPUParticles2D\" in the \"Particles\" "
"menu of the toolbar."
msgstr ""

#: ../../docs/tutorials/2d/particle_systems_2d.rst:36
msgid ""
"The rest of this tutorial is going to use the Particles2D node. First, add a "
"Particles2D node to your scene. After creating that node you will notice "
"that only a white dot was created, and that there is a warning icon next to "
"your Particles2D node in the inspector. This is because the node needs a "
"ParticlesMaterial to function."
msgstr ""

#: ../../docs/tutorials/2d/particle_systems_2d.rst:42
msgid "ParticlesMaterial"
msgstr ""

#: ../../docs/tutorials/2d/particle_systems_2d.rst:44
msgid ""
"To add a process material to your particles node, go to ``Process Material`` "
"in your inspector panel. Click on the box next to ``Material``, and from the "
"dropdown menu select ``New ParticlesMaterial``."
msgstr ""
"입자 노드에 프로세스 재료(process material)을 추가하기 위해서 인스펙터"
"(Inspecter) 패널에서 ``Process Material`` 로 갑니다.  ``Material`` 박스를 클"
"릭한 다음 드롭다운 메뉴에서 ``New ParticlsMaterial``를 선택합니다."

#: ../../docs/tutorials/2d/particle_systems_2d.rst:50
#, fuzzy
msgid "Your Particles2D node should now be emitting white points downward."
msgstr "이제 Particles2D 노드는 아래쪽으로 내려가는 흰 점들이 방출됩니다."

#: ../../docs/tutorials/2d/particle_systems_2d.rst:56
msgid "Texture"
msgstr ""

#: ../../docs/tutorials/2d/particle_systems_2d.rst:58
#, fuzzy
msgid ""
"A particle system uses a single texture (in the future this might be "
"extended to animated textures via spritesheet). The texture is set via the "
"relevant texture property:"
msgstr ""
"입자 시스템은 단일 텍스처를 사용합니다(in the future this might be extended "
"to animated textures via spritesheet). 텍스처는 관련 텍스처 속성을 통해 설정"
"합니다:"

#: ../../docs/tutorials/2d/particle_systems_2d.rst:65
msgid "Time parameters"
msgstr ""

#: ../../docs/tutorials/2d/particle_systems_2d.rst:68
msgid "Lifetime"
msgstr ""

#: ../../docs/tutorials/2d/particle_systems_2d.rst:70
msgid ""
"The time in seconds that every particle will stay alive. When lifetime ends, "
"a new particle is created to replace it."
msgstr ""
"입자가 머무는 시간(초). 수명(lifetime)이 끝나면 새로운 입자가 대체됩니다."

#: ../../docs/tutorials/2d/particle_systems_2d.rst:73
msgid "Lifetime: 0.5"
msgstr ""

#: ../../docs/tutorials/2d/particle_systems_2d.rst:77
msgid "Lifetime: 4.0"
msgstr ""

#: ../../docs/tutorials/2d/particle_systems_2d.rst:82
msgid "One Shot"
msgstr ""

#: ../../docs/tutorials/2d/particle_systems_2d.rst:84
msgid ""
"When enabled, a Particles2D node will emit all of its particles once and "
"then never again."
msgstr ""
"활성화되면 Particles2D 노드는 모든 입자를 한 번 방출하고 다시는 방출하지 않습"
"니다."

#: ../../docs/tutorials/2d/particle_systems_2d.rst:88
msgid "Preprocess"
msgstr ""

#: ../../docs/tutorials/2d/particle_systems_2d.rst:90
#, fuzzy
msgid ""
"Particle systems begin with zero particles emitted, then start emitting. "
"This can be an inconvenience when loading a scene and systems like a torch, "
"mist, etc. begin emitting the moment you enter. Preprocess is used to let "
"the system process a given number of seconds before it is actually drawn the "
"first time."
msgstr ""
"입자 시스템은 0개의 입자를 방출된 채로 시작해서 방출합니다. 이 방식은 씬을 불"
"러오고 당신이 들어온 순간부터 방출하기 시작하는 횃불, 안개 등과 같은 시스템"
"은  불편할 수 있습니다. 사전프로세스(Preprocess)는 시스템이 실제로 처음 그려"
"지기 전에 주어진 시간(초)를 처리하도록 하는데 사용됩니다."

#: ../../docs/tutorials/2d/particle_systems_2d.rst:97
msgid "Speed Scale"
msgstr ""

#: ../../docs/tutorials/2d/particle_systems_2d.rst:99
#, fuzzy
msgid ""
"The speed scale has a default value of ``1`` and is used to adjust the speed "
"of a particle system. Lowering the value will make the particles slower "
"while increasing the value will make the particles much faster."
msgstr ""
"Speed Scale은 기본값으로 ``1\"을 가지고 있으며 입자 시스템의 속도를 조절하는 "
"데 사용된다. 값을 낮추면 입자가 느려지는 반면 값을 늘리면 입자가 훨씬 빨라진"
"다."

#: ../../docs/tutorials/2d/particle_systems_2d.rst:104
msgid "Explosiveness"
msgstr ""

#: ../../docs/tutorials/2d/particle_systems_2d.rst:106
#, fuzzy
msgid ""
"If lifetime is ``1`` and there are 10 particles, it means a particle will be "
"emitted every 0.1 seconds. The explosiveness parameter changes this, and "
"forces particles to be emitted all together. Ranges are:"
msgstr ""
"수명이 ``1\"이고 10개의 입자가 있다면 0.1초마다 입자가 방출되는 것을 의미한"
"다. 폭발성 매개변수(explosiveness parameter)는 이것을 변화시키고, 입자를 모"
"두 방출하도록 한다. 범위:"

#: ../../docs/tutorials/2d/particle_systems_2d.rst:110
msgid "0: Emit particles at regular intervals (default value)."
msgstr "0: 입자들을 일정한 간격으로 방출합니다(기본 값)."

#: ../../docs/tutorials/2d/particle_systems_2d.rst:111
msgid "1: Emit all particles simultaneously."
msgstr "1: 동시에 모든 입자를 방출합니다."

#: ../../docs/tutorials/2d/particle_systems_2d.rst:113
#, fuzzy
msgid ""
"Values in the middle are also allowed. This feature is useful for creating "
"explosions or sudden bursts of particles:"
msgstr ""
"중간 값도 허용됩니다. 이 특징은 폭발이나 갑작스러운 입자 폭발을 만들 때 유용"
"합니다."

#: ../../docs/tutorials/2d/particle_systems_2d.rst:119
msgid "Randomness"
msgstr "랜덤성(Randomness)"

#: ../../docs/tutorials/2d/particle_systems_2d.rst:121
#, fuzzy
msgid ""
"All physics parameters can be randomized. Random values range from ``0`` to "
"``1``. The formula to randomize a parameter is:"
msgstr ""
"모든 물리학 파라미터는 랜덤화될 수 있습니다. 무작위 값은 ``0\"부터 ``1\"까지 "
"다양합니다. 파라미터를 랜덤화하는 공식은 다음과 같습니다:"

#: ../../docs/tutorials/2d/particle_systems_2d.rst:129
#, fuzzy
msgid "Fixed FPS"
msgstr "고정 FPS(Fixed FPS)"

#: ../../docs/tutorials/2d/particle_systems_2d.rst:131
#, fuzzy
msgid ""
"This setting can be used to set the particle system to render at a fixed "
"FPS. For instance, changing the value to ``2`` will make the particles "
"render at 2 frames per second. Note this does not slow down the particle "
"system itself."
msgstr ""
"이 설정은 입자 시스템을 고정 FPS로 렌더하는데 사용됩니다. 예로 들어 값을 "
"``2`` 로 바꿔 보면 입자를 초당 2 프레임으로 렌더합니다. 단, 입자 시스템을 느"
"려지게 하는 것이 아니니 주의하세요."

#: ../../docs/tutorials/2d/particle_systems_2d.rst:136
msgid "Fract Delta"
msgstr ""

#: ../../docs/tutorials/2d/particle_systems_2d.rst:138
#, fuzzy
msgid "This can be used to turn Fract Delta on or off."
msgstr "이 속성은 Fract Delta를 사용 또는 사용안함으로 바꾸는데 사용됩니다."

#: ../../docs/tutorials/2d/particle_systems_2d.rst:141
msgid "Drawing parameters"
msgstr ""

#: ../../docs/tutorials/2d/particle_systems_2d.rst:144
msgid "Visibility Rect"
msgstr ""

#: ../../docs/tutorials/2d/particle_systems_2d.rst:147
msgid ""
"The visibility rectangle controls the visibility of the particles on screen. "
"If this rectangle is outside of the viewport, the engine will not render the "
"particles on screen."
msgstr ""

#: ../../docs/tutorials/2d/particle_systems_2d.rst:149
msgid ""
"The rectangle's ``W`` and ``H`` properties respectively control its Width "
"and its Height. The ``X`` and ``Y`` properties control the position of the "
"upper-left corner of the rectangle, relative to the particle emitter."
msgstr ""

#: ../../docs/tutorials/2d/particle_systems_2d.rst:153
#, fuzzy
msgid ""
"You can have Godot generate a Visibility Rect automatically using the "
"toolbar above the 2d view. To do so, select the Particles2D node and Click "
"``Particles > Generate Visibility Rect``. Godot will simulate the "
"Particles2D node emitting particles for a few seconds and set the rectangle "
"to fit the surface the particles take."
msgstr ""
"You can have Godot generate a Visibility Rect automatically using the "
"toolbar above the 2d view. To do so, select the Particles2D node and Click ``"
"파티클(Particles) > 가시성 직사각형을 만들기``. Godot will simulate the "
"Particles2D node emitting particles for a few seconds and set the rectangle "
"to fit the surface the particles take."

#: ../../docs/tutorials/2d/particle_systems_2d.rst:155
msgid ""
"You can control the emit duration with the ``Generation Time (sec)`` option. "
"The maximum value is 25 seconds. If you need more time for your particles to "
"move around, you can temporarily change the ``preprocess`` duration on the "
"Particles2D node."
msgstr ""

#: ../../docs/tutorials/2d/particle_systems_2d.rst:158
msgid "Local Coords"
msgstr "지역 좌표"

#: ../../docs/tutorials/2d/particle_systems_2d.rst:160
#, fuzzy
msgid ""
"By default this option is on, and it means that the space that particles are "
"emitted to is relative to the node. If the node is moved, all particles are "
"moved with it:"
msgstr ""
"기본적으로 이 옵션은 켜져 있으며 이는 입자들이 방출되는 공간이 노드에 상대적"
"인 걸 의미합니다. 만약 노드가 움직인다면 모든 입자들도 같이 움직입니다."

#: ../../docs/tutorials/2d/particle_systems_2d.rst:166
#, fuzzy
msgid ""
"If disabled, particles will emit to global space, meaning that if the node "
"is moved, already emitted particles are not affected:"
msgstr ""
"비활성화되면 입자는 전역 공간에 방출됩니다. 만약 노드가 움직이면 이미 방출된 "
"입자는 영향을 받지 않습니다."

#: ../../docs/tutorials/2d/particle_systems_2d.rst:172
msgid "Draw Order"
msgstr ""

#: ../../docs/tutorials/2d/particle_systems_2d.rst:174
#, fuzzy
msgid ""
"This controls the order in which individual particles are drawn. ``Index`` "
"means particles are drawn according to their emission order (default). "
"``Lifetime`` means they are drawn in order of remaining lifetime."
msgstr ""
"각각의 입자가 그려지는 순서를 조절합니다. ``인덱스``는 방출 순서에 따라 입자"
"가 그려집니다(기본). ``Lifetime``은 남아 있는 lifetime 순서로 그려집니다."

#: ../../docs/tutorials/2d/particle_systems_2d.rst:179
msgid "ParticlesMaterial settings"
msgstr ""

#: ../../docs/tutorials/2d/particle_systems_2d.rst:198
msgid "Spread"
msgstr ""

#: ../../docs/tutorials/2d/particle_systems_2d.rst:200
#, fuzzy
msgid ""
"This parameter is the angle in degrees which will be randomly added in "
"either direction to the base ``Direction``. A spread of ``180`` will emit in "
"all directions (+/- 180). For spread to do anything the \"Initial Velocity\" "
"parameter must be greater than 0."
msgstr ""
"이  매개 변수는 기준 ``방향``에 임의로 어느 방향으로든 추가되는 각도(도) 입니"
"다. ``180``으로 설정하면 모든 방향(+/- 180)으로 방출됩니다."

#: ../../docs/tutorials/2d/particle_systems_2d.rst:208
msgid "Gravity"
msgstr "중력"

#: ../../docs/tutorials/2d/particle_systems_2d.rst:210
#, fuzzy
msgid "The gravity applied to every particle."
msgstr "중력이 모든 입자에 적용됩니다."

#: ../../docs/tutorials/2d/particle_systems_2d.rst:215
msgid "Initial Velocity"
msgstr "초기 속도(Initial Velocity)"

#: ../../docs/tutorials/2d/particle_systems_2d.rst:217
#, fuzzy
msgid ""
"Initial velocity is the speed at which particles will be emitted (in pixels/"
"sec). Speed might later be modified by gravity or other accelerations (as "
"described further below)."
msgstr ""
"선형 속도(Linear velocity)는 입자가 방출 되는 속도입니다(초당 픽셀). 속도는 "
"나중에 중력이나 다른 가속도에 의해 수정될 수 있습니다(아래에 더 자세히 설명"
"됨)."

#: ../../docs/tutorials/2d/particle_systems_2d.rst:224
#, fuzzy
msgid "Angular Velocity"
msgstr "각속도(Angular Velocity)"

#: ../../docs/tutorials/2d/particle_systems_2d.rst:226
#, fuzzy
msgid "Angular velocity is the initial angular velocity applied to particles."
msgstr "각속도(Angular velocity)는 입자에 적용되는 초기각속도입니다."

#: ../../docs/tutorials/2d/particle_systems_2d.rst:229
msgid "Spin Velocity"
msgstr "회전 속도(Spin Velocity)"

#: ../../docs/tutorials/2d/particle_systems_2d.rst:231
#, fuzzy
msgid ""
"Spin velocity is the speed at which particles turn around their center (in "
"degrees/sec)."
msgstr "회전 속도는 입자가 각각의 입자 중심을 회전하는 속도입니다(초당 각도)."

#: ../../docs/tutorials/2d/particle_systems_2d.rst:237
msgid "Orbit Velocity"
msgstr "공전 속도(Orbit Velocity)"

#: ../../docs/tutorials/2d/particle_systems_2d.rst:239
msgid "Orbit velocity is used to make particles turn around their center."
msgstr "공전 속도는 입자들이 중심을 돌게 만드는 데 사용됩니다."

#: ../../docs/tutorials/2d/particle_systems_2d.rst:244
msgid "Linear Acceleration"
msgstr "선형 가속도(Linear Acceleration)"

#: ../../docs/tutorials/2d/particle_systems_2d.rst:246
msgid "The linear acceleration applied to each particle."
msgstr "각 입자에 적용되는 선형 가속도."

#: ../../docs/tutorials/2d/particle_systems_2d.rst:249
msgid "Radial Acceleration"
msgstr "지름 가속도(Radial Acceleration)"

#: ../../docs/tutorials/2d/particle_systems_2d.rst:251
msgid ""
"If this acceleration is positive, particles are accelerated away from the "
"center. If negative, they are absorbed towards it."
msgstr ""

#: ../../docs/tutorials/2d/particle_systems_2d.rst:257
msgid "Tangential Acceleration"
msgstr "접선가속도(Tangential Acceleration)"

#: ../../docs/tutorials/2d/particle_systems_2d.rst:259
#, fuzzy
msgid ""
"This acceleration will use the tangent vector to the center. Combining with "
"radial acceleration can do nice effects."
msgstr ""
"이 가속도는 중심에 접선 벡터를 사용합니다. 지름 가속도와 결합하면 좋은 효과"
"를 볼 수 있습니다."

#: ../../docs/tutorials/2d/particle_systems_2d.rst:265
msgid "Damping"
msgstr ""

#: ../../docs/tutorials/2d/particle_systems_2d.rst:267
msgid ""
"Damping applies friction to the particles, forcing them to stop. It is "
"especially useful for sparks or explosions, which usually begin with a high "
"linear velocity and then stop as they fade."
msgstr ""
"Damping은 입자에 마찰을 일으켜 멈추게 합니다. 특히 불꽃이나 폭발에 유용하며 "
"보통 높은 선형 속도로 시작하다가 점차 사라지면서 멈춘다."

#: ../../docs/tutorials/2d/particle_systems_2d.rst:274
msgid "Angle"
msgstr "각도"

#: ../../docs/tutorials/2d/particle_systems_2d.rst:276
#, fuzzy
msgid ""
"Determines the initial angle of the particle (in degrees). This parameter is "
"mostly useful randomized."
msgstr ""
"입자의 초기 각도를 결정합니다.  이 매개 변수는 랜덤화하는데 대부분 유용하게 "
"쓰입니다."

#: ../../docs/tutorials/2d/particle_systems_2d.rst:282
#: ../../docs/tutorials/3d/using_multi_mesh_instance.rst:87
msgid "Scale"
msgstr "Scale"

#: ../../docs/tutorials/2d/particle_systems_2d.rst:284
msgid "Determines the initial scale of the particles."
msgstr ""

#: ../../docs/tutorials/2d/particle_systems_2d.rst:289
msgid "Color"
msgstr "색깔"

#: ../../docs/tutorials/2d/particle_systems_2d.rst:291
msgid "Used to change the color of the particles being emitted."
msgstr "방출되는 입자 색깔을 바꾸는 데 사용됩니다."

#: ../../docs/tutorials/2d/particle_systems_2d.rst:294
msgid "Hue variation"
msgstr ""

#: ../../docs/tutorials/2d/particle_systems_2d.rst:296
#, fuzzy
msgid ""
"The ``Variation`` value sets the initial hue variation applied to each "
"particle. The ``Variation Random`` value controls the hue variation "
"randomness ratio."
msgstr ""
"``Variation`` 값은 각 입자의 초기 hue variation를 설정합니다. ``Variation "
"Random`` 값은 hue variation 무작위 비율을 조절합니다."

#: ../../docs/tutorials/2d/particle_systems_2d.rst:301
msgid "Emission Shapes"
msgstr "방출 모양(Emission Shapes)"

#: ../../docs/tutorials/2d/particle_systems_2d.rst:303
#, fuzzy
msgid ""
"ParticlesMaterials allow you to set an Emission Mask, which dictates the "
"area and direction in which particles are emitted. These can be generated "
"from textures in your project."
msgstr ""
"ParticlesMaterials는 입자가 방출되는 영역과 방향을 결정할 수 있는 에미션 마스"
"크(Emission Mask)를 설정할 수 있습니다. 프로젝트 내 텍스처로 생성될 수 있습니"
"다."

#: ../../docs/tutorials/2d/particle_systems_2d.rst:307
msgid ""
"Ensure that a ParticlesMaterial is set, and the Particles2D node is "
"selected. A \"Particles\" menu should appear in the Toolbar:"
msgstr ""
"ParticlesMaterial이 설정되고 Particle2D 노드가 선택되어 있는지 확인하십시오. "
"툴바에 \"파티클(Particles)\" 메뉴가 표시됩니다:"

#: ../../docs/tutorials/2d/particle_systems_2d.rst:312
msgid "Open it and select \"Load Emission Mask\":"
msgstr "메뉴를 열고 \"에미션 마스크 불러오기\"를 선택하세요:"

#: ../../docs/tutorials/2d/particle_systems_2d.rst:316
msgid "Then select which texture you want to use as your mask:"
msgstr "그런 다음 마스크로 쓸 텍스처를 선택합니다:"

#: ../../docs/tutorials/2d/particle_systems_2d.rst:320
msgid "A dialog box with several settings will appear."
msgstr "몇 가지 설정이 있는 대화 상자가 나타납니다."

#: ../../docs/tutorials/2d/particle_systems_2d.rst:323
msgid "Emission Mask"
msgstr "방출 마스크"

#: ../../docs/tutorials/2d/particle_systems_2d.rst:325
msgid "Three types of emission masks can be generated from a texture:"
msgstr "텍스처로 생성될 수 있는 에미션 마스크는 세 가지 유형이 있습니다:"

#: ../../docs/tutorials/2d/particle_systems_2d.rst:327
msgid ""
"Solid Pixels: Particles will spawn from any area of the texture, excluding "
"transparent areas."
msgstr ""
"Solid Pixels: 텍스처의 투명한 부분을 제외한 모든 영역에서 입자가 생겨납니다."

#: ../../docs/tutorials/2d/particle_systems_2d.rst:332
msgid ""
"Border Pixels: Particles will spawn from the outer edges of the texture."
msgstr "Border Pixels: 텍스처의 바깥쪽 가장자리에 입자가 생겨납니다."

#: ../../docs/tutorials/2d/particle_systems_2d.rst:336
msgid ""
"Directed Border Pixels: Similar to Border Pixels, but adds extra information "
"to the mask to give particles the ability to emit away from the borders. "
"Note that an ``Initial Velocity`` will need to be set in order to utilize "
"this."
msgstr ""
"Directed Border Pixels: Border Pixels와 유사하지만 마스크에 추가 정보를 추가"
"하여 입자들이 경계에서 멀리 방출할 수 있는 능력을 부여한다. 이를 활용하려면 "
"``초기 속도``를 설정해야 합니다."

#: ../../docs/tutorials/2d/particle_systems_2d.rst:344
msgid "Emission Colors"
msgstr "방출 색상"

#: ../../docs/tutorials/2d/particle_systems_2d.rst:346
msgid ""
"``Capture from Pixel`` will cause the particles to inherit the color of the "
"mask at their spawn points."
msgstr "``픽셀로부터 캡쳐``는 입자가 생겨난 지점의 마스크 색깔을 물려받습니다."

#: ../../docs/tutorials/2d/particle_systems_2d.rst:348
msgid ""
"Once you click \"OK\", the mask will be generated and set to the "
"ParticlesMaterial, under the ``Emission Shape`` section:"
msgstr ""
"\"확인\" 버튼을 누르게 되면 마스크가 생성되고 ParticlesMaterial의 ``Emission "
"Shape`` 부분 아래에 설정됩니다:"

#: ../../docs/tutorials/2d/particle_systems_2d.rst:352
msgid ""
"All of the values within this section have been automatically generated by "
"the \"Load Emission Mask\" menu, so they should generally be left alone."
msgstr ""
"이 부분의 모든 값은 \"에미션 마스크 불러오기\" 메뉴에 의해서 자동적으로 생성"
"됩니다. 그래서 이 설정은 일반적으로 그대로 두어야 합니다."

#: ../../docs/tutorials/2d/particle_systems_2d.rst:355
msgid ""
"An image should not be added to ``Point Texture`` or ``Color Texture`` "
"directly. The \"Load Emission Mask\" menu should always be used instead."
msgstr ""
"``Point Texture`` 또는 ``Color Texture``에 직접 이미지를 추가해서는 안됩니"
"다. 그 대신에 \"에미션 마스크 불러오기\" 메뉴를 통해서 사용되어야 합니다."

#: ../../docs/tutorials/2d/2d_movement.rst:4
msgid "2D movement overview"
msgstr "2D 이동 개요"

#: ../../docs/tutorials/2d/2d_movement.rst:9
#, fuzzy
msgid ""
"Every beginner has been there: \"How do I move my character?\" Depending on "
"the style of game you're making, you may have special requirements, but in "
"general the movement in most 2D games is based on a small number of designs."
msgstr ""
"모든 초심자는 이런 적이 있습니다: \"내 캐릭터를 움직이려면 어떻게 해야 하나"
"요?\" 만들고 있는 게임의 유형에 따라 특별한 요구 사항이 있을 수 있겠지만 일반"
"적으로 대부분 2D 게임에서 움직임은 적은 수의 디자인을 기반으로 합니다."

#: ../../docs/tutorials/2d/2d_movement.rst:13
msgid ""
"We'll use :ref:`KinematicBody2D <class_KinematicBody2D>` for these examples, "
"but the principles will apply to other node types (Area2D, RigidBody2D) as "
"well."
msgstr ""
"우리는 이번 예제에 :ref:`KinematicBody2D <class_KinematicBody2D>` 를 사용할 "
"겁니다. 하지만 원리는 다른 노드 유형(Area2D, RiqidBody2D)에도 적용할 수 있습"
"니다."

#: ../../docs/tutorials/2d/2d_movement.rst:17
#: ../../docs/tutorials/2d/2d_lights_and_shadows.rst:22
#: ../../docs/tutorials/animation/2d_skeletons.rst:30
#: ../../docs/tutorials/shading/your_first_shader/your_first_canvasitem_shader.rst:21
#: ../../docs/tutorials/plugins/editor/inspector_plugins.rst:12
#: ../../docs/development/compiling/introduction_to_the_buildsystem.rst:40
msgid "Setup"
msgstr ""

#: ../../docs/tutorials/2d/2d_movement.rst:19
msgid ""
"Each example below uses the same scene setup. Start with a "
"``KinematicBody2D`` with two children: ``Sprite`` and ``CollisionShape2D``. "
"You can use the Godot icon (\"icon.png\") for the Sprite's texture or use "
"any other 2D image you have."
msgstr ""
"아래의 각 예제는 동일한 씬 설정을 사용합니다. ``KinematicBody2D`` 와 자식 노"
"드로 ``Sprite`` 와 ``CollisionShape2D`` 로 시작합니다. 당신은 스프라이트 텍스"
"처로 Godot 아이콘(\"icon.png\")을 사용하거나 가지고 있는 다른 2D 이미지를 사"
"용할 수 있습니다."

#: ../../docs/tutorials/2d/2d_movement.rst:23
msgid ""
"Open ``Project -> Project Settings`` and select the \"Input Map\" tab. Add "
"the following input actions (see :ref:`InputEvent <doc_inputevent>` for "
"details):"
msgstr ""
"``프로젝트 -> 프로젝트 설정`` 을 열고 \"입력 설정\" 탭을 선택합니다. 다음의 "
"입력 액션들을 추가하세요 (see :ref:`InputEvent <doc_inputevent>` for "
"details):"

#: ../../docs/tutorials/2d/2d_movement.rst:29
msgid "8-way movement"
msgstr "8 방향 이동"

#: ../../docs/tutorials/2d/2d_movement.rst:31
msgid ""
"In this scenario, you want the user to press the four directional keys (up/"
"left/down/right or W/A/S/D) and move in the selected direction. The name \"8-"
"way movement\" comes from the fact that the player can move diagonally by "
"pressing two keys at the same time."
msgstr ""
"이 시나리오에서는 사용자가 4 방향의 키들(위/왼쪽/아래/오른쪽 또는 W/A/S/D)을 "
"누르고 선택된 방향으로 움직였으면 합니다. \"8 방향 이동\" 명칭은 동시에 두 키"
"를 눌러서 플레이어가 대각선으로 움직이게 되는 것에서 유래합니다."

#: ../../docs/tutorials/2d/2d_movement.rst:37
msgid "Add a script to the kinematic body and add the following code:"
msgstr "kinematic body에 스크립트를 추가하고 다음과 같은 코드를 추가합니다:"

#: ../../docs/tutorials/2d/2d_movement.rst:101
msgid ""
"In the ``get_input()`` function we check for the four key events and sum "
"them up to get the velocity vector. This has the benefit of making two "
"opposite keys cancel each other out, but will also result in diagonal "
"movement being faster due to the two directions being added together."
msgstr ""
"``get_input()`` 함수에서 4키 이벤트를 확인하고 이를 합산해서 속도 벡터를 얻습"
"니다. 두 반대편 키를 서로 상쇄하는 장점이 있지만 두 개의 방향을 함께 추가하"
"기 때문에 대각선 이동이 더 빨라지게 된다."

#: ../../docs/tutorials/2d/2d_movement.rst:106
msgid ""
"We can prevent that if we *normalize* the velocity, which means we set its "
"*length* to ``1``, and multiply by the desired speed."
msgstr ""
"우리는 속도를 *정상화*해서 방지할 수 있습니다. *길이*를 ``1``로 설정하고 원하"
"는 속도를 곱합니다."

#: ../../docs/tutorials/2d/2d_movement.rst:109
msgid ""
"If you've never used vector math before, or need a refresher, you can see an "
"explanation of vector usage in Godot at :ref:`doc_vector_math`."
msgstr ""
"벡터 수학을 사용해 본 적이 없거나 재교육이 필요한 경우 :ref:"
"`doc_vector_math` 에서 Godot 내 벡터 사용에 대한 설명을 볼 수 있습니다."

#: ../../docs/tutorials/2d/2d_movement.rst:113
msgid "Rotation + movement"
msgstr "회전 + 이동"

#: ../../docs/tutorials/2d/2d_movement.rst:115
msgid ""
"This type of movement is sometimes called \"Asteroids-style\" because it "
"resembles how that classic arcade game worked. Pressing left/right rotates "
"the character, while up/down moves it forward or backward in whatever "
"direction it's facing."
msgstr ""
"이러한 이동의 유형은 때때로 \"Asteroids-style\"이라 불립니다. 왜냐하면 고전 "
"아케이드 게임 Asteroids 작동 방식과 닮았기 때문입니다. 왼쪽 또는 오른쪽을 누"
"르면 캐릭터가 회전합니다. 반면에 위 또는 아래를 누르면 보고 있는 방향에 대햐"
"여 전진 하거나 후진합니다."

#: ../../docs/tutorials/2d/2d_movement.rst:190
msgid ""
"Here we've added two new variables to track our rotation direction and "
"speed. Again, pressing both keys at once will cancel out and result in no "
"rotation. The rotation is applied directly to the body's ``rotation`` "
"property."
msgstr ""
"여기에 회전 방향과 속도를 추적하기 위한 새로운 변수 두 개를 추가했습니다. 다"
"시 두 키를 동시에 누르면 취소되고 회전하지 않습니다. 이 회전은 바디의 "
"``rotation`` 속성에 직접 적용됩니다."

#: ../../docs/tutorials/2d/2d_movement.rst:194
msgid ""
"To set the velocity, we use the ``Vector2.rotated()`` method, so that it "
"points in the same direction as the body. ``rotated()`` is a useful vector "
"function that you can use in many circumstances where you would otherwise "
"need to apply trigonometric functions."
msgstr ""
"속도를 설정하기 위해 우리는 ``Vector2.rotated()`` 메서드를 사용해 바디와 같"
"은 방향을 가리키도록 합니다. ``rotated``는 삼각함수를 적용해야 하는 여러 가"
"지 상황에서 사용할 수 있는 유용한 벡터 함수입니다."

#: ../../docs/tutorials/2d/2d_movement.rst:200
msgid "Rotation + movement (mouse)"
msgstr "회전 + 이동 (마우스)"

#: ../../docs/tutorials/2d/2d_movement.rst:202
msgid ""
"This style of movement is a variation of the previous one. This time, the "
"direction is set by the mouse position instead of the keyboard. The "
"character will always \"look at\" the mouse pointer. The forward/back inputs "
"remain the same, however."
msgstr ""
"이번 동작 방식은 이전 동작의 변형입니다. 이번에는 키보드 대신 마우스 위치에 "
"의해 방향이 정해집니다. 캐릭터는 항상 마우스 포인터를 봅니다(\"look at\"). 그"
"러나 전방/후진 입력은 동일하게 유지됩니다."

#: ../../docs/tutorials/2d/2d_movement.rst:261
msgid ""
"Here we're using the :ref:`Node2D <class_Node2D>` ``look_at()`` method to "
"point the player towards a given position. Without this function, you could "
"get the same effect by setting the angle like this:"
msgstr ""
"여기서 우리는 플레이어를 주어진 포지션으로 향하도록 하기 위해 :ref:`Node2D "
"<class_Node2D>` 의 ``look_at()`` 메서드를 사용하고 있습니다. 이 함수가 없으"
"면 각도를 다음과 같이 설정하여 동일한 효과를 얻을 수 있습니다:"

#: ../../docs/tutorials/2d/2d_movement.rst:276
msgid "Click-and-move"
msgstr "클릭과 이동"

#: ../../docs/tutorials/2d/2d_movement.rst:278
msgid ""
"This last example uses only the mouse to control the character. Clicking on "
"the screen will cause the player to move to the target location."
msgstr ""
"이번 마지막 예제는 마우스만 사용하여 캐릭터를 제어합니다. 화면을 클릭하면 플"
"레이어는 지정 위치로 움직입니다."

#: ../../docs/tutorials/2d/2d_movement.rst:335
#, fuzzy
msgid ""
"Note the ``distance_to()`` check we make prior to movement. Without this "
"test, the body would \"jitter\" upon reaching the target position, as it "
"moves slightly past the position and tries to move back, only to move too "
"far and repeat."
msgstr ""
"이동 하기 전에 ``length()`` 로 확인하는 것을 유의하세요. 이 테스트가 없으면 "
"위치를 약간 지나쳐서 되돌아가려 할 때 지정 위치에 도달하고 \"덜덜 떨 것입니다"
"\", only to move too far and repeat."

#: ../../docs/tutorials/2d/2d_movement.rst:340
#, fuzzy
msgid ""
"Uncommenting the ``look_at()`` line will also turn the body to point in its "
"direction of motion if you prefer."
msgstr ""
"원한다면 ``rotation`` 줄의 주석 처리를 제거해서 움직이는 방향으로 몸을 돌리"
"게 할 수 있습니다."

#: ../../docs/tutorials/2d/2d_movement.rst:343
msgid ""
"This technique can also be used as the basis of a \"following\" character. "
"The ``target`` position can be that of any object you want to move to."
msgstr ""

#: ../../docs/tutorials/2d/2d_movement.rst:349
msgid ""
"You may find these code samples useful as starting points for your own "
"projects. Feel free to use them and experiment with them to see what you can "
"make."
msgstr ""
"당신은 이 코드 샘플들이 자신의 프로젝트 시작점으로서  유용하다는 것을 알게 "
"될 것입니다. 자유롭게 그것들을 사용해서 무엇을 만들 수 있을 지 실험해보세요."

#: ../../docs/tutorials/2d/2d_movement.rst:352
msgid ""
"You can download this sample project here: :download:`2D_movement_demo.zip "
"<files/2D_movement_demo.zip>`"
msgstr ""
"여기에서 이 샘플 프로젝트를 다운할 수 있습닌다: :download:`2D_movement_demo."
"zip <files/2D_movement_demo.zip>`"

#: ../../docs/tutorials/2d/2d_lights_and_shadows.rst:4
msgid "2D lights and shadows"
msgstr "2D 빛(lights)과 그림자(shadows)"

#: ../../docs/tutorials/2d/2d_lights_and_shadows.rst:9
#, fuzzy
msgid ""
"This tutorial explains how the 2D lighting works in the `lights and shadows "
"<https://github.com/godotengine/godot-demo-projects/tree/master/2d/"
"lights_and_shadows>`_ demo project. It begins with a brief description of "
"the resources used in the final demo and then describes how to make a scene "
"like the demo step by step."
msgstr ""
"이번 튜토리얼은 `lights and shadows <https://github.com/godotengine/godot-"
"demo-projects/tree/master/2d/lights_and_shadows>`_ 데모 프로젝트에서 어떻게 "
"2D 조명(lighting)이 작동하는지 설명합니다. 먼저 최종 데모에서 사용된 리소스"
"(resources)의 간략한 설명을 한 다음 단계별로 어떻게 데모처럼 씬을 만드는지 설"
"명합니다."

#: ../../docs/tutorials/2d/2d_lights_and_shadows.rst:16
msgid ""
"All the resources for this tutorial can be found in the `official demo "
"repository <https://github.com/godotengine/godot-demo-projects>`_ on github. "
"I suggest you download it before starting. Alternatively, it can be "
"downloaded from the Project Manager. Launch Godot and in the top bar select "
"\"Templates\" and search for \"2D Lights and Shadows Demo\"."
msgstr ""
"이번 튜토리얼에서 사용된 모든 리소스(resources)는 `공식 데모 저장소 <https://"
"github.com/godotengine/godot-demo-projects>`_ 깃허브(github)에서 찾아볼 수 있"
"습니다. 저는 시작하기 전에 데모를 다운로드 하기를 추천합니다. 프로젝트 매니저"
"에서 다운할 수도 있습니다. Godot을 실행하고 상단의 바에서 \"템플릿\"을 선택해"
"서 \"2D Lights and Shadows Demo\"를 검색합니다."

#: ../../docs/tutorials/2d/2d_lights_and_shadows.rst:24
msgid ""
"For this demo we use four textures: two for the lights, one for the shadow "
"casters, and one for the background. I've included links to them all here if "
"you want to download them separately from the demo."
msgstr ""
"이 데모에서 우리는 4가지 텍스처를 사용할 것입니다. 두 개는 빛, 하나는 그림자 "
"캐스터(shadow casters), 그리고 나머지 하나는 배경입니다. 데모로부터 개별적으"
"로 다운로드하고 싶을까봐 여기에 모든 링크를 포함시켰습니다."

#: ../../docs/tutorials/2d/2d_lights_and_shadows.rst:28
#, fuzzy
msgid ""
"The first is the background image (`background.png <https://raw."
"githubusercontent.com/godotengine/godot-demo-projects/master/2d/"
"lights_and_shadows/background.png>`_) used in the demo. You do not "
"necessarily need a background, but we use one for the demo."
msgstr ""
"첫번째는 데모에서 사용되는 배경 이미지(`bg.png <https://raw."
"githubusercontent.com/godotengine/godot-demo-projects/master/2d/"
"lights_and_shadows/bg.png>`_)입니다. 꼭 배경이 필요한 건 아니지만 우리는 데모"
"에서 이 배경을 사용합니다."

#: ../../docs/tutorials/2d/2d_lights_and_shadows.rst:31
msgid ""
"The second is a plain black image (`caster.png <https://raw."
"githubusercontent.com/godotengine/godot-demo-projects/master/2d/"
"lights_and_shadows/caster.png>`_) to use as our shadow caster object. For a "
"top down game this could be a wall or any other object that casts a shadow."
msgstr ""
"두 번째는 그림자 캐스터 오브젝트로 사용하기 위한 평범한 검은 이미지(`caster."
"png <https://raw.githubusercontent.com/godotengine/godot-demo-projects/"
"master/2d/lights_and_shadows/caster.png>`_)입니다. 탑다운 게임의 경우 그림자"
"를 드리우는 벽이나 다른 오브젝트가 될 수 있습니다."

#: ../../docs/tutorials/2d/2d_lights_and_shadows.rst:35
#, fuzzy
msgid ""
"Next is the light itself (`light.png <https://raw.githubusercontent.com/"
"godotengine/godot-demo-projects/master/2d/lights_and_shadows/light.png>`_). "
"If you click the link you will notice how large it is. The image you use for "
"a light should cover the area you want your light to cover. This image is "
"1024x1024 pixels, so you should use it to cover 1024x1024 pixels in your "
"game."
msgstr ""
"다음은 빛 그 자체(\"light.png <https://raw.githubusercontent.com/godotengine/"
"godot-demo-projects/master/2d/lights_and_shadows/light.png>`_)입니다. 링크를 "
"클릭하면 얼마나 큰지 알 수 있을 것입니다. 빛에 사용하는 이미지는 빛이 덮기를 "
"원하는 영역을 덮어야 합니다. 이 이미지는 1024x1024 픽셀이므로 게임 내 "
"1024x1024픽셀을 덮는 데 사용해야 합니다."

#: ../../docs/tutorials/2d/2d_lights_and_shadows.rst:40
#, fuzzy
msgid ""
"Lastly, we have the spotlight image (`spot.png <https://raw."
"githubusercontent.com/godotengine/godot-demo-projects/master/2d/"
"lights_and_shadows/spot.png>`_). The demo uses a blob to show where the "
"light is and the larger light image to show the effect of the light upon the "
"rest of the scene."
msgstr ""
"마지막으로 스포트라이트 이미지(`spot.png <https://raw.githubusercontent.com/"
"godotengine/godot-demo-projects/master/2d/lights_and_shadows/spot.png>`_)입니"
"다. 데모에서는 블롭(blob)으로 빛이 어디에 있는지 보여주고 큰 빛 이미지는 씬"
"의 나머지 부분에서 빛의 영향을 보여주기 위해 사용합니다."

#: ../../docs/tutorials/2d/2d_lights_and_shadows.rst:52
msgid "The demo uses four different nodes:"
msgstr "이 데모에서는 다음과 같은 네 가지 노드를 사용합니다:"

#: ../../docs/tutorials/2d/2d_lights_and_shadows.rst:49
msgid ":ref:`CanvasModulate <class_CanvasModulate>`"
msgstr ""

#: ../../docs/tutorials/2d/2d_lights_and_shadows.rst:50
msgid ":ref:`Sprite <class_Sprite>`"
msgstr ":ref:`Sprite <class_Sprite>`"

#: ../../docs/tutorials/2d/2d_lights_and_shadows.rst:51
msgid ":ref:`Light2D <class_Light2D>`"
msgstr ":ref:`Light2D <class_Light2D>`"

#: ../../docs/tutorials/2d/2d_lights_and_shadows.rst:52
msgid ":ref:`LightOccluder2D <class_LightOccluder2D>`"
msgstr ""

#: ../../docs/tutorials/2d/2d_lights_and_shadows.rst:54
msgid ""
":ref:`CanvasModulate<class_CanvasModulate>` is used to darken the scene."
msgstr ""
":ref:`CanvasModulate<class_CanvasModulate>` 는 씬을 어둡게 하는데 사용됩니다."

#: ../../docs/tutorials/2d/2d_lights_and_shadows.rst:56
#, fuzzy
msgid ""
":ref:`Sprites <class_Sprite>` are used to display the textures for the light "
"blobs, the background, and for the shadow casters."
msgstr ""
":ref:`Sprites <class_Sprite>` 는 빛 블롭, 배경, 그림자 캐스터의 텍스처를 보여"
"주는 데 사용됩니다."

#: ../../docs/tutorials/2d/2d_lights_and_shadows.rst:59
msgid ""
":ref:`Light2Ds <class_Light2D>` are used to light the scene. The way a light "
"typically works is by adding a selected texture over the rest of the scene "
"to simulate lighting. But it can be used in other ways, for example masking "
"out parts of the scene."
msgstr ""
":ref:`Light2Ds <class_Light2D>` 씬을 비추기 위해 사용됩니다. The way a light "
"typically works is by adding a selected texture over the rest of the scene "
"to simulate lighting. But it can be used in other ways, for example masking "
"out parts of the scene."

#: ../../docs/tutorials/2d/2d_lights_and_shadows.rst:63
msgid ""
":ref:`LightOccluder2Ds <class_LightOccluder2D>` are used to tell the shader "
"which parts of the scene cast shadows. The shadows appear only on areas "
"covered by the :ref:`Light2D <class_Light2D>` and their direction is based "
"on the center of the :ref:`Light <class_Light2D>`."
msgstr ""
":ref:`LightOccluder2Ds <class_LightOccluder2D>` are used to tell the shader "
"which parts of the scene cast shadows. 그림자는 :ref:`Light2D "
"<class_Light2D>` 로 덮여진 부분에만 나타나고 그림자의 방향은 :ref:`Light "
"<class_Light2D>` 의 중심에 기반을 둡니다 ."

#: ../../docs/tutorials/2d/2d_lights_and_shadows.rst:70
#, fuzzy
msgid ""
":ref:`Lights <class_Light2D>` cover the entire extent of their respective "
"Texture. They use additive blending to add the color of their texture to the "
"scene."
msgstr ""
":ref:`lights _light2D` 는 각 텍스처의 전체 범위를 다룹니다. They use "
"additive blending to add the color of their texture to the scene."

#: ../../docs/tutorials/2d/2d_lights_and_shadows.rst:75
msgid ""
":ref:`Lights <class_Light2D>` have four ``Modes``: ``Add``, ``Sub``, "
"``Mix``, and ``Mask``."
msgstr ""
":ref:`Lights <class_Light2D>` 는 네 가지 ``모드`` 를 가집니다: ``Add``, "
"``Sub``, ``Mix``, and ``Mask``."

#: ../../docs/tutorials/2d/2d_lights_and_shadows.rst:77
msgid ""
"``Add`` adds the color of the light texture to the scene. It brightens the "
"area under the light."
msgstr ""
"``Add`` 는 빛 텍스처의 색깔을 씬에 추가합니다. 빛 아래에 놓인 영역을 밝게 합"
"니다."

#: ../../docs/tutorials/2d/2d_lights_and_shadows.rst:79
msgid ""
"``Sub`` subtracts the color of the light from the scene. It darkens the area "
"under the light."
msgstr ""
"``Sub`` 는 씬에서 빛의 색을 빼냅니다. 빛 아래에 놓인 영역을 어둡게 합니다."

#: ../../docs/tutorials/2d/2d_lights_and_shadows.rst:81
msgid ""
"``Mix`` mixes the color of the light with the underlying scene. The "
"resulting brightness is halfway between the color of the light and the color "
"underneath."
msgstr ""
"``믹스`` 는 빛의 색과 밑에 있는 씬을 섞습니다. 결과적인 밝기는 빛의 색과 그 "
"아래의 색 사이의 중간입니다."

#: ../../docs/tutorials/2d/2d_lights_and_shadows.rst:84
msgid ""
"``Mask`` is used to mask out areas that are covered by the light. Masked out "
"areas are hidden or revealed based on the color of the light."
msgstr ""

#: ../../docs/tutorials/2d/2d_lights_and_shadows.rst:87
#, fuzzy
msgid ""
"For the demo the lights have two components, the :ref:`Light "
"<class_Light2D>` itself (which is the effect of the light), and a :ref:"
"`Sprite <class_Sprite>` blob which is an image showing the location of the "
"light source. A child :ref:`Sprite <class_Sprite>` is not necessary to make "
"a :ref:`Light <class_Light2D>` work."
msgstr ""
"데모에서 빛은 두 가지 구성요소를 가집니다. :ref:`Light <class_Light2D>` 그자"
"체 (빛효과) 와 광원의 위치를 보여주는 이미지 :ref:`Sprite <class_Sprite>` 블"
"롭입니다. :ref:`Sprite <class_Sprite>` 자식은 :ref:`Light <class_Light2D>` 만"
"들 필요는 없습니다."

#: ../../docs/tutorials/2d/2d_lights_and_shadows.rst:95
msgid "Shadows"
msgstr "그림자"

#: ../../docs/tutorials/2d/2d_lights_and_shadows.rst:97
#, fuzzy
msgid ""
"Shadows are made by intersecting a :ref:`Light <class_Light2D>` with a :ref:"
"`LightOccluder2D <class_LightOccluder2D>`."
msgstr ""
"그림자는 :ref:`Light <class_Light2D>` 와 :ref:`LightOccluder2D "
"<class_LightOccluder2D>` 를 교차하여 만들어집니다."

#: ../../docs/tutorials/2d/2d_lights_and_shadows.rst:99
msgid ""
"By default shadows are turned off. To turn them on click on the :ref:`Light "
"<class_Light2D>` and under the Shadows section check ``Enabled``."
msgstr ""
"기본적으로 그림자는 꺼져 있습니다. 이것을 키려면 :ref:`Light "
"<class_Light2D>` 를 클릭해서 그림자 부분에 있는 ``Enabled`` 를 체크하세요."

#: ../../docs/tutorials/2d/2d_lights_and_shadows.rst:102
msgid ""
"In the demo we are using a :ref:`Sprite <class_Sprite>` with a Texture on it "
"to make the \"Shadow Casters\", but in reality all you need is a couple of :"
"ref:`LightOccluder2Ds <class_LightOccluder2D>`. By itself the :ref:"
"`LightOccluder2D <class_LightOccluder2D>` looks like a dark spot and in this "
"demo the :ref:`Sprite <class_Sprite>` is just a black square."
msgstr ""
"데모에서 \"그림자 캐스터\" 를 만들 때 텍스처로 :ref:`Sprite <class_Sprite>` "
"를 사용하고 있지만 실제로는 :ref:`LightOccluder2Ds 만 있으면 됩니다"
"<class_LightOccluder2D>`. :ref:`LightOccluder2D <class_LightOccluder2D>` 는 "
"그 자체로 어두운 장소로 보이고 이 데모에서 :ref:`Sprite <class_Sprite>` 는 단"
"지 검정 사각형입니다."

#: ../../docs/tutorials/2d/2d_lights_and_shadows.rst:110
msgid ""
"Now that we have covered the basics of the nodes being used, we can now walk "
"step by step through the process of making a scene like the one found in the "
"demo."
msgstr ""
"사용 중인 노드의 기본을 다뤘으니 이제 데모에서 보여지는 것과 같은 장면을 만드"
"는 과정을 차근차근 걸을 수 있게 되었습니다."

#: ../../docs/tutorials/2d/2d_lights_and_shadows.rst:113
#, fuzzy
msgid ""
"First add a :ref:`Sprite <class_Sprite>` and set its texture to the "
"`background image <https://raw.githubusercontent.com/godotengine/godot-demo-"
"projects/master/2d/lights_and_shadows/background.png>`_. For your game this "
"can be any background you choose. For this style of shadow it is most likely "
"to be a floor texture."
msgstr ""
"첫번째로 :ref:`Sprite <class_Sprite>` 를 추가하고 스프라이트 텍스처는 "
"`background image <https://raw.githubusercontent.com/godotengine/godot-demo-"
"projects/master/2d/lights_and_shadows/bg.png>` 로 설정합니다. 당신의 게임을 "
"위해서라면 아무 배경이나 선택해도 됩니다. 이런 그림자 유형은 대부분 바닥 텍스"
"처일 가능성이 가장 높습니다."

#: ../../docs/tutorials/2d/2d_lights_and_shadows.rst:118
msgid ""
"Next create three :ref:`Light2D's <class_Light2D>` and set their textures to "
"the `light image <https://raw.githubusercontent.com/godotengine/godot-demo-"
"projects/master/2d/lights_and_shadows/light.png>`_. You can alter their "
"color in the top section. By default shadows are turned off and the ``mode`` "
"is set to ``add``. This means that each light adds its own color to whatever "
"is underneath."
msgstr ""
"다음으로 :ref:`Light2D's <class_Light2D>` 를 3개 만들고 텍스처를 `빛 이미지 "
"<https://raw.githubusercontent.com/godotengine/godot-demo-projects/master/2d/"
"lights_and_shadows/light.png>`_로 설정하세요. 빛의 색깔은 상단 부분에서 바꿀 "
"수 있습니다. 기본적으로 그림자 옵션은 꺼지고 모드는 ``add`` 로 설정됩니다. "
"``add`` 는 각각의 빛이 밑에 있는 모든 것에 고유의 색을 더하는 것을 의미합니"
"다."

#: ../../docs/tutorials/2d/2d_lights_and_shadows.rst:124
#, fuzzy
msgid ""
"Next add a child :ref:`Sprite <class_Sprite>` to each of the :ref:`Light "
"<class_Light2D>` nodes, and set the :ref:`Sprite's <class_Sprite>` texture "
"to the `blob image <https://raw.githubusercontent.com/godotengine/godot-demo-"
"projects/master/2d/lights_and_shadows/spot.png>`_. Each of these should stay "
"centered on the :ref:`Light <class_Light2D>` node. The blob is the image of "
"the light itself while the :ref:`Light <class_Light2D>` shows the effect "
"that the light has on the scene. The :ref:`LightOccluder2D's "
"<class_LightOccluder2D>` will treat the position of the light as the center "
"of the :ref:`Light <class_Light2D>` node, which is why we want the blob to "
"be centered on its parent :ref:`Light <class_Light2D>`."
msgstr ""
"다음으로 각 :ref:`Light <class_Light2D>` 노드에 자식 :ref:`Sprite "
"<class_Sprite>` 를 추가하고 :ref:`Sprite <class_Sprite>` 텍스처를 `블롭 이미"
"지 <https://raw.githubusercontent.com/godotengine/godot-demo-projects/"
"master/2d/lights_and_shadows/spot.png>`_로 설정합니다. 각 스프라이트는 :ref:"
"`Light <class_Light2D>` 노드 중앙에 위치해야 합니다. 블롭은 빛 그자체 이미지"
"인 반면 :ref:`Light <class_Light2D>` 는 빛이 씬에 영향을 미치는 효과를 보여줍"
"니다. :ref:`LightOccluder2D's <class_LightOccluder2D>` 는 :ref:`Light "
"<class_Light2D>` 노드의 중심으로서 빛의 위치를 다루므로 :ref:`Light "
"<class_Light2D>` 의 블롭이 센터에 위치해야 하는 이유입니다."

#: ../../docs/tutorials/2d/2d_lights_and_shadows.rst:133
msgid ""
"At the time of writing, 3.0 is the stable release version. The 3.1 "
"development branch contains many changes to the animation system, so the "
"animations in the demo will not be covered here. See :ref:"
"`doc_introduction_2d_animation` for more information."
msgstr ""
"집필 당시 3.0은 안정적인 릴리스 버전입니다. 3.1 개발 분기에는 애니메이션 시스"
"템에 대한 많은 변경사항이 포함되어 있어 데모에 나오는 애니메이션은 여기서 다"
"루지 않을 것입니다. 자세한 내용은 :ref:`doc_introduction_2d_animation` 를 참"
"조하세요."

#: ../../docs/tutorials/2d/2d_lights_and_shadows.rst:137
#, fuzzy
msgid ""
"Right now the scene should look too bright. This is because all three lights "
"are adding color to the scene. This is why the demo uses a :ref:"
"`CanvasModulate <class_CanvasModulate>` in the scene. The :ref:"
"`CanvasModulate <class_CanvasModulate>` multiples the entire viewport by a "
"specific color."
msgstr ""
"지금 당장은 씬이 너무 밝게 보일 것입니다. 세 개의 빛이 모두 씬에 색을 더하고 "
"있기 때문입니다. 이 때문에 데모에서는 씬에서 :ref:`CanvasModulate "
"<class_CanvasModulate>`  를 사용합니다. :ref:`CanvasModulate "
"<class_CanvasModulate>` 는 전체 뷰포트에 특정 색상을 곱합니다."

#: ../../docs/tutorials/2d/2d_lights_and_shadows.rst:141
msgid ""
"Add a :ref:`CanvasModulate <class_CanvasModulate>` to the scene and set its "
"color to ``rgb(70, 70, 70)``. This will make the scene sufficiently dark to "
"see the effects of the lights distinctly."
msgstr ""
":ref:`CanvasModulate <class_CanvasModulate>` 를 추가하고 색깔을 ``rgb(70, "
"70, 70)`` 으로 설정하세요. 이렇게 하면 빛의 효과를 뚜렷하게 볼 수 있을 정도"
"로 씬이 어두워집니다."

#: ../../docs/tutorials/2d/2d_lights_and_shadows.rst:146
msgid "Now we add the shadow casters."
msgstr "지금부터는 그림자 캐스터를 추가합니다."

#: ../../docs/tutorials/2d/2d_lights_and_shadows.rst:148
msgid ""
"The demo uses a :ref:`Node <class_Node2D>` named \"casters\" to organize the "
"shadow casters. Add a :ref:`Node2D <class_Node2D>` to the scene. It will be "
"used to group all the shadow casters together. This way we can show and hide "
"them all at the same time."
msgstr ""
"데모에서는 그림자 캐스터를 정리하기 위해 \"casters\" 라는 이름을 가진 :ref:"
"`Node <class_Node2D>` 를 사용합니다. :ref:`Node2D <class_Node2D>` 를 씬에 추"
"가하세요. 이 노드는 모든 그림자 캐스터를 함께 묶는 데 사용됩니다. 이 방법은 "
"동시에 모든 그림자 캐스터를 보여주거나 숨길 수 있습니다."

#: ../../docs/tutorials/2d/2d_lights_and_shadows.rst:152
#, fuzzy
msgid ""
"Each shadow caster is made of a :ref:`Sprite <class_Sprite>`, with a :ref:"
"`LightOccluder2D <class_LightOccluder2D>` child. For the demo the :ref:"
"`Sprite <class_Sprite>` has a texture set to the `caster image <https://raw."
"githubusercontent.com/godotengine/godot-demo-projects/master/2d/"
"lights_and_shadows/caster.png>`_ and nothing else. The child :ref:"
"`LightOccluder2D <class_LightOccluder2D>` is where all the magic happens. In "
"a game the :ref:`Sprite <class_Sprite>` could be more than a black box; it "
"could be an image of whatever object is casting the shadow: a wall, a "
"magical chest, or anything else."
msgstr ""
"각각의 그림자 캐스터는 :ref:`Sprite <class_Sprite>` 로 만들어졌고 :ref:"
"`LightOccluder2D <class_LightOccluder2D>` 를 자식으로 가집니다. 데모에서는 :"
"ref:`Sprite <class_Sprite>` 가 텍스처로 `caster image <https://raw."
"githubusercontent.com/godotengine/godot-demo-projects/master/2d/"
"lights_and_shadows/caster.png>` 설정하고 다른 것은 없습니다. 자식 :ref:"
"`LightOccluder2D <class_LightOccluder2D>` 는 마법이 일어나는 장소입니다. 게임"
"에서 :ref:`Sprite <class_Sprite>` 는 검정색 상자 이상일 수 있습니다; 스프라이"
"트는 무슨 물체가 됐건 그림자가 드리우는 이미지가 될 수 있습니다: 벽, 마법 상"
"자 등."

#: ../../docs/tutorials/2d/2d_lights_and_shadows.rst:160
#, fuzzy
msgid ""
":ref:`LightOccluder2Ds <class_LightOccluder2D>` tell the game what shape the "
"occluder has. They hold an :ref:`OccluderPolygon2D "
"<class_OccluderPolygon2D>`, which is a container for a polygon and some "
"other information. For this demo, since our wall is a square, we set "
"``Polygon`` to a square. The other default settings are fine."
msgstr ""
":ref:`LightOccluder2Ds <class_LightOccluder2D>` 는 가리개(occluder) 모양이 무"
"엇인지 게임에게 알려줍니다. 이 노드들은 폴리곤과 약간의 다른 정보를 위한 컨테"
"이너인 :ref:`OccluderPolygon2D <class_OccluderPolygon2D>` 를 가지고 있습니"
"다. 데모에서 벽이 사각형이기 때문에 우리는 ``Polygon`` 사각형으로 설정합니"
"다. 다른 기본 설정은 괜찮습니다."

#: ../../docs/tutorials/2d/2d_lights_and_shadows.rst:165
#, fuzzy
msgid ""
"The first setting, ``Closed`` can be either ``on`` or ``off``. A closed "
"polygon occludes light coming from all directions. An open polygon only "
"occludes light from one direction"
msgstr ""
"첫 번째 설정 ``Closed``\\ 는 켜거나 끌 수 있습니다.. 닫힌 폴리곤은 모든 방향"
"에서 오는 빛을 차단합니다. 열린 폴리곤은 한 방향에서만 오는 빛을 차단합니다"

#: ../../docs/tutorials/2d/2d_lights_and_shadows.rst:168
#, fuzzy
msgid ""
"``Cull Mode`` lets you select which direction gets culled. The default is "
"``Disabled``, meaning the occluder will cast a shadow no matter which side "
"the light is on. The other two settings ``Clockwise`` and ``Counter-"
"Clockwise`` refer to the winding order of the vertices of the polygon. The "
"winding order is used to determine which side of the line is inside the "
"polygon. Only outward facing lines cast shadows."
msgstr ""
"``Cull Mode`` 는 도려낼 방향을 선택할 수 있습니다. 기본값은 ``Disabled`` 입니"
"다.어느 쪽에 빛이 켜지든 가리개는 그림자를 드리울 수 있음을 의미합니다. 다른 "
"두 값인``시계방향(Clockwise)`` 와 ``반시계방향(Counter-Clockwise)`` 폴리곤 꼭"
"짓점의 구불구불한 순서를 나타냅니다. The winding order is used to determine "
"which side of the line is inside the polygon. Only outward facing lines cast "
"shadows."

#: ../../docs/tutorials/2d/2d_lights_and_shadows.rst:173
msgid ""
"To illustrate the difference, here is an image of a :ref:`LightOccluder2D "
"<class_LightOccluder2D>` with ``Closed`` set to ``off`` in the "
"corresponding :ref:`OccluderPolygon2D <class_OccluderPolygon2D>`, so that "
"the lines of the polygon can be seen:"
msgstr ""

#: ../../docs/tutorials/2d/2d_lights_and_shadows.rst:179
msgid "``Cull Mode`` is set to ``Disabled``. All three lines cast shadows."
msgstr ""

#: ../../docs/tutorials/2d/2d_lights_and_shadows.rst:183
msgid ""
"``Cull Mode`` is set to ``Clockwise``. Only the top and right lines cast "
"shadows."
msgstr ""

#: ../../docs/tutorials/2d/2d_lights_and_shadows.rst:187
msgid ""
"``Cull Mode`` is set to ``Counter-Clockwise``. Only the bottom line casts a "
"shadow. If ``Closed`` was set to ``on`` there would be an additional "
"vertical line on the left which would cast a shadow as well."
msgstr ""

#: ../../docs/tutorials/2d/2d_lights_and_shadows.rst:191
#, fuzzy
msgid ""
"When you have added the :ref:`LightOccluder2Ds <class_LightOccluder2D>` the "
"shadows still won't appear. You need to go back into the :ref:`Light2Ds "
"<class_Light2D>` and under the Shadow section set ``Enable`` to ``on``. This "
"turns on shadows with hard edges like in the image below."
msgstr ""
":ref:`LightOccluder2Ds <class_LightOccluder2D>` 를 추가해도 여전히 그림자가 "
"나타나지 않을 것입니다. :ref:`Light2Ds <class_Light2D>` 로 돌아가서 그림자 부"
"분에서 ``Enable`` 를 ``on`` 으로 설정하세요. 아래의 이미지와 같이 딱딱한 모서"
"리를 가진 그림자가 켜집니다."

#: ../../docs/tutorials/2d/2d_lights_and_shadows.rst:197
msgid ""
"To give the shadows that nice, soft edge look we set the variables "
"``filter``, ``filter smooth``, and ``gradient length``. Godot supports "
"`Percentage Closer Filtering <https://developer.nvidia.com/gpugems/GPUGems/"
"gpugems_ch11.html>`_ (PCF), which takes multiple samples of the shadow map "
"around a pixel and blurs them to create a smooth shadow effect. The higher "
"the number of samples the smoother the shadow will look, but the slower it "
"will run. That is why Godot provides 3-13 samples by default and allows you "
"to choose. The demo uses PCF7."
msgstr ""

#: ../../docs/tutorials/2d/2d_lights_and_shadows.rst:206
msgid ""
"This is a shadow rendered with the demo's settings. ``gradient length`` is "
"set to ``1.3``, ``filter smooth`` is set to ``11.1``, and ``filter`` is set "
"to ``PCF7``."
msgstr ""

#: ../../docs/tutorials/2d/2d_lights_and_shadows.rst:211
msgid ""
"``filter`` is set to ``PCF13``. Notice how the shadow becomes wider, this is "
"because the distance between samples is based on the variable ``filter "
"smooth``."
msgstr ""

#: ../../docs/tutorials/2d/2d_lights_and_shadows.rst:214
msgid ""
"In order to make use of filtering you need to set the ``filter smooth`` "
"variable. This dictates how far apart the samples are. If you want the soft "
"area to extend quite far, you can increase the size of ``filter smooth``. "
"However, with few samples and a large filter smooth, you can see lines "
"forming between the samples."
msgstr ""

#: ../../docs/tutorials/2d/2d_lights_and_shadows.rst:221
msgid "``filter smooth`` is set to ``30``."
msgstr ""

#: ../../docs/tutorials/2d/2d_lights_and_shadows.rst:223
msgid ""
"The different :ref:`Light <class_Light2D>` nodes in the demo use different "
"values for filter smooth. Play around with it and see what you like."
msgstr ""

#: ../../docs/tutorials/2d/2d_lights_and_shadows.rst:228
msgid "``filter smooth`` is set to ``0``."
msgstr ""

#: ../../docs/tutorials/2d/2d_lights_and_shadows.rst:230
msgid ""
"Lastly, there is the variable ``gradient length``. For some smooth shadows "
"it is preferable not to have the shadow start immediately on the object, as "
"this produces a hard edge. The gradient length variable creates a smooth "
"gradient to begin the shadow to reduce the effect of the hard edge."
msgstr ""

#: ../../docs/tutorials/2d/2d_lights_and_shadows.rst:236
msgid "``gradient length`` is set to ``0``."
msgstr ""

#: ../../docs/tutorials/2d/2d_lights_and_shadows.rst:240
msgid "``gradient length`` is set to ``10``."
msgstr ""

#: ../../docs/tutorials/2d/2d_lights_and_shadows.rst:242
msgid ""
"You will need to play around with the options a bit to find settings that "
"suit your project. There is no right solution for everyone, which is why "
"Godot provides so much flexibility. Just keep in mind that the higher "
"``filter`` set the more expensive the shadows will be."
msgstr ""

#: ../../docs/tutorials/2d/2d_meshes.rst:4
msgid "2D meshes"
msgstr "2D 메시"

#: ../../docs/tutorials/2d/2d_meshes.rst:9
#, fuzzy
msgid ""
"In 3D, meshes are used to display the world. In 2D, they are rare as images "
"are used more often. Godot's 2D engine is a pure two dimensional engine, so "
"it can't really display 3D meshes directly (although it can be done via "
"``Viewport`` and ``ViewportTexture``)."
msgstr ""
"3D에서 메시는 세계를 보여주기 위해 사용됩니다. 2D에서는 이미지가 자주 사용되"
"기 때문에 희귀합니다. Godot의 2D 엔진은 순수한 2차원 엔진이기 때문에 직접적으"
"로 3D 메시를 실제로 보여줄 수는 없습니다(``Viewport`` 와 ``ViewportTexture`` "
"를 통해 할 수 있지만)."

#: ../../docs/tutorials/2d/2d_meshes.rst:13
msgid ""
"If you are interested in displaying 3D meshes on a 2D viewport, see the :ref:"
"`doc_viewport_as_texture` tutorial."
msgstr ""
"만약 3D 메시를 2D 뷰포트에 보여주고 싶은 경우 :ref:`doc_viewport_as_texture` "
"튜토리얼을 참고하세요."

#: ../../docs/tutorials/2d/2d_meshes.rst:15
msgid ""
"2D meshes are meshes that contain two dimensional geometry (Z can be omitted "
"or ignored) instead of 3D. You can experiment creating them yourself using "
"``SurfaceTool`` from code and displaying them in a ``MeshInstance2D`` node."
msgstr ""

#: ../../docs/tutorials/2d/2d_meshes.rst:18
msgid ""
"Currently, the only way to generate a 2D mesh within the editor is by either "
"importing an OBJ file as a mesh, or converting it from a Sprite."
msgstr ""

#: ../../docs/tutorials/2d/2d_meshes.rst:21
msgid "Optimizing pixels drawn"
msgstr ""

#: ../../docs/tutorials/2d/2d_meshes.rst:23
msgid ""
"This workflow is useful for optimizing 2D drawing in some situations. When "
"drawing large images with transparency, Godot will draw the whole quad to "
"the screen. The large transparent areas will still be drawn."
msgstr ""

#: ../../docs/tutorials/2d/2d_meshes.rst:25
msgid ""
"This can affect performance, especially on mobile devices, when drawing very "
"large images (generally screen sized), or layering multiple images on top of "
"each other with large transparent areas (for example, when using "
"``ParallaxBackground``)."
msgstr ""

#: ../../docs/tutorials/2d/2d_meshes.rst:28
msgid ""
"Converting to a mesh will ensure that only the opaque parts will be drawn "
"and the rest will be ignored."
msgstr ""

#: ../../docs/tutorials/2d/2d_meshes.rst:31
msgid "Converting Sprites to 2D meshes"
msgstr "스프라이트를 2D 메시로 변환하기"

#: ../../docs/tutorials/2d/2d_meshes.rst:33
msgid ""
"You can take advantage of this optimization by converting a ``Sprite`` to a "
"``MeshInstance2D``. Start with an image that contains large amounts of "
"transparency on the edges, like this tree:"
msgstr ""

#: ../../docs/tutorials/2d/2d_meshes.rst:38
#, fuzzy
msgid "Put it in a ``Sprite`` and select \"Convert to 2D Mesh\" from the menu:"
msgstr "``Sprite`` 에 넣고 메뉴에서 \"Convert to 2D Mesh\" 를 선택하세요"

#: ../../docs/tutorials/2d/2d_meshes.rst:42
#, fuzzy
msgid ""
"A dialog will appear, showing a preview of how the 2D mesh will be created:"
msgstr ""
"2D 메시가 어떻게 생성될 지에 대한 미리보기를 보여주는 대화 상자가 나타날 겁니"
"다."

#: ../../docs/tutorials/2d/2d_meshes.rst:46
#, fuzzy
msgid ""
"The default values are good enough for many cases, but you can change growth "
"and simplification according to your needs:"
msgstr ""
"기본값은 많은 경우에 충분하지만 필요에 따라 성장(growth)과 단순화"
"(simplification)를 변경할 수 있습니다."

#: ../../docs/tutorials/2d/2d_meshes.rst:50
msgid ""
"Finally, push the ``Convert 2D Mesh`` button and your Sprite will be "
"replaced:"
msgstr "마지막으로 ``Convert 2D Mesh`` 버튼을 누르면 스프라이트가 교체됩니다:"

#: ../../docs/tutorials/2d/custom_drawing_in_2d.rst:4
#, fuzzy
msgid "Custom drawing in 2D"
msgstr "2D에서 사용자 임의 그리기"

#: ../../docs/tutorials/2d/custom_drawing_in_2d.rst:7
#: ../../docs/tutorials/io/encrypting_save_games.rst:7
msgid "Why?"
msgstr "왜?"

#: ../../docs/tutorials/2d/custom_drawing_in_2d.rst:9
#, fuzzy
msgid ""
"Godot has nodes to draw sprites, polygons, particles, and all sorts of "
"stuff. For most cases, this is enough; but not always. Before crying in "
"fear, angst, and rage because a node to draw that specific *something* does "
"not exist... it would be good to know that it is possible to easily make any "
"2D node (be it :ref:`Control <class_Control>` or :ref:`Node2D "
"<class_Node2D>` based) draw custom commands. It is *really* easy to do it, "
"too."
msgstr ""
"Godot은 스프라이트, 폴리곤, 입자 등을 그리기 위한 노드를 가지고 있습니다. 대"
"부분 경우에 충분하지만 항상 그렇지는 않습니다. 두려움, 불안, 분노 속에 울기 "
"전에 특별한 *무언가* 를 그리는 노드가 존재하지 않기 때문에...  2D 노드( :ref:"
"`Control <class_Control>` 또는 :ref:`Node2D <class_Node2D>` 기반)가 사용자 지"
"정 명령을 쉽게 그릴 수 있는 것을 알면 좋을 것입니다. 또한 하는 것도 *진짜* 쉽"
"습니다."

#: ../../docs/tutorials/2d/custom_drawing_in_2d.rst:17
msgid "But..."
msgstr ""

#: ../../docs/tutorials/2d/custom_drawing_in_2d.rst:19
msgid ""
"Custom drawing manually in a node is *really* useful. Here are some examples "
"why:"
msgstr ""
"노드에서 수동으로 사용자 임의 그림은 *진짜* 유용합니다. 여기 왜 그런지 몇 가"
"지 예가 있습니다:"

#: ../../docs/tutorials/2d/custom_drawing_in_2d.rst:22
#, fuzzy
msgid ""
"Drawing shapes or logic that is not handled by nodes (example: making a node "
"that draws a circle, an image with trails, a special kind of animated "
"polygon, etc)."
msgstr ""
"노드에서 처리되지 않는 도형 또는 논리 그리기 (예: 원을 그리는 노드, 이미지 자"
"국, 특별한 종류의 움직이는 폴리곤 등 만들기)."

#: ../../docs/tutorials/2d/custom_drawing_in_2d.rst:25
#, fuzzy
msgid ""
"Visualizations that are not that compatible with nodes: (example: a tetris "
"board). The tetris example uses a custom draw function to draw the blocks."
msgstr ""
"노드와 호환되지 않는 시각화: (예: 테트리스 보드). 테트리스 예제는 블록을 그리"
"기 위해 사용자 정의 그리기 함수를 사용합니다."

#: ../../docs/tutorials/2d/custom_drawing_in_2d.rst:28
#, fuzzy
msgid ""
"Drawing a large number of simple objects. Custom drawing avoids the overhead "
"of using nodes which makes it less memory intensive and potentially faster."
msgstr ""
"많은 양의 단순 물체 그리기. 사용자 정의 그림을 사용하면 메모리 집약도가 낮아"
"지고 잠재적으로 속도가 빨라져 노드 사용의 오버헤드를 방지할 수 있습니다."

#: ../../docs/tutorials/2d/custom_drawing_in_2d.rst:31
msgid ""
"Making a custom UI control. There are plenty of controls available, but it's "
"easy to run into the need to make a new, custom one."
msgstr ""
"사용자 정의 UI 컨트롤 만들기. 사용할 수 있는 컨트롤은 많지만, 새롭고 맞춤화"
"된 컨트롤을 만들어야 할 필요성에 부딪치기 쉽습니다."

#: ../../docs/tutorials/2d/custom_drawing_in_2d.rst:35
msgid "OK, how?"
msgstr ""

#: ../../docs/tutorials/2d/custom_drawing_in_2d.rst:37
msgid ""
"Add a script to any :ref:`CanvasItem <class_CanvasItem>` derived node, like :"
"ref:`Control <class_Control>` or :ref:`Node2D <class_Node2D>`. Then override "
"the ``_draw()`` function."
msgstr ""
":ref:`CanvasItem <class_CanvasItem>` 를 상속받는 :ref:`Control "
"<class_Control>` 또는 :ref:`Node2D <class_Node2D>` 와 같은 노드에 스크립트를 "
"추가하세요. 그런 다음 ``_draw()`` 함수를 재정의하세요."

#: ../../docs/tutorials/2d/custom_drawing_in_2d.rst:57
#, fuzzy
msgid ""
"Draw commands are described in the :ref:`CanvasItem <class_CanvasItem>` "
"class reference. There are plenty of them."
msgstr ""
"그리기 명령은 :ref:`CanvasItem <class_CanvasItem>` 클래스 참고에 설명되어 있"
"습니다. 많은 양의 명령이 있습니다."

#: ../../docs/tutorials/2d/custom_drawing_in_2d.rst:61
msgid "Updating"
msgstr ""

#: ../../docs/tutorials/2d/custom_drawing_in_2d.rst:63
msgid ""
"The ``_draw()`` function is only called once, and then the draw commands are "
"cached and remembered, so further calls are unnecessary."
msgstr ""
"``_draw()`` 함수는 단 한 번만 호출하고, 그 다음에는 그리기 명령을 캐싱하여 기"
"억하므로 추가 호출은 불필요합니다."

#: ../../docs/tutorials/2d/custom_drawing_in_2d.rst:66
#, fuzzy
msgid ""
"If re-drawing is required because a state or something else changed, simply "
"call :ref:`CanvasItem.update() <class_CanvasItem_method_update>` in that "
"same node and a new ``_draw()`` call will happen."
msgstr ""
"상태나 다른 것이 변경되어 다시 그리기가 필요한 경우 간단하게 같은 노드에서 :"
"ref:`CanvasItem.update() <class_CanvasItem_method_update>` 를 호출하면 새로"
"운 ``_draw()`` 호출이 발생합니다."

#: ../../docs/tutorials/2d/custom_drawing_in_2d.rst:70
msgid ""
"Here is a little more complex example, a texture variable that will be "
"redrawn if modified:"
msgstr ""
"여기 좀 더 복잡한 예가 있는데 텍스처 변수는 수정하면 다시 그려지게 됩니다:"

#: ../../docs/tutorials/2d/custom_drawing_in_2d.rst:114
#, fuzzy
msgid ""
"In some cases, it may be desired to draw every frame. For this, just call "
"``update()`` from the ``_process()`` callback, like this:"
msgstr ""
"In some cases, it may be desired to draw every frame. For this, just call "
"``update()`` from the ``_process()`` callback, like this:\n"
"어떤 경우에는 모든 프레임을 그리는 것이 바람직할 수 있습니다. 이를 위해 "
"``_process()`` 콜백에서 다음과 같이 ``update()`` 를 호출하세요."

#: ../../docs/tutorials/2d/custom_drawing_in_2d.rst:146
msgid "An example: drawing circular arcs"
msgstr "예제: 원호 그리기"

#: ../../docs/tutorials/2d/custom_drawing_in_2d.rst:148
msgid ""
"We will now use the custom drawing functionality of the Godot Engine to draw "
"something that Godot doesn't provide functions for. As an example, Godot "
"provides a ``draw_circle()`` function that draws a whole circle. However, "
"what about drawing a portion of a circle? You will have to code a function "
"to perform this and draw it yourself."
msgstr ""
"이제 Godot 엔진의 사용자 정의 그리기 기능을 사용하여 Godot이 제공하지 않는 기"
"능을 그릴 겁니다. 예를 들어, Godot은 전체 원을 그리는 ``draw_circle()`` 함수"
"를 제공합니다. 하지만 원의 일부를 그리는 것은 어떨까요? 이것을 수행하려면 함"
"수를 코드화해서 직접 그려야 할 것입니다."

#: ../../docs/tutorials/2d/custom_drawing_in_2d.rst:154
msgid "Arc function"
msgstr "호(Arc) 함수"

#: ../../docs/tutorials/2d/custom_drawing_in_2d.rst:156
msgid ""
"An arc is defined by its support circle parameters, that is, the center "
"position and the radius. The arc itself is then defined by the angle it "
"starts from and the angle at which it stops. These are the 4 arguments that "
"we have to provide to our drawing function. We'll also provide the color "
"value, so we can draw the arc in different colors if we wish."
msgstr ""
"호는 보조하는 원 매개변수, 즉 중심 위치와 반지름에 의해 정의됩니다. 그 다음, "
"호 자체는 시작하는 각도와 정지하는 각도에 의해 정의됩니다. 이것들은 우리가 그"
"리기 함수에 제공해야 하는 네 가지 인수입니다. 색 값도 제공해서 원하면 다른 색"
"으로 호를 그릴 수 있을 겁니다."

#: ../../docs/tutorials/2d/custom_drawing_in_2d.rst:161
#, fuzzy
msgid ""
"Basically, drawing a shape on the screen requires it to be decomposed into a "
"certain number of points linked from one to the next. As you can imagine, "
"the more points your shape is made of, the smoother it will appear, but the "
"heavier it will also be in terms of processing cost. In general, if your "
"shape is huge (or in 3D, close to the camera), it will require more points "
"to be drawn without it being angular-looking. On the contrary, if your shape "
"is small (or in 3D, far from the camera), you may decrease its number of "
"points to save processing costs; this is known as *Level of Detail (LoD)*. "
"In our example, we will simply use a fixed number of points, no matter the "
"radius."
msgstr ""
"기본적으로 화면에 도형을 그리면 어느 한 점에서 다른 점으로 연결된 선이 일정"
"한 수의 점으로 분해될 것을 요구합니다. 상상할 수 있듯이 도형의 점이 많아질수"
"록 부드러워지지만 처리 비용 관해서는 무거워질 것입니다. 일반적으로 만약 당신"
"의 도형이 거대하다면(또는 3D에서 카메라에서 가까운) 그것은 각진 모양이 없이 "
"더 많은 점을 그려야 할 것입니다. 반대로 모양이 작으면(또는 3D에서 카메라에서 "
"멀리 떨어진), 처리 비용을 절감하기 위해 점의 수를 줄일 수 있습니다. 이를 "
"*Level of Detail(LoD)* 라고 합니다. 우리의 예에서는 우리는 반지름에 상관 없"
"이 단지 정해진 수의 점을 사용할 겁니다."

#: ../../docs/tutorials/2d/custom_drawing_in_2d.rst:201
msgid ""
"Remember the number of points our shape has to be decomposed into? We fixed "
"this number in the ``nb_points`` variable to a value of ``32``. Then, we "
"initialize an empty ``PoolVector2Array``, which is simply an array of "
"``Vector2``\\ s."
msgstr ""
"우리 도형이 몇 개의 점으로 분해되어야 하는지 기억하시나요? 우리는 이 수를 "
"``nb_points`` 변수에 ``32`` 값으로 정합니다. 그 다음 우리는 빈 "
"``PoolVector2Array`` 를 초기화합니다. 그냥 ``Vector2`` 의 배열입니다."

#: ../../docs/tutorials/2d/custom_drawing_in_2d.rst:205
#, fuzzy
msgid ""
"The next step consists of computing the actual positions of these 32 points "
"that compose an arc. This is done in the first for-loop: we iterate over the "
"number of points for which we want to compute the positions, plus one to "
"include the last point. We first determine the angle of each point, between "
"the starting and ending angles."
msgstr ""
"다음 단계는 호를 구성하는 32개 점의 실제 위치를 계산하는 것으로 구성됩니다. "
"이것은 첫 번째 for 반복문에서 이루어집니다. 위치를 계산할 점의 수와 하나를 더"
"해서 마지막 점까지 포함시킨 점의 수를 반복합니다. 우리는 먼저 출발 각도와 끝 "
"각도로 각 지점의 각도를 결정합니다."

#: ../../docs/tutorials/2d/custom_drawing_in_2d.rst:210
msgid ""
"The reason why each angle is decreased by 90° is that we will compute 2D "
"positions out of each angle using trigonometry (you know, cosine and sine "
"stuff...). However, to be simple, ``cos()`` and ``sin()`` use radians, not "
"degrees. The angle of 0° (0 radian) starts at 3 o'clock, although we want to "
"start counting at 12 o'clock. So we decrease each angle by 90° in order to "
"start counting from 12 o'clock."
msgstr ""
"각각의 각도가 90° 씩 줄어드는 이유는 각 각도를 삼각법을 사용하여 2D 위치를 계"
"산하기 때문입니다(코사인과 사인을 알아야 합니다). 그러나 간단히 말하면 "
"``cos()`` 와 ``sin()`` 는 각도가 아니라 라디안을 사용합니다.  0°의 각도(0 라"
"디안)는 3시 방향에서 시작합니다(우리는 12시 방향에서 세기를 원하지만). 그래"
"서 12시 방향에서부터 세기 위해 각각의 각도를 90° 씩 줄입니다."

#: ../../docs/tutorials/2d/custom_drawing_in_2d.rst:216
msgid ""
"The actual position of a point located on a circle at angle ``angle`` (in "
"radians) is given by ``Vector2(cos(angle), sin(angle))``. Since ``cos()`` "
"and ``sin()`` return values between -1 and 1, the position is located on a "
"circle of radius 1. To have this position on our support circle, which has a "
"radius of ``radius``, we simply need to multiply the position by ``radius``. "
"Finally, we need to position our support circle at the ``center`` position, "
"which is performed by adding it to our ``Vector2`` value. Finally, we insert "
"the point in the ``PoolVector2Array`` which was previously defined."
msgstr ""

#: ../../docs/tutorials/2d/custom_drawing_in_2d.rst:224
#, fuzzy
msgid ""
"Now, we need to actually draw our points. As you can imagine, we will not "
"simply draw our 32 points: we need to draw everything that is between each "
"of them. We could have computed every point ourselves using the previous "
"method, and drew it one by one. But this is too complicated and inefficient "
"(except if explicitly needed), so we simply draw lines between each pair of "
"points. Unless the radius of our support circle is big, the length of each "
"line between a pair of points will never be long enough to see them. If that "
"were to happen, we would simply need to increase the number of points."
msgstr ""
"이제 우리는 점들을 실제로 그려야 합니다. 우리는 간단히 32개의 점을 그리지 못"
"합니다. 각각의 점들 사이를 모두 그려야 합니다. 우리는 이전 메서드를 이용하여 "
"계산된 점들을 모두 하나씩 이어 그릴 수 있었습니다. 하지만 이 방법은 너무 복잡"
"하고 비효율적입니다(명시적으로 필요한 경우는 예외). 그래서 우리는 간단히 각각"
"의 한 쌍의 점 사이에 선을 그립니다. 보조하는 원의 반지름이 크지 않는 한, 한 "
"쌍의 점 사이의 각각의 선 길이는 결코 충분히 볼 수 있을 만큼 길지 않을 것입니"
"다. 만약 그렇게 된다면, 우리는 단순히 점의 수를 늘려야 할 것입니다."

#: ../../docs/tutorials/2d/custom_drawing_in_2d.rst:234
msgid "Draw the arc on the screen"
msgstr "화면에 호 그리기"

#: ../../docs/tutorials/2d/custom_drawing_in_2d.rst:236
msgid ""
"We now have a function that draws stuff on the screen; it is time to call it "
"inside the ``_draw()`` function:"
msgstr ""

#: ../../docs/tutorials/2d/custom_drawing_in_2d.rst:263
msgid "Result:"
msgstr ""

#: ../../docs/tutorials/2d/custom_drawing_in_2d.rst:268
msgid "Arc polygon function"
msgstr ""

#: ../../docs/tutorials/2d/custom_drawing_in_2d.rst:270
msgid ""
"We can take this a step further and not only write a function that draws the "
"plain portion of the disc defined by the arc, but also its shape. The method "
"is exactly the same as before, except that we draw a polygon instead of "
"lines:"
msgstr ""

#: ../../docs/tutorials/2d/custom_drawing_in_2d.rst:310
msgid "Dynamic custom drawing"
msgstr ""

#: ../../docs/tutorials/2d/custom_drawing_in_2d.rst:312
msgid ""
"All right, we are now able to draw custom stuff on the screen. However, it "
"is static; let's make this shape turn around the center. The solution to do "
"this is simply to change the angle_from and angle_to values over time. For "
"our example, we will simply increment them by 50. This increment value has "
"to remain constant or else the rotation speed will change accordingly."
msgstr ""

#: ../../docs/tutorials/2d/custom_drawing_in_2d.rst:318
msgid ""
"First, we have to make both angle_from and angle_to variables global at the "
"top of our script. Also note that you can store them in other nodes and "
"access them using ``get_node()``."
msgstr ""

#: ../../docs/tutorials/2d/custom_drawing_in_2d.rst:340
msgid "We make these values change in the _process(delta) function."
msgstr ""

#: ../../docs/tutorials/2d/custom_drawing_in_2d.rst:342
msgid ""
"We also increment our angle_from and angle_to values here. However, we must "
"not forget to ``wrap()`` the resulting values between 0 and 360°! That is, "
"if the angle is 361°, then it is actually 1°. If you don't wrap these "
"values, the script will work correctly, but the angle values will grow "
"bigger and bigger over time until they reach the maximum integer value Godot "
"can manage (``2^31 - 1``). When this happens, Godot may crash or produce "
"unexpected behavior."
msgstr ""

#: ../../docs/tutorials/2d/custom_drawing_in_2d.rst:349
msgid ""
"Finally, we must not forget to call the ``update()`` function, which "
"automatically calls ``_draw()``. This way, you can control when you want to "
"refresh the frame."
msgstr ""

#: ../../docs/tutorials/2d/custom_drawing_in_2d.rst:389
msgid ""
"Also, don't forget to modify the ``_draw()`` function to make use of these "
"variables:"
msgstr ""

#: ../../docs/tutorials/2d/custom_drawing_in_2d.rst:413
msgid ""
"Let's run! It works, but the arc is rotating insanely fast! What's wrong?"
msgstr ""

#: ../../docs/tutorials/2d/custom_drawing_in_2d.rst:416
msgid ""
"The reason is that your GPU is actually displaying the frames as fast as it "
"can. We need to \"normalize\" the drawing by this speed; to achieve that, we "
"have to make use of the ``delta`` parameter of the ``_process()`` function. "
"``delta`` contains the time elapsed between the two last rendered frames. It "
"is generally small (about 0.0003 seconds, but this depends on your "
"hardware), so using ``delta`` to control your drawing ensures that your "
"program runs at the same speed on everybody's hardware."
msgstr ""

#: ../../docs/tutorials/2d/custom_drawing_in_2d.rst:424
msgid ""
"In our case, we simply need to multiply our ``rotation_angle`` variable by "
"``delta`` in the ``_process()`` function. This way, our 2 angles will be "
"increased by a much smaller value, which directly depends on the rendering "
"speed."
msgstr ""

#: ../../docs/tutorials/2d/custom_drawing_in_2d.rst:458
msgid "Let's run again! This time, the rotation displays fine!"
msgstr ""

#: ../../docs/tutorials/2d/custom_drawing_in_2d.rst:461
#: ../../docs/tutorials/content/procedural_geometry/index.rst:73
#: ../../docs/development/compiling/introduction_to_the_buildsystem.rst:128
msgid "Tools"
msgstr "도구"

#: ../../docs/tutorials/2d/custom_drawing_in_2d.rst:463
msgid ""
"Drawing your own nodes might also be desired while running them in the "
"editor to use as a preview or visualization of some feature or behavior."
msgstr ""

#: ../../docs/tutorials/2d/custom_drawing_in_2d.rst:467
msgid ""
"Remember to use the \"tool\" keyword at the top of the script (check the :"
"ref:`doc_gdscript` reference if you forgot what this does)."
msgstr ""

#: ../../docs/tutorials/2d/2d_sprite_animation.rst:4
msgid "2D Sprite animation"
msgstr "2D 스프라이트 애니메이션"

#: ../../docs/tutorials/2d/2d_sprite_animation.rst:9
#, fuzzy
msgid ""
"In this tutorial, you'll learn how to create 2D animated characters with the "
"AnimatedSprite class and the AnimationPlayer. Typically, when you create or "
"download an animated character, it will come in one of two ways: as "
"individual images or as a single sprite sheet containing all the animation's "
"frames.  Both can be animated in Godot with the AnimatedSprite class."
msgstr ""
"이번 튜토리얼에서는 2D 애니메이션 캐릭터를 만드는 두 가지 방법을 배우게 됩니"
"다. 전형적으로 애니메이션 캐릭터를 만들거나 다운로드 할 경우 두 가지 유형 중 "
"하나일 것입니다: 개별 이미지 또는 애니메이션 프레임을 모두 담긴 단일 스프라이"
"트 시트. 애셋 유형에 따라 다음 해결책 중 하나를 선택할 수 있습니다."

#: ../../docs/tutorials/2d/2d_sprite_animation.rst:14
#, fuzzy
msgid ""
"First, we'll use :ref:`AnimatedSprite <class_AnimatedSprite>` to animate a "
"collection of individual images. Then we will animate a sprite sheet using "
"this class.  Finally, we will learn another way to animate a sprite sheet "
"with :ref:`AnimationPlayer <class_AnimationPlayer>` and the *Animation* "
"property of :ref:`Sprite <class_Sprite>`."
msgstr ""
"첫 번째는 :ref:`AnimatedSprite <class_AnimatedSprite>` 를 사용하여 개별적인 "
"이미지들을 애니메이션으로 만들 겁니다. 그 다음 스프라이트 시트를 사용하려면 :"
"ref:`Sprite <class_Sprite>` 의 *Animation* 속성과 함께 :ref:`AnimationPlayer "
"<class_AnimationPlayer>` 를 사용합니다."

#: ../../docs/tutorials/2d/2d_sprite_animation.rst:19
msgid ""
"Art for the following examples by https://opengameart.org/users/ansimuz and "
"by https://opengameart.org/users/tgfcoder"
msgstr ""

#: ../../docs/tutorials/2d/2d_sprite_animation.rst:23
msgid "Individual images with AnimatedSprite"
msgstr ""

#: ../../docs/tutorials/2d/2d_sprite_animation.rst:25
#, fuzzy
msgid ""
"In this scenario, you have a collection of images, each containing one of "
"your character's animation frames. For this example, we'll use the following "
"animation:"
msgstr ""
"이 시나리오에서는 당신은 캐릭터의 애니메이션 프레임들을 포함하는 이미지 컬렉"
"션을 가집니다. 이 예제에서 다음과 같은 애니메이션을 사용합니다:"

#: ../../docs/tutorials/2d/2d_sprite_animation.rst:31
msgid ""
"You can download the images here: :download:`run_animation.zip <files/"
"run_animation.zip>`"
msgstr ""
"이미지들은 여기서 다운로드 할 수 있습니다: :download:`using_kinematic2d.zip "
"<files/using_kinematic2d.zip>`"

#: ../../docs/tutorials/2d/2d_sprite_animation.rst:34
msgid ""
"Unzip the images and place them in your project folder. Set up your scene "
"tree with the following nodes:"
msgstr ""
"이미지 압축을 풀고 당신의 프로젝트 폴더에 넣으세요. 다음과 같은 노드를 씬 트"
"리에 설정하세요:"

#: ../../docs/tutorials/2d/2d_sprite_animation.rst:39
#: ../../docs/tutorials/2d/2d_sprite_animation.rst:143
#, fuzzy
msgid ""
"The root node could also be :ref:`Area2D <class_Area2D>` or :ref:"
"`RigidBody2D <class_RigidBody2D>`. The animation will still be made in the "
"same way. Once the animation is completed, you can assign a shape to the "
"CollisionShape2D. See :ref:`Physics Introduction <doc_physics_introduction>` "
"for more information."
msgstr ""
"루트 노드는 :ref:`Area2D <class_Area2D>` 또는 :ref:`RigidBody2D "
"<class_RigidBody2D>` 도 될 수 있습니다. 애니메이션은 여전히 똑같은 방법으로 "
"만들어질 것입니다. 애니메이션이 완성되면, CollisionShape2D 를 할당할 수 있습"
"니다. 자세한 정보는 :ref:`Physics Introduction <doc_physics_introduction>` "
"를 참고하세요."

#: ../../docs/tutorials/2d/2d_sprite_animation.rst:46
msgid ""
"Now select the ``AnimatedSprite`` and in its *SpriteFrames* property, select "
"\"New SpriteFrames\"."
msgstr ""
"이제 ``AnimatedSprite`` 를 선택하고 노드의 *SpriteFrames* 속성에서 \"새 "
"SpriteFrames\"를 선택하세요."

#: ../../docs/tutorials/2d/2d_sprite_animation.rst:51
msgid ""
"Click on the new SpriteFrames resource and you'll see a new panel appear at "
"the bottom of the editor window:"
msgstr ""
"새 SpriteFrames 리소스를 클릭하면 편집기 창 하단에 새로운 패널이 나타날 것입"
"니다:"

#: ../../docs/tutorials/2d/2d_sprite_animation.rst:56
msgid ""
"From the FileSystem dock on the left side, drag the 8 individual images into "
"the center part of the SpriteFrames panel. On the left side, change the name "
"of the animation from \"default\" to \"run\"."
msgstr ""
"왼쪽의 파일 시스템 독에서 8개의 개별 이미지를 SpriteFrames 패널의 중앙 부분으"
"로 끌어다 놓으세요. 왼쪽에서 애니메이션의 이름을 \"default\"에서 \"run\"으로 "
"변경하세요."

#: ../../docs/tutorials/2d/2d_sprite_animation.rst:62
#, fuzzy
msgid ""
"Back in the Inspector, check the box for the *Playing* property. You should "
"now see the animation playing in the viewport. However, it is a bit slow. To "
"fix this, change the *Speed (FPS)* setting in the SpriteFrames panel to 10."
msgstr ""
"인스펙터(Inspecter)로 돌아가서 *Playing* 속성 박스를 체크하세요. 이제 뷰포트"
"에서 애니메이션이 재생되는 것을 볼 수 있습니다. 그러나 꽤 느립니다. 고치기 위"
"해서는 SpriteFrames 패널에서 *속도 (FPS)* 설정을 바꾸세요."

#: ../../docs/tutorials/2d/2d_sprite_animation.rst:66
msgid ""
"You can add additional animations by clicking the \"New Animation\" button "
"and adding additional images."
msgstr ""
"\"새로운 애니메이션\" 버튼을 클릭하고 이미지를 추가해서 애니메이션을 추가할 "
"수 있습니다."

#: ../../docs/tutorials/2d/2d_sprite_animation.rst:70
msgid "Controlling the animation"
msgstr "애니메이션 제어하기"

#: ../../docs/tutorials/2d/2d_sprite_animation.rst:72
msgid ""
"Once the animation is complete, you can control the animation via code using "
"the ``play()`` and ``stop()`` methods. Here is a brief example to play the "
"animation while the right arrow key is held, and stop it when the key is "
"released."
msgstr ""
"애니메이션을 완성하면 ``play()`` 와 ``stop()`` 메서드를 사용하여 코드로 애니"
"메이션을 제어할 수 있습니다. 여기 오른쪽 화살표 키를 누르고 있으면 애니메이션"
"을 재생하고 떼면 중지하는 간단한 예제가 있습니다."

#: ../../docs/tutorials/2d/2d_sprite_animation.rst:90
msgid "Sprite sheet with AnimatedSprite"
msgstr ""

#: ../../docs/tutorials/2d/2d_sprite_animation.rst:92
msgid ""
"You can also easily animate from a sprite sheet with the class "
"``AnimatedSprite``.  We will use this public domain sprite sheet:"
msgstr ""

#: ../../docs/tutorials/2d/2d_sprite_animation.rst:96
#, fuzzy
msgid ""
"Right-click the image and choose \"Save Image As\" to download it, and then "
"copy the image into your project folder."
msgstr ""
"오른쪽 마우스 버튼으로 이미지를 클릭하고 \"다른 이름으로 저장\" 선택해서 다운"
"로드 하세요. 그 다음 당신의 프로젝트 폴더에 이미지를 복사하세요."

#: ../../docs/tutorials/2d/2d_sprite_animation.rst:98
#, fuzzy
msgid ""
"Set up your scene tree the same way you did previously when using individual "
"images.  Select the ``AnimatedSprite`` and in its *SpriteFrames* property, "
"select \"New SpriteFrames\"."
msgstr ""
"이제 ``AnimatedSprite`` 를 선택하고 노드의 *SpriteFrames* 속성에서 \"새 "
"SpriteFrames\"를 선택하세요."

#: ../../docs/tutorials/2d/2d_sprite_animation.rst:101
#, fuzzy
msgid ""
"Click on the new SpriteFrames resource.  This time, when the bottom panel "
"appears, select \"Add frames from a Sprite Sheet\"."
msgstr ""
"새 SpriteFrames 리소스를 클릭하면 편집기 창 하단에 새로운 패널이 나타날 것입"
"니다:"

#: ../../docs/tutorials/2d/2d_sprite_animation.rst:105
msgid "You will be prompted to open a file.  Select your sprite sheet."
msgstr ""

#: ../../docs/tutorials/2d/2d_sprite_animation.rst:107
msgid ""
"A new window will open, showing your sprite sheet.  The first thing you will "
"need to do is to change the number of vertical and horizontal images in your "
"sprite sheet.  In this sprite sheet, we have four images horizontally and "
"two images vertically."
msgstr ""

#: ../../docs/tutorials/2d/2d_sprite_animation.rst:111
msgid ""
"Next, select the frames from the sprite sheet that you want to include in "
"your animation.  We will select the top four, then click \"Add 4 frames\" to "
"create the animation."
msgstr ""

#: ../../docs/tutorials/2d/2d_sprite_animation.rst:115
msgid ""
"You will now see your animation under the list of animations in the bottom "
"panel.  Double click on default to change the name of the animation to jump."
msgstr ""

#: ../../docs/tutorials/2d/2d_sprite_animation.rst:119
msgid ""
"Finally, check Playing on the  AnimatedSprite in the inspector to see your "
"frog jump!"
msgstr ""

#: ../../docs/tutorials/2d/2d_sprite_animation.rst:125
msgid "Sprite sheet with AnimationPlayer"
msgstr ""

#: ../../docs/tutorials/2d/2d_sprite_animation.rst:127
#, fuzzy
msgid ""
"Another way that you can animate when using a sprite sheet is to use a "
"standard :ref:`Sprite <class_Sprite>` node to display the texture, and then "
"animating the change from texture to texture with :ref:`AnimationPlayer "
"<class_AnimationPlayer>`."
msgstr ""
"애니메이션 프레임을 모두 포함하는 스프라이트 시트를 가지고 있는 경우에는 간단"
"하게 ``AnimatedSprite`` 를 사용할 수 없습니다. 대신에 텍스처를 보여주기 위해 "
"표준 :ref:`Sprite <class_Sprite>` 노드를 사용한 다음 :ref:`AnimationPlayer "
"<class_AnimationPlayer>` 로 텍스처에서 텍스처로 변경사항을 애니메이션 할 수 "
"있습니다."

#: ../../docs/tutorials/2d/2d_sprite_animation.rst:131
msgid "Consider this sprite sheet, which contains 6 frames of animation:"
msgstr "6개의 애니메이션 프레임이 포함된 스프라이트 시트를 고려하세요:"

#: ../../docs/tutorials/2d/2d_sprite_animation.rst:135
msgid ""
"Right-click the image and choose \"Save Image As\" to download, then copy "
"the image into your project folder."
msgstr ""
"오른쪽 마우스 버튼으로 이미지를 클릭하고 \"다른 이름으로 저장\" 선택해서 다운"
"로드 하세요. 그 다음 당신의 프로젝트 폴더에 이미지를 복사하세요."

#: ../../docs/tutorials/2d/2d_sprite_animation.rst:138
msgid ""
"Our goal is to display these images one after another in a loop. Start by "
"setting up your scene tree:"
msgstr ""
"우리의 목표는 이 이미지들을 차례로 반복해서 보여주는 것입니다. 다음과 같이 "
"씬 트리를 설정하여 시작하세요:"

#: ../../docs/tutorials/2d/2d_sprite_animation.rst:150
msgid ""
"Drag the spritesheet into the Sprite's *Texture* property, and you'll see "
"the whole sheet displayed on the screen. To slice it up into individual "
"frames, expand the *Animation* section in the Inspector and set the "
"*Hframes* to ``6``. *Hframes* and *Vframes* are the number of horizontal and "
"vertical frames in your sprite sheet."
msgstr ""
"스프라이트 시트를 스프라이트의 *Texture* 속성에 끌어 놓으면 전체 시트가 화면"
"에 보여집니다. 개별 프레임으로 자르려면 인스펙터(Inspecter)에서 *Animation* "
"부분을 확장하고 *Hframes* 을 ``6`` 으로 설정하세요. *Hframes* 와 *Vframes* "
"는 스프라이트 시트에서 수평 및 수직 프레임의 수입니다."

#: ../../docs/tutorials/2d/2d_sprite_animation.rst:158
#, fuzzy
msgid ""
"Now try changing the value of the *Frame* property. You'll see that it "
"ranges from ``0`` to ``5`` and the image displayed by the Sprite changes "
"accordingly. This is the property we'll be animating."
msgstr ""
"이제 *Frame* 속성 값을 변경해보세요.  ``0`` 에서부터 ``5`` 까지의 값의 범위"
"를 보게 되고 변화에 따라 보여지는 스프라이트 이미지도 바뀝니다. 이 속성이 우"
"리가 애니메이션으로 만들 속성입니다."

#: ../../docs/tutorials/2d/2d_sprite_animation.rst:162
msgid ""
"Select the ``AnimationPlayer`` and click the \"Animation\" button followed "
"by \"New\". Name the new animation \"walk\". Set the animation length to "
"``0.6`` and click the \"Loop\" button so that our animation will repeat."
msgstr ""
"``AnimationPlayer`` 를 선택하고 \"애니메이션\" 버튼을 클릭한 다음 \"새 파일"
"\"을 클릭하세요. 새 애니메이션을 \"walk\"로 이름을 지으세요. 애니메이션 길이"
"를 ``0.6`` 로 설정하고 \"Loop\" 버튼을 클릭해서 애니메이션이 반복되도록 하세"
"요."

#: ../../docs/tutorials/2d/2d_sprite_animation.rst:168
msgid ""
"Now select the ``Sprite`` node and click the key icon to add a new track."
msgstr ""
"이제 ``스프라이트`` 를 선택하고 열쇠 아이콘을 클릭해서 새로운 트랙에 추가하세"
"요."

#: ../../docs/tutorials/2d/2d_sprite_animation.rst:172
#, fuzzy
msgid ""
"Continue adding frames at each point in the timeline (``0.1`` seconds by "
"default), until you have all the frames from 0 to 5. You'll see the frames "
"actually appearing in the animation track:"
msgstr ""
"타임라인 각 지점(기본 ``0.1`` 초)에 0에서부터 5까지 모든 프레임들을 계속 추가"
"하세요. 애니메이션 트랙에 프레임들이 실제로 나타나는 것을 볼 수 있을 것입니"
"다:"

#: ../../docs/tutorials/2d/2d_sprite_animation.rst:178
msgid "Press \"Play\" on the animation to see how it looks."
msgstr "애니메이션에서 \"Play\" 를 누르고 어떻게 작동하는지 보세요."

#: ../../docs/tutorials/2d/2d_sprite_animation.rst:183
#, fuzzy
msgid "Controlling an AnimationPlayer animation"
msgstr "애니메이션 제어하기"

#: ../../docs/tutorials/2d/2d_sprite_animation.rst:185
#, fuzzy
msgid ""
"Like with AnimatedSprite, you can control the animation via code using the "
"``play()`` and ``stop()`` methods. Again, here is an example to play the "
"animation while the right arrow key is held, and stop it when the key is "
"released."
msgstr ""
"애니메이션을 완성하면 ``play()`` 와 ``stop()`` 메서드를 사용하여 코드로 애니"
"메이션을 제어할 수 있습니다. 여기 오른쪽 화살표 키를 누르고 있으면 애니메이션"
"을 재생하고 떼면 중지하는 간단한 예제가 있습니다."

#: ../../docs/tutorials/2d/2d_sprite_animation.rst:202
msgid ""
"If updating both an animation and a separate property at once (for example, "
"a platformer may update the sprite's ``h_flip``/``v_flip`` properties when a "
"character turns while starting a 'turning' animation), it's important to "
"keep in mind that ``play()`` isn't applied instantly. Instead, it's applied "
"the next time the :ref:`AnimationPlayer <class_AnimationPlayer>` is "
"processed. This may end up being on the next frame, causing a 'glitch' "
"frame, where the property change was applied but the animation was not. If "
"this turns out to be a problem, after calling ``play()``, you can call "
"``advance(0)`` to update the animation immediately."
msgstr ""

#: ../../docs/tutorials/2d/2d_sprite_animation.rst:215
#, fuzzy
msgid ""
"These examples illustrate the two classes you can use in Godot for 2D "
"animation. ``AnimationPlayer`` is a bit more complex than "
"``AnimatedSprite``, but it provides additional functionality, since you can "
"also animate other properties like position or scale. The class "
"``AnimationPlayer`` can also be used with an ``AnimatedSprite``.  Experiment "
"to see what works best for your needs."
msgstr ""
"이 예제들은 2D 애니메이션에서 마주치게 될 두 가지 가장 흔한 상황을 보여줍니"
"다. 각각 장점을 가지고 있습니다. ``AnimationPlayer`` 로 하게되면 꽤 복잡하지"
"만 추가적인 기능들을 제공합니다. 다른 위치 또는 크기와 같은 속성들을 애니메이"
"션 할 수 있습니다. 실험해보고 어느 방법이 당신의 필요에 알맞는지 알아보세요."

#: ../../docs/tutorials/3d/introduction_to_3d.rst:4
msgid "Introduction to 3D"
msgstr "3D 소개"

#: ../../docs/tutorials/3d/introduction_to_3d.rst:6
#, fuzzy
msgid ""
"Creating a 3D game can be challenging. That extra Z coordinate makes many of "
"the common techniques that helped to make 2D games simple no longer work. To "
"aid in this transition, it is worth mentioning that Godot uses similar APIs "
"for 2D and 3D. Most nodes are the same and are present in both 2D and 3D "
"versions. In fact, it is worth checking the 3D platformer tutorial, or the "
"3D kinematic character tutorials, which are almost identical to their 2D "
"counterparts."
msgstr ""
"3D 게임을 만드는 것은 어려울 수 있습니다. 추가 Z 좌표는 2D 게임을 단순하게 만"
"드는 데 도움이 되었던 많은 일반적인 기술들을 더 이상 작동하지 않게 만듭니다. "
"이러한 전환을 돕기 위해 Godot은 2D와 3D에 유사한 API를 사용한다는 점을 언급"
"할 필요가 있습니다. 대부분의 노드는 동일하며 2D 버전과 3D 버전 모두에 존재합"
"니다. 실제로 3D 플랫포머 튜토리얼 또는 2D 튜토리얼과 거의 동일한 3D "
"kinematic 튜토리얼을 검토할 만합니다."

#: ../../docs/tutorials/3d/introduction_to_3d.rst:14
msgid ""
"In 3D, math is a little more complex than in 2D, so also checking the :ref:"
"`doc_vector_math` entry in the wiki (which was especially created for game "
"developers, not mathematicians or engineers) will help pave the way for you "
"to develop 3D games efficiently."
msgstr ""
"3D에서 수학은 2D보다 조금 더 복잡하기 때문에 위키에서의 벡터 항목(특히 수학자"
"나 엔지니어가 아닌 게임 개발자를 위해 만들어진 것)을 확인하는 것도 3D 게임을 "
"효율적으로 개발할 수 있는 길을 닦는 데 도움이 될 것입니다."

#: ../../docs/tutorials/3d/introduction_to_3d.rst:20
msgid "Spatial node"
msgstr ""

#: ../../docs/tutorials/3d/introduction_to_3d.rst:22
#, fuzzy
msgid ""
":ref:`Node2D <class_Node2D>` is the base node for 2D. :ref:`Control "
"<class_Control>` is the base node for everything GUI. Following this "
"reasoning, the 3D engine uses the :ref:`Spatial <class_Spatial>` node for "
"everything 3D."
msgstr ""
":ref:`Node2D <class_Node2D>` 는 2D의 기본 노드입니다. :ref:`Control "
"<class_Control>` 는 모든 GUI의 기본 노드입니다. 이러한 추론에 따라 3D 엔진은 "
"모든 3D에 :ref:`Spatial <class_Spatial>` 를 사용합니다."

#: ../../docs/tutorials/3d/introduction_to_3d.rst:29
#, fuzzy
msgid ""
"Spatial nodes have a local transform, which is relative to the parent node "
"(as long as the parent node is also of **or inherits from** the type "
"Spatial). This transform can be accessed as a 4x3 :ref:`Transform "
"<class_Transform>`, or as 3 :ref:`Vector3 <class_Vector3>` members "
"representing location, Euler rotation (x,y and z angles) and scale."
msgstr ""
"Spatial 노드는 부모 노드에 상대적인 지역 변형을 가집니다(부모 노드도 Spatial "
"유형의 노드를 상속받는 경우). 이 변형은 4x3 :ref:`Transform "
"<class_Transform>` 또는 위치, 오일러 회전 (x,y 와 z 각도) 그리고 스케일을 나"
"타내는 세 :ref:`Vector3 <class_Vector3>` 로 접근할 수 있습니다."

#: ../../docs/tutorials/3d/introduction_to_3d.rst:39
msgid "3D content"
msgstr ""

#: ../../docs/tutorials/3d/introduction_to_3d.rst:41
#, fuzzy
msgid ""
"Unlike 2D, where loading image content and drawing is straightforward, 3D is "
"a little more difficult. The content needs to be created with special 3D "
"tools (usually referred to as DCCs) and exported to an exchange file format "
"in order to be imported in Godot (3D formats are not as standardized as "
"images)."
msgstr ""
"이미지 컨텐츠를 불러오고 그리는 것이 직설적인 2D와는 다르게 3D는 약간 더 어렵"
"습니다. 컨텐츠는 Godot으로 가져오려면 특수한 3D 도구(일반적으로 DCCs 라고 함)"
"로 만들고 교환 파일 형식으로 내보내야 합니다(3D 형식이 이미지만큼 표준화되지 "
"않음)."

#: ../../docs/tutorials/3d/introduction_to_3d.rst:48
msgid "DCC-created models"
msgstr ""

#: ../../docs/tutorials/3d/introduction_to_3d.rst:53
#, fuzzy
msgid ""
"There are two pipelines to import 3D models in Godot. The first and most "
"common one is by :ref:`doc_importing_3d_scenes`, which allows you to import "
"entire scenes (just as they look in the DCC), including animation, skeletal "
"rigs, blend shapes, etc."
msgstr ""
"Godot에서 3D 모델을 가져오기 위한 두 가지 파이프라인이 있습니다. 가장 보편적"
"인 첫번째는 :ref:`doc_importing_3d_scenes` 와 같이 전체 씬(애니메이션, 골격 "
"리그(skeletal rigs), 도형 혼합(blend shapes) 등을 포함)을 가져옵니다."

#: ../../docs/tutorials/3d/introduction_to_3d.rst:58
#, fuzzy
msgid ""
"The second pipeline is by importing simple .OBJ files as mesh resources, "
"which can be then put inside a :ref:`MeshInstance <class_MeshInstance>` node "
"for display."
msgstr ""
"두 번째 파이프라인은 .OBJ 파일을 메시 리소스로 단순하게 가져오는 것입니다. 디"
"스플레이를 위해 :ref:`MeshInstance <class_MeshInstance>` 노드에 넣을 수도 있"
"습니다."

#: ../../docs/tutorials/3d/introduction_to_3d.rst:63
msgid "Generated geometry"
msgstr ""

#: ../../docs/tutorials/3d/introduction_to_3d.rst:65
#, fuzzy
msgid ""
"It is possible to create custom geometry by using the :ref:`ArrayMesh "
"<class_ArrayMesh>` resource directly. Simply create your arrays and use the :"
"ref:`ArrayMesh.add_surface_from_arrays() "
"<class_ArrayMesh_method_add_surface_from_arrays>` function. A helper class "
"is also available, :ref:`SurfaceTool <class_SurfaceTool>`, which provides a "
"more straightforward API and helpers for indexing, generating normals, "
"tangents, etc."
msgstr ""
":ref:`ArrayMesh <class_ArrayMesh>` 리소스를 바로 사용하여 사용자 정의 지오메"
"트리를 만들 수 있습니다.. 간단하게 당신의 배열을 만들고 :ref:`ArrayMesh."
"add_surface_from_arrays() <class_ArrayMesh_method_add_surface_from_arrays>` "
"함수를 사용하세요. 또한 :ref:`SurfaceTool <class_SurfaceTool>` 도우미 클래스"
"를 이용할 수 있습니다. 더 간단한 API와 indexing, generating normals, "
"tangents 등을 위한 도우미를 제공합니다."

#: ../../docs/tutorials/3d/introduction_to_3d.rst:72
#, fuzzy
msgid ""
"In any case, this method is meant for generating static geometry (models "
"that will not be updated often), as creating vertex arrays and submitting "
"them to the 3D API has a significant performance cost."
msgstr ""
"어쨌든, 이 메소드는 정적 지오메트리(자주 업데이트되지 않는 모델)를 생성하기 "
"위한 것입니다. 정점 배열을 만들고 3D API에 배열을 제출하는 것은 상당한 성능 "
"비용이 있습니다"

#: ../../docs/tutorials/3d/introduction_to_3d.rst:77
msgid "Immediate geometry"
msgstr "즉각적인 지오메트리(Immediate geometry)"

#: ../../docs/tutorials/3d/introduction_to_3d.rst:79
#, fuzzy
msgid ""
"If, instead, there is a requirement to generate simple geometry that will be "
"updated often, Godot provides a special node, :ref:`ImmediateGeometry "
"<class_ImmediateGeometry>`, which provides an OpenGL 1.x style immediate-"
"mode API to create points, lines, triangles, etc."
msgstr ""
"대신에 자주 업데이트 되는 간단한 지오메트리를 생성해야 할 경우 Godot은 점, "
"선, 삼각형 등을 만드는 OpenGL 1.x 스타일의 즉시-모드(immediate-mode) API를 제"
"공하는 특수 노드 :ref:`ImmediateGeometry <class_ImmediateGeometry>` 를 제공합"
"니다."

#: ../../docs/tutorials/3d/introduction_to_3d.rst:86
msgid "2D in 3D"
msgstr ""

#: ../../docs/tutorials/3d/introduction_to_3d.rst:88
#, fuzzy
msgid ""
"While Godot packs a powerful 2D engine, many types of games use 2D in a 3D "
"environment. By using a fixed camera (either orthogonal or perspective) that "
"does not rotate, nodes such as :ref:`Sprite3D <class_Sprite3D>` and :ref:"
"`AnimatedSprite3D <class_AnimatedSprite3D>` can be used to create 2D games "
"that take advantage of mixing with 3D backgrounds, more realistic parallax, "
"lighting/shadow effects, etc."
msgstr ""
"Godot은 강력한 2D 엔진을 탑재하고 있지만, 게임들 중 많은 유형들이 3D 환경에"
"서 2D를 사용합니다. 회전하지 않는 고정된 카메라(직교 또는 원근법)를 사용함으"
"로써 :ref:`Sprite3D <class_Sprite3D>` 와 :ref:`AnimatedSprite3D "
"<class_AnimatedSprite3D>` 같은 노드로 3D 배경, 더 현실적인 시차(Parallax), 조"
"명/그림자(lighting/shadow) 효과 등을 혼합하는 이점을 가진 2D 게임들을 만드는"
"데 사용할 수 있습니다."

#: ../../docs/tutorials/3d/introduction_to_3d.rst:96
msgid ""
"The disadvantage is, of course, that added complexity and reduced "
"performance in comparison to plain 2D, as well as the lack of reference of "
"working in pixels."
msgstr ""

#: ../../docs/tutorials/3d/introduction_to_3d.rst:101
#: ../../docs/tutorials/3d/environment_and_post_processing.rst:10
msgid "Environment"
msgstr ""

#: ../../docs/tutorials/3d/introduction_to_3d.rst:103
msgid ""
"Besides editing a scene, it is often common to edit the environment. Godot "
"provides a :ref:`WorldEnvironment <class_WorldEnvironment>` node that allows "
"changing the background color, mode (as in, put a skybox), and applying "
"several types of built-in post-processing effects. Environments can also be "
"overridden in the Camera."
msgstr ""

#: ../../docs/tutorials/3d/introduction_to_3d.rst:110
msgid "3D viewport"
msgstr ""

#: ../../docs/tutorials/3d/introduction_to_3d.rst:112
msgid ""
"Editing 3D scenes is done in the 3D tab. This tab can be selected manually, "
"but it will be automatically enabled when a Spatial node is selected."
msgstr ""

#: ../../docs/tutorials/3d/introduction_to_3d.rst:118
msgid ""
"Default 3D scene navigation controls are similar to Blender (aiming to have "
"some sort of consistency in the free software pipeline..), but options are "
"included to customize mouse buttons and behavior to be similar to other "
"tools in the Editor Settings:"
msgstr ""

#: ../../docs/tutorials/3d/introduction_to_3d.rst:126
msgid "Coordinate system"
msgstr ""

#: ../../docs/tutorials/3d/introduction_to_3d.rst:128
msgid ""
"Godot uses the `metric <https://en.wikipedia.org/wiki/Metric_system>`__ "
"system for everything. 3D Physics and other areas are tuned for this, so "
"attempting to use a different scale is usually a bad idea (unless you know "
"what you are doing)."
msgstr ""

#: ../../docs/tutorials/3d/introduction_to_3d.rst:133
msgid ""
"When working with 3D assets, it's always best to work in the correct scale "
"(set your DCC to metric). Godot allows scaling post-import and, while this "
"works in most cases, in rare situations it may introduce floating point "
"precision issues (and thus, glitches or artifacts) in delicate areas, such "
"as rendering or physics, so make sure your artists always work in the right "
"scale!"
msgstr ""

#: ../../docs/tutorials/3d/introduction_to_3d.rst:140
msgid ""
"The Y coordinate is used for \"up\", though for most objects that need "
"alignment (like lights, cameras, capsule collider, vehicle, etc.), the Z "
"axis is used as a \"pointing towards\" direction. This convention roughly "
"means that:"
msgstr ""

#: ../../docs/tutorials/3d/introduction_to_3d.rst:145
msgid "**X** is sides"
msgstr ""

#: ../../docs/tutorials/3d/introduction_to_3d.rst:146
msgid "**Y** is up/down"
msgstr ""

#: ../../docs/tutorials/3d/introduction_to_3d.rst:147
msgid "**Z** is front/back"
msgstr ""

#: ../../docs/tutorials/3d/introduction_to_3d.rst:150
msgid "Space and manipulation gizmos"
msgstr ""

#: ../../docs/tutorials/3d/introduction_to_3d.rst:152
msgid ""
"Moving objects in the 3D view is done through the manipulator gizmos. Each "
"axis is represented by a color: Red, Green, Blue represent X,Y,Z "
"respectively. This convention applies to the grid and other gizmos too (and "
"also to the shader language, ordering of components for Vector3,Color,etc.)."
msgstr ""

#: ../../docs/tutorials/3d/introduction_to_3d.rst:160
msgid "Some useful keybindings:"
msgstr ""

#: ../../docs/tutorials/3d/introduction_to_3d.rst:162
msgid ""
"To snap placement or rotation, press :kbd:`Ctrl` while moving, scaling or "
"rotating."
msgstr ""

#: ../../docs/tutorials/3d/introduction_to_3d.rst:164
msgid "To center the view on the selected object, press :kbd:`F`."
msgstr ""

#: ../../docs/tutorials/3d/introduction_to_3d.rst:167
msgid "View menu"
msgstr ""

#: ../../docs/tutorials/3d/introduction_to_3d.rst:169
msgid ""
"The view options are controlled by the \"View\" menu in the viewport's "
"toolbar."
msgstr ""

#: ../../docs/tutorials/3d/introduction_to_3d.rst:173
msgid "You can hide the gizmos in the 3D view of the editor through this menu:"
msgstr ""

#: ../../docs/tutorials/3d/introduction_to_3d.rst:177
msgid ""
"To hide a specific type of gizmos, you can toggle them off in the \"View\" "
"menu."
msgstr ""

#: ../../docs/tutorials/3d/introduction_to_3d.rst:182
#: ../../docs/tutorials/3d/environment_and_post_processing.rst:40
msgid "Default environment"
msgstr ""

#: ../../docs/tutorials/3d/introduction_to_3d.rst:184
msgid ""
"When created from the Project Manager, the 3D environment has a default sky."
msgstr ""

#: ../../docs/tutorials/3d/introduction_to_3d.rst:188
msgid ""
"Given how physically based rendering works, it is advised to always try to "
"work with a default environment in order to provide indirect and reflected "
"light to your objects."
msgstr ""

#: ../../docs/tutorials/3d/introduction_to_3d.rst:193
msgid "Cameras"
msgstr ""

#: ../../docs/tutorials/3d/introduction_to_3d.rst:195
msgid ""
"No matter how many objects are placed in the 3D space, nothing will be "
"displayed unless a :ref:`Camera <class_Camera>` is also added to the scene. "
"Cameras can work in either orthogonal or perspective projections:"
msgstr ""

#: ../../docs/tutorials/3d/introduction_to_3d.rst:202
msgid ""
"Cameras are associated with (and only display to) a parent or grandparent "
"viewport. Since the root of the scene tree is a viewport, cameras will "
"display on it by default, but if sub-viewports (either as render target or "
"picture-in-picture) are desired, they need their own children cameras to "
"display."
msgstr ""

#: ../../docs/tutorials/3d/introduction_to_3d.rst:210
msgid ""
"When dealing with multiple cameras, the following rules are enforced for "
"each viewport:"
msgstr ""

#: ../../docs/tutorials/3d/introduction_to_3d.rst:213
msgid ""
"If no cameras are present in the scene tree, the first one that enters it "
"will become the active camera. Further cameras entering the scene will be "
"ignored (unless they are set as *current*)."
msgstr ""

#: ../../docs/tutorials/3d/introduction_to_3d.rst:216
msgid ""
"If a camera has the \"*current*\" property set, it will be used regardless "
"of any other camera in the scene. If the property is set, it will become "
"active, replacing the previous camera."
msgstr ""

#: ../../docs/tutorials/3d/introduction_to_3d.rst:219
msgid ""
"If an active camera leaves the scene tree, the first camera in tree-order "
"will take its place."
msgstr ""

#: ../../docs/tutorials/3d/introduction_to_3d.rst:225
msgid ""
"There is no limitation on the number of lights, nor of types of lights, in "
"Godot. As many as desired can be added (as long as performance allows)."
msgstr ""

#: ../../docs/tutorials/3d/using_transforms.rst:4
msgid "Using 3D transforms"
msgstr "3D 변형(transform) 사용하기"

#: ../../docs/tutorials/3d/using_transforms.rst:9
msgid ""
"If you have never made 3D games before, working with rotations in three "
"dimensions can be confusing at first. Coming from 2D, the natural way of "
"thinking is along the lines of *\"Oh, it's just like rotating in 2D, except "
"now rotations happen in X, Y and Z\"*."
msgstr ""

#: ../../docs/tutorials/3d/using_transforms.rst:12
msgid ""
"At first this seems easy and for simple games, this way of thinking may even "
"be enough. Unfortunately, it's often incorrect."
msgstr ""

#: ../../docs/tutorials/3d/using_transforms.rst:14
msgid ""
"Angles in three dimensions are most commonly referred to as \"Euler Angles\"."
msgstr ""

#: ../../docs/tutorials/3d/using_transforms.rst:18
msgid ""
"Euler angles were introduced by mathematician Leonhard Euler in the early "
"1700s."
msgstr ""

#: ../../docs/tutorials/3d/using_transforms.rst:22
msgid ""
"This way of representing 3D rotations was groundbreaking at the time, but it "
"has several shortcomings when used in game development (which is to be "
"expected from a guy with a funny hat). The idea of this document is to "
"explain why, as well as outlining best practices for dealing with transforms "
"when programming 3D games."
msgstr ""

#: ../../docs/tutorials/3d/using_transforms.rst:28
msgid "Problems of Euler angles"
msgstr ""

#: ../../docs/tutorials/3d/using_transforms.rst:30
msgid ""
"While it may seem intuitive that each axis has a rotation, the truth is that "
"it's just not practical."
msgstr ""

#: ../../docs/tutorials/3d/using_transforms.rst:33
msgid "Axis order"
msgstr ""

#: ../../docs/tutorials/3d/using_transforms.rst:35
msgid ""
"The main reason for this is that there isn't a *unique* way to construct an "
"orientation from the angles. There isn't a standard mathematical function "
"that takes all the angles together and produces an actual 3D rotation. The "
"only way an orientation can be produced from angles is to rotate the object "
"angle by angle, in an *arbitrary order*."
msgstr ""

#: ../../docs/tutorials/3d/using_transforms.rst:39
msgid ""
"This could be done by first rotating in *X*, then *Y* and then in *Z*. "
"Alternatively, you could first rotate in *Y*, then in *Z* and finally in "
"*X*. Anything works, but depending on the order, the final orientation of "
"the object will *not necessarily be the same*. Indeed, this means that there "
"are several ways to construct an orientation from 3 different angles, "
"depending on *the order of the rotations*."
msgstr ""

#: ../../docs/tutorials/3d/using_transforms.rst:43
msgid ""
"Following is a visualization of rotation axes (in X,Y,Z order) in a gimbal "
"(from Wikipedia). As you can see, the orientation of each axis depends on "
"the rotation of the previous one:"
msgstr ""

#: ../../docs/tutorials/3d/using_transforms.rst:47
msgid ""
"You may be wondering how this affects you. Let's look at a practical example:"
msgstr ""

#: ../../docs/tutorials/3d/using_transforms.rst:49
msgid ""
"Imagine you are working on a first-person controller (e.g. an FPS game). "
"Moving the mouse left and right controls your view angle parallel to the "
"ground, while moving it up and down moves the player's view up and down."
msgstr ""

#: ../../docs/tutorials/3d/using_transforms.rst:51
msgid ""
"In this case to achieve the desired effect, rotation must be applied first "
"in the *Y* axis (\"up\" in this case, since Godot uses a \"Y-Up\" "
"orientation), followed by rotation in the *X* axis."
msgstr ""

#: ../../docs/tutorials/3d/using_transforms.rst:55
msgid ""
"If we were to apply rotation in the *X* axis first, and then in *Y*, the "
"effect would be undesired:"
msgstr ""

#: ../../docs/tutorials/3d/using_transforms.rst:59
msgid ""
"Depending on the type of game or effect desired, the order in which you want "
"axis rotations to be applied may differ. Therefore, applying rotations in X, "
"Y, and Z is not enough: you also need a *rotation order*."
msgstr ""

#: ../../docs/tutorials/3d/using_transforms.rst:62
#: ../../docs/tutorials/math/interpolation.rst:4
msgid "Interpolation"
msgstr "보간법 (Interpolation)"

#: ../../docs/tutorials/3d/using_transforms.rst:64
msgid ""
"Another problem with using Euler angles is interpolation. Imagine you want "
"to transition between two different camera or enemy positions (including "
"rotations). One logical way to approach this is to interpolate the angles "
"from one position to the next. One would expect it to look like this:"
msgstr ""

#: ../../docs/tutorials/3d/using_transforms.rst:68
msgid "But this does not always have the expected effect when using angles:"
msgstr ""

#: ../../docs/tutorials/3d/using_transforms.rst:72
msgid "The camera actually rotated the opposite direction!"
msgstr ""

#: ../../docs/tutorials/3d/using_transforms.rst:74
msgid "There are a few reasons this may happen:"
msgstr ""

#: ../../docs/tutorials/3d/using_transforms.rst:76
msgid ""
"Rotations don't map linearly to orientation, so interpolating them does not "
"always result in the shortest path (i.e., to go from ``270`` to ``0`` "
"degrees is not the same as going from ``270`` to ``360``, even though the "
"angles are equivalent)."
msgstr ""

#: ../../docs/tutorials/3d/using_transforms.rst:77
msgid ""
"Gimbal lock is at play (first and last rotated axis align, so a degree of "
"freedom is lost). See `Wikipedia's page on Gimbal Lock <https://en.wikipedia."
"org/wiki/Gimbal_lock>`_ for a detailed explanation of this problem."
msgstr ""

#: ../../docs/tutorials/3d/using_transforms.rst:80
msgid "Say no to Euler angles"
msgstr ""

#: ../../docs/tutorials/3d/using_transforms.rst:82
msgid ""
"The result of all this is that you should **not use** the ``rotation`` "
"property of :ref:`class_Spatial` nodes in Godot for games. It's there to be "
"used mainly in the editor, for coherence with the 2D engine, and for simple "
"rotations (generally just one axis, or even two in limited cases). As much "
"as you may be tempted, don't use it."
msgstr ""

#: ../../docs/tutorials/3d/using_transforms.rst:84
msgid "Instead, there is a better way to solve your rotation problems."
msgstr ""

#: ../../docs/tutorials/3d/using_transforms.rst:87
msgid "Introducing transforms"
msgstr ""

#: ../../docs/tutorials/3d/using_transforms.rst:89
msgid ""
"Godot uses the :ref:`class_Transform` datatype for orientations. Each :ref:"
"`class_Spatial` node contains a ``transform`` property which is relative to "
"the parent's transform, if the parent is a Spatial-derived type."
msgstr ""

#: ../../docs/tutorials/3d/using_transforms.rst:91
msgid ""
"It is also possible to access the world coordinate transform via the "
"``global_transform`` property."
msgstr ""

#: ../../docs/tutorials/3d/using_transforms.rst:93
msgid ""
"A transform has a :ref:`class_Basis` (transform.basis sub-property), which "
"consists of three :ref:`class_Vector3` vectors. These are accessed via the "
"``transform.basis`` property and can be accessed directly by ``transform."
"basis.x``, ``transform.basis.y``, and ``transform.basis.z``. Each vector "
"points in the direction its axis has been rotated, so they effectively "
"describe the node's total rotation. The scale (as long as it's uniform) can "
"also be inferred from the length of the axes. A *basis* can also be "
"interpreted as a 3x3 matrix and used as ``transform.basis[x][y]``."
msgstr ""

#: ../../docs/tutorials/3d/using_transforms.rst:95
msgid "A default basis (unmodified) is akin to:"
msgstr ""

#: ../../docs/tutorials/3d/using_transforms.rst:123
msgid "This is also an analog of a 3x3 identity matrix."
msgstr ""

#: ../../docs/tutorials/3d/using_transforms.rst:125
msgid ""
"Following the OpenGL convention, ``X`` is the *Right* axis, ``Y`` is the "
"*Up* axis and ``Z`` is the *Forward* axis."
msgstr ""

#: ../../docs/tutorials/3d/using_transforms.rst:127
msgid ""
"Together with the *basis*, a transform also has an *origin*. This is a "
"*Vector3* specifying how far away from the actual origin ``(0, 0, 0)`` this "
"transform is. Combining the *basis* with the *origin*, a *transform* "
"efficiently represents a unique translation, rotation, and scale in space."
msgstr ""

#: ../../docs/tutorials/3d/using_transforms.rst:132
msgid ""
"One way to visualize a transform is to look at an object's 3D gizmo while in "
"\"local space\" mode."
msgstr ""

#: ../../docs/tutorials/3d/using_transforms.rst:136
msgid ""
"The gizmo's arrows show the ``X``, ``Y``, and ``Z`` axes (in red, green, and "
"blue respectively) of the basis, while the gizmo's center is at the object's "
"origin."
msgstr ""

#: ../../docs/tutorials/3d/using_transforms.rst:140
msgid ""
"For more information on the mathematics of vectors and transforms, please "
"read the :ref:`doc_vector_math` tutorials."
msgstr ""

#: ../../docs/tutorials/3d/using_transforms.rst:143
msgid "Manipulating transforms"
msgstr ""

#: ../../docs/tutorials/3d/using_transforms.rst:145
msgid ""
"Of course, transforms are not as straightforward to manipulate as angles and "
"have problems of their own."
msgstr ""

#: ../../docs/tutorials/3d/using_transforms.rst:147
msgid ""
"It is possible to rotate a transform, either by multiplying its basis by "
"another (this is called accumulation), or by using the rotation methods."
msgstr ""

#: ../../docs/tutorials/3d/using_transforms.rst:164
msgid "A method in Spatial simplifies this:"
msgstr ""

#: ../../docs/tutorials/3d/using_transforms.rst:181
msgid "This rotates the node relative to the parent node."
msgstr ""

#: ../../docs/tutorials/3d/using_transforms.rst:183
msgid ""
"To rotate relative to object space (the node's own transform), use the "
"following:"
msgstr ""

#: ../../docs/tutorials/3d/using_transforms.rst:197
msgid "Precision errors"
msgstr ""

#: ../../docs/tutorials/3d/using_transforms.rst:199
msgid ""
"Doing successive operations on transforms will result in a loss of precision "
"due to floating-point error. This means the scale of each axis may no longer "
"be exactly ``1.0``, and they may not be exactly ``90`` degrees from each "
"other."
msgstr ""

#: ../../docs/tutorials/3d/using_transforms.rst:201
msgid ""
"If a transform is rotated every frame, it will eventually start deforming "
"over time. This is unavoidable."
msgstr ""

#: ../../docs/tutorials/3d/using_transforms.rst:203
msgid ""
"There are two different ways to handle this. The first is to "
"*orthonormalize* the transform after some time (maybe once per frame if you "
"modify it every frame):"
msgstr ""

#: ../../docs/tutorials/3d/using_transforms.rst:214
msgid ""
"This will make all axes have ``1.0`` length again and be ``90`` degrees from "
"each other. However, any scale applied to the transform will be lost."
msgstr ""

#: ../../docs/tutorials/3d/using_transforms.rst:216
msgid ""
"It is recommended you not scale nodes that are going to be manipulated; "
"scale their children nodes instead (such as MeshInstance). If you absolutely "
"must scale the node, then re-apply it at the end:"
msgstr ""

#: ../../docs/tutorials/3d/using_transforms.rst:230
msgid "Obtaining information"
msgstr ""

#: ../../docs/tutorials/3d/using_transforms.rst:232
msgid ""
"You might be thinking at this point: **\"Ok, but how do I get angles from a "
"transform?\"**. The answer again is: you don't. You must do your best to "
"stop thinking in angles."
msgstr ""

#: ../../docs/tutorials/3d/using_transforms.rst:234
msgid ""
"Imagine you need to shoot a bullet in the direction your player is facing. "
"Just use the forward axis (commonly ``Z`` or ``-Z``)."
msgstr ""

#: ../../docs/tutorials/3d/using_transforms.rst:247
msgid ""
"Is the enemy looking at the player? Use the dot product for this (see the :"
"ref:`doc_vector_math` tutorial for an explanation of the dot product):"
msgstr ""

#: ../../docs/tutorials/3d/using_transforms.rst:266
msgid "Strafe left:"
msgstr ""

#: ../../docs/tutorials/3d/using_transforms.rst:283
msgid "Jump:"
msgstr ""

#: ../../docs/tutorials/3d/using_transforms.rst:302
msgid "All common behaviors and logic can be done with just vectors."
msgstr ""

#: ../../docs/tutorials/3d/using_transforms.rst:305
msgid "Setting information"
msgstr ""

#: ../../docs/tutorials/3d/using_transforms.rst:307
msgid ""
"There are, of course, cases where you want to set information to a "
"transform. Imagine a first person controller or orbiting camera. Those are "
"definitely done using angles, because you *do want* the transforms to happen "
"in a specific order."
msgstr ""

#: ../../docs/tutorials/3d/using_transforms.rst:309
msgid ""
"For such cases, keep the angles and rotations *outside* the transform and "
"set them every frame. Don't try to retrieve and re-use them because the "
"transform is not meant to be used this way."
msgstr ""

#: ../../docs/tutorials/3d/using_transforms.rst:311
msgid "Example of looking around, FPS style:"
msgstr ""

#: ../../docs/tutorials/3d/using_transforms.rst:353
msgid ""
"As you can see, in such cases it's even simpler to keep the rotation "
"outside, then use the transform as the *final* orientation."
msgstr ""

#: ../../docs/tutorials/3d/using_transforms.rst:356
msgid "Interpolating with quaternions"
msgstr "쿼터니언(quaternions) 으로 보간하기"

#: ../../docs/tutorials/3d/using_transforms.rst:358
msgid ""
"Interpolating between two transforms can efficiently be done with "
"quaternions. More information about how quaternions work can be found in "
"other places around the Internet. For practical use, it's enough to "
"understand that pretty much their main use is doing a closest path "
"interpolation. As in, if you have two rotations, a quaternion will smoothly "
"allow interpolation between them using the closest axis."
msgstr ""

#: ../../docs/tutorials/3d/using_transforms.rst:360
msgid "Converting a rotation to quaternion is straightforward."
msgstr ""

#: ../../docs/tutorials/3d/using_transforms.rst:383
msgid ""
"The :ref:`class_Quat` type reference has more information on the datatype "
"(it can also do transform accumulation, transform points, etc., though this "
"is used less often). If you interpolate or apply operations to quaternions "
"many times, keep in mind they need to be eventually normalized or they also "
"may suffer from numerical precision errors."
msgstr ""

#: ../../docs/tutorials/3d/using_transforms.rst:385
msgid ""
"Quaternions are useful when doing camera/path/etc. interpolations, as the "
"result will always be correct and smooth."
msgstr ""

#: ../../docs/tutorials/3d/using_transforms.rst:388
msgid "Transforms are your friend"
msgstr ""

#: ../../docs/tutorials/3d/using_transforms.rst:390
msgid ""
"For most beginners, getting used to working with transforms can take some "
"time. However, once you get used to them, you will appreciate their "
"simplicity and power."
msgstr ""

#: ../../docs/tutorials/3d/using_transforms.rst:392
msgid ""
"Don't hesitate to ask for help on this topic in any of Godot's `online "
"communities <https://godotengine.org/community>`_ and, once you become "
"confident enough, please help others!"
msgstr ""

#: ../../docs/tutorials/3d/3d_performance_and_limitations.rst:4
msgid "3D performance and limitations"
msgstr ""

#: ../../docs/tutorials/3d/3d_performance_and_limitations.rst:9
msgid ""
"Godot follows a balanced performance philosophy. In the performance world, "
"there are always trade-offs, which consist of trading speed for usability "
"and flexibility. Some practical examples of this are:"
msgstr ""

#: ../../docs/tutorials/3d/3d_performance_and_limitations.rst:13
msgid ""
"Rendering objects efficiently in high amounts is easy, but when a large "
"scene must be rendered, it can become inefficient. To solve this, visibility "
"computation must be added to the rendering, which makes rendering less "
"efficient, but, at the same time, fewer objects are rendered, so efficiency "
"overall improves."
msgstr ""

#: ../../docs/tutorials/3d/3d_performance_and_limitations.rst:18
msgid ""
"Configuring the properties of every material for every object that needs to "
"be rendered is also slow. To solve this, objects are sorted by material to "
"reduce the costs, but at the same time sorting has a cost."
msgstr ""

#: ../../docs/tutorials/3d/3d_performance_and_limitations.rst:22
msgid ""
"In 3D physics a similar situation happens. The best algorithms to handle "
"large amounts of physics objects (such as SAP) are slow at insertion/removal "
"of objects and ray-casting. Algorithms that allow faster insertion and "
"removal, as well as ray-casting, will not be able to handle as many active "
"objects."
msgstr ""

#: ../../docs/tutorials/3d/3d_performance_and_limitations.rst:28
msgid ""
"And there are many more examples of this! Game engines strive to be general "
"purpose in nature, so balanced algorithms are always favored over algorithms "
"that might be fast in some situations and slow in others.. or algorithms "
"that are fast but make usability more difficult."
msgstr ""

#: ../../docs/tutorials/3d/3d_performance_and_limitations.rst:33
msgid ""
"Godot is not an exception and, while it is designed to have backends "
"swappable for different algorithms, the default ones (or more like, the only "
"ones that are there for now) prioritize balance and flexibility over "
"performance."
msgstr ""

#: ../../docs/tutorials/3d/3d_performance_and_limitations.rst:38
msgid ""
"With this clear, the aim of this tutorial is to explain how to get the "
"maximum performance out of Godot."
msgstr ""

#: ../../docs/tutorials/3d/3d_performance_and_limitations.rst:42
#: ../../docs/tutorials/viewports/viewports.rst:174
msgid "Rendering"
msgstr ""

#: ../../docs/tutorials/3d/3d_performance_and_limitations.rst:44
msgid ""
"3D rendering is one of the most difficult areas to get performance from, so "
"this section will have a list of tips."
msgstr ""

#: ../../docs/tutorials/3d/3d_performance_and_limitations.rst:48
msgid "Reuse shaders and materials"
msgstr ""

#: ../../docs/tutorials/3d/3d_performance_and_limitations.rst:50
msgid ""
"The Godot renderer is a little different to what is out there. It's designed "
"to minimize GPU state changes as much as possible. :ref:"
"`class_SpatialMaterial` does a good job at reusing materials that need "
"similar shaders but, if custom shaders are used, make sure to reuse them as "
"much as possible. Godot's priorities will be like this:"
msgstr ""

#: ../../docs/tutorials/3d/3d_performance_and_limitations.rst:57
msgid ""
"**Reusing Materials**: The fewer different materials in the scene, the "
"faster the rendering will be. If a scene has a huge amount of objects (in "
"the hundreds or thousands) try reusing the materials or in the worst case "
"use atlases."
msgstr ""

#: ../../docs/tutorials/3d/3d_performance_and_limitations.rst:61
msgid ""
"**Reusing Shaders**: If materials can't be reused, at least try to re-use "
"shaders (or SpatialMaterials with different parameters but the same "
"configuration)."
msgstr ""

#: ../../docs/tutorials/3d/3d_performance_and_limitations.rst:65
msgid ""
"If a scene has, for example, 20.000 objects with 20.000 different materials "
"each, rendering will be slow. If the same scene has 20.000 objects, but only "
"uses 100 materials, rendering will be blazingly fast."
msgstr ""

#: ../../docs/tutorials/3d/3d_performance_and_limitations.rst:71
msgid "Pixel cost vs vertex cost"
msgstr ""

#: ../../docs/tutorials/3d/3d_performance_and_limitations.rst:73
msgid ""
"It is a common thought that the lower the number of polygons in a model, the "
"faster it will be rendered. This is *really* relative and depends on many "
"factors."
msgstr ""

#: ../../docs/tutorials/3d/3d_performance_and_limitations.rst:77
msgid ""
"On a modern PC and console, vertex cost is low. GPUs originally only "
"rendered triangles, so all the vertices:"
msgstr ""

#: ../../docs/tutorials/3d/3d_performance_and_limitations.rst:80
msgid "Had to be transformed by the CPU (including clipping)."
msgstr ""

#: ../../docs/tutorials/3d/3d_performance_and_limitations.rst:82
msgid "Had to be sent to the GPU memory from the main RAM."
msgstr ""

#: ../../docs/tutorials/3d/3d_performance_and_limitations.rst:84
msgid ""
"Nowadays, all this is handled inside the GPU, so the performance is "
"extremely high. 3D artists usually have the wrong feeling about polycount "
"performance because 3D DCCs (such as Blender, Max, etc.) need to keep "
"geometry in CPU memory in order for it to be edited, reducing actual "
"performance. Truth is, a model rendered by a 3D engine is much more optimal "
"than how 3D DCCs display them."
msgstr ""

#: ../../docs/tutorials/3d/3d_performance_and_limitations.rst:91
msgid ""
"On mobile devices, the story is different. PC and Console GPUs are brute-"
"force monsters that can pull as much electricity as they need from the power "
"grid. Mobile GPUs are limited to a tiny battery, so they need to be a lot "
"more power efficient."
msgstr ""

#: ../../docs/tutorials/3d/3d_performance_and_limitations.rst:96
msgid ""
"To be more efficient, mobile GPUs attempt to avoid *overdraw*. This means, "
"the same pixel on the screen being rendered (as in, with lighting "
"calculation, etc.) more than once. Imagine a town with several buildings, "
"GPUs don't know what is visible and what is hidden until they draw it. A "
"house might be drawn and then another house in front of it (rendering "
"happened twice for the same pixel!). PC GPUs normally don't care much about "
"this and just throw more pixel processors to the hardware to increase "
"performance (but this also increases power consumption)."
msgstr ""

#: ../../docs/tutorials/3d/3d_performance_and_limitations.rst:106
msgid ""
"On mobile, pulling more power is not an option, so a technique called \"Tile "
"Based Rendering\" is used (almost every mobile hardware uses a variant of "
"it), which divides the screen into a grid. Each cell keeps the list of "
"triangles drawn to it and sorts them by depth to minimize *overdraw*. This "
"technique improves performance and reduces power consumption, but takes a "
"toll on vertex performance. As a result, fewer vertices and triangles can be "
"processed for drawing."
msgstr ""

#: ../../docs/tutorials/3d/3d_performance_and_limitations.rst:114
msgid ""
"Generally, this is not so bad, but there is a corner case on mobile that "
"must be avoided, which is to have small objects with a lot of geometry "
"within a small portion of the screen. This forces mobile GPUs to put a lot "
"of strain on a single screen cell, considerably decreasing performance (as "
"all the other cells must wait for it to complete in order to display the "
"frame)."
msgstr ""

#: ../../docs/tutorials/3d/3d_performance_and_limitations.rst:121
msgid ""
"To make it short, do not worry about vertex count so much on mobile, but "
"avoid concentration of vertices in small parts of the screen. If, for "
"example, a character, NPC, vehicle, etc. is far away (so it looks tiny), use "
"a smaller level of detail (LOD) model instead."
msgstr ""

#: ../../docs/tutorials/3d/3d_performance_and_limitations.rst:126
msgid ""
"An extra situation where vertex cost must be considered is objects that have "
"extra processing per vertex, such as:"
msgstr ""

#: ../../docs/tutorials/3d/3d_performance_and_limitations.rst:129
msgid "Skinning (skeletal animation)"
msgstr ""

#: ../../docs/tutorials/3d/3d_performance_and_limitations.rst:130
msgid "Morphs (shape keys)"
msgstr ""

#: ../../docs/tutorials/3d/3d_performance_and_limitations.rst:131
msgid "Vertex Lit Objects (common on mobile)"
msgstr ""

#: ../../docs/tutorials/3d/3d_performance_and_limitations.rst:134
#: ../../docs/tutorials/misc/gles2_gles3_differences.rst:108
msgid "Texture compression"
msgstr ""

#: ../../docs/tutorials/3d/3d_performance_and_limitations.rst:136
msgid ""
"Godot offers to compress textures of 3D models when imported (VRAM "
"compression). Video RAM compression is not as efficient in size as PNG or "
"JPG when stored, but increases performance enormously when drawing."
msgstr ""

#: ../../docs/tutorials/3d/3d_performance_and_limitations.rst:140
msgid ""
"This is because the main goal of texture compression is bandwidth reduction "
"between memory and the GPU."
msgstr ""

#: ../../docs/tutorials/3d/3d_performance_and_limitations.rst:143
msgid ""
"In 3D, the shapes of objects depend more on the geometry than the texture, "
"so compression is generally not noticeable. In 2D, compression depends more "
"on shapes inside the textures, so the artifacts resulting from 2D "
"compression are more noticeable."
msgstr ""

#: ../../docs/tutorials/3d/3d_performance_and_limitations.rst:148
msgid ""
"As a warning, most Android devices do not support texture compression of "
"textures with transparency (only opaque), so keep this in mind."
msgstr ""

#: ../../docs/tutorials/3d/3d_performance_and_limitations.rst:152
msgid "Transparent objects"
msgstr ""

#: ../../docs/tutorials/3d/3d_performance_and_limitations.rst:154
msgid ""
"As mentioned before, Godot sorts objects by material and shader to improve "
"performance. This, however, can not be done on transparent objects. "
"Transparent objects are rendered from back to front to make blending with "
"what is behind work. As a result, please try to keep transparent objects to "
"a minimum! If an object has a small section with transparency, try to make "
"that section a separate material."
msgstr ""

#: ../../docs/tutorials/3d/3d_performance_and_limitations.rst:162
msgid "Level of detail (LOD)"
msgstr ""

#: ../../docs/tutorials/3d/3d_performance_and_limitations.rst:164
msgid ""
"As also mentioned before, using objects with fewer vertices can improve "
"performance in some cases. Godot has a simple system to change level of "
"detail, :ref:`GeometryInstance <class_GeometryInstance>` based objects have "
"a visibility range that can be defined. Having several GeometryInstance "
"objects in different ranges works as LOD."
msgstr ""

#: ../../docs/tutorials/3d/3d_performance_and_limitations.rst:172
msgid "Use instancing (MultiMesh)"
msgstr ""

#: ../../docs/tutorials/3d/3d_performance_and_limitations.rst:174
msgid ""
"If several identical objects have to be drawn in the same place or nearby, "
"try using :ref:`MultiMesh <class_MultiMesh>` instead. MultiMesh allows the "
"drawing of dozens of thousands of objects at very little performance cost, "
"making it ideal for flocks, grass, particles, etc."
msgstr ""

#: ../../docs/tutorials/3d/3d_performance_and_limitations.rst:181
msgid "Bake lighting"
msgstr ""

#: ../../docs/tutorials/3d/3d_performance_and_limitations.rst:183
msgid ""
"Small lights are usually not a performance issue. Shadows a little more. In "
"general, if several lights need to affect a scene, it's ideal to bake it (:"
"ref:`doc_baked_lightmaps`). Baking can also improve the scene quality by "
"adding indirect light bounces."
msgstr ""

#: ../../docs/tutorials/3d/3d_performance_and_limitations.rst:188
msgid ""
"If working on mobile, baking to texture is recommended, since this method is "
"even faster."
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:4
msgid "Spatial Material"
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:9
msgid ""
"``SpatialMaterial`` is a default 3D material that aims to provide most of "
"the features artists look for in a material, without the need for writing "
"shader code. However, it can be converted to shader code if additional "
"functionality is needed."
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:13
msgid "This tutorial explains most parameters present in ``SpatialMaterial``."
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:15
msgid ""
"There are three ways to add a ``SpatialMaterial`` to an object. It can be "
"added in the *Material* property of the mesh. It can be added in the "
"*Material* property of the node using the mesh (such as a MeshInstance "
"node), or in the *Material Override* property of the node using the mesh."
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:22
msgid ""
"If you add a material to the mesh itself, every time that mesh is used it "
"will have that material. If you add a material to the node using the mesh, "
"the material will only be used by that node, it will also override the "
"material property of the mesh. If a material is added in the *Material "
"Override* property of the node, it will only be used by that node. It will "
"also override the regular material property of the node and the material "
"property of the mesh."
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:32
msgid ""
"Spatial materials have many flags determining the general usage of a "
"material."
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:37
msgid "Transparent"
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:39
msgid ""
"In Godot, materials are not transparent unless specifically configured to "
"be. The main reason behind this is that transparent materials are rendered "
"using a different technique (sorted from back to front and rendered in "
"order)."
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:43
msgid ""
"This technique is less efficient (many state changes happen) and makes the "
"materials unusable with many mid- and post-processing effects (such as SSAO, "
"SSR, etc.) that require perfectly opaque geometry."
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:47
msgid ""
"For this reason, materials in Godot are assumed opaque unless specified "
"otherwise. The main settings that enable transparency are:"
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:50
msgid "Transparent flag (this one)"
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:51
msgid "Blend mode set to other than \"Mix\""
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:52
msgid "Enabling distance or proximity fade"
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:55
msgid "Use Shadow to Opacity"
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:57
#: ../../docs/tutorials/shading/shading_reference/spatial_shader.rst:75
msgid ""
"Lighting modifies the alpha so shadowed areas are opaque and non-shadowed "
"areas are transparent. Useful for overlaying shadows onto a camera feed in "
"AR."
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:61
msgid "Unshaded"
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:63
msgid ""
"In most cases it is common for materials to be affected by lighting (shaded)."
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:65
msgid ""
"However, in some cases you might want to show just the albedo (color) and "
"ignore the rest. Toggling this flag on will remove all shading and display "
"pure, unlit color."
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:72
msgid "Vertex Lighting"
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:74
msgid ""
"Godot has a more or less uniform cost per pixel thanks to depth pre-pass. "
"All lighting calculations are made by running the lighting shader on every "
"pixel."
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:77
msgid ""
"As these calculations are costly, performance can be brought down "
"considerably in some corner cases such as drawing several layers of "
"transparency (which is common in particle systems). Switching to per-vertex "
"lighting may help in these cases."
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:82
msgid ""
"Additionally, on low-end or mobile devices, switching to vertex lighting can "
"considerably increase rendering performance."
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:87
msgid ""
"Keep in mind that when vertex lighting is enabled, only directional lighting "
"can produce shadows (for performance reasons)."
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:91
msgid "No Depth Test"
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:93
msgid ""
"In order for close objects to appear over far away objects, depth testing is "
"performed. Disabling it has the result of objects appearing over (or under) "
"everything else."
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:97
msgid ""
"Disabling this makes the most sense for drawing indicators in world space, "
"and works very well with the *Render Priority* property of Material (see the "
"bottom of this page)."
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:104
msgid "Use Point Size"
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:106
msgid ""
"This option is only effective when the geometry rendered is made of points "
"(generally it's made of triangles when imported from 3D DCCs). If so, then "
"those points can be resized (see below)."
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:111
msgid "World Triplanar"
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:113
msgid ""
"When using triplanar mapping (see below, in the UV1 and UV2 settings), "
"triplanar is computed in object local space. This option makes triplanar "
"work in world space."
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:118
msgid "Fixed Size"
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:120
msgid ""
"This causes the object to be rendered at the same size no matter the "
"distance. This is useful mostly for indicators (no depth test and high "
"render priority) and some types of billboards."
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:125
msgid "Do Not Receive Shadows"
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:127
msgid ""
"Makes the object not receive any kind of shadow that would otherwise be cast "
"onto it."
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:131
msgid "Disable Ambient Light"
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:133
msgid ""
"Makes the object not receive any kind of ambient lighting that would "
"otherwise light it."
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:137
msgid "Ensure Correct Normals"
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:139
msgid "Fixes normals when non-uniform scaling is used."
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:142
msgid "Vertex Color"
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:144
msgid ""
"This setting allows choosing what is done by default to vertex colors that "
"come from your 3D modelling application. By default they are ignored."
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:150
msgid "Use as Albedo"
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:152
msgid "Choosing this option means vertex color is used as albedo color."
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:155
msgid "Is sRGB"
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:157
msgid ""
"Most 3D DCCs will likely export vertex colors as sRGB, so toggling this "
"option on will help them look correct."
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:161
#: ../../docs/tutorials/platform/services_for_ios.rst:87
#: ../../docs/tutorials/platform/services_for_ios.rst:127
#: ../../docs/tutorials/platform/services_for_ios.rst:198
#: ../../docs/tutorials/platform/services_for_ios.rst:242
#: ../../docs/tutorials/platform/services_for_ios.rst:387
msgid "Parameters"
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:163
msgid ""
"``SpatialMaterial`` also has several configurable parameters to tweak many "
"aspects of the rendering:"
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:169
msgid "Diffuse Mode"
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:171
msgid ""
"Specifies the algorithm used by diffuse scattering of light when hitting the "
"object. The default is *Burley*. Other modes are also available:"
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:174
msgid ""
"**Burley:** Default mode, the original Disney Principled PBS diffuse "
"algorithm."
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:175
msgid "**Lambert:** Is not affected by roughness."
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:176
msgid ""
"**Lambert Wrap:** Extends Lambert to cover more than 90 degrees when "
"roughness increases. Works great for hair and simulating cheap subsurface "
"scattering. This implementation is energy conserving."
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:179
msgid ""
"**Oren Nayar:** This implementation aims to take microsurfacing into account "
"(via roughness). Works well for clay-like materials and some types of cloth."
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:181
msgid ""
"**Toon:** Provides a hard cut for lighting, with smoothing affected by "
"roughness. It is recommended you disable sky contribution from your "
"environment's ambient light settings or disable ambient light in the spatial "
"material to achieve a better effect."
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:189
msgid "Specular Mode"
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:191
msgid ""
"Specifies how the specular blob will be rendered. The specular blob "
"represents the shape of a light source reflected in the object."
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:194
msgid "**ShlickGGX:** The most common blob used by PBR 3D engines nowadays."
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:195
msgid ""
"**Blinn:** Common in previous-generation engines. Not worth using nowadays, "
"but left here for the sake of compatibility."
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:197
msgid "**Phong:** Same as above."
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:198
msgid ""
"**Toon:** Creates a toon blob, which changes size depending on roughness."
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:199
msgid "**Disabled:** Sometimes the blob gets in the way. Begone!"
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:204
msgid "Blend Mode"
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:206
msgid ""
"Controls the blend mode for the material. Keep in mind that any mode other "
"than *Mix* forces the object to go through the transparent pipeline."
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:209
msgid ""
"**Mix:** Default blend mode, alpha controls how much the object is visible."
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:210
msgid ""
"**Add:** Object is blended additively, nice for flares or some fire-like "
"effects."
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:212
msgid "**Sub:** Object is subtracted."
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:213
msgid "**Mul:** Object is multiplied."
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:218
msgid "Cull Mode"
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:220
msgid ""
"Determines which side of the object is not drawn when backfaces are rendered:"
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:222
msgid "**Back:** The back of the object is culled when not visible (default)."
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:223
msgid "**Front:** The front of the object is culled when not visible."
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:224
msgid ""
"**Disabled:** Used for objects that are double-sided (no culling is "
"performed)."
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:227
msgid "Depth Draw Mode"
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:229
msgid "Specifies when depth rendering must take place."
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:231
msgid "**Opaque Only (default):** Depth is only drawn for opaque objects."
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:232
msgid ""
"**Always:** Depth draw is drawn for both opaque and transparent objects."
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:233
msgid ""
"**Never:** No depth draw takes place (do not confuse this with the No Depth "
"Test option above)."
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:235
msgid ""
"**Depth Pre-Pass:** For transparent objects, an opaque pass is made first "
"with the opaque parts, then transparency is drawn above. Use this option "
"with transparent grass or tree foliage."
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:242
msgid "Line Width"
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:244
msgid ""
"When drawing lines, specify the width of the lines being drawn. This option "
"is not available on most modern hardware."
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:248
msgid "Point Size"
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:250
msgid "When drawing points, specify the point size in pixels."
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:253
msgid "Billboard Mode"
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:255
msgid ""
"Enables billboard mode for drawing materials. This controls how the object "
"faces the camera:"
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:258
msgid "**Disabled:** Billboard mode is disabled."
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:259
msgid ""
"**Enabled:** Billboard mode is enabled, the object's -Z axis will always "
"face the camera."
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:261
msgid ""
"**Y-Billboard:** The object's X axis will always be aligned with the camera."
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:262
msgid ""
"**Particles:** Most suited for particle systems, because it allows "
"specifying animation options."
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:267
msgid "The above options are only enabled for Particle Billboard."
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:270
msgid "Billboard Keep Scale"
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:272
msgid "Enables scaling a mesh in billboard mode."
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:275
msgid "Grow"
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:277
msgid "Grows the object vertices in the direction pointed by their normals:"
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:281
msgid ""
"This is commonly used to create cheap outlines. Add a second material pass, "
"make it black and unshaded, reverse culling (Cull Front), and add some grow:"
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:288
msgid "Use Alpha Scissor"
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:290
msgid ""
"When transparency other than ``0`` or ``1`` is not needed, it's possible to "
"set a threshold to prevent the object from rendering semi-transparent pixels."
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:295
msgid ""
"This renders the object via the opaque pipeline, which is faster and allows "
"it to use mid- and post-process effects such as SSAO, SSR, etc."
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:299
msgid "Material colors, maps and channels"
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:301
msgid ""
"Besides the parameters, what defines materials themselves are the colors, "
"textures, and channels. Godot supports an extensive list of them. They are "
"described in detail below:"
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:306
msgid "Albedo"
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:308
msgid ""
"*Albedo* is the base color for the material, on which all the other settings "
"operate. When set to *Unshaded*, this is the only color that is visible. In "
"previous versions of Godot, this channel was named *Diffuse*. The change of "
"name mainly happened because, in PBR (Physically Based Rendering), this "
"color affects many more calculations than just the diffuse lighting path."
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:314
msgid "Albedo color and texture can be used together as they are multiplied."
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:316
msgid ""
"*Alpha channel* in albedo color and texture is also used for the object "
"transparency. If you use a color or texture with *alpha channel*, make sure "
"to either enable transparency or *alpha scissoring* for it to work."
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:321
msgid "Metallic"
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:323
msgid ""
"Godot uses a metallic model over competing models due to its simplicity. "
"This parameter defines how reflective the material is. The more reflective, "
"the less diffuse/ambient light affects the material and the more light is "
"reflected. This model is called \"energy-conserving\"."
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:328
msgid ""
"The *Specular* parameter is a general amount for the reflectivity (unlike "
"*Metallic*, this is not energy-conserving, so leave it at ``0.5`` and don't "
"touch it unless you need to)."
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:332
msgid ""
"The minimum internal reflectivity is ``0.04``, so it's impossible to make a "
"material completely unreflective, just like in real life."
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:338
msgid "Roughness"
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:340
msgid ""
"*Roughness* affects the way reflection happens. A value of ``0`` makes it a "
"perfect mirror while a value of ``1`` completely blurs the reflection "
"(simulating natural microsurfacing). Most common types of materials can be "
"achieved with the right combination of *Metallic* and *Roughness*."
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:348
msgid "Emission"
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:350
msgid ""
"*Emission* specifies how much light is emitted by the material (keep in mind "
"this does not include light surrounding geometry unless :ref:`doc_gi_probes` "
"are used). This value is added to the resulting final image and is not "
"affected by other lighting in the scene."
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:358
msgid "Normalmap"
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:360
msgid ""
"Normal mapping allows you to set a texture that represents finer shape "
"detail. This does not modify geometry, only the incident angle for light. In "
"Godot, only the red and green channels of normal maps are used for wider "
"compatibility."
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:367
msgid "Rim"
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:369
msgid ""
"Some fabrics have small micro-fur that causes light to scatter around it. "
"Godot emulates this with the *Rim* parameter. Unlike other rim lighting "
"implementations, which just use the emission channel, this one actually "
"takes light into account (no light means no rim). This makes the effect "
"considerably more believable."
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:376
msgid ""
"Rim size depends on roughness, and there is a special parameter to specify "
"how it must be colored. If *Tint* is ``0``, the color of the light is used "
"for the rim. If *Tint* is ``1``, then the albedo of the material is used. "
"Using intermediate values generally works best."
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:382
#: ../../docs/tutorials/misc/gles2_gles3_differences.rst:61
msgid "Clearcoat"
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:384
#: ../../docs/tutorials/3d/spatial_material.rst:393
#: ../../docs/tutorials/3d/spatial_material.rst:415
#: ../../docs/tutorials/3d/spatial_material.rst:428
#: ../../docs/tutorials/3d/spatial_material.rst:448
#: ../../docs/tutorials/3d/environment_and_post_processing.rst:139
#: ../../docs/tutorials/3d/environment_and_post_processing.rst:153
#: ../../docs/tutorials/3d/environment_and_post_processing.rst:195
#: ../../docs/tutorials/3d/environment_and_post_processing.rst:221
#: ../../docs/tutorials/3d/environment_and_post_processing.rst:267
#: ../../docs/tutorials/3d/environment_and_post_processing.rst:281
#: ../../docs/tutorials/3d/environment_and_post_processing.rst:300
#: ../../docs/tutorials/3d/environment_and_post_processing.rst:353
msgid "*This feature is only available when using the GLES3 backend.*"
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:386
msgid ""
"The *Clearcoat* parameter is used to add a secondary pass of transparent "
"coat to the material. This is common in car paint and toys. In practice, "
"it's a smaller specular blob added on top of the existing material."
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:391
#: ../../docs/tutorials/misc/gles2_gles3_differences.rst:60
msgid "Anisotropy"
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:395
msgid ""
"This changes the shape of the specular blob and aligns it to tangent space. "
"Anisotropy is commonly used with hair, or to make materials such as brushed "
"aluminum more realistic. It works especially well when combined with "
"flowmaps."
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:402
msgid "Ambient Occlusion"
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:404
msgid ""
"It is possible to specify a baked ambient occlusion map. This map affects "
"how much ambient light reaches each surface of the object (it does not "
"affect direct light by default). While it is possible to use Screen-Space "
"Ambient Occlusion (SSAO) to generate ambient occlusion, nothing beats the "
"quality of a well-baked AO map. It is recommended to bake ambient occlusion "
"whenever possible."
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:413
msgid "Depth"
msgstr "깊이"

#: ../../docs/tutorials/3d/spatial_material.rst:417
msgid ""
"Setting a depth map on a material produces a ray-marched search to emulate "
"the proper displacement of cavities along the view direction. This is not "
"real added geometry, but an illusion of depth. It may not work for complex "
"objects, but it produces a realistic depth effect for textures. For best "
"results, *Depth* should be used together with normal mapping."
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:426
msgid "Subsurface Scattering"
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:430
msgid ""
"This effect emulates light that penetrates an object's surface, is "
"scattered, and then comes out. It is useful to create realistic skin, "
"marble, colored liquids, etc."
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:437
msgid "Transmission"
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:439
msgid ""
"This controls how much light from the lit side (visible to light) is "
"transferred to the dark side (opposite from the light). This works well for "
"thin objects such as plant leaves, grass, human ears, etc."
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:446
#: ../../docs/tutorials/misc/gles2_gles3_differences.rst:58
msgid "Refraction"
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:450
msgid ""
"When refraction is enabled, it supersedes alpha blending, and Godot attempts "
"to fetch information from behind the object being rendered instead. This "
"allows distorting the transparency in a way similar to refraction in real "
"life."
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:457
msgid "Detail"
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:459
msgid ""
"Godot allows using secondary albedo and normal maps to generate a detail "
"texture, which can be blended in many ways. By combining this with secondary "
"UV or triplanar modes, many interesting textures can be achieved."
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:466
msgid "UV1 and UV2"
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:468
msgid ""
"Godot supports two UV channels per material. Secondary UV is often useful "
"for ambient occlusion or emission (baked light). UVs can be scaled and "
"offset, which is useful when using repeating textures."
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:473
msgid "Triplanar Mapping"
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:475
msgid ""
"Triplanar mapping is supported for both UV1 and UV2. This is an alternative "
"way to obtain texture coordinates, sometimes called \"Autotexture\". "
"Textures are sampled in X, Y and Z and blended by the normal. Triplanar "
"mapping can be performed in either world space or object space."
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:480
msgid ""
"In the image below, you can see how all primitives share the same material "
"with world triplanar, so the brick texture continues smoothly between them."
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:486
msgid "Proximity and distance fade"
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:488
msgid ""
"Godot allows materials to fade by proximity to each other as well as "
"depending on the distance from the viewer. Proximity fade is useful for "
"effects such as soft particles or a mass of water with a smooth blending to "
"the shores. Distance fade is useful for light shafts or indicators that are "
"only present after a given distance."
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:494
msgid ""
"Keep in mind enabling these enables alpha blending, so abusing them for an "
"entire scene is usually not a good idea."
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:500
msgid "Render priority"
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:502
msgid ""
"The rendering order of objects can be changed, although this is mostly "
"useful for transparent objects (or opaque objects that perform depth draw "
"but no color draw, such as cracks on the floor)."
msgstr ""

#: ../../docs/tutorials/3d/lights_and_shadows.rst:4
msgid "Lights and shadows"
msgstr ""

#: ../../docs/tutorials/3d/lights_and_shadows.rst:9
msgid ""
"Light sources emit light that mixes with the materials and produces a "
"visible result. Light can come from several types of sources in a scene:"
msgstr ""

#: ../../docs/tutorials/3d/lights_and_shadows.rst:12
msgid ""
"From the Material itself in the form of the emission color (though it does "
"not affect nearby objects unless baked)."
msgstr ""

#: ../../docs/tutorials/3d/lights_and_shadows.rst:14
msgid "Light Nodes: Directional, Omni and Spot."
msgstr ""

#: ../../docs/tutorials/3d/lights_and_shadows.rst:15
msgid "Ambient Light in the :ref:`Environment <class_Environment>`."
msgstr ""

#: ../../docs/tutorials/3d/lights_and_shadows.rst:17
msgid "Baked Light (read :ref:`doc_baked_lightmaps`)."
msgstr ""

#: ../../docs/tutorials/3d/lights_and_shadows.rst:19
msgid ""
"The emission color is a material property. You can read more about it in "
"the :ref:`doc_spatial_material` tutorial."
msgstr ""

#: ../../docs/tutorials/3d/lights_and_shadows.rst:23
msgid "Light nodes"
msgstr ""

#: ../../docs/tutorials/3d/lights_and_shadows.rst:25
msgid ""
"There are three types of light nodes: `Directional light`_, `Omni light`_ "
"and `Spot light`_. Let's take a look at the common parameters for lights:"
msgstr ""

#: ../../docs/tutorials/3d/lights_and_shadows.rst:31
msgid "Each one has a specific function:"
msgstr ""

#: ../../docs/tutorials/3d/lights_and_shadows.rst:33
msgid "**Color**: Base color for emitted light."
msgstr ""

#: ../../docs/tutorials/3d/lights_and_shadows.rst:34
msgid ""
"**Energy**: Energy multiplier. This is useful for saturating lights or "
"working with :ref:`doc_high_dynamic_range`."
msgstr ""

#: ../../docs/tutorials/3d/lights_and_shadows.rst:35
msgid ""
"**Indirect Energy**: Secondary multiplier used with indirect light (light "
"bounces). This works in baked light or GIProbe."
msgstr ""

#: ../../docs/tutorials/3d/lights_and_shadows.rst:36
msgid ""
"**Negative**: Light becomes subtractive instead of additive. It's sometimes "
"useful to manually compensate some dark corners."
msgstr ""

#: ../../docs/tutorials/3d/lights_and_shadows.rst:37
msgid ""
"**Specular**: Affects the intensity of the specular blob in objects affected "
"by this light. At zero, this light becomes a pure diffuse light."
msgstr ""

#: ../../docs/tutorials/3d/lights_and_shadows.rst:38
msgid ""
"**Bake Mode**: Sets the bake mode for the light. For more information see :"
"ref:`doc_baked_lightmaps`"
msgstr ""

#: ../../docs/tutorials/3d/lights_and_shadows.rst:39
msgid ""
"**Cull Mask**: Objects that are in the selected layers below will be "
"affected by this light."
msgstr ""

#: ../../docs/tutorials/3d/lights_and_shadows.rst:42
msgid "Shadow mapping"
msgstr ""

#: ../../docs/tutorials/3d/lights_and_shadows.rst:44
msgid ""
"Lights can optionally cast shadows. This gives them greater realism (light "
"does not reach occluded areas), but it can incur a bigger performance cost. "
"There is a list of generic shadow parameters, each also has a specific "
"function:"
msgstr ""

#: ../../docs/tutorials/3d/lights_and_shadows.rst:48
msgid "**Enabled**: Check to enable shadow mapping in this light."
msgstr ""

#: ../../docs/tutorials/3d/lights_and_shadows.rst:49
msgid ""
"**Color**: Areas occluded are multiplied by this color. It is black by "
"default, but it can be changed to tint shadows."
msgstr ""

#: ../../docs/tutorials/3d/lights_and_shadows.rst:50
msgid ""
"**Bias**: When this parameter is too small, self shadowing occurs. When too "
"large, shadows separate from the casters. Tweak to what works best for you."
msgstr ""

#: ../../docs/tutorials/3d/lights_and_shadows.rst:51
msgid ""
"**Contact**: Performs a short screen-space raycast to reduce the gap "
"generated by the bias. Contact shadows are only available when using the "
"GLES3 backend."
msgstr ""

#: ../../docs/tutorials/3d/lights_and_shadows.rst:52
msgid ""
"**Reverse Cull Faces**: Some scenes work better when shadow mapping is "
"rendered with face-culling inverted."
msgstr ""

#: ../../docs/tutorials/3d/lights_and_shadows.rst:54
msgid ""
"Below is an image of what tweaking bias looks like. Default values work for "
"most cases, but in general it depends on the size and complexity of geometry."
msgstr ""

#: ../../docs/tutorials/3d/lights_and_shadows.rst:59
msgid "Finally, if gaps can't be solved, the **Contact** option can help:"
msgstr ""

#: ../../docs/tutorials/3d/lights_and_shadows.rst:63
msgid ""
"Any sort of bias issues can always be fixed by increasing the shadow map "
"resolution, although that may lead to decreased performance on low-end "
"hardware."
msgstr ""

#: ../../docs/tutorials/3d/lights_and_shadows.rst:67
msgid "Directional light"
msgstr ""

#: ../../docs/tutorials/3d/lights_and_shadows.rst:69
msgid ""
"This is the most common type of light and represents a light source very far "
"away (such as the sun). It is also the cheapest light to compute and should "
"be used whenever possible (although it's not the cheapest shadow-map to "
"compute, but more on that later)."
msgstr ""

#: ../../docs/tutorials/3d/lights_and_shadows.rst:73
msgid ""
"Directional light models an infinite number of parallel light rays covering "
"the whole scene. The directional light node is represented by a big arrow "
"which indicates the direction of the light rays. However, the position of "
"the node does not affect the lighting at all and can be anywhere."
msgstr ""

#: ../../docs/tutorials/3d/lights_and_shadows.rst:80
msgid ""
"Every face whose front-side is hit by the light rays is lit, while the "
"others stay dark. Most light types have specific parameters, but directional "
"lights are pretty simple in nature, so they don't."
msgstr ""

#: ../../docs/tutorials/3d/lights_and_shadows.rst:84
msgid "Directional shadow mapping"
msgstr ""

#: ../../docs/tutorials/3d/lights_and_shadows.rst:86
msgid ""
"To compute shadow maps, the scene is rendered (only depth) from an "
"orthogonal point of view that covers the whole scene (or up to the max "
"distance). There is, however, a problem with this approach because objects "
"closer to the camera receive blocky shadows."
msgstr ""

#: ../../docs/tutorials/3d/lights_and_shadows.rst:92
msgid ""
"To fix this, a technique named \"Parallel Split Shadow Maps\" (or PSSM) is "
"used. This splits the view frustum in 2 or 4 areas. Each area gets its own "
"shadow map. This allows small areas close to the viewer to have the same "
"shadow resolution as a huge, far-away area."
msgstr ""

#: ../../docs/tutorials/3d/lights_and_shadows.rst:97
msgid "With this, shadows become more detailed:"
msgstr ""

#: ../../docs/tutorials/3d/lights_and_shadows.rst:101
msgid "To control PSSM, a number of parameters are exposed:"
msgstr ""

#: ../../docs/tutorials/3d/lights_and_shadows.rst:105
msgid ""
"Each split distance is controlled relative to the camera far (or shadow "
"**Max Distance** if greater than zero), so *0.0* is the eye position and "
"*1.0* is where the shadow ends at a distance. Splits are in-between. Default "
"values generally work well, but tweaking the first split a bit is common to "
"give more detail to close objects (like a character in a third person game)."
msgstr ""

#: ../../docs/tutorials/3d/lights_and_shadows.rst:111
msgid ""
"Always make sure to set a shadow *Max Distance* according to what the scene "
"needs. A lower maximum distance will result in better-looking shadows."
msgstr ""

#: ../../docs/tutorials/3d/lights_and_shadows.rst:114
msgid ""
"Sometimes, the transition between a split and the next can look bad. To fix "
"this, the **\"Blend Splits\"** option can be turned on, which sacrifices "
"detail in exchange for smoother transitions:"
msgstr ""

#: ../../docs/tutorials/3d/lights_and_shadows.rst:120
msgid ""
"The **\"Normal Bias\"** parameter can be used to fix special cases of self "
"shadowing when objects are perpendicular to the light. The only downside is "
"that it makes the shadow a bit thinner."
msgstr ""

#: ../../docs/tutorials/3d/lights_and_shadows.rst:126
msgid ""
"The **\"Bias Split Scale\"** parameter can control extra bias for the splits "
"that are far away. If self shadowing occurs only on the splits far away, "
"this value can fix them."
msgstr ""

#: ../../docs/tutorials/3d/lights_and_shadows.rst:129
msgid "Finally, the **\"Depth Range\"** has two settings:"
msgstr ""

#: ../../docs/tutorials/3d/lights_and_shadows.rst:131
msgid ""
"**Stable**: Keeps the shadow stable while the camera moves, and the blocks "
"that appear in the outline when close to the shadow edges remain in-place. "
"This is the default and generally desired, but it reduces the effective "
"shadow resolution."
msgstr ""

#: ../../docs/tutorials/3d/lights_and_shadows.rst:132
msgid ""
"**Optimized**: Tries to achieve the maximum resolution available at any "
"given time. This may result in a \"moving saw\" effect on shadow edges, but "
"at the same time the shadow looks more detailed (so this effect may be "
"subtle enough to be forgiven)."
msgstr ""

#: ../../docs/tutorials/3d/lights_and_shadows.rst:134
msgid "Just experiment which setting works better for your scene."
msgstr ""

#: ../../docs/tutorials/3d/lights_and_shadows.rst:136
msgid ""
"Shadowmap size for directional lights can be changed in Project Settings -> "
"Rendering -> Quality:"
msgstr ""

#: ../../docs/tutorials/3d/lights_and_shadows.rst:140
msgid ""
"Increasing it can solve bias problems, but decrease performance. Shadow "
"mapping is an art of tweaking."
msgstr ""

#: ../../docs/tutorials/3d/lights_and_shadows.rst:143
msgid "Omni light"
msgstr ""

#: ../../docs/tutorials/3d/lights_and_shadows.rst:145
msgid ""
"Omni light is a point source that emits light spherically in all directions "
"up to a given radius."
msgstr ""

#: ../../docs/tutorials/3d/lights_and_shadows.rst:150
msgid ""
"In real life, light attenuation is an inverse function, which means omni "
"lights don't have a radius. This is a problem because it means computing "
"several omni lights would become demanding."
msgstr ""

#: ../../docs/tutorials/3d/lights_and_shadows.rst:153
msgid ""
"To solve this, a *Range* is introduced together with an attenuation function."
msgstr ""

#: ../../docs/tutorials/3d/lights_and_shadows.rst:157
msgid ""
"These two parameters allow tweaking how this works visually in order to find "
"aesthetically pleasing results."
msgstr ""

#: ../../docs/tutorials/3d/lights_and_shadows.rst:163
msgid "Omni shadow mapping"
msgstr ""

#: ../../docs/tutorials/3d/lights_and_shadows.rst:165
msgid ""
"Omni light shadow mapping is relatively straightforward. The main issue that "
"needs to be considered is the algorithm used to render it."
msgstr ""

#: ../../docs/tutorials/3d/lights_and_shadows.rst:168
msgid ""
"Omni Shadows can be rendered as either **\"Dual Paraboloid\" or \"Cube Mapped"
"\"**. The former renders quickly, but can cause deformations, while the "
"later is more correct, but costlier."
msgstr ""

#: ../../docs/tutorials/3d/lights_and_shadows.rst:174
msgid ""
"If the objects being rendered are mostly irregular, Dual Paraboloid is "
"usually enough. In any case, as these shadows are cached in a shadow atlas "
"(more on that at the end), it may not make a difference in performance for "
"most scenes."
msgstr ""

#: ../../docs/tutorials/3d/lights_and_shadows.rst:179
msgid "Spot light"
msgstr ""

#: ../../docs/tutorials/3d/lights_and_shadows.rst:181
msgid ""
"Spot lights are similar to omni lights, except they emit light only into a "
"cone (or \"cutoff\"). They are useful to simulate flashlights, car lights, "
"reflectors, spots, etc. This type of light is also attenuated towards the "
"opposite direction it points to."
msgstr ""

#: ../../docs/tutorials/3d/lights_and_shadows.rst:188
msgid ""
"Spot lights share the same **Range** and **Attenuation** as **OmniLight**, "
"and add two extra parameters:"
msgstr ""

#: ../../docs/tutorials/3d/lights_and_shadows.rst:190
msgid "**Angle**: The aperture angle of the light"
msgstr ""

#: ../../docs/tutorials/3d/lights_and_shadows.rst:191
msgid ""
"**Angle Attenuation**: The cone attenuation, which helps soften the cone "
"borders."
msgstr ""

#: ../../docs/tutorials/3d/lights_and_shadows.rst:194
msgid "Spot shadow mapping"
msgstr ""

#: ../../docs/tutorials/3d/lights_and_shadows.rst:196
msgid ""
"Spots don't need any parameters for shadow mapping. Keep in mind that, at "
"more than 89 degrees of aperture, shadows stop functioning for spots, and "
"you should consider using an Omni light instead."
msgstr ""

#: ../../docs/tutorials/3d/lights_and_shadows.rst:200
msgid "Shadow atlas"
msgstr ""

#: ../../docs/tutorials/3d/lights_and_shadows.rst:202
msgid ""
"Unlike Directional lights, which have their own shadow texture, Omni and "
"Spot lights are assigned to slots of a shadow atlas. This atlas can be "
"configured in Project Settings -> Rendering -> Quality -> Shadow Atlas."
msgstr ""

#: ../../docs/tutorials/3d/lights_and_shadows.rst:207
msgid ""
"The resolution applies to the whole Shadow Atlas. This atlas is divided into "
"four quadrants:"
msgstr ""

#: ../../docs/tutorials/3d/lights_and_shadows.rst:211
msgid ""
"Each quadrant can be subdivided to allocate any number of shadow maps; the "
"following is the default subdivision:"
msgstr ""

#: ../../docs/tutorials/3d/lights_and_shadows.rst:215
msgid ""
"The allocation logic is simple. The biggest shadow map size (when no "
"subdivision is used) represents a light the size of the screen (or bigger). "
"Subdivisions (smaller maps) represent shadows for lights that are further "
"away from view and proportionally smaller."
msgstr ""

#: ../../docs/tutorials/3d/lights_and_shadows.rst:220
msgid "Every frame, the following procedure is performed for all lights:"
msgstr ""

#: ../../docs/tutorials/3d/lights_and_shadows.rst:222
msgid ""
"Check if the light is on a slot of the right size. If not, re-render it and "
"move it to a larger/smaller slot."
msgstr ""

#: ../../docs/tutorials/3d/lights_and_shadows.rst:223
msgid ""
"Check if any object affecting the shadow map has changed. If it did, re-"
"render the light."
msgstr ""

#: ../../docs/tutorials/3d/lights_and_shadows.rst:224
msgid ""
"If neither of the above has happened, nothing is done, and the shadow is "
"left untouched."
msgstr ""

#: ../../docs/tutorials/3d/lights_and_shadows.rst:226
msgid ""
"If the slots in a quadrant are full, lights are pushed back to smaller "
"slots, depending on size and distance."
msgstr ""

#: ../../docs/tutorials/3d/lights_and_shadows.rst:228
msgid ""
"This allocation strategy works for most games, but you may want to use a "
"separate one in some cases (for example, a top-down game where all lights "
"are around the same size and quadrants may all have the same subdivision)."
msgstr ""

#: ../../docs/tutorials/3d/lights_and_shadows.rst:232
msgid "Shadow filter quality"
msgstr ""

#: ../../docs/tutorials/3d/lights_and_shadows.rst:234
msgid ""
"The filter quality of shadows can be tweaked. This can be found in Project "
"Settings -> Rendering -> Quality -> Shadows. Godot supports no filter, PCF5 "
"and PCF13."
msgstr ""

#: ../../docs/tutorials/3d/lights_and_shadows.rst:240
msgid "It affects the blockyness of the shadow outline:"
msgstr ""

#: ../../docs/tutorials/3d/reflection_probes.rst:4
msgid "Reflection probes"
msgstr ""

#: ../../docs/tutorials/3d/reflection_probes.rst:9
msgid ""
"As stated in the :ref:`doc_spatial_material`, objects can show reflected or "
"diffuse light. Reflection probes are used as a source of reflected and "
"ambient light for objects inside their area of influence."
msgstr ""

#: ../../docs/tutorials/3d/reflection_probes.rst:12
msgid ""
"A probe of this type captures the surroundings (as a sort of 360 degrees "
"image), and stores versions of it with increasing levels of *blur*. This is "
"used to simulate roughness in materials, as well as ambient lighting."
msgstr ""

#: ../../docs/tutorials/3d/reflection_probes.rst:15
msgid ""
"While these probes are an efficient way of storing reflections, they have a "
"few shortcomings:"
msgstr ""

#: ../../docs/tutorials/3d/reflection_probes.rst:17
msgid ""
"They are efficient to render, but expensive to compute. This leads to a "
"default behavior where they only capture on scene load."
msgstr ""

#: ../../docs/tutorials/3d/reflection_probes.rst:18
msgid ""
"They work best for rectangular shaped rooms or places, otherwise the "
"reflections shown are not as faithful (especially when roughness is 0)."
msgstr ""

#: ../../docs/tutorials/3d/reflection_probes.rst:23
msgid ""
"Create a ReflectionProbe node and wrap it around the area where you want to "
"have reflections:"
msgstr ""

#: ../../docs/tutorials/3d/reflection_probes.rst:27
msgid ""
"This should result in immediate local reflections. If you are using a Sky "
"texture, reflections are by default blended with it."
msgstr ""

#: ../../docs/tutorials/3d/reflection_probes.rst:30
msgid ""
"By default, on interiors, reflections may appear not to have much "
"consistence. In this scenario, make sure to tick the *\"Box Correct\"* "
"property."
msgstr ""

#: ../../docs/tutorials/3d/reflection_probes.rst:36
msgid ""
"This setting changes the reflection from an infinite skybox to reflecting a "
"box the size of the probe:"
msgstr ""

#: ../../docs/tutorials/3d/reflection_probes.rst:41
msgid ""
"Adjusting the box walls may help improve the reflection a bit, but it will "
"always look best in box shaped rooms."
msgstr ""

#: ../../docs/tutorials/3d/reflection_probes.rst:44
msgid ""
"The probe captures the surrounding from the center of the gizmo. If, for "
"some reason, the room shape or contents occlude the center, it can be "
"displaced to an empty place by moving the handles in the center:"
msgstr ""

#: ../../docs/tutorials/3d/reflection_probes.rst:50
msgid ""
"By default, shadow mapping is disabled when rendering probes (only in the "
"rendered image inside the probe, not the actual scene). This is a simple way "
"to save on performance and memory. If you want shadows in the probe, they "
"can be toggled on/off with the *Enable Shadow* setting:"
msgstr ""

#: ../../docs/tutorials/3d/reflection_probes.rst:57
msgid ""
"Finally, keep in mind that you may not want the Reflection Probe to render "
"some objects. A typical scenario is an enemy inside the room which will move "
"around. To keep objects from being rendered in the reflections, use the "
"*Cull Mask* setting:"
msgstr ""

#: ../../docs/tutorials/3d/reflection_probes.rst:65
#: ../../docs/tutorials/3d/gi_probes.rst:88
msgid "Interior vs exterior"
msgstr ""

#: ../../docs/tutorials/3d/reflection_probes.rst:67
msgid ""
"If you are using reflection probes in an interior setting, it is recommended "
"that the **Interior** property be enabled. This stops the probe from "
"rendering the sky and also allows custom ambient lighting settings."
msgstr ""

#: ../../docs/tutorials/3d/reflection_probes.rst:73
msgid ""
"When probes are set to **Interior**, custom constant ambient lighting can be "
"specified per probe. Just choose a color and an energy."
msgstr ""

#: ../../docs/tutorials/3d/reflection_probes.rst:76
msgid ""
"Optionally, you can blend this ambient light with the probe diffuse capture "
"by tweaking the **Ambient Contribution** property (0.0 means pure ambient "
"color, while 1.0 means pure diffuse capture)."
msgstr ""

#: ../../docs/tutorials/3d/reflection_probes.rst:81
msgid "Blending"
msgstr ""

#: ../../docs/tutorials/3d/reflection_probes.rst:83
msgid ""
"Multiple reflection probes can be used, and Godot will blend them where they "
"overlap using a smart algorithm:"
msgstr ""

#: ../../docs/tutorials/3d/reflection_probes.rst:87
msgid ""
"As you can see, this blending is never perfect (after all, these are box "
"reflections, not real reflections), but these artifacts are only visible "
"when using perfectly mirrored reflections. Normally, scenes have normal "
"mapping and varying levels of roughness, which can hide this."
msgstr ""

#: ../../docs/tutorials/3d/reflection_probes.rst:93
msgid ""
"Alternatively, Reflection Probes work well blended together with Screen "
"Space Reflections to solve these problems. Combining them makes local "
"reflections appear more faithful, while probes are only used as a fallback "
"when no screen-space information is found:"
msgstr ""

#: ../../docs/tutorials/3d/reflection_probes.rst:99
msgid ""
"Finally, blending interior and exterior probes is the recommended approach "
"when making levels that combine both interiors and exteriors. Near the door, "
"a probe can be marked as *exterior* (so it will get sky reflections) while "
"on the inside, it can be interior."
msgstr ""

#: ../../docs/tutorials/3d/reflection_probes.rst:104
msgid "Reflection atlas"
msgstr ""

#: ../../docs/tutorials/3d/reflection_probes.rst:106
msgid ""
"In the current renderer implementation, all probes are the same size and are "
"fit into a Reflection Atlas. The size and amount of probes can be customized "
"in Project Settings -> Quality -> Reflections"
msgstr ""

#: ../../docs/tutorials/3d/gi_probes.rst:4
msgid "GI Probes"
msgstr ""

#: ../../docs/tutorials/3d/gi_probes.rst:9
msgid ""
"This feature is only available when using the GLES3 backend. :ref:"
"`doc_baked_lightmaps` can be used as an alternative when using the GLES2 "
"renderer."
msgstr ""

#: ../../docs/tutorials/3d/gi_probes.rst:13
msgid ""
"Just like with :ref:`doc_reflection_probes`, and as stated in the :ref:"
"`doc_spatial_material`, objects can show reflected or diffuse light. GI "
"Probes are similar to Reflection Probes, but they use a different and more "
"complex technique to produce indirect light and reflections."
msgstr ""

#: ../../docs/tutorials/3d/gi_probes.rst:18
msgid ""
"The strength of GI Probes is real-time, high quality, indirect light. While "
"the scene needs a quick pre-bake for the static objects that will be used, "
"lights can be added, changed or removed, and this will be updated in real-"
"time. Dynamic objects that move within one of these probes will also receive "
"indirect lighting from the scene automatically."
msgstr ""

#: ../../docs/tutorials/3d/gi_probes.rst:24
msgid ""
"Just like with ``ReflectionProbe``, ``GIProbe`` can be blended (in a bit "
"more limited way), so it is possible to provide full real-time lighting for "
"a stage without having to resort to lightmaps."
msgstr ""

#: ../../docs/tutorials/3d/gi_probes.rst:28
msgid "The main downsides of ``GIProbe`` are:"
msgstr "``GIProbe``\\ 의 주요 단점은 이러합니다:"

#: ../../docs/tutorials/3d/gi_probes.rst:30
msgid ""
"A small amount of light leaking can occur if the level is not carefully "
"designed. This must be artist-tweaked."
msgstr ""

#: ../../docs/tutorials/3d/gi_probes.rst:31
msgid ""
"Performance requirements are higher than for lightmaps, so it may not run "
"properly in low-end integrated GPUs (may need to reduce resolution)."
msgstr ""

#: ../../docs/tutorials/3d/gi_probes.rst:32
msgid ""
"Reflections are voxelized, so they don't look as sharp as with "
"``ReflectionProbe``. However, in exchange they are volumetric, so any room "
"size or shape works for them. Mixing them with Screen Space Reflection also "
"works well."
msgstr ""

#: ../../docs/tutorials/3d/gi_probes.rst:33
msgid ""
"They consume considerably more video memory than Reflection Probes, so they "
"must be used with care in the right subdivision sizes."
msgstr ""

#: ../../docs/tutorials/3d/gi_probes.rst:38
msgid ""
"Just like a ``ReflectionProbe``, simply set up the ``GIProbe`` by wrapping "
"it around the geometry that will be affected."
msgstr ""

#: ../../docs/tutorials/3d/gi_probes.rst:43
msgid ""
"Afterwards, make sure to enable the geometry will be baked. This is "
"important in order for ``GIProbe`` to recognize objects, otherwise they will "
"be ignored:"
msgstr ""

#: ../../docs/tutorials/3d/gi_probes.rst:48
msgid ""
"Once the geometry is set up, push the Bake button that appears on the 3D "
"editor toolbar to begin the pre-baking process:"
msgstr ""

#: ../../docs/tutorials/3d/gi_probes.rst:54
msgid "Adding lights"
msgstr "빛 추가하기"

#: ../../docs/tutorials/3d/gi_probes.rst:56
msgid ""
"Unless there are materials with emission, ``GIProbe`` does nothing by "
"default. Lights need to be added to the scene to have an effect."
msgstr ""

#: ../../docs/tutorials/3d/gi_probes.rst:59
msgid ""
"The effect of indirect light can be viewed quickly (it is recommended you "
"turn off all ambient/sky lighting to tweak this, though, as shown below):"
msgstr ""

#: ../../docs/tutorials/3d/gi_probes.rst:64
msgid ""
"In some situations, though, indirect light may be too weak. Lights have an "
"indirect multiplier to tweak this:"
msgstr ""

#: ../../docs/tutorials/3d/gi_probes.rst:69
msgid ""
"And, as ``GIProbe`` lighting updates in real-time, this effect is immediate:"
msgstr ""

#: ../../docs/tutorials/3d/gi_probes.rst:74
msgid "Reflections"
msgstr ""

#: ../../docs/tutorials/3d/gi_probes.rst:76
msgid ""
"For very metallic materials with low roughness, it's possible to appreciate "
"voxel reflections. Keep in mind that these have far less detail than "
"Reflection Probes or Screen Space Reflections, but fully reflect "
"volumetrically."
msgstr ""

#: ../../docs/tutorials/3d/gi_probes.rst:82
msgid ""
"``GIProbe``\\ s can be easily mixed with Reflection Probes and Screen Space "
"Reflections, as a full 3-stage fallback-chain. This allows to have precise "
"reflections where needed:"
msgstr ""

#: ../../docs/tutorials/3d/gi_probes.rst:90
msgid ""
"GI Probes normally allow mixing with lighting from the sky. This can be "
"disabled when turning on the *Interior* setting."
msgstr ""

#: ../../docs/tutorials/3d/gi_probes.rst:95
msgid ""
"The difference becomes clear in the image below, where light from the sky "
"goes from spreading inside to being ignored."
msgstr ""

#: ../../docs/tutorials/3d/gi_probes.rst:100
msgid ""
"As complex buildings may mix interiors with exteriors, combining GIProbes "
"for both parts works well."
msgstr ""

#: ../../docs/tutorials/3d/gi_probes.rst:104
msgid "Tweaking"
msgstr ""

#: ../../docs/tutorials/3d/gi_probes.rst:106
msgid "GI Probes support a few parameters for tweaking:"
msgstr ""

#: ../../docs/tutorials/3d/gi_probes.rst:110
msgid ""
"**Subdiv** Subdivision used for the probe. The default (128) is generally "
"good for small- to medium-sized areas. Bigger subdivisions use more memory."
msgstr ""

#: ../../docs/tutorials/3d/gi_probes.rst:111
msgid "**Extents** Size of the probe. Can be tweaked from the gizmo."
msgstr ""

#: ../../docs/tutorials/3d/gi_probes.rst:112
msgid ""
"**Dynamic Range** Maximum light energy the probe can absorb. Higher values "
"allow brighter light, but with less color detail."
msgstr ""

#: ../../docs/tutorials/3d/gi_probes.rst:113
msgid ""
"**Energy** Multiplier for all the probe. Can be used to make the indirect "
"light brighter (although it's better to tweak this from the light itself)."
msgstr ""

#: ../../docs/tutorials/3d/gi_probes.rst:114
msgid "**Propagation** How much light propagates through the probe internally."
msgstr ""

#: ../../docs/tutorials/3d/gi_probes.rst:115
msgid ""
"**Bias** Value used to avoid self-occlusion when doing voxel cone tracing, "
"should generally be above 1.0 (1==voxel size)."
msgstr ""

#: ../../docs/tutorials/3d/gi_probes.rst:116
msgid ""
"**Normal Bias** Alternative type of bias useful for some scenes. Experiment "
"with this one if regular bias does not work."
msgstr ""

#: ../../docs/tutorials/3d/gi_probes.rst:117
msgid "**Interior** Allows mixing with lighting from the sky."
msgstr ""

#: ../../docs/tutorials/3d/gi_probes.rst:118
msgid "**Compress** Currently broken. Do not use."
msgstr ""

#: ../../docs/tutorials/3d/gi_probes.rst:119
msgid ""
"**Data** Contains the light baked data after baking. If you are saving the "
"data it should be saved as a .res file."
msgstr ""

#: ../../docs/tutorials/3d/gi_probes.rst:122
msgid "Quality"
msgstr ""

#: ../../docs/tutorials/3d/gi_probes.rst:124
msgid ""
"``GIProbe``\\ s are quite demanding. It is possible to use lower quality "
"voxel cone tracing in exchange for more performance."
msgstr ""

#: ../../docs/tutorials/3d/baked_lightmaps.rst:4
msgid "Baked lightmaps"
msgstr ""

#: ../../docs/tutorials/3d/baked_lightmaps.rst:9
msgid ""
"Baked lightmaps are an alternative workflow for adding indirect (or baked) "
"lighting to a scene. Unlike the :ref:`doc_gi_probes` approach, baked "
"lightmaps work fine on low-end PCs and mobile devices, as they consume "
"almost no resources at run-time."
msgstr ""

#: ../../docs/tutorials/3d/baked_lightmaps.rst:14
msgid ""
"Unlike ``GIProbe``\\ s, Baked Lightmaps are completely static. Once baked, "
"they can't be modified at all. They also don't provide the scene with "
"reflections, so using :ref:`doc_reflection_probes` together with it on "
"interiors (or using a Sky on exteriors) is a requirement to get good quality."
msgstr ""

#: ../../docs/tutorials/3d/baked_lightmaps.rst:19
msgid ""
"As they are baked, they have fewer problems than ``GIProbe`` regarding light "
"bleeding, and indirect light can look better if using Raytrace mode on high "
"quality setting (but baking can take a while)."
msgstr ""

#: ../../docs/tutorials/3d/baked_lightmaps.rst:23
msgid ""
"In the end, deciding which indirect lighting approach is better depends on "
"your use case. In general, GIProbe looks better and is much easier to set "
"up. For mobile or low-end compatibility, though, Baked Lightmaps are your "
"only choice."
msgstr ""

#: ../../docs/tutorials/3d/baked_lightmaps.rst:29
msgid "Visual comparison"
msgstr "시각적 비교"

#: ../../docs/tutorials/3d/baked_lightmaps.rst:31
msgid ""
"Here are some comparisons of how Baked Lightmaps vs. GIProbe look. Notice "
"that lightmaps are more accurate, but also suffer from the fact that "
"lighting is on an unwrapped texture, so transitions and resolution may not "
"be that good. GIProbe looks less accurate (as it's an approximation), but "
"smoother overall."
msgstr ""

#: ../../docs/tutorials/3d/baked_lightmaps.rst:42
msgid ""
"First of all, before the lightmapper can do anything, the objects to be "
"baked need an UV2 layer and a texture size. An UV2 layer is a set of "
"secondary texture coordinates that ensures any face in the object has its "
"own place in the UV map. Faces must not share pixels in the texture."
msgstr ""

#: ../../docs/tutorials/3d/baked_lightmaps.rst:47
msgid ""
"There are a few ways to ensure your object has a unique UV2 layer and "
"texture size:"
msgstr ""

#: ../../docs/tutorials/3d/baked_lightmaps.rst:50
msgid "Unwrap from your 3D DCC"
msgstr ""

#: ../../docs/tutorials/3d/baked_lightmaps.rst:52
msgid ""
"One option is to do it from your favorite 3D app. This approach is generally "
"not recommended, but it's explained first so that you know it exists. The "
"main advantage is that, on complex objects that you may want to re-import a "
"lot, the texture generation process can be quite costly within Godot, so "
"having it unwrapped before import can be faster."
msgstr ""

#: ../../docs/tutorials/3d/baked_lightmaps.rst:58
msgid "Simply do an unwrap on the second UV2 layer."
msgstr ""

#: ../../docs/tutorials/3d/baked_lightmaps.rst:62
msgid ""
"And import normally. Remember you will need to set the texture size on the "
"mesh after import."
msgstr ""

#: ../../docs/tutorials/3d/baked_lightmaps.rst:67
msgid ""
"If you use external meshes on import, the size will be kept. Be wary that "
"most unwrappers in 3D DCCs are not quality oriented, as they are meant to "
"work quickly. You will mostly need to use seams or other techniques to "
"create better unwrapping."
msgstr ""

#: ../../docs/tutorials/3d/baked_lightmaps.rst:73
msgid "Unwrap from within Godot"
msgstr ""

#: ../../docs/tutorials/3d/baked_lightmaps.rst:75
msgid ""
"Godot has an option to unwrap meshes and visualize the UV channels. It can "
"be found in the Mesh menu:"
msgstr ""

#: ../../docs/tutorials/3d/baked_lightmaps.rst:80
msgid ""
"This will generate a second set of UV2 coordinates which can be used for "
"baking, and it will also set the texture size automatically."
msgstr ""

#: ../../docs/tutorials/3d/baked_lightmaps.rst:84
msgid "Unwrap on scene import"
msgstr ""

#: ../../docs/tutorials/3d/baked_lightmaps.rst:86
msgid ""
"This is probably the best approach overall. The only downside is that, on "
"large models, unwrapping can take a while on import. Just select the "
"imported scene in the filesystem dock, then go to the Import tab. There, the "
"following option can be modified:"
msgstr ""

#: ../../docs/tutorials/3d/baked_lightmaps.rst:93
msgid ""
"The **Light Baking** mode needs to be set to **\"Gen Lightmaps\"**. A texel "
"size in world units must also be provided, as this will determine the final "
"size of the lightmap texture (and, in consequence, the UV padding in the "
"map)."
msgstr ""

#: ../../docs/tutorials/3d/baked_lightmaps.rst:97
msgid ""
"The effect of setting this option is that all meshes within the scene will "
"have their UV2 maps properly generated."
msgstr ""

#: ../../docs/tutorials/3d/baked_lightmaps.rst:100
msgid ""
"As a word of warning: When reusing a mesh within a scene, keep in mind that "
"UVs will be generated for the first instance found. If the mesh is re-used "
"with different scales (and the scales are wildly different, more than half "
"or twice), this will result in inefficient lightmaps. Just don't reuse a "
"source mesh at different scales if you are planning to use lightmapping."
msgstr ""

#: ../../docs/tutorials/3d/baked_lightmaps.rst:107
msgid "Checking UV2"
msgstr ""

#: ../../docs/tutorials/3d/baked_lightmaps.rst:109
msgid ""
"In the mesh menu mentioned before, the UV2 texture coordinates can be "
"visualized. Make sure, if something is failing, to check that the meshes "
"have these UV2 coordinates:"
msgstr ""

#: ../../docs/tutorials/3d/baked_lightmaps.rst:115
msgid "Setting up the scene"
msgstr "씬 설정하기"

#: ../../docs/tutorials/3d/baked_lightmaps.rst:117
msgid ""
"Before anything is done, a **BakedLightmap** Node needs to be added to a "
"scene. This will enable light baking on all nodes (and sub-nodes) in that "
"scene, even on instanced scenes."
msgstr ""

#: ../../docs/tutorials/3d/baked_lightmaps.rst:123
msgid ""
"A sub-scene can be instanced several times, as this is supported by the "
"baker, and each will be assigned a lightmap of its own (just make sure to "
"respect the rule about scaling mentioned before):"
msgstr ""

#: ../../docs/tutorials/3d/baked_lightmaps.rst:128
msgid "Configure bounds"
msgstr ""

#: ../../docs/tutorials/3d/baked_lightmaps.rst:130
msgid ""
"Lightmap needs an approximate volume of the area affected because it uses it "
"to transfer light to dynamic objects inside it (more on that later). Just "
"cover the scene with the volume as you do with ``GIProbe``:"
msgstr ""

#: ../../docs/tutorials/3d/baked_lightmaps.rst:137
msgid "Setting up meshes"
msgstr "메시(mesh) 설정하기"

#: ../../docs/tutorials/3d/baked_lightmaps.rst:139
msgid ""
"For a **MeshInstance** node to take part in the baking process, it needs to "
"have the \"Use in Baked Light\" property enabled."
msgstr ""

#: ../../docs/tutorials/3d/baked_lightmaps.rst:144
msgid ""
"When auto-generating lightmaps on scene import, this is enabled "
"automatically."
msgstr ""

#: ../../docs/tutorials/3d/baked_lightmaps.rst:147
msgid "Setting up lights"
msgstr "빛 설정하기"

#: ../../docs/tutorials/3d/baked_lightmaps.rst:149
msgid ""
"Lights are baked with indirect light by default. This means that "
"shadowmapping and lighting are still dynamic and affect moving objects, but "
"light bounces from that light will be baked."
msgstr ""

#: ../../docs/tutorials/3d/baked_lightmaps.rst:153
msgid ""
"Lights can be disabled (no bake) or be fully baked (direct and indirect). "
"This can be controlled from the **Bake Mode** menu in lights:"
msgstr ""

#: ../../docs/tutorials/3d/baked_lightmaps.rst:158
msgid "The modes are:"
msgstr "이 모드는:"

#: ../../docs/tutorials/3d/baked_lightmaps.rst:160
msgid ""
"**Disabled:** Light is ignored in baking. Keep in mind hiding a light will "
"have no effect for baking, so this must be used instead."
msgstr ""

#: ../../docs/tutorials/3d/baked_lightmaps.rst:161
msgid ""
"**Indirect:** This is the default mode. Only indirect lighting will be baked."
msgstr ""

#: ../../docs/tutorials/3d/baked_lightmaps.rst:162
msgid ""
"**All:** Both indirect and direct lighting will be baked. If you don't want "
"the light to appear twice (dynamically and statically), simply hide it."
msgstr ""

#: ../../docs/tutorials/3d/baked_lightmaps.rst:165
msgid "Baking quality"
msgstr ""

#: ../../docs/tutorials/3d/baked_lightmaps.rst:167
msgid ""
"``BakedLightmap`` uses, for simplicity, a voxelized version of the scene to "
"compute lighting. Voxel size can be adjusted with the **Bake Subdiv** "
"parameter. More subdivision results in more detail, but also takes more time "
"to bake."
msgstr ""

#: ../../docs/tutorials/3d/baked_lightmaps.rst:171
msgid ""
"In general, the defaults are good enough. There is also a **Capture "
"Subdivision** (that must always be equal to or less than the main "
"subdivision), which is used for capturing light in dynamic objects (more on "
"that later). Its default value is also good enough for most cases."
msgstr ""

#: ../../docs/tutorials/3d/baked_lightmaps.rst:178
msgid ""
"Besides the capture size, quality can be modified by setting the **Bake "
"Mode**. Two modes of capturing indirect are provided:"
msgstr ""

#: ../../docs/tutorials/3d/baked_lightmaps.rst:183
msgid ""
"**Voxel Cone**: Trace: Is the default one; it's less precise, but faster. "
"Looks similar to (but slightly better than) ``GIProbe``."
msgstr ""

#: ../../docs/tutorials/3d/baked_lightmaps.rst:184
msgid ""
"**Ray Tracing**: This method is more precise, but can take considerably "
"longer to bake. If used in low or medium quality, some scenes may produce "
"grain."
msgstr ""

#: ../../docs/tutorials/3d/baked_lightmaps.rst:187
msgid "Baking"
msgstr ""

#: ../../docs/tutorials/3d/baked_lightmaps.rst:189
msgid ""
"To begin the bake process, just push the big **Bake Lightmaps** button on "
"top when selecting the ``BakedLightmap`` node:"
msgstr ""

#: ../../docs/tutorials/3d/baked_lightmaps.rst:194
msgid ""
"This can take from seconds to minutes (or hours) depending on scene size, "
"bake method and quality selected."
msgstr ""

#: ../../docs/tutorials/3d/baked_lightmaps.rst:198
msgid "Configuring bake"
msgstr "베이크 구성"

#: ../../docs/tutorials/3d/baked_lightmaps.rst:200
msgid "Several more options are present for baking:"
msgstr ""

#: ../../docs/tutorials/3d/baked_lightmaps.rst:202
msgid ""
"**Bake Subdiv**: The Godot lightmapper uses a grid to transfer light "
"information around; the default value is fine and should work for most "
"cases. Increase it in case you want better lighting on small details or your "
"scene is large."
msgstr ""

#: ../../docs/tutorials/3d/baked_lightmaps.rst:203
msgid ""
"**Capture Subdiv**: This is the grid used for real-time capture information "
"(lighting dynamic objects). Default value is generally OK, it's usually "
"smaller than Bake Subdiv and can't be larger than it."
msgstr ""

#: ../../docs/tutorials/3d/baked_lightmaps.rst:204
msgid ""
"**Bake Quality**: Three bake quality modes are provided, Low, Medium and "
"High. Higher quality takes more time."
msgstr ""

#: ../../docs/tutorials/3d/baked_lightmaps.rst:205
msgid ""
"**Bake Mode**: The baker can use two different techniques: *Voxel Cone "
"Tracing* (fast, but approximate), or *RayTracing* (slow, but accurate)."
msgstr ""

#: ../../docs/tutorials/3d/baked_lightmaps.rst:206
msgid ""
"**Propagation**: Used for the *Voxel Cone Trace* mode. Works just like in "
"``GIProbe``."
msgstr ""

#: ../../docs/tutorials/3d/baked_lightmaps.rst:207
msgid ""
"**HDR**: If disabled, lightmaps are smaller, but can't capture any light "
"over white (1.0)."
msgstr ""

#: ../../docs/tutorials/3d/baked_lightmaps.rst:208
msgid ""
"**Image Path**: Where lightmaps will be saved. By default, on the same "
"directory as the scene (\".\"), but can be tweaked."
msgstr ""

#: ../../docs/tutorials/3d/baked_lightmaps.rst:209
msgid "**Extents**: Size of the area affected (can be edited visually)"
msgstr ""

#: ../../docs/tutorials/3d/baked_lightmaps.rst:210
msgid ""
"**Light Data**: Contains the light baked data after baking. Textures are "
"saved to disk, but this also contains the capture data for dynamic objects, "
"which can be a bit heavy. If you are using .tscn formats (instead of .scn), "
"you can save it to disk."
msgstr ""

#: ../../docs/tutorials/3d/baked_lightmaps.rst:213
msgid "Dynamic objects"
msgstr ""

#: ../../docs/tutorials/3d/baked_lightmaps.rst:215
msgid ""
"In other engines or lightmapper implementations, you are required to "
"manually place small objects called \"lightprobes\" all around the level to "
"generate *capture* data. This is used to, then, transfer the light to "
"dynamic objects that move around the scene."
msgstr ""

#: ../../docs/tutorials/3d/baked_lightmaps.rst:220
msgid ""
"However, this implementation of lightmapping uses a different method. The "
"process is automatic, so you don't have to do anything. Just move your "
"objects around, and they will be lit accordingly. Of course, you have to "
"make sure you set up your scene bounds accordingly or it won't work."
msgstr ""

#: ../../docs/tutorials/3d/environment_and_post_processing.rst:4
msgid "Environment and post-processing"
msgstr ""

#: ../../docs/tutorials/3d/environment_and_post_processing.rst:6
msgid ""
"Godot 3 provides a redesigned Environment resource, as well as a brand new "
"post-processing system with many available effects right out of the box."
msgstr ""

#: ../../docs/tutorials/3d/environment_and_post_processing.rst:12
msgid ""
"The Environment resource stores all the information required for controlling "
"rendering environment. This includes sky, ambient lighting, tone mapping, "
"effects, and adjustments. By itself it does nothing, but it becomes enabled "
"once used in one of the following locations in order of priority:"
msgstr ""

#: ../../docs/tutorials/3d/environment_and_post_processing.rst:18
msgid "Camera node"
msgstr "카메라 노드"

#: ../../docs/tutorials/3d/environment_and_post_processing.rst:20
msgid ""
"An Environment can be set to a camera. It will have priority over any other "
"setting."
msgstr ""

#: ../../docs/tutorials/3d/environment_and_post_processing.rst:24
msgid ""
"This is mostly useful when wanting to override an existing environment, but "
"in general it's a better idea to use the option below."
msgstr ""

#: ../../docs/tutorials/3d/environment_and_post_processing.rst:28
msgid "WorldEnvironment node"
msgstr ""

#: ../../docs/tutorials/3d/environment_and_post_processing.rst:30
msgid ""
"The WorldEnvironment node can be added to any scene, but only one can exist "
"per active scene tree. Adding more than one will result in a warning."
msgstr ""

#: ../../docs/tutorials/3d/environment_and_post_processing.rst:35
msgid ""
"Any Environment added has higher priority than the default Environment "
"(explained below). This means it can be overridden on a per-scene basis, "
"which makes it quite useful."
msgstr ""

#: ../../docs/tutorials/3d/environment_and_post_processing.rst:42
msgid ""
"A default environment can be set, which acts as a fallback when no "
"Environment was set to a Camera or WorldEnvironment. Just head to Project "
"Settings -> Rendering -> Environment:"
msgstr ""

#: ../../docs/tutorials/3d/environment_and_post_processing.rst:48
msgid ""
"New projects created from the Project Manager come with a default "
"environment (``default_env.tres``). If one needs to be created, save it to "
"disk before referencing it here."
msgstr ""

#: ../../docs/tutorials/3d/environment_and_post_processing.rst:53
msgid "Environment options"
msgstr "환경 옵션"

#: ../../docs/tutorials/3d/environment_and_post_processing.rst:55
msgid ""
"Following is a detailed description of all environment options and how they "
"are intended to be used."
msgstr ""

#: ../../docs/tutorials/3d/environment_and_post_processing.rst:61
msgid ""
"The Background section contains settings on how to fill the background "
"(parts of the screen where objects were not drawn). In Godot 3.0, the "
"background not only serves the purpose of displaying an image or color, it "
"can also change how objects are affected by ambient and reflected light."
msgstr ""

#: ../../docs/tutorials/3d/environment_and_post_processing.rst:68
msgid "There are many ways to set the background:"
msgstr ""

#: ../../docs/tutorials/3d/environment_and_post_processing.rst:70
msgid ""
"**Clear Color** uses the default clear color defined by the project. The "
"background will be a constant color."
msgstr ""

#: ../../docs/tutorials/3d/environment_and_post_processing.rst:71
msgid "**Custom Color** is like Clear Color, but with a custom color value."
msgstr ""

#: ../../docs/tutorials/3d/environment_and_post_processing.rst:72
msgid ""
"**Sky** lets you define a panorama sky (a 360 degree sphere texture) or a "
"procedural sky (a simple sky featuring a gradient and an optional sun). "
"Objects will reflect it and absorb ambient light from it."
msgstr ""

#: ../../docs/tutorials/3d/environment_and_post_processing.rst:73
msgid ""
"**Color+Sky** lets you define a sky (as above), but uses a constant color "
"value for drawing the background. The sky will only be used for reflection "
"and ambient light."
msgstr ""

#: ../../docs/tutorials/3d/environment_and_post_processing.rst:76
msgid "Ambient Light"
msgstr ""

#: ../../docs/tutorials/3d/environment_and_post_processing.rst:78
msgid ""
"Ambient (as defined here) is a type of light that affects every piece of "
"geometry with the same intensity. It is global and independent of lights "
"that might be added to the scene."
msgstr ""

#: ../../docs/tutorials/3d/environment_and_post_processing.rst:82
msgid ""
"There are two types of ambient light: the *Ambient Color* (which is a "
"constant color multiplied by the material albedo) and then one obtained from "
"the *Sky* (as described before, but a sky needs to be set as background for "
"this to be enabled)."
msgstr ""

#: ../../docs/tutorials/3d/environment_and_post_processing.rst:89
msgid ""
"When a *Sky* is set as background, it's possible to blend between ambient "
"color and sky using the **Sky Contribution** setting (this value is 1.0 by "
"default for convenience, so only the sky affects objects)."
msgstr ""

#: ../../docs/tutorials/3d/environment_and_post_processing.rst:93
msgid "Here is a comparison of how different ambient light affects a scene:"
msgstr ""

#: ../../docs/tutorials/3d/environment_and_post_processing.rst:97
msgid ""
"Finally there is an **Energy** setting, which is a multiplier, useful when "
"working with HDR."
msgstr ""

#: ../../docs/tutorials/3d/environment_and_post_processing.rst:99
msgid ""
"In general, ambient light should only be used for simple scenes, large "
"exteriors, or for performance reasons (ambient light is cheap), as it does "
"not provide the best lighting quality. It's better to generate ambient light "
"from ReflectionProbe or GIProbe, which will more faithfully simulate how "
"indirect light propagates. Below is a comparison, in terms of quality, "
"between using a flat ambient color and a GIProbe:"
msgstr ""

#: ../../docs/tutorials/3d/environment_and_post_processing.rst:108
msgid ""
"Using one of the methods described above, objects get constant ambient "
"lighting replaced by ambient light from the probes."
msgstr ""

#: ../../docs/tutorials/3d/environment_and_post_processing.rst:112
#: ../../docs/tutorials/misc/gles2_gles3_differences.rst:84
msgid "Fog"
msgstr ""

#: ../../docs/tutorials/3d/environment_and_post_processing.rst:114
msgid ""
"Fog, as in real life, makes distant objects fade away into an uniform color. "
"The physical effect is actually pretty complex, but Godot provides a good "
"approximation. There are two kinds of fog in Godot:"
msgstr ""

#: ../../docs/tutorials/3d/environment_and_post_processing.rst:118
msgid ""
"**Depth Fog:** This one is applied based on the distance from the camera."
msgstr ""

#: ../../docs/tutorials/3d/environment_and_post_processing.rst:119
msgid ""
"**Height Fog:** This one is applied to any objects below (or above) a "
"certain height, regardless of the distance from the camera."
msgstr ""

#: ../../docs/tutorials/3d/environment_and_post_processing.rst:123
msgid ""
"Both of these fog types can have their curve tweaked, making their "
"transition more or less sharp."
msgstr ""

#: ../../docs/tutorials/3d/environment_and_post_processing.rst:125
msgid "Two properties can be tweaked to make the fog effect more interesting:"
msgstr ""

#: ../../docs/tutorials/3d/environment_and_post_processing.rst:127
msgid ""
"The first is **Sun Amount**, which makes use of the Sun Color property of "
"the fog. When looking towards a directional light (usually a sun), the color "
"of the fog will be changed, simulating the sunlight passing through the fog."
msgstr ""

#: ../../docs/tutorials/3d/environment_and_post_processing.rst:131
msgid ""
"The second is **Transmit Enabled** which simulates more realistic light "
"transmittance. In practice, it makes light stand out more across the fog."
msgstr ""

#: ../../docs/tutorials/3d/environment_and_post_processing.rst:137
msgid "Tonemap"
msgstr ""

#: ../../docs/tutorials/3d/environment_and_post_processing.rst:141
msgid ""
"Selects the tone-mapping curve that will be applied to the scene, from a "
"short list of standard curves used in the film and game industry. Tone "
"mapping can make light and dark areas more homogeneous, even though the "
"result is not that strong. Tone mapping options are:"
msgstr ""

#: ../../docs/tutorials/3d/environment_and_post_processing.rst:146
msgid ""
"**Mode:** Tone mapping mode, which can be Linear, Reindhart, Filmic, or Aces."
msgstr ""

#: ../../docs/tutorials/3d/environment_and_post_processing.rst:147
msgid ""
"**Exposure:** Tone mapping exposure which simulates amount of light received "
"over time."
msgstr ""

#: ../../docs/tutorials/3d/environment_and_post_processing.rst:148
msgid ""
"**White:** Tone mapping white, which simulates where in the scale white is "
"located (by default 1.0)."
msgstr ""

#: ../../docs/tutorials/3d/environment_and_post_processing.rst:151
msgid "Auto Exposure (HDR)"
msgstr ""

#: ../../docs/tutorials/3d/environment_and_post_processing.rst:155
msgid ""
"Even though, in most cases, lighting and texturing are heavily artist "
"controlled, Godot supports a simple high dynamic range implementation with "
"the auto exposure mechanism. This is generally used for the sake of realism "
"when combining interior areas with low light and outdoors. Auto exposure "
"simulates the camera (or eye) in an effort to adapt between light and dark "
"locations and their different amounts of light."
msgstr ""

#: ../../docs/tutorials/3d/environment_and_post_processing.rst:164
msgid ""
"The simplest way to use auto exposure is to make sure outdoor lights (or "
"other strong lights) have energy beyond 1.0. This is done by tweaking their "
"**Energy** multiplier (on the Light itself). To make it consistent, the "
"**Sky** usually needs to use the energy multiplier too, to match with the "
"directional light. Normally, values between 3.0 and 6.0 are enough to "
"simulate indoor-outdoor conditions."
msgstr ""

#: ../../docs/tutorials/3d/environment_and_post_processing.rst:170
msgid ""
"By combining Auto Exposure with *Glow* post processing (more on that below), "
"pixels that go over the tonemap **White** will bleed to the glow buffer, "
"creating the typical bloom effect in photography."
msgstr ""

#: ../../docs/tutorials/3d/environment_and_post_processing.rst:176
msgid ""
"The user-controllable values in the Auto Exposure section come with sensible "
"defaults, but you can still tweak them:"
msgstr ""

#: ../../docs/tutorials/3d/environment_and_post_processing.rst:181
msgid ""
"**Scale:** Value to scale the lighting. Brighter values produce brighter "
"images, smaller ones produce darker ones."
msgstr ""

#: ../../docs/tutorials/3d/environment_and_post_processing.rst:182
msgid ""
"**Min Luma:** Minimum luminance that auto exposure will aim to adjust for. "
"Luminance is the average of the light in all the pixels of the screen."
msgstr ""

#: ../../docs/tutorials/3d/environment_and_post_processing.rst:183
msgid ""
"**Max Luma:** Maximum luminance that auto exposure will aim to adjust for."
msgstr ""

#: ../../docs/tutorials/3d/environment_and_post_processing.rst:184
msgid ""
"**Speed:** Speed at which luminance corrects itself. The higher the value, "
"the faster correction happens."
msgstr ""

#: ../../docs/tutorials/3d/environment_and_post_processing.rst:187
msgid "Mid- and post-processing effects"
msgstr ""

#: ../../docs/tutorials/3d/environment_and_post_processing.rst:189
msgid ""
"A large amount of widely-used mid- and post-processing effects are supported "
"in the Environment."
msgstr ""

#: ../../docs/tutorials/3d/environment_and_post_processing.rst:193
msgid "Screen-Space Reflections (SSR)"
msgstr ""

#: ../../docs/tutorials/3d/environment_and_post_processing.rst:197
msgid ""
"While Godot supports three sources of reflection data (Sky, ReflectionProbe, "
"and GIProbe), they may not provide enough detail for all situations. "
"Scenarios where Screen Space Reflections make the most sense are when "
"objects are in contact with each other (object over floor, over a table, "
"floating on water, etc)."
msgstr ""

#: ../../docs/tutorials/3d/environment_and_post_processing.rst:204
msgid ""
"The other advantage (even if only enabled to a minimum), is that it works in "
"real-time (while the other types of reflections are pre-computed). This can "
"be used to make characters, cars, etc. reflect on surrounding surfaces when "
"moving around."
msgstr ""

#: ../../docs/tutorials/3d/environment_and_post_processing.rst:208
msgid ""
"A few user-controlled parameters are available to better tweak the technique:"
msgstr ""

#: ../../docs/tutorials/3d/environment_and_post_processing.rst:210
msgid ""
"**Max Steps** determines the length of the reflection. The bigger this "
"number, the more costly it is to compute."
msgstr ""

#: ../../docs/tutorials/3d/environment_and_post_processing.rst:211
msgid ""
"**Fade In** allows adjusting the fade-in curve, which is useful to make the "
"contact area softer."
msgstr ""

#: ../../docs/tutorials/3d/environment_and_post_processing.rst:212
msgid ""
"**Fade Out** allows adjusting the fade-out curve, so the step limit fades "
"out softly."
msgstr ""

#: ../../docs/tutorials/3d/environment_and_post_processing.rst:213
msgid ""
"**Depth Tolerance** can be used for screen-space-ray hit tolerance to gaps. "
"The bigger the value, the more gaps will be ignored."
msgstr ""

#: ../../docs/tutorials/3d/environment_and_post_processing.rst:214
msgid ""
"**Roughness** will apply a screen-space blur to approximate roughness in "
"objects with this material characteristic."
msgstr ""

#: ../../docs/tutorials/3d/environment_and_post_processing.rst:216
msgid ""
"Keep in mind that screen-space-reflections only work for reflecting opaque "
"geometry. Transparent objects can't be reflected."
msgstr ""

#: ../../docs/tutorials/3d/environment_and_post_processing.rst:219
msgid "Screen-Space Ambient Occlusion (SSAO)"
msgstr ""

#: ../../docs/tutorials/3d/environment_and_post_processing.rst:223
msgid ""
"As mentioned in the **Ambient** section, areas where light from light nodes "
"does not reach (either because it's outside the radius or shadowed) are lit "
"with ambient light. Godot can simulate this using GIProbe, ReflectionProbe, "
"the Sky, or a constant ambient color. The problem, however, is that all the "
"methods proposed previously act more on a larger scale (large regions) than "
"at the smaller geometry level."
msgstr ""

#: ../../docs/tutorials/3d/environment_and_post_processing.rst:230
msgid ""
"Constant ambient color and Sky are the same everywhere, while GI and "
"Reflection probes have more local detail, but not enough to simulate "
"situations where light is not able to fill inside hollow or concave features."
msgstr ""

#: ../../docs/tutorials/3d/environment_and_post_processing.rst:234
msgid ""
"This can be simulated with Screen Space Ambient Occlusion. As you can see in "
"the image below, its purpose is to make sure concave areas are darker, "
"simulating a narrower path for the light to enter:"
msgstr ""

#: ../../docs/tutorials/3d/environment_and_post_processing.rst:240
msgid ""
"It is a common mistake to enable this effect, turn on a light, and not be "
"able to appreciate it. This is because SSAO only acts on *ambient* light, "
"not direct light."
msgstr ""

#: ../../docs/tutorials/3d/environment_and_post_processing.rst:243
msgid ""
"This is why, in the image above, the effect is less noticeable under the "
"direct light (on the left). If you want to force SSAO to work with direct "
"light too, use the **Light Affect** parameter (even though this is not "
"correct, some artists like how it looks)."
msgstr ""

#: ../../docs/tutorials/3d/environment_and_post_processing.rst:247
msgid ""
"SSAO looks best when combined with a real source of indirect light, like "
"GIProbe:"
msgstr ""

#: ../../docs/tutorials/3d/environment_and_post_processing.rst:251
msgid "Tweaking SSAO is possible with several parameters:"
msgstr ""

#: ../../docs/tutorials/3d/environment_and_post_processing.rst:255
msgid ""
"**Radius/Intensity:** To control the radius or intensity of the occlusion, "
"these two parameters are available. Radius is in world (Metric) units."
msgstr ""

#: ../../docs/tutorials/3d/environment_and_post_processing.rst:256
msgid ""
"**Radius2/Intensity2:** A Secondary radius/intensity can be used. Combining "
"a large and a small radius AO generally works well."
msgstr ""

#: ../../docs/tutorials/3d/environment_and_post_processing.rst:257
msgid ""
"**Bias:** This can be tweaked to solve self occlusion, though the default "
"generally works well enough."
msgstr ""

#: ../../docs/tutorials/3d/environment_and_post_processing.rst:258
msgid ""
"**Light Affect:** SSAO only affects ambient light, but increasing this "
"slider can make it also affect direct light. Some artists prefer this effect."
msgstr ""

#: ../../docs/tutorials/3d/environment_and_post_processing.rst:259
msgid ""
"**Ao Channel Affect:** If a value of zero is used, only the material's AO "
"texture will be used for ambient occlusion; SSAO will not be applied. Values "
"greater than 0 multiply the AO texture by the SSAO effect to varying "
"degrees. This does not affect materials without an AO texture."
msgstr ""

#: ../../docs/tutorials/3d/environment_and_post_processing.rst:260
msgid ""
"**Quality:** Depending on quality, SSAO will take more samples over a sphere "
"for every pixel. High quality only works well on modern GPUs."
msgstr ""

#: ../../docs/tutorials/3d/environment_and_post_processing.rst:261
msgid ""
"**Blur:** Type of blur kernel used. The 1x1 kernel is a simple blur that "
"preserves local detail better, but is not as efficient (generally works "
"better with the high quality setting above), while 3x3 will soften the image "
"better (with a bit of dithering-like effect), but does not preserve local "
"detail as well."
msgstr ""

#: ../../docs/tutorials/3d/environment_and_post_processing.rst:262
msgid ""
"**Edge Sharpness**: This can be used to preserve the sharpness of edges "
"(avoids areas without AO on creases)."
msgstr ""

#: ../../docs/tutorials/3d/environment_and_post_processing.rst:265
msgid "Depth of Field / Far Blur"
msgstr ""

#: ../../docs/tutorials/3d/environment_and_post_processing.rst:269
msgid ""
"This effect simulates focal distance on high end cameras. It blurs objects "
"behind a given range. It has an initial **Distance** with a **Transition** "
"region (in world units):"
msgstr ""

#: ../../docs/tutorials/3d/environment_and_post_processing.rst:275
#: ../../docs/tutorials/3d/environment_and_post_processing.rst:289
msgid ""
"The **Amount** parameter controls the amount of blur. For larger blurs, "
"tweaking the **Quality** may be needed in order to avoid artifacts."
msgstr ""

#: ../../docs/tutorials/3d/environment_and_post_processing.rst:279
msgid "Depth of Field / Near Blur"
msgstr ""

#: ../../docs/tutorials/3d/environment_and_post_processing.rst:283
msgid ""
"This effect simulates focal distance on high end cameras. It blurs objects "
"close to the camera (acts in the opposite direction as far blur). It has an "
"initial **Distance** with a **Transition** region (in world units):"
msgstr ""

#: ../../docs/tutorials/3d/environment_and_post_processing.rst:292
msgid ""
"It is common to use both blurs together to focus the viewer's attention on a "
"given object:"
msgstr ""

#: ../../docs/tutorials/3d/environment_and_post_processing.rst:298
msgid "Glow"
msgstr ""

#: ../../docs/tutorials/3d/environment_and_post_processing.rst:302
msgid ""
"In photography and film, when light amount exceeds the maximum supported by "
"the media (be it analog or digital), it generally bleeds outwards to darker "
"regions of the image. This is simulated in Godot with the **Glow** effect."
msgstr ""

#: ../../docs/tutorials/3d/environment_and_post_processing.rst:308
msgid ""
"By default, even if the effect is enabled, it will be weak or invisible. One "
"of two conditions need to happen for it to actually show:"
msgstr ""

#: ../../docs/tutorials/3d/environment_and_post_processing.rst:311
msgid ""
"The light in a pixel surpasses the **HDR Threshold** (where 0 is all light "
"surpasses it, and 1.0 is light over the tonemapper **White** value). "
"Normally, this value is expected to be at 1.0, but it can be lowered to "
"allow more light to bleed. There is also an extra parameter, **HDR Scale**, "
"that allows scaling (making brighter or darker) the light surpassing the "
"threshold."
msgstr ""

#: ../../docs/tutorials/3d/environment_and_post_processing.rst:315
msgid ""
"The Bloom effect has a value set greater than 0. As it increases, it sends "
"the whole screen to the glow processor at higher amounts."
msgstr ""

#: ../../docs/tutorials/3d/environment_and_post_processing.rst:319
msgid "Both will cause the light to start bleeding out of the brighter areas."
msgstr ""

#: ../../docs/tutorials/3d/environment_and_post_processing.rst:321
msgid "Once glow is visible, it can be controlled with a few extra parameters:"
msgstr ""

#: ../../docs/tutorials/3d/environment_and_post_processing.rst:323
msgid ""
"**Intensity** is an overall scale for the effect, it can be made stronger or "
"weaker (0.0 removes it)."
msgstr ""

#: ../../docs/tutorials/3d/environment_and_post_processing.rst:324
msgid ""
"**Strength** is how strong the gaussian filter kernel is processed. Greater "
"values make the filter saturate and expand outwards. In general, changing "
"this is not needed, as the size can be more efficiently adjusted with the "
"**Levels**."
msgstr ""

#: ../../docs/tutorials/3d/environment_and_post_processing.rst:326
msgid "The **Blend Mode** of the effect can also be changed:"
msgstr ""

#: ../../docs/tutorials/3d/environment_and_post_processing.rst:328
msgid ""
"**Additive** is the strongest one, as it just adds the glow effect over the "
"image with no blending involved. In general, it's too strong to be used, but "
"can look good with low intensity Bloom (produces a dream-like effect)."
msgstr ""

#: ../../docs/tutorials/3d/environment_and_post_processing.rst:329
msgid ""
"**Screen** is the default one. It ensures glow never brights more than "
"itself and works great as an all around."
msgstr ""

#: ../../docs/tutorials/3d/environment_and_post_processing.rst:330
msgid ""
"**Softlight** is the weakest one, producing only a subtle color disturbance "
"around the objects. This mode works best on dark scenes."
msgstr ""

#: ../../docs/tutorials/3d/environment_and_post_processing.rst:331
msgid ""
"**Replace** can be used to blur the whole screen or debug the effect. It "
"just shows the glow effect without the image below."
msgstr ""

#: ../../docs/tutorials/3d/environment_and_post_processing.rst:333
msgid ""
"To change the glow effect size and shape, Godot provides **Levels**. Smaller "
"levels are strong glows that appear around objects, while large levels are "
"hazy glows covering the whole screen:"
msgstr ""

#: ../../docs/tutorials/3d/environment_and_post_processing.rst:339
msgid ""
"The real strength of this system, though, is to combine levels to create "
"more interesting glow patterns:"
msgstr ""

#: ../../docs/tutorials/3d/environment_and_post_processing.rst:344
msgid ""
"Finally, as the highest layers are created by stretching small blurred "
"images, it is possible that some blockiness may be visible. Enabling "
"**Bicubic Upscaling** gets rids of it, at a minimal performance cost."
msgstr ""

#: ../../docs/tutorials/3d/environment_and_post_processing.rst:351
msgid "Adjustments"
msgstr ""

#: ../../docs/tutorials/3d/environment_and_post_processing.rst:355
msgid ""
"At the end of processing, Godot offers the possibility to do some standard "
"image adjustments."
msgstr ""

#: ../../docs/tutorials/3d/environment_and_post_processing.rst:360
msgid ""
"The first one is being able to change the typical Brightness, Contrast, and "
"Saturation:"
msgstr ""

#: ../../docs/tutorials/3d/environment_and_post_processing.rst:365
msgid ""
"The second is by supplying a color correction gradient. A regular black to "
"white gradient like the following one will produce no effect:"
msgstr ""

#: ../../docs/tutorials/3d/environment_and_post_processing.rst:370
msgid ""
"But creating custom ones will allow to map each channel to a different color:"
msgstr ""

#: ../../docs/tutorials/3d/high_dynamic_range.rst:4
msgid "Light transport in game engines"
msgstr ""

#: ../../docs/tutorials/3d/high_dynamic_range.rst:9
msgid ""
"Normally, an artist does all the 3D modelling, then all the texturing, looks "
"at their awesome looking model in the 3D DCC and says \"looks fantastic, "
"ready for integration!\" then goes into the game, lighting is setup and the "
"game runs."
msgstr ""

#: ../../docs/tutorials/3d/high_dynamic_range.rst:14
msgid ""
"So at what point does all this \"HDR\" business come into play? To "
"understand the answer, we need to look at how displays behave."
msgstr ""

#: ../../docs/tutorials/3d/high_dynamic_range.rst:17
msgid ""
"Your display outputs linear light ratios from some maximum to some minimum "
"intensity. Modern game engines perform complex math on linear light values "
"in their respective scenes. So what's the problem?"
msgstr ""

#: ../../docs/tutorials/3d/high_dynamic_range.rst:21
msgid ""
"The display has a limited range of intensity, depending on the display type. "
"The game engine renders to an unlimited range of intensity values, however. "
"While \"maximum intensity\" means something to an sRGB display, it has no "
"bearing in the game engine; there is only a potentially infinitely wide "
"range of intensity values generated per frame of rendering."
msgstr ""

#: ../../docs/tutorials/3d/high_dynamic_range.rst:27
msgid ""
"This means that some transformation of the scene light intensity, also known "
"as *scene-referred* light ratios, need to be transformed and mapped to fit "
"within the particular output range of the chosen display. This can be most "
"easily understood if we consider virtually photographing our game engine "
"scene through a virtual camera. Here, our virtual camera would apply a "
"particular camera rendering transform to the scene data, and the output "
"would be ready for display on a particular display type."
msgstr ""

#: ../../docs/tutorials/3d/high_dynamic_range.rst:36
msgid "Computer displays"
msgstr ""

#: ../../docs/tutorials/3d/high_dynamic_range.rst:38
msgid ""
"Almost all displays require a nonlinear encoding for the code values sent to "
"them. The display in turn, using its unique transfer characteristic, "
"\"decodes\" the code value into linear light ratios of output, and projects "
"the ratios out of the uniquely colored lights at each reddish, greenish, and "
"blueish emission site."
msgstr ""

#: ../../docs/tutorials/3d/high_dynamic_range.rst:44
msgid ""
"For a majority of computer displays, the specifications of the display are "
"outlined in accordance with IEC 61966-2-1, also known as the 1996 sRGB "
"specification. This specification outlines how an sRGB display is to behave, "
"including the color of the lights in the LED pixels as well as the transfer "
"characteristics of the input (OETF) and output (EOTF)."
msgstr ""

#: ../../docs/tutorials/3d/high_dynamic_range.rst:50
msgid ""
"Not all displays use the same OETF and EOTF as a computer display. For "
"example, television broadcast displays use the BT.1886 EOTF. However, Godot "
"currently only supports sRGB displays."
msgstr ""

#: ../../docs/tutorials/3d/high_dynamic_range.rst:54
msgid ""
"The sRGB standard is based around the nonlinear relationship between the "
"current to light output of common desktop computing CRT displays."
msgstr ""

#: ../../docs/tutorials/3d/high_dynamic_range.rst:59
msgid ""
"The mathematics of a scene-referred model require that we multiply the scene "
"by different values to adjust the intensities and exposure to different "
"light ranges. The transfer function of the display can't appropriately "
"render the wider dynamic range of the game engine's scene output using the "
"simple transfer function of the display. A more complex approach to encoding "
"is required."
msgstr ""

#: ../../docs/tutorials/3d/high_dynamic_range.rst:67
msgid "Scene linear & asset pipelines"
msgstr ""

#: ../../docs/tutorials/3d/high_dynamic_range.rst:69
msgid ""
"Working in scene-linear sRGB is not as simple as just pressing a switch. "
"First, imported image assets must be converted to linear light ratios on "
"import. Even when linearized, those assets may not be perfectly well suited "
"for use as textures, depending on how they were generated."
msgstr ""

#: ../../docs/tutorials/3d/high_dynamic_range.rst:74
#, fuzzy
msgid "There are two ways to do this:"
msgstr "이렇게 하고 싶어하는 몇 가지 이유가 있습니다:"

#: ../../docs/tutorials/3d/high_dynamic_range.rst:77
msgid "sRGB transfer function to display linear ratios on image import"
msgstr ""

#: ../../docs/tutorials/3d/high_dynamic_range.rst:79
msgid ""
"This is the easiest method of using sRGB assets, but it's not the most "
"ideal. One issue with this is loss of quality. Using 8 bits per channel to "
"represent linear light ratios is not sufficient to quantize the values "
"correctly. These textures may also be compressed later, which can exacerbate "
"the problem."
msgstr ""

#: ../../docs/tutorials/3d/high_dynamic_range.rst:85
msgid "Hardware sRGB transfer function to display linear conversion"
msgstr ""

#: ../../docs/tutorials/3d/high_dynamic_range.rst:87
msgid ""
"The GPU will do the conversion after reading the texel using floating point. "
"This works fine on PC and consoles, but most mobile devices don't support "
"it, or they don't support it on compressed texture formats (iOS for example)."
msgstr ""

#: ../../docs/tutorials/3d/high_dynamic_range.rst:92
msgid "Scene linear to display referred nonlinear"
msgstr ""

#: ../../docs/tutorials/3d/high_dynamic_range.rst:94
msgid ""
"After all the rendering is done, the scene linear render requires "
"transforming to a suitable output such as an sRGB display. To do this, "
"enable sRGB conversion in the current :ref:`Environment <class_Environment>` "
"(more on that below)."
msgstr ""

#: ../../docs/tutorials/3d/high_dynamic_range.rst:98
msgid ""
"Keep in mind that the **sRGB -> Display Linear** and **Display Linear -> "
"sRGB** conversions must always be **both** enabled. Failing to enable one of "
"them will result in horrible visuals suitable only for avant-garde "
"experimental indie games."
msgstr ""

#: ../../docs/tutorials/3d/high_dynamic_range.rst:104
msgid "Parameters of HDR"
msgstr ""

#: ../../docs/tutorials/3d/high_dynamic_range.rst:106
msgid ""
"HDR settings can be found in the :ref:`Environment <class_Environment>` "
"resource. Most of the time, these are found inside a :ref:`WorldEnvironment "
"<class_WorldEnvironment>` node or set in a Camera node. For more "
"information, see :ref:`doc_environment_and_post_processing`."
msgstr ""

#: ../../docs/tutorials/3d/using_gridmaps.rst:4
msgid "Using gridmaps"
msgstr "GridMap(그리드맵) 사용하기"

#: ../../docs/tutorials/3d/using_gridmaps.rst:9
msgid ""
":ref:`Gridmaps <class_GridMap>` are a tool for creating 3D game levels, "
"similar to the way :ref:`TileMap <doc_using_tilemaps>` works in 2D. You "
"start with a predefined collection of 3D meshes (a :ref:`class_MeshLibrary`) "
"that can be placed on a grid, as if you were building a level with an "
"unlimited amount of Lego blocks."
msgstr ""
":ref:`GridMap <class_GridMap>`\\ 은 2D 게임의 :ref:`TileMap "
"<doc_using_tilemaps>`\\ 과 유사한 방식으로 3D 게임 레벨을 만드는 도구입니다. "
"격자 위에 메시를 배치하려면, 미리 정의해 놓은 3D 메시 모음 (:ref:"
"`class_MeshLibrary`)이 필요합니다. 메시 모음은 마치 무한한 레고 블록처럼 사용"
"됩니다."

#: ../../docs/tutorials/3d/using_gridmaps.rst:15
msgid ""
"Collisions and navigation can also be added to the meshes, just like you "
"would do with the tiles of a tilemap."
msgstr ""
"충돌과 내비게이션도 메시에 추가될 수 있습니다. TileMap의 타일과 똑같죠."

#: ../../docs/tutorials/3d/using_gridmaps.rst:19
msgid "Example project"
msgstr "예제 프로젝트"

#: ../../docs/tutorials/3d/using_gridmaps.rst:21
msgid ""
"To learn how GridMaps work, start by downloading the sample project: :"
"download:`gridmap_demo.zip <files/gridmap_demo.zip>`."
msgstr ""
"어떻게 GridMap이 작동하는지 배우려면, 샘플 프로젝트를 다운로드하세요: :"
"download:`gridmap_demo.zip <files/gridmap_demo.zip>`."

#: ../../docs/tutorials/3d/using_gridmaps.rst:24
msgid ""
"Unzip this project and add it to the Project Manager using the \"Import\" "
"button."
msgstr ""
"프로젝트 압축을 풀고 \"가져오기(Import)\" 버튼으로 프로젝트 매니저(Project "
"Manager)에 추가하세요."

#: ../../docs/tutorials/3d/using_gridmaps.rst:28
msgid "Creating a MeshLibrary"
msgstr "MeshLibrary 만들기"

#: ../../docs/tutorials/3d/using_gridmaps.rst:30
msgid ""
"To begin, you need a :ref:`class_MeshLibrary`, which is a collection of "
"individual meshes that can be used in the gridmap. Open the "
"\"MeshLibrary_Source.tscn\" scene to see an example of how to set up the "
"mesh library."
msgstr ""
"시작하려면 :ref:`class_MeshLibrary`\\ 가 필요합니다. MeshLibrary는 개별 메시"
"들의 모음으로 그리드맵에 쓸 수 있습니다. \"MeshLibrary_Source.tscn\" 씬을 열"
"어서 어떻게 MeshLibrary가 설정되어 있는지 확인하세요."

#: ../../docs/tutorials/3d/using_gridmaps.rst:36
msgid ""
"As you can see, this scene has a :ref:`class_Spatial` node as its root, and "
"a number of :ref:`class_MeshInstance` node children."
msgstr ""
"보다시피, 이 씬은 루트로 :ref:`class_Spatial` 노드를 갖고 있습니다. 그리고 많"
"은 :ref:`class_MeshInstance` 노드 자식을 갖고 있죠."

#: ../../docs/tutorials/3d/using_gridmaps.rst:39
msgid ""
"If you don't need any physics in your scene, then you're done. However, in "
"most cases you'll want to assign collision bodies to the meshes."
msgstr ""
"씬에서 물리 엔진이 필요 없다면, 이게 끝입니다. 하지만 대부분의 경우, 메시에 "
"충돌 바디가 필요할 것입니다."

#: ../../docs/tutorials/3d/using_gridmaps.rst:43
msgid "Collisions"
msgstr "충돌(Collision)"

#: ../../docs/tutorials/3d/using_gridmaps.rst:45
msgid ""
"You can manually assign a :ref:`class_StaticBody` and :ref:"
"`class_CollisionShape` to each mesh. Alternatively, you can use the \"Mesh\" "
"menu to automatically create the collision body based on the mesh data."
msgstr ""
"각 메시마다 일일이 :ref:`class_StaticBody`\\ 와 :ref:`class_CollisionShape`"
"\\ 를 지정할 수 있습니다. 아니면 \"메시(Mesh)\" 메뉴에서 메시 데이터를 기반으"
"로 한 충돌 바디를 자동으로 만들 수 있습니다."

#: ../../docs/tutorials/3d/using_gridmaps.rst:51
msgid ""
"Note that a \"Convex\" collision body will work better for simple meshes. "
"For more complex shapes, select \"Create Trimesh Static Body\". Once each "
"mesh has a physics body and collision shape assigned, your mesh library is "
"ready to be used."
msgstr ""
"\"Convex\" 충돌 바디는 단순한 메시에 더 잘 작동합니다. 복잡한 형태라면 "
"\"Trimesh Static Body 만들기(Create Trimesh Static Body)\"를 선택하세요. 각 "
"메시마다 PhysicsBody와 ColliisionShape를 가졌다면, MeshLibrary를 사용할 준비"
"가 되었습니다."

#: ../../docs/tutorials/3d/using_gridmaps.rst:62
msgid ""
"Only the materials from within the meshes are used when generating the mesh "
"library. Materials set on the node will be ignored."
msgstr ""
"MeshLibrary를 생성할 때는 메시 안에 있는 머티리얼만 사용됩니다. 노드에 설정"
"된 머티리얼은 무시됩니다."

#: ../../docs/tutorials/3d/using_gridmaps.rst:66
msgid "Exporting the MeshLibrary"
msgstr "MeshLibrary 내보내기"

#: ../../docs/tutorials/3d/using_gridmaps.rst:68
msgid ""
"To export the library, click on Scene -> Convert To.. -> MeshLibrary.., and "
"save it as a resource."
msgstr ""
"MeshLibrary를 내보내려면, 씬(Scene) -> 다음으로 변환하기...(Convert To...) -"
"> 메시 라이브러리(MeshLibrary)를 클릭하고, 리소스로 저장하세요."

#: ../../docs/tutorials/3d/using_gridmaps.rst:73
msgid ""
"You can find an already exported MeshLibrary in the project named "
"\"MeshLibrary.tres\"."
msgstr ""
"프로젝트에서 내보낸 MeshLibrary를 \"MeshLibrary.tres\"라는 이름으로 볼 수 있"
"습니다."

#: ../../docs/tutorials/3d/using_gridmaps.rst:76
msgid "Using GridMap"
msgstr "GridMap 사용하기"

#: ../../docs/tutorials/3d/using_gridmaps.rst:78
msgid ""
"Create a new scene and add a GridMap node. Add the mesh library by dragging "
"the resource file from the FileSystem dock and dropping it in the \"Theme\" "
"property in the Inspector."
msgstr ""
"새 씬을 만들고 GridMap 노드를 추가하세요. 파일 시스템(FileSystem) 독에서 리소"
"스 파일을 드래그한 다음, 인스펙터(Inspector)의 \"Mesh Library\" 속성에 드롭해"
"서 MeshLibrary를 추가하세요."

#: ../../docs/tutorials/3d/using_gridmaps.rst:84
msgid ""
"The \"Cell/Size\" property should be set to the size of your meshes. You can "
"leave it at the default value for the demo. Set the \"Center Y\" property to "
"\"Off\"."
msgstr ""
"\"Cell/Size\" 속성은 메시의 크기를 설정합니다. 데모에서는 기본 값으로 두어도 "
"됩니다. \"Center Y\" 속성을 끄세요."

#: ../../docs/tutorials/3d/using_gridmaps.rst:87
#, fuzzy
msgid ""
"Now you can start designing the level by choosing a tile from the palette "
"and placing it with Left-Click in the editor window. To remove a tile, hold :"
"kbd:`Shift` and use Right-click."
msgstr ""
"이제 레벨을 설계할 수 있습니다. 팔레트에서 타일을 선택하고, 편집기 창에서 좌"
"클릭으로 배치합니다. 타일을 지우려면, Shift+우클릭하면 됩니다."

#: ../../docs/tutorials/3d/using_gridmaps.rst:91
#, fuzzy
msgid ""
"Click on the \"GridMap\" menu to see options and shortcuts. For example, "
"pressing :kbd:`S` rotates a tile around the y-axis."
msgstr ""
"\"그리드맵(GridMap)\" 메뉴를 클릭하면 설정과 단축키를 볼 수 있습니다. 예를 들"
"어, \"S\" 키를 누르면 타일을 Y축으로 회전합니다."

#: ../../docs/tutorials/3d/using_gridmaps.rst:96
#, fuzzy
msgid ""
"Holding :kbd:`Shift` and dragging with the left mouse button will draw a "
"selection box. You can duplicate or clear the selected area using the "
"respective menu options."
msgstr ""
"<Shift>를 누른 채로 좌클릭 드래그를 하면 선택 항목 상자가 만들어 집니다. 메"
"뉴 설정에서 선택한 영역을 복제하거나 지울 수 있습니다."

#: ../../docs/tutorials/3d/using_gridmaps.rst:102
msgid ""
"In the menu, you can also change the axis you're drawing on, as well as "
"shift the drawing plane higher or lower on its axis."
msgstr "메뉴에서 타일이 배치되는 격자의 높이와 축도 바꿀 수 있습니다."

#: ../../docs/tutorials/3d/using_gridmaps.rst:108
msgid "Using GridMap in code"
msgstr "코드로 GridMap 사용하기"

#: ../../docs/tutorials/3d/using_gridmaps.rst:110
msgid ""
"See :ref:`class_GridMap` for details on the node's methods and member "
"variables."
msgstr ""
"노드의 메서드와 멤버 변수에 대한 자세한 설명은 :ref:`class_GridMap`\\ 을 참고"
"하세요."

#: ../../docs/tutorials/3d/using_multi_mesh_instance.rst:4
msgid "Using MultiMeshInstance"
msgstr ""

#: ../../docs/tutorials/3d/using_multi_mesh_instance.rst:9
msgid ""
"In a normal scenario, you would use a :ref:`MeshInstance "
"<class_MeshInstance>` node to display a 3D mesh like a human model for the "
"main character, but in some cases, you would like to create multiple "
"instances of the same mesh in a scene. You *could* duplicate the same node "
"multiple times and adjust the transforms manually. This may be a tedious "
"process and the result may look mechanical. Also, this method is not "
"conducive to rapid iterations. :ref:`MultiMeshInstance "
"<class_MultiMeshInstance>` is one of the possible solutions to this problem."
msgstr ""

#: ../../docs/tutorials/3d/using_multi_mesh_instance.rst:18
msgid ""
"MultiMeshInstance, as the name suggests, creates multiple copies of a "
"MeshInstance over a surface of a specific mesh. An example would be having a "
"tree mesh populate a landscape mesh with trees of random scales and "
"orientations."
msgstr ""

#: ../../docs/tutorials/3d/using_multi_mesh_instance.rst:23
msgid "Setting up the nodes"
msgstr ""

#: ../../docs/tutorials/3d/using_multi_mesh_instance.rst:25
msgid ""
"The basic setup requires three nodes: the MultiMeshInstance node and two "
"MeshInstance nodes."
msgstr ""

#: ../../docs/tutorials/3d/using_multi_mesh_instance.rst:28
msgid ""
"One node is used as the target, the mesh that you want to place multiple "
"meshes on. In the tree example, this would be the landscape."
msgstr ""

#: ../../docs/tutorials/3d/using_multi_mesh_instance.rst:31
msgid ""
"The other node is used as the source, the mesh that you want to have "
"duplicated. In the tree case, this would be the tree itself."
msgstr ""

#: ../../docs/tutorials/3d/using_multi_mesh_instance.rst:34
msgid ""
"In our example, we would use a :ref:`Spatial <class_Spatial>` node as the "
"root node of the scene. Your scene tree would look like this:"
msgstr ""

#: ../../docs/tutorials/3d/using_multi_mesh_instance.rst:39
msgid "For simplicity's sake, this tutorial uses built-in primitives."
msgstr ""

#: ../../docs/tutorials/3d/using_multi_mesh_instance.rst:41
msgid ""
"Now you have everything ready. Select the MultiMeshInstance node and look at "
"the toolbar, you should see an extra button called ``MultiMesh`` next to "
"``View``. Click it and select *Populate surface* in the dropdown menu. A new "
"window titled *Populate MultiMesh* will pop up."
msgstr ""

#: ../../docs/tutorials/3d/using_multi_mesh_instance.rst:51
msgid "MultiMesh settings"
msgstr "MultiMesh 설정"

#: ../../docs/tutorials/3d/using_multi_mesh_instance.rst:53
msgid "Below are descriptions of the options."
msgstr ""

#: ../../docs/tutorials/3d/using_multi_mesh_instance.rst:56
msgid "Target Surface"
msgstr ""

#: ../../docs/tutorials/3d/using_multi_mesh_instance.rst:58
msgid ""
"The mesh used as the target surface on which to place copies of your source "
"mesh."
msgstr ""

#: ../../docs/tutorials/3d/using_multi_mesh_instance.rst:62
msgid "Source Mesh"
msgstr ""

#: ../../docs/tutorials/3d/using_multi_mesh_instance.rst:64
msgid "The mesh you want duplicated on the target surface."
msgstr ""

#: ../../docs/tutorials/3d/using_multi_mesh_instance.rst:67
msgid "Mesh Up Axis"
msgstr ""

#: ../../docs/tutorials/3d/using_multi_mesh_instance.rst:69
msgid "The axis used as the up axis of the source mesh."
msgstr ""

#: ../../docs/tutorials/3d/using_multi_mesh_instance.rst:72
msgid "Random Rotation"
msgstr ""

#: ../../docs/tutorials/3d/using_multi_mesh_instance.rst:74
msgid "Randomizing the rotation around the up axis of the source mesh."
msgstr ""

#: ../../docs/tutorials/3d/using_multi_mesh_instance.rst:77
msgid "Random Tilt"
msgstr ""

#: ../../docs/tutorials/3d/using_multi_mesh_instance.rst:79
msgid "Randomizing the overall rotation of the source mesh."
msgstr ""

#: ../../docs/tutorials/3d/using_multi_mesh_instance.rst:82
msgid "Random Scale"
msgstr ""

#: ../../docs/tutorials/3d/using_multi_mesh_instance.rst:84
msgid "Randomizing the scale of the source mesh."
msgstr ""

#: ../../docs/tutorials/3d/using_multi_mesh_instance.rst:89
msgid ""
"The scale of the source mesh that will be placed over the target surface."
msgstr ""

#: ../../docs/tutorials/3d/using_multi_mesh_instance.rst:92
msgid "Amount"
msgstr ""

#: ../../docs/tutorials/3d/using_multi_mesh_instance.rst:94
msgid "The amount of mesh instances placed over the target surface."
msgstr ""

#: ../../docs/tutorials/3d/using_multi_mesh_instance.rst:96
msgid ""
"Select the target surface. In the tree case, this should be the landscape "
"node. The source mesh should be the tree node. Adjust the other parameters "
"according to your preference. Press ``Populate`` and multiple copies of the "
"source mesh will be placed over the target mesh. If you are satisfied with "
"the result, you can delete the mesh instance used as the source mesh."
msgstr ""

#: ../../docs/tutorials/3d/using_multi_mesh_instance.rst:102
msgid "The end result should look like this:"
msgstr ""

#: ../../docs/tutorials/3d/using_multi_mesh_instance.rst:106
msgid ""
"To change the result, repeat the previous steps with different parameters."
msgstr ""

#: ../../docs/tutorials/3d/csg_tools.rst:4
msgid "CSG"
msgstr ""

#: ../../docs/tutorials/3d/csg_tools.rst:6
msgid ""
"CSG stands for **Constructive Solid Geometry**, and is a tool to combine "
"basic shapes or custom meshes to create more complex shapes. In 3D modelling "
"software, CSG is mostly known as \"Boolean Operators\"."
msgstr ""

#: ../../docs/tutorials/3d/csg_tools.rst:10
msgid ""
"Level prototyping is one of the main uses of CSG in Godot. This technique "
"allows users to create simple versions of most common shapes by combining "
"primitives. Interior environments can be created by using inverted "
"primitives."
msgstr ""

#: ../../docs/tutorials/3d/csg_tools.rst:17
msgid "Introduction to CSG nodes"
msgstr "CGS 노드 소개"

#: ../../docs/tutorials/3d/csg_tools.rst:19
msgid ""
"Like other features of Godot, CSG is supported in the form of nodes. These "
"are the CSG nodes:"
msgstr ""

#: ../../docs/tutorials/3d/csg_tools.rst:22
msgid ":ref:`CSGBox <class_CSGBox>`"
msgstr ":ref:`CSGBox <class_CSGBox>`"

#: ../../docs/tutorials/3d/csg_tools.rst:23
#, fuzzy
msgid ":ref:`CSGCylinder <class_CSGCylinder>` (also supports cone)"
msgstr ":ref:`CSGCylinder <class_CSGCylinder>` (원뿔도 지원)"

#: ../../docs/tutorials/3d/csg_tools.rst:24
msgid ":ref:`CSGSphere <class_CSGSphere>`"
msgstr ":ref:`CSGSphere <class_CSGSphere>`"

#: ../../docs/tutorials/3d/csg_tools.rst:25
msgid ":ref:`CSGTorus <class_CSGTorus>`"
msgstr ":ref:`CSGTorus <class_CSGTorus>`"

#: ../../docs/tutorials/3d/csg_tools.rst:26
msgid ":ref:`CSGPolygon <class_CSGPolygon>`"
msgstr ":ref:`CSGPolygon <class_CSGPolygon>`"

#: ../../docs/tutorials/3d/csg_tools.rst:27
msgid ":ref:`CSGMesh <class_CSGMesh>`"
msgstr ":ref:`CSGMesh <class_CSGMesh>`"

#: ../../docs/tutorials/3d/csg_tools.rst:28
msgid ":ref:`CSGCombiner <class_CSGcombiner>`"
msgstr ":ref:`CSGCombiner <class_CSGcombiner>`"

#: ../../docs/tutorials/3d/csg_tools.rst:35
msgid "CSG tools features"
msgstr "CSG 도구 기능"

#: ../../docs/tutorials/3d/csg_tools.rst:37
msgid "Every CSG node supports 3 kinds of boolean operations:"
msgstr ""

#: ../../docs/tutorials/3d/csg_tools.rst:39
msgid ""
"**Union:** Geometry of both primitives is merged, intersecting geometry is "
"removed."
msgstr ""

#: ../../docs/tutorials/3d/csg_tools.rst:41
msgid ""
"**Intersection:** Only intersecting geometry remains, the rest is removed."
msgstr ""

#: ../../docs/tutorials/3d/csg_tools.rst:42
msgid ""
"**Subtraction:** The second shape is subtracted from the first, leaving a "
"dent with its shape."
msgstr ""

#: ../../docs/tutorials/3d/csg_tools.rst:50
msgid "CSGPolygon"
msgstr ""

#: ../../docs/tutorials/3d/csg_tools.rst:52
msgid ""
"The :ref:`CSGPolygon <class_CSGPolygon>` node extrude along a Polygon drawn "
"in 2D (in X,Y coordinates) in the following ways:"
msgstr ""

#: ../../docs/tutorials/3d/csg_tools.rst:55
msgid "**Depth:** Extruded back a given amount."
msgstr ""

#: ../../docs/tutorials/3d/csg_tools.rst:56
msgid "**Spin:** Extruded while spinning around its origin."
msgstr ""

#: ../../docs/tutorials/3d/csg_tools.rst:57
msgid ""
"**Path:** Extruded along a Path node. This operation is commonly called "
"lofting."
msgstr ""

#: ../../docs/tutorials/3d/csg_tools.rst:64
msgid ""
"The **Path** mode must be provided with a :ref:`Path <class_Path>` node to "
"work. In the Path node, draw the path and the polygon in CSGPolygon will "
"extrude along the given path."
msgstr ""

#: ../../docs/tutorials/3d/csg_tools.rst:70
msgid "Custom meshes"
msgstr "맞춤 메시"

#: ../../docs/tutorials/3d/csg_tools.rst:72
msgid ""
"Any mesh can be used for :ref:`CSGMesh <class_CSGMesh>`; the mesh can be "
"modelled in other software and imported into Godot. Multiple materials are "
"supported. There are some restrictions for geometry:"
msgstr ""

#: ../../docs/tutorials/3d/csg_tools.rst:76
#, fuzzy
msgid "it must be closed,"
msgstr "Repeat가 활성화되어 있어야 합니다"

#: ../../docs/tutorials/3d/csg_tools.rst:77
msgid "it must not self-intersect,"
msgstr ""

#: ../../docs/tutorials/3d/csg_tools.rst:78
msgid "it must not contain internal faces,"
msgstr ""

#: ../../docs/tutorials/3d/csg_tools.rst:79
msgid "every edge must connect to only two other faces."
msgstr ""

#: ../../docs/tutorials/3d/csg_tools.rst:84
msgid "CSGCombiner"
msgstr ""

#: ../../docs/tutorials/3d/csg_tools.rst:86
msgid ""
"The :ref:`CSGCombiner <class_CSGCombiner>` node is an empty shape used for "
"organization. It will only combine children nodes."
msgstr ""

#: ../../docs/tutorials/3d/csg_tools.rst:90
#, fuzzy
msgid "Processing order"
msgstr "처리 순서"

#: ../../docs/tutorials/3d/csg_tools.rst:92
msgid ""
"Every CSG node will first process its children nodes and their operations: "
"union, intersection or subtraction, in tree order, and apply them to itself "
"one after the other."
msgstr ""

#: ../../docs/tutorials/3d/csg_tools.rst:96
msgid ""
"In the interest of performance, make sure CSG geometry remains relatively "
"simple, as complex meshes can take a while to process. If adding objects "
"together (such as table and room objects), create them as separate CSG "
"trees. Forcing too many objects in a single tree will eventually start "
"affecting performance. Only use binary operations where you actually need "
"them."
msgstr ""

#: ../../docs/tutorials/3d/csg_tools.rst:104
msgid "Prototyping a level"
msgstr ""

#: ../../docs/tutorials/3d/csg_tools.rst:106
msgid "We will prototype a room to practice the use of CSG tools."
msgstr ""

#: ../../docs/tutorials/3d/csg_tools.rst:108
msgid ""
"Working in **Orthogonal** projection gives a better view when combining the "
"CSG shapes."
msgstr ""

#: ../../docs/tutorials/3d/csg_tools.rst:111
msgid "Our level will contain these objects:"
msgstr ""

#: ../../docs/tutorials/3d/csg_tools.rst:113
msgid "a room,"
msgstr ""

#: ../../docs/tutorials/3d/csg_tools.rst:114
msgid "a bed,"
msgstr ""

#: ../../docs/tutorials/3d/csg_tools.rst:115
msgid "a lamp,"
msgstr ""

#: ../../docs/tutorials/3d/csg_tools.rst:116
msgid "a desk,"
msgstr ""

#: ../../docs/tutorials/3d/csg_tools.rst:117
msgid "a bookshelf."
msgstr ""

#: ../../docs/tutorials/3d/csg_tools.rst:119
msgid "Create a scene with a Spatial node as root node."
msgstr ""

#: ../../docs/tutorials/3d/csg_tools.rst:121
msgid ""
"The default lighting of the environment doesn't provide clear shading at "
"some angles. Change the display mode using **Display Overdraw** in the 3D "
"viewport menu, or add a DirectionalLight node to help you see clearly."
msgstr ""

#: ../../docs/tutorials/3d/csg_tools.rst:128
msgid ""
"Create a CSGBox and name it ``room``, enable **Invert Faces** and change the "
"dimensions of your room."
msgstr ""

#: ../../docs/tutorials/3d/csg_tools.rst:135
msgid "Next, create a CSGCombiner and name it ``desk``."
msgstr ""

#: ../../docs/tutorials/3d/csg_tools.rst:137
msgid "A desk has one surface and 4 legs:"
msgstr ""

#: ../../docs/tutorials/3d/csg_tools.rst:139
msgid ""
"Create 1 CSGBox children node in **Union** mode for the surface and adjust "
"the dimensions."
msgstr ""

#: ../../docs/tutorials/3d/csg_tools.rst:141
msgid ""
"Create 4 CSGBox children nodes in **Union** mode for the legs and adjust the "
"dimensions."
msgstr ""

#: ../../docs/tutorials/3d/csg_tools.rst:144
msgid "Adjust their placement to resemble a desk."
msgstr ""

#: ../../docs/tutorials/3d/csg_tools.rst:148
msgid ""
"CSG nodes inside a CSGCombiner will only process their operation within the "
"combiner. Therefore, CSGCombiners are used to organize CSG nodes."
msgstr ""

#: ../../docs/tutorials/3d/csg_tools.rst:152
msgid "Create a CSGCombiner and name it ``bed``."
msgstr ""

#: ../../docs/tutorials/3d/csg_tools.rst:154
msgid ""
"Our bed consists of 3 parts: the bed, the mattress and a pillow. Create a "
"CSGBox and adjust its dimension for the bed. Create another CSGBox and "
"adjust its dimension for the mattress."
msgstr ""

#: ../../docs/tutorials/3d/csg_tools.rst:160
msgid ""
"We will create another CSGCombiner named ``pillow`` as the child of  "
"``bed``. The scene tree should look like this:"
msgstr ""

#: ../../docs/tutorials/3d/csg_tools.rst:165
msgid ""
"We will combine 3 CSGSphere nodes in **Union** mode to form a pillow. Scale "
"the Y axis of the spheres and enable **Smooth Faces**."
msgstr ""

#: ../../docs/tutorials/3d/csg_tools.rst:170
msgid ""
"Select the ``pillow`` node and switch the mode to **Subtraction**; the "
"combined spheres will cut a hole into the mattress."
msgstr ""

#: ../../docs/tutorials/3d/csg_tools.rst:175
msgid ""
"Try to re-parent the ``pillow`` node to the root ``Spatial`` node; the hole "
"will disappear."
msgstr ""

#: ../../docs/tutorials/3d/csg_tools.rst:178
msgid ""
"This is to illustrate the effect of CSG processing order. Since the root "
"node is not a CSG node, the CSGCombiner nodes are the end of the operations; "
"this shows the use of CSGCombiner to organize the CSG scene."
msgstr ""

#: ../../docs/tutorials/3d/csg_tools.rst:183
#, fuzzy
msgid ""
"Undo the re-parent after observing the effect. The bed you've built should "
"look like this:"
msgstr "만든 침대는 다음과 같아야 합니다:"

#: ../../docs/tutorials/3d/csg_tools.rst:188
msgid "Create a CSGCombiner and name it ``lamp``."
msgstr ""

#: ../../docs/tutorials/3d/csg_tools.rst:190
msgid ""
"A lamp consists of 3 parts: the stand, the pole and the lampshade. Create a "
"CSGCylinder, enable the **Cone** option and make it the stand. Create "
"another CSGCylinder and adjust the dimensions to use it as a pole."
msgstr ""

#: ../../docs/tutorials/3d/csg_tools.rst:196
msgid ""
"We will use a CSGPolygon for the lampshade. Use the **Spin** mode for the "
"CSGPolygon and draw a `trapezoid <https://en.wikipedia.org/wiki/Trapezoid>`_ "
"while in **Front View** (numeric keypad 1); this shape will extrude around "
"the origin and form the lampshade."
msgstr ""

#: ../../docs/tutorials/3d/csg_tools.rst:207
msgid "Adjust the placement of the 3 parts to make it look like a lamp."
msgstr ""

#: ../../docs/tutorials/3d/csg_tools.rst:211
msgid "Create a CSGCombiner and name it ``bookshelf``."
msgstr ""

#: ../../docs/tutorials/3d/csg_tools.rst:213
msgid ""
"We will use 3 CSGBox nodes for the bookshelf. Create a CSGBox and adjust its "
"dimensions; this will be the size of the bookshelf."
msgstr ""

#: ../../docs/tutorials/3d/csg_tools.rst:218
msgid ""
"Duplicate the CSGBox and shorten the dimensions of each axis and change the "
"mode to **Subtraction**."
msgstr ""

#: ../../docs/tutorials/3d/csg_tools.rst:225
msgid ""
"You've almost built a shelf. Create one more CSGBox for dividing the shelf "
"into two levels."
msgstr ""

#: ../../docs/tutorials/3d/csg_tools.rst:230
msgid ""
"Position your furniture in your room as you like and your scene should look "
"this:"
msgstr "방에 가구를 원하는 장소에 배치하고 씬은 다음과 같이 보여야 합니다:"

#: ../../docs/tutorials/3d/csg_tools.rst:235
msgid ""
"You've successfully prototyped a room level with the CSG tools in Godot. CSG "
"tools can be used for designing all kinds of levels, such as a maze or a "
"city; explore its limitations when designing your game."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/index.rst:2
msgid "FPS tutorial"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_one.rst:4
msgid "Part 1"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_one.rst:7
msgid "Tutorial introduction"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_one.rst:11
msgid ""
"This tutorial series will show you how to make a single player FPS game."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_one.rst:13
msgid "Throughout the course of this tutorial series, we will cover how:"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_one.rst:15
msgid "To make a first person character that can move, sprint, and jump."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_one.rst:16
msgid ""
"To make a simple animation state machine for handling animation transitions."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_one.rst:17
msgid ""
"To add three weapons to the first person character, each using a different "
"way to handle bullet collisions:"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_one.rst:18
msgid "A knife (using an :ref:`Area <class_Area>`)"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_one.rst:19
msgid "A pistol (Bullet scenes)"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_one.rst:20
msgid "A rifle (using a :ref:`Raycast <class_Raycast>`)"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_one.rst:21
msgid "To add two different types of grenades to the first person character:"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_one.rst:22
msgid "A normal grenade"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_one.rst:23
msgid "A sticky grenade"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_one.rst:24
msgid ""
"To add the ability to grab and throw :ref:`RigidBody <class_RigidBody>` nodes"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_one.rst:25
msgid "To add joypad input for the player"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_one.rst:26
msgid "To add ammo and reloading for all weapons that consume ammo."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_one.rst:27
msgid "To add ammo and health pick ups"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_one.rst:28
msgid "In two sizes: big and small"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_one.rst:29
msgid "To add an automatic turret"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_one.rst:30
msgid "That can fire using bullet objects or a :ref:`Raycast <class_Raycast>`"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_one.rst:31
msgid "To add targets that break when they've taken enough damage"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_one.rst:32
msgid "To add sounds that play when the guns fire."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_one.rst:33
msgid "To add a simple main menu:"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_one.rst:34
msgid "With an options menu for changing how the game runs"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_one.rst:35
msgid "With a level select screen"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_one.rst:36
msgid "To add a universal pause menu we can access anywhere"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_one.rst:38
msgid ""
"While this tutorial can be completed by beginners, it is highly advised to "
"complete :ref:`doc_your_first_game`, if you are new to Godot and/or game "
"development **before** going through this tutorial series."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_one.rst:43
msgid ""
"Remember: Making 3D games is much harder than making 2D games. If you do not "
"know how to make 2D games, you will likely struggle making 3D games."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_one.rst:46
msgid ""
"This tutorial assumes you have experience working with the Godot editor, "
"basic programming experience in GDScript, and basic experience in game "
"development."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_one.rst:49
msgid ""
"You can find the start assets for this tutorial here: :download:"
"`Godot_FPS_Starter.zip <files/Godot_FPS_Starter.zip>`"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_one.rst:51
msgid ""
"The provided starter assets contain an animated 3D model, a bunch of 3D "
"models for making levels, and a few scenes already configured for this "
"tutorial."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_one.rst:54
msgid ""
"All assets provided (unless otherwise noted) were originally created by "
"TwistedTwigleg, with changes/additions by the Godot community. All original "
"assets provided for this tutorial are released under the ``MIT`` license."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_one.rst:57
#: ../../docs/tutorials/3d/fps_tutorial/part_six.rst:1029
msgid ""
"Feel free to use these assets however you want! All original assets belong "
"to the Godot community, with the other assets belonging to those listed "
"below:"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_one.rst:59
msgid ""
"The skybox is created by **StumpyStrust** on OpenGameArt. The skybox used is "
"licensed under ``CC0``."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_one.rst:62
#: ../../docs/tutorials/3d/fps_tutorial/part_six.rst:1034
msgid ""
"The font used is **Titillium-Regular**, and is licensed under the ``SIL Open "
"Font License, Version 1.1``."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_one.rst:64
msgid ""
"You can find the finished project for each part at the bottom of each part's "
"page"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_one.rst:67
#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:7
#: ../../docs/tutorials/3d/fps_tutorial/part_three.rst:7
#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:7
#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:7
#: ../../docs/tutorials/3d/fps_tutorial/part_six.rst:7
msgid "Part overview"
msgstr "파트 개요"

#: ../../docs/tutorials/3d/fps_tutorial/part_one.rst:69
msgid ""
"In this part we will be making a first person player that can move around "
"the environment."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_one.rst:74
msgid ""
"By the end of this part, you will have a working first-person character who "
"can move around the game environment, sprint, look around with a mouse based "
"first person camera, jump into the air, and turn a flash light on and off."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_one.rst:78
#: ../../docs/tutorials/vr/vr_starter_tutorial/vr_starter_tutorial_part_one.rst:62
msgid "Getting everything ready"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_one.rst:80
msgid "Launch Godot and open up the project included in the starter assets."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_one.rst:82
msgid ""
"While these assets are not necessarily required to use the scripts provided "
"in this tutorial, they will make the tutorial much easier to follow, as "
"there are several pre-setup scenes we will be using throughout the tutorial "
"series."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_one.rst:86
msgid ""
"First, open the project settings and go to the \"Input Map\" tab. You'll "
"find several actions have already been defined. We will be using these "
"actions for our player. Feel free to change the keys bound to these actions "
"if you want."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_one.rst:92
msgid "Let's take a second to see what we have in the starter assets."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_one.rst:94
msgid ""
"Included in the starter assets are several scenes. For example, in ``res://"
"`` we have 14 scenes, most of which we will be visiting as we go through "
"this tutorial series."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_one.rst:97
msgid "For now let's open up ``Player.tscn``."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_one.rst:99
msgid ""
"There are a bunch of scenes and a few textures in the ``Assets`` folder. You "
"can look at these if you want, but we will not be exploring through "
"``Assets`` in this tutorial series. ``Assets`` contains all the models used "
"for each of the levels, as well as some textures and materials."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_one.rst:104
msgid "Making the FPS movement logic"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_one.rst:106
msgid ""
"Once you have ``Player.tscn`` open, let's take a quick look at how it is set "
"up"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_one.rst:110
msgid ""
"First, notice how the player's collision shapes are set up. Using a vertical "
"pointing capsule as the collision shape for the player is fairly common in "
"most first person games."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_one.rst:113
msgid ""
"We are adding a small square to the 'feet' of the player so the player does "
"not feel like they are balancing on a single point."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_one.rst:116
msgid ""
"We do want the 'feet' slightly higher than the bottom of the capsule so we "
"can roll over slight edges. Where to place the 'feet' is dependent on your "
"levels and how you want your player to feel."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_one.rst:119
msgid ""
"Many times the player will notice the collision shape being circular when "
"they walk to an edge and slide off. We are adding the small square at the "
"bottom of the capsule to reduce sliding on, and around, edges."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_one.rst:123
msgid ""
"Another thing to notice is how many nodes are children of "
"``Rotation_Helper``. This is because ``Rotation_Helper`` contains all the "
"nodes we want to rotate on the ``X`` axis (up and down). The reason behind "
"this is so we can rotate ``Player`` on the ``Y`` axis, and "
"``Rotation_helper`` on the ``X`` axis."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_one.rst:128
msgid ""
"Had we not used ``Rotation_helper``, we would've likely had cases of "
"rotating on both the ``X`` and ``Y`` axes simultaneously, potentially "
"further degenerating into a state of rotation on all three axes in some "
"cases."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_one.rst:132
msgid "See :ref:`using transforms <doc_using_transforms>` for more information"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_one.rst:136
msgid "Attach a new script to the ``Player`` node and call it ``Player.gd``."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_one.rst:138
msgid ""
"Let's program our player by adding the ability to move around, look around "
"with the mouse, and jump. Add the following code to ``Player.gd``:"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_one.rst:375
msgid "This is a lot of code, so let's break it down function by function:"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_one.rst:377
msgid ""
"While copy and pasting code is ill advised, as you can learn a lot from "
"manually typing the code in, you can copy and paste the code from this page "
"directly into the script editor."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_one.rst:380
#: ../../docs/tutorials/vr/vr_starter_tutorial/vr_starter_tutorial_part_one.rst:247
msgid ""
"If you do this, all of the code copied will be using spaces instead of tabs."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_one.rst:382
msgid ""
"To convert the spaces to tabs in the script editor, click the \"edit\" menu "
"and select \"Convert Indent To Tabs\". This will convert all the spaces into "
"tabs. You can select \"Convert Indent To Spaces\" to convert tabs back into "
"spaces."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_one.rst:387
msgid ""
"First, we define some class variables to dictate how our player will move "
"about the world."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_one.rst:389
msgid ""
"Throughout this tutorial, **variables defined outside functions will be "
"referred to as \"class variables\"**. This is because we can access any of "
"these variables from any place in the script."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_one.rst:393
msgid "Let's go through each of the class variables:"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_one.rst:395
msgid "``GRAVITY``: How strong gravity pulls us down."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_one.rst:396
msgid "``vel``: Our :ref:`KinematicBody <class_KinematicBody>`'s velocity."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_one.rst:397
msgid ""
"``MAX_SPEED``: The fastest speed we can reach. Once we hit this speed, we "
"will not go any faster."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_one.rst:398
msgid "``JUMP_SPEED``: How high we can jump."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_one.rst:399
msgid ""
"``ACCEL``: How quickly we accelerate. The higher the value, the sooner we "
"get to max speed."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_one.rst:400
msgid ""
"``DEACCEL``: How quickly we are going to decelerate. The higher the value, "
"the sooner we will come to a complete stop."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_one.rst:401
msgid ""
"``MAX_SLOPE_ANGLE``: The steepest angle our :ref:`KinematicBody "
"<class_KinematicBody>` will consider as a 'floor'."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_one.rst:402
msgid "``camera``: The :ref:`Camera <class_Camera>` node."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_one.rst:403
msgid ""
"``rotation_helper``: A :ref:`Spatial <class_Spatial>` node holding "
"everything we want to rotate on the X axis (up and down)."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_one.rst:404
msgid ""
"``MOUSE_SENSITIVITY``: How sensitive the mouse is. I find a value of "
"``0.05`` works well for my mouse, but you may need to change it based on how "
"sensitive your mouse is."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_one.rst:406
msgid ""
"You can tweak many of these variables to get different results. For example, "
"by lowering ``GRAVITY`` and/or increasing ``JUMP_SPEED`` you can get a more "
"'floaty' feeling character. Feel free to experiment!"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_one.rst:410
msgid ""
"You may have noticed that ``MOUSE_SENSITIVITY`` is written in all caps like "
"the other constants, but ``MOUSE_SENSITIVITY`` is not a constant."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_one.rst:412
msgid ""
"The reason behind this is we want to treat it like a constant variable (a "
"variable that cannot change) throughout our script, but we want to be able "
"to change the value later when we add customizable settings. So, in an "
"effort to remind ourselves to treat it like a constant, it's named in all "
"caps."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_one.rst:417
msgid "Now let's look at the ``_ready`` function:"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_one.rst:419
msgid ""
"First we get the ``camera`` and ``rotation_helper`` nodes and store them "
"into their variables."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_one.rst:421
msgid ""
"Then we need to set the mouse mode to captured, so the mouse cannot leave "
"the game window."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_one.rst:423
msgid ""
"This will hide the mouse and keep it at the center of the screen. We do this "
"for two reasons: The first reason being we do not want the player to see "
"their mouse cursor as they play."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_one.rst:426
msgid ""
"The second reason is because we do not want the cursor to leave the game "
"window. If the cursor leaves the game window there could be instances where "
"the player clicks outside the window, and then the game would lose focus. To "
"assure neither of these issues happens, we capture the mouse cursor."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_one.rst:430
msgid ""
"See :ref:`Input documentation <class_Input>` for the various mouse modes. We "
"will only be using ``MOUSE_MODE_CAPTURED`` and ``MOUSE_MODE_VISIBLE`` in "
"this tutorial series."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_one.rst:435
msgid "Next let's take a look at ``_physics_process``:"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_one.rst:437
msgid ""
"All we're doing in ``_physics_process`` is calling two functions: "
"``process_input`` and ``process_movement``."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_one.rst:439
msgid ""
"``process_input`` will be where we store all the code relating to player "
"input. We want to call it first, before anything else, so we have fresh "
"player input to work with."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_one.rst:442
msgid ""
"``process_movement`` is where we'll send all the data necessary to the :ref:"
"`KinematicBody <class_KinematicBody>` so it can move through the game world."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_one.rst:447
msgid "Let's look at ``process_input`` next:"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_one.rst:449
msgid "First we set ``dir`` to an empty :ref:`Vector3 <class_Vector3>`."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_one.rst:451
msgid ""
"``dir`` will be used for storing the direction the player intends to move "
"towards. Because we do not want the player's previous input to effect the "
"player beyond a single ``process_movement`` call, we reset ``dir``."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_one.rst:454
msgid ""
"Next we get the camera's global transform and store it as well, into the "
"``cam_xform`` variable."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_one.rst:456
msgid ""
"The reason we need the camera's global transform is so we can use its "
"directional vectors. Many have found directional vectors confusing, so let's "
"take a second to explain how they work:"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_one.rst:461
msgid ""
"World space can be defined as: The space in which all objects are placed in, "
"relative to a constant origin point. Every object, no matter if it is 2D or "
"3D, has a position in world space."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_one.rst:464
msgid ""
"To put it another way: world space is the space in a universe where every "
"object's position, rotation, and scale can be measured by a single, known, "
"fixed point called the origin."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_one.rst:467
msgid ""
"In Godot, the origin is at position ``(0, 0, 0)`` with a rotation of ``(0, "
"0, 0)`` and a scale of ``(1, 1, 1)``."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_one.rst:469
msgid ""
"When you open up the Godot editor and select a :ref:`Spatial "
"<class_Spatial>` based node, a gizmo pops up. Each of the arrows points "
"using world space directions by default."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_one.rst:472
msgid ""
"If you want to move using the world space directional vectors, you'd do "
"something like this:"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_one.rst:497
msgid ""
"Notice how we do not need to do any calculations to get world space "
"directional vectors. We can define a few :ref:`Vector3 <class_Vector3>` "
"variables and input the values pointing in each direction."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_one.rst:500
msgid "Here is what world space looks like in 2D:"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_one.rst:502
msgid ""
"The following images are just examples. Each arrow/rectangle represents a "
"directional vector"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_one.rst:506
#: ../../docs/tutorials/3d/fps_tutorial/part_one.rst:561
msgid "And here is what it looks like for 3D:"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_one.rst:510
msgid ""
"Notice how in both examples, the rotation of the node does not change the "
"directional arrows. This is because world space is a constant. No matter how "
"you translate, rotate, or scale an object, world space will *always point in "
"the same direction*."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_one.rst:514
msgid ""
"Local space is different, because it takes the rotation of the object into "
"account."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_one.rst:516
msgid ""
"Local space can be defined as follows: The space in which an object's "
"position is the origin of the universe. Because the position of the origin "
"can be at ``N`` many locations, the values derived from local space change "
"with the position of the origin."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_one.rst:521
msgid ""
"This stack overflow question has a much better explanation of world space "
"and local space."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_one.rst:523
msgid ""
"https://gamedev.stackexchange.com/questions/65783/what-are-world-space-and-"
"eye-space-in-game-development (Local space and eye space are essentially the "
"same thing in this context)"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_one.rst:526
msgid ""
"To get a :ref:`Spatial <class_Spatial>` node's local space, we need to get "
"its :ref:`Transform <class_Transform>`, so then we can get the :ref:`Basis "
"<class_Basis>` from the :ref:`Transform <class_Transform>`."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_one.rst:529
msgid ""
"Each :ref:`Basis <class_Basis>` has three vectors: ``X``, ``Y``, and ``Z``. "
"Each of those vectors point towards each of the local space vectors coming "
"from that object."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_one.rst:532
msgid ""
"To use the :ref:`Spatial <class_Spatial>` node's local directional vectors, "
"we use this code:"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_one.rst:557
msgid "Here is what local space looks like in 2D:"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_one.rst:565
msgid ""
"Here is what the :ref:`Spatial <class_Spatial>` gizmo shows when you are "
"using local space mode. Notice how the arrows follow the rotation of the "
"object on the left, which looks exactly the same as the 3D example for local "
"space."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_one.rst:569
msgid ""
"You can change between local and world space modes by pressing :kbd:`T` or "
"the little cube button when you have a :ref:`Spatial <class_Spatial>` based "
"node selected."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_one.rst:574
msgid ""
"Local vectors are confusing even for more experienced game developers, so do "
"not worry if this all doesn't make a lot of sense. The key thing to remember "
"about local vectors is that we are using local coordinates to get direction "
"from the object's point of view, as opposed to using world vectors, which "
"give direction from the world's point of view."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_one.rst:580
msgid "Okay, back to ``process_input``:"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_one.rst:582
msgid ""
"Next we make a new variable called ``input_movement_vector`` and assign it "
"to an empty :ref:`Vector2 <class_Vector2>`. We will use this to make a "
"virtual axis of sorts, to map the player's input to movement."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_one.rst:585
msgid ""
"This may seem overkill for just the keyboard, but this will make sense later "
"when we add joypad input."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_one.rst:587
msgid ""
"Based on which directional movement action is pressed, we add to or subtract "
"from ``input_movement_vector``."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_one.rst:589
msgid ""
"After we've checked each of the directional movement actions, we normalize "
"``input_movement_vector``. This makes it where ``input_movement_vector``'s "
"values are within a ``1`` radius unit circle."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_one.rst:592
msgid ""
"Next we add the camera's local ``Z`` vector times ``input_movement_vector."
"y`` to ``dir``. This is so when the player presses forward or backwards, we "
"add the camera's local ``Z`` axis so the player moves forward or backwards "
"in relation to the camera."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_one.rst:595
msgid ""
"Because the camera is rotated by ``-180`` degrees, we have to flip the ``Z`` "
"directional vector. Normally forward would be the positive Z axis, so using "
"``basis.z.normalized()`` would work, but we are using ``-basis.z."
"normalized()`` because our camera's Z axis faces backwards in relation to "
"the rest of the player."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_one.rst:600
msgid ""
"We do the same thing for the camera's local ``X`` vector, and instead of "
"using ``input_movement_vector.y`` we instead use ``input_movement_vector."
"x``. This makes it where the player moves left/right in relation to the "
"camera when the player presses left/right."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_one.rst:603
msgid ""
"Next we check if the player is on the floor using :ref:`KinematicBody "
"<class_KinematicBody>`'s ``is_on_floor`` function. If it is, then we check "
"to see if the \"movement_jump\" action has just been pressed. If it has, "
"then we set the player's ``Y`` velocity to ``JUMP_SPEED``."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_one.rst:607
msgid ""
"Because we're setting the Y velocity, the player will jump into the air."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_one.rst:609
msgid ""
"Then we check for the ``ui_cancel`` action. This is so we can free/capture "
"the mouse cursor when the ``escape`` button is pressed. We do this because "
"otherwise we'd have no way to free the cursor, meaning it would be stuck "
"until you terminate the runtime."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_one.rst:613
msgid ""
"To free/capture the cursor, we check to see if the mouse is visible (freed) "
"or not. If it is, we capture it, and if it's not, we make it visible (free "
"it)."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_one.rst:615
msgid ""
"That's all we're doing right now for ``process_input``. We'll come back "
"several times to this function as we add more complexities to our player."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_one.rst:619
msgid "Now let's look at ``process_movement``:"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_one.rst:621
msgid ""
"First we ensure that ``dir`` does not have any movement on the ``Y`` axis by "
"setting its ``Y`` value to zero."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_one.rst:623
msgid ""
"Next we normalize ``dir`` to ensure we're within a ``1`` radius unit circle. "
"This makes it where we're moving at a constant speed regardless of whether "
"the player is moving straight or diagonally. If we did not normalize, the "
"player would move faster on the diagonal than when going straight."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_one.rst:626
msgid ""
"Next we add gravity to the player by adding ``GRAVITY * delta`` to the "
"player's ``Y`` velocity."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_one.rst:628
msgid ""
"After that we assign the player's velocity to a new variable (called "
"``hvel``) and remove any movement on the ``Y`` axis."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_one.rst:630
msgid ""
"Next we set a new variable (``target``) to the player's direction vector. "
"Then we multiply that by the player's max speed so we know how far the "
"player will move in the direction provided by ``dir``."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_one.rst:633
msgid "After that we make a new variable for acceleration, named ``accel``."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_one.rst:635
msgid ""
"We then take the dot product of ``hvel`` to see if the player is moving "
"according to ``hvel``. Remember, ``hvel`` does not have any ``Y`` velocity, "
"meaning we are only checking if the player is moving forwards, backwards, "
"left, or right."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_one.rst:639
msgid ""
"If the player is moving according to ``hvel``, then we set ``accel`` to the "
"``ACCEL`` constant so the player will accelerate, otherwise we set ``accel`` "
"to our ``DEACCEL`` constant so the player will decelerate."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_one.rst:642
msgid ""
"Then we interpolate the horizontal velocity, set the player's ``X`` and "
"``Z`` velocity to the interpolated horizontal velocity, and call "
"``move_and_slide`` to let the :ref:`KinematicBody <class_KinematicBody>` "
"handle moving the player through the physics world."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_one.rst:645
msgid ""
"All of the code in ``process_movement`` is exactly the same as the movement "
"code from the Kinematic Character demo!"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_one.rst:649
msgid ""
"The final function we have is the ``_input`` function, and thankfully it's "
"fairly short:"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_one.rst:651
msgid ""
"First we make sure that the event we are dealing with is an :ref:"
"`InputEventMouseMotion <class_InputEventMouseMotion>` event. We also want to "
"check if the cursor is captured, as we do not want to rotate if it is not."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_one.rst:654
msgid ""
"See :ref:`Mouse and input coordinates <doc_mouse_and_input_coordinates>` for "
"a list of possible input events."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_one.rst:657
msgid ""
"If the event is indeed a mouse motion event and the cursor is captured, we "
"rotate based on the relative mouse motion provided by :ref:"
"`InputEventMouseMotion <class_InputEventMouseMotion>`."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_one.rst:660
msgid ""
"First we rotate the ``rotation_helper`` node on the ``X`` axis, using the "
"relative mouse motion's ``Y`` value, provided by :ref:`InputEventMouseMotion "
"<class_InputEventMouseMotion>`."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_one.rst:663
msgid ""
"Then we rotate the entire :ref:`KinematicBody <class_KinematicBody>` on the "
"``Y`` axis by the relative mouse motion's ``X`` value."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_one.rst:665
msgid ""
"Godot converts relative mouse motion into a :ref:`Vector2 <class_Vector2>` "
"where mouse movement going up and down is ``1`` and ``-1`` respectively. "
"Right and Left movement is ``1`` and ``-1`` respectively."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_one.rst:669
msgid ""
"Because of how we are rotating the player, we multiply the relative mouse "
"motion's ``X`` value by ``-1`` so mouse motion going left and right rotates "
"the player left and right in the same direction."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_one.rst:673
msgid ""
"Finally, we clamp the ``rotation_helper``'s ``X`` rotation to be between "
"``-70`` and ``70`` degrees so the player cannot rotate themselves upside "
"down."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_one.rst:676
msgid ""
"See :ref:`using transforms <doc_using_transforms>` for more information on "
"rotating transforms."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_one.rst:680
msgid ""
"To test the code, open up the scene named ``Testing_Area.tscn``, if it's not "
"already opened up. We will be using this scene as we go through the next few "
"tutorial parts, so be sure to keep it open in one of your scene tabs."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_one.rst:683
msgid ""
"Go ahead and test your code either by pressing :kbd:`F6` with ``Testing_Area."
"tscn`` as the open tab, by pressing the play button in the top right corner, "
"or by pressing :kbd:`F5`. You should now be able to walk around, jump in the "
"air, and look around using the mouse."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_one.rst:689
msgid "Giving the player a flash light and the option to sprint"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_one.rst:691
msgid ""
"Before we get to making the weapons work, there are a couple more things we "
"should add."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_one.rst:693
msgid ""
"Many FPS games have an option to sprint and a flashlight. We can easily add "
"these to our player, so let's do that!"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_one.rst:696
msgid "First we need a few more class variables in our player script:"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_one.rst:717
msgid ""
"All the sprinting variables work exactly the same as the non sprinting "
"variables with similar names."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_one.rst:720
msgid ""
"``is_sprinting`` is a boolean to track whether the player is currently "
"sprinting, and ``flashlight`` is a variable we will be using to hold the "
"player's flash light node."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_one.rst:723
msgid ""
"Now we need to add a few lines of code, starting in ``_ready``. Add the "
"following to ``_ready``:"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_one.rst:734
msgid ""
"This gets the ``Flashlight`` node and assigns it to the ``flashlight`` "
"variable."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_one.rst:738
msgid ""
"Now we need to change some of the code in ``process_input``. Add the "
"following somewhere in ``process_input``:"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_one.rst:780
msgid "Let's go over the additions:"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_one.rst:782
msgid ""
"We set ``is_sprinting`` to ``true`` when the player is holding down the "
"``movement_sprint`` action, and ``false`` when the ``movement_sprint`` "
"action is released. In ``process_movement`` we'll add the code that makes "
"the player faster when they sprint. Here in ``process_input`` we are just "
"going to change the ``is_sprinting`` variable."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_one.rst:786
msgid ""
"We do something similar to freeing/capturing the cursor for handling the "
"flashlight. We first check to see if the ``flashlight`` action was just "
"pressed. If it was, we then check to see if ``flashlight`` is visible in the "
"scene tree. If it is, then we hide it, and if it's not, we show it."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_one.rst:791
msgid ""
"Now we need to change a couple things in ``process_movement``. First, "
"replace ``target *= MAX_SPEED`` with the following:"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_one.rst:808
msgid ""
"Now instead of always multiplying ``target`` by ``MAX_SPEED``, we first "
"check to see if the player is sprinting or not. If the player is sprinting, "
"we instead multiply ``target`` by ``MAX_SPRINT_SPEED``."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_one.rst:811
msgid ""
"Now all that's left is to change the acceleration when sprinting. Change "
"``accel = ACCEL`` to the following:"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_one.rst:828
msgid ""
"Now, when the player is sprinting, we'll use ``SPRINT_ACCEL`` instead of "
"``ACCEL``, which will accelerate the player faster."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_one.rst:832
msgid ""
"You should now be able to sprint if you press :kbd:`Shift`, and can toggle "
"the flash light on and off by pressing :kbd:`F`!"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_one.rst:834
msgid ""
"Go try it out! You can change the sprint-related class variables to make the "
"player faster or slower when sprinting!"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_one.rst:837
#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:1226
#: ../../docs/tutorials/3d/fps_tutorial/part_three.rst:668
#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:778
#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:951
#: ../../docs/tutorials/3d/fps_tutorial/part_six.rst:996
#: ../../docs/tutorials/vr/vr_starter_tutorial/vr_starter_tutorial_part_one.rst:1144
#: ../../docs/tutorials/vr/vr_starter_tutorial/vr_starter_tutorial_part_two.rst:1025
msgid "Final notes"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_one.rst:841
msgid ""
"Whew! That was a lot of work. Now you have a fully working first person "
"character!"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_one.rst:843
msgid ""
"In :ref:`doc_fps_tutorial_part_two` we will add some guns to our player "
"character."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_one.rst:845
msgid ""
"At this point we've recreated the Kinematic character demo from first person "
"perspective with sprinting and a flash light!"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_one.rst:847
msgid ""
"Currently the player script would be at an ideal state for making all sorts "
"of first person games. For example: Horror games, platformer games, "
"adventure games, and more!"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_one.rst:850
#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:1237
#: ../../docs/tutorials/3d/fps_tutorial/part_three.rst:683
#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:787
#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:960
#: ../../docs/tutorials/3d/fps_tutorial/part_six.rst:1004
msgid "If you ever get lost, be sure to read over the code again!"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_one.rst:852
msgid ""
"You can download the finished project for this part here: :download:"
"`Godot_FPS_Part_1.zip <files/Godot_FPS_Part_1.zip>`"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:4
msgid "Part 2"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:9
msgid "In this part we will be giving our player weapons to play with."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:13
msgid ""
"By the end of this part, you will have a player that can fire a pistol, "
"rifle, and attack using a knife. The player will also now have animations "
"with transitions, and the weapons will interact with objects in the "
"environment."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:17
msgid ""
"You are assumed to have finished :ref:`doc_fps_tutorial_part_one` before "
"moving on to this part of the tutorial. The finished project from :ref:"
"`doc_fps_tutorial_part_one` will be the starting project for part 2"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:20
#: ../../docs/tutorials/3d/fps_tutorial/part_three.rst:18
#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:16
#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:16
#: ../../docs/tutorials/3d/fps_tutorial/part_six.rst:19
msgid "Let's get started!"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:23
msgid "Making a system to handle animations"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:25
msgid ""
"First we need a way to handle changing animations. Open up ``Player.tscn`` "
"and select the :ref:`AnimationPlayer <class_AnimationPlayer>` Node "
"(``Player`` -> ``Rotation_Helper`` -> ``Model`` -> ``Animation_Player``)."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:28
msgid ""
"Create a new script called ``AnimationPlayer_Manager.gd`` and attach that to "
"the :ref:`AnimationPlayer <class_AnimationPlayer>`."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:30
msgid "Add the following code to ``AnimationPlayer_Manager.gd``:"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:152
msgid "Lets go over what this script is doing:"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:156
msgid "Lets start with this script's class variables:"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:158
msgid ""
"``states``: A dictionary for holding our animation states. (Further "
"explanation below)"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:159
msgid ""
"``animation_speeds``: A dictionary for holding all the speeds at which we "
"want to play our animations."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:160
msgid ""
"``current_state``: A variable for holding the name of the animation state we "
"are currently in."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:161
msgid ""
"``callback_function``: A variable for holding the callback function. "
"(Further explanation below)"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:163
msgid ""
"If you are familiar with state machines, then you may have noticed that "
"``states`` is structured like a basic state machine. Here is roughly how "
"``states`` is set up:"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:166
msgid ""
"``states`` is a dictionary with the key being the name of the current state, "
"and the value being an array holding all the animations (states) we can "
"transition to. For example, if we are currently in the ``Idle_unarmed`` "
"state, we can only transition to ``Knife_equip``, ``Pistol_equip``, "
"``Rifle_equip``, and ``Idle_unarmed``."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:171
msgid ""
"If we try to transition to a state that is not included in the possible "
"transitions states for the state we are in, then we get a warning message "
"and the animation does not change. We can also automatically transition from "
"some states into others, as will be explained further below in "
"``animation_ended``"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:175
msgid ""
"For the sake of keeping this tutorial simple, we are not using a 'proper' "
"state machine. If you are interested to know more about state machines, see "
"the following articles:"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:179
msgid ""
"(Python example) https://dev.to/karn/building-a-simple-state-machine-in-"
"python"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:180
msgid ""
"(C# example) https://www.codeproject.com/Articles/489136/"
"UnderstandingplusandplusImplementingplusStateplusP"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:181
msgid "(Wiki article) https://en.wikipedia.org/wiki/Finite-state_machine"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:183
msgid ""
"``animation_speeds`` is how fast each animation will play. Some of the "
"animations are a little slow and in an effort to make everything look "
"smooth, we need to play them at faster speeds."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:186
msgid ""
"Notice that all of the firing animations are faster than their normal speed. "
"Remember this for later!"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:188
msgid ""
"``current_state`` will hold the name of the animation state we are currently "
"in."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:190
msgid ""
"Finally, ``callback_function`` will be a :ref:`FuncRef <class_FuncRef>` "
"passed in by the player for spawning bullets at the proper frame of "
"animation. A :ref:`FuncRef <class_FuncRef>` allows us to pass in a function "
"as an argument, effectively allowing us to call a function from another "
"script, which is how we will use it later."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:196
msgid "Now let's look at ``_ready``."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:198
msgid ""
"First we are setting our animation to ``Idle_unarmed`` using the "
"``set_animation`` function, so we for sure start in that animation."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:201
msgid ""
"Next we connect the ``animation_finished`` signal to this script and assign "
"it to call ``animation_ended``. This means whenever an animation is "
"finished, ``animation_ended`` will be called."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:206
msgid "Lets look at ``set_animation`` next."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:208
msgid ""
"``set_animation`` changes the animation to the animation named "
"``animation_name`` *if* we can transition to it. In other words, if the "
"animation state we are currently in has the passed in animation state name "
"in ``states``, then we will change to that animation."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:212
msgid ""
"Firstly, we check if the passed in animation name is the same name as the "
"animation currently playing. If they are the same, then we write a warning "
"to the console and return ``true``."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:215
msgid ""
"Secondly, we see if :ref:`AnimationPlayer <class_AnimationPlayer>` has the "
"animation with the name ``animation_name`` using ``has_animation``. If it "
"does not, we return ``false``."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:218
msgid ""
"Thirdly, we check whether ``current_state`` is set. If ``current_state`` is "
"*not* currently set, then we set ``current_state`` to the passed in "
"animation name and tell :ref:`AnimationPlayer <class_AnimationPlayer>` to "
"start playing the animation with a blend time of ``-1`` at the speed set in "
"``animation_speeds`` and then we return ``true``."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:222
msgid "Blend time is how long to blend/mix the two animations together."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:224
msgid ""
"By putting in a value of ``-1``, the new animation instantly plays, "
"overriding whatever animation is already playing."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:226
msgid ""
"If you put in a value of ``1``, for one second the new animation will play "
"with increasing strength, blending the two animations together for one "
"second before playing only the new animation. This leads to a smooth "
"transition between animations, which looks great when you are changing from "
"a walking animation to a running animation."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:230
msgid ""
"We set the blend time to ``-1`` because we want to instantly change "
"animations."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:232
msgid ""
"If we have a state in ``current_state``, then we get all the possible states "
"we can transition to."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:234
msgid ""
"If the animation name is in the list of possible transitions, we set "
"``current_state`` to the passed in animation (``animation_name``), tell :ref:"
"`AnimationPlayer <class_AnimationPlayer>` to play the animation with a blend "
"time of ``-1`` at the speed set in ``animation_speeds`` and return ``true``."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:240
msgid "Now lets look at ``animation_ended``."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:242
msgid ""
"``animation_ended`` is the function that will be called by :ref:"
"`AnimationPlayer <class_AnimationPlayer>` when it's done playing an "
"animation."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:245
msgid ""
"For certain animation states, we may need to transition into another state "
"when it's finished. To handle this, we check for every possible animation "
"state. If we need to, we will transition into another state."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:248
msgid ""
"If you are using your own animated models, make sure that none of the "
"animations are set to loop. Looping animations do not send the "
"``animation_finished`` signal when they reach the end of the animation and "
"are about to loop again."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:252
msgid ""
"The transitions in ``animation_ended`` would ideally be part of the data in "
"``states``, but in an effort to make the tutorial easier to understand, "
"we'll hard code each state transition in ``animation_ended``."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:258
msgid ""
"Finally, there is ``animation_callback``. This function will be called by a "
"call method track in our animations. If we have a :ref:`FuncRef "
"<class_FuncRef>` assigned to ``callback_function``, then we call that passed "
"in function. If we do not have a :ref:`FuncRef <class_FuncRef>` assigned to "
"``callback_function``, we print out a warning to the console."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:262
msgid ""
"Try running ``Testing_Area.tscn`` to make sure there are no runtime issues. "
"If the game runs but nothing seems to have changed, then everything is "
"working correctly."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:266
msgid "Getting the animations ready"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:268
msgid ""
"Now that we have a working animation manager, we need to call it from our "
"player script. Before that, though, we need to set some animation callback "
"tracks in our firing animations."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:271
msgid ""
"Open up ``Player.tscn`` if you don't have it open and navigate to the :ref:"
"`AnimationPlayer <class_AnimationPlayer>` node (``Player`` -> "
"``Rotation_Helper`` -> ``Model`` -> ``Animation_Player``)."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:274
msgid ""
"We need to attach a call method track to three of our animations: The firing "
"animation for the pistol, rifle, and knife. Let's start with the pistol. "
"Click the animation drop down list and select \"Pistol_fire\"."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:277
msgid ""
"Now scroll down to the bottom of the list of animation tracks. The final "
"item in the list should read ``Armature/Skeleton:Left_UpperPointer``. Now "
"above the list, click the \"Add track\" button, to the left of the time line"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:282
msgid ""
"This will bring up a window with a few choices. We want to add a call method "
"track, so click the option that reads \"Call Method Track\". This will open "
"a window showing the entire node tree. Navigate to the :ref:`AnimationPlayer "
"<class_AnimationPlayer>` node, select it, and press OK."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:288
msgid ""
"Now at the bottom of list of animation tracks you will have a green track "
"that reads \"AnimationPlayer\". Now we need to add the point where we want "
"to call our callback function. Scrub the timeline until you reach the point "
"where the muzzle starts to flash."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:292
msgid ""
"The timeline is the window where all the points in our animation are stored. "
"Each of the little points represents a point of animation data."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:295
msgid ""
"Scrubbing the timeline means moving ourselves through the animation. So when "
"we say \"scrub the timeline until you reach a point\", what we mean is move "
"through the animation window until you reach the point on the timeline."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:299
msgid ""
"Also, the muzzle of a gun is the end point where the bullet comes out. The "
"muzzle flash is the flash of light that escapes the muzzle when a bullet is "
"fired. The muzzle is also sometimes referred to as the barrel of the gun."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:303
msgid ""
"For finer control when scrubbing the timeline, press :kbd:`Ctrl` and scroll "
"forward with the mouse wheel to zoom in. Scrolling backwards will zoom out."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:306
msgid ""
"You can also change how the timeline scrubbing snaps by changing the value "
"in ``Step (s)`` to a lower/higher value."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:308
msgid ""
"Once you get to a point you like, right click on the row for \"Animation "
"Player\" and press ``Insert Key``. In the empty name field, enter "
"``animation_callback`` and press :kbd:`Enter`."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:314
msgid ""
"Now when we are playing this animation the call method track will be "
"triggered at that specific point of the animation."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:318
msgid "Let's repeat the process for the rifle and knife firing animations!"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:320
msgid ""
"Because the process is exactly the same as the pistol, the process is going "
"to explained in a little less depth. Follow the steps from above if you get "
"lost! It is exactly the same, just on a different animation."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:323
msgid ""
"Go to the \"Rifle_fire\" animation from the animation drop down. Add the "
"call method track once you reach the bottom of the animation track list by "
"clicking the \"Add Track\" button above the list. Find the point where the "
"muzzle starts to flash and right click and press ``Insert Key`` to add a "
"call method track point at that position on the track."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:327
msgid ""
"Type \"animation_callback\" into the name field of the pop up which opened "
"and press :kbd:`Enter`."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:329
msgid ""
"Now we need to apply the callback method track to the knife animation. "
"Select the \"Knife_fire\" animation and scroll to the bottom of the "
"animation tracks. Click the \"Add Track\" button above the list and add a "
"method track. Next find a point around the first third of the animation to "
"place the animation callback method point at."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:333
msgid ""
"We will not actually be firing the knife, and the animation is a stabbing "
"animation rather than a firing one. For this tutorial we are reusing the gun "
"firing logic for our knife, so the animation has been named in a style that "
"is consistent with the other animations."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:337
msgid ""
"From there right click on the timeline and click \"Insert Key\". Put "
"\"animation_callback\" into the name field and press :kbd:`Enter`."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:339
msgid "Be sure to save your work!"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:341
msgid ""
"With that done, we are almost ready to start adding the ability to fire to "
"our player script! We need to set up one last scene: The scene for our "
"bullet object."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:345
msgid "Creating the bullet scene"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:347
msgid ""
"There are several ways to handle a gun's bullets in video games. In this "
"tutorial series, we will be exploring two of the more common ways: Objects, "
"and raycasts."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:352
msgid ""
"One of the two ways is using a bullet object. This will be an object that "
"travels through the world and handles its own collision code. In this method "
"we create/spawn a bullet object in the direction our gun is facing, and then "
"it travels forward."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:356
msgid ""
"There are several advantages to this method. The first being we do not have "
"to store the bullets in our player. We can simply create the bullet and then "
"move on, and the bullet itself will handle checking for collisions, sending "
"the proper signal(s) to the object it collides with, and destroying itself."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:359
msgid ""
"Another advantage is we can have more complex bullet movement. If we want to "
"make the bullet fall ever so slightly as time goes on, we can make the "
"bullet controlling script slowly push the bullet towards the ground. Using "
"an object also makes the bullet take time to reach its target, it doesn't "
"instantly hit whatever it's pointed at. This feels more realistic because "
"nothing in real life moves instantly from one point to another."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:363
msgid ""
"One of the huge disadvantages is performance. While having each bullet "
"calculate their own paths and handle their own collision allows for a lot of "
"flexibility, it comes at the cost of performance. With this method we are "
"calculating every bullet's movement every step, and while this may not be a "
"problem for a few dozen bullets, it can become a huge problem when you "
"potentially have several hundred bullets."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:367
msgid ""
"Despite the performance hit, many first person shooters include some form of "
"object bullets. Rocket launchers are a prime example because in many first "
"person shooters, rockets do not just instantly explode at their target "
"position. You can also find bullets as objects many times with grenades "
"because they generally bounce around the world before exploding."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:371
msgid ""
"While I cannot say for sure this is the case, these games *probably* use "
"bullet objects in some form or another: (These are entirely from my "
"observations. **They may be entirely wrong**. I have never worked on **any** "
"of the following games)"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:374
msgid ""
"Halo (Rocket launchers, fragmentation grenades, sniper rifles, brute shot, "
"and more)"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:375
msgid ""
"Destiny (Rocket launchers, grenades, fusion rifles, sniper rifles, super "
"moves, and more)"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:376
msgid ""
"Call of Duty (Rocket launchers, grenades, ballistic knives, crossbows, and "
"more)"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:377
msgid "Battlefield (Rocket launchers, grenades, claymores, mortars, and more)"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:379
msgid ""
"Another disadvantage with bullet objects is networking. Bullet objects have "
"to sync the positions (at least) with all the clients that are connected to "
"the server."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:382
msgid ""
"While we are not implementing any form of networking (as that would be in "
"its own entire tutorial series), it is a consideration to keep in mind when "
"creating your first person shooter, especially if you plan on adding some "
"form of networking in the future."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:387
msgid ""
"The other way of handling bullet collisions we will be looking at is "
"raycasting."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:389
msgid ""
"This method is extremely common in guns that have fast moving bullets that "
"rarely change trajectory over time."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:391
msgid ""
"Instead of creating a bullet object and sending it through space, we instead "
"send a ray starting from the barrel/muzzle of the gun forwards. We set the "
"raycast's origin to the starting position of the bullet, and based on the "
"length we can adjust how far the bullet 'travels' through space."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:394
msgid ""
"While I cannot say for sure this is the case, these games *probably* use "
"raycasts in some form or another: (These are entirely from my observations. "
"**They may be entirely wrong**. I have never worked on **any** of the "
"following games)"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:397
msgid ""
"Halo (Assault rifles, DMRs, battle rifles, covenant carbine, spartan laser, "
"and more)"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:398
msgid ""
"Destiny (Auto rifles, pulse rifles, scout rifles, hand cannons, machine "
"guns, and more)"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:399
msgid ""
"Call of Duty (Assault rifles, light machine guns, sub machine guns, pistols, "
"and more)"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:400
msgid "Battlefield (Assault rifles, SMGs, carbines, pistols, and more)"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:402
msgid ""
"One huge advantage of this method is that it's light on performance. Sending "
"a couple hundred rays through space is *much* easier for the computer to "
"calculate than sending a couple hundred bullet objects."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:406
msgid ""
"Another advantage is we can instantly know if we've hit something or not "
"exactly when we call for it. For networking this is important because we do "
"not need to sync the bullet movements over the Internet, we only need to "
"send whether or not the raycast hit."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:409
msgid ""
"Raycasting does have some disadvantages, though. One major disadvantage is "
"we cannot easily cast a ray in anything but a linear line. This means we can "
"only fire in a straight line for however long our ray length is. You can "
"create the illusion of bullet movement by casting multiple rays at different "
"positions, but not only is this hard to implement in code, it is also "
"heavier on performance."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:413
msgid ""
"Another disadvantage is we cannot see the bullet. With bullet objects we can "
"actually see the bullet travel through space if we attach a mesh to it, but "
"because raycasts happen instantly, we do not have a decent way of showing "
"the bullets. You could draw a line from the origin of the raycast to the "
"point where the raycast collided, and that is one popular way of showing "
"raycasts. Another way is simply not drawing the raycast at all, because "
"theoretically the bullets move so fast our eyes could not see it anyway."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:420
msgid ""
"Let's get the bullet object set up. This is what our pistol will create when "
"the \"Pistol_fire\" animation callback function is called."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:423
msgid ""
"Open up ``Bullet_Scene.tscn``. The scene contains :ref:`Spatial "
"<class_Spatial>` node called bullet, with a :ref:`MeshInstance "
"<class_MeshInstance>` and an :ref:`Area <class_Area>` with a :ref:"
"`CollisionShape <class_CollisionShape>` children to it."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:427
msgid ""
"Create a new script called ``Bullet_script.gd`` and attach it to the "
"``Bullet`` :ref:`Spatial <class_Spatial>`."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:429
msgid ""
"We are going to move the entire bullet object at the root (``Bullet``). We "
"will be using the :ref:`Area <class_Area>` to check whether or not we've "
"collided with something"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:431
msgid ""
"Why are we using an :ref:`Area <class_Area>` and not a :ref:`RigidBody "
"<class_RigidBody>`? The main reason we're not using a :ref:`RigidBody "
"<class_RigidBody>` is because we do not want the bullet to interact with "
"other :ref:`RigidBody <class_RigidBody>` nodes. By using an :ref:`Area "
"<class_Area>` we are ensuring that none of the other :ref:`RigidBody "
"<class_RigidBody>` nodes, including other bullets, will be effected."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:435
msgid ""
"Another reason is simply because it is easier to detect collisions with an :"
"ref:`Area <class_Area>`!"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:437
msgid "Here's the script that will control our bullet:"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:473
msgid "Let's go through the script:"
msgstr "스크립트를 살펴보겠습니다:"

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:477
msgid "First we define a few class variables:"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:479
msgid "``BULLET_SPEED``: The speed at which the bullet travels."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:480
msgid ""
"``BULLET_DAMAGE``: The damage the bullet will cause to anything with which "
"it collides."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:481
msgid "``KILL_TIMER``: How long the bullet can last without hitting anything."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:482
msgid "``timer``: A float for tracking how long the bullet has been alive."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:483
msgid ""
"``hit_something``: A boolean for tracking whether or not we've hit something."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:485
msgid ""
"With the exception of ``timer`` and ``hit_something``, all of these "
"variables change how the bullet interacts with the world."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:488
msgid ""
"The reason we are using a kill timer is so we do not have a case where we "
"get a bullet travelling forever. By using a kill timer, we can ensure that "
"no bullets will travel forever and consume resources."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:492
msgid ""
"As in :ref:`doc_fps_tutorial_part_one`, we have a couple all uppercase class "
"variables. The reason behind this is the same as the reason given in :ref:"
"`doc_fps_tutorial_part_one`: We want to treat these variables like "
"constants, but we want to be able to change them. In this case we will later "
"need to change the damage and speed of these bullets, so we need them to be "
"variables and not constants."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:499
msgid ""
"In ``_ready`` we set the area's ``body_entered`` signal to ourself so that "
"it calls the ``collided`` function when a body enters the area."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:504
msgid ""
"``_physics_process`` gets the bullet's local ``Z`` axis. If you look at the "
"scene in local mode, you will find that the bullet faces the positive local "
"``Z`` axis."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:507
msgid ""
"Next we translate the entire bullet by that forward direction, multiplying "
"in our speed and delta time."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:509
msgid ""
"After that we add delta time to our timer and check whether the timer has "
"reached a value as big or greater than our ``KILL_TIME`` constant. If it "
"has, we use ``queue_free`` to free the bullet."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:514
msgid "In ``collided`` we check whether we've hit something yet."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:516
msgid ""
"Remember that ``collided`` is only called when a body has entered the :ref:"
"`Area <class_Area>` node. If the bullet has not already collided with "
"something, we then proceed to check if the body the bullet has collided with "
"has a function/method called ``bullet_hit``. If it does, we call it and pass "
"in the bullet's damage and the bullet's global transform so we can get the "
"bullet's rotation and position."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:521
msgid ""
"in ``collided``, the passed in body can be a :ref:`StaticBody "
"<class_StaticBody>`, :ref:`RigidBody <class_RigidBody>`, or :ref:"
"`KinematicBody <class_KinematicBody>`"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:524
msgid ""
"We set the Bullet's ``hit_something`` variable to ``true`` because "
"regardless of whether or not the body that the bullet collided with has the "
"``bullet_hit`` function/method, it has hit something and so we need to make "
"sure the bullet does not hit anything else."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:527
msgid "Then we free the bullet using ``queue_free``."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:529
msgid ""
"You may be wondering why we even have a ``hit_something`` variable if we "
"free the bullet using ``queue_free`` as soon as it hits something."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:532
msgid ""
"The reason we need to track whether we've hit something or not is because "
"``queue_free`` does not immediately free the node, so the bullet could "
"collide with another body before Godot has a chance to free it. By tracking "
"whether the bullet has hit something, we can make sure that the bullet will "
"only hit one object."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:540
msgid ""
"Before we start programming the player again, let's take a quick look at "
"``Player.tscn``. Open up ``Player.tscn`` again."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:543
msgid ""
"Expand ``Rotation_Helper`` and notice how it has two nodes: "
"``Gun_Fire_Points`` and ``Gun_Aim_Point``."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:546
msgid ""
"``Gun_aim_point`` is the point that the bullets will be aiming at. Notice "
"how it is lined up with the center of the screen and pulled a distance "
"forward on the Z axis. ``Gun_aim_point`` will serve as the point where the "
"bullets will for sure collide with as it goes along."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:551
msgid ""
"There is a invisible mesh instance for debugging purposes. The mesh is a "
"small sphere that visually shows at which target the bullets will be aiming."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:554
msgid ""
"Open up ``Gun_Fire_Points`` and you'll find three more :ref:`Spatial "
"<class_Spatial>` nodes, one for each weapon."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:557
msgid ""
"Open up ``Rifle_Point`` and you'll find a :ref:`Raycast <class_Raycast>` "
"node. This is where we will be sending the raycasts for our rifle's bullets. "
"The length of the raycast will dictate how far our bullets will travel."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:561
msgid ""
"We are using a :ref:`Raycast <class_Raycast>` node to handle the rifle's "
"bullet because we want to fire lots of bullets quickly. If we use bullet "
"objects, it is quite possible we could run into performance issues on older "
"machines."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:565
msgid ""
"If you are wondering from where the positions of the points came, they are "
"the rough positions of the ends of each weapon. You can see this by going to "
"``AnimationPlayer``, selecting one of the firing animations and scrubbing "
"through the timeline. The point for each weapon should mostly line up with "
"the end of each weapon."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:571
msgid ""
"Open up ``Knife_Point`` and you'll find an :ref:`Area <class_Area>` node. We "
"are using an :ref:`Area <class_Area>` for the knife because we only care for "
"all the bodies close to us, and because our knife does not fire into space. "
"If we were making a throwing knife, we would likely spawn a bullet object "
"that looks like a knife."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:576
msgid ""
"Finally, we have ``Pistol_Point``. This is the point where we will be "
"creating/instancing our bullet objects. We do not need any additional nodes "
"here, as the bullet handles all of its own collision detection."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:580
msgid ""
"Now that we've seen how we will handle our other weapons, and where we will "
"spawn the bullets, let's start working on making them work."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:583
msgid ""
"You can also look at the HUD nodes if you want. There is nothing fancy there "
"and other than using a single :ref:`Label <class_Label>`, we will not be "
"touching any of those nodes. Check :ref:"
"`doc_design_interfaces_with_the_control_nodes` for a tutorial on using GUI "
"nodes."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:589
msgid "Creating the first weapon"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:591
msgid "Lets write the code for each of our weapons, starting with the pistol."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:593
msgid ""
"Select ``Pistol_Point`` (``Player`` -> ``Rotation_Helper`` -> "
"``Gun_Fire_Points`` -> ``Pistol_Point``) and create a new script called "
"``Weapon_Pistol.gd``."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:595
msgid "Add the following code to ``Weapon_Pistol.gd``:"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:646
msgid "Let's go over how the script works."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:650
msgid "First we define some class variables we'll need in the script:"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:652
msgid "``DAMAGE``: The amount of damage a single bullet does."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:653
msgid "``IDLE_ANIM_NAME``: The name of the pistol's idle animation."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:654
msgid "``FIRE_ANIM_NAME``: The name of the pistol's fire animation."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:655
msgid ""
"``is_weapon_enabled``: A variable for checking whether this weapon is in use/"
"enabled."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:656
msgid "``bullet_scene``: The bullet scene we worked on earlier."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:657
msgid "``player_node``: A variable to hold ``Player.gd``."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:659
msgid ""
"The reason we define most of these variables is so we can use them in "
"``Player.gd``."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:661
msgid ""
"Each of the weapons we'll make will have all these variables (minus "
"``bullet_scene``) so we have a consistent interface to interact with in "
"``Player.gd``. By using the same variables/functions in each weapon, we can "
"interact with them without having to know which weapon we are using, which "
"makes our code much more modular because we can add weapons without having "
"to change much of the code in ``Player.gd`` and it will just work."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:666
msgid ""
"We could write all the code in ``Player.gd``, but then ``Player.gd`` will "
"get increasingly harder to manage as we add weapons. By using a modular "
"design with a consistent interface, we can keep ``Player.gd`` nice and neat, "
"while also making it easier to add/remove/modify weapons."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:671
msgid "In ``_ready`` we simply pass over it."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:673
msgid ""
"There is one thing of note though, an assumption that we'll fill in ``Player."
"gd`` at some point."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:675
msgid ""
"We are going to assume that ``Player.gd`` will pass themselves in before "
"calling any of the functions in ``Weapon_Pistol.gd``."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:677
msgid ""
"While this can lead to situations where the player does not pass themselves "
"in (because we forget), we would have to have a long string of "
"``get_parent`` calls to traverse up the scene tree to retrieve the player. "
"This does not look pretty (``get_parent().get_parent().get_parent()`` and so "
"on) and it is relatively safe to assume we will remember to pass ourselves "
"to each weapon in ``Player.gd``."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:683
msgid "Next let's look at ``fire_weapon``:"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:685
msgid "The first thing we do is instance the bullet scene we made earlier."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:687
msgid ""
"By instancing the scene, we are creating a new node holding all the node(s) "
"in the scene we instanced, effectively cloning that scene."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:689
msgid ""
"Then we add a ``clone`` to the first child node of the root of the scene we "
"are currently in. By doing this, we're making it a child of the root node of "
"the currently loaded scene."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:691
msgid ""
"In other words, we are adding a ``clone`` as a child of the first node "
"(whatever is at the top of the scene tree) in the currently loaded/opened "
"scene. If the currently loaded/open scene is ``Testing_Area.tscn``, we'd be "
"adding our ``clone`` as a child of ``Testing_Area``, the root node in that "
"scene."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:694
msgid ""
"As mentioned later below in the section on adding sounds, this method makes "
"an assumption. This will be explained later in the section on adding sounds "
"in :ref:`doc_fps_tutorial_part_three`"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:697
msgid ""
"Next we set the global transform of the clone to the ``Pistol_Aim_Point``'s "
"global transform. The reason we do this is so the bullet is spawned at the "
"end of the pistol."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:699
msgid ""
"You can see that ``Pistol_Aim_Point`` is positioned right at the end of the "
"pistol by clicking the :ref:`AnimationPlayer <class_AnimationPlayer>` and "
"scrolling through ``Pistol_fire``. You'll find the position is more or less "
"at the end of the pistol when it fires."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:702
msgid ""
"Next we scale it up by a factor of ``4`` because the bullet scene is a "
"little too small by default."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:704
msgid ""
"Then we set the bullet's damage (``BULLET_DAMAGE``) to the amount of damage "
"a single pistol bullet does (``DAMAGE``)."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:708
msgid "Now let's look at ``equip_weapon``:"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:710
msgid ""
"The first thing we do is check to see whether the animation manager is in "
"the pistol's idle animation. If we are in the pistol's idle animation, we "
"set ``is_weapon_enabled`` to ``true`` and return ``true`` because the pistol "
"has successfully been equipped."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:714
msgid ""
"Because we know our pistol's ``equip`` animation automatically transitions "
"to the pistol's idle animation, if we are in the pistol's idle animation the "
"pistol must have finished playing the equip animation."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:717
msgid ""
"We know these animations will transition because we wrote the code to make "
"them transition in ``Animation_Manager.gd``"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:719
msgid ""
"Next we check to see if the player is in the ``Idle_unarmed`` animation "
"state. Because all unequipping animations go to this state, and because any "
"weapon can be equipped from this state, we change animations to "
"``Pistol_equip`` if the player is in the ``Idle_unarmed`` state."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:722
msgid ""
"Since we know ``Pistol_equip`` will transition to ``Pistol_idle``, we do not "
"need to do any more additional processing for equipping weapons, but since "
"we were not able to equip the pistol yet, we return ``false``."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:727
msgid "Finally, let's look at ``unequip_weapon``:"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:729
msgid ""
"``unequip_weapon`` is similar to ``equip_weapon``, but instead we're "
"checking things in reverse."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:731
msgid ""
"First we check to see whether the player is in the idle animation state. "
"Then we check to make sure the player is not in the ``Pistol_unequip`` "
"animation. If the player is not in the ``Pistol_unequip`` animation, we want "
"to play the ``pistol_unequip`` animation."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:734
msgid ""
"You may be wondering why we are checking to see whether the player is in the "
"pistol's idle animation, and then making sure the player is not unequipping "
"right after. The reason behind the additional check is because we could (in "
"rare cases) call ``unequip_weapon`` twice before we've had a chance to "
"process ``set_animation``, so we add this additional check to make sure the "
"unequip animation plays."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:738
msgid ""
"Next we check to see whether the player is in ``Idle_unarmed``, which is the "
"animation state we will transition into from ``Pistol_unequip``. If the "
"player is in ``Idle_unarmed``, then we set ``is_weapon_enabled`` to "
"``false`` since we are no longer using this weapon, and return ``true`` "
"because we have successfully unequipped the pistol."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:741
msgid ""
"If the player is not in ``Idle_unarmed``, we return ``false`` because we "
"have not yet successfully unequipped the pistol."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:744
msgid "Creating the other two weapons"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:746
msgid ""
"Now that we have all the code we'll need for the pistol, let's add the code "
"for the rifle and knife next."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:748
msgid ""
"Select ``Rifle_Point`` (``Player`` -> ``Rotation_Helper`` -> "
"``Gun_Fire_Points`` -> ``Rifle_Point``) and create a new script called "
"``Weapon_Rifle.gd``, then add the following:"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:801
msgid ""
"Most of this is exactly the same as ``Weapon_Pistol.gd``, so we're only "
"going to look at what's changed: ``fire_weapon``."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:803
msgid ""
"The first thing we do is get the :ref:`Raycast <class_Raycast>` node, which "
"is a child of ``Rifle_Point``."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:805
msgid ""
"Next we force the :ref:`Raycast <class_Raycast>` to update using "
"``force_raycast_update``. This will force the :ref:`Raycast <class_Raycast>` "
"to detect collisions when we call it, meaning we get a frame perfect "
"collision check with the 3D physics world."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:808
msgid ""
"Then we check to see if the :ref:`Raycast <class_Raycast>` collided with "
"something."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:810
msgid ""
"If the :ref:`Raycast <class_Raycast>` has collided with something, we first "
"get the collision body it collided with. This can be a :ref:`StaticBody "
"<class_StaticBody>`, :ref:`RigidBody <class_RigidBody>`, or a :ref:"
"`KinematicBody <class_KinematicBody>`."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:813
msgid ""
"Next we want to make sure the body we've collided with is not the player, "
"since we (probably) do not want to give the player the ability to shoot "
"themselves in the foot."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:815
msgid ""
"If the body is not the player, we then check to see if it has a function/"
"method called ``bullet_hit``. If it does, we call it and pass in the amount "
"of damage this bullet does (``DAMAGE``), and the global transform of the :"
"ref:`Raycast <class_Raycast>` so we can tell from which direction the bullet "
"came."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:820
msgid "Now all we need to do is write the code for the knife."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:822
msgid ""
"Select ``Knife_Point`` (``Player`` -> ``Rotation_Helper`` -> "
"``Gun_Fire_Points`` -> ``Knife_Point``) and create a new script called "
"``Weapon_Knife.gd``, then add the following:"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:873
msgid ""
"As with ``Weapon_Rifle.gd``, the only differences are in ``fire_weapon``, so "
"let's look at that:"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:875
msgid ""
"The first thing we do is get the :ref:`Area <class_Area>` child node of "
"``Knife_Point``."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:877
msgid ""
"Next we want to get all the collision bodies inside the :ref:`Area "
"<class_Area>` using ``get_overlapping_bodies``. This will return a list of "
"every body that touches the :ref:`Area <class_Area>`."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:880
msgid "We next want to go through each of those bodies."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:882
msgid ""
"First we check to make sure the body is not the player, because we do not "
"want to let the player be able to stab themselves. If the body is the "
"player, we use ``continue`` so we jump and look at the next body in "
"``bodies``."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:885
msgid ""
"If we have not jumped to the next body, we then check to see if the body has "
"the ``bullet_hit`` function/method. If it does, we call it, passing in the "
"amount of damage a single knife swipe does (``DAMAGE``) and the global "
"transform of the :ref:`Area <class_Area>`."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:888
msgid ""
"While we could attempt to calculate a rough location for where the knife hit "
"exactly, we are not going to because using the :ref:`Area <class_Area>`'s "
"position works well enough and the extra time needed to calculate a rough "
"position for each body is not worth the effort."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:893
msgid "Making the weapons work"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:895
msgid "Let's start making the weapons work in ``Player.gd``."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:897
msgid ""
"First let's start by adding some class variables we'll need for the weapons:"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:915
msgid "Let's go over what these new variables will do:"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:917
msgid ""
"``animation_manager``: This will hold the :ref:`AnimationPlayer "
"<class_AnimationPlayer>` node and its script, which we wrote previously."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:918
msgid ""
"``current_weapon_name``: The name of the weapon we are currently using. It "
"has four possible values: ``UNARMED``, ``KNIFE``, ``PISTOL``, and ``RIFLE``."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:919
msgid "``weapons``: A dictionary that will hold all the weapon nodes."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:920
msgid ""
"``WEAPON_NUMBER_TO_NAME``: A dictionary allowing us to convert from a "
"weapon's number to its name. We'll use this for changing weapons."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:921
msgid ""
"``WEAPON_NAME_TO_NUMBER``: A dictionary allowing us to convert from a "
"weapon's name to its number. We'll use this for changing weapons."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:922
msgid ""
"``changing_weapon``: A boolean to track whether or not we are changing guns/"
"weapons."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:923
msgid "``changing_weapon_name``: The name of the weapon we want to change to."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:924
msgid ""
"``health``: How much health our player has. In this part of the tutorial we "
"will not be using it."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:925
msgid ""
"``UI_status_label``: A label to show how much health we have, and how much "
"ammo we have both in our gun and in reserve."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:929
msgid ""
"Next we need to add a few things in ``_ready``. Here's the new ``_ready`` "
"function:"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:961
msgid "Let's go over what's changed."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:963
msgid ""
"First we get the :ref:`AnimationPlayer <class_AnimationPlayer>` node and "
"assign it to the ``animation_manager`` variable. Then we set the callback "
"function to a :ref:`FuncRef <class_FuncRef>` that will call the player's "
"``fire_bullet`` function. Right now we haven't written the ``fire_bullet`` "
"function, but we'll get there soon."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:967
msgid ""
"Next we get all the weapon nodes and assign them to ``weapons``. This will "
"allow us to access the weapon nodes only with their name (``KNIFE``, "
"``PISTOL``, or ``RIFLE``)."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:970
msgid ""
"We then get ``Gun_Aim_Point``'s global position so we can rotate the "
"player's weapons to aim at it."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:972
msgid "Then we go through each weapon in ``weapons``."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:974
msgid ""
"We first get the weapon node. If the weapon node is not ``null``, we then "
"set its ``player_node`` variable to this script (``Player.gd``). Then we "
"have it look at ``gun_aim_point_pos`` using the ``look_at`` function, and "
"then rotate it by ``180`` degrees on the ``Y`` axis."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:977
msgid ""
"We rotate all of those weapon points by ``180`` degrees on their ``Y`` axis "
"because our camera is pointing backwards. If we did not rotate all of these "
"weapon points by ``180`` degrees, all of the weapons would fire backwards."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:980
msgid ""
"Then we set ``current_weapon_name`` and ``changing_weapon_name`` to "
"``UNARMED``."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:982
msgid "Finally, we get the UI :ref:`Label <class_Label>` from our HUD."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:986
msgid ""
"Let's add a new function call to ``_physics_process`` so we can change "
"weapons. Here's the new code:"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:996
msgid "Now we will call ``process_changing_weapons``."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:1000
msgid ""
"Now let's add all the player input code for the weapons in "
"``process_input``. Add the following code:"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:1040
msgid "Let's go over the additions, starting with how we're changing weapons."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:1042
msgid ""
"First we get the current weapon's number and assign it to "
"``weapon_change_number``."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:1044
msgid ""
"Then we check to see if any of the number keys (keys 1-4) are pressed. If "
"they are, we set ``weapon_change_number`` to the value mapped at that key."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:1047
msgid ""
"The reason key 1 is mapped to ``0`` is because the first element in a list "
"is mapped to zero, not one. Most list/array accessors in most programming "
"languages start at ``0`` instead of ``1``. See https://en.wikipedia.org/wiki/"
"Zero-based_numbering for more information."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:1050
msgid ""
"Next we check to see if ``shift_weapon_positive`` or "
"``shift_weapon_negative`` is pressed. If one of them is, we add/subtract "
"``1`` from ``weapon_change_number``."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:1053
msgid ""
"Because the player may have shifted ``weapon_change_number`` outside of the "
"number of weapons the player has, we clamp it so it cannot exceed the "
"maximum number of weapons the player has and it ensures "
"``weapon_change_number`` is ``0`` or more."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:1056
msgid ""
"Then we check to make sure the player is not already changing weapons. If "
"the player is not, we then check to see if the weapon the player wants to "
"change to is a new weapon and not the weapon the player is currently using. "
"If the weapon the player is wanting to change to is a new weapon, we then "
"set ``changing_weapon_name`` to the weapon at ``weapon_change_number`` and "
"set ``changing_weapon`` to ``true``."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:1060
msgid ""
"For firing the weapon we first check to see if the ``fire`` action is "
"pressed. Then we check to make sure the player is not changing weapons. Next "
"we get the weapon node for the current weapon."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:1064
msgid ""
"If the current weapon node does not equal ``null``, and the player is in its "
"``IDLE_ANIM_NAME`` state, we set the player's animation to the current "
"weapon's ``FIRE_ANIM_NAME``."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:1069
msgid "Let's add ``process_changing_weapons`` next."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:1071
msgid "Add the following code:"
msgstr "다음의 코드를 추가하세요:"

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:1107
#: ../../docs/tutorials/3d/fps_tutorial/part_three.rst:535
#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:290
msgid "Let's go over what's happening here:"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:1109
msgid ""
"The first thing we do is make sure we've received input to change weapons. "
"We do this by making sure ``changing_weapons`` is ``true``."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:1111
msgid ""
"Next we define a variable (``weapon_unequipped``) so we can check whether "
"the current weapon has been successfully unequipped or not."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:1113
msgid "Then we get the current weapon from ``weapons``."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:1115
msgid ""
"If the current weapon is not ``null``, then we need to check whether the "
"weapon is enabled. If the weapon is enabled, we call its ``unequip_weapon`` "
"function so it will start the unequip animation. If the weapon is not "
"enabled, we set ``weapon_unequipped`` to ``true`` because the weapon has "
"successfully been unequipped."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:1118
msgid ""
"If the current weapon is ``null``, then we can simply set "
"``weapon_unequipped`` to ``true``. The reason we do this check is because "
"there is no weapon script/node for ``UNARMED``, but there is also no "
"animations for ``UNARMED``, so we can just start equipping the weapon the "
"player wants to change to."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:1121
msgid ""
"If the player has successfully unequipped the current weapon "
"(``weapon_unequipped == true``), we need to equip the new weapon."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:1123
msgid ""
"First we define a new variable (``weapon_equipped``) for tracking whether "
"the player has successfully equipped the new weapon or not."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:1125
msgid ""
"Then we get the weapon the player wants to change to. If the weapon the "
"player wants to change to is not ``null``, we then check to see whether it's "
"enabled or not. If it is not enabled, we call its ``equip_weapon`` function "
"so it starts to equip the weapon. If the weapon is enabled, we set "
"``weapon_equipped`` to ``true``."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:1128
msgid ""
"If the weapon the player wants to change to is ``null``, we simply set "
"``weapon_equipped`` to ``true`` because we do not have any node/script for "
"``UNARMED``, nor do we have any animations."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:1131
msgid ""
"Finally, we check to see whether the player has successfully equipped the "
"new weapon. If (s)he has done so, we set ``changing_weapon`` to ``false`` "
"because the player is no longer changing weapons. We also set "
"``current_weapon_name`` to ``changing_weapon_name`` since the current weapon "
"has changed, and then we set ``changing_weapon_name`` to an empty string."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:1137
msgid ""
"Now, we need to add one more function to the player, and then the player is "
"ready to start firing the weapons!"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:1139
msgid ""
"We need to add ``fire_bullet``, which will be called by the :ref:"
"`AnimationPlayer <class_AnimationPlayer>` at those points we set earlier in "
"the :ref:`AnimationPlayer <class_AnimationPlayer>` function track:"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:1151
msgid "Let's go over what this function does:"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:1153
msgid ""
"First we check to see whether the player is changing weapons. If the player "
"is changing weapons, we do not want shoot, so we ``return``."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:1155
msgid ""
"Calling ``return`` stops the rest of the function from being called. In this "
"case, we are not returning a variable because we are only interested in not "
"running the rest of the code, and because we are not looking for a returned "
"variable either when we call this function."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:1159
msgid ""
"Then we tell the current weapon the player is using to fire by calling its "
"``fire_weapon`` function."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:1161
msgid ""
"Remember how we mentioned the speed of the animations for firing was faster "
"than the other animations? By changing the firing animation speeds, you can "
"change how fast the weapon fires bullets!"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:1167
msgid ""
"Before we are ready to test our new weapons, we still have a little bit of "
"work to do."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:1170
msgid "Creating some test subjects"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:1172
msgid ""
"Create a new script by going to the scripting window, clicking \"file\", and "
"selecting new. Name this script ``RigidBody_hit_test`` and make sure it "
"extends :ref:`RigidBody <class_RigidBody>`."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:1175
msgid "Now we need to add this code:"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:1192
msgid "Let's go over how ``bullet_hit`` works:"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:1195
msgid ""
"First we get the bullet's forward directional vector. This is so we can tell "
"from which direction the bullet will hit the :ref:`RigidBody "
"<class_RigidBody>`. We will use this to push the :ref:`RigidBody "
"<class_RigidBody>` in the same direction as the bullet."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:1198
msgid ""
"We need to boost the directional vector by ``BASE_BULLET_BOOST`` so the "
"bullets pack a bit more of a punch and move the :ref:`RigidBody "
"<class_RigidBody>` nodes in a visible way. You can just set "
"``BASE_BULLET_BOOST`` to lower or higher values if you want less or more of "
"a reaction when the bullets collide with the :ref:`RigidBody "
"<class_RigidBody>`."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:1202
msgid "Then we apply an impulse using ``apply_impulse``."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:1204
msgid ""
"First, we need to calculate the position for the impulse. Because "
"``apply_impulse`` takes a vector relative to the :ref:`RigidBody "
"<class_RigidBody>`, we need to calculate the distance from the :ref:"
"`RigidBody <class_RigidBody>` to the bullet. We do this by subtracting the :"
"ref:`RigidBody <class_RigidBody>`'s global origin/position from the bullet's "
"global origin/position. This gets us the distance from the :ref:`RigidBody "
"<class_RigidBody>` to the bullet. We normalize this vector so the size of "
"the collider does not effect how much the bullets move the :ref:`RigidBody "
"<class_RigidBody>`."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:1210
msgid ""
"Finally, we need to calculate the force for the impulse. For this, we use "
"the direction the bullet is facing and multiply it by the bullet's damage. "
"This gives a nice result and for stronger bullets, we get a stronger result."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:1215
msgid ""
"Now we need to attach this script to all of the :ref:`RigidBody "
"<class_RigidBody>` nodes we want to affect."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:1217
msgid ""
"Open up ``Testing_Area.tscn`` and select all the cubes parented to the "
"``Cubes`` node."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:1219
msgid ""
"If you select the top cube, and then hold down :kbd:`Shift` and select the "
"last cube, Godot will select all the cubes in-between!"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:1222
msgid ""
"Once you have all the cubes selected, scroll down in the inspector until you "
"get to the \"scripts\" section. Click the drop down and select \"Load\". "
"Open your newly created ``RigidBody_hit_test.gd`` script."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:1230
msgid ""
"That was a lot of code! But now, with all that done, you can go and give "
"your weapons a test!"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:1232
msgid ""
"You should now be able to fire as many bullets as you want at the cubes and "
"they will move in response to the bullets colliding with them."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:1235
msgid ""
"In :ref:`doc_fps_tutorial_part_three`, we will add ammo to the weapons, as "
"well as some sounds!"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:1239
msgid ""
"You can download the finished project for this part here: :download:"
"`Godot_FPS_Part_2.zip <files/Godot_FPS_Part_2.zip>`"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_three.rst:4
msgid "Part 3"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_three.rst:9
msgid ""
"In this part, we will be limiting the player's weapons by giving them ammo. "
"We will also be giving the player the ability to reload, and we will be "
"adding sounds when the weapons fire."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_three.rst:15
msgid ""
"You are assumed to have finished :ref:`doc_fps_tutorial_part_two` before "
"moving on to this part of the tutorial. The finished project from :ref:"
"`doc_fps_tutorial_part_two` will be the starting project for part 3"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_three.rst:22
msgid "Changing levels"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_three.rst:24
msgid ""
"Now that we have a fully working FPS, let's move to a more FPS-like level."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_three.rst:26
msgid ""
"Open up ``Space_Level.tscn`` (``assets/Space_Level_Objects/Space_Level."
"tscn``) and/or ``Ruins_Level.tscn`` (``assets/Ruin_Level_Objects/Ruins_Level."
"tscn``)."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_three.rst:29
msgid ""
"``Space_Level.tscn`` and ``Ruins_Level.tscn`` are complete custom FPS levels "
"created for the purpose of this tutorial. Press ``Play Current Scene`` "
"button, or :kbd:`F6` on keyboard, and give each a try."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_three.rst:33
msgid ""
"``Space_Level.tscn`` is more graphically demanding of the GPU than "
"``Ruins_Level.tscn``. If your computer is struggling to render ``Space_Level."
"tscn``, try using ``Ruins_Level.tscn`` instead."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_three.rst:36
msgid ""
"You might have noticed there are several :ref:`RigidBody <class_RigidBody>` "
"nodes placed throughout the level. We can place ``RigidBody_hit_test.gd`` on "
"them and then they will react to being hit with bullets, so let's do that!"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_three.rst:39
msgid ""
"Follow the instructions below for either (or both) of the scenes you want to "
"use"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_three.rst:75
msgid ""
"Now you can fire at all the rigid bodies in either level and they will react "
"to bullets hitting them!"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_three.rst:78
msgid "Adding ammo"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_three.rst:80
msgid ""
"Now that the player has working guns, let's give them a limited amount of "
"ammo."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_three.rst:82
msgid ""
"Firstly, we need to define a few variables in each of our weapon scripts."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_three.rst:84
#: ../../docs/tutorials/3d/fps_tutorial/part_three.rst:193
msgid "Open up ``Weapon_Pistol.gd`` and add the following class variables:"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_three.rst:92
msgid "``ammo_in_weapon``: The amount of ammo currently in the pistol"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_three.rst:93
msgid ""
"``spare_ammo``: The amount of ammo we have left in reserve for the pistol"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_three.rst:94
msgid "``AMMO_IN_MAG``: The amount of ammo in a fully reloaded weapon/magazine"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_three.rst:96
msgid "Now all we need to do is add a single line of code to ``fire_weapon``."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_three.rst:98
msgid ""
"Add the following right under ``Clone.BULLET_DAMAGE = DAMAGE``: "
"``ammo_in_weapon -= 1``"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_three.rst:100
msgid ""
"This will remove one from ``ammo_in_weapon`` every time the player fires. "
"Notice we're not checking to see if the player has enough ammo or not in "
"``fire_weapon``. Instead, we're going to check to see if the player has "
"enough ammo in ``Player.gd``."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_three.rst:105
msgid "Now we need to add ammo for both the rifle and the knife."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_three.rst:107
msgid ""
"You may be wondering why we are adding ammo for the knife given it does not "
"consume any ammunition. The reason we want to add ammo to the knife is so we "
"have a consistent interface for all our weapons."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_three.rst:110
msgid ""
"If we did not add ammo variables for the knife, we would have to add checks "
"for the knife. By adding the ammo variables to the knife, we don't need to "
"worry about whether or not all our weapons have the same variables."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_three.rst:113
msgid "Add the following class variables to ``Weapon_Rifle.gd``:"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_three.rst:121
msgid ""
"And then add the following to ``fire_weapon``: ``ammo_in_weapon -= 1``. Make "
"sure that ``ammo_in_weapon -= 1`` is outside of the ``if ray."
"is_colliding()`` check so the player loses ammo regardless of whether the "
"player hit something or not."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_three.rst:124
msgid ""
"Now all that's left is the knife. Add the following to ``Weapon_Knife.gd``:"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_three.rst:132
msgid "Because the knife does not consume ammo, that is all we need to add."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_three.rst:136
msgid "Now we need to change one thing in ``Player.gd``, that is to say,"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_three.rst:138
msgid ""
"how we're firing the weapons in ``process_input``. Change the code for "
"firing weapons to the following:"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_three.rst:153
msgid ""
"Now the weapons have a limited amount of ammo, and will stop firing when the "
"player runs out."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_three.rst:157
msgid ""
"Ideally, we'd like to let the player be able to see how much ammo is left. "
"Let's make a new function called ``process_UI``."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_three.rst:159
msgid "First, add ``process_UI(delta)`` to ``_physics_process``."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_three.rst:161
msgid "Now add the following to ``Player.gd``:"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_three.rst:173
#: ../../docs/tutorials/3d/fps_tutorial/part_three.rst:235
#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:216
msgid "Let's go over what's happening:"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_three.rst:175
msgid ""
"Firstly, we check to see if the current weapon is either ``UNARMED`` or "
"``KNIFE``. If it is, we change the ``UI_status_label``'s text to only show "
"the player's health since ``UNARMED`` and ``KNIFE`` do not consume ammo."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_three.rst:178
msgid ""
"If the player is using a weapon that consumes ammo, we first get the weapon "
"node."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_three.rst:180
msgid ""
"Then we change ``UI_status_label``'s text to show the player's health, along "
"with how much ammo the player has in the weapon and how much spare ammo the "
"player has for that weapon."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_three.rst:184
msgid "Now we can see how much ammo the player has through the HUD."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_three.rst:187
msgid "Adding reloading to the weapons"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_three.rst:189
msgid ""
"Now that the player can run out of ammo, we need a way to let the player "
"fill them back up. Let's add reloading next!"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_three.rst:191
msgid ""
"For reloading, we need to add a few more variables and a function to every "
"weapon."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_three.rst:202
msgid ""
"``CAN_RELOAD``: A boolean to track whether this weapon has the ability to "
"reload"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_three.rst:203
msgid ""
"``CAN_REFILL``: A boolean to track whether we can refill this weapon's spare "
"ammo. We will not be using ``CAN_REFILL`` in this part, but we will in the "
"next part!"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_three.rst:204
msgid ""
"``RELOADING_ANIM_NAME``: The name of the reloading animation for this weapon."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_three.rst:206
msgid ""
"Now we need to add a function for handling reloading. Add the following "
"function to ``Weapon_Pistol.gd``:"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_three.rst:237
msgid ""
"First we define a variable to see whether or not this weapon can reload."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_three.rst:239
msgid ""
"Then we check to see if the player is in this weapon's idle animation state "
"because we only want to be able to reload when the player is not firing, "
"equipping, or unequipping."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_three.rst:242
msgid ""
"Next we check to see if the player has spare ammo, and if the ammo already "
"in the weapon is equal to a fully reloaded weapon. This way we can ensure "
"the player cannot reload when the player has no ammo or when the weapon is "
"already full of ammo."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_three.rst:245
msgid ""
"If we can still reload, then we calculate the amount of ammo needed to "
"reload the weapon."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_three.rst:247
msgid ""
"If the player has enough ammo to fill the weapon, we remove the ammo needed "
"from ``spare_ammo`` and then set ``ammo_in_weapon`` to a full weapon/"
"magazine."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_three.rst:249
msgid ""
"If the player does not have enough ammo, we add all the ammo left in "
"``spare_ammo``, and then set ``spare_ammo`` to ``0``."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_three.rst:251
msgid ""
"Next we play the reloading animation for this weapon, and then return "
"``true``."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_three.rst:253
msgid "If the player could not reload, we return ``false``."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_three.rst:257
msgid ""
"Now we need to add reloading to the rifle. Open up ``Weapon_Rifle.gd`` and "
"add the following class variables:"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_three.rst:266
msgid ""
"These variables are exactly the same as the pistol, just with "
"``RELOADING_ANIM_NAME`` changed to the rifle's reloading animation."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_three.rst:268
msgid "Now we need to add ``reload_weapon`` to ``Weapon_Rifle.gd``:"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_three.rst:297
msgid "This code is exactly the same as the one for the pistol."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_three.rst:301
msgid ""
"The last bit we need to do for the weapons is add 'reloading' to the knife. "
"Add the following class variables to ``Weapon_Knife.gd``:"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_three.rst:310
msgid ""
"Since we both cannot reload or refill a knife, we set both constants to "
"``false``. We also define ``RELOADING_ANIM_NAME`` as an empty string, since "
"the knife has no reloading animation."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_three.rst:313
msgid "Now we need to add ``reloading_weapon``:"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_three.rst:320
msgid "Since we cannot reload a knife, we always return ``false``."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_three.rst:323
msgid "Adding reloading to the player"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_three.rst:325
msgid ""
"Now we need to add a few things to ``Player.gd``. First we need to define a "
"new class variable:"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_three.rst:331
msgid ""
"``reloading_weapon``: A variable to track whether or not the player is "
"currently trying to reload."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_three.rst:334
msgid "Next we need to add another function call to ``_physics_process``."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_three.rst:336
msgid ""
"Add ``process_reloading(delta)`` to ``_physics_process``. Now "
"``_physics_process`` should look something like this:"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_three.rst:347
msgid ""
"Now we need to add ``process_reloading``. Add the following function to "
"``Player.gd``:"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_three.rst:358
#: ../../docs/tutorials/3d/fps_tutorial/part_three.rst:409
#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:362
#: ../../docs/tutorials/3d/fps_tutorial/part_six.rst:424
msgid "Let's go over what's happening here."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_three.rst:360
msgid "Firstly, we check to make sure the player is trying to reload."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_three.rst:362
msgid ""
"If the player is trying to reload, we then get the current weapon. If the "
"current weapon does not equal ``null``, we call its ``reload_weapon`` "
"function."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_three.rst:364
msgid ""
"If the current weapon is equal to ``null``, then the current weapon is "
"``UNARMED``."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_three.rst:366
msgid ""
"Finally, we set ``reloading_weapon`` to ``false`` because, regardless of "
"whether the player successfully reloaded, we've tried reloading and no "
"longer need to keep trying."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_three.rst:371
msgid ""
"Before we can let the player reload, we need to change a few things in "
"``process_input``."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_three.rst:373
msgid ""
"The first thing we need to change is in the code for changing weapons. We "
"need to add an additional check (``if reloading_weapon == false:``) to see "
"if the player is reloading:"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_three.rst:384
msgid ""
"This makes it so the player cannot change weapons if the player is reloading."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_three.rst:386
msgid ""
"Now we need to add the code to trigger a reload when the player pushes the "
"``reload`` action. Add the following code to ``process_input``:"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_three.rst:411
msgid ""
"First we make sure the player is not reloading already, nor is the player "
"trying to change weapons."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_three.rst:413
msgid "Then we check to see if the ``reload`` action has been pressed."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_three.rst:415
msgid ""
"If the player has pressed ``reload``, we then get the current weapon and "
"check to make sure it is not ``null``. Then we check to see whether the "
"weapon can reload or not using its ``CAN_RELOAD`` constant."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_three.rst:418
msgid ""
"If the weapon can reload, we then get the current animation state, and make "
"a variable for tracking whether the player is already reloading or not."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_three.rst:420
msgid ""
"We then go through every weapon to make sure the player is not already "
"playing that weapon's reloading animation."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_three.rst:422
msgid ""
"If the player is not reloading any weapon, we set ``reloading_weapon`` to "
"``true``."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_three.rst:426
msgid ""
"One thing I like to add is where the weapon will reload itself if you try to "
"fire it and it's out of ammo."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_three.rst:428
msgid ""
"We also need to add an additional if check (``is_reloading_weapon == false:"
"``) so the player cannot fire the current weapon while reloading."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_three.rst:431
msgid ""
"Let's change our firing code in ``process_input`` so it reloads when trying "
"to fire an empty weapon:"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_three.rst:449
msgid ""
"Now we check to make sure the player is not reloading before we fire the "
"weapon, and when we have ``0`` or less ammo in the current weapon, we set "
"``reloading_weapon`` to ``true`` if the player tries to fire."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_three.rst:452
msgid ""
"This will make it so the player will try to reload when attempting to fire "
"an empty weapon."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_three.rst:456
msgid ""
"With that done, the player can now reload! Give it a try! Now you can fire "
"all the spare ammo for each weapon."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_three.rst:459
msgid "Adding sounds"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_three.rst:461
msgid ""
"Finally, let's add some sounds that accompany the player firing, reloading "
"and changing weapons."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_three.rst:463
msgid ""
"There are no game sounds provided in this tutorial (for legal reasons). "
"https://gamesounds.xyz/ is a collection of **\"royalty free or public domain "
"music and sounds suitable for games\"**. I used Gamemaster's Gun Sound Pack, "
"which can be found in the Sonniss.com GDC 2017 Game Audio Bundle."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_three.rst:467
msgid ""
"Open up ``Simple_Audio_Player.tscn``. It is simply a :ref:`Spatial "
"<class_Spatial>` with an :ref:`AudioStreamPlayer <class_AudioStreamPlayer>` "
"as its child."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_three.rst:469
msgid ""
"The reason this is called a 'simple' audio player is because we are not "
"taking performance into account and because the code is designed to provide "
"sound in the simplest way possible."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_three.rst:472
msgid ""
"If you want to use 3D audio, so it sounds like it's coming from a location "
"in 3D space, right click the :ref:`AudioStreamPlayer "
"<class_AudioStreamPlayer>` and select \"Change type\"."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_three.rst:475
msgid ""
"This will open the node browser. Navigate to :ref:`AudioStreamPlayer3D "
"<class_AudioStreamPlayer3D>` and select \"change\". In the source for this "
"tutorial, we will be using :ref:`AudioStreamPlayer "
"<class_AudioStreamPlayer>`, but you can optionally use :ref:"
"`AudioStreamPlayer3D <class_AudioStreamPlayer3D>` if you desire, and the "
"code provided below will work regardless of which one you chose."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_three.rst:480
msgid ""
"Create a new script and call it ``Simple_Audio_Player.gd``. Attach it to "
"the :ref:`Spatial <class_Spatial>` in ``Simple_Audio_Player.tscn`` and "
"insert the following code:"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_three.rst:532
msgid ""
"By setting ``position`` to ``null`` by default in ``play_sound``, we are "
"making it an optional argument, meaning ``position`` doesn't necessarily "
"have to be passed in to call ``play_sound``."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_three.rst:539
msgid ""
"In ``_ready``, we get the :ref:`AudioStreamPlayer <class_AudioStreamPlayer>` "
"and connect its ``finished`` signal to the ``destroy_self`` function. It "
"doesn't matter if it's an :ref:`AudioStreamPlayer <class_AudioStreamPlayer>` "
"or :ref:`AudioStreamPlayer3D <class_AudioStreamPlayer3D>` node, as they both "
"have the finished signal. To make sure it is not playing any sounds, we call "
"``stop`` on the :ref:`AudioStreamPlayer <class_AudioStreamPlayer>`."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_three.rst:543
msgid ""
"Make sure your sound files are **not** set to loop! If it is set to loop, "
"the sounds will continue to play infinitely and the script will not work!"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_three.rst:546
msgid ""
"The ``play_sound`` function is what we will be calling from ``Player.gd``. "
"We check if the sound is one of the three possible sounds, and if it is one "
"of the three sounds we set the audio stream in :ref:`AudioStreamPlayer "
"<class_AudioStreamPlayer>` to the correct sound."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_three.rst:550
msgid ""
"If it is an unknown sound, we print an error message to the console and free "
"the audio player."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_three.rst:552
msgid ""
"If you are using an :ref:`AudioStreamPlayer3D <class_AudioStreamPlayer3D>`, "
"remove the ``#`` to set the position of the audio player node so it plays at "
"the correct position."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_three.rst:555
msgid ""
"Finally, we tell the :ref:`AudioStreamPlayer <class_AudioStreamPlayer>` to "
"play."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_three.rst:557
msgid ""
"When the :ref:`AudioStreamPlayer <class_AudioStreamPlayer>` is finished "
"playing the sound, it will call ``destroy_self`` because we connected the "
"``finished`` signal in ``_ready``. We stop the :ref:`AudioStreamPlayer "
"<class_AudioStreamPlayer>` and free the audio player to save on resources."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_three.rst:561
msgid "This system is extremely simple and has some major flaws:"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_three.rst:563
msgid ""
"One flaw is we have to pass in a string value to play a sound. While it is "
"relatively simple to remember the names of the three sounds, it can be "
"increasingly complex when you have more sounds. Ideally, we'd place these "
"sounds in some sort of container with exposed variables so we do not have to "
"remember the name(s) of each sound effect we want to play."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_three.rst:568
msgid ""
"Another flaw is we cannot play looping sounds effects, nor background music, "
"easily with this system. Because we cannot play looping sounds, certain "
"effects, like footstep sounds, are harder to accomplish because we then have "
"to keep track of whether or not there is a sound effect and whether or not "
"we need to continue playing it."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_three.rst:573
msgid ""
"One of the biggest flaws with this system is we can only play sounds from "
"``Player.gd``. Ideally we'd like to be able to play sounds from any script "
"at any time."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_three.rst:578
msgid ""
"With that done, let's open up ``Player.gd`` again. First we need to load the "
"``Simple_Audio_Player.tscn``. Place the following code in the class "
"variables section of the script:"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_three.rst:585
msgid ""
"Now we need to instance the simple audio player when we need it, and then "
"call its ``play_sound`` function and pass the name of the sound we want to "
"play. To make the process simpler, let's create a ``create_sound`` function "
"in ``Player.gd``:"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_three.rst:597
msgid "Let's walk through what this function does:"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_three.rst:601
msgid ""
"The first line instances the ``Simple_Audio_Player.tscn`` scene and assigns "
"it to a variable named ``audio_clone``."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_three.rst:604
msgid ""
"The second line gets the scene root, and this has a large (though safe) "
"assumption."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_three.rst:606
msgid ""
"We first get this node's :ref:`SceneTree <class_SceneTree>`, and then access "
"the root node, which in this case is the :ref:`Viewport <class_Viewport>` "
"this entire game is running under. Then we get the first child of the :ref:"
"`Viewport <class_Viewport>`, which in our case happens to be the root node "
"in ``Test_Area.tscn`` or any of the other provided levels. **We are making a "
"huge assumption that the first child of the root node is the root scene that "
"the player is under, which may not always be the case**."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_three.rst:612
msgid ""
"If this doesn't make sense to you, don't worry too much about it. The second "
"line of code only does not work reliably if you have multiple scenes loaded "
"as children of the root node at a time, which will rarely happen for most "
"projects and will not be happening in this tutorial series. This is only "
"potentially a issue depending on how you handle scene loading."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_three.rst:616
msgid ""
"The third line adds our newly created ``Simple_Audio_Player`` scene to be a "
"child of the scene root. This works exactly the same as when we are spawning "
"bullets."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_three.rst:619
msgid ""
"Finally, we call the ``play_sound`` function and pass in the arguments "
"passed in to ``create_sound``. This will call ``Simple_Audio_Player.gd``'s "
"``play_sound`` function with the passed in arguments."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_three.rst:624
msgid ""
"Now all that is left is playing the sounds when we want to. Let's add sound "
"to the pistol first!"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_three.rst:626
msgid "Open up ``Weapon_Pistol.gd``."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_three.rst:628
msgid ""
"Now, we want to make a noise when the player fires the pistol, so add the "
"following to the end of the ``fire_weapon`` function:"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_three.rst:634
msgid ""
"Now when the player fires the pistol, we'll play the ``Pistol_shot`` sound."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_three.rst:636
#: ../../docs/tutorials/3d/fps_tutorial/part_three.rst:658
msgid ""
"To make a sound when the player reloads, we need to add the following right "
"under ``player_node.animation_manager.set_animation(RELOADING_ANIM_NAME)`` "
"in the ``reload_weapon`` function:"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_three.rst:643
#: ../../docs/tutorials/3d/fps_tutorial/part_three.rst:665
msgid "Now when the player reloads, we'll play the ``Gun_cock`` sound."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_three.rst:647
msgid "Now let's add sounds to the rifle. Open up ``Weapon_Rifle.gd``."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_three.rst:650
msgid ""
"To play sounds when the rifle is fired, add the following to the end of the "
"``fire_weapon`` function:"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_three.rst:656
msgid ""
"Now when the player fires the rifle, we'll play the ``Rifle_shot`` sound."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_three.rst:672
msgid ""
"Now you have weapons with limited ammo that play sounds when you fire them!"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_three.rst:674
msgid ""
"At this point, we have all the basics of an FPS game working. There are "
"still a few things that would be nice to add, and we're going to add them in "
"the next three parts!"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_three.rst:677
msgid ""
"For example, right now we have no way to add ammo to our spares, so we'll "
"eventually run out. Also, we don't have anything to shoot at outside of the :"
"ref:`RigidBody <class_RigidBody>` nodes."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_three.rst:680
msgid ""
"In :ref:`doc_fps_tutorial_part_four` we'll add some targets to shoot at, "
"along with some health and ammo pick ups! We're also going to add joypad "
"support, so we can play with wired Xbox 360 controllers!"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_three.rst:685
msgid ""
"You can download the finished project for this part here: :download:"
"`Godot_FPS_Part_3.zip <files/Godot_FPS_Part_3.zip>`"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:4
msgid "Part 4"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:9
msgid ""
"In this part, we will be adding health pickups, ammo pickups, targets the "
"player can destroy, support for joypads, and add the ability to change "
"weapons with the scroll wheel."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:13
msgid ""
"You are assumed to have finished :ref:`doc_fps_tutorial_part_three` before "
"moving on to this part of the tutorial. The finished project from :ref:"
"`doc_fps_tutorial_part_three` will be the starting project for part 4"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:19
msgid "Adding joypad input"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:21
msgid ""
"In Godot, any game controller is referred to as a joypad. This includes: "
"Console controllers, Joysticks (like for flight simulators), Wheels (like "
"for driving simulators), VR Controllers, and more!"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:24
msgid ""
"Firstly, we need to change a few things in our project's input map. Open up "
"the project settings and select the ``Input Map`` tab."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:26
msgid ""
"Now we need to add some joypad buttons to our various actions. Click the "
"plus icon and select ``Joy Button``."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:30
msgid ""
"Feel free to use whatever button layout you want. Make sure that the device "
"selected is set to ``0``. In the finished project, we will be using the "
"following:"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:32
msgid "movement_sprint: ``Device 0, Button 4 (L, L1)``"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:33
msgid "fire: ``Device 0, Button 0 (PS Cross, XBox A, Nintendo B)``"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:34
msgid "reload: ``Device 0, Button 0 (PS Square, XBox X, Nintendo Y)``"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:35
msgid "flashlight: ``Device 0, Button 12 (D-Pad Up)``"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:36
msgid "shift_weapon_positive: ``Device 0, Button 15 (D-Pad Right)``"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:37
msgid "shift_weapon_negative: ``Device 0, Button 14 (D-Pad Left)``"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:38
msgid "fire_grenade: ``Device 0, Button 1 (PS Circle, XBox B, Nintendo A).``"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:40
msgid "These are already set up for you if you downloaded the starter assets"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:42
msgid "Once you are happy with the input, close the project settings and save."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:46
msgid "Now let's open up ``Player.gd`` and add joypad input."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:48
msgid ""
"First, we need to define a few new class variables. Add the following class "
"variables to ``Player.gd``:"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:56
msgid "Let's go over what each of these does:"
msgstr "각각이 하는 일을 살펴보겠습니다:"

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:58
msgid ""
"``JOYPAD_SENSITIVITY``: This is how fast the joypad's joysticks will move "
"the camera."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:59
msgid ""
"``JOYPAD_DEADZONE``: The dead zone for the joypad. You may need to adjust "
"depending on your joypad."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:61
msgid ""
"Many joypads jitter around a certain point. To counter this, we ignore any "
"movement within a radius of JOYPAD_DEADZONE. If we did not ignore said "
"movement, the camera would jitter."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:64
msgid ""
"Also, we are defining ``JOYPAD_SENSITIVITY`` as a variable instead of a "
"constant because we'll later be changing it."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:66
msgid "Now we are ready to start handling joypad input!"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:70
msgid ""
"In ``process_input``, add the following code just before "
"``input_movement_vector = input_movement_vector.normalized()``:"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:113
msgid "Let's go over what we're doing."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:115
msgid "Firstly, we check to see if there is a connected joypad."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:117
msgid ""
"If there is a joypad connected, we then get its left stick axes for right/"
"left and up/down. Because a wired Xbox 360 controller has different joystick "
"axis mapping based on OS, we will use different axes based on the OS."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:121
msgid ""
"This tutorial assumes you are using a XBox 360 or a Playstation wired "
"controller. Also, I do not (currently) have access to a Mac computer, so the "
"joystick axes may need changing. If they do, please open a GitHub issue on "
"the Godot documentation repository! Thanks!"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:125
msgid ""
"Next, we check to see if the joypad vector length is within the "
"``JOYPAD_DEADZONE`` radius. If it is, we set ``joypad_vec`` to an empty "
"Vector2. If it is not, we use a scaled Radial Dead zone for precise dead "
"zone calculation."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:128
msgid ""
"You can find a great article explaining all about how to handle joypad/"
"controller dead zones here: http://www.third-helix.com/2013/04/12/doing-"
"thumbstick-dead-zones-right.html"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:131
msgid ""
"We're using a translated version of the scaled radial dead zone code "
"provided in that article. The article is a great read, and I highly suggest "
"giving it a look!"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:134
msgid "Finally, we add ``joypad_vec`` to ``input_movement_vector``."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:136
msgid ""
"Remember how we normalize ``input_movement_vector``? This is why! If we did "
"not normalize ``input_movement_vector``, the player could move faster if "
"they pushed in the same direction with both the keyboard and the joypad!"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:141
msgid ""
"Make a new function called ``process_view_input`` and add the following:"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:218
msgid ""
"Firstly, we check the mouse mode. If the mouse mode is not "
"``MOUSE_MODE_CAPTURED``, we want to return, which will skip the code below."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:220
msgid ""
"Next, we define a new :ref:`Vector2 <class_Vector2>` called ``joypad_vec``. "
"This will hold the right joystick position. Based on the OS, we set its "
"values so it is mapped to the proper axes for the right joystick."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:223
msgid ""
"As stated above, I do not (currently) have access to a Mac computer, so the "
"joystick axes may need changing. If they do, please open a GitHub issue on "
"the Godot documentation repository! Thanks!"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:226
msgid ""
"We then account for the joypad's dead zone, exactly like in "
"``process_input``."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:228
msgid ""
"Then, we rotate ``rotation_helper`` and the player's :ref:`KinematicBody "
"<class_KinematicBody>` using ``joypad_vec``."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:230
msgid ""
"Notice how the code that handles rotating the player and ``rotation_helper`` "
"is exactly the same as the code in ``_input``. All we've done is change the "
"values to use ``joypad_vec`` and ``JOYPAD_SENSITIVITY``."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:233
msgid ""
"Due to a few mouse-related bugs on Windows, we cannot put mouse rotation in "
"``process_view`` as well. Once these bugs are fixed, this will likely be "
"updated to place the mouse rotation here in ``process_view_input`` as well."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:236
msgid ""
"Finally, we clamp the camera's rotation so the player cannot look upside "
"down."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:240
msgid ""
"The last thing we need to do is add ``process_view_input`` to "
"``_physics_process``."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:242
msgid ""
"Once ``process_view_input`` is added to ``_physics_process``, you should be "
"able to play using a joypad!"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:244
msgid ""
"I decided not to use the joypad triggers for firing because we'd then have "
"to do some more axis managing, and because I prefer to use a shoulder "
"buttons to fire."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:246
msgid ""
"If you want to use the triggers for firing, you will need to change how "
"firing works in ``process_input``. You need to get the axis values for the "
"triggers, and check if it's over a certain value, say ``0.8`` for example. "
"If it is, you add the same code as when the ``fire`` action was pressed."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:250
msgid "Adding mouse scroll wheel input"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:252
msgid ""
"Let's add one more input related feature before we start working on the "
"pickups and the target. Let's add the ability to change weapons using the "
"scroll wheel on the mouse."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:254
#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:457
#: ../../docs/tutorials/3d/fps_tutorial/part_six.rst:526
msgid "Open up ``Player.gd`` and add the following class variables:"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:261
msgid "Let's go over what each of these new variables will be doing:"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:263
msgid "``mouse_scroll_value``: The value of the mouse scroll wheel."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:264
msgid ""
"``MOUSE_SENSITIVITY_SCROLL_WHEEL``: How much a single scroll action "
"increases mouse_scroll_value"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:268
msgid "Now let's add the following to ``_input``:"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:292
msgid ""
"Firstly, we check if the event is an ``InputEventMouseButton`` event and "
"that the mouse mode is ``MOUSE_MODE_CAPTURED``. Then, we check to see if the "
"button index is either a ``BUTTON_WHEEL_UP`` or ``BUTTON_WHEEL_DOWN`` index."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:295
msgid ""
"If the event's index is indeed a button wheel index, we then check to see if "
"it is a ``BUTTON_WHEEL_UP`` or ``BUTTON_WHEEL_DOWN`` index. Based on whether "
"it is up or down, we add or subtract ``MOUSE_SENSITIVITY_SCROLL_WHEEL`` to/"
"from ``mouse_scroll_value``."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:298
msgid ""
"Next, we clamp mouse scroll value to ensure it is inside the range of "
"selectable weapons."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:300
msgid ""
"We then check to see if the player is changing weapons or reloading. If the "
"player is doing neither, we round ``mouse_scroll_value`` and cast it to an "
"``int``."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:302
msgid ""
"We are casting ``mouse_scroll_value`` to an ``int`` so we can use it as a "
"key in our dictionary. If we left it as a float, we would get an error when "
"we tried to run the project."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:305
msgid ""
"Next, we check to see if the weapon name at ``round_mouse_scroll_value`` is "
"not equal to the current weapon name using ``WEAPON_NUMBER_TO_NAME``. If the "
"weapon is different than the player's current weapon, we assign "
"``changing_weapon_name``, set ``changing_weapon`` to ``true`` so the player "
"will change weapons in ``process_changing_weapon``, and set "
"``mouse_scroll_value`` to ``round_mouse_scroll_value``."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:309
msgid ""
"The reason we are setting ``mouse_scroll_value`` to the rounded scroll value "
"is because we do not want the player to keep their mouse scroll wheel just "
"in between values, giving them the ability to switch almost extremely fast. "
"By assigning ``mouse_scroll_value`` to ``round_mouse_scroll_value``, we "
"ensure that each weapon takes exactly the same amount of scrolling to change."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:315
msgid ""
"One more thing we need to change is in ``process_input``. In the code for "
"changing weapons, add the following right after the line ``changing_weapon = "
"true``:"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:321
msgid ""
"Now the scroll value will be changed with the keyboard input. If we did not "
"change this, the scroll value would be out of sync. If the scroll wheel were "
"out of sync, scrolling forwards or backwards would not transition to the "
"next/last weapon, but rather the next/last weapon the scroll wheel changed "
"to."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:326
msgid "Now you can change weapons using the scroll wheel! Go give it a whirl!"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:329
msgid "Adding the health pickups"
msgstr "체력 픽업 추가하기"

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:331
msgid ""
"Now that the player has health and ammo, we ideally need a way to replenish "
"those resources."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:333
msgid "Open up ``Health_Pickup.tscn``."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:335
msgid ""
"Expand ``Holder`` if it's not already expanded. Notice how we have two "
"Spatial nodes, one called ``Health_Kit`` and another called "
"``Health_Kit_Small``."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:337
msgid ""
"This is because we're actually going to be making two sizes of health "
"pickups, one small and one large/normal. ``Health_Kit`` and "
"``Health_Kit_Small`` only have a single :ref:`MeshInstance "
"<class_MeshInstance>` as their children."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:340
msgid ""
"Next expand ``Health_Pickup_Trigger``. This is an :ref:`Area <class_Area>` "
"node we're going to use to check if the player has walked close enough to "
"pick up the health kit. If you expand it, you'll find two collision shapes, "
"one for each size. We will be using a different collision shape size based "
"on the size of the health pickup, so the smaller health pickup has a trigger "
"collision shape closer to its size."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:344
msgid ""
"The last thing to note is how we have an :ref:`AnimationPlayer "
"<class_AnimationPlayer>` node so the health kit bobs and spins around slowly."
msgstr ""
"마지막으로 봐야할 것은 :ref:`AnimationPlayer <class_AnimationPlayer>` 노드"
"로, 이것으로 체력 킷이 천천히 움직이고 회전합니다."

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:346
msgid ""
"Select ``Health_Pickup`` and add a new script called ``Health_Pickup.gd``. "
"Add the following:"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:405
msgid ""
"Let's go over what this script is doing, starting with its class variables:"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:407
msgid ""
"``kit_size``: The size of the health pickup. Notice how we're using a "
"``setget`` function to tell if it's changed."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:408
msgid ""
"``HEALTH_AMMOUNTS``: The amount of health each pickup in each size contains."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:409
msgid ""
"``RESPAWN_TIME``: The amount of time, in seconds, it takes for the health "
"pickup to respawn"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:410
msgid ""
"``respawn_timer``: A variable used to track how long the health pickup has "
"been waiting to respawn."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:411
msgid ""
"``is_ready``: A variable to track whether the ``_ready`` function has been "
"called or not."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:413
msgid ""
"We're using ``is_ready`` because ``setget`` functions are called before "
"``_ready``; we need to ignore the first kit_size_change call, because we "
"cannot access child nodes until ``_ready`` is called. If we did not ignore "
"the first ``setget`` call, we would get several errors in the debugger."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:417
msgid ""
"Also, notice how we are using an exported variable. This is so we can change "
"the size of the health pickups in the editor. This makes it so we do not "
"have to make two scenes for the two sizes, since we can easily change sizes "
"in the editor using the exported variable."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:420
msgid ""
"See :ref:`doc_GDScript` and scroll down to the Exports section for a list of "
"export hints you can use."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:424
msgid "Let's look at ``_ready``:"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:426
msgid ""
"Firstly, we connect the ``body_entered`` signal from the "
"``Health_Pickup_Trigger`` to the ``trigger_body_entered`` function. This "
"makes it so any body that enters the :ref:`Area <class_Area>` triggers the "
"``trigger_body_entered`` function."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:429
msgid ""
"Next, we set ``is_ready`` to ``true`` so we can use the ``setget`` function."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:431
msgid ""
"Then we hide all the possible kits and their collision shapes using "
"``kit_size_change_values``. The first argument is the size of the kit, while "
"the second argument is whether to enable or disable the collision shape and "
"mesh at that size."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:434
msgid ""
"Then we make only the kit size we selected visible, calling "
"``kit_size_change_values`` and passing in ``kit_size`` and ``true``, so the "
"size at ``kit_size`` is enabled."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:438
msgid "Next let's look at ``kit_size_change``."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:440
msgid "The first thing we do is check to see if ``is_ready`` is ``true``."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:442
msgid ""
"If ``is_ready`` is ``true``, we then make whatever kit already assigned to "
"``kit_size`` disabled using ``kit_size_change_values``, passing in "
"``kit_size`` and ``false``."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:444
msgid ""
"Then we assign ``kit_size`` to the new value passed in, ``value``. Then we "
"call ``kit_size_change_values`` passing in ``kit_size`` again, but this time "
"with the second argument as ``true`` so we enable it. Because we changed "
"``kit_size`` to the passed in value, this will make whatever kit size was "
"passed in visible."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:447
msgid ""
"If ``is_ready`` is not ``true``, we simply assign ``kit_size`` to the passed "
"in ``value``."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:451
msgid "Now let's look at ``kit_size_change_values``."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:453
msgid ""
"The first thing we do is check to see which size was passed in. Based on "
"which size we want to enable/disable, we want to get different nodes."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:455
msgid ""
"We get the collision shape for the node corresponding to ``size`` and "
"disable it based on the ``enabled`` passed in argument/variable."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:457
msgid ""
"Why are we using ``!enable`` instead of ``enable``? This is so when we say "
"we want to enable the node, we can pass in ``true``, but since :ref:"
"`CollisionShape <class_CollisionShape>` uses disabled instead of enabled, we "
"need to flip it. By flipping it, we can enable the collision shape and make "
"the mesh visible when ``true`` is passed in."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:461
msgid ""
"We then get the correct :ref:`Spatial <class_Spatial>` node holding the mesh "
"and set its visibility to ``enable``."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:463
msgid ""
"This function may be a little confusing; try to think of it like this: We're "
"enabling/disabling the proper nodes for ``size`` using ``enabled``. This is "
"so we cannot pick up health for a size that is not visible, and so only the "
"mesh for the proper size will be visible."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:468
msgid "Finally, let's look at ``trigger_body_entered``."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:470
msgid ""
"The first thing we do is check whether or not the body that has just entered "
"has a method/function called ``add_health``. If it does, we then call "
"``add_health`` and pass in the health provided by the current kit size."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:473
msgid ""
"Then we set ``respawn_timer`` to ``RESPAWN_TIME`` so the player has to wait "
"before the player can get health again. Finally, call "
"``kit_size_change_values``, passing in ``kit_size`` and ``false`` so the kit "
"at ``kit_size`` is invisible until it has waited long enough to respawn."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:478
msgid ""
"The last thing we need to do before the player can use this health pickup is "
"add a few things to ``Player.gd``."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:480
msgid "Open up ``Player.gd`` and add the following class variable:"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:486
msgid "``MAX_HEALTH``: The maximum amount of health a player can have."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:488
msgid ""
"Now we need to add the ``add_health`` function to the player. Add the "
"following to ``Player.gd``:"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:496
msgid "Let's quickly go over what this does."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:498
msgid ""
"We first add ``additional_health`` to the player's current health. We then "
"clamp the health so that it cannot take on a value higher than "
"``MAX_HEALTH``, nor a value lower than ``0``."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:503
msgid ""
"With that done, the player can now collect health! Go place a few "
"``Health_Pickup`` scenes around and give it a try. You can change the size "
"of the health pickup in the editor when a ``Health_Pickup`` instanced scene "
"is selected, from a convenient drop down."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:507
msgid "Adding the ammo pickups"
msgstr "총알 픽업 추가하기"

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:509
msgid ""
"While adding health is good and all, we can't reap the rewards from adding "
"it since nothing can (currently) damage us. Let's add some ammo pickups next!"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:512
msgid ""
"Open up ``Ammo_Pickup.tscn``. Notice how it's structured exactly the same as "
"``Health_Pickup.tscn``, but with the meshes and trigger collision shapes "
"changed slightly to account for the difference in mesh sizes."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:515
msgid ""
"Select ``Ammo_Pickup`` and add a new script called ``Ammo_Pickup.gd``. Add "
"the following:"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:576
msgid ""
"You may have noticed this code looks almost exactly the same as the health "
"pickup. That's because it largely is the same! Only a few things have been "
"changed, and that's what we're going to go over."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:579
msgid ""
"Firstly, notice the change to ``AMMO_AMOUNTS`` from ``HEALTH_AMMOUNTS``. "
"``AMMO_AMOUNTS`` will be how many ammo clips/magazines the pickup adds to "
"the current weapon. (Unlike in the case of ``HEALTH_AMMOUNTS``, which has "
"stood for how many health points would be awarded, we add an entire clip to "
"the current weapon instead of the raw ammo amount)"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:582
msgid ""
"The only other thing to notice is in ``trigger_body_entered``. We're "
"checking for the existence of and calling a function called ``add_ammo`` "
"instead of ``add_health``."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:584
msgid ""
"Other than those two small changes, everything else is the same as the "
"health pickup!"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:588
msgid ""
"All we need to do to make the ammo pickups work is add a new function to the "
"player. Open ``Player.gd`` and add the following function:"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:597
#: ../../docs/tutorials/3d/fps_tutorial/part_six.rst:759
#: ../../docs/tutorials/3d/fps_tutorial/part_six.rst:941
msgid "Let's go over what this function does."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:599
msgid ""
"The first thing we check is whether the player is ``UNARMED``. Because "
"``UNARMED`` does not have a node/script, we want to make sure the player is "
"not ``UNARMED`` before trying to get the node/script attached to "
"``current_weapon_name``."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:602
msgid ""
"Next, we check to see if the current weapon can be refilled. If the current "
"weapon can, we add a full clip/magazine worth of ammo to the weapon by "
"multiplying the current weapon's ``AMMO_IN_MAG`` value by however many ammo "
"clips we're adding (``additional_ammo``)."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:607
msgid ""
"With that done, you should now be able to get additional ammo! Go place some "
"ammo pickups in one/both/all of the scenes and give it a try!"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:609
msgid ""
"Notice how we're not limiting the amount of ammo you can carry. To limit the "
"amount of ammo each weapon can carry, you need to add an additional variable "
"to each weapon's script, and then clamp the weapon's ``spare_ammo`` variable "
"after adding ammo in ``add_ammo``."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:613
msgid "Adding breakable targets"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:615
msgid "Before we end this part, let's add some targets."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:617
msgid ""
"Open up ``Target.tscn`` and take a look at the scenes in the scene tree."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:619
msgid ""
"Firstly, notice how we're not using a :ref:`RigidBody <class_RigidBody>` "
"node, but a :ref:`StaticBody <class_StaticBody>` one. The reason behind this "
"is our non-broken targets will not be moving anywhere; using a :ref:"
"`RigidBody <class_RigidBody>` would be more hassle than it's worth since all "
"it has to do is stay still."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:623
msgid ""
"We also save a tiny bit of performance using a :ref:`StaticBody "
"<class_StaticBody>` over a :ref:`RigidBody <class_RigidBody>`."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:625
msgid ""
"The other thing to note is we have a node called ``Broken_Target_Holder``. "
"This node is going to hold a spawned/instanced scene called ``Broken_Target."
"tscn``. Open up ``Broken_Target.tscn``."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:628
msgid ""
"Notice how the target is broken up into five pieces, each a :ref:`RigidBody "
"<class_RigidBody>` node. We're going to spawn/instance this scene when the "
"target takes too much damage and needs to be destroyed. Then, we're going to "
"hide the non-broken target, so it looks like the target shattered rather "
"than a shattered target was spawned/instanced."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:632
msgid ""
"While you still have ``Broken_Target.tscn`` open, attach "
"``RigidBody_hit_test.gd`` to all of the :ref:`RigidBody <class_RigidBody>` "
"nodes. This will make it so the player can shoot at the broken pieces and "
"they will react to the bullets."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:635
msgid ""
"Alright, now switch back to ``Target.tscn``, select the ``Target`` :ref:"
"`StaticBody <class_StaticBody>` node and create a new script called ``Target."
"gd``."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:637
msgid "Add the following code to ``Target.gd``:"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:695
msgid "Let's go over what this script does, starting with the class variables:"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:697
msgid ""
"``TARGET_HEALTH``: The amount of damage needed to break a fully healed "
"target."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:698
msgid "``current_health``: The amount of health this target currently has."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:699
msgid ""
"``broken_target_holder``: A variable to hold the ``Broken_Target_Holder`` "
"node so we can use it easily."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:700
msgid ""
"``target_collision_shape``: A variable to hold the :ref:`CollisionShape "
"<class_CollisionShape>` for the non-broken target."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:701
msgid ""
"``TARGET_RESPAWN_TIME``: The length of time, in seconds, it takes for a "
"target to respawn."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:702
msgid ""
"``target_respawn_timer``: A variable to track how long a target has been "
"broken."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:703
msgid ""
"``destroyed_target``: A :ref:`PackedScene <class_PackedScene>` to hold the "
"broken target scene."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:705
msgid ""
"Notice how we're using an exported variable (a :ref:`PackedScene "
"<class_PackedScene>`) to get the broken target scene instead of using "
"``preload``. By using an exported variable, we can choose the scene from the "
"editor, and if we need to use a different scene, it's as easy as selecting a "
"different scene in the editor; we don't need to go to the code to change the "
"scene we're using."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:711
msgid "Let's look at ``_ready``."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:713
msgid ""
"The first thing we do is get the broken target holder and assign it to "
"``broken_target_holder``. Notice how we're using ``get_parent().get_node()`` "
"here, instead of ``$``. If you wanted to use ``$``, then you'd need to "
"change ``get_parent().get_node()`` to ``$\"../Broken_Target_Holder\"``."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:716
msgid ""
"At the time of when this was written, I did not realize you can use ``$\"../"
"NodeName\"`` to get the parent nodes using ``$``, which is why "
"``get_parent().get_node()`` is used instead."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:719
msgid ""
"Next, we get the collision shape and assign it to "
"``target_collision_shape``. The reason we need the collision shape is "
"because even when the mesh is invisible, the collision shape will still "
"exist in the physics world. This makes it so the player could interact with "
"a non-broken target even though it's invisible, which is not what we want. "
"To get around this, we will disable/enable the collision shape as we make "
"the mesh visible/invisible."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:725
msgid "Next let's look at ``_physics_process``."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:727
msgid ""
"We're only going to be using ``_physics_process`` for respawning, and so the "
"first thing we do is check to see if ``target_respawn_timer`` is greater "
"than ``0``."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:729
msgid "If it is, we then subtract ``delta`` from it."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:731
msgid ""
"Then we check to see if ``target_respawn_timer`` is ``0`` or less. The "
"reason behind this is since we just removed ``delta`` from "
"``target_respawn_timer``, if it's ``0`` or less, then the target just got "
"here, effectively allowing us to do whatever we need to do when the timer is "
"finished."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:734
msgid "In this case, we want to respawn the target."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:736
msgid ""
"The first thing we do is remove all children in the broken target holder. We "
"do this by iterating over all of the children in ``broken_target_holder`` "
"and free them using ``queue_free``."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:738
msgid ""
"Next, we enable the collision shape by setting its ``disabled`` boolean to "
"``false``."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:740
msgid "Then we make the target, and all of its children nodes, visible again."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:742
msgid ""
"Finally, we reset the target's health (``current_health``) to "
"``TARGET_HEALTH``."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:746
#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:903
msgid "Finally, let's look at ``bullet_hit``."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:748
msgid ""
"The first thing we do is subtract however much damage the bullet does from "
"the target's health."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:750
msgid ""
"Next we check to see if the target is at ``0`` health or lower. If it is, "
"the target has just died and we need to spawn a broken target."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:752
msgid ""
"We first instance a new destroyed target scene, and assign it to a new "
"variable, a ``clone``."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:754
msgid "Next we add the ``clone`` as a child of the broken target holder."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:756
msgid ""
"For bonus effect, we want to make all the target pieces explode outwards. To "
"do this, we iterate over all the children in ``clone``."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:758
msgid ""
"For each child, we first check to see if it's a :ref:`RigidBody "
"<class_RigidBody>` node. If it is, we then calculate the center position of "
"the target relative to the child node. Then we figure out which direction "
"the child node is relative to the center. Using those calculated variables, "
"we push the child from the calculated center, in the direction away from the "
"center, using the damage of the bullet as the force."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:762
msgid ""
"We multiply the damage by ``12`` so it has a more dramatic effect. You can "
"change this to a higher or lower value depending on how explosively you want "
"your targets to shatter."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:765
msgid ""
"Next, we set the target's respawn timer. We set the timer to "
"``TARGET_RESPAWN_TIME``, so it takes ``TARGET_RESPAWN_TIME`` in seconds "
"until it is respawned."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:767
msgid ""
"Then we disable the non-broken target's collision shape, and set the "
"target's visibility to ``false``."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:771
msgid ""
"Make sure to set the exported ``destroyed_target`` value for ``Target.tscn`` "
"in the editor! Otherwise the targets will not be destroyed and you will get "
"an error!"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:774
msgid ""
"With that done, go place some ``Target.tscn`` instances around in one/both/"
"all of the levels. You should find they explode into five pieces after "
"they've taken enough damage. After a little while, they'll respawn into a "
"whole target again."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:782
msgid ""
"Now you can use a joypad, change weapons with the mouse's scroll wheel, "
"replenish your health and ammo, and break targets with your weapons."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:784
msgid ""
"In the next part, :ref:`doc_fps_tutorial_part_five`, we're going to add "
"grenades to our player, give our player the ability to grab and throw "
"objects, and add turrets!"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:789
msgid ""
"You can download the finished project for this part here: :download:"
"`Godot_FPS_Part_4.zip <files/Godot_FPS_Part_4.zip>`"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:4
msgid "Part 5"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:9
msgid ""
"In this part, we're going to add grenades to the player, give the player the "
"ability to grab and throw objects, and add turrets!"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:13
msgid ""
"You are assumed to have finished :ref:`doc_fps_tutorial_part_four` before "
"moving on to this part of the tutorial. The finished project from :ref:"
"`doc_fps_tutorial_part_four` will be the starting project for part 5"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:19
msgid "Adding grenades"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:21
msgid ""
"Firstly, let's give the player some grenades to play with. Open up ``Grenade."
"tscn``."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:23
msgid ""
"There are a few things to note here, the first and foremost being that the "
"grenades are going to use :ref:`RigidBody <class_RigidBody>` nodes. We're "
"going to use :ref:`RigidBody <class_RigidBody>` nodes for our grenades so "
"they bounce around the world in a (somewhat) realistic manner."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:26
msgid ""
"The second thing to note is ``Blast_Area``. This is an :ref:`Area "
"<class_Area>` node that will represent the blast radius of the grenade."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:28
msgid ""
"Finally, the last thing to note is ``Explosion``. This is the :ref:"
"`Particles <class_Particles>` node that will emit an explosion effect when "
"the grenade explodes. One thing to note here is that we have ``One shot`` "
"enabled. This is so we emit all the particles at once. The particles are "
"also emitted using world coordinates instead of local coordinates, so we "
"have ``Local Coords`` unchecked as well."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:32
msgid ""
"If you want, you can see how the particles are set up by looking through the "
"particle's ``Process Material`` and ``Draw Passes``."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:34
msgid ""
"Let's write the code needed for the grenade. Select ``Grenade`` and make a "
"new script called ``Grenade.gd``. Add the following:"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:90
msgid "Let's go over what's happening, starting with the class variables:"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:92
msgid ""
"``GRENADE_DAMAGE``: The amount of damage the grenade causes when it explodes."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:93
msgid ""
"``GRENADE_TIME``: The amount of time the grenade takes (in seconds) to "
"explode once it's created/thrown."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:94
msgid ""
"``grenade_timer``: A variable for tracking how long the grenade has been "
"created/thrown."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:95
msgid ""
"``EXPLOSION_WAIT_TIME``: The amount of time needed (in seconds) to wait "
"before we destroy the grenade scene after the explosion"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:96
msgid ""
"``explosion_wait_timer``: A variable for tracking how much time has passed "
"since the grenade exploded."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:97
msgid ""
"``rigid_shape``: The :ref:`CollisionShape <class_CollisionShape>` for the "
"grenade's :ref:`RigidBody <class_RigidBody>`."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:98
msgid ""
"``grenade_mesh``: The :ref:`MeshInstance <class_MeshInstance>` for the "
"grenade."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:99
msgid ""
"``blast_area``: The blast :ref:`Area <class_Area>` used to damage things "
"when the grenade explodes."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:100
msgid ""
"``explosion_particles``: The :ref:`Particles <class_Particles>` that come "
"out when the grenade explodes."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:102
msgid ""
"Notice how ``EXPLOSION_WAIT_TIME`` is a rather strange number (``0.48``). "
"This is because we want ``EXPLOSION_WAIT_TIME`` to be equal to the length of "
"time the explosion particles are emitting, so when the particles are done we "
"destroy/free the grenade. We calculate ``EXPLOSION_WAIT_TIME`` by taking the "
"particle's life time and dividing it by the particle's speed scale. This "
"gets us the exact time the explosion particles will last."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:108
msgid "Now let's turn our attention to ``_ready``."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:110
msgid ""
"First we get all the nodes we'll need and assign them to the proper class "
"variables."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:112
msgid ""
"We need to get the :ref:`CollisionShape <class_CollisionShape>` and :ref:"
"`MeshInstance <class_MeshInstance>` because similarly to the target in :ref:"
"`doc_fps_tutorial_part_four`, we will be hiding the grenade's mesh and "
"disabling the collision shape when the grenade explodes."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:115
msgid ""
"The reason we need to get the blast :ref:`Area <class_Area>` is so we can "
"damage everything inside it when the grenade explodes. We'll be using code "
"similar to the knife code in the player. We need the :ref:`Particles "
"<class_Particles>` so we can emit particles when the grenade explodes."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:118
msgid ""
"After we get all the nodes and assign them to their class variables, we then "
"make sure the explosion particles are not emitting, and that they are set to "
"emit in one shot. This is to be extra sure the particles will behave the way "
"we expect them to."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:123
msgid "Now let's look at ``_process``."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:125
msgid ""
"Firstly, we check to see if the ``grenade_timer`` is less than "
"``GRENADE_TIME``. If it is, we add ``delta`` and return. This is so the "
"grenade has to wait ``GRENADE_TIME`` seconds before exploding, allowing the :"
"ref:`RigidBody <class_RigidBody>` to move around."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:128
msgid ""
"If ``grenade_timer`` is at ``GRENADE_TIMER`` or higher, we then need to "
"check if the grenade has waited long enough and needs to explode. We do this "
"by checking to see if ``explosion_wait_timer`` is equal to ``0`` or less. "
"Since we will be adding ``delta`` to ``explosion_wait_timer`` right after, "
"whatever code under the check will only be called once, right when the "
"grenade has waited long enough and needs to explode."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:132
msgid ""
"If the grenade has waited long enough to explode, we first tell the "
"``explosion_particles`` to emit. Then we make ``grenade_mesh`` invisible, "
"and disable ``rigid_shape``, effectively hiding the grenade."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:135
msgid ""
"We then set the :ref:`RigidBody <class_RigidBody>`'s mode to ``MODE_STATIC`` "
"so the grenade does not move."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:137
msgid ""
"Then we get all the bodies in ``blast_area``, check to see if they have the "
"``bullet_hit`` method/function, and if they do, we call it and pass in "
"``GRENADE_DAMAGE`` and the transform from the body looking at the grenade. "
"This makes it where the bodies exploded by the grenade will explode outwards "
"from the grenade's position."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:140
msgid ""
"We then check to see if ``explosion_wait_timer`` is less than "
"``EXPLOSION_WAIT_TIME``. If it is, we add ``delta`` to "
"``explosion_wait_timer``."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:142
msgid ""
"Next, we check to see if ``explosion_wait_timer`` is greater than or equal "
"to ``EXPLOSION_WAIT_TIME``. Because we added ``delta``, this will only be "
"called once. If ``explosion_wait_timer`` is greater or equal to "
"``EXPLOSION_WAIT_TIME``, the grenade has waited long enough to let the :ref:"
"`Particles <class_Particles>` play and we can free/destroy the grenade, as "
"we no longer need it."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:148
msgid ""
"Let's quickly get the sticky grenade set up too. Open up ``Sticky_Grenade."
"tscn``."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:150
msgid ""
"``Sticky_Grenade.tscn`` is almost identical to ``Grenade.tscn``, with one "
"small addition. We now have a second :ref:`Area <class_Area>`, called "
"``Sticky_Area``. We will be using ``Stick_Area`` to detect when the sticky "
"grenade has collided with the environment and needs to stick to something."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:154
msgid ""
"Select ``Sticky_Grenade`` and make a new script called ``Sticky_Grenade."
"gd``. Add the following:"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:244
msgid ""
"The code above is almost identical to the code for ``Grenade.gd``, so let's "
"just go over what's changed."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:246
msgid "Firstly, we have a few more class variables:"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:248
msgid ""
"``attached``: A variable for tracking whether or not the sticky grenade has "
"attached to a :ref:`PhysicsBody <class_PhysicsBody>`."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:249
msgid ""
"``attach_point``: A variable to hold a :ref:`Spatial <class_Spatial>` that "
"will be at the position where the sticky grenade collided."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:250
msgid ""
"``player_body``: The player's :ref:`KinematicBody <class_KinematicBody>`."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:252
msgid ""
"They have been added to enable the sticky grenade to stick to any :ref:"
"`PhysicsBody <class_PhysicsBody>` it might hit. We also now need the "
"player's :ref:`KinematicBody <class_KinematicBody>` so the sticky grenade "
"does not stick to the player when the player throws it."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:257
msgid ""
"Now let's look at the small change in ``_ready``. In ``_ready`` we've added "
"a line of code so when any body enters ``Stick_Area``, the "
"``collided_with_body`` function is called."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:262
msgid "Next let's take a look at ``collided_with_body``."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:264
msgid ""
"Firstly, we make sure the sticky grenade is not colliding with itself. "
"Because the sticky :ref:`Area <class_Area>` does not know it's attached to "
"the grenade's :ref:`RigidBody <class_RigidBody>`, we need to make sure it's "
"not going to stick to itself by checking to make sure the body it has "
"collided with is not itself. If we have collided with ourself, we ignore it "
"by returning."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:269
msgid ""
"We then check to see if we have something assigned to ``player_body``, and "
"if the body the sticky grenade has collided with is the player that threw "
"it. If the body the sticky grenade has collided with is indeed "
"``player_body``, we ignore it by returning."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:272
msgid ""
"Next, we check if the sticky grenade has attached to something already or "
"not."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:274
msgid ""
"If the sticky grenade is not attached, we then set ``attached`` to ``true`` "
"so we know the sticky grenade has attached to something."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:276
msgid ""
"We then make a new :ref:`Spatial <class_Spatial>` node, and make it a child "
"of the body the sticky grenade collided with. We then set the :ref:`Spatial "
"<class_Spatial>`'s position to the sticky grenade's current global position."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:279
msgid ""
"Because we've added the :ref:`Spatial <class_Spatial>` as a child of the "
"body the sticky grenade has collided with, it will follow along with said "
"body. We can then use this :ref:`Spatial <class_Spatial>` to set the sticky "
"grenade's position, so it is always at the same position relative to the "
"body it collided with."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:282
msgid ""
"We then disable ``rigid_shape`` so the sticky grenade is not constantly "
"moving whatever body it has collided with. Finally, we set our mode to "
"``MODE_STATIC`` so the grenade does not move."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:287
msgid "Finally, lets go over the few changes in ``_process``."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:289
msgid ""
"Now we're checking to see if the sticky grenade is attached right at the top "
"of ``_process``."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:291
msgid ""
"If the sticky grenade is attached, we then make sure the attached point is "
"not equal to ``null``. If the attached point is not equal to ``null``, we "
"set the sticky grenade's global position (using its global :ref:`Transform "
"<class_Transform>`'s origin) to the global position of the :ref:`Spatial "
"<class_Spatial>` assigned to ``attach_point`` (using its global :ref:"
"`Transform <class_Transform>`'s origin)."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:295
msgid ""
"The only other change is now before we free/destroy the sticky grenade is to "
"check to see if the sticky grenade has an attached point. If it does, we "
"also call ``queue_free`` on the attach point, so it's also freed/destroyed."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:299
msgid "Adding grenades to the player"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:301
msgid ""
"Now we need to add some code to ``Player.gd`` so we can use the grenades."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:303
msgid ""
"Firstly, open up ``Player.tscn`` and expand the node tree until you get to "
"``Rotation_Helper``. Notice how in ``Rotation_Helper`` we have a node called "
"``Grenade_Toss_Pos``. This is where we will be spawning the grenades."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:306
msgid ""
"Also notice how it's slightly rotated on the ``X`` axis, so it's not "
"pointing straight, but rather slightly up. By changing the rotation of "
"``Grenade_Toss_Pos``, you can change the angle at which the grenades are "
"tossed."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:309
msgid ""
"Okay, now let's start making the grenades work with the player. Add the "
"following class variables to ``Player.gd``:"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:319
msgid ""
"``grenade_amounts``: The amount of grenades the player is currently carrying "
"(for each type of grenade)."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:320
msgid ""
"``current_grenade``: The name of the grenade the player is currently using."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:321
msgid "``grenade_scene``: The grenade scene we worked on earlier."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:322
msgid ""
"``sticky_grenade_scene``: The sticky grenade scene we worked on earlier."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:323
msgid ""
"``GRENADE_THROW_FORCE``: The force at which the player will throw the "
"grenades."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:325
msgid "Most of these variables are similar to how we have our weapons set up."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:327
msgid ""
"While it's possible to make a more modular grenade system, I found it was "
"not worth the additional complexity for just two grenades. If you were going "
"to make a more complex FPS with more grenades, you'd likely want to make a "
"system for grenades similar to how we have the weapons set up."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:332
msgid ""
"Now we need to add some code in ``_process_input`` Add the following to "
"``_process_input``:"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:364
msgid ""
"Firstly, we check to see if the ``change_grenade`` action has just been "
"pressed. If it has, we then check to see which grenade the player is "
"currently using. Based on the name of the grenade the player is currently "
"using, we change ``current_grenade`` to the opposite grenade name."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:367
msgid ""
"Next we check to see if the ``fire_grenade`` action has just been pressed. "
"If it has, we then check to see if the player has more than ``0`` grenades "
"for the current grenade type selected."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:370
msgid ""
"If the player has more than ``0`` grenades, we then remove one from the "
"grenade amounts for the current grenade. Then, based on the grenade the "
"player is currently using, we instance the proper grenade scene and assign "
"it to ``grenade_clone``."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:373
msgid ""
"Next we add ``grenade_clone`` as a child of the node at the root and set its "
"global :ref:`Transform <class_Transform>` to ``Grenade_Toss_Pos``'s global :"
"ref:`Transform <class_Transform>`. Finally, we apply an impulse to the "
"grenade so that it is launched forward, relative to the ``Z`` directional "
"vector of ``grenade_clone``'s."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:379
msgid ""
"Now the player can use both types of grenades, but there are still a few "
"things we should probably add before we move on to adding the other things."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:381
msgid ""
"We still need a way to show the player how many grenades are left, and we "
"should probably add a way to get more grenades when the player picks up ammo."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:383
msgid ""
"Firstly, let's change some of the code in ``Player.gd`` to show how many "
"grenades are left. Change ``process_UI`` to the following:"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:399
msgid "Now we'll show how many grenades the player has left in the UI."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:401
msgid ""
"While we're still in ``Player.gd``, let's add a function to add grenades to "
"the player. Add the following function to ``Player.gd``:"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:409
msgid ""
"Now we can add a grenade using ``add_grenade``, and it will automatically be "
"clamped to a maximum of ``4`` grenades."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:411
msgid ""
"You can change the ``4`` to a constant if you want. You'd need to make a new "
"global constant, something like ``MAX_GRENADES``, and then change the clamp "
"from ``clamp(grenade_amounts[current_grenade], 0, 4)`` to "
"``clamp(grenade_amounts[current_grenade], 0, MAX_GRENADES)``"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:414
msgid ""
"If you do not want to limit how many grenades the player can carry, remove "
"the line that clamps the grenades altogether!"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:416
msgid ""
"Now we have a function to add grenades, let's open up ``AmmoPickup.gd`` and "
"use it!"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:418
msgid ""
"Open up ``AmmoPickup.gd`` and go to the ``trigger_body_entered`` function. "
"Change it to the following:"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:433
msgid ""
"Now we are also checking to see if the body has the ``add_grenade`` "
"function. If it does, we call it like we call ``add_ammo``."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:435
msgid ""
"You may have noticed we are using a new constant we have not defined yet, "
"``GRENADE_AMOUNTS``. Let's add it! Add the following class variable to "
"``AmmoPickup.gd`` with the other class variables:"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:442
msgid "``GRENADE_AMOUNTS``: The amount of grenades each pickup contains."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:444
msgid ""
"Notice how the second element in ``GRENADE_AMOUNTS`` is ``0``. This is so "
"the small ammo pickup does not give the player any additional grenades."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:449
msgid "Now you should be able to throw grenades! Go give it a try!"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:453
msgid "Adding the ability to grab and throw RigidBody nodes to the player"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:455
msgid ""
"Next, let's give the player the ability to pick up and throw :ref:`RigidBody "
"<class_RigidBody>` nodes."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:466
msgid ""
"``grabbed_object``: A variable to hold the grabbed :ref:`RigidBody "
"<class_RigidBody>` node."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:467
msgid ""
"``OBJECT_THROW_FORCE``: The force with which the player throws the grabbed "
"object."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:468
msgid ""
"``OBJECT_GRAB_DISTANCE``: The distance away from the camera at which the "
"player holds the grabbed object."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:469
msgid ""
"``OBJECT_GRAB_RAY_DISTANCE``: The distance the :ref:`Raycast "
"<class_Raycast>` goes. This is the player's grab distance."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:471
msgid ""
"With that done, all we need to do is add some code to ``process_input``:"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:509
#: ../../docs/tutorials/3d/fps_tutorial/part_six.rst:354
msgid "Let's go over what's happening."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:511
msgid ""
"Firstly, we check to see if the action pressed is the ``fire`` action, and "
"that the player is using the ``UNARMED`` 'weapon'. This is because we only "
"want the player to be able to pick up and throw objects when the player is "
"not using any weapons. This is a design choice, but I feel it gives "
"``UNARMED`` a use."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:515
msgid "Next we check to see whether or not ``grabbed_object`` is ``null``."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:519
msgid ""
"If ``grabbed_object`` is ``null``, we want to see if we can pick up a :ref:"
"`RigidBody <class_RigidBody>`."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:521
msgid ""
"We first get the direct space state from the current :ref:`World "
"<class_World>`. This is so we can cast a ray entirely from code, instead of "
"having to use a :ref:`Raycast <class_Raycast>` node."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:524
msgid ""
"see :ref:`Ray-casting <doc_ray-casting>` for more information on raycasting "
"in Godot."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:526
msgid ""
"Then we get the center of the screen by dividing the current :ref:`Viewport "
"<class_Viewport>` size in half. We then get the ray's origin point and end "
"point using ``project_ray_origin`` and ``project_ray_normal`` from the "
"camera. If you want to know more about how these functions work, see :ref:"
"`Ray-casting <doc_ray-casting>`."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:529
msgid ""
"Next we send the ray into the space state and see if it gets a result. We "
"add the player and the knife's :ref:`Area <class_Area>` as two exceptions so "
"the player cannot carry themselves or the knife's collision :ref:`Area "
"<class_Area>`."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:532
msgid ""
"Then we check to see if we got a result back from the ray. If no object has "
"collided with the ray, an empty Dictionary will be returned. If the "
"Dictionary is not empty (i.e. at least one object has collided), we then see "
"if the collider the ray collided with is a :ref:`RigidBody "
"<class_RigidBody>`."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:534
msgid ""
"If the ray collided with a :ref:`RigidBody <class_RigidBody>`, we set "
"``grabbed_object`` to the collider the ray collided with. We then set the "
"mode on the :ref:`RigidBody <class_RigidBody>` we collided with to "
"``MODE_STATIC`` so it doesn't move in our hands."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:537
msgid ""
"Finally, we set the grabbed :ref:`RigidBody <class_RigidBody>`'s collision "
"layer and collision mask to ``0``. This will make the grabbed :ref:"
"`RigidBody <class_RigidBody>` have no collision layer or mask, which means "
"it will not be able to collide with anything as long as we are holding it."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:542
msgid ""
"If ``grabbed_object`` is not ``null``, then we need to throw the :ref:"
"`RigidBody <class_RigidBody>` the player is holding."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:544
msgid ""
"We first set the mode of the :ref:`RigidBody <class_RigidBody>` we are "
"holding to ``MODE_RIGID``."
msgstr ""
"먼저 :ref:`RigidBody <class_RigidBody>`\\ 의 모드를 ``MODE_RIGID``\\ 로 설정"
"합니다."

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:546
msgid ""
"This is making a rather large assumption that all the rigid bodies will be "
"using ``MODE_RIGID``. While that is the case for this tutorial series, that "
"may not be the case in other projects."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:549
msgid ""
"If you have rigid bodies with different modes, you may need to store the "
"mode of the :ref:`RigidBody <class_RigidBody>` you have picked up into a "
"class variable so you can change it back to the mode it was in before you "
"picked it up."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:552
msgid ""
"Then we apply an impulse to send it flying forward. We send it flying in the "
"direction the camera is facing, using the force we set in the "
"``OBJECT_THROW_FORCE`` variable."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:554
msgid ""
"We then set the grabbed :ref:`RigidBody <class_RigidBody>`'s collision layer "
"and mask to ``1``, so it can collide with anything on layer ``1`` again."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:556
msgid ""
"This is, once again, making a rather large assumption that all the rigid "
"bodies will be only on collision layer ``1``, and all collision masks will "
"be on layer ``1``. If you are using this script in other projects, you may "
"need to store the collision layer/mask of the :ref:`RigidBody "
"<class_RigidBody>` in a variable before you change them to ``0``, so you "
"would have the original collision layer/mask to set for them when you are "
"reversing the process."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:559
msgid ""
"Finally, we set ``grabbed_object`` to ``null`` since the player has "
"successfully thrown the held object."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:563
msgid ""
"The last thing we do is check to see whether or not ``grabbed_object`` is "
"equal to ``null``, outside all of the grabbing/throwing related code."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:565
msgid ""
"While technically not input related, it's easy enough to place the code "
"moving the grabbed object here because it's only two lines, and then all of "
"the grabbing/throwing code is in one place"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:568
msgid ""
"If the player is holding an object, we set its global position to the "
"camera's position plus ``OBJECT_GRAB_DISTANCE`` in the direction the camera "
"is facing."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:572
msgid ""
"Before we test this, we need to change something in ``_physics_process``. "
"While the player is holding an object, we do not want the player to be able "
"to change weapons or reload, so change ``_physics_process`` to the following:"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:589
msgid "Now the player cannot change weapons or reload while holding an object."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:591
msgid ""
"Now you can grab and throw RigidBody nodes while you're in the ``UNARMED`` "
"state! Go give it a try!"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:594
msgid "Adding a turret"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:596
msgid "Next, let's make a turret to shoot the player!"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:598
msgid ""
"Open up ``Turret.tscn``. Expand ``Turret`` if it's not already expanded."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:600
msgid ""
"Notice how the turret is broken up into several parts: ``Base``, ``Head``, "
"``Vision_Area``, and a ``Smoke`` :ref:`Particles <class_Particles>` node."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:602
msgid ""
"Open up ``Base`` and you'll find it's a :ref:`StaticBody <class_StaticBody>` "
"and a mesh. Open up ``Head`` and you'll find there are several meshes, a :"
"ref:`StaticBody <class_StaticBody>` and a :ref:`Raycast <class_Raycast>` "
"node."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:605
msgid ""
"One thing to note with the ``Head`` is that the raycast will be where the "
"turret's bullets will fire from if we are using raycasting. We also have two "
"meshes called ``Flash`` and ``Flash_2``. These will be the muzzle flash that "
"briefly shows when the turret fires."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:608
msgid ""
"``Vision_Area`` is an :ref:`Area <class_Area>` we'll use as the turret's "
"ability to see. When something enters ``Vision_Area``, we'll assume the "
"turret can see it."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:610
msgid ""
"``Smoke`` is a :ref:`Particles <class_Particles>` node that will play when "
"the turret is destroyed and repairing."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:614
msgid ""
"Now that we've looked at how the scene is set up, lets start writing the "
"code for the turret. Select ``Turret`` and create a new script called "
"``Turret.gd``. Add the following to ``Turret.gd``:"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:780
msgid ""
"This is quite a bit of code, so let's break it down function by function. "
"Let's first look at the class variables:"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:782
msgid ""
"``use_raycast``: An exported boolean so we can change whether the turret "
"uses objects or raycasting for bullets."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:783
msgid ""
"``TURRET_DAMAGE_BULLET``: The amount of damage a single bullet scene does."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:784
msgid ""
"``TURRET_DAMAGE_RAYCAST``: The amount of damage a single :ref:`Raycast "
"<class_Raycast>` bullet does."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:785
msgid ""
"``FLASH_TIME``: The amount of time (in seconds) the muzzle flash meshes are "
"visible."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:786
msgid ""
"``flash_timer``: A variable for tracking how long the muzzle flash meshes "
"have been visible."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:787
msgid "``FIRE_TIME``: The amount of time (in seconds) needed to fire a bullet."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:788
msgid ""
"``fire_timer``: A variable for tracking how much time has passed since the "
"turret last fired."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:789
msgid "``node_turret_head``: A variable to hold the ``Head`` node."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:790
msgid ""
"``node_raycast``: A variable to hold the :ref:`Raycast <class_Raycast>` node "
"attached to the turret's head."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:791
msgid ""
"``node_flash_one``: A variable to hold the first muzzle flash :ref:"
"`MeshInstance <class_MeshInstance>`."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:792
msgid ""
"``node_flash_two``: A variable to hold the second muzzle flash :ref:"
"`MeshInstance <class_MeshInstance>`."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:793
msgid "``ammo_in_turret``: The amount of ammo currently in the turret."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:794
msgid "``AMMO_IN_FULL_TURRET``: The amount of ammo in a full turret."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:795
msgid "``AMMO_RELOAD_TIME``: The amount of time it takes the turret to reload."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:796
msgid ""
"``ammo_reload_timer``: A variable for tracking how long the turret has been "
"reloading."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:797
msgid "``current_target``: The turret's current target."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:798
msgid ""
"``is_active``: A variable for tracking whether the turret is able to fire at "
"the target."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:799
msgid ""
"``PLAYER_HEIGHT``: The amount of height we're adding to the target so we're "
"not shooting at its feet."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:800
msgid "``smoke_particles``: A variable to hold the smoke particles node."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:801
msgid "``turret_health``: The amount of health the turret currently has."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:802
msgid "``MAX_TURRET_HEALTH``: The amount of health a fully healed turret has."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:803
msgid ""
"``DESTROYED_TIME``: The amount of time (in seconds) it takes for a destroyed "
"turret to repair itself."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:804
msgid ""
"``destroyed_timer``: A variable for tracking the amount of time a turret has "
"been destroyed."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:805
msgid ""
"``bullet_scene``: The bullet scene the turret fires (same scene as the "
"player's pistol)"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:807
msgid "Whew, that's quite a few class variables!"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:811
msgid "Let's go through ``_ready`` next."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:813
msgid ""
"Firstly, we get the vision area and connect the ``body_entered`` and "
"``body_exited`` signals to ``body_entered_vision`` and "
"``body_exited_vision``, respectively."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:815
msgid ""
"We then get all the nodes and assign them to their respective variables."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:817
msgid ""
"Next, we add some exceptions to the :ref:`Raycast <class_Raycast>` so the "
"turret cannot hurt itself."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:819
msgid ""
"Then we make both flash meshes invisible at start, since we are not going to "
"be firing during ``_ready``."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:821
msgid ""
"We then get the smoke particles node and assign it to the "
"``smoke_particles`` variable. We also set ``emitting`` to ``false`` to "
"ensure the particles are not emitting until the turret is broken."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:824
msgid ""
"Finally, we set the turret's health to ``MAX_TURRET_HEALTH`` so it starts at "
"full health."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:828
msgid "Now let's go through ``_physics_process``."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:830
msgid ""
"Firstly, we check whether the turret is active. If the turret is active, we "
"want to process the firing code."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:832
msgid ""
"Next, if ``flash_timer`` is greater than zero, meaning the flash meshes are "
"visible, we want to remove delta from ``flash_timer``. If ``flash_timer`` "
"gets to zero or less after we've subtracted ``delta``, we want to hide both "
"of the flash meshes."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:836
msgid ""
"Next, we check whether the turret has a target. If the turret has a target, "
"we make the turret head look at it, adding ``PLAYER_HEIGHT`` so it is not "
"aiming at the player's feet."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:839
msgid ""
"We then check whether the turret's health is greater than zero. If it is, we "
"then check whether there is ammo in the turret."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:841
msgid ""
"If there is, we then check whether ``fire_timer`` is greater than zero. If "
"it is, the turret cannot fire and we need to remove ``delta`` from "
"``fire_timer``. If ``fire_timer`` is less than or equal to zero, the turret "
"can fire a bullet, so we call the ``fire_bullet`` function."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:844
msgid ""
"If there isn't any ammo in the turret, we check whether "
"``ammo_reload_timer`` is greater than zero. If it is, we subtract ``delta`` "
"from ``ammo_reload_timer``. If ``ammo_reload_timer`` is less than or equal "
"to zero, we set ``ammo_in_turret`` to ``AMMO_IN_FULL_TURRET`` because the "
"turret has waited long enough to refill its ammo."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:848
msgid ""
"Next, we check whether the turret's health is less than or equal to ``0`` "
"outside of whether it is active or not. If the turret's health is zero or "
"less, we then check whether ``destroyed_timer`` is greater than zero. If it "
"is, we subtract ``delta`` from ``destroyed_timer``."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:851
msgid ""
"If ``destroyed_timer`` is less than or equal to zero, we set "
"``turret_health`` to ``MAX_TURRET_HEALTH`` and stop emitting smoke particles "
"by setting ``smoke_particles.emitting`` to ``false``."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:856
msgid "Next let's go through ``fire_bullet``."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:858
msgid "Firstly, we check whether the turret is using a raycast."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:860
msgid ""
"The code for using a raycast is almost entirely the same as the code in the "
"rifle from :ref:`doc_fps_tutorial_part_two`, so I'm only going to go over it "
"briefly."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:863
msgid ""
"We first make the raycast look at the target, ensuring the raycast will hit "
"the target if nothing is in the way. We then force the raycast to update so "
"we get a frame perfect collision check. We then check whether the raycast "
"has collided with anything. If it has, we then check whether the collided "
"body has the ``bullet_hit`` method. If it does, we call it and pass in the "
"damage a single raycast bullet does along with the raycast's transform. We "
"then subtract ``1`` from ``ammo_in_turret``."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:868
msgid ""
"If the turret is not using a raycast, we spawn a bullet object instead. This "
"code is almost entirely the same as the code in the pistol from :ref:"
"`doc_fps_tutorial_part_two`, so like with the raycast code, I'm only going "
"to go over it briefly."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:871
msgid ""
"We first make a bullet clone and assign it to ``clone``. We then add that as "
"a child of the root node. We set the bullet's global transform to the barrel "
"end, scale it up since it's too small, and set its damage and speed using "
"the turret's constant class variables. We then subtract ``1`` from "
"``ammo_in_turret``."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:875
msgid ""
"Then, regardless of which bullet method we used, we make both of the muzzle "
"flash meshes visible. We set ``flash_timer`` and ``fire_timer`` to "
"``FLASH_TIME`` and ``FIRE_TIME``, respectively. We then check whether the "
"turret has used the last bullet in its ammo. If it has, we set "
"``ammo_reload_timer`` to ``AMMO_RELOAD_TIME`` so the turret reloads."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:881
msgid ""
"Let's look at ``body_entered_vision`` next, and thankfully it is rather "
"short."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:883
msgid ""
"We first check whether the turret currently has a target by checking if "
"``current_target`` is equal to ``null``. If the turret does not have a "
"target, we then check whether the body that has just entered the vision :ref:"
"`Area <class_Area>` is a :ref:`KinematicBody <class_KinematicBody>`."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:886
msgid ""
"We're assuming the turret should only fire at :ref:`KinematicBody "
"<class_KinematicBody>` nodes since that is what the player is using."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:888
msgid ""
"If the body that just entered the vision :ref:`Area <class_Area>` is a :ref:"
"`KinematicBody <class_KinematicBody>`, we set ``current_target`` to the "
"body, and set ``is_active`` to ``true``."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:893
msgid "Now let's look at ``body_exited_vision``."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:895
msgid ""
"Firstly, we check whether the turret has a target. If it does, we then check "
"whether the body that has just left the turret's vision :ref:`Area "
"<class_Area>` is the turret's target."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:898
msgid ""
"If the body that has just left the vision :ref:`Area <class_Area>` is the "
"turret's current target, we set ``current_target`` to ``null``, set "
"``is_active`` to ``false``, and reset all the variables related to firing "
"the turret since the turret no longer has a target to fire at."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:905
msgid ""
"We first subtract however much damage the bullet causes from the turret's "
"health."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:907
msgid ""
"Then, we check whether the turret has been destroyed (health being zero or "
"less). If the turret is destroyed, we start emitting the smoke particles and "
"set ``destroyed_timer`` to ``DESTROYED_TIME`` so the turret has to wait "
"before being repaired."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:912
msgid ""
"Whew, with all of that done and coded, we only have one last thing to do "
"before the turret is ready for use. Open up ``Turret.tscn`` if it's not "
"already open and select one of the :ref:`StaticBody <class_StaticBody>` "
"nodes from either ``Base`` or ``Head``. Create a new script called "
"``TurretBodies.gd`` and attach it to whichever :ref:`StaticBody "
"<class_StaticBody>` you have selected."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:916
msgid "Add the following code to ``TurretBodies.gd``:"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:931
msgid ""
"All this code does is call ``bullet_hit`` on whatever node to which "
"``path_to_turret_root`` leads. Go back to the editor and assign the :ref:"
"`NodePath <class_NodePath>` to the ``Turret`` node."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:934
msgid ""
"Now select the other :ref:`StaticBody <class_StaticBody>` node (either in "
"``Body`` or ``Head``) and assign ``TurretBodies.gd`` script to it. Once the "
"script is attached, assign again the :ref:`NodePath <class_NodePath>` to the "
"``Turret`` node."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:939
msgid ""
"The last thing we need to do is add a way for the player to be hurt. Since "
"all the bullets use the ``bullet_hit`` function, we need to add that "
"function to the player."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:941
msgid "Open ``Player.gd`` and add the following:"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:948
msgid ""
"With all that done, you should have fully operational turrets! Go place a "
"few in one/both/all of the scenes and give them a try!"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:955
msgid ""
"Now you can pick up :ref:`RigidBody <class_RigidBody>` nodes and throw "
"grenades. We now also have turrets to fire at the player."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:957
msgid ""
"In :ref:`doc_fps_tutorial_part_six`, we're going to add a main menu and a "
"pause menu, add a respawn system for the player, and change/move the sound "
"system so we can use it from any script."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:962
msgid ""
"You can download the finished project for this part here: :download:"
"`Godot_FPS_Part_5.zip <files/Godot_FPS_Part_5.zip>`"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_six.rst:4
msgid "Part 6"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_six.rst:9
msgid ""
"In this part, we're going to add a main menu and pause menu, add a respawn "
"system for the player, and change/move the sound system so we can use it "
"from any script."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_six.rst:12
msgid ""
"This is the last part of the FPS tutorial; by the end of this, you will have "
"a solid base to build amazing FPS games with Godot!"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_six.rst:16
msgid ""
"You are assumed to have finished :ref:`doc_fps_tutorial_part_five` before "
"moving on to this part of the tutorial. The finished project from :ref:"
"`doc_fps_tutorial_part_five` will be the starting project for part 6"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_six.rst:22
msgid "Adding the main menu"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_six.rst:24
msgid ""
"Firstly, open up ``Main_Menu.tscn`` and take a look at how the scene is set "
"up."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_six.rst:26
msgid ""
"The main menu is broken up into three different panels, each representing a "
"different 'screen' of our main menu."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_six.rst:29
msgid ""
"The ``Background_Animation`` node is just so the background of the menu is a "
"bit more interesting than a solid color. It's a camera looking around the "
"skybox, nothing fancy."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_six.rst:32
msgid ""
"Feel free to expand all the nodes and see how they're set up. Remember to "
"keep only ``Start_Menu`` visible when you're done, as that's the screen we "
"want to show first when we enter the main menu."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_six.rst:35
msgid ""
"Select ``Main_Menu`` (the root node) and create a new script called "
"``Main_Menu.gd``. Add the following:"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_six.rst:122
msgid ""
"Most of the code here relates to making UIs, which is outside of the purpose "
"of this tutorial series. **We're only going to look at the UI related code "
"briefly.**"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_six.rst:125
msgid ""
"See :ref:`doc_ui_main_menu` and the tutorials following for better ways to "
"make GUIs and UIs!"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_six.rst:127
msgid "Let's look at the class variables first."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_six.rst:129
msgid ""
"``start_menu``: A variable to hold the ``Start_Menu`` :ref:`Panel "
"<class_Panel>`."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_six.rst:130
msgid ""
"``level_select_menu``: A variable to hold the ``Level_Select_Menu`` :ref:"
"`Panel <class_Panel>`."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_six.rst:131
msgid ""
"``options_menu``: A variable to hold the ``Options_Menu`` :ref:`Panel "
"<class_Panel>`."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_six.rst:132
msgid ""
"``testing_area_scene``: The path to the ``Testing_Area.tscn`` file, so we "
"can change to it from this scene."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_six.rst:133
msgid ""
"``space_level_scene``: The path to the ``Space_Level.tscn`` file, so we can "
"change to it from this scene."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_six.rst:134
msgid ""
"``ruins_level_scene``: The path to the ``Ruins_Level.tscn`` file, so we can "
"change to it from this scene."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_six.rst:136
msgid ""
"You'll have to set the paths to the correct files in the editor before "
"testing this script! Otherwise it will not work!"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_six.rst:140
msgid "Now let's go over ``_ready``"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_six.rst:142
msgid ""
"Firstly, we get all the :ref:`Panel <class_Panel>` nodes and assign them to "
"the proper variables."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_six.rst:144
msgid ""
"Next, we connect all the buttons ``pressed`` signals to their respective "
"``[panel_name_here]_button_pressed`` functions."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_six.rst:146
msgid ""
"We then set the mouse mode to ``MOUSE_MODE_VISIBLE`` to ensure whenever the "
"player returns to this scene, the mouse will be visible."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_six.rst:148
msgid ""
"Then we get a singleton, called ``Globals``. We then set the values for the :"
"ref:`HSlider <class_HSlider>` nodes so their values line up with the mouse "
"and joypad sensitivity in the singleton."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_six.rst:151
msgid ""
"We have not made the ``Globals`` singleton yet, so don't worry! We're going "
"to make it soon!"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_six.rst:155
msgid ""
"In ``start_menu_button_pressed``, we check to see which button is pressed."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_six.rst:157
msgid ""
"Based on the button pressed, we either change the currently visible panel, "
"quit the application, or open the Godot website."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_six.rst:161
msgid ""
"In ``level_select_menu_button_pressed``, we check to see which button is "
"pressed."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_six.rst:163
#: ../../docs/tutorials/3d/fps_tutorial/part_six.rst:175
msgid ""
"If the ``back`` button has been pressed, we change the currently visible "
"panels to return to the main menu."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_six.rst:165
msgid ""
"If one of the scene changing buttons is pressed, we fist call "
"``set_mouse_and_joypad_sensitivity`` so the singleton (``Globals.gd``) has "
"the values from the :ref:`HSlider <class_HSlider>` nodes. Then, we tell the "
"singleton to change nodes using its ``load_new_scene`` function, passing in "
"the file path of the scene the player has selected."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_six.rst:169
msgid "Don't worry about the singleton, we'll get there soon!"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_six.rst:173
msgid ""
"In ``options_menu_button_pressed``, we check to see which button is pressed."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_six.rst:177
msgid ""
"If the ``fullscreen`` button is pressed, we toggle the :ref:`OS "
"<class_OS>`'s full screen mode by setting it to the flipped version of its "
"current value."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_six.rst:179
msgid ""
"If the ``vsync`` button is pressed, we set the :ref:`OS <class_OS>`'s Vsync "
"based on the state of the Vsync check button."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_six.rst:183
msgid "Finally, lets take a look at ``set_mouse_and_joypad_sensitivity``."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_six.rst:185
msgid ""
"Firstly, we get the ``Globals`` singleton and assign it to a local variable."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_six.rst:187
msgid ""
"We then set the ``mouse_sensitivity`` and ``joypad_sensitivity`` variables "
"to the values in their respective :ref:`HSlider <class_HSlider>` node "
"counterparts."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_six.rst:190
msgid "Making the ``Globals`` singleton"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_six.rst:192
msgid ""
"Now, for all this to work, we need to create the ``Globals`` singleton. Make "
"a new script in the ``Script`` tab and call it ``Globals.gd``."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_six.rst:194
msgid ""
"To make the ``Globals`` singleton, go to the ``Script`` tab in the editor, "
"then click ``New`` and a ``Create Script`` box will appear, leave everything "
"unchanged except for the ``Path`` where you need to insert the script's name "
"``Globals.gd``."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_six.rst:196
msgid "Add the following to ``Globals.gd``."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_six.rst:211
msgid ""
"As you can see, it's quite small and simple. As this part progresses, we "
"will keep adding more complex logic to ``Globals.gd``, but for now, all it "
"is doing is holding two class variables, and abstract defining how we change "
"scenes."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_six.rst:214
msgid ""
"``mouse_sensitivity``: The current sensitivity for our mouse, so we can load "
"it in ``Player.gd``."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_six.rst:215
msgid ""
"``joypad_sensitivity``: The current sensitivity for our joypad, so we can "
"load it in ``Player.gd``."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_six.rst:217
msgid ""
"Right now, all we will be using ``Globals.gd`` for is a way to carry "
"variables across scenes. Because the sensitivities of our mouse and joypad "
"are stored in ``Globals.gd``, any changes we make in one scene (like in "
"``Options_Menu``) will affect the sensitivity for the player."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_six.rst:220
msgid ""
"All we're doing in ``load_new_scene`` is calling :ref:`SceneTree "
"<class_SceneTree>`'s ``change_scene`` function, passing in the scene path "
"given in ``load_new_scene``."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_six.rst:222
msgid ""
"That's all the code needed for ``Globals.gd`` right now! Before we can test "
"the main menu, we first need to set ``Globals.gd`` as an autoload script."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_six.rst:224
msgid "Open up the ``Project Settings`` and click the ``AutoLoad`` tab."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_six.rst:228
msgid ""
"Then select the path to ``Globals.gd`` in the ``Path`` field by clicking the "
"button (``..``) beside it. Make sure the name in the ``Node Name`` field is "
"``Globals``. If you have everything like in the picture above, then press "
"``Add``!"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_six.rst:231
msgid ""
"This will make ``Globals.gd`` a singleton/autoload script, which will allow "
"us to access it from any script, in any scene."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_six.rst:233
msgid ""
"For more information on singleton/autoload scripts, see :ref:"
"`doc_singletons_autoload`."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_six.rst:235
msgid ""
"Now that ``Globals.gd`` is a singleton/autoload script, you can test the "
"main menu!"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_six.rst:237
msgid ""
"You may want to change the main scene from ``Testing_Area.tscn`` to "
"``Main_Menu.tscn`` so when we export the game the player will start at the "
"main menu. You can do this through the ``Project Settings``, under the "
"``General`` tab. Then in the ``Application`` category, click the ``Run`` "
"subcategory and you can change the main scene by changing the value in "
"``Main Scene``."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_six.rst:241
msgid ""
"You'll have to set the paths to the correct files in ``Main_Menu`` in the "
"editor before testing the main menu! Otherwise you will not be able to "
"change scenes from the level select menu/screen."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_six.rst:245
msgid "Adding the debug menu"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_six.rst:247
msgid ""
"Now, let's add a simple debugging scene so we can track things like FPS "
"(Frames Per Second) in-game. Open up ``Debug_Display.tscn``."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_six.rst:249
msgid ""
"You can see it's a :ref:`Panel <class_Panel>` positioned in the top right "
"corner of the screen. It has three :ref:`Labels <class_Label>`, one for "
"displaying the FPS at which the game is running, one for showing on what OS "
"the game is running, and a label for showing with which Godot version the "
"game is running."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_six.rst:252
msgid ""
"Let's add the code needed to fill these :ref:`Labels <class_Label>`. Select "
"``Debug_Display`` and create a new script called ``Debug_Display.gd``. Add "
"the following:"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_six.rst:265
msgid "Let's go over what this script does."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_six.rst:269
msgid ""
"In ``_ready``, we set the ``OS_Label``'s text to the name provided by :ref:"
"`OS <class_OS>` using the ``get_name`` function. This will return the name "
"of the OS (or Operating System) for which Godot was compiled. For example, "
"when you are running Windows, it will return ``Windows``, while when you are "
"running Linux, it will return ``X11``."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_six.rst:273
msgid ""
"Then, we set the ``Engine_Label``'s text to the version info provided by "
"``Engine.get_version_info``. ``Engine.get_version_info`` returns a "
"dictionary full of useful information about the version of Godot which is "
"currently running. We only care about the string version, for this label at "
"least, so we get the string and assign that as the ``text`` in "
"``Engine_Label``. See :ref:`Engine <class_Engine>` for more information on "
"the values ``get_version_info`` returns."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_six.rst:277
msgid ""
"In ``_process``, we set the text of the ``FPS_Label`` to ``Engine."
"get_frames_per_second``, but because ``get_frames_per_second`` returns an "
"integer, we have to cast it to a string using ``str`` before we can add it "
"to the :ref:`Label <class_Label>`."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_six.rst:282
msgid ""
"Now let's jump back to ``Main_Menu.gd`` and change the following in "
"``options_menu_button_pressed``:"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_six.rst:289
msgid "to this instead:"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_six.rst:296
msgid ""
"This will call a new function called ``set_debug_display`` in our singleton, "
"so let's add that next!"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_six.rst:300
#: ../../docs/tutorials/3d/fps_tutorial/part_six.rst:391
msgid "Open up ``Globals.gd`` and add the following class variables:"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_six.rst:314
msgid ""
"``canvas_layer``: A canvas layer so the GUI/UI created in ``Globals.gd`` is "
"always drawn on top."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_six.rst:315
msgid "``DEBUG_DISPLAY``: The debug display scene we worked on earlier."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_six.rst:316
msgid ""
"``debug_display``: A variable to hold the debug display when/if there is one."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_six.rst:318
msgid ""
"Now that we have the class variables defined, we need to add a few lines to "
"``_ready`` so ``Globals.gd`` will have a canvas layer to use (which we will "
"store in ``canvas_layer``). Change ``_ready`` to the following:"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_six.rst:327
msgid ""
"Now in ``_ready``, we create a new canvas layer, assign it to "
"``canvas_layer`` and add it as a child. Because ``Globals.gd`` is an "
"autoload/singleton, Godot will make a :ref:`Node <class_Node>` when the game "
"is launched, and it will have ``Globals.gd`` attached to it. Since Godot "
"makes a :ref:`Node <class_Node>`, we can treat ``Globals.gd`` like any other "
"node with regard to adding/removing children nodes."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_six.rst:331
msgid ""
"The reason we're adding a :ref:`CanvasLayer <class_CanvasLayer>` is so all "
"our GUI and UI nodes we instance/spawn in ``Globals.gd`` are always drawn on "
"top of everything else."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_six.rst:334
msgid ""
"When adding nodes to a singleton/autoload, you have to be careful not to "
"lose reference to any of the child nodes. This is because nodes will not be "
"freed/destroyed when you change the active scene, meaning you can run into "
"memory problems if you are instancing/spawning lots of nodes and you are not "
"freeing them."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_six.rst:340
msgid "Now we need to add ``set_debug_display`` to ``Globals.gd``:"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_six.rst:356
msgid ""
"First we check to see if ``Globals.gd`` is trying to turn on the debug "
"display, or turn it off."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_six.rst:358
msgid ""
"If ``Globals.gd`` is turning off the display, we then check to see if "
"``debug_display`` is not equal to ``null``. If ``debug_display`` is not "
"equal to ``null``, then ``Globals.gd`` must have a debug display currently "
"active. If ``Globals.gd`` has a debug display active, we free it using "
"``queue_free`` and then assign ``debug_display`` to ``null``."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_six.rst:361
msgid ""
"If ``Globals.gd`` is turning on the display, we then check to make sure "
"``Globals.gd`` do not already have a debug display active. We do this by "
"making sure ``debug_display`` is equal to ``null``. If ``debug_display`` is "
"``null``, we instance a new ``DEBUG_DISPLAY_SCENE``, and add it as a child "
"of ``canvas_layer``."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_six.rst:367
msgid ""
"With that done, we can now toggle the debug display on and off by switching "
"the :ref:`CheckButton <class_CheckButton>` in the ``Options_Menu`` panel. Go "
"give it a try!"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_six.rst:369
msgid ""
"Notice how the debug display stays even when you change scenes from the "
"``Main_Menu.tscn`` to another scene (like ``Testing_Area.tscn``). This is "
"the beauty of instancing/spawning nodes in a singleton/autoload and adding "
"them as children to the singleton/autoload. Any of the nodes added as "
"children of the singleton/autoload will stay for as long as the game is "
"running, without any additional work on our part!"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_six.rst:374
msgid "Adding a pause menu"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_six.rst:376
msgid ""
"Let's add a pause menu so we can return to the main menu when we press the "
"``ui_cancel`` action."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_six.rst:378
msgid "Open up ``Pause_Popup.tscn``."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_six.rst:380
msgid ""
"Notice how the root node in ``Pause_Popup`` is a :ref:`WindowDialog "
"<class_WindowDialog>`; :ref:`WindowDialog <class_WindowDialog>` inherits "
"from :ref:`Popup <class_Popup>`, which means :ref:`WindowDialog "
"<class_WindowDialog>` can act like a popup."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_six.rst:383
msgid ""
"Select ``Pause_Popup`` and scroll down all the way till you get to the "
"``Pause`` menu in the inspector. Notice how the pause mode is set to "
"``process`` instead of ``inherit`` like it is normally set by default. This "
"makes it so it will continue to process even when the game is paused, which "
"we need in order to interact with the UI elements."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_six.rst:387
msgid ""
"Now that we've looked at how ``Pause_Popup.tscn`` is set up, let's write the "
"code to make it work. Normally, we'd attach a script to the root node of the "
"scene, ``Pause_Popup`` in this case, but since we'll need to receive a "
"couple of signals in ``Globals.gd``, we'll write all the code for the popup "
"there."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_six.rst:399
msgid "``MAIN_MENU_PATH``: The path to the main menu scene."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_six.rst:400
msgid "``POPUP_SCENE``: The pop up scene we looked at earlier."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_six.rst:401
msgid "``popup``: A variable to hold the pop up scene."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_six.rst:403
msgid ""
"Now we need to add ``_process`` to ``Globals.gd`` so it can respond when the "
"``ui_cancel`` action is pressed. Add the following to ``_process``:"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_six.rst:428
msgid ""
"Firstly, we check to see if the ``ui_cancel`` action is pressed. Then, we "
"check to make sure ``Globals.gd`` does not already have a ``popup`` open by "
"checking to see if ``popup`` is equal to ``null``."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_six.rst:431
msgid ""
"If ``Globals.gd`` do not have a pop-up open, we instance ``POPUP_SCENE`` and "
"assign it to ``popup``."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_six.rst:433
msgid ""
"We then get the quit button and assign its ``pressed`` signal to "
"``popup_quit``, which we will be adding shortly."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_six.rst:435
msgid ""
"Next, we assign both the ``popup_hide`` signal from the :ref:`WindowDialog "
"<class_WindowDialog>` and the ``pressed`` signal from the resume button to "
"``popup_closed``, which we will be adding shortly."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_six.rst:438
msgid ""
"Then, we add ``popup`` as a child of ``canvas_layer`` so it's drawn on top. "
"We then tell ``popup`` to pop up at the center of the screen using "
"``popup_centered``."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_six.rst:440
msgid ""
"Next, we make sure the mouse mode is ``MOUSE_MODE_VISIBLE`` so the player "
"can interact with the pop-up. If we did not do this, the player would not be "
"able to interact with the pop up in any scene where the mouse mode is "
"``MOUSE_MODE_CAPTURED``."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_six.rst:443
msgid "Finally, we pause the entire :ref:`SceneTree <class_SceneTree>`."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_six.rst:445
msgid "For more information on pausing in Godot, see :ref:`doc_pausing_games`"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_six.rst:449
msgid ""
"Now, we need to add the functions to which we've connected the signals. "
"Let's add ``popup_closed`` first."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_six.rst:451
#: ../../docs/tutorials/3d/fps_tutorial/part_six.rst:466
msgid "Add the following to ``Globals.gd``:"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_six.rst:462
msgid ""
"``popup_closed`` will resume the game and destroy the pop-up if there is one."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_six.rst:464
msgid ""
"``popup_quit`` is similar, but we're also making sure the mouse is visible "
"and changing scenes to the title screen."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_six.rst:481
msgid ""
"``popup_quit`` will resume the game, set the mouse mode to "
"``MOUSE_MODE_VISIBLE`` to ensure the mouse is visible in the main menu, "
"destroy the pop-up if there is one, and change scenes to the main menu."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_six.rst:486
msgid ""
"Before we're ready to test the pop-up, we should change one thing in "
"``Player.gd``."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_six.rst:488
msgid ""
"Open up ``Player.gd`` and in ``process_input``, change the code for "
"capturing/freeing the cursor to the following:"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_six.rst:490
msgid "Instead of:"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_six.rst:501
msgid "You will leave only:"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_six.rst:509
msgid ""
"Now, instead of capturing/freeing the mouse, we check whether the current "
"mouse mode is ``MOUSE_MODE_VISIBLE``. If it is, we set it back to "
"``MOUSE_MODE_CAPTURED``."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_six.rst:512
msgid ""
"Because the pop-up makes the mouse mode ``MOUSE_MODE_VISIBLE`` whenever you "
"pause, we no longer have to worry about freeing and capturing the cursor in "
"``Player.gd``."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_six.rst:516
msgid ""
"Now the pause menu pop-up is finished. You can now pause at any point in the "
"game and return to the main menu!"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_six.rst:519
msgid "Starting the respawn system"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_six.rst:521
msgid ""
"Since the player can lose all their health, it would be ideal if the player "
"died and respawned too, so let's add that next!"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_six.rst:523
msgid ""
"Firstly, open up ``Player.tscn`` and expand ``HUD``. Notice how there is a :"
"ref:`ColorRect <class_ColorRect>` called ``Death_Screen``. When the player "
"dies, we're going to make ``Death_Screen`` visible, and show them how long "
"they have to wait before the player is able to respawn."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_six.rst:536
msgid "``RESPAWN_TIME``: The amount of time (in seconds) it takes to respawn."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_six.rst:537
msgid "``dead_time``: A variable to track how long the player has been dead."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_six.rst:538
msgid ""
"``is_dead``: A variable to track whether or not the player is currently dead."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_six.rst:539
msgid "``globals``: A variable to hold the ``Globals.gd`` singleton."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_six.rst:543
msgid ""
"We now need to add a couple lines to ``_ready``, so we can use ``Globals."
"gd`` in ``Player.gd``. Add the following to ``_ready``:"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_six.rst:551
msgid ""
"Now we're getting the ``Globals.gd`` singleton and assigning it to "
"``globals``. We also set the player's global position by setting the origin "
"in the player's global :ref:`Transform <class_Transform>` to the position "
"returned by ``globals.get_respawn_position``."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_six.rst:554
msgid "Don't worry, we will be adding ``get_respawn_position`` further below!"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_six.rst:558
msgid ""
"Next, we need to make a few changes to ``_physics_process``. Change "
"``_physics_process`` to the following:"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_six.rst:576
msgid ""
"Now the player will not be processing input or movement input when the "
"player is dead. We are also now calling ``process_respawn``."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_six.rst:578
msgid ""
"The ``if !is_dead:`` expression is equivalent and works in the same way as "
"the expression ``if is_dead == false:``. And by removing the ``!`` sign from "
"the expression we obtain the opposite expression ``if is_dead == true:``. It "
"is just a shorter way of writing the same code functionality."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_six.rst:580
msgid "We have not made ``process_respawn`` yet, so let's change that."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_six.rst:584
msgid "Let's add ``process_respawn``. Add the following to ``Player.gd``:"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_six.rst:643
msgid "Let's go through what this function is doing."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_six.rst:647
msgid ""
"Firstly, we check whether the player has just died by checking if ``health`` "
"is less than or equal to ``0`` and ``is_dead`` is ``false``."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_six.rst:649
msgid ""
"If the player has just died, we disable the collision shapes for the player. "
"We do this to make sure the player is not blocking anything with their dead "
"body."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_six.rst:651
msgid ""
"Next, we set ``changing_weapon`` to ``true`` and set "
"``changing_weapon_name`` to ``UNARMED``. This is so, if the player is using "
"a weapon, it is put away when they dies."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_six.rst:654
msgid ""
"We then make the ``Death_Screen`` :ref:`ColorRect <class_ColorRect>` visible "
"so the player gets a nice grey overlay over everything when they have died. "
"We then make the rest of the UI, the ``Panel`` and ``Crosshair`` nodes, "
"invisible."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_six.rst:657
msgid ""
"Next, we set ``dead_time`` to ``RESPAWN_TIME`` so we can start counting down "
"how long the player has been dead. We also set ``is_dead`` to ``true`` so we "
"know the player has died."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_six.rst:659
msgid ""
"If the player is holding an object when they died, we need to throw it. We "
"first check whether the player is holding an object or not. If the player is "
"holding a object, we throw it using the same code as the throwing code we "
"added in :ref:`doc_fps_tutorial_part_five`."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_six.rst:662
msgid ""
"The ``\\n`` combination from the expression ``You have died\\n`` is a "
"command used to display the text following after it on a new line below. "
"This is always useful when you want to nicely group displayed text in "
"multiple lines so it looks better and is more readable by the players of "
"your games."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_six.rst:666
msgid ""
"Then we check whether the player is dead. If so, we then remove ``delta`` "
"from ``dead_time``."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_six.rst:668
msgid ""
"We then make a new variable called ``dead_time_pretty``, where we convert "
"``dead_time`` to a string, using only the first three characters starting "
"from the left. This gives the player a nice looking string showing how much "
"time the player has left to wait before the player can respawn."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_six.rst:671
msgid ""
"We then change the :ref:`Label <class_Label>` in ``Death_Screen`` to show "
"how much time the player has left."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_six.rst:673
msgid ""
"Next we check to see if the player has waited long enough and can respawn. "
"We do this by checking to see if ``dead_time`` is ``0`` or less."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_six.rst:675
msgid ""
"If the player has waited long enough to respawn, we set the player's "
"position to a new respawn position provided by ``get_respawn_position``."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_six.rst:677
msgid ""
"We then enable both of the player's collision shapes so the player can "
"collide again with the environment."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_six.rst:679
msgid ""
"Next, we make the ``Death_Screen`` invisible and make the rest of the UI, "
"the ``Panel`` and ``Crosshair`` nodes, visible again."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_six.rst:681
msgid ""
"We then go through each weapon and call its ``reset_weapon`` function, which "
"we will add soon."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_six.rst:683
msgid ""
"Then, we reset ``health`` to ``100``, ``grenade_amounts`` to its default "
"values, and change ``current_grenade`` to ``Grenade``. This effectively "
"resets these variables to their default values."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_six.rst:686
msgid "Finally, we set ``is_dead`` to ``false``."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_six.rst:690
msgid ""
"Before we leave ``Player.gd``, we need to add one quick thing to ``_input``. "
"Add the following at the beginning of ``_input``:"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_six.rst:697
msgid "Now, when the player is dead, they cannot look around with the mouse."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_six.rst:700
msgid "Finishing the respawn system"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_six.rst:702
msgid ""
"Firstly, let's open ``Weapon_Pistol.gd`` and add the ``reset_weapon`` "
"function. Add the following:"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_six.rst:710
msgid ""
"Now, when we call ``reset_weapon``, the ammo in the pistol and the ammo in "
"the spares will be reset to their default values."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_six.rst:712
msgid "Now let's add ``reset_weapon`` in ``Weapon_Rifle.gd``:"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_six.rst:720
msgid "And add the following to ``Weapon_Knife.gd``:"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_six.rst:728
msgid "Now all the weapons will reset when the player dies."
msgstr "이제 플레이어가 죽을 때 모든 무기가 초기화됩니다."

#: ../../docs/tutorials/3d/fps_tutorial/part_six.rst:732
msgid ""
"Now we need to add a few things to ``Globals.gd``. Firstly, add the "
"following class variable:"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_six.rst:738
msgid ""
"``respawn_points``: A variable to hold all the respawn points in a level"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_six.rst:740
msgid ""
"Because we're getting a random spawn point each time, we need to randomize "
"the number generator. Add the following to ``_ready``:"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_six.rst:746
msgid ""
"``randomize`` will get us a new random seed so we get a (relatively) random "
"string of numbers when we use any of the random functions."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_six.rst:748
msgid "Now let's add ``get_respawn_position`` to ``Globals.gd``:"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_six.rst:763
msgid ""
"Firstly, we check if ``Globals.gd`` has any ``respawn_points`` by checking "
"whether ``respawn_points`` is ``null`` or not."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_six.rst:765
msgid ""
"If ``respawn_points`` is ``null``, we return a position of empty :ref:"
"`Vector 3 <class_Vector3>` with the position ``(0, 0, 0)``."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_six.rst:767
msgid ""
"If ``respawn_points`` is not ``null``, we then get a random number between "
"``0`` and the number of elements we have in ``respawn_points``, minus ``1`` "
"since most programming languages, including ``GDScript``, start counting "
"from ``0`` when you are accessing elements in a list."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_six.rst:770
msgid ""
"We then return the position of the :ref:`Spatial <class_Spatial>` node at "
"``respawn_point`` position in ``respawn_points``."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_six.rst:774
msgid ""
"Before we are done with ``Globals.gd``, we need to add the following to "
"``load_new_scene``:"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_six.rst:780
msgid ""
"We set ``respawn_points`` to ``null`` so when/if the player gets to a level "
"with no respawn points, we do not respawn the player at the respawn points "
"that were in the level prior."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_six.rst:785
msgid ""
"Now all we need is a way to set the respawn points. Open up ``Ruins_Level."
"tscn`` and select ``Spawn_Points``. Add a new script called "
"``Respawn_Point_Setter.gd`` and attach it to ``Spawn_Points``. Add the "
"following to ``Respawn_Point_Setter.gd``:"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_six.rst:796
msgid ""
"Now, when a node with ``Respawn_Point_Setter.gd`` has its ``_ready`` "
"function called, all the children nodes of the node with "
"``Respawn_Point_Setter.gd``, ``Spawn_Points`` in the case of ``Ruins_Level."
"tscn``, will be added to ``respawn_points`` in ``Globals.gd``."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_six.rst:800
msgid ""
"Any node with ``Respawn_Point_Setter.gd`` has to be above the player in the :"
"ref:`SceneTree <class_SceneTree>` so the respawn points are set before the "
"player needs them in the player's ``_ready`` function."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_six.rst:805
msgid ""
"Now, when the player dies, they will respawn after waiting ``4`` seconds!"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_six.rst:807
msgid ""
"No spawn points are already set up for any of the levels besides "
"``Ruins_Level.tscn``! Adding spawn points to ``Space_Level.tscn`` is left as "
"an exercise for the reader."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_six.rst:811
msgid "Writing a sound system we can use anywhere"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_six.rst:813
msgid ""
"Finally, let's make a sound system so we can play sounds from anywhere, "
"without having to use the player."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_six.rst:815
msgid ""
"Firstly, open up ``SimpleAudioPlayer.gd`` and change it to the following:"
msgstr "먼저 ``SimpleAudioPlayer.gd``\\ 를 열고 다음으로 변경하세요:"

#: ../../docs/tutorials/3d/fps_tutorial/part_six.rst:859
msgid ""
"There are several changes from the old version, first and foremost being we "
"are no longer storing the sound files in ``SimpleAudioPlayer.gd`` anymore. "
"This is much better for performance since we're no longer loading each audio "
"clip when we create a sound, but instead we are forcing an audio stream to "
"be passed in to ``play_sound``."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_six.rst:863
msgid ""
"Another change is we have a new class variable called ``should_loop``. "
"Instead of just destroying the audio player every time it's finished, we "
"instead want to check and see if the audio player is set to loop or not. "
"This allows us to have audio like looping background music without having to "
"spawn a new audio player with the music when the old one is finished."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_six.rst:865
msgid ""
"Finally, instead of being instanced/spawned in ``Player.gd``, the audio "
"player is instead going to be spawned in ``Globals.gd`` so we can create "
"sounds from any scene. Now the audio player stores ``Globals.gd`` singleton "
"so when the audio player is destroyed, we can also remove it from a list in "
"``Globals.gd``."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_six.rst:868
msgid "Let's go over the changes."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_six.rst:872
msgid ""
"For the class variables, we removed all the ``audio_[insert name here]`` "
"variables since we will instead have these passed in from ``Globals.gd``."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_six.rst:874
msgid ""
"We also added two new class variables, ``should_loop`` and ``globals``. "
"We'll use ``should_loop`` to tell whether the audio player should loop when "
"the sound has finished, and ``globals`` will hold the ``Globals.gd`` "
"singleton."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_six.rst:877
msgid ""
"The only change in ``_ready`` is now audio player is getting the ``Globals."
"gd`` singleton and assigning it to ``globals``."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_six.rst:879
msgid ""
"``play_sound`` now expects an audio stream, named ``audio_stream``, to be "
"passed in, instead of ``sound_name``. Instead of checking the sound name and "
"setting the stream for the audio player, we instead check to make sure an "
"audio stream was passed in. If an audio stream was not passed in, we print "
"an error message, remove the audio player from a list in the ``Globals.gd`` "
"singleton called ``created_audio``, and then free the audio player."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_six.rst:883
msgid ""
"Finally, in ``sound_finished`` we first check to see if the audio player is "
"supposed to loop or not using ``should_loop``. If the audio player is "
"supposed to loop, we play the sound again from the start, at position "
"``0.0``. If the audio player is not supposed to loop, we remove the audio "
"player from a list in the ``Globals.gd`` singleton called ``created_audio``, "
"and then free the audio player."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_six.rst:889
msgid ""
"Now that we've finished our changes to ``SimpleAudioPlayer.gd``, we now need "
"to turn our attention to ``Globals.gd``. First, add the following class "
"variables:"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_six.rst:905
msgid "Let's go over these global variables."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_six.rst:907
msgid ""
"``audio_clips``: A dictionary holding all the audio clips ``Globals.gd`` can "
"play."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_six.rst:908
msgid "``SIMPLE_AUDIO_PLAYER_SCENE``: The simple audio player scene."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_six.rst:909
msgid ""
"``created_audio``: A list to hold all the simple audio players ``Globals."
"gd`` has created."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_six.rst:911
msgid ""
"If you want to add additional audio, you need to add it to ``audio_clips``. "
"No audio files are provided in this tutorial, so you will have to provide "
"your own."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_six.rst:914
msgid ""
"One site I'd recommend is **GameSounds.xyz**. I'm using the Gamemaster audio "
"gun sound pack included in the Sonniss' GDC Game Audio bundle for 2017. The "
"tracks I've used (with some minor editing) are as follows:"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_six.rst:918
msgid "gun_revolver_pistol_shot_04,"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_six.rst:919
msgid "gun_semi_auto_rifle_cock_02,"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_six.rst:920
msgid "gun_submachine_auto_shot_00_automatic_preview_01"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_six.rst:924
msgid ""
"Now we need to add a new function called ``play_sound`` to ``Globals.gd``:"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_six.rst:943
msgid ""
"Firstly, we check whether ``Globals.gd`` has an audio clip with the name "
"``sound_name`` in ``audio_clips``. If it does not, we print an error message."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_six.rst:945
msgid ""
"If ``Globals.gd`` has an audio clip with the name ``sound_name``, we then "
"instance/spawn a new ``SIMPLE_AUDIO_PLAYER_SCENE`` and assign it to "
"``new_audio``."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_six.rst:947
msgid ""
"We then set ``should_loop``, and add ``new_audio`` as a child of ``Globals."
"gd``."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_six.rst:949
msgid ""
"Remember, we have to be careful adding nodes to a singleton, since these "
"nodes will not be destroyed when changing scenes."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_six.rst:951
msgid ""
"We add the ``new_audio`` into the ``created_audio`` list to hold all created "
"audios."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_six.rst:953
msgid ""
"We then call ``play_sound``, passing in the audio clip associated with "
"``sound_name`` and the sound position."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_six.rst:957
msgid ""
"Before we leave ``Globals.gd``, we need to add a few lines of code to "
"``load_new_scene`` so when the player changes scenes, all the audio is "
"destroyed."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_six.rst:959
msgid "Add the following to ``load_new_scene``:"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_six.rst:968
msgid ""
"Now, before ``Globals.gd`` changes scenes, it goes through each simple audio "
"player in ``created_sounds`` and frees/destroys them. Once ``Globals.gd`` "
"has gone through all the sounds in ``created_audio``, we clear "
"``created_audio`` so it no longer holds any references to any (now freed/"
"destroyed) simple audio players."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_six.rst:973
msgid ""
"Let's change ``create_sound`` in ``Player.gd`` to use this new system. "
"First, remove ``simple_audio_player`` from ``Player.gd``'s class variables "
"since we will no longer be directly instancing/spawning sounds in ``Player."
"gd``."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_six.rst:976
msgid "Now, change ``create_sound`` to the following:"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_six.rst:983
msgid ""
"Now, whenever ``create_sound`` is called, we simply call ``play_sound`` in "
"``Globals.gd``, passing in all the arguments received."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_six.rst:987
msgid ""
"Now all the sounds in our FPS can be played from anywhere. All we have to do "
"is get the ``Globals.gd`` singleton, and call ``play_sound``, pass in the "
"name of the sound we want to play, whether we want it to loop or not, and "
"the position from which to play the sound."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_six.rst:990
msgid ""
"For example, if you want to play an explosion sound when the grenade "
"explodes you'd need to add a new sound to ``audio_clips`` in ``Globals.gd``, "
"get the ``Globals.gd`` singleton, and then you just need to add something "
"like ``globals.play_sound(\"explosion\", false, global_transform.origin)`` "
"in the grenades ``_process`` function, right after the grenade damages all "
"the bodies within its blast radius."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_six.rst:1000
msgid "Now you have a fully working single player FPS!"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_six.rst:1002
msgid ""
"At this point, you have a good base to build more complicated FPS games."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_six.rst:1006
msgid ""
"You can download the finished project for the entire tutorial here: :"
"download:`Godot_FPS_Part_6.zip <files/Godot_FPS_Finished.zip>`"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_six.rst:1008
msgid ""
"The finished project source files contain the same code, just written in a "
"different order. This is because the finished project source files are what "
"the tutorial is based on."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_six.rst:1011
msgid ""
"The finished project code was written in the order that features were "
"created, not necessarily in a order that is ideal for learning."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_six.rst:1014
msgid ""
"Other than that, the source is exactly the same, just with helpful comments "
"explaining what each part does."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_six.rst:1017
msgid ""
"The finished project source is hosted on Github as well: https://github.com/"
"TwistedTwigleg/Godot_FPS_Tutorial"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_six.rst:1019
msgid ""
"**Please note that the code in Github may or may not be in sync with the "
"tutorial in the documentation**."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_six.rst:1021
msgid ""
"The code in the documentation is likely better managed and/or more up to "
"date. If you are unsure of which to use, use the project(s) provided in the "
"documentation, as they are maintained by the Godot community."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_six.rst:1024
msgid ""
"You can download all the ``.blend`` files used in this tutorial here: :"
"download:`Godot_FPS_BlenderFiles.zip <files/Godot_FPS_BlenderFiles.zip>`"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_six.rst:1026
msgid ""
"All assets provided in the started assets (unless otherwise noted) were "
"**originally created by TwistedTwigleg, with changes/additions by the Godot "
"community.** All original assets provided for this tutorial are released "
"under the ``MIT`` license."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_six.rst:1031
msgid ""
"The skybox is created by **StumpyStrust** and can be found at OpenGameArt."
"org. https://opengameart.org/content/space-skyboxes-0 . The skybox is "
"licensed under the ``CC0`` license."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_six.rst:1036
msgid ""
"The skybox was converted to a 360 equirectangular image using this tool: "
"https://www.360toolkit.co/convert-cubemap-to-spherical-equirectangular.html"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_six.rst:1038
msgid ""
"While no sounds are provided, you can find many game ready sounds at https://"
"gamesounds.xyz/"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_six.rst:1040
msgid ""
"**OpenGameArt.org, 360toolkit.co, the creator(s) of Titillium-Regular, "
"StumpyStrust, and GameSounds.xyz are in no way involved in this tutorial.**"
msgstr ""

#: ../../docs/tutorials/3d/vertex_animation/index.rst:2
#, fuzzy
msgid "Animating thousands of objects"
msgstr "모든 타입 객체의 변형 애니메이션"

#: ../../docs/tutorials/3d/vertex_animation/animating_thousands_of_fish.rst:4
#, fuzzy
msgid "Animating thousands of fish with MultiMeshInstance"
msgstr "Tween 노드로 체력이 감소하는 것을 애니메이트하기"

#: ../../docs/tutorials/3d/vertex_animation/animating_thousands_of_fish.rst:6
msgid ""
"This tutorial explores a technique used in the game `ABZU <https://www."
"gdcvault.com/play/1024409/Creating-the-Art-of-ABZ>`_ for rendering and "
"animating thousands of fish using vertex animation and static mesh "
"instancing."
msgstr ""

#: ../../docs/tutorials/3d/vertex_animation/animating_thousands_of_fish.rst:10
msgid ""
"In Godot, this can be accomplished with a custom :ref:`Shader "
"<class_Shader>` and a :ref:`MultiMeshInstance <class_MultiMeshInstance>`. "
"Using the following technique you can render thousands of animated objects, "
"even on low end hardware."
msgstr ""

#: ../../docs/tutorials/3d/vertex_animation/animating_thousands_of_fish.rst:14
msgid ""
"We will start by animating one fish. Then, we will see how to extend that "
"animation to thousands of fish."
msgstr ""

#: ../../docs/tutorials/3d/vertex_animation/animating_thousands_of_fish.rst:18
#, fuzzy
msgid "Animating one Fish"
msgstr "애니메이션(Animations)"

#: ../../docs/tutorials/3d/vertex_animation/animating_thousands_of_fish.rst:20
msgid ""
"We will start with a single fish. Load your fish model into a :ref:"
"`MeshInstance <class_MeshInstance>` and add a new :ref:`ShaderMaterial "
"<class_ShaderMaterial>`."
msgstr ""

#: ../../docs/tutorials/3d/vertex_animation/animating_thousands_of_fish.rst:23
msgid ""
"Here is the fish we will be using for the example images, you can use any "
"fish model you like."
msgstr ""

#: ../../docs/tutorials/3d/vertex_animation/animating_thousands_of_fish.rst:27
msgid ""
"The fish model in this tutorial is made by `QuaterniusDev <http://quaternius."
"com>`_ and is shared with a creative commons license. CC0 1.0 Universal (CC0 "
"1.0) Public Domain Dedication https://creativecommons.org/publicdomain/"
"zero/1.0/"
msgstr ""

#: ../../docs/tutorials/3d/vertex_animation/animating_thousands_of_fish.rst:31
msgid ""
"Typically, you would use bones and a :ref:`Skeleton <class_Skeleton>` to "
"animate objects. However, bones are animated on the CPU and so you end "
"having to calculate thousands of operations every frame and it becomes "
"impossible to have thousands of objects. Using vertex animation in a vertex "
"shader, you avoid using bones and can instead calculate the full animation "
"in a few lines of code and completely on the GPU."
msgstr ""

#: ../../docs/tutorials/3d/vertex_animation/animating_thousands_of_fish.rst:37
msgid "The animation will be made of four key motions:"
msgstr ""

#: ../../docs/tutorials/3d/vertex_animation/animating_thousands_of_fish.rst:39
msgid "A side to side motion"
msgstr ""

#: ../../docs/tutorials/3d/vertex_animation/animating_thousands_of_fish.rst:40
msgid "A pivot motion around the center of the fish"
msgstr ""

#: ../../docs/tutorials/3d/vertex_animation/animating_thousands_of_fish.rst:41
msgid "A panning wave motion"
msgstr ""

#: ../../docs/tutorials/3d/vertex_animation/animating_thousands_of_fish.rst:42
msgid "A panning twist motion"
msgstr ""

#: ../../docs/tutorials/3d/vertex_animation/animating_thousands_of_fish.rst:44
msgid ""
"All the code for the animation will be in the vertex shader with uniforms "
"controlling the amount of motion. We use uniforms to control the strength of "
"the motion so that you can tweak the animation in editor and see the results "
"in real time, without the shader having to recompile."
msgstr ""

#: ../../docs/tutorials/3d/vertex_animation/animating_thousands_of_fish.rst:48
msgid ""
"All the motions will be made using cosine waves applied to ``VERTEX`` in "
"model space. We want the vertices to be in model space so that the motion is "
"always relative to the orientation of the fish. For example, side-to-side "
"will always be move the fish back and forth in its left to right direction, "
"instead of on the ``x`` axis in the world orientation."
msgstr ""

#: ../../docs/tutorials/3d/vertex_animation/animating_thousands_of_fish.rst:53
msgid ""
"In order to control the speed of the animation, we will start by defining "
"our own time variable using ``TIME``."
msgstr ""

#: ../../docs/tutorials/3d/vertex_animation/animating_thousands_of_fish.rst:60
msgid ""
"The first motion we will implement is the side to side motion. It can be "
"made by offsetting ``VERTEX.x`` by ``cos`` of ``TIME``. Each time the mesh "
"is rendered, all the vertices will move to the side by the amount of "
"``cos(time)``."
msgstr ""

#: ../../docs/tutorials/3d/vertex_animation/animating_thousands_of_fish.rst:69
#, fuzzy
msgid "The resulting animation should look something like this:"
msgstr "에메랄드 카운터는 이와 같이 보여야 합니다"

#: ../../docs/tutorials/3d/vertex_animation/animating_thousands_of_fish.rst:73
msgid ""
"Next, we add the pivot. Because the fish is centered at (0, 0), all we have "
"to do is multiply ``VERTEX`` by a rotation matrix for it to rotate around "
"the center of the fish."
msgstr ""

#: ../../docs/tutorials/3d/vertex_animation/animating_thousands_of_fish.rst:76
msgid "We construct a rotation matrix like so:"
msgstr ""

#: ../../docs/tutorials/3d/vertex_animation/animating_thousands_of_fish.rst:85
msgid ""
"And then we apply it in the ``x`` and ``z`` axes by multiplying it by "
"``VERTEX.xz``."
msgstr ""

#: ../../docs/tutorials/3d/vertex_animation/animating_thousands_of_fish.rst:91
#, fuzzy
msgid "With only the pivot applied you should see something like this:"
msgstr "두 노드를 선택하면, 이렇게 보여야 합니다"

#: ../../docs/tutorials/3d/vertex_animation/animating_thousands_of_fish.rst:95
msgid ""
"The next two motions need to pan down the spine of the fish. For that, we "
"need a new variable, ``body``. ``body`` is a float that is ``0`` at the tail "
"of the fish and ``1`` at its head."
msgstr ""

#: ../../docs/tutorials/3d/vertex_animation/animating_thousands_of_fish.rst:102
msgid ""
"The next motion is a cosine wave that moves down the length of the fish. To "
"make it move along the spine of the fish, we offset the input to ``cos`` by "
"the position along the spine, which is the variable we defined above, "
"``body``."
msgstr ""

#: ../../docs/tutorials/3d/vertex_animation/animating_thousands_of_fish.rst:111
msgid ""
"This looks very similar to the side to side motion we defined above, but in "
"this one, by using ``body`` to offset ``cos`` each vertex along the spine "
"has a different position in the wave making it look like a wave is moving "
"along the fish."
msgstr ""

#: ../../docs/tutorials/3d/vertex_animation/animating_thousands_of_fish.rst:117
msgid ""
"The last motion is the twist, which is a panning roll along the spine. "
"Similarly to the pivot, we first  construct a rotation matrix."
msgstr ""

#: ../../docs/tutorials/3d/vertex_animation/animating_thousands_of_fish.rst:126
msgid ""
"We apply the rotation in the ``xy`` axes so that the fish appears to roll "
"around its spine. For this to work, the fishes spine needs to be centered on "
"the ``z`` axis."
msgstr ""

#: ../../docs/tutorials/3d/vertex_animation/animating_thousands_of_fish.rst:133
#, fuzzy
msgid "Here is the fish with twist applied:"
msgstr "GDScript 샘플 코드입니다:"

#: ../../docs/tutorials/3d/vertex_animation/animating_thousands_of_fish.rst:137
msgid ""
"If we apply all these motions one after another, we get a fluid jelly-like "
"motion."
msgstr ""

#: ../../docs/tutorials/3d/vertex_animation/animating_thousands_of_fish.rst:141
msgid ""
"Normal fish swim mostly with the back half of their body. Accordingly, we "
"need to limit the panning motions to the back half of the fish. To do this, "
"we create a new variable, ``mask``."
msgstr ""

#: ../../docs/tutorials/3d/vertex_animation/animating_thousands_of_fish.rst:144
msgid ""
"``mask`` is a float that goes from ``0`` at the front of the fish to ``1`` "
"at the end  using ``smoothstep`` to control the point at which the "
"transition from ``0`` to ``1`` happens."
msgstr ""

#: ../../docs/tutorials/3d/vertex_animation/animating_thousands_of_fish.rst:152
msgid "Below is an image of the fish with ``mask`` used as ``COLOR``:"
msgstr ""

#: ../../docs/tutorials/3d/vertex_animation/animating_thousands_of_fish.rst:156
msgid ""
"For the wave, we multiply the motion by ``mask`` which will limit it to the "
"back half."
msgstr ""

#: ../../docs/tutorials/3d/vertex_animation/animating_thousands_of_fish.rst:163
msgid ""
"In order to apply the mask to the twist, we use ``mix``. ``mix`` allows us "
"to mix the vertex position between a fully rotated vertex and one that is "
"not rotated. We need to use ``mix`` instead of multiplying ``mask`` by the "
"rotated ``VERTEX`` because we are not adding the motion to the ``VERTEX`` we "
"are replacing the ``VERTEX`` with the rotated version. If we multiplied that "
"by ``mask`` we would shrink the fish."
msgstr ""

#: ../../docs/tutorials/3d/vertex_animation/animating_thousands_of_fish.rst:174
msgid "Putting the four motions together gives us the final animation."
msgstr ""

#: ../../docs/tutorials/3d/vertex_animation/animating_thousands_of_fish.rst:178
msgid ""
"Go ahead and play with the uniforms in order to alter the swim cycle of the "
"fish. You will find that you can create a wide variety of swim styles using "
"these four motions."
msgstr ""

#: ../../docs/tutorials/3d/vertex_animation/animating_thousands_of_fish.rst:182
msgid "Making a school of fish"
msgstr ""

#: ../../docs/tutorials/3d/vertex_animation/animating_thousands_of_fish.rst:184
#, fuzzy
msgid ""
"Godot makes it easy to render thousands of the same object using a "
"MultiMeshInstance node."
msgstr "Godot는 인스펙터(Inspecter)에서 맞춤 리소스를 만들기 쉽게 합니다."

#: ../../docs/tutorials/3d/vertex_animation/animating_thousands_of_fish.rst:186
msgid ""
"A MultiMeshInstance node is created and used the same way you would make a "
"MeshInstance node. For this tutorial, we will name the MultiMeshInstance "
"node ``School``, because it will contain a school of fish."
msgstr ""

#: ../../docs/tutorials/3d/vertex_animation/animating_thousands_of_fish.rst:190
msgid ""
"Once you have a MultiMeshInstance add a :ref:`MultiMesh <class_MultiMesh>`, "
"and to that MultiMesh add your :ref:`Mesh <class_Mesh>` with the shader from "
"above."
msgstr ""

#: ../../docs/tutorials/3d/vertex_animation/animating_thousands_of_fish.rst:193
msgid ""
"MultiMeshes draw your Mesh with three additional per-instance properties: "
"Transform (rotation, translation, scale), Color, and Custom. Custom is used "
"to pass in 4 multi-use variables using a :ref:`Color <class_Color>`."
msgstr ""

#: ../../docs/tutorials/3d/vertex_animation/animating_thousands_of_fish.rst:197
msgid ""
"``instance_count`` specifies how many instances of the mesh you want to "
"draw. For now, leave ``instance_count`` at ``0`` because you cannot change "
"any of the other parameters while ``instance_count`` is larger than ``0``. "
"We will set ``instance count`` in GDScript later."
msgstr ""

#: ../../docs/tutorials/3d/vertex_animation/animating_thousands_of_fish.rst:201
msgid ""
"``transform_format`` specifies whether the transforms used are 3D or 2D. For "
"this tutorial, select 3D."
msgstr ""

#: ../../docs/tutorials/3d/vertex_animation/animating_thousands_of_fish.rst:203
msgid ""
"For both ``color_format`` and ``custom_data_format`` you can choose between "
"``None``, ``Byte``, and ``Float``. ``None`` means you won't be passing in "
"that data (either a per-instance ``COLOR`` variable, or ``INSTANCE_CUSTOM``) "
"to the shader. ``Byte`` means each number making up the color you pass in "
"will be stored with 8 bits while ``Float`` means each number will be stored "
"in a floating point number (32 bits). ``Float`` is slower but more precise, "
"``Byte`` will take less memory and be faster, but you may see some visual "
"artifacts."
msgstr ""

#: ../../docs/tutorials/3d/vertex_animation/animating_thousands_of_fish.rst:210
msgid "Now, set ``instance_count`` to the number of fish you want to have."
msgstr ""

#: ../../docs/tutorials/3d/vertex_animation/animating_thousands_of_fish.rst:212
msgid "Next we need to set the per-instance transforms."
msgstr ""

#: ../../docs/tutorials/3d/vertex_animation/animating_thousands_of_fish.rst:214
msgid ""
"There are two ways to set per-instance transforms for MultiMeshes. The first "
"is entirely in editor and is described in the :ref:`MultiMeshInstance "
"tutorial <doc_using_multi_mesh_instance>`."
msgstr ""

#: ../../docs/tutorials/3d/vertex_animation/animating_thousands_of_fish.rst:217
msgid ""
"The second is to loop over all the instances and set their transforms in "
"code. Below, we use GDScript to loop over all the instances and set their "
"transform to a random position."
msgstr ""

#: ../../docs/tutorials/3d/vertex_animation/animating_thousands_of_fish.rst:227
msgid ""
"Running this script will place the fish in random positions in a box around "
"the position of the MultiMeshInstance."
msgstr ""

#: ../../docs/tutorials/3d/vertex_animation/animating_thousands_of_fish.rst:230
msgid ""
"If performance is an issue for you, try running the scene with GLES2 or with "
"fewer fish."
msgstr ""

#: ../../docs/tutorials/3d/vertex_animation/animating_thousands_of_fish.rst:232
msgid ""
"Notice how all the fish  are all in the same position in their swim cycle? "
"It makes them look very robotic. The next step is to give each fish a "
"different position in the swim cycle so the entire school looks more organic."
msgstr ""

#: ../../docs/tutorials/3d/vertex_animation/animating_thousands_of_fish.rst:237
msgid "Animating a school of fish"
msgstr ""

#: ../../docs/tutorials/3d/vertex_animation/animating_thousands_of_fish.rst:239
msgid ""
"One of the benefits of animating the fish using ``cos`` functions is that "
"they are animated with one parameter, ``time``. In order to give each fish a "
"unique position in the swim cycle, we only need to offset ``time``."
msgstr ""

#: ../../docs/tutorials/3d/vertex_animation/animating_thousands_of_fish.rst:243
msgid ""
"We do that by adding the per-instance custom value ``INSTANCE_CUSTOM`` to "
"``time``."
msgstr ""

#: ../../docs/tutorials/3d/vertex_animation/animating_thousands_of_fish.rst:249
msgid ""
"Next, we need to pass a value into ``INSTANCE_CUSTOM``. We do that by adding "
"one line into the ``for`` loop from above. In the ``for`` loop we assign "
"each instance a set of four random floats to use."
msgstr ""

#: ../../docs/tutorials/3d/vertex_animation/animating_thousands_of_fish.rst:257
msgid ""
"Now the fish all have unique positions in the swim cycle. You can give them "
"a little more individuality by using ``INSTANCE_CUSTOM`` to make them swim "
"faster or slower by multiplying by ``TIME``."
msgstr ""

#: ../../docs/tutorials/3d/vertex_animation/animating_thousands_of_fish.rst:266
msgid ""
"You can even experiment with changing the per-instance color the same way "
"you changed the per-instance custom value."
msgstr ""

#: ../../docs/tutorials/3d/vertex_animation/animating_thousands_of_fish.rst:269
msgid ""
"One problem that you will run into at this point is that the fish are "
"animated, but they are not moving. You can move them by updating the per-"
"instance transform for each fish every frame. Although doing so will be "
"faster then moving thousands of MeshInstances per frame, it is still likely "
"to be slow."
msgstr ""

#: ../../docs/tutorials/3d/vertex_animation/animating_thousands_of_fish.rst:274
msgid ""
"In the next tutorial we will cover how to use :ref:`Particles "
"<class_Particles>` to take advantage of the GPU and move each fish around "
"individually while still receiving the benefits of instancing."
msgstr ""

#: ../../docs/tutorials/3d/vertex_animation/controlling_thousands_of_fish.rst:4
msgid "Controlling thousands of fish with Particles"
msgstr ""

#: ../../docs/tutorials/3d/vertex_animation/controlling_thousands_of_fish.rst:6
msgid ""
"The problem with :ref:`MeshInstances <class_MeshInstance>` is that it is "
"expensive to update their transform array. It is great for placing many "
"static objects around the scene. But it is still difficult to move the "
"objects around the scene."
msgstr ""

#: ../../docs/tutorials/3d/vertex_animation/controlling_thousands_of_fish.rst:10
msgid ""
"To make each instance move in an interesting way we will use a :ref:"
"`Particles <class_Particles>` node. Particles take advantage of GPU "
"acceleration by computing and setting the per-instance information in a :ref:"
"`Shader <class_Shader>`."
msgstr ""

#: ../../docs/tutorials/3d/vertex_animation/controlling_thousands_of_fish.rst:14
msgid ""
"Particles are not available in GLES2, instead use :ref:`CPUParticles "
"<class_CPUParticles>`, which do the same thing as Particles, but do not "
"benefit from GPU acceleration."
msgstr ""

#: ../../docs/tutorials/3d/vertex_animation/controlling_thousands_of_fish.rst:17
msgid ""
"First create a Particles node. Then, under \"Draw Passes\" set the "
"Particle's \"Draw Pass 1\" to your :ref:`Mesh <class_Mesh>`. Then under "
"\"Process Material\" create a new :ref:`ShaderMaterial "
"<class_ShaderMaterial>`."
msgstr ""

#: ../../docs/tutorials/3d/vertex_animation/controlling_thousands_of_fish.rst:21
msgid "Set the ``shader_type`` to ``particles``."
msgstr ""

#: ../../docs/tutorials/3d/vertex_animation/controlling_thousands_of_fish.rst:27
#, fuzzy
msgid "Then add the following two functions:"
msgstr "다음과 같은 주의 사항이 있습니다:"

#: ../../docs/tutorials/3d/vertex_animation/controlling_thousands_of_fish.rst:51
msgid ""
"These functions come from the default :ref:`ParticlesMaterial "
"<class_ParticlesMaterial>`. They are used to generate a random number from  "
"each particle's ``RANDOM_SEED``."
msgstr ""

#: ../../docs/tutorials/3d/vertex_animation/controlling_thousands_of_fish.rst:54
msgid ""
"A unique thing about particle shaders is that some of the built-in variables "
"are saved across frames. ``TRANSFORM``, ``COLOR``, and ``CUSTOM`` can all be "
"accessed in the Spatial shader of the mesh, and also in the particle shader "
"the next time it is run."
msgstr ""

#: ../../docs/tutorials/3d/vertex_animation/controlling_thousands_of_fish.rst:58
msgid ""
"Next, setup your ``vertex`` function. Particles shaders only contain a "
"vertex function and no others."
msgstr ""

#: ../../docs/tutorials/3d/vertex_animation/controlling_thousands_of_fish.rst:61
msgid ""
"First we will distinguish between code that needs to be run only when the "
"particle system starts and code that should always run. We want to give each "
"fish a random position and a random animation offset when the system is "
"first run so we wrap that code in an ``if`` statement that checks the built-"
"in variable ``RESTART`` which becomes ``true`` for one frame when the "
"particle system is restarted."
msgstr ""

#: ../../docs/tutorials/3d/vertex_animation/controlling_thousands_of_fish.rst:66
msgid "From a high level, this looks like:"
msgstr ""

#: ../../docs/tutorials/3d/vertex_animation/controlling_thousands_of_fish.rst:78
msgid ""
"Next, we need to generate 4 random numbers: 3 to create a random position "
"and one for the random offset of the swim cycle."
msgstr ""

#: ../../docs/tutorials/3d/vertex_animation/controlling_thousands_of_fish.rst:81
msgid ""
"First, generate 4 seeds inside the ``RESTART`` block using the ``hash`` "
"function provided above:"
msgstr ""

#: ../../docs/tutorials/3d/vertex_animation/controlling_thousands_of_fish.rst:90
msgid ""
"Then, use those seeds to generate random numbers using ``rand_from_seed``:"
msgstr ""

#: ../../docs/tutorials/3d/vertex_animation/controlling_thousands_of_fish.rst:99
msgid ""
"Finally, assign ``position`` to ``TRANSFORM[3].xyz``, which is the part of "
"the transform that holds the position information."
msgstr ""

#: ../../docs/tutorials/3d/vertex_animation/controlling_thousands_of_fish.rst:106
msgid "Remember, all this code so far goes inside the ``RESTART`` block."
msgstr ""

#: ../../docs/tutorials/3d/vertex_animation/controlling_thousands_of_fish.rst:108
msgid ""
"The vertex shader for your mesh can stay the exact same as it was in the "
"previous tutorial."
msgstr ""

#: ../../docs/tutorials/3d/vertex_animation/controlling_thousands_of_fish.rst:110
msgid ""
"Now you can move each fish individually each frame, either by adding to the "
"``TRANSFORM`` directly or by writing to ``VELOCITY``."
msgstr ""

#: ../../docs/tutorials/3d/vertex_animation/controlling_thousands_of_fish.rst:113
msgid "Let's transform the fish by setting their ``VELOCITY``."
msgstr ""

#: ../../docs/tutorials/3d/vertex_animation/controlling_thousands_of_fish.rst:119
msgid ""
"This is the most basic way to set ``VELOCITY`` every particle (or fish) will "
"have the same velocity."
msgstr ""

#: ../../docs/tutorials/3d/vertex_animation/controlling_thousands_of_fish.rst:121
msgid ""
"Just by setting ``VELOCITY`` you can make the fish swim however you want. "
"For example, try the code below."
msgstr ""

#: ../../docs/tutorials/3d/vertex_animation/controlling_thousands_of_fish.rst:128
msgid "This will give each fish a unique speed between ``2`` and ``10``."
msgstr ""

#: ../../docs/tutorials/3d/vertex_animation/controlling_thousands_of_fish.rst:130
msgid ""
"If you used ``CUSTOM.y`` in the last tutorial, you can also set the speed of "
"the swim animation based on the ``VELOCITY``. Just use ``CUSTOM.y``."
msgstr ""

#: ../../docs/tutorials/3d/vertex_animation/controlling_thousands_of_fish.rst:137
#, fuzzy
msgid "This code gives you the following behavior:"
msgstr "적 씬은 다음 노드들을 사용할 것입니다:"

#: ../../docs/tutorials/3d/vertex_animation/controlling_thousands_of_fish.rst:141
msgid ""
"Using a ParticlesMaterial you can make the fish behavior as simple or "
"complex as you like. In this tutorial we only set Velocity, but in your own "
"Shaders you can also set ``COLOR``, rotation, scale (through ``TRANSFORM``). "
"Please refer to the :ref:`Particles Shader Reference <doc_particle_shader>` "
"for more information on particle shaders."
msgstr ""

#: ../../docs/tutorials/audio/audio_buses.rst:4
#: ../../docs/tutorials/audio/audio_buses.rst:48
msgid "Audio buses"
msgstr "오디오 버스(Audio buses)"

#: ../../docs/tutorials/audio/audio_buses.rst:9
msgid ""
"Godot's audio processing code has been written with games in mind, with the "
"aim of achieving an optimal balance between performance and sound quality."
msgstr ""

#: ../../docs/tutorials/audio/audio_buses.rst:12
msgid ""
"Godot's audio engine allows any number of audio buses to be created and any "
"number of effect processors can be added to each bus. Only the hardware of "
"the device running your game will limit the number of buses and effects that "
"can be used before performance starts to suffer."
msgstr ""

#: ../../docs/tutorials/audio/audio_buses.rst:18
msgid "Decibel scale"
msgstr ""

#: ../../docs/tutorials/audio/audio_buses.rst:20
msgid ""
"Godot's sound interface is designed to meet the expectations of sound design "
"professionals. To this end, it primarily uses the decibel scale."
msgstr ""

#: ../../docs/tutorials/audio/audio_buses.rst:23
msgid "For those unfamiliar with it, it can be explained with a few facts:"
msgstr ""

#: ../../docs/tutorials/audio/audio_buses.rst:25
msgid ""
"The decibel (dB) scale is a relative scale. It represents the ratio of sound "
"power by using 20 times the base 10 logarithm of the ratio (20 × log\\ :sub:"
"`10`\\ (P/P\\ :sub:`0`\\ ))."
msgstr ""

#: ../../docs/tutorials/audio/audio_buses.rst:28
msgid ""
"For every 6 dB, sound amplitude doubles or halves. 12 dB represents a factor "
"of 4, 18 dB a factor of 8, 20 dB a factor of 10, 40 dB a factor of 100, etc."
msgstr ""

#: ../../docs/tutorials/audio/audio_buses.rst:30
msgid ""
"Since the scale is logarithmic, true zero (no audio) can't be represented."
msgstr ""

#: ../../docs/tutorials/audio/audio_buses.rst:31
msgid ""
"0 dB is the maximum amplitude possible in a digital audio system. This limit "
"is not the human limit, but a limit from the sound hardware. Audio with "
"amplitudes that are too high to be represented properly below 0 dB create a "
"kind of distortion called *clipping*."
msgstr ""

#: ../../docs/tutorials/audio/audio_buses.rst:35
msgid ""
"To avoid clipping, your sound mix be arranged so that the output of the "
"*master bus* (more on that later) never exceeds 0 dB."
msgstr ""

#: ../../docs/tutorials/audio/audio_buses.rst:37
msgid ""
"Every 6 dB below the 0 dB limit, sound energy is *halved*. It means the "
"sound volume at -6 dB is half as loud as 0dB. -12 dB is half as loud as -6 "
"dB and so on."
msgstr ""

#: ../../docs/tutorials/audio/audio_buses.rst:40
msgid ""
"When working with decibels, sound is considered no longer audible between "
"-60 dB and -80 dB. This makes your working range generally between -60 dB "
"and 0 dB."
msgstr ""

#: ../../docs/tutorials/audio/audio_buses.rst:44
msgid ""
"This can take a bit getting used to, but it's friendlier in the end and will "
"allow you to communicate better with audio professionals."
msgstr ""

#: ../../docs/tutorials/audio/audio_buses.rst:50
msgid "Audio buses can be found in the bottom panel of the Godot editor:"
msgstr ""

#: ../../docs/tutorials/audio/audio_buses.rst:54
msgid ""
"An *audio bus* (also called an *audio channel*) can be considered a place "
"that audio is channeled through on the way to playback through a device's "
"speakers. Audio data can be *modified* and *re-routed* by an audio bus. An "
"audio bus has a VU meter (the bars that light up when sound is played) which "
"indicates the amplitude of the signal passing through."
msgstr ""

#: ../../docs/tutorials/audio/audio_buses.rst:60
msgid ""
"The leftmost bus is the *master bus*. This bus outputs the mix to your "
"speakers so, as mentioned in the *Decibel scale* section above, make sure "
"that your mix level doesn't reach 0 dB in this bus. The rest of the audio "
"buses can be flexibly routed. After modifying the sound, they send it to "
"another bus to the left. The destination bus can be specified for each of "
"the non-master audio buses. Routing always passes audio from buses on the "
"right to buses further to the left. This avoids infinite routing loops."
msgstr ""

#: ../../docs/tutorials/audio/audio_buses.rst:70
msgid ""
"In the above image, the output of *Bus 2* has been routed to the *Master* "
"bus."
msgstr ""

#: ../../docs/tutorials/audio/audio_buses.rst:73
msgid "Playback of audio through a bus"
msgstr ""

#: ../../docs/tutorials/audio/audio_buses.rst:75
msgid ""
"To test passing audio to a bus, create an AudioStreamPlayer node, load an "
"AudioStream and select a target bus for playback:"
msgstr ""

#: ../../docs/tutorials/audio/audio_buses.rst:80
msgid "Finally, toggle the **Playing** property to **On** and sound will flow."
msgstr ""

#: ../../docs/tutorials/audio/audio_buses.rst:84
msgid ""
"You may also be interested in reading about :ref:`doc_audio_streams` now."
msgstr ""

#: ../../docs/tutorials/audio/audio_buses.rst:87
msgid "Adding effects"
msgstr "효과 추가하기"

#: ../../docs/tutorials/audio/audio_buses.rst:89
msgid ""
"Audio buses can contain all sorts of effects. These effects modify the sound "
"in one way or another and are applied in order."
msgstr ""

#: ../../docs/tutorials/audio/audio_buses.rst:94
msgid ""
"Try them all out to get a sense of how they alter sound. Here follows a "
"short description of the available effects:"
msgstr ""

#: ../../docs/tutorials/audio/audio_buses.rst:98
msgid "Amplify"
msgstr ""

#: ../../docs/tutorials/audio/audio_buses.rst:100
msgid ""
"Amplify changes the amplitude of the signal. Some care needs to be taken. "
"Setting the level too high can make the sound clip, which is usually "
"undesirable."
msgstr ""

#: ../../docs/tutorials/audio/audio_buses.rst:105
msgid "BandLimit and BandPass"
msgstr ""

#: ../../docs/tutorials/audio/audio_buses.rst:107
msgid ""
"These are resonant filters which block frequencies around the *Cutoff* "
"point. BandPass can be used to simulate sound passing through an old "
"telephone line or megaphone. Modulating the BandPass frequency can simulate "
"the sound of a wah-wah guitar pedal, think of the guitar in Jimi Hendrix's "
"*Voodoo Child (Slight Return)*."
msgstr ""

#: ../../docs/tutorials/audio/audio_buses.rst:114
msgid "Chorus"
msgstr ""

#: ../../docs/tutorials/audio/audio_buses.rst:116
msgid ""
"The Chorus effect duplicates the incoming audio, delays the duplicate "
"slightly and uses an LFO to continuously modulate the pitch of the "
"duplicated signal before mixing the duplicated signal(s) and the original "
"together again. This creates a shimmering effect and adds stereo width to "
"the sound."
msgstr ""

#: ../../docs/tutorials/audio/audio_buses.rst:122
msgid "Compressor"
msgstr ""

#: ../../docs/tutorials/audio/audio_buses.rst:124
msgid ""
"A dynamic range compressor automatically attenuates the level of the "
"incoming signal when its amplitude exceeds a certain threshold. The level of "
"attenuation applied is proportional to how far the incoming audio exceeds "
"the threshold. The compressor's Ratio parameter controls the degree of "
"attenuation. One of the main uses of a compressor is to reduce the dynamic "
"range of signals with very loud and quiet parts. Reducing the dynamic range "
"of a signal can make it easier to mix."
msgstr ""

#: ../../docs/tutorials/audio/audio_buses.rst:132
msgid "The compressor has many uses. For example:"
msgstr ""

#: ../../docs/tutorials/audio/audio_buses.rst:134
msgid "It can be used in the Master bus to compress the whole output."
msgstr ""

#: ../../docs/tutorials/audio/audio_buses.rst:135
msgid ""
"It can be used in voice channels to ensure they sound as even as possible."
msgstr ""

#: ../../docs/tutorials/audio/audio_buses.rst:136
msgid ""
"It can be *sidechained*. This means it can reduce the sound level of one "
"signal using the level of another audio bus for threshold detection. This "
"technique is very common in video game mixing to \"duck\" the level of music "
"or sound effects when voices need to be heard."
msgstr ""

#: ../../docs/tutorials/audio/audio_buses.rst:140
msgid ""
"It can accentuate transients by using a slower attack. This can make sound "
"effects more punchy."
msgstr ""

#: ../../docs/tutorials/audio/audio_buses.rst:145
msgid ""
"If your goal is to prevent a signal from exceeding a given amplitude "
"altogether, rather than to reduce the dynamic range of the signal, a :ref:"
"`limiter <doc_audio_buses_limiter>` is likely a better choice than a "
"compressor."
msgstr ""

#: ../../docs/tutorials/audio/audio_buses.rst:152
msgid "Delay"
msgstr ""

#: ../../docs/tutorials/audio/audio_buses.rst:154
msgid ""
"Adds an \"echo\" effect with a feedback loop. It can be used together with "
"*Reverb* to simulate wide rooms, canyons, etc. where sound bounces are far "
"apart."
msgstr ""

#: ../../docs/tutorials/audio/audio_buses.rst:159
msgid "Distortion"
msgstr ""

#: ../../docs/tutorials/audio/audio_buses.rst:161
msgid ""
"Distortion effects make the sound \"dirty\". Godot offers several types of "
"distortion: *overdrive*, *tan* and *bit crushing*. Distortion can be used to "
"simulate sound coming through a low-quality speaker or device."
msgstr ""

#: ../../docs/tutorials/audio/audio_buses.rst:166
msgid "EQ"
msgstr ""

#: ../../docs/tutorials/audio/audio_buses.rst:168
msgid ""
"EQ is what all other equalizers inherit from. It can be extended with with "
"Custom scripts to create an equalizer with a custom number of bands."
msgstr ""

#: ../../docs/tutorials/audio/audio_buses.rst:172
msgid "EQ6, EQ10, EQ21"
msgstr ""

#: ../../docs/tutorials/audio/audio_buses.rst:174
msgid ""
"Godot provides three equalizers with different numbers of bands. An "
"equalizer on the Master bus can be useful to cut frequencies that the "
"device's speakers can't reproduce well (e.g. a mobile phone's speakers won't "
"reproduce bass content well). The equalizer effect can be disabled when "
"headphones are plugged in."
msgstr ""

#: ../../docs/tutorials/audio/audio_buses.rst:182
msgid ""
"Filter is what all other filters inherit from and should not be used "
"directly."
msgstr ""

#: ../../docs/tutorials/audio/audio_buses.rst:185
msgid "HighPassFilter, HighShelfFilter"
msgstr ""

#: ../../docs/tutorials/audio/audio_buses.rst:187
msgid ""
"These are filters that cut frequencies below a specific *Cutoff* frequency. "
"HighPassFilter and HighShelfFilter are used to reduce the bass content of a "
"signal."
msgstr ""

#: ../../docs/tutorials/audio/audio_buses.rst:194
msgid "Limiter"
msgstr ""

#: ../../docs/tutorials/audio/audio_buses.rst:196
msgid ""
"A limiter is similar to a compressor, but it's less flexible and designed to "
"prevent a signal's amplitude exceeding a given dB threshold. Adding a "
"limiter to the Master bus is a safeguard against clipping."
msgstr ""

#: ../../docs/tutorials/audio/audio_buses.rst:201
msgid "LowPassFilter, LowShelfFilter"
msgstr ""

#: ../../docs/tutorials/audio/audio_buses.rst:203
msgid ""
"These are the most common filters, they cut frequencies above a specific "
"*Cutoff* frequency and can also resonate (boost frequencies close to the "
"*Cutoff* frequency). Low pass filters can be used to simulate \"muffled\" "
"sound. For instance, underwater sounds, sounds blocked by walls, or distant "
"sounds."
msgstr ""

#: ../../docs/tutorials/audio/audio_buses.rst:209
msgid "NotchFilter"
msgstr ""

#: ../../docs/tutorials/audio/audio_buses.rst:211
msgid ""
"The opposite of the BandPassFilter, it removes a band of sound from the "
"frequency spectrum at a given *Cutoff* frequency."
msgstr ""

#: ../../docs/tutorials/audio/audio_buses.rst:215
msgid "Panner"
msgstr ""

#: ../../docs/tutorials/audio/audio_buses.rst:217
msgid ""
"The Panner allows the stereo balance of a signal to be adjusted between the "
"left and right channels (wear headphones to audition this effect)."
msgstr ""

#: ../../docs/tutorials/audio/audio_buses.rst:221
msgid "Phaser"
msgstr ""

#: ../../docs/tutorials/audio/audio_buses.rst:223
msgid ""
"It probably does not make much sense to explain that this effect is formed "
"by two signals being dephased and cancelling each other out. You can make a "
"Darth Vader voice with it, or jet-like sounds."
msgstr ""

#: ../../docs/tutorials/audio/audio_buses.rst:228
msgid "PitchShift"
msgstr ""

#: ../../docs/tutorials/audio/audio_buses.rst:230
msgid ""
"This effect allows the adjustment of the signal's pitch independently of its "
"speed. All frequencies can be increased/decreased with minimal effect on "
"transients. PitchShift can be useful to create unusually high or deep voices."
msgstr ""

#: ../../docs/tutorials/audio/audio_buses.rst:235
msgid "Record"
msgstr ""

#: ../../docs/tutorials/audio/audio_buses.rst:237
msgid ""
"The Record effect allows audio passing through the bus to be written to a "
"file."
msgstr ""

#: ../../docs/tutorials/audio/audio_buses.rst:240
msgid "Reverb"
msgstr ""

#: ../../docs/tutorials/audio/audio_buses.rst:242
msgid ""
"Reverb simulates rooms of different sizes. It has adjustable parameters that "
"can be tweaked to obtain the sound of a specific room. Reverb is commonly "
"outputted from :ref:`Areas <class_Area>` (see :ref:`Reverb buses "
"<doc_audio_streams_reverb_buses>`), or to apply a \"chamber\" feel to all "
"sounds."
msgstr ""

#: ../../docs/tutorials/audio/audio_buses.rst:249
msgid "SpectrumAnalyzer"
msgstr ""

#: ../../docs/tutorials/audio/audio_buses.rst:251
msgid ""
"This effect doesn't alter audio, instead, you add this effect to buses you "
"want a spectrum analysis of. This would typically be used for audio "
"visualization. A demo project using this can be found `here <https://github."
"com/godotengine/godot-demo-projects/tree/master/audio/spectrum>`__."
msgstr ""

#: ../../docs/tutorials/audio/audio_buses.rst:256
msgid "StereoEnhance"
msgstr ""

#: ../../docs/tutorials/audio/audio_buses.rst:258
msgid ""
"This effect uses a few algorithms to enhance a signal's stereo spectrum."
msgstr ""

#: ../../docs/tutorials/audio/audio_buses.rst:261
msgid "Automatic bus disabling"
msgstr ""

#: ../../docs/tutorials/audio/audio_buses.rst:263
msgid ""
"There is no need to disable buses manually when not in use. Godot detects "
"that the bus has been silent for a few seconds and disables it (including "
"all effects)."
msgstr ""

#: ../../docs/tutorials/audio/audio_buses.rst:269
msgid "Disabled buses have a blue VU meter instead of a red-green one."
msgstr ""

#: ../../docs/tutorials/audio/audio_buses.rst:272
msgid "Bus rearrangement"
msgstr ""

#: ../../docs/tutorials/audio/audio_buses.rst:274
msgid ""
"Stream Players use bus names to identify a bus, which allows adding, "
"removing and moving buses around while the reference to them is kept. "
"However, if a bus is renamed, the reference will be lost and the Stream "
"Player will output to Master. This system was chosen because rearranging "
"buses is a more common process than renaming them."
msgstr ""

#: ../../docs/tutorials/audio/audio_buses.rst:281
msgid "Default bus layout"
msgstr ""

#: ../../docs/tutorials/audio/audio_buses.rst:283
msgid ""
"The default bus layout is automatically saved to the ``res://"
"default_bus_layout.tres`` file. Custom bus arrangements can be saved and "
"loaded from disk."
msgstr ""

#: ../../docs/tutorials/audio/audio_streams.rst:4
msgid "Audio streams"
msgstr ""

#: ../../docs/tutorials/audio/audio_streams.rst:9
msgid ""
"As you might have already read in :ref:`doc_audio_buses`, sound is sent to "
"each bus via an AudioStreamPlayer node. There are different kinds of "
"AudioStreamPlayers. Each one loads an AudioStream and plays it back."
msgstr ""

#: ../../docs/tutorials/audio/audio_streams.rst:14
msgid "AudioStream"
msgstr ""

#: ../../docs/tutorials/audio/audio_streams.rst:16
msgid ""
"An audio stream is an abstract object that emits sound. The sound can come "
"from many places, but is most commonly loaded from the filesystem. Audio "
"files such as WAV (``.wav``) or Ogg Vorbis (``.ogg``) can be loaded as "
"AudioStreams and placed inside an AudioStreamPlayer."
msgstr ""

#: ../../docs/tutorials/audio/audio_streams.rst:21
msgid ""
"Here is a comparison of the two file types to help you choose the one that "
"fits your use case best:"
msgstr ""

#: ../../docs/tutorials/audio/audio_streams.rst:24
msgid ""
"WAV files are quite large, but use little CPU power to play back. Hundreds "
"of them can be played simultaneously with little impact on performance. This "
"format is usually best for short sound effects."
msgstr ""

#: ../../docs/tutorials/audio/audio_streams.rst:27
msgid ""
"Ogg Vorbis files are much smaller, but use considerably more CPU power to "
"play back, so only a few can be played back at once (especially on mobile). "
"This format works well for music, long sound effect sequences, and voice at "
"relatively low bitrates."
msgstr ""

#: ../../docs/tutorials/audio/audio_streams.rst:32
msgid ""
"Keep in mind Ogg Vorbis files don't contain looping information. If looping "
"an Ogg Vorbis file is desired, it must be set up using the import options:"
msgstr ""

#: ../../docs/tutorials/audio/audio_streams.rst:37
msgid ""
"There are other types of AudioStreamPlayer, such as AudioStreamRandomPitch. "
"This one makes a random adjustment to the sound's pitch every time it's "
"played back. This can be helpful for adding variation to sounds that are "
"played back often."
msgstr ""

#: ../../docs/tutorials/audio/audio_streams.rst:43
msgid "AudioStreamPlayer"
msgstr ""

#: ../../docs/tutorials/audio/audio_streams.rst:45
msgid ""
"This is the standard, non-positional stream player. It can play to any bus. "
"In 5.1 sound setups, it can send audio to stereo mix or front speakers."
msgstr ""

#: ../../docs/tutorials/audio/audio_streams.rst:49
msgid "AudioStreamPlayer2D"
msgstr ""

#: ../../docs/tutorials/audio/audio_streams.rst:51
msgid ""
"This is a variant of AudioStreamPlayer, but emits sound in a 2D positional "
"environment. When close to the left of the screen, the panning will go left. "
"When close to the right side, it will go right."
msgstr ""

#: ../../docs/tutorials/audio/audio_streams.rst:57
msgid ""
"Area2Ds can be used to divert sound from any AudioStreamPlayer2Ds they "
"contain to specific buses. This makes it possible to create buses with "
"different reverb or sound qualities to handle action happening in a "
"particular parts of your game world."
msgstr ""

#: ../../docs/tutorials/audio/audio_streams.rst:65
msgid "AudioStreamPlayer3D"
msgstr ""

#: ../../docs/tutorials/audio/audio_streams.rst:67
msgid ""
"This is a variant of AudioStreamPlayer, but emits sound in a 3D positional "
"environment. Depending on the location of the player relative to the screen, "
"it can position sound in stereo, 5.1 or 7.1 depending on the chosen audio "
"setup."
msgstr ""

#: ../../docs/tutorials/audio/audio_streams.rst:71
msgid ""
"Similar to AudioStreamPlayer2D, an Area can divert the sound to an audio bus."
msgstr ""

#: ../../docs/tutorials/audio/audio_streams.rst:75
msgid ""
"Unlike for 2D, the 3D version of AudioStreamPlayer has a few more advanced "
"options:"
msgstr ""

#: ../../docs/tutorials/audio/audio_streams.rst:80
msgid "Reverb buses"
msgstr ""

#: ../../docs/tutorials/audio/audio_streams.rst:82
msgid ""
"Godot allows for 3D audio streams that enter a specific Area node to send "
"dry and wet audio to separate buses. This is useful when you have several "
"reverb configurations for different types of rooms. This is done by enabling "
"this type of reverb in the **Reverb Bus** section of the Area's properties:"
msgstr ""

#: ../../docs/tutorials/audio/audio_streams.rst:89
msgid ""
"At the same time, a special bus layout is created where each area receives "
"the reverb info from each area. A Reverb effect needs to be created and "
"configured in each reverb bus to complete the setup for the desired effect:"
msgstr ""

#: ../../docs/tutorials/audio/audio_streams.rst:95
msgid ""
"The Area's **Reverb Bus** section also has a parameter named **Uniformity**. "
"Some types of rooms bounce sounds more than others (like a warehouse), so "
"reverberation can be heard almost uniformly across the room even though the "
"source may be far away. Playing around with this parameter can simulate that "
"effect."
msgstr ""

#: ../../docs/tutorials/audio/audio_streams.rst:102
msgid "Doppler"
msgstr ""

#: ../../docs/tutorials/audio/audio_streams.rst:104
msgid ""
"When the relative velocity between an emitter and listener changes, this is "
"perceived as an increase or decrease in the pitch of the emitted sound. "
"Godot can track velocity changes in the AudioStreamPlayer3D and Camera "
"nodes. Both nodes have this property, which must be enabled manually:"
msgstr ""

#: ../../docs/tutorials/audio/audio_streams.rst:111
msgid ""
"Enable it by setting it depending on how objects will be moved: use **Idle** "
"for objects moved using ``_process``, or **Physics** for objects moved using "
"``_physics_process``. The tracking will happen automatically."
msgstr ""

#: ../../docs/tutorials/audio/sync_with_audio.rst:4
msgid "Sync the gameplay with audio and music"
msgstr ""

#: ../../docs/tutorials/audio/sync_with_audio.rst:9
msgid ""
"In any application or game, sound and music playback will have a slight "
"delay. For games, this delay is often so small that it is negligible. Sound "
"effects will come out a few milliseconds after any play() function is "
"called. For music this does not matter as in most games it does not interact "
"with the gameplay."
msgstr ""

#: ../../docs/tutorials/audio/sync_with_audio.rst:11
msgid ""
"Still, for some games (mainly, rhythm games), it may be required to "
"synchronize player actions with something happening in a song (usually in "
"sync with the BPM). For this, having more precise timing information for an "
"exact playback position is useful."
msgstr ""

#: ../../docs/tutorials/audio/sync_with_audio.rst:13
msgid ""
"Achieving very low playback timing precision is difficult. This is because "
"many factors are at play during audio playback:"
msgstr ""

#: ../../docs/tutorials/audio/sync_with_audio.rst:15
msgid ""
"Audio is mixed in chunks (not continuously), depending on the size of audio "
"buffers used (check latency in project settings)."
msgstr ""

#: ../../docs/tutorials/audio/sync_with_audio.rst:16
msgid "Mixed chunks of audio are not played immediately."
msgstr ""

#: ../../docs/tutorials/audio/sync_with_audio.rst:17
msgid "Graphics APIs display two or three frames late."
msgstr ""

#: ../../docs/tutorials/audio/sync_with_audio.rst:18
msgid "When playing on TVs, some delay may be added due to image processing."
msgstr ""

#: ../../docs/tutorials/audio/sync_with_audio.rst:20
msgid ""
"The most common way to reduce latency is to shrink the audio buffers (again, "
"by editing the latency setting in the project settings). The problem is that "
"when latency is too small, sound mixing will require considerably more CPU. "
"This increases the risk of skipping (a crack in sound because a mix callback "
"was lost)."
msgstr ""

#: ../../docs/tutorials/audio/sync_with_audio.rst:22
msgid ""
"This is a common tradeoff, so Godot ships with sensible defaults that should "
"not need to be altered."
msgstr ""

#: ../../docs/tutorials/audio/sync_with_audio.rst:24
msgid ""
"The problem, in the end, is not this slight delay but synchronizing graphics "
"and audio for games that require it. Beginning with Godot 3.2, some helpers "
"were added to obtain more precise playback timing."
msgstr ""

#: ../../docs/tutorials/audio/sync_with_audio.rst:27
msgid "Using the system clock to sync"
msgstr ""

#: ../../docs/tutorials/audio/sync_with_audio.rst:29
msgid ""
"As mentioned before, If you call :ref:`AudioStreamPlayer."
"play()<class_AudioStreamPlayer_method_play>`, sound will not begin "
"immediately, but when the audio thread processes the next chunk."
msgstr ""

#: ../../docs/tutorials/audio/sync_with_audio.rst:31
msgid ""
"This delay can't be avoided but it can be estimated by calling :ref:"
"`AudioServer."
"get_time_to_next_mix()<class_AudioServer_method_get_time_to_next_mix>`."
msgstr ""

#: ../../docs/tutorials/audio/sync_with_audio.rst:33
msgid ""
"The output latency (what happens after the mix) can also be estimated by "
"calling :ref:`AudioServer."
"get_output_latency()<class_AudioServer_method_get_output_latency>`."
msgstr ""

#: ../../docs/tutorials/audio/sync_with_audio.rst:35
msgid ""
"Add these two and it's possible to guess almost exactly when sound or music "
"will begin playing in the speakers during *_process()*:"
msgstr ""

#: ../../docs/tutorials/audio/sync_with_audio.rst:58
msgid ""
"In the long run, though, as the sound hardware clock is never exactly in "
"sync with the system clock, the timing information will slowly drift away."
msgstr ""

#: ../../docs/tutorials/audio/sync_with_audio.rst:60
msgid ""
"For a rhythm game where a song begins and ends after a few minutes, this "
"approach is fine (and it's the recommended approach). For a game where "
"playback can last a much longer time, the game will eventually go out of "
"sync and a different approach is needed."
msgstr ""

#: ../../docs/tutorials/audio/sync_with_audio.rst:63
msgid "Using the sound hardware clock to sync"
msgstr ""

#: ../../docs/tutorials/audio/sync_with_audio.rst:65
msgid ""
"Using :ref:`AudioStreamPlayer."
"get_playback_position()<class_AudioStreamPlayer_method_get_playback_position>` "
"to obtain the current position for the song sounds ideal, but it's not that "
"useful as-is. This value will increment in chunks (every time the audio "
"callback mixed a block of sound), so many calls can return the same value. "
"Added to this, the value will be out of sync with the speakers too because "
"of the previously mentioned reasons."
msgstr ""

#: ../../docs/tutorials/audio/sync_with_audio.rst:67
msgid ""
"To compensate for the \"chunked\" output, there is a function that can "
"help: :ref:`AudioServer."
"get_time_since_last_mix()<class_AudioServer_method_get_time_since_last_mix>`."
msgstr ""

#: ../../docs/tutorials/audio/sync_with_audio.rst:70
msgid ""
"Adding the return value from this function to *get_playback_position()* "
"increases precision:"
msgstr ""

#: ../../docs/tutorials/audio/sync_with_audio.rst:77
msgid ""
"To increase precision, subtract the latency information (how much it takes "
"for the audio to be heard after it was mixed):"
msgstr ""

#: ../../docs/tutorials/audio/sync_with_audio.rst:84
msgid ""
"The result may be a bit jittery due how multiple threads work. Just check "
"that the value is not less than in the previous frame (discard it if so). "
"This is also a less precise approach than the one before, but it will work "
"for songs of any length, or synchronizing anything (sound effects, as an "
"example) to music."
msgstr ""

#: ../../docs/tutorials/audio/sync_with_audio.rst:86
msgid "Here is the same code as before using this approach:"
msgstr ""

#: ../../docs/tutorials/audio/recording_with_microphone.rst:4
msgid "Recording with microphone"
msgstr ""

#: ../../docs/tutorials/audio/recording_with_microphone.rst:6
msgid ""
"Godot supports in-game audio recording for Windows, macOS, Linux, Android "
"and iOS."
msgstr ""

#: ../../docs/tutorials/audio/recording_with_microphone.rst:9
msgid ""
"A simple demo is included in the official demo projects and will be used as "
"support for this tutorial: `<https://github.com/godotengine/godot-demo-"
"projects/tree/master/audio/mic_record>`_."
msgstr ""

#: ../../docs/tutorials/audio/recording_with_microphone.rst:14
#, fuzzy
msgid "The structure of the demo"
msgstr "스크립트의 역할"

#: ../../docs/tutorials/audio/recording_with_microphone.rst:16
msgid ""
"The demo consists of a single scene. This scene includes two major parts: "
"the GUI and the audio."
msgstr ""

#: ../../docs/tutorials/audio/recording_with_microphone.rst:19
msgid ""
"We will focus on the audio part. In this demo, a bus named ``Record`` with "
"the effect ``Record`` is created to handle the audio recording. An "
"``AudioStreamPlayer`` named ``AudioStreamRecord`` is used for recording."
msgstr ""

#: ../../docs/tutorials/audio/recording_with_microphone.rst:40
msgid ""
"The audio recording is handled by the :ref:`class_AudioEffectRecord` "
"resource which has three methods: :ref:`get_recording() "
"<class_AudioEffectRecord_method_get_recording>`, :ref:`is_recording_active() "
"<class_AudioEffectRecord_method_is_recording_active>`, and :ref:"
"`set_recording_active() "
"<class_AudioEffectRecord_method_set_recording_active>`."
msgstr ""

#: ../../docs/tutorials/audio/recording_with_microphone.rst:64
msgid ""
"At the start of the demo, the recording effect is not active. When the user "
"presses the ``RecordButton``, the effect is enabled with "
"``set_recording_active(true)``."
msgstr ""

#: ../../docs/tutorials/audio/recording_with_microphone.rst:68
msgid ""
"On the next button press, as ``effect.is_recording_active()`` is ``true``, "
"the recorded stream can be stored into the ``recording`` variable by calling "
"``effect.get_recording()``."
msgstr ""

#: ../../docs/tutorials/audio/recording_with_microphone.rst:86
msgid ""
"To playback the recording, you assign the recording as the stream of the "
"``AudioStreamPlayer`` and call ``play()``."
msgstr ""

#: ../../docs/tutorials/audio/recording_with_microphone.rst:97
msgid ""
"To save the recording, you call ``save_to_wav()`` with the path to a file. "
"In this demo, the path is defined by the user via a ``LineEdit`` input box."
msgstr ""

#: ../../docs/tutorials/physics/physics_introduction.rst:4
msgid "Physics introduction"
msgstr "물리 소개"

#: ../../docs/tutorials/physics/physics_introduction.rst:6
msgid ""
"In game development, you often need to know when two objects in the game "
"intersect or come into contact. This is known as **collision detection**. "
"When a collision is detected, you typically want something to happen. This "
"is known as **collision response**."
msgstr ""
"게임 개발 중 종종 게임의 두 물체가 교차하거나 접촉할 때를 알아야 합니다. 이"
"를 **충돌 감지** 라고 합니다. 충돌이 감지될 때, 일반적이라면 무언가가 발생하"
"길 원할겁니다. 이를 **충돌 응답**\\ 이라고 합니다."

#: ../../docs/tutorials/physics/physics_introduction.rst:11
msgid ""
"Godot offers a number of collision objects in 2D and 3D to provide both "
"collision detection and response. Trying to decide which one to use for your "
"project can be confusing. You can avoid problems and simplify development if "
"you understand how each works and what their pros and cons are."
msgstr ""
"Godot는 충돌 감지와 반응을 모두 제공하기 위해 2D와 3D로 구성된 다수의 충돌 객"
"체를 제공합니다. 프로젝트에 이 중 어떠한 것을 사용할지 결정하려는 것은 혼란스"
"러울 수 있습니다. 하지만 각각의 작동 방식과 장단점을 이해한다면 이러한 문제"
"를 피하고 개발을 간소화할 수 있습니다."

#: ../../docs/tutorials/physics/physics_introduction.rst:18
msgid "Godot's four collision object types"
msgstr "Godot의 4가지 충돌 객체 타입"

#: ../../docs/tutorials/physics/physics_introduction.rst:19
msgid "How each collision object works"
msgstr "각 충돌 객체의 작동 방식"

#: ../../docs/tutorials/physics/physics_introduction.rst:20
msgid "When and why to choose one type over another"
msgstr "한 유형을 다른 유형보다 선택해야 하는 시기 및 이유"

#: ../../docs/tutorials/physics/physics_introduction.rst:22
msgid ""
"This document's examples will use 2D objects. Every 2D physics object and "
"collision shape has a direct equivalent in 3D and in most cases they work in "
"much the same way."
msgstr ""
"이 문서의 예제에서는 2D 객체를 사용합니다. 모든 2D 객체와 충돌 모양은 3D에서 "
"직접적으로 동등하며 대부분의 경우 거의 동일한 방식으로 작동합니다."

#: ../../docs/tutorials/physics/physics_introduction.rst:27
msgid "Collision objects"
msgstr "충돌 객체"

#: ../../docs/tutorials/physics/physics_introduction.rst:29
msgid ""
"Godot offers four kinds of physics bodies, extending :ref:`CollisionObject2D "
"<class_CollisionObject2D>`:"
msgstr ""
"Godot는 :ref:`CollisionObject2D <class_CollisionObject2D>`\\ 에서 확장된 4가"
"지 종류의 물리 바디(body)를 제공합니다:"

#: ../../docs/tutorials/physics/physics_introduction.rst:35
msgid ":ref:`Area2D <class_Area2D>`"
msgstr ":ref:`Area2D <class_Area2D>`"

#: ../../docs/tutorials/physics/physics_introduction.rst:32
msgid ""
"``Area2D`` nodes provide **detection** and **influence**. They can detect "
"when objects overlap and can emit signals when bodies enter or exit. An "
"``Area2D`` can also be used to override physics properties, such as gravity "
"or damping, in a defined area."
msgstr ""
"``Area2D`` 노드는 **감지(detection)**\\ 와 **영향력(influence)**\\ 을 제공합"
"니다. 그들은 객체들이 언제 겹치는지를 감지할 수 있고, 바디가 들어가거나 나올 "
"때 시그널을 보낼 수 있습니다. ``Area2D``\\ 는 또한 정의된 영역에서 중력이나 "
"제동과 같은 물리적 특성을 치환하는데 사용될 수도 있습니다."

#: ../../docs/tutorials/physics/physics_introduction.rst:37
msgid ""
"The other three bodies extend :ref:`PhysicsBody2D <class_PhysicsBody2D>`:"
msgstr ""
"나머지 3개의 body는 :ref:`PhysicsBody2D <class_PhysicsBody2D>`\\ 에서 확장됩"
"니다:"

#: ../../docs/tutorials/physics/physics_introduction.rst:43
msgid ":ref:`StaticBody2D <class_StaticBody2D>`"
msgstr ""

#: ../../docs/tutorials/physics/physics_introduction.rst:40
msgid ""
"A static body is one that is not moved by the physics engine. It "
"participates in collision detection, but does not move in response to the "
"collision. They are most often used for objects that are part of the "
"environment or that do not need to have any dynamic behavior."
msgstr ""
"정적 바디는 물리 엔진에 의해 움직이지 않는 물체입니다. 그것은 충돌 감지에는 "
"관여하지만, 충돌에 대응하여 움직이지는 않습니다. 이것들은 환경의 일부이거나 "
"동적 동작이 필요하지 않은 객체에 가장 많이 사용됩니다."

#: ../../docs/tutorials/physics/physics_introduction.rst:48
msgid ":ref:`RigidBody2D <class_RigidBody2D>`"
msgstr ""

#: ../../docs/tutorials/physics/physics_introduction.rst:46
msgid ""
"This is the node that implements simulated 2D physics. You do not control a "
"``RigidBody2D`` directly, but instead you apply forces to it (gravity, "
"impulses, etc.) and the physics engine calculates the resulting movement. :"
"ref:`Read more about using rigid bodies. <doc_rigid_body>`"
msgstr ""
"이것은 시뮬레이션된 2D 물리를 구현하는 노드입니다. ``RigidBody2D``\\ 를 직접"
"적으로 제어하지는 않지만, 그대신 (중력, 충격 등) 힘을 가하며 물리 엔진은 그것"
"의 결과적인 움직임을 계산합니다. :ref:`리지드 바디 사용에 대해 더 알아보기. "
"<doc_rigid_body>`"

#: ../../docs/tutorials/physics/physics_introduction.rst:52
msgid ":ref:`KinematicBody2D <class_KinematicBody2D>`"
msgstr ""

#: ../../docs/tutorials/physics/physics_introduction.rst:51
msgid ""
"A body that provides collision detection, but no physics. All movement and "
"collision response must be implemented in code."
msgstr ""
"충돌 감지 기능을 제공하지만, 물리는 제공하지 않는 body입니다. 모든 이동 및 충"
"돌 반응은 코드로 구현되어야 합니다."

#: ../../docs/tutorials/physics/physics_introduction.rst:57
msgid ""
"A physics body can hold any number of :ref:`Shape2D <class_Shape2D>` objects "
"as children. These shapes are used to define the object's collision bounds "
"and to detect contact with other objects."
msgstr ""
"물리 바디는 원하는 수의 :ref:`Shape2D <class_Shape2D>` 객체를 자식으로 수용"
"할 수 있습니다. 이러한 모양은 객체의 충돌 경계를 정의하고 다른 객체와의 접촉"
"을 감지하는 데 사용됩니다."

#: ../../docs/tutorials/physics/physics_introduction.rst:61
msgid ""
"In order to detect collisions, at least one ``Shape2D`` must be assigned to "
"the object."
msgstr ""
"충돌을 감지하기 위해, 최소한 하나 이상의 ``Shape2D``\\ 가 객체에 할당되어야 "
"합니다."

#: ../../docs/tutorials/physics/physics_introduction.rst:64
msgid ""
"The most common way to assign a shape is by adding a :ref:`CollisionShape2D "
"<class_CollisionShape2D>` or :ref:`CollisionPolygon2D "
"<class_CollisionPolygon2D>` as a child of the object. These nodes allow you "
"to draw the shape directly in the editor workspace."
msgstr ""
"모양을 지정하는 가장 일반적인 방법은 객체의 자식으로 :ref:`CollisionShape2D "
"<class_CollisionShape2D>`\\ 또는 :ref:`CollisionPolygon2D "
"<class_CollisionPolygon2D>`\\ 를 추가하는 것입니다. 이러한 노드들은 편집기 작"
"업 공간에서 직접 모양을 그릴 수 있도록 합니다."

#: ../../docs/tutorials/physics/physics_introduction.rst:68
msgid ""
"Be careful to never scale your collision shapes in the editor. The \"Scale\" "
"property in the Inspector should remain ``(1, 1)``. When changing the size "
"of the collision shape, you should always use the size handles, **not** the "
"``Node2D`` scale handles. Scaling a shape can result in unexpected collision "
"behavior."
msgstr ""
"편집기에서 충돌 모양을 변경하지 않도록 주의하십시오. 인스펙터(Inspecter)의 "
"\"Scale\" 속성은  ``(1, 1)``\\ 로 유지되어야 합니다. 충돌 모양을 변경할 때는 "
"항상 ``Node2D`` 크기 핸들이 **아닌** 크기 핸들을 사용해야 합니다. 도형의 크기"
"를 조절하는 것은 예기치 않은 충돌 행동이 일어날 수 있습니다."

#: ../../docs/tutorials/physics/physics_introduction.rst:77
msgid "Physics process callback"
msgstr "물리 프로세스 콜백"

#: ../../docs/tutorials/physics/physics_introduction.rst:79
msgid ""
"The physics engine may spawn multiple threads to improve performance, so it "
"can use up to a full frame to process physics. Because of this, the value of "
"a body's state variables such as ``position`` or ``linear velocity`` may not "
"be accurate for the current frame."
msgstr ""
"물리 엔진은 성능을 향상시키기 위해 여러 개의 스레드를 생성할 수 있으므로, 물"
"리 작업을 처리하는 데 최대 프레임까지 사용할 수 있습니다. 이로 인해, ``위치"
"(position)`` 또는 ``선형 속도(linear velocity)``\\ 와 같은 바디의 상태 변수"
"의 값이 현재 프레임에 정확하지 않을 수 있습니다."

#: ../../docs/tutorials/physics/physics_introduction.rst:84
msgid ""
"In order to avoid this inaccuracy, any code that needs to access a body's "
"properties should be run in the :ref:`Node._physics_process() "
"<class_Node_method__physics_process>` callback, which is called before each "
"physics step at a constant frame rate (60 times per second by default)."
msgstr ""
"이러한 부정확성을 피하기 위해, 바디의 속성에 접근해야 하는 모든 코드는 각 물"
"리 단계 전에 일정한 프레임률 (기본 초당 60회)로 호출되는 :ref:`Node."
"_physics_process() <class_Node_method__physics_process>` 콜백에서 실행되어야 "
"합니다."

#: ../../docs/tutorials/physics/physics_introduction.rst:90
msgid "Collision layers and masks"
msgstr "충돌 레이어와 마스크"

#: ../../docs/tutorials/physics/physics_introduction.rst:92
msgid ""
"One of the most powerful, but frequently misunderstood, collision features "
"is the collision layer system. This system allows you to build up complex "
"interactions between a variety of objects. The key concepts are **layers** "
"and **masks**. Each ``CollisionObject2D`` has 20 different physics layers it "
"can interact with."
msgstr ""
"가장 강력하지만 자주 오해되는 충돌 기능로 충돌 레이어 시스템이 있습니다. 이 "
"시스템을 사용하면 다양한 객체 간의 복잡한 상호 작용을 구축할 수 있습니다. 주"
"요 개념은 **레이어**\\ 와 **마스크**\\ 입니다. 각 ``CollisionObject2D`` 에는 "
"서로 상호 작용할 수 있는 20개의 서로 다른 물리 레이어가 있습니다."

#: ../../docs/tutorials/physics/physics_introduction.rst:98
msgid "Let's look at each of the properties in turn:"
msgstr "각 속성을 차례대로 살펴보겠습니다:"

#: ../../docs/tutorials/physics/physics_introduction.rst:102
msgid "collision_layer"
msgstr ""

#: ../../docs/tutorials/physics/physics_introduction.rst:101
msgid ""
"This describes the layers that the object appears **in**. By default, all "
"bodies are on layer ``1``."
msgstr ""
"이것은 객체가 **나타나는** 레이어를 형성합니다. 기본적으로 모든 바디는 레이"
"어 ``1``에 있습니다."

#: ../../docs/tutorials/physics/physics_introduction.rst:107
msgid "collision_mask"
msgstr ""

#: ../../docs/tutorials/physics/physics_introduction.rst:105
msgid ""
"This describes what layers the body will **scan** for collisions. If an "
"object isn't in one of the mask layers, the body will ignore it. By default, "
"all bodies scan layer ``1``."
msgstr ""
"이것은 바디가 충돌을 위해 **스캔**\\ 하는 레이어를 뜻합니다. 객체가 마스크 레"
"이어 중 하나에 있지 않으면, 바디는 이를 무시합니다. 기본적으로 모든 바디는 레"
"이어 ``1``\\ 을 스캔합니다."

#: ../../docs/tutorials/physics/physics_introduction.rst:109
msgid ""
"These properties can be configured via code, or by editing them in the "
"Inspector."
msgstr ""
"이러한 속성은 코드를 통해, 혹은 인스펙터(Inspecter)에서 편집하여 구성할 수 있"
"습니다."

#: ../../docs/tutorials/physics/physics_introduction.rst:111
msgid ""
"Keeping track of what you're using each layer for can be difficult, so you "
"may find it useful to assign names to the layers you're using. Names can be "
"assigned in Project Settings -> Layer Names."
msgstr ""
"각 레이어를 사용하는 대상을 추적하는 것은 어려울 수 있으므로, 사용 중인 레이"
"어에 이름을 지정하는 것이 유용할 수 있습니다. 이름은 프로젝트 설정 -> Layer "
"Names에서 지정할 수 있습니다."

#: ../../docs/tutorials/physics/physics_introduction.rst:117
msgid "**Example:**"
msgstr "**예시:**"

#: ../../docs/tutorials/physics/physics_introduction.rst:119
msgid ""
"You have four node types in your game: Walls, Player, Enemy, and Coin. Both "
"Player and Enemy should collide with Walls. The Player node should detect "
"collisions with both Enemy and Coin, but Enemy and Coin should ignore each "
"other."
msgstr ""
"당신의 게임에는 4가지의 노드 타입이 있습니다: 벽, 플레이어, 적, 코인. 플레이"
"어와 적 모두 벽과 충돌해야 합니다. 플레이어 노드는 적과 코인의 충돌을 모두 감"
"지해야 하지만, 적과 코인은 서로 무시해야 합니다."

#: ../../docs/tutorials/physics/physics_introduction.rst:124
msgid ""
"Start by naming layers 1-4 \"walls\", \"player\", \"enemies\", and \"coins\" "
"and place each node type in its respective layer using the \"Layer\" "
"property. Then set each node's \"Mask\" property by selecting the layers it "
"should interact with. For example, the Player's settings would look like "
"this:"
msgstr ""
"레이어 1-4를 \"walls\", \"player\", \"enemies\", 그리고 \"coins\"으로 이름을 "
"지정하는 걸로 시작하고, \"Layer\" 속성을 사용하여 각 노드 타입을 각각의 레이"
"어에 배치합니다. 그런 다음 각 노드가 상호 작용할 레이어를 선택하여 각 노드의 "
"\"Mask\" 속성을 설정합니다. 예를 들어, 플레이어의 설정은 다음과 같습니다:"

#: ../../docs/tutorials/physics/physics_introduction.rst:133
msgid "Area2D"
msgstr ""

#: ../../docs/tutorials/physics/physics_introduction.rst:135
msgid ""
"Area nodes provide **detection** and **influence**. They can detect when "
"objects overlap and emit signals when bodies enter or exit. Areas can also "
"be used to override physics properties, such as gravity or damping, in a "
"defined area."
msgstr ""
"Area 노드는 **감지**\\ 와 **영향력**\\ 을 제공합니다. 그들은 물체가 중복되는 "
"때를 감지하고 바디가 들어가거나 나올 때 시그널을 방출할 수 있습니다.  Area는 "
"정의된 영역에서 중력 또는 제동과 같은 물리적 특성을 치환하는 데 사용될 수도 "
"있습니다."

#: ../../docs/tutorials/physics/physics_introduction.rst:140
msgid "There are three main uses for :ref:`Area2D <class_Area2D>`:"
msgstr ":ref:`Area2D <class_Area2D>`\\ 에는 3가지 주요 용도가 있습니다:"

#: ../../docs/tutorials/physics/physics_introduction.rst:142
msgid "Overriding physics parameters (such as gravity) in a given region."
msgstr "특정 지역에서 (중력과 같은) 물리적 매개변수를 오버라이딩 합니다."

#: ../../docs/tutorials/physics/physics_introduction.rst:144
msgid ""
"Detecting when other bodies enter or exit a region or what bodies are "
"currently in a region."
msgstr ""
"다른 바디가 특정 지역에 들어오거나 나가는 때를 감지하거나 현재 지역에 있는 바"
"디가 무엇인 지를 탐지합니다."

#: ../../docs/tutorials/physics/physics_introduction.rst:146
msgid "Checking other areas for overlap."
msgstr "다른 영역들이 겹치는지 확인합니다."

#: ../../docs/tutorials/physics/physics_introduction.rst:148
msgid "By default, areas also receive mouse and touchscreen input."
msgstr "기본적으로, 영역은 마우스 및 터치스크린 입력도 받습니다."

#: ../../docs/tutorials/physics/physics_introduction.rst:151
msgid "StaticBody2D"
msgstr ""

#: ../../docs/tutorials/physics/physics_introduction.rst:153
msgid ""
"A static body is one that is not moved by the physics engine. It "
"participates in collision detection, but does not move in response to the "
"collision. However, it can impart motion or rotation to a colliding body "
"**as if** it were moving, using its ``constant_linear_velocity`` and "
"``constant_angular_velocity`` properties."
msgstr ""
"정적 바디는 물리 엔진에 의해 움직이지 않는 물체입니다. 그것은 충돌 감지에는 "
"참여하지만 충돌에 대응하여 움직이지 않습니다. 그러나, "
"``constant_linear_velocity``\\ 와 ``constant_angular_velocity``\\ 의 특성을 "
"이용하여 **마치** 움직이는 것처럼 충돌하는 바디에 움직임이나 회전을 전달할 "
"수 있습니다."

#: ../../docs/tutorials/physics/physics_introduction.rst:158
msgid ""
"``StaticBody2D`` nodes are most often used for objects that are part of the "
"environment or that do not need to have any dynamic behavior."
msgstr ""
"``StaticBody2D`` 노드는 환경에 속하거나 동적 동작을 수행할 필요가 없는 객체"
"에 가장 많이 사용됩니다."

#: ../../docs/tutorials/physics/physics_introduction.rst:161
msgid "Example uses for ``StaticBody2D``:"
msgstr "``StaticBody2D`` 이용 예시:"

#: ../../docs/tutorials/physics/physics_introduction.rst:163
msgid "Platforms (including moving platforms)"
msgstr "플랫폼 (이동 플랫폼 포함)"

#: ../../docs/tutorials/physics/physics_introduction.rst:164
msgid "Conveyor belts"
msgstr "컨베이어 벨트"

#: ../../docs/tutorials/physics/physics_introduction.rst:165
msgid "Walls and other obstacles"
msgstr "벽 및 기타 장애물"

#: ../../docs/tutorials/physics/physics_introduction.rst:168
msgid "RigidBody2D"
msgstr ""

#: ../../docs/tutorials/physics/physics_introduction.rst:170
msgid ""
"This is the node that implements simulated 2D physics. You do not control a :"
"ref:`RigidBody2D <class_RigidBody2D>` directly. Instead, you apply forces to "
"it and the physics engine calculates the resulting movement, including "
"collisions with other bodies, and collision responses, such as bouncing, "
"rotating, etc."
msgstr ""
"이것은 시뮬레이션 된 2D 물리를 구현하는 노드입니다. 당신은 :ref:`RigidBody2D "
"<class_RigidBody2D>`\\ 를 직접 제어하지는 않습니다. 대신 힘을 가하게 되면 물"
"리 엔진은 다른 물체와의 충돌을 포함한 결과 움직임과 충돌, 회전 등의 충돌 반응"
"을 계산합니다."

#: ../../docs/tutorials/physics/physics_introduction.rst:176
msgid ""
"You can modify a rigid body's behavior via  properties such as \"Mass\", "
"\"Friction\", or \"Bounce\", which can be set in the Inspector."
msgstr ""
"인스펙터(Inspecter)에서 설정할 수 있는 \"Mass\", \"Friction\", 또는 \"Bounce"
"\"와 같은 특성을 통해 리지드 바디의 동작을 수정할 수 있습니다."

#: ../../docs/tutorials/physics/physics_introduction.rst:179
msgid ""
"The body's behavior is also affected by the world's properties, as set in "
"`Project Settings -> Physics`, or by entering an :ref:`Area2D "
"<class_Area2D>` that is overriding the global physics properties."
msgstr ""
"바디의 행동은 또한 `프로젝트 설정 -> Physics`\\ 에서 설정한 월드 속성의 영향"
"을 받거나 전역 물리 특성을 오버라이딩 하는 :ref:`Area2D <class_Area2D>`\\ 를 "
"입력한 것에 영향을 받습니다."

#: ../../docs/tutorials/physics/physics_introduction.rst:183
msgid ""
"When a rigid body is at rest and hasn't moved for a while, it goes to sleep. "
"A sleeping body acts like a static body, and its forces are not calculated "
"by the physics engine. The body will wake up when forces are applied, either "
"by a collision or via code."
msgstr ""
"리지드 바디가 쉬는 상태이고 한동안 움직이지 않으면, 잠들게 됩니다. 잠든 바디"
"는 정적 바디처럼 작용하며, 그 힘은 물리 엔진에 의해 계산되지 않습니다. 충돌 "
"또는 코드를 통해 힘이 가해지면 바디가 깨어나게 됩니다."

#: ../../docs/tutorials/physics/physics_introduction.rst:189
msgid "Rigid body modes"
msgstr "리지드 바디 모드"

#: ../../docs/tutorials/physics/physics_introduction.rst:191
msgid "A rigid body can be set to one of four modes:"
msgstr "리지드 바디는 다음 네 가지 모드 중 하나로 설정할 수 있습니다:"

#: ../../docs/tutorials/physics/physics_introduction.rst:193
msgid ""
"**Rigid** - The body behaves as a physical object. It collides with other "
"bodies and responds to forces applied to it. This is the default mode."
msgstr ""
"**Rigid** - 이 바디는 물리적 물체처럼 작동합니다. 그것은 다른 바디들과 충돌하"
"고 그것에 적용되는 힘에 반응합니다. 기본 모드입니다."

#: ../../docs/tutorials/physics/physics_introduction.rst:194
msgid ""
"**Static** - The body behaves like a :ref:`StaticBody2D "
"<class_StaticBody2D>` and does not move."
msgstr ""
"**Static** - 이 바디는 :ref:`StaticBody2D <class_StaticBody2D>`\\ 처럼 동작하"
"며 움직이지 않습니다."

#: ../../docs/tutorials/physics/physics_introduction.rst:195
msgid "**Character** - Similar to \"Rigid\" mode, but the body cannot rotate."
msgstr ""
"**Character** - \"Rigid\" 모드와 유사하지만 바디를 회전할 수는 없습니다."

#: ../../docs/tutorials/physics/physics_introduction.rst:196
msgid ""
"**Kinematic** - The body behaves like a :ref:`KinematicBody2D "
"<class_KinematicBody2D>` and must be moved by code."
msgstr ""
"**Kinematic** - 이 바디는 :ref:`KinematicBody2D <class_KinematicBody2D>`\\ 처"
"럼 작동하며 코드를 통해 움직여야 한다."

#: ../../docs/tutorials/physics/physics_introduction.rst:199
msgid "Using RigidBody2D"
msgstr "RigidBody2D 사용하기"

#: ../../docs/tutorials/physics/physics_introduction.rst:201
msgid ""
"One of the benefits of using a rigid body is that a lot of behavior can be "
"had \"for free\" without writing any code. For example, if you were making "
"an \"Angry Birds\"-style game with falling blocks, you would only need to "
"create RigidBody2Ds and adjust their properties. Stacking, falling, and "
"bouncing would automatically be calculated by the physics engine."
msgstr ""
"리지드 바디를 사용하는 것의 이점 중 하나는 코드를 쓰지 않고도 많은 행동을 "
"\"자유롭게\" 할 수 있다는 것입니다. 예를 들어, 떨어지는 블록으로 \"앵그리 버"
"드\"-스타일의 게임을 만드는 경우, RigidBody2D들을 만들고 해당 속성을 조정하기"
"만 하면 됩니다. 쌓기, 낙하 및 튕김은 물리 엔진에 의해 자동으로 계산됩니다."

#: ../../docs/tutorials/physics/physics_introduction.rst:207
msgid ""
"However, if you do wish to have some control over the body, you should take "
"care - altering the ``position``, ``linear_velocity``, or other physics "
"properties of a rigid body can result in unexpected behavior. If you need to "
"alter any of the physics-related properties, you should use the :ref:"
"`_integrate_forces() <class_RigidBody2D_method__integrate_forces>` callback "
"instead of ``_physics_process()``. In this callback, you have access to the "
"body's :ref:`Physics2DDirectBodyState <class_Physics2DDirectBodyState>`, "
"which allows for safely changing properties and synchronizing them with the "
"physics engine."
msgstr ""
"하지만, 만약 여러분이 바디를 어느 정도 통제하고 싶다면, 조심히 다루어야 합니"
"다 - ``position``, ``linear_velocity`` 또는 리지드 바디의 다른 물리적 특성들"
"을 바꾸면 예상치 못한 행동을 초래할 수 있습니다. 물리학 관련 속성을 변경해야 "
"하는 경우 ``_physics_process()`` 대신 :ref:`_integrate_forces() "
"<class_RigidBody2D_method__integrate_forces>` 콜백을 사용해야 합니다. 이 콜백"
"에서는 안전하게 속성을 변경하고 물리 엔진과 동기화할 수 있는 :ref:"
"`Physics2DDirectBodyState <class_Physics2DDirectBodyState>`\\ 에 접근할 수 있"
"습니다."

#: ../../docs/tutorials/physics/physics_introduction.rst:216
msgid "For example, here is the code for an \"Asteroids\" style spaceship:"
msgstr "예를 들어, 다음은 \"소행성\" 스타일 우주선의 코드입니다:"

#: ../../docs/tutorials/physics/physics_introduction.rst:261
msgid ""
"Note that we are not setting the ``linear_velocity`` or ``angular_velocity`` "
"properties directly, but rather applying forces (``thrust`` and ``torque``) "
"to the body and letting the physics engine calculate the resulting movement."
msgstr ""
"``linear_velocity`` 또는 ``angular_velocity``\\ 를 직접 설정하는 것이 아니라 "
"바디에 힘을 (``thrust``\\ 과 ``torque``) 적용하고 그 결과적인 움직임을 물리 "
"엔진이 계산하도록 한다는 점에 유의해야 합니다."

#: ../../docs/tutorials/physics/physics_introduction.rst:265
msgid ""
"When a rigid body goes to sleep, the ``_integrate_forces()`` function will "
"not be called. To override this behavior, you will need to keep the body "
"awake by creating a collision, applying a force to it, or by disabling the :"
"ref:`can_sleep <class_RigidBody2D_property_can_sleep>` property. Be aware "
"that this can have a negative effect on performance."
msgstr ""
"리지드 바디가 잠에 들 때 ``_integrate_forces()`` 함수는 호출되지 않을 것입니"
"다. 이 동작을 오버라이드 하려면 충돌을 만들거나, 충돌을 적용하거나, 힘을 가하"
"거나, :ref:`can_sleep <class_RigidBody2D_property_can_sleep>` 속성을 비활성화"
"하여 바디를 깨어 있게 해야 합니다. 이것이 퍼포먼스에 안 좋은 영향을 줄 수 있"
"으니 조심하세요."

#: ../../docs/tutorials/physics/physics_introduction.rst:272
msgid "Contact reporting"
msgstr "접촉 알림"

#: ../../docs/tutorials/physics/physics_introduction.rst:274
msgid ""
"By default, rigid bodies do not keep track of contacts, because this can "
"require a huge amount of memory if many bodies are in the scene. To enable "
"contact reporting, set the :ref:`contacts_reported "
"<class_RigidBody2D_property_contacts_reported>` property to a non-zero "
"value. The contacts can then be obtained via :ref:`Physics2DDirectBodyState."
"get_contact_count() "
"<class_Physics2DDirectBodyState_method_get_contact_count>` and related "
"functions."
msgstr ""
"기본적으로 리지드 바디는 접촉면을 추적하지 않는데, 많은 바디가 씬 내에 있을 "
"경우 엄청난 양의 메모리가 요구되기 때문입니다. 접촉 알림를 사용하려면 :ref:"
"`contacts_reported <class_RigidBody2D_property_contacts_reported>` 속성을 0"
"이 아닌 값으로 설정합니다. 그렇게 하면 접촉 알림은 :ref:"
"`Physics2DDirectBodyState.get_contact_count() "
"<class_Physics2DDirectBodyState_method_get_contact_count>`\\ 이나 관련된 기능"
"을 통해 얻을 수 있습니다."

#: ../../docs/tutorials/physics/physics_introduction.rst:281
msgid ""
"Contact monitoring via signals can be enabled via the :ref:`contact_monitor "
"<class_RigidBody2D_property_contact_monitor>` property. See :ref:"
"`RigidBody2D <class_RigidBody2D>` for the list of available signals."
msgstr ""
"시그널을 통한 접촉 모니터링은 :ref:`contact_monitor "
"<class_RigidBody2D_property_contact_monitor>` 속성을 통해 활성화할 수 있습니"
"다. 사용 가능한 시그널 목록은 :ref:`RigidBody2D <class_RigidBody2D>`\\ 를 참"
"조하십시오."

#: ../../docs/tutorials/physics/physics_introduction.rst:286
msgid "KinematicBody2D"
msgstr ""

#: ../../docs/tutorials/physics/physics_introduction.rst:288
msgid ""
":ref:`KinematicBody2D <class_KinematicBody2D>` bodies detect collisions with "
"other bodies, but are not affected by physics properties like gravity or "
"friction. Instead, they must be controlled by the user via code. The physics "
"engine will not move a kinematic body."
msgstr ""
":ref:`KinematicBody2D <class_KinematicBody2D>` 바디는 다른 물체와의 충돌을 감"
"지하지만 중력이나 마찰과 같은 물리적 성질의 영향을 받지 않습니다. 대신 코드"
"를 통해 사용자가 제어해야 합니다. 물리 엔진은 키네마틱 바디를 움직이지 않습니"
"다."

#: ../../docs/tutorials/physics/physics_introduction.rst:293
msgid ""
"When moving a kinematic body, you should not set its ``position`` directly. "
"Instead, you use the ``move_and_collide()`` or ``move_and_slide()`` methods. "
"These methods move the body along a given vector, and it will instantly stop "
"if a collision is detected with another body. After the body has collided, "
"any collision response must be coded manually."
msgstr ""
"키네마틱 바디를 옮길 때는 ``위치``\\ 를 직접 정해서는 안 됩니다. 대신 "
"``move_and_collide()`` 또는 ``move_and_slide()`` 메서드를 사용합니다. 이 메서"
"드들은 주어진 벡터를 따라 바디를 움직이며, 다른 바디와의 충돌이 감지되면 즉"
"시 정지합니다. 바디가 충돌한 후에는 모든 충돌 응답을 수동으로 코딩해야 합니"
"다."

#: ../../docs/tutorials/physics/physics_introduction.rst:300
msgid "Kinematic collision response"
msgstr "키네마틱 충돌 응답"

#: ../../docs/tutorials/physics/physics_introduction.rst:302
msgid ""
"After a collision, you may want the body to bounce, to slide along a wall, "
"or to alter the properties of the object it hit. The way you handle "
"collision response depends on which method you used to move the "
"KinematicBody2D."
msgstr ""
"충돌 후 바디가 튀어 오르거나, 벽을 따라 미끄러지거나, 부딪힌 개체의 속성을 변"
"경하기를 원할 수 있습니다. 충돌 응답을 다루기 위해선 KinematicBody2D을 움직이"
"기 위해 사용된 메서드에 의해 결정됩니다."

#: ../../docs/tutorials/physics/physics_introduction.rst:307
msgid ":ref:`move_and_collide <class_KinematicBody2D_method_move_and_collide>`"
msgstr ""

#: ../../docs/tutorials/physics/physics_introduction.rst:309
msgid ""
"When using ``move_and_collide()``, the function returns a :ref:"
"`KinematicCollision2D <class_KinematicCollision2D>` object, which contains "
"information about the collision and the colliding body. You can use this "
"information to determine the response."
msgstr ""
"이 함수는 ``move_and_collide()``\\ 를 사용할 때 충돌과 충돌 물체에 대한 정보"
"가 포함된 :ref:`KinematicCollision2D <class_KinematicCollision2D>` 객체를 반"
"환합니다. 이 정보를 사용하여 응답을 확인할 수 있습니다."

#: ../../docs/tutorials/physics/physics_introduction.rst:314
msgid ""
"For example, if you want to find the point in space where the collision "
"occurred:"
msgstr ""
"예를 들어, 충돌이 발생한 공간의 지점을 찾으려면 다음과 같이 하면 됩니다:"

#: ../../docs/tutorials/physics/physics_introduction.rst:345
msgid "Or to bounce off of the colliding object:"
msgstr "혹은 충돌 개체가 튀어나오도록 하려면 다음과 같습니다:"

#: ../../docs/tutorials/physics/physics_introduction.rst:374
msgid ":ref:`move_and_slide <class_KinematicBody2D_method_move_and_slide>`"
msgstr ""

#: ../../docs/tutorials/physics/physics_introduction.rst:376
msgid ""
"Sliding is a common collision response; imagine a player moving along walls "
"in a top-down game or running up and down slopes in a platformer. While it's "
"possible to code this response yourself after using ``move_and_collide()``, "
"``move_and_slide()`` provides a convenient way to implement sliding movement "
"without writing much code."
msgstr ""
"슬라이딩은 일반적인 충돌 반응입니다; 플레이어가 탑뷰 게임에서 벽을 따라 움직"
"이거나 플랫폼 안에서 오르내리는 경사를 상상해 보십시오. "
"``move_and_collide()``\\ 를 사용한 후 직접 이를 코딩할 수 있지만 "
"``move_and_slide()``\\ 는 많은 코드를 작성하지 않고 슬라이딩 이동을 실행할 "
"수 있는 편리한 방법입니다."

#: ../../docs/tutorials/physics/physics_introduction.rst:382
msgid ""
"``move_and_slide()`` automatically includes the timestep in its calculation, "
"so you should **not** multiply the velocity vector by ``delta``."
msgstr ""
"``move_and_slide()`` 는 자동으로 타임 스텝를 계산에 포함하므로, 속도 벡터에 "
"``delta``\\ 를 곱하면 **안 됩니다**."

#: ../../docs/tutorials/physics/physics_introduction.rst:386
msgid ""
"For example, use the following code to make a character that can walk along "
"the ground (including slopes) and jump when standing on the ground:"
msgstr ""
"예를 들어, 다음 코드를 사용하여 지면 (경사 포함)을 따라 걸을 수 있고 지면에 "
"있을 때 점프할 수 있는 캐릭터를 만들 수 있습니다:"

#: ../../docs/tutorials/physics/physics_introduction.rst:451
msgid ""
"See :ref:`doc_kinematic_character_2d` for more details on using "
"``move_and_slide()``, including a demo project with detailed code."
msgstr ""
"자세한 코드가 포함된 데모 프로젝트를 포함하여 ``move_and_slide()`` 사용에 대"
"한 자세한 내용은 :ref:`doc_kinematic_character_2d`\\ 를 참조하십시오."

#: ../../docs/tutorials/physics/rigid_body.rst:4
msgid "RigidBody"
msgstr "RigidBody"

#: ../../docs/tutorials/physics/rigid_body.rst:7
msgid "What is a rigid body?"
msgstr "리지드 바디(rigid body)란?"

#: ../../docs/tutorials/physics/rigid_body.rst:9
msgid ""
"A rigid body is one that is directly controlled by the physics engine in "
"order to simulate the behavior of physical objects. In order to define the "
"shape of the body, it must have one or more :ref:`Shape <class_Shape>` "
"objects assigned. Note that setting the position of these shapes will affect "
"the body's center of mass."
msgstr ""
"리지드 바디는 물리적 개체의 행동을 시뮬레이션 하기 위해 물리 엔진으로 직접 다"
"루는 바디입니다. 바디의 모양을 정의하려면 하나 이상의 :ref:`Shape "
"<class_Shape>` 개체가 지정되어 있어야 합니다. 이러한 모양의 위치를 설정하면 "
"바디의 무게 중심에 영향을 미칩니다."

#: ../../docs/tutorials/physics/rigid_body.rst:13
msgid "How to control a rigid body"
msgstr "리지드 바디를 제어하는 방법"

#: ../../docs/tutorials/physics/rigid_body.rst:15
msgid ""
"A rigid body's behavior can be altered by setting its properties, such as "
"friction, mass, bounce, etc. These properties can be set in the Inspector or "
"via code. See :ref:`RigidBody <class_RigidBody>` for the full list of "
"properties and their effects."
msgstr ""
"리지드 바디의 동작은 마찰, 질량, 바운스 등의 속성을 설정하여 변경할 수 있습니"
"다. 이러한 속성은 인스펙터(Inspecter)나 코드를 통해 설정할 수 있습니다. 속성"
"과 그 효과의 전체 목록은 :ref:`RigidBody <class_RigidBody>`\\ 를 참고하세요."

#: ../../docs/tutorials/physics/rigid_body.rst:17
msgid ""
"There are several ways to control a rigid body's movement, depending on your "
"desired application."
msgstr ""
"원하는 용도에 따라 리지드 바디의 움직임을 제어하는 몇 가지 방법이 있습니다."

#: ../../docs/tutorials/physics/rigid_body.rst:19
msgid ""
"If you only need to place a rigid body once, for example to set its initial "
"location, you can use the methods provided by the :ref:`Spatial "
"<class_Spatial>` node, such as ``set_global_transform()`` or ``look_at()``. "
"However, these methods cannot be called every frame or the physics engine "
"will not be able to correctly simulate the body's state. As an example, "
"consider a rigid body that you want to rotate so that it points towards "
"another object. A common mistake when implementing this kind of behavior is "
"to use ``look_at()`` every frame, which breaks the physics simulation. "
"Below, we'll demonstrate how to implement this correctly."
msgstr ""
"예를 들어, 초기 위치를 설정하기 위해 리지드 바디를 한 번만 배치해야 된다면 "
"``set_global_transform()`` 또는 ``look_at()``\\ 과 같은 :ref:`Spatial "
"<class_Spatial>` 노드가 제공하는 메서드를 사용할 수 있습니다. 그러나 이 메서"
"드들이 모든 프레임을 호출하지 못하거나 물리 엔진이 바디 상태를 정확하게 시뮬"
"레이션 할 수 없을 것입니다. 예를 들어, 다른 물체를 가리키도록 회전할 리지드 "
"바디를 고려하는것이 있습니다. 이런 행동을 시행할 때 흔히 저지르는 실수는 "
"``look_at()``\\ 을 모든 프레임에 사용하는 것인데 이것은 물리학적 시뮬레이션"
"을 깨뜨리게 됩니다. 아래에서는, 이를 올바르게 구현하는 방법을 시연합니다."

#: ../../docs/tutorials/physics/rigid_body.rst:22
msgid ""
"The fact that you can't use ``set_global_transform()`` or ``look_at()`` "
"methods doesn't mean that you can't have full control of a rigid body. "
"Instead, you can control it by using the ``_integrate_forces()`` callback. "
"In this method, you can add *forces*, apply *impulses*, or set the "
"*velocity* in order to achieve any movement you desire."
msgstr ""
"``set_global_transform()``\\ 이나 ``look_at()``\\ 의 방법을 사용할 수 없다는 "
"사실이 리지드 바디를 완전히 통제할 수 없다는 것을 의미하지는 않습니다. 대신 "
"``_integrate_forces()`` 콜백을 사용하여 제어할 수 있습니다. 이 기능에서 원하"
"는 이동을 달성하기 위해 *forces*\\ 를 추가하거나 *impulses*\\ 를 적용하거나 "
"*velocity*\\ 를 설정할 수 있습니다."

#: ../../docs/tutorials/physics/rigid_body.rst:25
msgid "The \"look at\" method"
msgstr "\"look at\" 메서드"

#: ../../docs/tutorials/physics/rigid_body.rst:27
msgid ""
"As described above, using the Spatial node's ``look_at()`` method can't be "
"used each frame to follow a target. Here is a custom ``look_at()`` method "
"that will work reliably with rigid bodies:"
msgstr ""
"위에서 설명한 것처럼, Spatial 노드의 ``look_at()``\\ 을 각 프레임에 사용하여 "
"대상을 따라가도록 할 수는 없습니다. 다음은 리지드 바디에서 안정적으로 작동하"
"는 맞춤 ``look_at()`` 함수입니다:"

#: ../../docs/tutorials/physics/rigid_body.rst:69
msgid ""
"This method uses the rigid body's ``set_angular_velocity()`` method to "
"rotate the body. It first calculates the difference between the current and "
"desired angle and then adds the velocity needed to rotate by that amount in "
"one frame's time."
msgstr ""
"이 함수는 바디를 회전시키기 위해 리지드 바디의 ``set_angular_velocity()`` 메"
"서드를 사용합니다. 먼저 현재와 원하는 각도의 차이를 계산한 다음 한 프레임의 "
"시간에 해당 양만큼 회전하는 데 필요한 속도를 추가합니다."

#: ../../docs/tutorials/physics/rigid_body.rst:71
msgid ""
"This script will not work with rigid bodies in *character mode* because "
"then, the body's rotation is locked. In that case, you would have to rotate "
"the attached mesh node instead using the standard Spatial methods."
msgstr ""
"리지드 바디에서 이 스크립트는 바디의 회전을 잠그는 *character 모드*\\ 이면 작"
"동하지 않을 것입니다. 이 경우 표준 Spatial 메서드를 사용하여 연결된 메시 노드"
"를 회전해야 합니다."

#: ../../docs/tutorials/physics/using_area_2d.rst:4
#, fuzzy
msgid "Using Area2D"
msgstr "타일맵 사용하기"

#: ../../docs/tutorials/physics/using_area_2d.rst:9
#, fuzzy
msgid ""
"Godot offers a number of collision objects to provide both collision "
"detection and response. Trying to decide which one to use for your project "
"can be confusing. You can avoid problems and simplify development if you "
"understand how each of them works and what their pros and cons are. In this "
"tutorial, we'll look at the :ref:`Area2D <class_Area2D>` node and show some "
"examples of how it can be used."
msgstr ""
"Godot은 충돌 감지와 반응성을 모두 제공하기 위해 많은 충돌 객체를 제공합니다. "
"프로젝트에 사용할 항목을 결정하는 것은 혼란스러울 수 있습니다. 각각의 작동 방"
"식 및 장단점이 무엇인지 이해한다면 문제를 피하고 개발을 간소화할 수 있습니"
"다. 이 튜토리얼에서는 :ref:`KinematicBody2D <class_KinematicBody2D>` 노드를 "
"살펴보고 사용 방법에 대한 몇 가지 예를 보여 드리겠습니다."

#: ../../docs/tutorials/physics/using_area_2d.rst:15
#: ../../docs/tutorials/physics/using_kinematic_body_2d.rst:16
msgid ""
"This document assumes you're familiar with Godot's various physics bodies. "
"Please read :ref:`doc_physics_introduction` first."
msgstr ""
"이 문서는 당신이 Godot의 다양한 물리 바디에 대해 잘 알고 있다고 가정합니다. "
"먼저 :ref:`doc_physics_introduction`\\ 를 읽어주세요."

#: ../../docs/tutorials/physics/using_area_2d.rst:19
#, fuzzy
msgid "What is an area?"
msgstr "리지드 바디(rigid body)란?"

#: ../../docs/tutorials/physics/using_area_2d.rst:21
msgid ""
"An Area2D defines a region of 2D space. In this space you can detect other :"
"ref:`CollisionObject2D <class_CollisionObject2D>` nodes overlapping, "
"entering, and exiting. Areas also allow for overriding local physics "
"properties. We'll explore each of these functions below."
msgstr ""

#: ../../docs/tutorials/physics/using_area_2d.rst:27
#, fuzzy
msgid "Area properties"
msgstr "노드 속성"

#: ../../docs/tutorials/physics/using_area_2d.rst:29
msgid "Areas have many properties you can use to customize their behavior."
msgstr ""

#: ../../docs/tutorials/physics/using_area_2d.rst:33
msgid ""
"The first eight properties are used to configure the area's physics override "
"behavior. We'll look at how to use those in the section below."
msgstr ""

#: ../../docs/tutorials/physics/using_area_2d.rst:36
msgid "*Monitoring* and *Monitorable* are used to enable and disable the area."
msgstr ""

#: ../../docs/tutorials/physics/using_area_2d.rst:38
msgid ""
"The \"Collision\" section is where you configure the area's collision "
"layer(s) and mask(s)."
msgstr ""

#: ../../docs/tutorials/physics/using_area_2d.rst:41
msgid ""
"The \"Audio Bus\" section allows you to override audio in the area, for "
"example to apply an audio effect when the player moves through."
msgstr ""

#: ../../docs/tutorials/physics/using_area_2d.rst:44
msgid ""
"Note that Area2D extends :ref:`CollisionObject2D <class_CollisionObject2D>`, "
"so it also provides properties inherited from that class, such as "
"``input_pickable``."
msgstr ""

#: ../../docs/tutorials/physics/using_area_2d.rst:48
#, fuzzy
msgid "Overlap detection"
msgstr "오버라이딩(Overriding) 가능한 함수들"

#: ../../docs/tutorials/physics/using_area_2d.rst:50
msgid ""
"Perhaps the most common use of Area2D nodes is for contact and overlap "
"detection. When you need to know that two objects have touched, but don't "
"need physical collision, you can use an area to notify you of the contact."
msgstr ""

#: ../../docs/tutorials/physics/using_area_2d.rst:54
msgid ""
"For example, let's say we're making a coin for the player to pick up. The "
"coin is not a solid object - the player can't stand on it or push it - we "
"just want it to disappear when the player touches it."
msgstr ""

#: ../../docs/tutorials/physics/using_area_2d.rst:58
#, fuzzy
msgid "Here's the node setup for the coin:"
msgstr "플레이어 바디를 위한 코드입니다:"

#: ../../docs/tutorials/physics/using_area_2d.rst:62
msgid ""
"To detect the overlap, we'll connect the appropriate signal on the Area2d. "
"Which signal to use depends on the player's node type. If the player is "
"another area, use ``area_entered``. However, let's assume our player is a "
"``KinematicBody2D`` (and therefore a ``CollisionObject2D`` type), so we'll "
"connect the ``body_entered`` signal."
msgstr ""

#: ../../docs/tutorials/physics/using_area_2d.rst:68
msgid ""
"If you're not familiar with using signals, see :ref:`doc_signals` for an "
"introduction."
msgstr ""

#: ../../docs/tutorials/physics/using_area_2d.rst:90
msgid "Now our player can collect the coins!"
msgstr ""

#: ../../docs/tutorials/physics/using_area_2d.rst:92
#, fuzzy
msgid "Some other usage examples:"
msgstr "몇 가지 예제:"

#: ../../docs/tutorials/physics/using_area_2d.rst:94
msgid ""
"Areas are great for bullets and other projectiles that hit and deal damage, "
"but don't need any other physics such as bouncing."
msgstr ""

#: ../../docs/tutorials/physics/using_area_2d.rst:95
msgid ""
"Use a large circular area around an enemy to define its \"detect\" radius. "
"When the player is outside the area, the enemy can't \"see\" it."
msgstr ""

#: ../../docs/tutorials/physics/using_area_2d.rst:96
msgid ""
"\"Security cameras\" - In a large level with multiple cameras, attach areas "
"to each camera and activate them when the player enters."
msgstr ""

#: ../../docs/tutorials/physics/using_area_2d.rst:98
#, fuzzy
msgid ""
"See the :ref:`doc_your_first_game` for an example of using Area2D in a game."
msgstr "2D 이동 구조를 구현하는 예제는 :ref:`doc_2d_movement`\\ 를 참고하세요."

#: ../../docs/tutorials/physics/using_area_2d.rst:101
msgid "Area influence"
msgstr ""

#: ../../docs/tutorials/physics/using_area_2d.rst:103
msgid ""
"The second major use for area nodes is to alter physics. By default, the "
"area won't do this, but you can enable this with the *Space Override* "
"property. When areas overlap, they are processed in *Priority* order (higher "
"priority areas are processed first). There are four options for override:"
msgstr ""

#: ../../docs/tutorials/physics/using_area_2d.rst:108
msgid ""
"*Combine* - The area adds its values to what has been calculated so far."
msgstr ""

#: ../../docs/tutorials/physics/using_area_2d.rst:109
msgid ""
"*Replace* - The area replaces physics properties, and lower priority areas "
"are ignored."
msgstr ""

#: ../../docs/tutorials/physics/using_area_2d.rst:110
msgid ""
"*Combine-Replace* - The area adds its gravity/damping values to whatever has "
"been calculated so far (in priority order), ignoring any lower priority "
"areas."
msgstr ""

#: ../../docs/tutorials/physics/using_area_2d.rst:111
msgid ""
"*Replace-Combine* - The area replaces any gravity/damping calculated so far, "
"but keeps calculating the rest of the areas."
msgstr ""

#: ../../docs/tutorials/physics/using_area_2d.rst:113
msgid ""
"Using these properties, you can create very complex behavior with multiple "
"overlapping areas."
msgstr ""

#: ../../docs/tutorials/physics/using_area_2d.rst:116
msgid "The physics properties that can be overridden are:"
msgstr ""

#: ../../docs/tutorials/physics/using_area_2d.rst:118
msgid "*Gravity* - Gravity's strength inside the area."
msgstr ""

#: ../../docs/tutorials/physics/using_area_2d.rst:119
msgid ""
"*Gravity Vec* - Gravity's direction. This vector does not need to be "
"normalized."
msgstr ""

#: ../../docs/tutorials/physics/using_area_2d.rst:120
msgid ""
"*Linear Damp* - How quickly objects stop moving - linear velocity lost per "
"second."
msgstr ""

#: ../../docs/tutorials/physics/using_area_2d.rst:121
msgid ""
"*Angular Damp* - How quickly objects stop spinning - angular velocity lost "
"per second."
msgstr ""

#: ../../docs/tutorials/physics/using_area_2d.rst:124
#, fuzzy
msgid "Point gravity"
msgstr "중력"

#: ../../docs/tutorials/physics/using_area_2d.rst:126
msgid ""
"The *Gravity Point* property allows you to create an \"attractor\". Gravity "
"in the area will be calculated towards a point, given by the *Gravity Vec* "
"property. Values are relative to the Area2D, so for example using ``(0, 0)`` "
"will attract objects to the center of the area."
msgstr ""

#: ../../docs/tutorials/physics/using_area_2d.rst:134
msgid ""
"The example project attached below has three areas demonstrating physics "
"override."
msgstr ""

#: ../../docs/tutorials/physics/using_area_2d.rst:139
#, fuzzy
msgid ""
"You can download this project here: :download:`using_area_2d.zip <files/"
"using_area_2d.zip>`"
msgstr ""
"여기에서 이 샘플 프로젝트를 다운할 수 있습닌다: :download:`2D_movement_demo."
"zip <files/2D_movement_demo.zip>`"

#: ../../docs/tutorials/physics/using_kinematic_body_2d.rst:4
msgid "Using KinematicBody2D"
msgstr "KinematicBody2D 사용하기"

#: ../../docs/tutorials/physics/using_kinematic_body_2d.rst:9
#, fuzzy
msgid ""
"Godot offers several collision objects to provide both collision detection "
"and response. Trying to decide which one to use for your project can be "
"confusing. You can avoid problems and simplify development if you understand "
"how each of them works and what their pros and cons are. In this tutorial, "
"we'll look at the :ref:`KinematicBody2D <class_KinematicBody2D>` node and "
"show some examples of how to use it."
msgstr ""
"Godot은 충돌 감지와 반응성을 모두 제공하기 위해 많은 충돌 객체를 제공합니다. "
"프로젝트에 사용할 항목을 결정하는 것은 혼란스러울 수 있습니다. 각각의 작동 방"
"식 및 장단점이 무엇인지 이해한다면 문제를 피하고 개발을 간소화할 수 있습니"
"다. 이 튜토리얼에서는 :ref:`KinematicBody2D <class_KinematicBody2D>` 노드를 "
"살펴보고 사용 방법에 대한 몇 가지 예를 보여 드리겠습니다."

#: ../../docs/tutorials/physics/using_kinematic_body_2d.rst:20
msgid "What is a kinematic body?"
msgstr "키네마틱 바디란 무엇인가?"

#: ../../docs/tutorials/physics/using_kinematic_body_2d.rst:22
#, fuzzy
msgid ""
"``KinematicBody2D`` is for implementing bodies that are controlled via code. "
"Kinematic bodies detect collisions with other bodies when moving, but are "
"not affected by engine physics properties, like gravity or friction. While "
"this means that you have to write some code to create their behavior, it "
"also means you have more precise control over how they move and react."
msgstr ""
"``KinematicBody2D``\\ 는 코드로 통제되는 바디를 구현하기 위한 것입니다. 움직"
"일 때, 다른 바디와의 충돌을 감지하지만, 중력이나 마찰과 같은 물리 엔진 특성"
"에 의해 영향을 받지 않습니다. 이것은 당신이 그것들의 행동을 만들어내기 위해 "
"몇 개의 코드를 써야 한다는 것이기도 하지만, 반대로 그것들이 어떻게 움직이고 "
"반응하는지 더 정확히 제어할 수 있다는 것을 의미합니다."

#: ../../docs/tutorials/physics/using_kinematic_body_2d.rst:28
msgid ""
"A `KinematicBody2D` can be affected by gravity and other forces, but you "
"must calculate the movement in code. The physics engine will not move a "
"`KinematicBody2D`."
msgstr ""
"`KinematicBody2D`\\ 는 중력과 다른 힘에 의해 영향을 받을 수 있지만 코드로 움"
"직임을 계산해야 합니다. 물리 엔진이 `KinematicBody2D`\\ 를 움직이게 하진 않습"
"니다."

#: ../../docs/tutorials/physics/using_kinematic_body_2d.rst:33
msgid "Movement and collision"
msgstr "이동과 충돌"

#: ../../docs/tutorials/physics/using_kinematic_body_2d.rst:35
#, fuzzy
msgid ""
"When moving a ``KinematicBody2D``, you should not set its ``position`` "
"property directly. Instead, you use the ``move_and_collide()`` or "
"``move_and_slide()`` methods. These methods move the body along a given "
"vector and instantly stop if a collision is detected with another body. "
"After a KinematicBody2D has collided, any *collision response* must be coded "
"manually."
msgstr ""
"``KinematicBody2D``\\ 를 움직일 때 ``position`` 속성을 직접 설정해서는 안 됩"
"니다. 대신 ``move_and_collide()`` 또는 ``move_and_slide()`` 메서드를 사용해"
"야 합니다. 이러한 방법은 주어진 벡터를 따라 바디가 이동하며 충돌이 감지될 경"
"우 즉시 중지됩니다. KinematicBody2D가 충돌한 후에는 *충돌 응답*\\ 을 수동으"
"로 코딩해야 합니다."

#: ../../docs/tutorials/physics/using_kinematic_body_2d.rst:41
#, fuzzy
msgid ""
"You should only do Kinematic body movement in the ``_physics_process()`` "
"callback."
msgstr ""
"키네마틱 바디의 움직임은 ``_physics_process()`` 콜백으로 이루어져야 합니다."

#: ../../docs/tutorials/physics/using_kinematic_body_2d.rst:43
msgid ""
"The two movement methods serve different purposes, and later in this "
"tutorial, you'll see examples of how they work."
msgstr ""
"두 개의 이동 메서드는 다른 목적을 지닙니다, 그리고 이 튜토리얼 이후에, 어떻"
"게 작동하는 지에 대한 예제를 볼 것입니다."

#: ../../docs/tutorials/physics/using_kinematic_body_2d.rst:47
msgid "``move_and_collide``"
msgstr "``move_and_collide``"

#: ../../docs/tutorials/physics/using_kinematic_body_2d.rst:49
msgid ""
"This method takes one parameter: a :ref:`Vector2 <class_Vector2>` indicating "
"the body's relative movement. Typically, this is your velocity vector "
"multiplied by the frame timestep (``delta``). If the engine detects a "
"collision anywhere along this vector, the body will immediately stop moving. "
"If this happens, the method will return a :ref:`KinematicCollision2D "
"<class_KinematicCollision2D>` object."
msgstr ""
"이 메서드는 하나의 매개 변수를 가집니다: 바디의 상대적인 움직임을 나타내는 :"
"ref:`Vector2 <class_Vector2>`\\ 입니다. 일반적으로, 이것은 속도 벡터에 프레"
"임 타임 스텝 (``delta``)을 곱한 것입니다. 엔진이 이 벡터를 따라 어느 곳이든 "
"충돌을 감지하면, 바디는 즉시 이동을 멈춥니다. 이 경우, 메서드는 :ref:"
"`KinematicCollision2D <class_KinematicCollision2D>` 객체를 반환합니다."

#: ../../docs/tutorials/physics/using_kinematic_body_2d.rst:55
msgid ""
"``KinematicCollision2D`` is an object containing data about the collision "
"and the colliding object. Using this data, you can calculate your collision "
"response."
msgstr ""
"``KinematicCollision2D``\\ 는 충돌과 충돌하는 객체에 대한 정보를 담고 있는 객"
"체입니다. 이 정보로, 충돌 응답을 계산할 수 있습니다."

#: ../../docs/tutorials/physics/using_kinematic_body_2d.rst:60
msgid "``move_and_slide``"
msgstr "``move_and_slide``"

#: ../../docs/tutorials/physics/using_kinematic_body_2d.rst:62
#, fuzzy
msgid ""
"The ``move_and_slide()`` method is intended to simplify the collision "
"response in the common case where you want one body to slide along the "
"other. It is especially useful in platformers or top-down games, for example."
msgstr ""
"``move_and_slide()`` 메서드는 충돌 응답을 한 바디가 다른 바디를 따라 미끄러지"
"는 일반적인 경우에서 단순화 하기 위한 것입니다. 이것은 특히, 예를 들어 플랫포"
"머나 탑뷰 게임에서 유용합니다."

#: ../../docs/tutorials/physics/using_kinematic_body_2d.rst:66
msgid ""
"``move_and_slide()`` automatically calculates frame-based movement using "
"``delta``. Do *not* multiply your velocity vector by ``delta`` before "
"passing it to ``move_and_slide()``."
msgstr ""
"``move_and_slide()``\\ 는 ``delta``\\ 를 사용하여 프레임 기반 이동을 자동으"
"로 계산합니다. ``delta``\\ 를 ``move_and_slide()``\\ 에 전달하기 전에 속도 벡"
"터를 곱하면 *안됩니다*."

#: ../../docs/tutorials/physics/using_kinematic_body_2d.rst:70
msgid ""
"In addition to the velocity vector, ``move_and_slide()`` takes a number of "
"other parameters allowing you to customize the slide behavior:"
msgstr ""
"속도 벡터 뿐만 아니라, ``move_and_slide()``\\ 는 많은 다른 매개변수를 가지고 "
"있어서 슬라이드 행동을 커스터마이징 할 수 있습니다:"

#: ../../docs/tutorials/physics/using_kinematic_body_2d.rst:73
msgid "``floor_normal`` - *default value:* ``Vector2( 0, 0 )``"
msgstr "``floor_normal`` - *기본 값:* ``Vector2( 0, 0 )``"

#: ../../docs/tutorials/physics/using_kinematic_body_2d.rst:75
#, fuzzy
msgid ""
"This parameter allows you to define what surfaces the engine should consider "
"being the floor. Setting this lets you use the ``is_on_floor()``, "
"``is_on_wall()``, and ``is_on_ceiling()`` methods to detect what type of "
"surface the body is in contact with. The default value means that all "
"surfaces are considered walls."
msgstr ""
"이 매개변수는 엔진이 바닥이라고 생각하는 표면을 정의할 수 있습니다. 이것을 설"
"정하면 ``is_on_floor()``, ``is_on_wall()``, 그리고 ``is_on_ceiling()`` 메서드"
"를 사용할 수 있고, 어떤 타입의 표면이 바디와 닿았는지 감지할 수 있습니다. 기"
"본 값으로 모든 표면은 벽으로 간주되는 것을 뜻합니다."

#: ../../docs/tutorials/physics/using_kinematic_body_2d.rst:80
msgid "``slope_stop_min_velocity`` - *default value:* ``5``"
msgstr "``slope_stop_min_velocity`` - *기본 값:* ``5``"

#: ../../docs/tutorials/physics/using_kinematic_body_2d.rst:82
#, fuzzy
msgid ""
"This parameter is the minimum velocity required to move when standing on a "
"slope. It prevents a body from sliding down when standing still."
msgstr ""
"이것은 경사면에 서있을 수 있는 최소 속도입니다. 이것으로 서있는 상태일 때 바"
"디가 경사면에 미끄러져 내려가는 것을 방지합니다."

#: ../../docs/tutorials/physics/using_kinematic_body_2d.rst:85
msgid "``max_bounces`` - *default value:* ``4``"
msgstr "``max_bounces`` - *기본 값:* ``4``"

#: ../../docs/tutorials/physics/using_kinematic_body_2d.rst:87
#, fuzzy
msgid ""
"This parameter is the maximum number of collisions before the body stops "
"moving. Setting it too low may prevent movement entirely."
msgstr ""
"이것은 바디가 멈추기 전 충돌의 최대 수입니다. 너무 낮게 설정하면 움직임이 완"
"전히 차단될 수 있습니다."

#: ../../docs/tutorials/physics/using_kinematic_body_2d.rst:90
msgid ""
"``floor_max_angle`` - *default value:* ``0.785398`` (in radians, equivalent "
"to ``45`` degrees)"
msgstr ""
"``floor_max_angle`` - *기본 값:* ``0.785398`` (라디안에서는, ``45``\\ 도와 같"
"습니다)"

#: ../../docs/tutorials/physics/using_kinematic_body_2d.rst:92
#, fuzzy
msgid ""
"This parameter is the maximum angle before a surface is no longer considered "
"a \"floor.\""
msgstr "이것은 표면이 더 이상 \"바닥\"으로 인식되지 않는 최대 각도입니다."

#: ../../docs/tutorials/physics/using_kinematic_body_2d.rst:95
msgid "``move_and_slide_with_snap``"
msgstr "``move_and_slide_with_snap``"

#: ../../docs/tutorials/physics/using_kinematic_body_2d.rst:97
msgid ""
"This method adds some additional functionality to ``move_and_slide()`` by "
"adding the ``snap`` parameter. As long as this vector is in contact with the "
"ground, the body will remain attached to the surface. Note that this means "
"you must disable snapping when jumping, for example. You can do this either "
"by setting ``snap`` to ``Vector2(0, 0)`` or by using ``move_and_slide()`` "
"instead."
msgstr ""
"이 메서드는 ``move_and_slide()``\\ 에 ``snap`` 매개변수를 넣어 추가적인 기능"
"성을 줍니다. 이 벡터가 바닥과 접촉하면, 바디는 표면에 붙은 채로 유지합니다. "
"이는 고정 상태를 점프 같은 것으로 비활성화 해야함을 의미합니다. ``snap``\\ "
"을 ``Vector2(0, 0)``\\ 로 설정하거나 ``move_and_slide()``\\ 를 사용하면 됩니"
"다."

#: ../../docs/tutorials/physics/using_kinematic_body_2d.rst:104
msgid "Which movement method to use?"
msgstr "어떤 이동 메서드를 사용해야 할까요?"

#: ../../docs/tutorials/physics/using_kinematic_body_2d.rst:106
#, fuzzy
msgid ""
"A common question from new Godot users is: \"How do you decide which "
"movement function to use?\" Often, the response is to use "
"``move_and_slide()`` because it's \"simpler,\" but this is not necessarily "
"the case. One way to think of it is that ``move_and_slide()`` is a special "
"case, and ``move_and_collide()`` is more general. For example, the following "
"two code snippets result in the same collision response:"
msgstr ""
"새로운 Godot 사용자로부터 흔한 질문이 있습니다: \"어떻게 어떤 이동 함수를 사"
"용하는 지를 결정하나요?\" 자주하는 대답은 ``move_and_slide()``\\ 를 사용하라"
"는 것인데, \"더 쉽기\" 때문입니다, 그러나 반드시 그런 것은 아닙니다. 생각을 "
"해보자면  ``move_and_slide()``\\ 는 특별한 경우, 그리고 "
"``move_and_collide()``\\ 는 더 일반적인 것입니다. 예를 들어 두 개의 코드 단문"
"은 값은 충돌 응답 결과가 나타납니다:"

#: ../../docs/tutorials/physics/using_kinematic_body_2d.rst:137
msgid ""
"Anything you do with ``move_and_slide()`` can also be done with "
"``move_and_collide()``, but it might take a little more code. However, as "
"we'll see in the examples below, there are cases where ``move_and_slide()`` "
"doesn't provide the response you want."
msgstr ""
"``move_and_slide()``\\ 로 하는 것을 ``move_and_collide()``\\ 또한 할 수 있습"
"니다, 하지만 좀 더 많은 코드를 갖습니다. 하지만 아래에서 예제를 보면, "
"``move_and_slide()``\\ 가 원하는 응답을 제공하지 않는 경우도 있습니다."

#: ../../docs/tutorials/physics/using_kinematic_body_2d.rst:141
msgid ""
"In the example above, we assign the velocity that ``move_and_slide()`` "
"returns back into the ``velocity`` variable. This is because when the "
"character collides with the environment, the function recalculates the speed "
"internally to reflect the slowdown."
msgstr ""

#: ../../docs/tutorials/physics/using_kinematic_body_2d.rst:146
msgid ""
"For example, if your character fell on the floor, you don't want it to "
"accumulate vertical speed due to the effect of gravity. Instead, you want "
"its vertical speed to reset to zero."
msgstr ""

#: ../../docs/tutorials/physics/using_kinematic_body_2d.rst:150
msgid ""
"``move_and_slide()`` may also recalculate the kinematic body's velocity "
"several times in a loop as, to produce a smooth motion, it moves the "
"character and collides up to five times by default. At the end of the "
"process, the function returns the character's new velocity that we can store "
"in our ``velocity`` variable, and use on the next frame."
msgstr ""

#: ../../docs/tutorials/physics/using_kinematic_body_2d.rst:159
msgid ""
"To see these examples in action, download the sample project: :download:"
"`using_kinematic2d.zip <files/using_kinematic2d.zip>`."
msgstr ""
"실제 예제를 보기 위해, 샘플 프로젝트를 다운로드 하세요: :download:"
"`using_kinematic2d.zip <files/using_kinematic2d.zip>`."

#: ../../docs/tutorials/physics/using_kinematic_body_2d.rst:163
msgid "Movement and walls"
msgstr "이동과 벽"

#: ../../docs/tutorials/physics/using_kinematic_body_2d.rst:165
msgid ""
"If you've downloaded the sample project, this example is in \"BasicMovement."
"tscn\"."
msgstr ""
"샘플 프로젝트를 다운로드 했다면, 이 예제는 \"BasicMovement.tscn\"입니다."

#: ../../docs/tutorials/physics/using_kinematic_body_2d.rst:167
msgid ""
"For this example, add a ``KinematicBody2D`` with two children: a ``Sprite`` "
"and a ``CollisionShape2D``. Use the Godot \"icon.png\" as the Sprite's "
"texture (drag it from the Filesystem dock to the *Texture* property of the "
"``Sprite``). In the ``CollisionShape2D``'s *Shape* property, select \"New "
"RectangleShape2D\" and size the rectangle to fit over the sprite image."
msgstr ""
"이 예시에서 ``KinematicBody2D``\\ 를 두 자식과 함께 추가합니다: ``Sprite``\\ "
"와 ``CollisionShape2D``\\ 입니다. Godot \"icon.png\"를 Sprite의 텍스처 속성으"
"로 사용합니다 (파일 시스템 독에서 ``Sprite``\\ 의 *Texture* 속성으로 끌어다 "
"놓으십시오). ``CollisionShape2D``\\ 의 *Shape* 속성에서 \"New "
"RectangleShape2D\"를 선택하고 스프라이트 이미지에 맞게 사각형 크기를 조정합니"
"다."

#: ../../docs/tutorials/physics/using_kinematic_body_2d.rst:173
msgid ""
"See :ref:`doc_2d_movement` for examples of implementing 2D movement schemes."
msgstr "2D 이동 구조를 구현하는 예제는 :ref:`doc_2d_movement`\\ 를 참고하세요."

#: ../../docs/tutorials/physics/using_kinematic_body_2d.rst:175
msgid "Attach a script to the KinematicBody2D and add the following code:"
msgstr "KinematicBody2D에 스크립트를 붙이고 다음의 코드를 추가하세요:"

#: ../../docs/tutorials/physics/using_kinematic_body_2d.rst:238
msgid ""
"Run this scene and you'll see that ``move_and_collide()`` works as expected, "
"moving the body along the velocity vector. Now let's see what happens when "
"you add some obstacles. Add a :ref:`StaticBody2D <class_StaticBody2D>` with "
"a rectangular collision shape. For visibility, you can use a sprite, a "
"Polygon2D, or turn on \"Visible Collision Shapes\" from the \"Debug\" menu."
msgstr ""
"이 씬을 실행하고 ``move_and_collide()``\\ 가 예상대로, 바디가 속도 벡터를 따"
"라 움직이는 것을 볼 수 있습니다. 이제 장애물을 추가하면 어떻게 되는지 봅시"
"다. 직사각형 충돌 모양을 가진 :ref:`StaticBody2D <class_StaticBody2D>`\\ 를 "
"추가합니다. 가시성을 위해, 스프라이트, Polygon2D, 혹은 \"디버그\" 메뉴에서 "
"\"충돌 모양 보이기\"를 키면 됩니다."

#: ../../docs/tutorials/physics/using_kinematic_body_2d.rst:244
msgid ""
"Run the scene again and try moving into the obstacle. You'll see that the "
"``KinematicBody2D`` can't penetrate the obstacle. However, try moving into "
"the obstacle at an angle and you'll find that the obstacle acts like glue - "
"it feels like the body gets stuck."
msgstr ""
"씬을 다시 실행하고 장애물로 움직여 봅니다. ``KinematicBody2D``\\ 가 장애물을 "
"통과하지 못하는 것을 볼 수 있습니다. 하지만 장애물 안으로 움직이려고 하면 장"
"애물이 풀처럼 행동하는 것을 찾을 수 있습니다 - 바디가 끼어있는 느낌이 듭니다."

#: ../../docs/tutorials/physics/using_kinematic_body_2d.rst:248
msgid ""
"This happens because there is no *collision response*. "
"``move_and_collide()`` stops the body's movement when a collision occurs. We "
"need to code whatever response we want from the collision."
msgstr ""
"이것은 *충돌 응답*\\ 이 없기 때문에 발생한 것입니다. ``move_and_collide()``"
"\\ 는 충돌이 발생할 때 바디의 움직임을 멈춥니다. 충돌로부터 원하는 어떤 응답"
"이라도 코딩해야 합니다."

#: ../../docs/tutorials/physics/using_kinematic_body_2d.rst:252
msgid ""
"Try changing the function to ``move_and_slide(velocity)`` and running again. "
"Note that we removed ``delta`` from the velocity calculation."
msgstr ""
"함수를 ``move_and_slide(velocity)``\\ 로 변경하고 다시 실행합니다. 우리는 속"
"도 계산에서 ``delta``\\ 를 제거했습니다."

#: ../../docs/tutorials/physics/using_kinematic_body_2d.rst:255
msgid ""
"``move_and_slide()`` provides a default collision response of sliding the "
"body along the collision object. This is useful for a great many game types, "
"and may be all you need to get the behavior you want."
msgstr ""
"``move_and_slide()``\\ 는 다비가 충돌 객체를 따라 미끄러지는 기본 충돌 응답"
"을 제공합니다. 이것은 아주 많은 게임 유형에 유용하고, 원하는 행동을 얻을 때 "
"필요할 수도 있습니다."

#: ../../docs/tutorials/physics/using_kinematic_body_2d.rst:260
msgid "Bouncing/reflecting"
msgstr "튕김/반사"

#: ../../docs/tutorials/physics/using_kinematic_body_2d.rst:262
msgid ""
"What if you don't want a sliding collision response? For this example "
"(\"BounceandCollide.tscn\" in the sample project), we have a character "
"shooting bullets and we want the bullets to bounce off the walls."
msgstr ""
"미끄러지는 충돌 응답을 원하지 않으면 어떻게 해야 할까요? (샘플 프로젝트에 있"
"는 \"BounceandCollide.tscn\") 이 예제의 경우, 총을 쏘는 캐릭터가 있고 총알이 "
"벽에 튕겨 나가게 하고 싶습니다."

#: ../../docs/tutorials/physics/using_kinematic_body_2d.rst:266
msgid ""
"This example uses three scenes. The main scene contains the Player and "
"Walls. The Bullet and Wall are separate scenes so that they can be instanced."
msgstr ""
"이 예제는 세 개의 씬을 사용합니다. 메인 씬은 Player와 Wall을 갖고 있습니다. "
"Bullet과 Wall은 분리된 씬으로 그들은 인스턴스 할 수 있습니다."

#: ../../docs/tutorials/physics/using_kinematic_body_2d.rst:269
msgid ""
"The Player is controlled by the `w` and `s` keys for forward and back. "
"Aiming uses the mouse pointer. Here is the code for the Player, using "
"``move_and_slide()``:"
msgstr ""
"Player는 `w`\\ 와 `s`\\ 키로 조작하며 각각 앞뒤로 움직입니다. 마우스로 조준합"
"니다. 이것이 ``move_and_slide()``\\ 를 사용하는 Player 코드입니다:"

#: ../../docs/tutorials/physics/using_kinematic_body_2d.rst:356
msgid "And the code for the Bullet:"
msgstr "그리고 Bullet을 위한 코드입니다:"

#: ../../docs/tutorials/physics/using_kinematic_body_2d.rst:418
msgid ""
"The action happens in ``_physics_process()``. After using "
"``move_and_collide()``, if a collision occurs, a ``KinematicCollision2D`` "
"object is returned (otherwise, the return is ``Nil``)."
msgstr ""
"동작은 ``_physics_process()``\\ 에서 발생합니다. ``move_and_collide()``\\ 를 "
"사용한 이후, 충돌이 발생하면, ``KinematicCollision2D`` 객체는 반환됩니다 (그"
"렇지 않으면, ``Nil``\\ 을 반환합니다)."

#: ../../docs/tutorials/physics/using_kinematic_body_2d.rst:422
msgid ""
"If there is a returned collision, we use the ``normal`` of the collision to "
"reflect the bullet's ``velocity`` with the ``Vector2.bounce()`` method."
msgstr ""
"반환된 충돌이 있다면, 우리는 충돌의 ``normal``\\ 을 사용해 ``Vector2."
"bounce()`` 메서드로 총알의 ``velocity``\\ 를 반사합니다."

#: ../../docs/tutorials/physics/using_kinematic_body_2d.rst:425
msgid ""
"If the colliding object (``collider``) has a ``hit`` method, we also call "
"it. In the example project, we've added a flashing color effect to the Wall "
"to demonstrate this."
msgstr ""
"충돌 객체 (``collider``)가 ``hit`` 메서드를 가진다면, 또한 그것을 호출합니"
"다. 예제 프로젝트에서는, 이를 설명하기 위해 Wall에 반짝이는 색상 효과를 추가"
"했습니다."

#: ../../docs/tutorials/physics/using_kinematic_body_2d.rst:432
msgid "Platformer movement"
msgstr "플랫포머 움직임"

#: ../../docs/tutorials/physics/using_kinematic_body_2d.rst:434
msgid ""
"Let's try one more popular example: the 2D platformer. ``move_and_slide()`` "
"is ideal for quickly getting a functional character controller up and "
"running. If you've downloaded the sample project, you can find this in "
"\"Platformer.tscn\"."
msgstr ""
"인기있는 예제를 하나 더 들어보겠습니다: 2D 플랫포머 입니다. "
"``move_and_slide()``\\ 가 빠르게 기능의 캐릭터 조작을 얻고 실행시키기에 이상"
"적입니다. 샘플 프로젝트를 다운로드 했다면, \"Platformer.tscn\"에서 이것을 찾"
"을 수 있습니다."

#: ../../docs/tutorials/physics/using_kinematic_body_2d.rst:438
msgid ""
"For this example, we'll assume you have a level made of ``StaticBody2D`` "
"objects. They can be any shape and size. In the sample project, we're using :"
"ref:`Polygon2D <class_Polygon2D>` to create the platform shapes."
msgstr ""
"이 예제를 위해,.``StaticBody2D`` 객체로 만들어진 레벨이 있다고 가정합니다. 어"
"떤 모양이나 크기가 될 수 있습니다. 샘플 프로젝트에서, 우리는 플랫폼 모양을 만"
"들기 위해 :ref:`Polygon2D <class_Polygon2D>`\\ 를 사용합니다."

#: ../../docs/tutorials/physics/using_kinematic_body_2d.rst:442
msgid "Here's the code for the player body:"
msgstr "플레이어 바디를 위한 코드입니다:"

#: ../../docs/tutorials/physics/using_kinematic_body_2d.rst:523
#, fuzzy
msgid ""
"When using ``move_and_slide()``, the function returns a vector representing "
"the movement that remained after the slide collision occurred. Setting that "
"value back to the character's ``velocity`` allows us to move up and down "
"slopes smoothly. Try removing ``velocity =`` and see what happens if you "
"don't do this."
msgstr ""
"``move_and_slide()``\\ 를 사용할 때, 함수는 슬라이드 충돌이 발생한 이후 움직"
"임을 나타내는 벡터를 반환합니다. 값을 캐릭터의 ``velocity``\\ 에 설정하면 부"
"드럽게 위 아래 경사면을 움직입니다. ``velocity =``\\ 를 삭제하고 이것을 하지 "
"않으면 어떤 일이 발생하는 지 봅시다."

#: ../../docs/tutorials/physics/using_kinematic_body_2d.rst:528
#, fuzzy
msgid ""
"Also note that we've added ``Vector2(0, -1)`` as the floor normal. This "
"vector points straight upward. As a result, if the character collides with "
"an object that has this normal, it will be considered a floor."
msgstr ""
"또한 ``Vector2(0, -1)``\\ 를 바닥 노멀로 추가하는 것입니다. 이것은 벡터가 위"
"쪽으로 향하게 합니다. 즉 캐릭터가 이 노멀을 가진 객체와 충돌하면, 바닥으로 인"
"식할 것입니다."

#: ../../docs/tutorials/physics/using_kinematic_body_2d.rst:532
#, fuzzy
msgid ""
"Using the floor normal allows us to make jumping work, using "
"``is_on_floor()``. This function will only return ``true`` after a "
"``move_and_slide()`` collision where the colliding body's normal is within "
"45 degrees of the given floor vector. You can control the maximum angle by "
"setting ``floor_max_angle``."
msgstr ""
"바닥 노멀을 사용하면,  ``is_on_floor()``\\ 를 사용해 점프 작업을 만들 수 있습"
"니다. 이 함수는 ``move_and_slide()`` 충돌 이후 충돌한 바디의 노말이 주어진 바"
"닥 벡터의 45도 이내라면 항상 ``참``\\ 을 반환합니다 (``floor_max_angle``\\ "
"을 설정해서 조정할 수 있습니다)."

#: ../../docs/tutorials/physics/using_kinematic_body_2d.rst:537
#, fuzzy
msgid ""
"This angle also allows you to implement other features like wall jumps using "
"``is_on_wall()``, for example."
msgstr ""
"이를 통해 (벽 점프와 같은) 다른 기능들도 ``is_on_wall()``\\ 를 사용해 구현할 "
"수 있습니다."

#: ../../docs/tutorials/physics/ray-casting.rst:4
msgid "Ray-casting"
msgstr "광선 투사(Ray Cast)하기"

#: ../../docs/tutorials/physics/ray-casting.rst:9
msgid ""
"One of the most common tasks in game development is casting a ray (or custom "
"shaped object) and checking what it hits. This enables complex behaviors, "
"AI, etc. to take place. This tutorial will explain how to do this in 2D and "
"3D."
msgstr ""
"게임 개발에서 일반적인 과제로 광선을 (혹은 맞춤 형태 객체를) 투사하고, 닿은 "
"것이 무엇인지 확인하는 것입니다. 광선 투사를 하면 복잡한 동작도 만들 수 있는"
"데, 예를 들면 AI가 있습니다. 이 튜토리얼에서는 어떻게 광선 추적을 하는지 2D"
"와 3D에서 설명하겠습니다."

#: ../../docs/tutorials/physics/ray-casting.rst:14
msgid ""
"Godot stores all the low level game information in servers, while the scene "
"is just a frontend. As such, ray casting is generally a lower-level task. "
"For simple raycasts, node such as :ref:`RayCast <class_RayCast>` and :ref:"
"`RayCast2D <class_RayCast2D>` will work, as they will return every frame "
"what the result of a raycast is."
msgstr ""
"Godot는 서버에 로우 레벨 게임 정보를 저장합니다. 씬은 단지 프론트엔드입니다. "
"마찬가지로 광선 추적은 일반적으로 더 로우 레벨의 과제입니다. 간단한 광선 추적"
"으로 :ref:`RayCast <class_RayCast>`\\ 와 :ref:`RayCast2D <class_RayCast2D>` "
"노드로 가능합니다. 매 프레임마다 광선 추적의 결과를 반환하죠."

#: ../../docs/tutorials/physics/ray-casting.rst:21
msgid ""
"Many times, though, ray-casting needs to be a more interactive process so a "
"way to do this by code must exist."
msgstr ""
"하지만 많은 경우에서 광선 추적은 더 상호작용적인 처리가 필요하기에, 코드로 해"
"결해야 합니다."

#: ../../docs/tutorials/physics/ray-casting.rst:25
msgid "Space"
msgstr "공간(Space)"

#: ../../docs/tutorials/physics/ray-casting.rst:27
msgid ""
"In the physics world, Godot stores all the low level collision and physics "
"information in a *space*. The current 2d space (for 2D Physics) can be "
"obtained by accessing :ref:`CanvasItem.get_world_2d().space "
"<class_CanvasItem_method_get_world_2d>`. For 3D, it's :ref:`Spatial."
"get_world().space <class_Spatial_method_get_world>`."
msgstr ""
"물리 세계에서, Godot는 모든 로우 레벨 충돌과 물리 정보를 *공간(Space)*\\ 에 "
"저장합니다. (2D 물리의) 현재 2d 공간은 :ref:`CanvasItem.get_world_2d().space "
"<class_CanvasItem_method_get_world_2d>`\\ 으로 접근해서 가져올 수 있습니다. "
"3D의 경우는 :ref:`Spatial.get_world().space <class_Spatial_method_get_world>`"
"\\ 으로 가져올 수 있습니다."

#: ../../docs/tutorials/physics/ray-casting.rst:33
msgid ""
"The resulting space :ref:`RID <class_RID>` can be used in :ref:"
"`PhysicsServer <class_PhysicsServer>` and :ref:`Physics2DServer "
"<class_Physics2DServer>` respectively for 3D and 2D."
msgstr ""
"결과 공간인 :ref:`RID <class_RID>`\\ 는, 3D에는 :ref:`PhysicsServer "
"<class_PhysicsServer>`\\ 에, 2D에는 :ref:`Physics2DServer "
"<class_Physics2DServer>`\\ 에 각각 사용할 수 있습니다."

#: ../../docs/tutorials/physics/ray-casting.rst:38
msgid "Accessing space"
msgstr "공간에 접근하기"

#: ../../docs/tutorials/physics/ray-casting.rst:40
#, fuzzy
msgid ""
"Godot physics runs by default in the same thread as game logic, but may be "
"set to run on a separate thread to work more efficiently. Due to this, the "
"only time accessing space is safe is during the :ref:`Node."
"_physics_process() <class_Node_method__physics_process>` callback. Accessing "
"it from outside this function may result in an error due to space being "
"*locked*."
msgstr ""
"Godot은 기본적으로 게임 로직과 동일한 스레드에서 실행되지만, 보다 효율적으로 "
"작동하기 위해 별도의 스레드에서 실행되도록 설정할 수 있습니다. 이러한 이유"
"로, 공간에 접근하는 시간은 :ref:`Node._physics_process() "
"<class_Node_method__physics_process>` 콜백 함수 동안은 안전합니다. 이 함수 외"
"부에서 접근할 경우 공간이 *잠겨* 있기 때문에 오류가 발생할 수 있습니다."

#: ../../docs/tutorials/physics/ray-casting.rst:47
msgid ""
"To perform queries into physics space, the :ref:`Physics2DDirectSpaceState "
"<class_Physics2DDirectSpaceState>` and :ref:`PhysicsDirectSpaceState "
"<class_PhysicsDirectSpaceState>` must be used."
msgstr ""
"물리 공간에 대한 쿼리를 수행하려면 :ref:`Physics2DDirectSpaceState "
"<class_Physics2DDirectSpaceState>` 및 :ref:`PhysicsDirectSpaceState "
"<class_PhysicsDirectSpaceState>` 를 사용해야 합니다."

#: ../../docs/tutorials/physics/ray-casting.rst:52
msgid "Use the following code in 2D:"
msgstr "2D에서는 다음 코드를 사용합니다:"

#: ../../docs/tutorials/physics/ray-casting.rst:69
msgid "Or more directly:"
msgstr "더욱더 직접적인 코드:"

#: ../../docs/tutorials/physics/ray-casting.rst:84
msgid "And in 3D:"
msgstr "3D에서는 다음 코드를 사용합니다:"

#: ../../docs/tutorials/physics/ray-casting.rst:100
msgid "Raycast query"
msgstr "광선 투사 쿼리"

#: ../../docs/tutorials/physics/ray-casting.rst:102
#, fuzzy
msgid ""
"For performing a 2D raycast query, the method :ref:"
"`Physics2DDirectSpaceState.intersect_ray() "
"<class_Physics2DDirectSpaceState_method_intersect_ray>` may be used. For "
"example:"
msgstr ""
"2D 광선 투사 쿼리를 수행하려면 :ref:`Physics2DDirectSpaceState."
"intersect_ray() <class_Physics2DDirectSpaceState_method_intersect_ray>` 방법"
"을 사용할 수 있습니다. 예를 들면 다음과 같습니다:"

#: ../../docs/tutorials/physics/ray-casting.rst:123
#, fuzzy
msgid ""
"The result is a dictionary. If the ray didn't hit anything, the dictionary "
"will be empty. If it did hit something, it will contain collision "
"information:"
msgstr ""
"결과는 딕셔너리입니다. 만약 광선이 아무 것도 건드리지 않으면, 딕셔너리는 텅 "
"비게 될 것입니다. 만약 충돌했을 경우 충돌 정보가 포함됩니다:"

#: ../../docs/tutorials/physics/ray-casting.rst:137
msgid ""
"The ``result`` dictionary when a collision occurs contains the following "
"data:"
msgstr "충돌이 발생할 경우 ``결과`` 딕셔너리에는 다음 데이터가 포함됩니다:"

#: ../../docs/tutorials/physics/ray-casting.rst:152
msgid "The data is similar in 3D space, using Vector3 coordinates."
msgstr "데이터는 Vector3 좌표를 사용하는 3D 공간에서와 유사합니다."

#: ../../docs/tutorials/physics/ray-casting.rst:155
msgid "Collision exceptions"
msgstr "충돌 예외"

#: ../../docs/tutorials/physics/ray-casting.rst:157
msgid ""
"A common use case for ray casting is to enable a character to gather data "
"about the world around it. One problem with this is that the same character "
"has a collider, so the ray will only detect its parent's collider, as shown "
"in the following image:"
msgstr ""
"광선 투사의 일반적인 용도는 캐릭터가 주변 세계에 대한 데이터를 수집할 수 있도"
"록 하는 것입니다. 이것의 한 가지 문제점은 다음 이미지와 같이 같은 캐릭터가 충"
"돌체를 가지고 있어서, 광선은 부모의 충돌체만 감지한다는 것입니다:"

#: ../../docs/tutorials/physics/ray-casting.rst:164
msgid ""
"To avoid self-intersection, the ``intersect_ray()`` function can take an "
"optional third parameter which is an array of exceptions. This is an example "
"of how to use it from a KinematicBody2D or any other collision object node:"
msgstr ""
"자체 교차를 방지하기 위해, ``intersect_ray()`` 함수는 예외 배열인 선택적 세 "
"번째 파라미터를 취할 수 있습니다. 이것은 KinematicBody2D 또는 다른 충돌 개체 "
"노드에서 사용하는 방법의 예입니다:"

#: ../../docs/tutorials/physics/ray-casting.rst:189
msgid "The exceptions array can contain objects or RIDs."
msgstr "예외 배열에는 개체 또는 RID가 포함될 수 있습니다."

#: ../../docs/tutorials/physics/ray-casting.rst:192
msgid "Collision Mask"
msgstr "충돌 마스크"

#: ../../docs/tutorials/physics/ray-casting.rst:194
msgid ""
"While the exceptions method works fine for excluding the parent body, it "
"becomes very inconvenient if you need a large and/or dynamic list of "
"exceptions. In this case, it is much more efficient to use the collision "
"layer/mask system."
msgstr ""
"예외 방법은 부모 body를 제외하고도 잘 작동하지만, 많은 and/or 동적 예외 목록"
"이 필요한 경우 매우 불편하게 됩니다. 이 경우 충돌 계층/마스크 시스템을 사용하"
"는 것이 훨씬 효율적입니다."

#: ../../docs/tutorials/physics/ray-casting.rst:198
#, fuzzy
msgid ""
"The optional fourth argument for ``intersect_ray()`` is a collision mask. "
"For example, to use the same mask as the parent body, use the "
"``collision_mask`` member variable:"
msgstr ""
"``intersect_ray()`` 의 네 번째 선택적인 인수는 충돌 마스크이다. 예를 들어 부"
"모body와 동일한 마스크를 사용하려면 ``collision_mask`` 멤버 변수를 사용해야 "
"합니다:"

#: ../../docs/tutorials/physics/ray-casting.rst:226
msgid "3D ray casting from screen"
msgstr "화면에서의 3D ray casting(광선 투사)"

#: ../../docs/tutorials/physics/ray-casting.rst:228
#, fuzzy
msgid ""
"Casting a ray from screen to 3D physics space is useful for object picking. "
"There is not much need to do this because :ref:`CollisionObject "
"<class_CollisionObject>` has an \"input_event\" signal that will let you "
"know when it was clicked, but in case there is any desire to do it manually, "
"here's how."
msgstr ""
"화면에서 3D 물리학 공간으로 광선을 투사하는 것은 물체를 선택하는 데 유용합니"
"다. :ref:`CollisionObject <class_CollisionObject>` 에는 \"input_event\" 신호"
"가 있어 클릭 시 이를 알 수 있지만, 수동으로 수행할 수 있는 방법이 있습니다."

#: ../../docs/tutorials/physics/ray-casting.rst:234
msgid ""
"To cast a ray from the screen, you need a :ref:`Camera <class_Camera>` node. "
"A ``Camera`` can be in two projection modes: perspective and orthogonal. "
"Because of this, both the ray origin and direction must be obtained. This is "
"because ``origin`` changes in orthogonal mode, while ``normal`` changes in "
"perspective mode:"
msgstr ""
"화면에서 광선을 캐스팅하려면 :ref:`Camera <class_Camera>` 노드가 필요합니다. "
"``카메라`` 는 두 가지 투영 모드일 수 있습니다: 원근법과 직교. 이로 인해 광선 "
"원점과 방향을 모두 얻어야 합니다. 이는 직교 모드의 ``원래`` 변화, 원근법 모드"
"에서의 ``정상`` 변화 때문입니다:"

#: ../../docs/tutorials/physics/ray-casting.rst:242
msgid "To obtain it using a camera, the following code can be used:"
msgstr "카메라를 사용하여 얻기 위해선, 다음 코드를 사용할 수 있습니다:"

#: ../../docs/tutorials/physics/ray-casting.rst:270
msgid ""
"Remember that during ``_input()``, the space may be locked, so in practice "
"this query should be run in ``_physics_process()``."
msgstr ""
"``_input()`` 동안 공간이 잠겨 있을 수 있으므로 실제로 이 쿼리는 "
"``_physics_process()``에서 실행해야 한다는 점을 기억하십시오."

#: ../../docs/tutorials/physics/ragdoll_system.rst:4
msgid "Ragdoll system"
msgstr "래그돌(Ragdoll) 시스템"

#: ../../docs/tutorials/physics/ragdoll_system.rst:9
#, fuzzy
msgid ""
"Since version 3.1, Godot supports ragdoll physics. Ragdolls rely on physics "
"simulation to create realistic procedural animation. They are used for death "
"animations in many games."
msgstr ""
"3.1 버전부터 Godot은 래그돌 물리를 지원합니다. 래그돌은 현실적 절차 애니메이"
"션을 만들기 위해 물리 시뮬레이션에 의존합니다. 이것은 많은 게임에서 죽음 애니"
"메이션으로 쓰입니다."

#: ../../docs/tutorials/physics/ragdoll_system.rst:11
msgid ""
"In this tutorial, we will be using the Platformer3D demo to set up a ragdoll."
msgstr ""
"이번 튜토리얼에서는 래그돌을 설치하기 위해 Platformer3D 데모를 사용합니다."

#: ../../docs/tutorials/physics/ragdoll_system.rst:13
#, fuzzy
msgid ""
"You can download the Platformer3D demo on `GitHub <https://github.com/"
"godotengine/godot-demo-projects/tree/master/3d/platformer>`_ or using the "
"`Asset Library <https://godotengine.org/asset-library/asset/125>`_."
msgstr ""
"`GitHub <https://github.com/godotengine/godot-demo-projects/tree/master/3d/"
"platformer>`_ 또는 `Asset Library <https://godotengine.org/asset-library/"
"asset/125>`_ 를 사용해서 Platformer3D 데모를 다운로드할 수 있습니다."

#: ../../docs/tutorials/physics/ragdoll_system.rst:16
msgid "Setting up the ragdoll"
msgstr "래그돌 설정하기"

#: ../../docs/tutorials/physics/ragdoll_system.rst:19
msgid "Creating physical bones"
msgstr "물리적 본 만들기"

#: ../../docs/tutorials/physics/ragdoll_system.rst:21
#, fuzzy
msgid ""
"Like many other features in the engine, there is a node to set up a ragdoll: "
"the :ref:`PhysicalBone <class_PhysicalBone>` node. To simplify the setup, "
"you can generate ``PhysicalBone`` nodes with the \"Create physical skeleton"
"\" feature in the skeleton node."
msgstr ""
"엔진 내 다른 특징들과 마찬가지로 래그돌을 설정하기 위한 :ref:`PhysicalBone "
"<class_PhysicalBone>` 노드가 있습니다. 설정을 단순화 하기 위해서  골격 노드"
"의 \"Create physical skeleton\" 기능으로``PhysicalBone`` 노드를 생성할 수 있"
"습니다."

#: ../../docs/tutorials/physics/ragdoll_system.rst:23
#, fuzzy
msgid ""
"Open the platformer demo in Godot, and then the Robi scene. Select the "
"``Skeleton`` node. A skeleton button appears on the top bar menu:"
msgstr ""
"Godot에서 플랫포머 데모를 열고 Robi 씬을 엽니다. ``Skeleton`` 노드를 선택하세"
"요. 상단 바 메뉴에 스켈레톤 버튼이 나타납니다."

#: ../../docs/tutorials/physics/ragdoll_system.rst:27
#, fuzzy
msgid ""
"Click it and select the ``Create physical skeleton`` option. Godot will "
"generate ``PhysicalBone`` nodes and collision shapes for each bone in the "
"skeleton and pin joints to connect them together:"
msgstr ""
"버튼을 클릭하고 ``Create physical skeleton`` 옵션을 선택하세요. Godot이 "
"``PhysicalBone`` 노드와 스켈레톤의 각 뼈에 대한 충돌 모양과 핀 접합부를 생성"
"하여 서로 연결합니다."

#: ../../docs/tutorials/physics/ragdoll_system.rst:31
#, fuzzy
msgid ""
"Some of the generated bones aren't necessary: the ``MASTER`` bone for "
"example. So we're going to clean up the skeleton by removing them."
msgstr ""
"생성된 뼈들 중 일부는 필요하지 않습니다. 예: ``MASTER`` 뼈. 그래서 우리는 그 "
"뼈들을 제거함으로서 스켈레톤을 정리합니다."

#: ../../docs/tutorials/physics/ragdoll_system.rst:34
msgid "Cleaning up the skeleton"
msgstr "스켈레톤(Skeleton) 정리하기"

#: ../../docs/tutorials/physics/ragdoll_system.rst:36
msgid ""
"Each ``PhysicalBone`` the engine needs to simulate has a performance cost, "
"so you want to remove every bone that is too small to make a difference in "
"the simulation, as well as all utility bones."
msgstr ""

#: ../../docs/tutorials/physics/ragdoll_system.rst:38
msgid ""
"For example, if we take a humanoid, you do not want to have physical bones "
"for each finger. You can use a single bone for the entire hand instead, or "
"one for the palm, one for the thumb, and a last one for the other four "
"fingers."
msgstr ""

#: ../../docs/tutorials/physics/ragdoll_system.rst:40
msgid ""
"Remove these physical bones: ``MASTER``, ``waist``, ``neck``, "
"``headtracker``. This gives us an optimized skeleton and makes it easier to "
"control the ragdoll."
msgstr ""

#: ../../docs/tutorials/physics/ragdoll_system.rst:43
msgid "Collision shape adjustment"
msgstr "충돌 모양 조정"

#: ../../docs/tutorials/physics/ragdoll_system.rst:45
msgid ""
"The next task is adjusting the collision shape and the size of physical "
"bones to match the part of the body that each bone should simulate."
msgstr ""

#: ../../docs/tutorials/physics/ragdoll_system.rst:50
msgid "Joints adjustment"
msgstr ""

#: ../../docs/tutorials/physics/ragdoll_system.rst:52
msgid ""
"Once you adjusted the collision shapes, your ragdoll is almost ready. You "
"just want to adjust the pin joints to get a better simulation. "
"``PhysicalBone`` nodes have an unconstrained pin joint assigned to them by "
"default. To change the pin joint, select the ``PhysicalBone`` and change the "
"constraint type in the ``Joint`` section. There, you can change the "
"constraint's orientation and its limits."
msgstr ""

#: ../../docs/tutorials/physics/ragdoll_system.rst:56
msgid "This is the final result:"
msgstr "최종 결과물입니다:"

#: ../../docs/tutorials/physics/ragdoll_system.rst:61
msgid "Simulating the ragdoll"
msgstr ""

#: ../../docs/tutorials/physics/ragdoll_system.rst:63
msgid ""
"The ragdoll is now ready to use. To start the simulation and play the "
"ragdoll animation, you need to call the ``physical_bones_start_simulation`` "
"method. Attach a script to the skeleton node and call the method in the "
"``_ready`` method:"
msgstr ""

#: ../../docs/tutorials/physics/ragdoll_system.rst:71
msgid ""
"To stop the simulation, call the ``physical_bones_stop_simulation()`` method."
msgstr ""

#: ../../docs/tutorials/physics/ragdoll_system.rst:75
msgid ""
"You can also limit the simulation to only a few bones. To do so, pass the "
"bone names as a parameter. Here's an example of partial ragdoll simulation:"
msgstr ""

#: ../../docs/tutorials/physics/ragdoll_system.rst:80
msgid "Collision layer and mask"
msgstr "충돌 레이어와 마스크"

#: ../../docs/tutorials/physics/ragdoll_system.rst:82
msgid ""
"Make sure to set up your collision layers and masks properly so the "
"``KinematicBody``'s capsule doesn't get in the way of the physics simulation:"
msgstr ""

#: ../../docs/tutorials/physics/ragdoll_system.rst:86
msgid "For more information, read :ref:`doc_physics_introduction`"
msgstr ""

#: ../../docs/tutorials/physics/kinematic_character_2d.rst:4
msgid "Kinematic character (2D)"
msgstr ""

#: ../../docs/tutorials/physics/kinematic_character_2d.rst:9
msgid ""
"Yes, the name sounds strange. \"Kinematic Character\". What is that? The "
"reason for the name is that, when physics engines came out, they were called "
"\"Dynamics\" engines (because they dealt mainly with collision responses). "
"Many attempts were made to create a character controller using the dynamics "
"engines, but it wasn't as easy as it seemed. Godot has one of the best "
"implementations of dynamic character controller you can find (as it can be "
"seen in the 2d/platformer demo), but using it requires a considerable level "
"of skill and understanding of physics engines (or a lot of patience with "
"trial and error)."
msgstr ""

#: ../../docs/tutorials/physics/kinematic_character_2d.rst:19
msgid ""
"Some physics engines, such as Havok seem to swear by dynamic character "
"controllers as the best option, while others (PhysX) would rather promote "
"the kinematic one."
msgstr ""

#: ../../docs/tutorials/physics/kinematic_character_2d.rst:23
msgid "So, what is the difference?:"
msgstr ""

#: ../../docs/tutorials/physics/kinematic_character_2d.rst:25
msgid ""
"A **dynamic character controller** uses a rigid body with an infinite "
"inertia tensor. It's a rigid body that can't rotate. Physics engines always "
"let objects move and collide, then solve their collisions all together. This "
"makes dynamic character controllers able to interact with other physics "
"objects seamlessly, as seen in the platformer demo. However, these "
"interactions are not always predictable. Collisions can take more than one "
"frame to be solved, so a few collisions may seem to displace a tiny bit. "
"Those problems can be fixed, but require a certain amount of skill."
msgstr ""

#: ../../docs/tutorials/physics/kinematic_character_2d.rst:34
msgid ""
"A **kinematic character controller** is assumed to always begin in a non-"
"colliding state, and will always move to a non-colliding state. If it starts "
"in a colliding state, it will try to free itself like rigid bodies do, but "
"this is the exception, not the rule. This makes their control and motion a "
"lot more predictable and easier to program. However, as a downside, they "
"can't directly interact with other physics objects, unless done by hand in "
"code."
msgstr ""

#: ../../docs/tutorials/physics/kinematic_character_2d.rst:42
msgid ""
"This short tutorial will focus on the kinematic character controller. "
"Basically, the old-school way of handling collisions (which is not "
"necessarily simpler under the hood, but well hidden and presented as a nice "
"and simple API)."
msgstr ""

#: ../../docs/tutorials/physics/kinematic_character_2d.rst:48
msgid "Physics process"
msgstr ""

#: ../../docs/tutorials/physics/kinematic_character_2d.rst:50
msgid ""
"To manage the logic of a kinematic body or character, it is always advised "
"to use physics process, because it's called before physics step and its "
"execution is in sync with physics server, also it is called the same amount "
"of times per second, always. This makes physics and motion calculation work "
"in a more predictable way than using regular process, which might have "
"spikes or lose precision if the frame rate is too high or too low."
msgstr ""

#: ../../docs/tutorials/physics/kinematic_character_2d.rst:81
msgid ""
"To have something to test, here's the scene (from the tilemap tutorial): :"
"download:`kbscene.zip <files/kbscene.zip>`. We'll be creating a new scene "
"for the character. Use the robot sprite and create a scene like this:"
msgstr ""

#: ../../docs/tutorials/physics/kinematic_character_2d.rst:87
msgid ""
"You'll notice that there's a warning icon next to our CollisionShape2D node; "
"that's because we haven't defined a shape for it. Create a new CircleShape2D "
"in the shape property of CollisionShape2D. Click on <CircleShape2D> to go to "
"the options for it, and set the radius to 30:"
msgstr ""

#: ../../docs/tutorials/physics/kinematic_character_2d.rst:94
msgid ""
"**Note: As mentioned before in the physics tutorial, the physics engine "
"can't handle scale on most types of shapes (only collision polygons, planes "
"and segments work), so always change the parameters (such as radius) of the "
"shape instead of scaling it. The same is also true for the kinematic/rigid/"
"static bodies themselves, as their scale affects the shape scale.**"
msgstr ""

#: ../../docs/tutorials/physics/kinematic_character_2d.rst:101
msgid ""
"Now, create a script for the character, the one used as an example above "
"should work as a base."
msgstr ""

#: ../../docs/tutorials/physics/kinematic_character_2d.rst:104
msgid ""
"Finally, instance that character scene in the tilemap, and make the map "
"scene the main one, so it runs when pressing play."
msgstr ""

#: ../../docs/tutorials/physics/kinematic_character_2d.rst:110
#, fuzzy
msgid "Moving the kinematic character"
msgstr "인터페이스 변경"

#: ../../docs/tutorials/physics/kinematic_character_2d.rst:112
msgid ""
"Go back to the character scene, and open the script, the magic begins now! "
"Kinematic body will do nothing by default, but it has a useful function "
"called :ref:`KinematicBody2D.move_and_collide() "
"<class_KinematicBody2D_method_move_and_collide>`. This function takes a :ref:"
"`Vector2 <class_Vector2>` as an argument, and tries to apply that motion to "
"the kinematic body. If a collision happens, it stops right at the moment of "
"the collision."
msgstr ""

#: ../../docs/tutorials/physics/kinematic_character_2d.rst:120
msgid "So, let's move our sprite downwards until it hits the floor:"
msgstr ""

#: ../../docs/tutorials/physics/kinematic_character_2d.rst:144
msgid ""
"The result is that the character will move, but stop right when hitting the "
"floor. Pretty cool, huh?"
msgstr ""

#: ../../docs/tutorials/physics/kinematic_character_2d.rst:147
msgid ""
"The next step will be adding gravity to the mix, this way it behaves a "
"little more like a regular game character:"
msgstr ""

#: ../../docs/tutorials/physics/kinematic_character_2d.rst:183
msgid ""
"Now the character falls smoothly. Let's make it walk to the sides, left and "
"right when touching the directional keys. Remember that the values being "
"used (for speed at least) are pixels/second."
msgstr ""

#: ../../docs/tutorials/physics/kinematic_character_2d.rst:187
msgid "This adds simple walking support by pressing left and right:"
msgstr ""

#: ../../docs/tutorials/physics/kinematic_character_2d.rst:252
msgid "And give it a try."
msgstr ""

#: ../../docs/tutorials/physics/kinematic_character_2d.rst:254
msgid ""
"This is a good starting point for a platformer. A more complete demo can be "
"found in the demo zip distributed with the engine, or in the https://github."
"com/godotengine/godot-demo-projects/tree/master/2d/kinematic_character."
msgstr ""

#: ../../docs/tutorials/physics/soft_body.rst:4
msgid "SoftBody"
msgstr ""

#: ../../docs/tutorials/physics/soft_body.rst:6
msgid ""
"Soft bodies (or *soft-body dynamics*) simulate movement, changing shape and "
"other physical properties of deformable objects. This can for example be "
"used to simulate cloth or to create more realistic characters."
msgstr ""

#: ../../docs/tutorials/physics/soft_body.rst:10
msgid "Basic set-up"
msgstr "기본 설정"

#: ../../docs/tutorials/physics/soft_body.rst:12
msgid ""
"A :ref:`SoftBody <class_SoftBody>` node is used for soft body simulations."
msgstr ""

#: ../../docs/tutorials/physics/soft_body.rst:14
msgid "We will create a bouncy cube to demonstrate the setup of a soft body."
msgstr ""

#: ../../docs/tutorials/physics/soft_body.rst:16
msgid ""
"Create a new scene with a ``Spatial`` node as root. Then, create a "
"``Softbody`` node. Add a ``CubeMesh`` in the ``mesh`` property of the node "
"in the inspector and increase the subdivision of the mesh for simulation."
msgstr ""

#: ../../docs/tutorials/physics/soft_body.rst:20
msgid ""
"Set the parameters to obtain the type of soft body you aim for. Try to keep "
"the ``Simulation Precision`` above 5, otherwise, the soft body may collapse."
msgstr ""

#: ../../docs/tutorials/physics/soft_body.rst:24
msgid ""
"Handle some parameters with care, as some value can lead to strange results. "
"For example, if the shape is not completely closed and you set pressure to "
"more than 0, the softbody will fly around like a plastic bag under strong "
"wind."
msgstr ""

#: ../../docs/tutorials/physics/soft_body.rst:26
#, fuzzy
msgid "Play the scene to view the simulation."
msgstr "적절한 애니메이션을 재생."

#: ../../docs/tutorials/physics/soft_body.rst:28
msgid ""
"To improve the simulation's result, increase the ``Simulation Precision``, "
"this will give significant improvement at the cost of performance."
msgstr ""

#: ../../docs/tutorials/physics/soft_body.rst:31
msgid "Cloak simulation"
msgstr ""

#: ../../docs/tutorials/physics/soft_body.rst:33
msgid "Let's make a cloak in the Platformer3D demo."
msgstr ""

#: ../../docs/tutorials/physics/soft_body.rst:35
msgid ""
"You can download the Platformer3D demo on `GitHub <https://github.com/"
"godotengine/godot-demo-projects/tree/master/3d/platformer>` or `the Asset "
"Library <https://godotengine.org/asset-library/asset/125>`_."
msgstr ""

#: ../../docs/tutorials/physics/soft_body.rst:37
msgid ""
"Open the ``Player`` scene, add a ``SoftBody`` node and assign a "
"``PlaneMesh`` to it."
msgstr ""

#: ../../docs/tutorials/physics/soft_body.rst:39
msgid ""
"Open the ``PlaneMesh`` properties and set the size(x: 0.5 y: 1) then set "
"``Subdivide Width`` and ``Subdivide Depth`` to 5. Adjust the ``SoftBody``'s "
"position. You should end up with something like this:"
msgstr ""

#: ../../docs/tutorials/physics/soft_body.rst:43
msgid "Subdivision generates a more tessellated mesh for better simulations."
msgstr ""

#: ../../docs/tutorials/physics/soft_body.rst:45
msgid ""
"Add a :ref:`BoneAttachment <class_BoneAttachment>` node under the skeleton "
"node and select the Neck bone to attach the cloak to the character skeleton."
msgstr ""

#: ../../docs/tutorials/physics/soft_body.rst:47
msgid ""
"``BoneAttachment`` node is to attach objects to a bone of a armature. The "
"attached object will follow the bone's movement, weapon of a character can "
"be attached this way."
msgstr ""

#: ../../docs/tutorials/physics/soft_body.rst:51
msgid ""
"To create pinned joints, select the upper vertices in the ``SoftBody`` node:"
msgstr ""

#: ../../docs/tutorials/physics/soft_body.rst:55
msgid ""
"The pinned joints can be find in ``SoftBody``'s ``Attachments`` property, "
"choose the ``BoneAttachment`` as the ``SpatialAttachment`` for each pinned "
"joints, the pinned joints are now attached to the neck."
msgstr ""

#: ../../docs/tutorials/physics/soft_body.rst:59
msgid ""
"Last step is to avoid clipping by adding the Kinematic Body `Player` to "
"``Parent Collision Ignore`` of the ``SoftBody``."
msgstr ""

#: ../../docs/tutorials/physics/soft_body.rst:63
msgid "Play the scene and the cloak should simulate correctly."
msgstr ""

#: ../../docs/tutorials/physics/soft_body.rst:67
msgid ""
"This covers the basic settings of softbody, experiment with the parameters "
"to achieve the effect you are aiming for when making your game."
msgstr ""

#: ../../docs/tutorials/math/vector_math.rst:4
msgid "Vector math"
msgstr "벡터"

#: ../../docs/tutorials/math/vector_math.rst:9
msgid ""
"This tutorial is a short and practical introduction to linear algebra as it "
"applies to game development. Linear algebra is the study of vectors and "
"their uses. Vectors have many applications in both 2D and 3D development and "
"Godot uses them extensively. Developing a good understanding of vector math "
"is essential to becoming a strong game developer."
msgstr ""
"이 튜토리얼은 게임 개발에 적용되는 선형대수에 대한 짧고 실용적인 소개입니"
"다. \n"
"선형 대수란 벡터와 벡터 사용에 대한 학문입니다. 벡터는 2D 및 3D 개발 모두에"
"서 많은 애플리케이션을 가지고 있으며 Godot는 이를 광범위하게 사용합니다. 벡"
"터 수학에 대한 올바른 이해는 강력한 게임 개발자가 되기 위해 필수적입니다."

#: ../../docs/tutorials/math/vector_math.rst:15
msgid ""
"This tutorial is **not** a formal textbook on linear algebra. We will only "
"be looking at how it is applied to game development. For a broader look at "
"the mathematics, see https://www.khanacademy.org/math/linear-algebra"
msgstr ""
"이 튜토리얼은 선형대수에 관한 공식 교과서가 **절대** 아닙니다. 우리는 단지 그"
"것이 어떻게 게임 개발에 적용되는지 지켜볼 것입니다. 수학에 대한 자세한 내용"
"은 https://www.khanacademy.org/math/linear-algebra을 참조하십시오"

#: ../../docs/tutorials/math/vector_math.rst:21
msgid "Coordinate systems (2D)"
msgstr "좌표계 (2차원)"

#: ../../docs/tutorials/math/vector_math.rst:23
msgid ""
"In 2D space, coordinates are defined using a horizontal axis (``x``) and a "
"vertical axis (``y``). A particular position in 2D space is written as a "
"pair of values such as ``(4, 3)``."
msgstr ""
"2차원 공간에서, 좌표계들은 가로축(x)과 세로축(y)을 사요하며 정의됩니다.\n"
"2차원 공간에서의 특정한 위치는 (4,3)과 같이 한 쌍의 값으로 쓰여집니다."

#: ../../docs/tutorials/math/vector_math.rst:29
msgid ""
"If you're new to computer graphics, it might seem odd that the positive "
"``y`` axis points **downwards** instead of upwards, as you probably learned "
"in math class. However, this is common in most computer graphics "
"applications."
msgstr ""
"컴퓨터 그래픽을 처음 접하는 사람이라면 아마 수학 수업에서 배웠듯이 양의``y\" "
"축이 위쪽이 아니라 **아래쪽**을 가리키는 것이 이상하게 보일지도 모릅니다. 그"
"러나 대부분의 컴퓨터 그래픽 응용 프로그램에서는 일반적으로 이러한 현상이 발생"
"합니다."

#: ../../docs/tutorials/math/vector_math.rst:34
msgid ""
"Any position in the 2D plane can be identified by a pair of numbers in this "
"way. However, we can also think of the position ``(4, 3)`` as an **offset** "
"from the ``(0, 0)`` point, or **origin**. Draw an arrow pointing from the "
"origin to the point:"
msgstr ""
"2D 평면의 모든 위치는 이러한 방식으로 한 쌍의 수들로 식별할 수 있습니다. \n"
"그러나 우리는 또한  (4, 3)의 위치를  (0, 0)으로 부터 상쇄되었다고 생각하거나 "
"기원으로 생각할 수 있습니다. \n"
"원점에서 점까지 가리키는 화살표를 그리세요:"

#: ../../docs/tutorials/math/vector_math.rst:41
msgid ""
"This is a **vector**. A vector represents a lot of useful information. As "
"well as telling us that the point is at ``(4, 3)``, we can also think of it "
"as an angle ``θ`` and a length (or magnitude) ``m``. In this case, the arrow "
"is a **position vector** - it denotes a position in space, relative to the "
"origin."
msgstr ""
"이것은 벡터입니다. 벡터는 유용한 많은 정보들을 보여줍니다. 점이 (4, 3)에 있다"
"고 알려줄 뿐 아니라,  우리는 각도 'θ' 그리고 길이 (또는 크기) 'm' 또한 생각해"
"낼 수 있습니다. 이러한  경우 화살표는 **위치 벡터**로, 원점에 상대적인 공간"
"의 위치를 나타냅니다."

#: ../../docs/tutorials/math/vector_math.rst:47
msgid ""
"A very important point to consider about vectors is that they only represent "
"**relative** direction and magnitude. There is no concept of a vector's "
"position. The following two vectors are identical:"
msgstr ""
"벡터에 대해 고려해야 할 매우 중요한 점은 벡터가 **상대적인** 방향과 크기만 나"
"타낸다는 것입니다. 벡터의 위치에 대한 개념이 없습니다. 다음 두 벡터는 동일합"
"니다:"

#: ../../docs/tutorials/math/vector_math.rst:53
msgid ""
"Both vectors represent a point 4 units to the right and 3 units below some "
"starting point. It does not matter where on the plane you draw the vector, "
"it always represents a relative direction and magnitude."
msgstr ""
"두 벡터 모두 시작점으로 부터 오른쪽으로 4만큼 아랫쪽으로 3만큼 의 단위를 나타"
"냅니다.  평면에서 벡터를 그리는 것은 중요하지 않습니다. 이것은 항상 상대적인 "
"방향과 크기를 나타냅니다."

#: ../../docs/tutorials/math/vector_math.rst:58
msgid "Vector operations"
msgstr "벡터 연산"

#: ../../docs/tutorials/math/vector_math.rst:60
#, fuzzy
msgid ""
"You can use either method (x and y coordinates or angle and magnitude) to "
"refer to a vector, but for convenience, programmers typically use the "
"coordinate notation. For example, in Godot, the origin is the top-left "
"corner of the screen, so to place a 2D node named ``Node2D`` 400 pixels to "
"the right and 300 pixels down, use the following code:"
msgstr ""
"당신은 둘 중 하나의 방법(x 및 y 좌표 또는 각도 및 크기)을 사용하여 벡터를 참"
"조할 수 있지만, 편리한 프로그래머는 전형적으로 좌표 표기법을 사용합니다.\n"
" 예를 들어 Godot에서 원점은 화면의 왼쪽 상단 모서리이고, \"Node2D\"라는 2차원"
"의 교점을  400픽셀 오른쪽, 300픽셀 아래로 배치하려면 다음 코드를 사용하십시"
"오:"

#: ../../docs/tutorials/math/vector_math.rst:76
#, fuzzy
msgid ""
"Godot supports both :ref:`Vector2 <class_Vector2>` and :ref:`Vector3 "
"<class_Vector3>` for 2D and 3D usage, respectively. The same mathematical "
"rules discussed in this article apply to both types."
msgstr ""
"Godot는 2D 및 3D 사용 시 각각 :ref: Vector2 <class_Vector2>와 :ref:`Vector3 "
"<class_Vector3>를 지원합니다. 이 문서에서 논의된 동일한 수학적 규칙은 두 가"
"지 유형 모두에 적용됩니다."

#: ../../docs/tutorials/math/vector_math.rst:81
msgid "Member access"
msgstr "멤버 접근"

#: ../../docs/tutorials/math/vector_math.rst:83
msgid ""
"The individual components of the vector can be accessed directly by name."
msgstr "벡터의 각각의 구성요소는 이름으로 직접 접근할 수 있다."

#: ../../docs/tutorials/math/vector_math.rst:105
msgid "Adding vectors"
msgstr "벡터의 합"

#: ../../docs/tutorials/math/vector_math.rst:107
msgid ""
"When adding or subtracting two vectors, the corresponding components are "
"added:"
msgstr "두 벡터를 더하거나 뺼 떄, 해당하는 구성요소는 더해집니다:"

#: ../../docs/tutorials/math/vector_math.rst:118
msgid ""
"We can also see this visually by adding the second vector at the end of the "
"first:"
msgstr ""
"첫번째 벡터의 끝에 두번째 벡터를 더함으로써 우리는 시각적으로도 이것을 확인"
"할 수 있습니다:"

#: ../../docs/tutorials/math/vector_math.rst:123
msgid "Note that adding ``a + b`` gives the same result as ``b + a``."
msgstr "즉 더하기 a+b는 b+a 와 같은 결과 값을 갖는다."

#: ../../docs/tutorials/math/vector_math.rst:126
msgid "Scalar multiplication"
msgstr "스칼라 곱"

#: ../../docs/tutorials/math/vector_math.rst:128
msgid ""
"Vectors represent both direction and magnitude. A value representing only "
"magnitude is called a **scalar**."
msgstr ""
"벡터는 방향과 크기 둘 다를 나타냅니다. 크기만 나타내고 있는 값을  **스칼라**"
"라고 합니다."

#: ../../docs/tutorials/math/vector_math.rst:131
msgid "A vector can be multiplied by a **scalar**:"
msgstr "벡터는 스칼라에 의해 곱해질 수 있습니다:"

#: ../../docs/tutorials/math/vector_math.rst:146
msgid ""
"Multiplying a vector by a scalar does not change its direction, only its "
"magnitude. This is how you **scale** a vector."
msgstr ""
"벡터에 스칼라를 곱하는 것은 벡터의 방향을 바꾸지는 않고, 이것의 크기만 바꿉니"
"다. 이것이 바로 벡터의 크기를 조정하는 방법입니다."

#: ../../docs/tutorials/math/vector_math.rst:150
msgid "Practical applications"
msgstr "실용적인 응용"

#: ../../docs/tutorials/math/vector_math.rst:152
msgid "Let's look at two common uses for vector addition and subtraction."
msgstr "벡터 덧셈과 뺄셈의 두 가지 일반적인 용법을 살펴보자."

#: ../../docs/tutorials/math/vector_math.rst:155
msgid "Movement"
msgstr "이동"

#: ../../docs/tutorials/math/vector_math.rst:157
msgid ""
"A vector can represent **any** quantity with a magnitude and direction. "
"Typical examples are: position, velocity, acceleration, and force. In this "
"image, the spaceship at step 1 has a position vector of ``(1,3)`` and a "
"velocity vector of ``(2,1)``. The velocity vector represents how far the "
"ship moves each step. We can find the position for step 2 by adding the "
"velocity to the current position."
msgstr ""
"벡터는 크기와 방향을 가진 모든 양을 나타낼 수 있습니다. \n"
"대표적인 예 : 위치, 속도, 가속도, 힘\n"
"이 그림에서 1단계의 우주선은 위치 벡터 '(1,3)' 과  속도 벡터 '(2,1)'을  가지"
"고 있습니다. \n"
"속도 벡터는 배가 각 단계를 이동하는 정도를 나타냅니다.\n"
"현재 위치에 속도를 더함으로써 2단계의 위치를 찾을 수 있습니다."

#: ../../docs/tutorials/math/vector_math.rst:165
msgid ""
"Velocity measures the **change** in position per unit of time. The new "
"position is found by adding velocity to the previous position."
msgstr ""
"속도는 시간 단위당 위치의 변화를 측정합니다. 새로운 위치는 이전 위치에 속도"
"를 더함으로써 찾을 수 있습니다."

#: ../../docs/tutorials/math/vector_math.rst:169
msgid "Pointing toward a target"
msgstr "표적을 향하기"

#: ../../docs/tutorials/math/vector_math.rst:171
msgid ""
"In this scenario, you have a tank that wishes to point its turret at a "
"robot. Subtracting the tank's position from the robot's position gives the "
"vector pointing from the tank to the robot."
msgstr ""
"이 시나리오에서, 당신은 회전포탑을 로봇에게 겨누고자 하는 탱크를 가지고 있"
"다. \n"
"로봇의 위치에서 탱크의 위치를 빼면 벡터가 탱크에서 로봇으로 가리킬 수 있습니"
"다."

#: ../../docs/tutorials/math/vector_math.rst:177
msgid "To find a vector pointing from ``A`` to ``B`` use ``B - A``."
msgstr "\"A\"에서 \"B\"로 향하는 벡터를 찾으려면 \"B - A\"를 사용합니다."

#: ../../docs/tutorials/math/vector_math.rst:180
msgid "Unit vectors"
msgstr "단위 벡터"

#: ../../docs/tutorials/math/vector_math.rst:182
msgid ""
"A vector with **magnitude** of ``1`` is called a **unit vector**. They are "
"also sometimes referred to as **direction vectors** or **normals**. Unit "
"vectors are helpful when you need to keep track of a direction."
msgstr ""
"**크기** 가 1인 벡터를 **단위 벡터** 라고 합니다. 또한 이러한 벡터는 **방향 "
"벡터** 또는 **법선벡터** 라고도 합니다. 단위 벡터는 방향을 추적해야 할 때 유"
"용합니다."

#: ../../docs/tutorials/math/vector_math.rst:187
msgid "Normalization"
msgstr "표준화"

#: ../../docs/tutorials/math/vector_math.rst:189
msgid ""
"**Normalizing** a vector means reducing its length to ``1`` while preserving "
"its direction. This is done by dividing each of its components by its "
"magnitude:"
msgstr ""
"벡터를 **표준화** 한다는 것의 의미는 벡터의 방향은 유지하면서 벡터의 길이를 1"
"로 줄이는 것입니다. 이것은 각 벡터를 그것의 크기로 나누면서 이루어집니다:"

#: ../../docs/tutorials/math/vector_math.rst:208
msgid ""
"Because this is such a common operation, ``Vector2`` and ``Vector3`` provide "
"a method for normalizing:"
msgstr ""
"이것은 일반적인 계산이기 때문에, ``vector2`` 와 ``vector3`` 는 표준화하는 방"
"법을 제공합니다:"

#: ../../docs/tutorials/math/vector_math.rst:221
msgid ""
"Because normalization involves dividing by the vector's length, you cannot "
"normalize a vector of length ``0``. Attempting to do so will result in an "
"error."
msgstr ""
"표준화는 벡터 길이로 나누어지기 때문에 길이 \"0\"의 벡터를 표준화할 수 없습니"
"다. 이렇게 시도한다면 오류가 발생할 것입니다."

#: ../../docs/tutorials/math/vector_math.rst:226
msgid "Reflection"
msgstr "반사"

#: ../../docs/tutorials/math/vector_math.rst:228
msgid ""
"A common use of unit vectors is to indicate **normals**. Normal vectors are "
"unit vectors aligned perpendicularly to a surface, defining its direction. "
"They are commonly used for lighting, collisions, and other operations "
"involving surfaces."
msgstr ""
"단위벡터의 일반적인 용도는 **법선 벡터** 를 나타내는 것입니다. 법선 벡터는 표"
"면에 수직으로 정렬된 단위 벡터를 말하며, 방향을 정의합니다. 이 장치는 일반적"
"으로 조명, 충돌 및 표면과 관련된 기타 작업에 사용됩니다."

#: ../../docs/tutorials/math/vector_math.rst:233
msgid ""
"For example, imagine we have a moving ball that we want to bounce off a wall "
"or other object:"
msgstr ""
"예를 들어, 우리가 벽이나 다른 물체에서 튀기길 원하는 움직이는 공을 가지고 있"
"다고 상상해 보세요:"

#: ../../docs/tutorials/math/vector_math.rst:238
msgid ""
"The surface normal has a value of ``(0, -1)`` because this is a horizontal "
"surface. When the ball collides, we take its remaining motion (the amount "
"left over when it hits the surface) and reflect it using the normal. In "
"Godot, the :ref:`Vector2 <class_Vector2>` class has a ``bounce()`` method to "
"handle this. Here is a GDScript example of the diagram above using a :ref:"
"`KinematicBody2D <class_KinematicBody2D>`:"
msgstr ""
"이 표면은 수평면이기 때문에 표면 법선벡터 값은 \"(0, -1)\"입니다.\n"
" 공이 충돌할 때, 우리는 그것의 남은 동작(표면에 부딪힐 때 남은 양)을 취하고 "
"이것을 법선벡터를 이용하는데에 반영합니다. \n"
"고도에서 :ref :vector2 <class_Vector2> 클래스는 이것을 다루는 \"bounce()\" 메"
"소드를 가지고 있습니다.\n"
" 위 다이어그램의 GDScript 예제는 :ref:\"KinemicalBody2D "
"<class_KinemicalBody2D>를 이용하는 것입니다:"

#: ../../docs/tutorials/math/vector_math.rst:268
msgid "Dot product"
msgstr "내적"

#: ../../docs/tutorials/math/vector_math.rst:270
msgid ""
"The **dot product** is one of the most important concepts in vector math, "
"but is often misunderstood. Dot product is an operation on two vectors that "
"returns a **scalar**. Unlike a vector, which contains both magnitude and "
"direction, a scalar value has only magnitude."
msgstr ""
"**내적** 이란 벡터 수학에서 가장 중요한 개념 중 하나이지만 종종 잘못 이해됩니"
"다.\n"
"내적은 두 벡터를 **스칼라** 로 반환해주는 연산입니다.  크기와 방향 모두를 포"
"함하는 벡터와는 다르게 스칼라 값은 오직 크기만 갖습니다."

#: ../../docs/tutorials/math/vector_math.rst:275
msgid "The formula for dot product takes two common forms:"
msgstr "내적의 공식은 두가지 형식을 취한다:"

#: ../../docs/tutorials/math/vector_math.rst:277
msgid ""
"A \\cdot B = \\left \\| A \\right \\|\\left \\| B \\right \\|\\cos \\Theta"
msgstr ""

#: ../../docs/tutorials/math/vector_math.rst:283
msgid "A \\cdot B = A_{x}B_{x} + A_{y}B_{y}"
msgstr "A·B = Ax Bx + Ay By"

#: ../../docs/tutorials/math/vector_math.rst:287
msgid ""
"However, in most cases it is easiest to use the built-in method. Note that "
"the order of the two vectors does not matter:"
msgstr ""
"그러나, 대부분의 경우에서 기본 방법을 사용하는 것이 가장 쉽습니다. \n"
"두 벡터의 순서는 중요하지 않습니다:"

#: ../../docs/tutorials/math/vector_math.rst:301
msgid ""
"The dot product is most useful when used with unit vectors, making the first "
"formula reduce to just ``cosθ``. This means we can use the dot product to "
"tell us something about the angle between two vectors:"
msgstr ""
"내적은 첫 번째 공식을 cosθ로 줄이면서 단위벡터를 사용할 때 가장 유용합니다.\n"
"즉, 단위벡터를 사용하여 두 벡터 간의 각도에 대해 설명할 수 있습니다:"

#: ../../docs/tutorials/math/vector_math.rst:307
msgid ""
"When using unit vectors, the result will always be between ``-1`` (180°) and "
"``1`` (0°)."
msgstr "단위벡터를 사용할때, 결과는 항상 -1(180°)에서 1(0°) 사이일 것이다."

#: ../../docs/tutorials/math/vector_math.rst:311
msgid "Facing"
msgstr "직면"

#: ../../docs/tutorials/math/vector_math.rst:313
msgid ""
"We can use this fact to detect whether an object is facing toward another "
"object. In the diagram below, the player ``P`` is trying to avoid the "
"zombies ``A`` and ``B``. Assuming a zombie's field of view is **180°**, can "
"they see the player?"
msgstr ""
"우리는 이 사실을 어떤 물체가 다른 물체를 향하고 있는지 감지하는데에 이용할 "
"수 있습니다. \n"
"아래 그림에서 ``P`` 선수는 좀비 ``A`` 와 ``B`` 를 피하려고 합니다.\n"
"좀비의 시야가 **180°** 라고 가정하면 플레이어를 볼 수 있을까요?"

#: ../../docs/tutorials/math/vector_math.rst:319
msgid ""
"The green arrows ``fA`` and ``fB`` are **unit vectors** representing the "
"zombies' facing directions and the blue semicircle represents its field of "
"view. For zombie ``A``, we find the direction vector ``AP`` pointing to the "
"player using ``P - A`` and normalize it. If the angle between this vector "
"and the facing vector is less than 90°, then the zombie can see the player."
msgstr ""
"녹색 화살표 ``fA`` 와 ``fB`` 는 좀비들이 마주보는 방향을 나타내는 **단위 벡터"
"** 이고 파란 반원형은 그것의 시야를 나타냅니다. \n"
"좀비 ``A`` 의 경우 방향 벡터인 ``AP``가 ``P - A`` 를 사용하여 선수를 가리키"
"는 것을 발견해 법선벡터를 만듭니다.\n"
"이 벡터와 마주보는 벡터 사이의 각도가 90° 미만일 경우 좀비는 플레이어를 볼 "
"수 있습니다."

#: ../../docs/tutorials/math/vector_math.rst:326
msgid "In code it would look like this:"
msgstr "코드에서는 이렇게 보일 것이다:"

#: ../../docs/tutorials/math/vector_math.rst:344
msgid "Cross product"
msgstr "외적"

#: ../../docs/tutorials/math/vector_math.rst:346
#, fuzzy
msgid ""
"Like the dot product, the **cross product** is an operation on two vectors. "
"However, the result of the cross product is a vector with a direction that "
"is perpendicular to both. Its magnitude depends on their relative angle. If "
"two vectors are parallel, the result of their cross product will be a null "
"vector."
msgstr ""
"내적과 같이, 외적은 두 벡터사이의 연산입니다. 그러나 외적의 결과는 양쪽과 수"
"직의 방향을 가진 벡터입니다. 그것의 크기는 그것들의 상대적인 각도에 의존합니"
"다. 만약 두 벡터가 평행이라면, 외적의 결과는 0벡터일 것입니다."

#: ../../docs/tutorials/math/vector_math.rst:351
msgid ""
"\\left \\|a \\times b  \\right \\| = \\left \\| a \\right \\|\\left \\| b "
"\\right \\|\\ |\\sin(a,b)|"
msgstr "||a X b|| = ||a|| ||b|| |sin(a,b)|"

#: ../../docs/tutorials/math/vector_math.rst:357
msgid "The cross product is calculated like this:"
msgstr "외적은 이렇게 계산된다:"

#: ../../docs/tutorials/math/vector_math.rst:376
msgid "With Godot, you can use the built-in method:"
msgstr "고도에서는, 기본 방법을 사용할 수 있습니다:"

#: ../../docs/tutorials/math/vector_math.rst:387
msgid ""
"In the cross product, order matters. ``a.cross(b)`` does not give the same "
"result as ``b.cross(a)``. The resulting vectors point in **opposite** "
"directions."
msgstr ""
"외적에서는, 순서가 중요합니다. \"a.cross(b)\"는 \"b.cross(a)\"와 같은 결가가 "
"나오지 않습니다.  결과 벡터는 **반대쪽** 방향을 가리킵니다."

#: ../../docs/tutorials/math/vector_math.rst:392
msgid "Calculating normals"
msgstr "법선 계산하기"

#: ../../docs/tutorials/math/vector_math.rst:394
msgid ""
"One common use of cross products is to find the surface normal of a plane or "
"surface in 3D space. If we have the triangle ``ABC`` we can use vector "
"subtraction to find two edges ``AB`` and ``AC``. Using the cross product, "
"``AB x AC`` produces a vector perpendicular to both: the surface normal."
msgstr ""
"외적의 일반적인 용도는 3D 공간에서 표면 또는 평명의 법선 표면을 찾는 것입니"
"다. 삼각형 \"ABC\"가 있다면 벡터 뺄셈을 사용하여 \"AB\"와 \"AC\"의 두 모서리"
"를 찾을 수 있습니다. 외적을 이용하여 \"AB x AC\"는 두 가지 모두에 수직인 벡터"
"를 생성합니다: 표면에 수직방향."

#: ../../docs/tutorials/math/vector_math.rst:399
msgid "Here is a function to calculate a triangle's normal:"
msgstr "이것은 삼각형에 수직인 평면을 계산하는 함수이다:"

#: ../../docs/tutorials/math/vector_math.rst:423
msgid "Pointing to a target"
msgstr "대상 가리키기"

#: ../../docs/tutorials/math/vector_math.rst:425
#, fuzzy
msgid ""
"In the dot product section above, we saw how it could be used to find the "
"angle between two vectors. However, in 3D, this is not enough information. "
"We also need to know what axis to rotate around. We can find that by "
"calculating the cross product of the current facing direction and the target "
"direction. The resulting perpendicular vector is the axis of rotation."
msgstr ""
"위의 외적 섹션에서, 우리는 두 벡터 간의 각도를 찾는 데 어떻게 이것을 이용할 "
"수 있는지 확인했습니다. \n"
"그러나 3차원에서는 정보가 충분하지 않습니다. 우리는 또한 어떤 축을 중심으로 "
"회전해야 하는지 알아야 합니다.\n"
"우리는 현재 마주보는 방향과 목표 방향의 외적을 계산함으로써 그것을 발견할 수 "
"있습니다. 결과 수직 벡터는 회전의 축입니다."

#: ../../docs/tutorials/math/vector_math.rst:433
msgid "More information"
msgstr "더 많은 정보"

#: ../../docs/tutorials/math/vector_math.rst:435
msgid ""
"For more information on using vector math in Godot, see the following "
"articles:"
msgstr ""
"고도에서 벡터 수학을 이용하는 것에 대해 더 많은 정보를 원한다면, 다음 글들을 "
"봐주십시오:"

#: ../../docs/tutorials/math/vector_math.rst:437
msgid ":ref:`doc_vectors_advanced`"
msgstr ":ref:`doc_vectors_advanced`"

#: ../../docs/tutorials/math/vector_math.rst:438
msgid ":ref:`doc_matrices_and_transforms`"
msgstr ":ref:`doc_matrices_and_transforms`"

#: ../../docs/tutorials/math/vectors_advanced.rst:4
msgid "Advanced vector math"
msgstr "고급 벡터 연산"

#: ../../docs/tutorials/math/vectors_advanced.rst:7
msgid "Planes"
msgstr "평면"

#: ../../docs/tutorials/math/vectors_advanced.rst:9
msgid ""
"The dot product has another interesting property with unit vectors. Imagine "
"that perpendicular to that vector (and through the origin) passes a plane. "
"Planes divide the entire space into positive (over the plane) and negative "
"(under the plane), and (contrary to popular belief) you can also use their "
"math in 2D:"
msgstr ""
"외적은 단위 벡터에 대한 또 다른 흥미로운 속성을 갖고있습니다. 벡터에 수직이"
"고 (원점을 통해) 평면을 통과한다고 상상해보십시오. 평면은 전체 공간을 양(비행"
"기 위)과 음(비행기 아래)으로 나누면, (일반적으로 믿는 것과 무관) 그 연산들을 "
"2차원에서도 사용할 수 있습니다:"

#: ../../docs/tutorials/math/vectors_advanced.rst:17
msgid ""
"Unit vectors that are perpendicular to a surface (so, they describe the "
"orientation of the surface) are called **unit normal vectors**. Though, "
"usually they are just abbreviated as *normals*. Normals appear in planes, 3D "
"geometry (to determine where each face or vertex is siding), etc. A "
"**normal** *is* a **unit vector**, but it's called *normal* because of its "
"usage. (Just like we call (0,0) the Origin!)."
msgstr ""
"표면에 수직인 단위 벡터를 **단위 법선 벡터** 라고 합니다. \n"
"그러나 일반적으로 *법선벡터* 로 줄여 씁니다.\n"
" 평면, 3차원(각 면 또는 정점이 면으로 있는 위치를 결정하기 위해) 등에 법선벡"
"터가 나타납니다. **법선벡터** 는 **단위벡터** 이지만, 이것의 사용 때문에 *법"
"선벡터* 라고 합니다. (원점을 (0,0)이라고 부르는 것처럼!)."

#: ../../docs/tutorials/math/vectors_advanced.rst:24
msgid ""
"It's as simple as it looks. The plane passes by the origin and the surface "
"of it is perpendicular to the unit vector (or *normal*). The side towards "
"the vector points to is the positive half-space, while the other side is the "
"negative half-space. In 3D this is exactly the same, except that the plane "
"is an infinite surface (imagine an infinite, flat sheet of paper that you "
"can orient and is pinned to the origin) instead of a line."
msgstr ""
"그것은 보이는 것 만큼 간단합니다. 평면은 원점을 통과하며 그 표면은 단위 벡터"
"(또는 *법선벡터*_)에 수직입니다. 벡터 점을 향하는 측면은 양의 반쪽 공간이고, "
"다른 쪽은 음의 반쪽 공간입니다. 3차원에서는 평면이 선 대신 무한 표면(방향을 "
"지정할 수 있고 원점에 고정되는 무한 평면 용지)이라는 점을 제외하면 정확하게 "
"동일합니다."

#: ../../docs/tutorials/math/vectors_advanced.rst:33
msgid "Distance to plane"
msgstr "평면과의 거리"

#: ../../docs/tutorials/math/vectors_advanced.rst:35
msgid ""
"Now that it's clear what a plane is, let's go back to the dot product. The "
"dot product between a **unit vector** and any **point in space** (yes, this "
"time we do dot product between vector and position), returns the **distance "
"from the point to the plane**:"
msgstr ""
"이제 평면이 무엇인지 알았으니, 다시 내적으로 돌아가 봅시다. **단위벡터** 와 "
"**공간 내 모든 점** 사이의 내적 (예, 이번에는 벡터와 위치 간에 내적을수행함)"
"은 점에서 평면까지의 **거리를 반환합니다** :"

#: ../../docs/tutorials/math/vectors_advanced.rst:49
msgid ""
"But not just the absolute distance, if the point is in the negative half "
"space the distance will be negative, too:"
msgstr ""
"그러나 절대적인 거리가 아니라, 만약 점이 음수인 경우에는 거리도 음수입니다:"

#: ../../docs/tutorials/math/vectors_advanced.rst:54
msgid "This allows us to tell which side of the plane a point is."
msgstr "이것은 우리가 평면의 어느 쪽을 가리키는 것을 허락한다."

#: ../../docs/tutorials/math/vectors_advanced.rst:57
msgid "Away from the origin"
msgstr "원점으로부터 멀리"

#: ../../docs/tutorials/math/vectors_advanced.rst:59
msgid ""
"I know what you are thinking! So far this is nice, but *real* planes are "
"everywhere in space, not only passing through the origin. You want real "
"*plane* action and you want it *now*."
msgstr ""
"난 당신이 무슨 생각을 하는지 압니다! 지금까지 이것은 좋았지만, *실제* 평면은 "
"원점만 통과하는 것이 아니라 공간 어디에나 있습니다. 실제 *평면* 작업을 원하"
"는 경우 *지금*."

#: ../../docs/tutorials/math/vectors_advanced.rst:63
msgid ""
"Remember that planes not only split space in two, but they also have "
"*polarity*. This means that it is possible to have perfectly overlapping "
"planes, but their negative and positive half-spaces are swapped."
msgstr ""
"평면은 공간을 둘로 나눌 뿐만 아니라 *극성* 도 가지고 있다는 것을 기억하세요. "
"이는 완벽하게 겹치는 평면을 가질 수 있지만, 음의 면과 양의 면은 서로 교환된다"
"는 것을 의미합니다."

#: ../../docs/tutorials/math/vectors_advanced.rst:67
msgid ""
"With this in mind, let's describe a full plane as a **normal** *N* and a "
"**distance from the origin** scalar *D*. Thus, our plane is represented by N "
"and D. For example:"
msgstr ""
"이를 위해 전체 평면을 **법선벡터** *N* 과 원점으로부터 **스칼라 *D* 의** 거리"
"로 설명하겠습니다. 따라서 우리 평면은 N과 D로 보여집니다. 예를 들면 다음과 같"
"습니다:"

#: ../../docs/tutorials/math/vectors_advanced.rst:73
msgid ""
"For 3D math, Godot provides a :ref:`Plane <class_Plane>` built-in type that "
"handles this."
msgstr ""
"3차원 수학에서 Godot은 이를 처리하는 :ref:`Plane <class_Plane>` 의 내장 유형"
"을 제공합니다."

#: ../../docs/tutorials/math/vectors_advanced.rst:76
msgid ""
"Basically, N and D can represent any plane in space, be it for 2D or 3D "
"(depending on the amount of dimensions of N) and the math is the same for "
"both. It's the same as before, but D is the distance from the origin to the "
"plane, travelling in N direction. As an example, imagine you want to reach a "
"point in the plane, you will just do:"
msgstr ""
"기본적으로 N과 D는 공간의 평면을 나타낼 수 있으며(N의 크기에 따라 다름) 2차"
"원 또는 3차원의 경우 모두 수학이 동일합니다. 이전과 동일하지만, D는 원점에서"
"부터 평면까지 N 방향으로 이동하는 거리입니다. 예를 들어, 평면의 한 지점에 도"
"달하고 싶다고 가정해 보십시오:"

#: ../../docs/tutorials/math/vectors_advanced.rst:91
msgid ""
"This will stretch (resize) the normal vector and make it touch the plane. "
"This math might seem confusing, but it's actually much simpler than it "
"seems. If we want to tell, again, the distance from the point to the plane, "
"we do the same but adjusting for distance:"
msgstr ""
"이것은 법선 벡터를 늘려 그것이 평면에 닿게 할 것입니다. 이 수학은 혼란스러워 "
"보일지 모르지만 실제로는 보이는 것보다 훨씬 더 간단합니다. 만약 우리가 다시 "
"한 번 점에서부터 평면까지의 거리를 알려고 한다면, 우리는 거리에 따라 조정만 "
"하면 됩니다:"

#: ../../docs/tutorials/math/vectors_advanced.rst:105
msgid "The same thing, using a built-in function:"
msgstr "이것도 마찬가지로, 내장 함수 사용:"

#: ../../docs/tutorials/math/vectors_advanced.rst:116
msgid "This will, again, return either a positive or negative distance."
msgstr "이것은 또 양수나 음수의 거리를 반환할 것입니다."

#: ../../docs/tutorials/math/vectors_advanced.rst:118
msgid ""
"Flipping the polarity of the plane can be done by negating both N and D. "
"This will result in a plane in the same position, but with inverted negative "
"and positive half spaces:"
msgstr ""
"평면의 극성 N과 D를 모두 부정함으로써 뒤집을 수 있습니다. 이렇게 하면 평면이 "
"동일한 위치에 있지만 반전된 음과 양의 절반 공간이 있는 평면이 됩니다:"

#: ../../docs/tutorials/math/vectors_advanced.rst:133
msgid ""
"Of course, Godot also implements this operator in :ref:`Plane "
"<class_Plane>`, so doing:"
msgstr ""
"물론 고도는 또한 이 연산자를 :ref:`Plane <class_Plane>` 에 구현하여 다음과 같"
"은 작업을 수행합니다:"

#: ../../docs/tutorials/math/vectors_advanced.rst:145
msgid "Will work as expected."
msgstr "기대한 대로 작동할 것입니다."

#: ../../docs/tutorials/math/vectors_advanced.rst:147
msgid ""
"So, remember, a plane is just that and its main practical use is calculating "
"the distance to it. So, why is it useful to calculate the distance from a "
"point to a plane? It's extremely useful! Let's see some simple examples.."
msgstr ""
"기억하세요, 평면은 단지 그것입니다 그리고 그것의 주요한 실용적 용도는 그것에 "
"대한 거리를 계산하는 것입니다. 그렇다면, 한 지점에서 평면까지의 거리를 계산하"
"는 것이 왜 유용한가? 그것은 매우 유용합니다! 몇 가지 간단한 예를 봅시다."

#: ../../docs/tutorials/math/vectors_advanced.rst:153
msgid "Constructing a plane in 2D"
msgstr "2D로 평면 구성하기"

#: ../../docs/tutorials/math/vectors_advanced.rst:155
msgid ""
"Planes clearly don't come out of nowhere, so they must be built. "
"Constructing them in 2D is easy, this can be done from either a normal (unit "
"vector) and a point, or from two points in space."
msgstr ""
"평면이 갑자기 나오지 않는 게 분명하니까 꼭 만들어져야합니다. 2D로 구성하는 것"
"은 쉽습니다. 이것은 법선(단위 벡터)와 점 또는 공간의 두 점으로부터 수행될 수 "
"있습니다."

#: ../../docs/tutorials/math/vectors_advanced.rst:159
msgid ""
"In the case of a normal and a point, most of the work is done, as the normal "
"is already computed, so just calculate D from the dot product of the normal "
"and the point."
msgstr ""
"법선벡터 및 점의 경우, 대부분의 작업이 완료됩니다. 법선벡터가 이미 계산되어 "
"있으므로, 점과 법선벡터의 내적 으로 부터 D를 계산하기만 하면 됩니다."

#: ../../docs/tutorials/math/vectors_advanced.rst:174
msgid ""
"For two points in space, there are actually two planes that pass through "
"them, sharing the same space but with normal pointing to the opposite "
"directions. To compute the normal from the two points, the direction vector "
"must be obtained first, and then it needs to be rotated 90° degrees to "
"either side:"
msgstr ""
"평면에서의 두 점에는, 실제로 두 개의 평면이 그들을 통과하면서, 같은 공간을 공"
"유하지만, 보통 반대 방향을 가리킨다. \n"
"두 지점에서 법선벡터를 계산하려면 먼저 방향 벡터를 얻은 다음 어느 쪽으로든 "
"90° 회전해야 합니다:"

#: ../../docs/tutorials/math/vectors_advanced.rst:201
msgid ""
"The rest is the same as the previous example, either point_a or point_b will "
"work since they are in the same plane:"
msgstr ""
"나머지는 이전 예와 동일합니다. point_a 또는 point_b는 동일한 평면에 있으므로 "
"작동합니다:"

#: ../../docs/tutorials/math/vectors_advanced.rst:219
msgid ""
"Doing the same in 3D is a little more complex and will be explained further "
"down."
msgstr ""
"3차원에서 동일한 작업을 수행하는 것은 약간 더 복잡하며, 아래에 자세히 설명되"
"어 있습니다."

#: ../../docs/tutorials/math/vectors_advanced.rst:223
msgid "Some examples of planes"
msgstr "평면의 예"

#: ../../docs/tutorials/math/vectors_advanced.rst:225
msgid ""
"Here is a simple example of what planes are useful for. Imagine you have a "
"`convex <https://www.mathsisfun.com/definitions/convex.html>`__ polygon. For "
"example, a rectangle, a trapezoid, a triangle, or just any polygon where no "
"faces bend inwards."
msgstr ""
"여기 유용한 평면들의 간단한 예가 있습니다. 여러분이 'convex <https://www."
"mathsisfun.com/definitions/convex.html>' 다각형을 가지고 있다고 상상해 보세"
"요. 예를 들어 직사각형, 사다리꼴, 삼각형 또는 어떤 면이 안쪽으로 굽히지 않는 "
"모든 다각형이 있습니다."

#: ../../docs/tutorials/math/vectors_advanced.rst:230
msgid ""
"For every segment of the polygon, we compute the plane that passes by that "
"segment. Once we have the list of planes, we can do neat things, for example "
"checking if a point is inside the polygon."
msgstr ""
"다각형의 모든 부분에 대해 해당 부분을 통과하는 평면을 계산합니다. 평면 목록"
"이 있으면 다각형 내부에 점이 있는지 확인하는 등 깔끔한 작업을 수행할 수 있습"
"니다."

#: ../../docs/tutorials/math/vectors_advanced.rst:234
msgid ""
"We go through all planes, if we can find a plane where the distance to the "
"point is positive, then the point is outside the polygon. If we can't, then "
"the point is inside."
msgstr ""
"우리는 모든 평면을 통과합니다, 점까지의 거리가 양수인 평면을 찾을 수 있으면 "
"점은 다각형 외부에 있습니다. 아니면 점은 다각형 내부에 있습니다."

#: ../../docs/tutorials/math/vectors_advanced.rst:240
#: ../../docs/tutorials/math/vectors_advanced.rst:279
msgid "Code should be something like this:"
msgstr "코드는 다음과 같아야 합니다:"

#: ../../docs/tutorials/math/vectors_advanced.rst:265
msgid ""
"Pretty cool, huh? But this gets much better! With a little more effort, "
"similar logic will let us know when two convex polygons are overlapping too. "
"This is called the Separating Axis Theorem (or SAT) and most physics engines "
"use this to detect collision."
msgstr ""
"꽤 멋지죠, 네? 하지만 이것은 훨씬 더 나아집니다! 조금만 더 노력하면, 유사한 "
"논리가 우리에게 두 개의 볼록 다각형이 겹치는 때를 알려줄 것입니다. 이것을 분"
"리축 이론(SAT)이라고 하며 대부분의 물리학 엔진은 이것을 충돌을 감지하기 위해 "
"사용한다."

#: ../../docs/tutorials/math/vectors_advanced.rst:270
msgid ""
"With a point, just checking if a plane returns a positive distance is enough "
"to tell if the point is outside. With another polygon, we must find a plane "
"where *all* *the* *other* *polygon* *points* return a positive distance to "
"it. This check is performed with the planes of A against the points of B, "
"and then with the planes of B against the points of A:"
msgstr ""
"점을 사용하면 평면이 양의 거리를 반환하는지 확인하는 것으로 점이 외부에 있는"
"지 여부를 충분히 알 수 있습니다. 다른 다각형을 사용하면 *모두* *기타* *다각형"
"* *점* 으로 양의 거리를 반환하는 평면을 찾아야 합니다. 이 확인은 A의 평면을 B"
"의 점에 대해 수행한 다음 B의 평면을 A의 점에 대해 수행합니다:"

#: ../../docs/tutorials/math/vectors_advanced.rst:370
msgid ""
"As you can see, planes are quite useful, and this is the tip of the iceberg. "
"You might be wondering what happens with non convex polygons. This is "
"usually just handled by splitting the concave polygon into smaller convex "
"polygons, or using a technique such as BSP (which is not used much nowadays)."
msgstr ""
"보시다시피 평면은 매우 유용하며, 이것이 빙산의 일각일 뿐입니다. 여러분은 아"
"마 볼록하지 않은 다각형에 무슨 일이 일어날지 궁금해 할 것입니다. 일반적으로 "
"오목한 다각형은 작은 볼록 다각형으로 분할하거나 BSP(요즘 많이 사용되지 않는 "
"기술)와 같은 기술을 사용하여 처리됩니다."

#: ../../docs/tutorials/math/vectors_advanced.rst:377
msgid "Collision detection in 3D"
msgstr "3차원에서 충돌 감지"

#: ../../docs/tutorials/math/vectors_advanced.rst:379
msgid ""
"This is another bonus bit, a reward for being patient and keeping up with "
"this long tutorial. Here is another piece of wisdom. This might not be "
"something with a direct use case (Godot already does collision detection "
"pretty well) but it's used by almost all physics engines and collision "
"detection libraries :)"
msgstr ""
"이것은 또 다른 보너스 비트인데, 이것은 인내심을 갖고 이 긴 튜토리얼을 따라가"
"는 것에 대한 보상입니다. 여기 또 다른 지혜가 있습니다. 직접 사용 사례(고도는 "
"이미 충돌 감지를 매우 잘 수행함)는 아니지만 거의 모든 물리적 엔진과 충돌 감"
"지 라이브러리에 사용됩니다:)"

#: ../../docs/tutorials/math/vectors_advanced.rst:385
msgid ""
"Remember that converting a convex shape in 2D to an array of 2D planes was "
"useful for collision detection? You could detect if a point was inside any "
"convex shape, or if two 2D convex shapes were overlapping."
msgstr ""
"볼록한 모양을 2D로 변환하는 것이 충돌 탐지에 유용했다는 것을 기억하시나요? 당"
"신은 점이 볼록 모양 안에 있는지 또는 두 개의 2D 볼록 모양이 겹치는지를 탐지"
"할 수 있습니다."

#: ../../docs/tutorials/math/vectors_advanced.rst:389
msgid ""
"Well, this works in 3D too, if two 3D polyhedral shapes are colliding, you "
"won't be able to find a separating plane. If a separating plane is found, "
"then the shapes are definitely not colliding."
msgstr ""
"네, 3차원에서도 작동합니다. 만일 두 개의 3차원 다면체 모양이 충돌하면 분리면"
"을 찾을 수 없습니다. 분리면이 발견되면 형상은 확실히 충돌하지 않습니다."

#: ../../docs/tutorials/math/vectors_advanced.rst:393
msgid ""
"To refresh a bit a separating plane means that all vertices of polygon A are "
"in one side of the plane, and all vertices of polygon B are in the other "
"side. This plane is always one of the face-planes of either polygon A or "
"polygon B."
msgstr ""
"비트를 새로 고치려면 폴리곤 A의 모든 정점이 평면의 한 쪽에 있고 폴리곤 B의 모"
"든 정점이 다른 쪽에 있음을 의미합니다. 이 평면은 항상 폴리곤 A 또는 폴리곤 B"
"의 면 평면 중 하나입니다."

#: ../../docs/tutorials/math/vectors_advanced.rst:398
msgid ""
"In 3D though, there is a problem to this approach, because it is possible "
"that, in some cases a separating plane can't be found. This is an example of "
"such situation:"
msgstr ""
"그러나 3차원에서는 분리면을 찾을 수 없기 때문에 이 접근법에 문제가 있습니다. "
"다음은 이러한 상황의 예입니다:"

#: ../../docs/tutorials/math/vectors_advanced.rst:404
msgid ""
"To avoid it, some extra planes need to be tested as separators, these planes "
"are the cross product between the edges of polygon A and the edges of "
"polygon B"
msgstr ""
"이를 방지하려면 일부 추가 평면을 분리기로 테스트해야 합니다. 이러한 평면은 다"
"각형 A의 모서리와 다각형 B의 모서리 사이의 외적입니다"

#: ../../docs/tutorials/math/vectors_advanced.rst:410
msgid "So the final algorithm is something like:"
msgstr "마지막 알고리즘은 다음과 같습니다:"

#: ../../docs/tutorials/math/matrices_and_transforms.rst:4
msgid "Matrices and transforms"
msgstr "행렬과 변환"

#: ../../docs/tutorials/math/matrices_and_transforms.rst:9
#, fuzzy
msgid ""
"Before reading this tutorial, we recommend that you thoroughly read and "
"understand the :ref:`doc_vector_math` tutorial, as this tutorial requires a "
"knowledge of vectors."
msgstr ""
"본 튜토리얼을 읽기 전에 :ref:`doc_vector_math` 에 대한 이전 튜토리얼을 읽어 "
"보는 것이 좋습니다."

#: ../../docs/tutorials/math/matrices_and_transforms.rst:13
msgid ""
"This tutorial is about *transformations* and how we represent them in Godot "
"using matrices. It is not a full in-depth guide to matrices. Transformations "
"are most of the time applied as translation, rotation, and scale, so we will "
"focus on how to represent those with matrices."
msgstr ""

#: ../../docs/tutorials/math/matrices_and_transforms.rst:18
msgid ""
"Most of this guide focuses on 2D, using :ref:`class_Transform2D` and :ref:"
"`class_Vector2`, but the way things work in 3D is very similar."
msgstr ""

#: ../../docs/tutorials/math/matrices_and_transforms.rst:21
msgid ""
"As mentioned in the previous tutorial, it is important to remember that in "
"Godot, the Y axis points *down* in 2D. This is the opposite of how most "
"schools teach linear algebra, with the Y axis pointing up."
msgstr ""

#: ../../docs/tutorials/math/matrices_and_transforms.rst:26
msgid ""
"The convention is that the X axis is red, the Y axis is green, and the Z "
"axis is blue. This tutorial is color-coded to match these conventions, but "
"we will also represent the origin vector with a blue color."
msgstr ""

#: ../../docs/tutorials/math/matrices_and_transforms.rst:32
msgid "Matrix components and the Identity matrix"
msgstr ""

#: ../../docs/tutorials/math/matrices_and_transforms.rst:34
msgid ""
"The identity matrix represents a transform with no translation, no rotation, "
"and no scale. Let's start by looking at the identity matrix and how its "
"components relate to how it visually appears."
msgstr ""

#: ../../docs/tutorials/math/matrices_and_transforms.rst:40
msgid ""
"Matrices have rows and columns, and a transformation matrix has specific "
"conventions on what each does."
msgstr ""

#: ../../docs/tutorials/math/matrices_and_transforms.rst:43
msgid ""
"In the image above, we can see that the red X vector is represented by the "
"first column of the matrix, and the green Y vector is likewise represented "
"by the second column. A change to the columns will change these vectors. We "
"will see how they can be manipulated in the next few examples."
msgstr ""

#: ../../docs/tutorials/math/matrices_and_transforms.rst:49
msgid ""
"You should not worry about manipulating rows directly, as we usually work "
"with columns. However, you can think of the rows of the matrix as showing "
"which vectors contribute to moving in a given direction."
msgstr ""

#: ../../docs/tutorials/math/matrices_and_transforms.rst:53
msgid ""
"When we refer to a value such as `t.x.y`, that's the Y component of the X "
"column vector. In other words, the bottom-left of the matrix. Similarly, `t."
"x.x` is top-left, `t.y.x` is top-right,and `t.y.y` is bottom-right, where "
"`t` is the Transform2D."
msgstr ""

#: ../../docs/tutorials/math/matrices_and_transforms.rst:59
#, fuzzy
msgid "Scaling the transformation matrix"
msgstr "애니메이션 만들기"

#: ../../docs/tutorials/math/matrices_and_transforms.rst:61
msgid ""
"Applying a scale is one of the easiest operations to understand. Let's start "
"by placing the Godot logo underneath our vectors so that we can visually see "
"the effects on an object:"
msgstr ""

#: ../../docs/tutorials/math/matrices_and_transforms.rst:67
msgid ""
"Now, to scale the matrix, all we need to do is multiply each component by "
"the scale we want. Let's scale it up by 2. 1 times 2 becomes 2, and 0 times "
"2 becomes 0, so we end up with this:"
msgstr ""

#: ../../docs/tutorials/math/matrices_and_transforms.rst:73
msgid "To do this in code, we can simply multiply each of the vectors:"
msgstr ""

#: ../../docs/tutorials/math/matrices_and_transforms.rst:92
msgid ""
"If we wanted to return it to its original scale, we can multiply each "
"component by 0.5. That's pretty much all there is to scaling a "
"transformation matrix."
msgstr ""

#: ../../docs/tutorials/math/matrices_and_transforms.rst:96
msgid ""
"To calculate the object's scale from an existing transformation matrix, you "
"can use `length()` on each of the column vectors."
msgstr ""

#: ../../docs/tutorials/math/matrices_and_transforms.rst:99
msgid ""
"In actual projects, you can use the `scaled()` method to perform scaling."
msgstr ""

#: ../../docs/tutorials/math/matrices_and_transforms.rst:103
#, fuzzy
msgid "Rotating the transformation matrix"
msgstr "애니메이션 만들기"

#: ../../docs/tutorials/math/matrices_and_transforms.rst:105
msgid ""
"We'll start the same way as earlier, with the Godot logo underneath the "
"identity matrix:"
msgstr ""

#: ../../docs/tutorials/math/matrices_and_transforms.rst:110
msgid ""
"As an example, let's say we want to rotate our Godot logo clockwise by 90 "
"degrees. Right now the X axis points right and the Y axis points down. If we "
"rotate these in our head, we would logically see that the new X axis should "
"point down and the new Y axis should point left."
msgstr ""

#: ../../docs/tutorials/math/matrices_and_transforms.rst:116
msgid ""
"You can imagine that you grab both the Godot logo and its vectors, and then "
"spin it around the center. Wherever you finish spinning, the orientation of "
"the vectors determines what the matrix is."
msgstr ""

#: ../../docs/tutorials/math/matrices_and_transforms.rst:120
msgid ""
"We need to represent \"down\" and \"left\" in normal coordinates, so means "
"we'll set X to (0, 1) and Y to (-1, 0). These are also the values of "
"`Vector2.DOWN` and `Vector2.LEFT`. When we do this, we get the desired "
"result of rotating the object:"
msgstr ""

#: ../../docs/tutorials/math/matrices_and_transforms.rst:127
msgid ""
"If you have trouble understanding the above, try this excercise: Cut a "
"square of paper, draw X and Y vectors on top of it, place it on graph paper, "
"then rotate it and note the endpoints."
msgstr ""

#: ../../docs/tutorials/math/matrices_and_transforms.rst:131
msgid ""
"To perform rotation in code, we need to be able to calculate the values "
"programatically. This image shows the formulas needed to calculate the "
"transformation matrix from a rotation angle. Don't worry if this part seems "
"complicated, I promise it's the hardest thing you need to know."
msgstr ""

#: ../../docs/tutorials/math/matrices_and_transforms.rst:139
msgid ""
"Godot represents all rotations with radians, not degrees. A full turn is "
"`TAU` or `PI*2` radians, and a quarter turn of 90 degrees is `TAU/4` or "
"`PI/2` radians. Working with `TAU` usually results in more readable code."
msgstr ""

#: ../../docs/tutorials/math/matrices_and_transforms.rst:144
msgid ""
"Fun fact: In addition to Y being *down* in Godot, rotation is represented "
"clockwise. This means that all the math and trig functions behave the same "
"as a Y-is-up CCW system, since these differences \"cancel out\". You can "
"think of rotations in both systems being \"from X to Y\"."
msgstr ""

#: ../../docs/tutorials/math/matrices_and_transforms.rst:150
msgid ""
"In order to perform a rotation of 0.5 radians (about 28.65 degrees), we "
"simply plug in a value of 0.5 to the formula above and evaluate to find what "
"the actual values should be:"
msgstr ""

#: ../../docs/tutorials/math/matrices_and_transforms.rst:156
msgid "Here's how that would be done in code (place the script on a Node2D):"
msgstr ""

#: ../../docs/tutorials/math/matrices_and_transforms.rst:178
msgid ""
"To calculate the object's rotation from an existing transformation matrix, "
"you can use `atan2(t.x.y, t.x.x)`, where t is the Transform2D."
msgstr ""

#: ../../docs/tutorials/math/matrices_and_transforms.rst:181
msgid ""
"In actual projects, you can use the `rotated()` method to perform rotations."
msgstr ""

#: ../../docs/tutorials/math/matrices_and_transforms.rst:185
msgid "Basis of the transformation matrix"
msgstr ""

#: ../../docs/tutorials/math/matrices_and_transforms.rst:187
msgid ""
"So far we have only been working with the `x` and `y`, vectors, which are in "
"charge of representing rotation, scale, and/or shearing (advanced, covered "
"at the end). The X and Y vectors are together called the *basis* of the "
"transformation matrix. The terms \"basis\" and \"basis vectors\" are "
"important to know."
msgstr ""

#: ../../docs/tutorials/math/matrices_and_transforms.rst:193
msgid ""
"You might have noticed that :ref:`class_Transform2D` actually has three :ref:"
"`class_Vector2` values: `x`, `y`, and `origin`. The `origin` value is not "
"part of the basis, but it is part of the transform, and we need it to "
"represent position. From now on we'll keep track of the origin vector in all "
"examples. You can think of origin as another column, but it's often better "
"to think of it as completely separate."
msgstr ""

#: ../../docs/tutorials/math/matrices_and_transforms.rst:201
msgid ""
"Note that in 3D, Godot has a separate :ref:`class_Basis` structure for "
"holding the three :ref:`class_Vector3` values of the basis, since the code "
"can get complex and it makes sense to separate it from :ref:"
"`class_Transform` (which is composed of one :ref:`class_Basis` and one "
"extra :ref:`class_Vector3` for the origin)."
msgstr ""

#: ../../docs/tutorials/math/matrices_and_transforms.rst:208
#, fuzzy
msgid "Translating the transformation matrix"
msgstr "애니메이션 만들기"

#: ../../docs/tutorials/math/matrices_and_transforms.rst:210
msgid ""
"Changing the `origin` vector is called a *translating* the transformation "
"matrix. Translating is basically a technical term for \"moving\" the object, "
"but it explicitly does not involve any rotation."
msgstr ""

#: ../../docs/tutorials/math/matrices_and_transforms.rst:214
msgid ""
"This should be fairly common sense, assuming that you read and understood "
"the vector tutorial, but let's work through an example. Again, we'll start "
"with the identity transform, but this time we'll also keep track of the "
"origin vector:"
msgstr ""

#: ../../docs/tutorials/math/matrices_and_transforms.rst:221
msgid ""
"If we want the object to move to a position of (1, 2), we simply need to set "
"its `origin` vector to (1, 2):"
msgstr ""

#: ../../docs/tutorials/math/matrices_and_transforms.rst:226
msgid ""
"There is also a `translated()` method, which performs a different operation "
"to adding or changing `origin` directly. The `translated()` method will "
"translate the object *relative to its own rotation*. For example, an object "
"rotated 90 degrees clockwise will move to the right when `translated()` with "
"`Vector2.UP`."
msgstr ""

#: ../../docs/tutorials/math/matrices_and_transforms.rst:232
msgid ""
"Godot's 2D uses coordinates based on pixels, so in actual projects you will "
"want to translate by hundreds of units."
msgstr ""

#: ../../docs/tutorials/math/matrices_and_transforms.rst:236
#, fuzzy
msgid "Putting it all together"
msgstr "대상 가리키기"

#: ../../docs/tutorials/math/matrices_and_transforms.rst:238
msgid ""
"We're going to apply everything we mentioned so far onto one transform. To "
"follow along, get a simple project with a Sprite set to the Godot logo."
msgstr ""

#: ../../docs/tutorials/math/matrices_and_transforms.rst:241
msgid ""
"Let's set the translation to (350, 150), rotate by -0.5 rad, and scale by 3. "
"I've posted a screenshot, and the code to reproduce it, but I encourage you "
"to try and reproduce the screenshot without looking at the code!"
msgstr ""

#: ../../docs/tutorials/math/matrices_and_transforms.rst:280
msgid "Shearing the transformation matrix (advanced)"
msgstr ""

#: ../../docs/tutorials/math/matrices_and_transforms.rst:282
msgid ""
"If you are only looking for how to *use* transformation matrices, feel free "
"to skip this section of the tutorial. This section explores an uncommonly "
"used aspect of transformation matrices for the purpose of building an "
"understanding of them."
msgstr ""

#: ../../docs/tutorials/math/matrices_and_transforms.rst:287
msgid ""
"You may have noticed that a transform has more degrees of freedom than the "
"combination of the above actions. The basis of a 2D transformation matrix "
"has four total numbers in two :ref:`class_Vector2` values, while a rotation "
"value and a Vector2 for scale only has 3 numbers. The high-level concept for "
"the missing degree of freedom is called *shearing*."
msgstr ""

#: ../../docs/tutorials/math/matrices_and_transforms.rst:293
msgid ""
"Normally you will always have the basis vectors perpendicular to each other. "
"However, shearing can be useful in some situations, and understanding "
"shearing helps you understand how transforms work."
msgstr ""

#: ../../docs/tutorials/math/matrices_and_transforms.rst:297
msgid ""
"To show you visually how it will look, let's overlay a grid onto the Godot "
"logo:"
msgstr ""

#: ../../docs/tutorials/math/matrices_and_transforms.rst:302
msgid ""
"Each point on this grid is obtained by adding the basis vectors together. "
"The bottom-right corner is X + Y, while the top-right corner is X - Y. If we "
"change the basis vectors, the entire grid moves with it, as the grid is "
"composed of the basis vectors. All lines on the grid that are currently "
"parallel will remain parallel no matter what changes we make to the basis "
"vectors."
msgstr ""

#: ../../docs/tutorials/math/matrices_and_transforms.rst:309
msgid "As an example, let's set Y to (1, 1):"
msgstr ""

#: ../../docs/tutorials/math/matrices_and_transforms.rst:328
msgid ""
"You can't set the raw values of a Transform2D in the editor, so you *must* "
"use code if you want to shear the object."
msgstr ""

#: ../../docs/tutorials/math/matrices_and_transforms.rst:331
msgid ""
"Due to the vectors no longer being perpendicular, the object has been "
"sheared. The bottom-center of the grid, which is (0, 1) relative to itself, "
"is now located at a world position of (1, 1)."
msgstr ""

#: ../../docs/tutorials/math/matrices_and_transforms.rst:335
msgid ""
"The intra-object coordinates are called UV coordinates in textures, so let's "
"borrow that terminology for here. To find the world position from a relative "
"position, the formula is U * X + V * Y, where U and V are numbers and X and "
"Y are the basis vectors."
msgstr ""

#: ../../docs/tutorials/math/matrices_and_transforms.rst:340
msgid ""
"The bottom-right corner of the grid, which is always at the UV position of "
"(1, 1), is at the world position of (2, 1), which is calculated from X*1 + "
"Y*1, which is (1, 0) + (1, 1), or (1 + 1, 0 + 1), or (2, 1). This matches up "
"with our observation of where the bottom-right corner of the image is."
msgstr ""

#: ../../docs/tutorials/math/matrices_and_transforms.rst:346
msgid ""
"Similarly, the top-right corner of the grid, which is always at the UV "
"position of (1, -1), is at the world position of (0, -1), which is "
"calculated from X*1 + Y*-1, which is (1, 0) - (1, 1), or (1 - 1, 0 - 1), or "
"(0, -1). This matches up with our observation of where the top-right corner "
"of the image is."
msgstr ""

#: ../../docs/tutorials/math/matrices_and_transforms.rst:352
msgid ""
"Hopefully you now fully understand the how a transformation matrix affects "
"the object, and the relationship between the basis vectors and how the "
"object's \"UV\" or \"intra-coordinates\" have their world position changed."
msgstr ""

#: ../../docs/tutorials/math/matrices_and_transforms.rst:356
msgid ""
"In Godot, all transform math is done relative to the parent node. When we "
"refer to \"world position\", that would be relative to the node's parent "
"instead, if the node had a parent."
msgstr ""

#: ../../docs/tutorials/math/matrices_and_transforms.rst:360
msgid ""
"If you would like additional explanation, you should check out 3Blue1Brown's "
"excellent video about linear transformations: https://www.youtube.com/watch?"
"v=kYB8IZa5AuE"
msgstr ""

#: ../../docs/tutorials/math/matrices_and_transforms.rst:365
#, fuzzy
msgid "Practical applications of transforms"
msgstr "실용적인 응용"

#: ../../docs/tutorials/math/matrices_and_transforms.rst:367
msgid ""
"In actual projects, you will usually be working with transforms inside "
"transforms by having multiple :ref:`class_Node2D` or :ref:`class_Spatial` "
"nodes parented to each other."
msgstr ""

#: ../../docs/tutorials/math/matrices_and_transforms.rst:371
msgid ""
"However, sometimes it's very useful to manually calculate the values we "
"need. We will go over how you could use :ref:`class_Transform2D` or :ref:"
"`class_Transform` to manually calculate transforms of nodes."
msgstr ""

#: ../../docs/tutorials/math/matrices_and_transforms.rst:376
msgid "Converting positions between transforms"
msgstr ""

#: ../../docs/tutorials/math/matrices_and_transforms.rst:378
msgid ""
"There are many cases where you'd want to convert a position in and out of a "
"transform. For example, if you have a position relative to the player and "
"would like to find the world (parent-relative) position, or if you have a "
"world position and want to know where it is relative to the player."
msgstr ""

#: ../../docs/tutorials/math/matrices_and_transforms.rst:383
msgid ""
"We can find what a vector relative to the player would be defined in world "
"space as using the \"xform\" method:"
msgstr ""

#: ../../docs/tutorials/math/matrices_and_transforms.rst:397
msgid ""
"And we can use the \"xform_inv\" method to find a what world space position "
"would be if it was instead defined relative to the player:"
msgstr ""

#: ../../docs/tutorials/math/matrices_and_transforms.rst:411
msgid ""
"If you know in advance that the transform is positioned at (0, 0), you can "
"use the \"basis_xform\" or \"basis_xform_inv\" methods instead, which skip "
"dealing with translation."
msgstr ""

#: ../../docs/tutorials/math/matrices_and_transforms.rst:416
msgid "Moving an object relative to itself"
msgstr ""

#: ../../docs/tutorials/math/matrices_and_transforms.rst:418
msgid ""
"A common operation, especially in 3D games, is to move an object relative to "
"itself. For example, in first-person shooter games, you would want the "
"character to move forward (-Z axis) when you press :kbd:`W`."
msgstr ""

#: ../../docs/tutorials/math/matrices_and_transforms.rst:422
msgid ""
"Since the basis vectors are the orientation relative to the parent, and the "
"origin vector is the position relative to the parent, we can simply add "
"multiples of the basis vectors to move an object relative to itself."
msgstr ""

#: ../../docs/tutorials/math/matrices_and_transforms.rst:426
msgid "This code moves an object 100 units to its own right:"
msgstr ""

#: ../../docs/tutorials/math/matrices_and_transforms.rst:439
msgid "For moving in 3D, you would need to replace \"x\" with \"basis.x\"."
msgstr ""

#: ../../docs/tutorials/math/matrices_and_transforms.rst:441
msgid ""
"In actual projects, you can use `translate_object_local` in 3D or "
"`move_local_x` and `move_local_y` in 2D to do this."
msgstr ""

#: ../../docs/tutorials/math/matrices_and_transforms.rst:445
msgid "Applying transforms onto transforms"
msgstr ""

#: ../../docs/tutorials/math/matrices_and_transforms.rst:447
msgid ""
"One of the most important things to know about transforms is how you can use "
"several of them together. A parent node's transform affects all of its "
"children. Let's dissect an example."
msgstr ""

#: ../../docs/tutorials/math/matrices_and_transforms.rst:451
msgid ""
"In this image, the child node has a \"2\" after the component names to "
"distinguish them from the parent node. It might look a bit overwhelming with "
"so many numbers, but remember that each number is displayed twice (next to "
"the arrows and also in the matrices), and that almost half of the numbers "
"are zero."
msgstr ""

#: ../../docs/tutorials/math/matrices_and_transforms.rst:459
msgid ""
"The only transformations going on here are that the parent node has been "
"given a scale of (2, 1), the child has been given a scale of (0.5, 0.5), and "
"both nodes have been given positions."
msgstr ""

#: ../../docs/tutorials/math/matrices_and_transforms.rst:463
msgid ""
"All child transformations are affected by the parent transformations. The "
"child has a scale of (0.5, 0.5), so you would expect it to be a 1:1 ratio "
"square, and it is, but only relative to the parent. The child's X vector "
"ends up being (1, 0) in world space, because it is scaled by the parent's "
"basis vectors. Similarly, the child node's `origin` vector is set to (1, 1), "
"but this actually moves it (2, 1) in world space, due to the parent node's "
"basis vectors."
msgstr ""

#: ../../docs/tutorials/math/matrices_and_transforms.rst:472
msgid ""
"To calculate a child transform's world space transform manually, this is the "
"code we would use:"
msgstr ""

#: ../../docs/tutorials/math/matrices_and_transforms.rst:510
msgid ""
"In actual projects, we can find the world transform of the child by applying "
"one transform onto another using the `*` operator:"
msgstr ""

#: ../../docs/tutorials/math/matrices_and_transforms.rst:532
msgid "When multiplying matrices, order matters! Don't mix them up."
msgstr ""

#: ../../docs/tutorials/math/matrices_and_transforms.rst:534
msgid "Lastly, applying the identity transform will always do nothing."
msgstr ""

#: ../../docs/tutorials/math/matrices_and_transforms.rst:536
msgid ""
"If you would like additional explanation, you should check out 3Blue1Brown's "
"excellent video about matrix composition: https://www.youtube.com/watch?"
"v=XkY2DOUCWMU"
msgstr ""

#: ../../docs/tutorials/math/matrices_and_transforms.rst:541
#, fuzzy
msgid "Inverting a transformation matrix"
msgstr "번역 가져오기"

#: ../../docs/tutorials/math/matrices_and_transforms.rst:543
msgid ""
"The \"affine_inverse\" function returns a transform that \"undoes\" the "
"previous transform. This can be useful in some situations, but it's easier "
"to just provide a few examples."
msgstr ""

#: ../../docs/tutorials/math/matrices_and_transforms.rst:547
msgid ""
"Multiplying an inverse transform by the normal transform undoes all "
"transformations:"
msgstr ""

#: ../../docs/tutorials/math/matrices_and_transforms.rst:563
msgid ""
"Transforming a position by a transform and its inverse results in the same "
"position (same for \"xform_inv\"):"
msgstr ""

#: ../../docs/tutorials/math/matrices_and_transforms.rst:582
msgid "How does it all work in 3D?"
msgstr ""

#: ../../docs/tutorials/math/matrices_and_transforms.rst:584
msgid ""
"One of the great things about transformation matrices is that they work very "
"similarly between 2D and 3D transformations. All of the code and formulas "
"used above for 2D work the same in 3D, with 3 exceptions: the addition of a "
"third axis, that each axis is of type :ref:`class_Vector3`, and also that "
"Godot stores the :ref:`class_Basis` separately from the :ref:"
"`class_Transform`, since the math can get complex and it makes sense to "
"separate it."
msgstr ""

#: ../../docs/tutorials/math/matrices_and_transforms.rst:592
msgid ""
"All of the concepts for how translation, rotation, scale, and shearing work "
"in 3D are all the same compared to 2D. To scale, we take each component and "
"multiply it; to rotate, we change where each basis vector is pointing; to "
"translate, we manipulate the origin; and to shear, we change the basis "
"vectors to be non-perpendicular."
msgstr ""

#: ../../docs/tutorials/math/matrices_and_transforms.rst:600
msgid ""
"If you would like, it's a good idea to play around with transforms to get an "
"understanding of how they work. Godot allows you to edit 3D transform "
"matrices directly from the inspector. You can download this project which "
"has colored lines and cubes to help visualize the :ref:`class_Basis` vectors "
"and the origin in both 2D and 3D: https://github.com/godotengine/godot-demo-"
"projects/tree/master/misc/matrix_transform"
msgstr ""

#: ../../docs/tutorials/math/matrices_and_transforms.rst:607
msgid ""
"Spatial's \"Matrix\" section in Godot 3.2's inspector displays the matrix as "
"transposed, with the columns horizontal and the rows vertical. This may be "
"changed to be less confusing in a future release of Godot."
msgstr ""

#: ../../docs/tutorials/math/matrices_and_transforms.rst:612
msgid ""
"You cannot edit Node2D's transform matrix directly in Godot 3.2's inspector. "
"This may be changed in a future release of Godot."
msgstr ""

#: ../../docs/tutorials/math/matrices_and_transforms.rst:615
msgid ""
"If you would like additional explanation, you should check out 3Blue1Brown's "
"excellent video about 3D linear transformations: https://www.youtube.com/"
"watch?v=rHLEWRxRGiM"
msgstr ""

#: ../../docs/tutorials/math/matrices_and_transforms.rst:620
msgid "Representing rotation in 3D (advanced)"
msgstr ""

#: ../../docs/tutorials/math/matrices_and_transforms.rst:622
msgid ""
"The biggest difference between 2D and 3D transformation matrices is how you "
"represent rotation by itself without the basis vectors."
msgstr ""

#: ../../docs/tutorials/math/matrices_and_transforms.rst:625
msgid ""
"With 2D, we have an easy way (atan2) to switch between a transformation "
"matrix and an angle. In 3D, we can't simply represent rotation as one "
"number. There is something called Euler angles, which can represent "
"rotations as a set of 3 numbers, however they are limited and not very "
"useful, except for trivial cases."
msgstr ""

#: ../../docs/tutorials/math/matrices_and_transforms.rst:631
msgid ""
"In 3D we do not typically use angles, we either use a transformation basis "
"(used pretty much everywhere in Godot), or we use quaternions. Godot can "
"represent quaternions using the :ref:`class_Quat` struct. My suggestion to "
"you is to completely ignore how they work under-the-hood, because they are "
"very complicated and unintuitive."
msgstr ""

#: ../../docs/tutorials/math/matrices_and_transforms.rst:637
msgid ""
"However, if you really must know how it works, here are some great "
"resources, which you can follow in order:"
msgstr ""

#: ../../docs/tutorials/math/matrices_and_transforms.rst:640
msgid "https://www.youtube.com/watch?v=mvmuCPvRoWQ"
msgstr ""

#: ../../docs/tutorials/math/matrices_and_transforms.rst:642
msgid "https://www.youtube.com/watch?v=d4EgbgTm0Bg"
msgstr ""

#: ../../docs/tutorials/math/matrices_and_transforms.rst:644
msgid "https://eater.net/quaternions"
msgstr ""

#: ../../docs/tutorials/math/interpolation.rst:6
msgid ""
"Interpolation is a very basic operation in graphics programming. It's good "
"to become familiar with it in order to expand your horizons as a graphics "
"developer."
msgstr ""

#: ../../docs/tutorials/math/interpolation.rst:8
msgid ""
"The basic idea is that you want to transition from A to B. A value ``t``, "
"represents the states in-between."
msgstr ""

#: ../../docs/tutorials/math/interpolation.rst:10
msgid ""
"As an example if ``t`` is 0, then the state is A. If ``t`` is 1, then the "
"state is B. Anything in-between is an *interpolation*."
msgstr ""

#: ../../docs/tutorials/math/interpolation.rst:12
msgid ""
"Between two real (floating point) numbers, a simple interpolation is usually "
"described as:"
msgstr ""

#: ../../docs/tutorials/math/interpolation.rst:19
msgid "And often simplified to:"
msgstr ""

#: ../../docs/tutorials/math/interpolation.rst:26
msgid ""
"The name of this type of interpolation, which transforms a value into "
"another at *constant speed* is *\"linear\"*. So, when you hear about *Linear "
"Interpolation*, you know they are referring to this simple formula."
msgstr ""

#: ../../docs/tutorials/math/interpolation.rst:28
msgid ""
"There are other types of interpolations, which will not be covered here. A "
"recommended read afterwards is the :ref:`Bezier <doc_beziers_and_curves>` "
"page."
msgstr ""

#: ../../docs/tutorials/math/interpolation.rst:31
#, fuzzy
msgid "Vector interpolation"
msgstr "벡터 연산"

#: ../../docs/tutorials/math/interpolation.rst:33
msgid ""
"Vector types (:ref:`Vector2 <class_Vector2>` and :ref:`Vector3 "
"<class_Vector3>`) can also be interpolated, they come with handy functions "
"to do it :ref:`Vector2.linear_interpolate() "
"<class_Vector2_method_linear_interpolate>` and :ref:`Vector3."
"linear_interpolate() <class_Vector3_method_linear_interpolate>`."
msgstr ""

#: ../../docs/tutorials/math/interpolation.rst:36
msgid ""
"For cubic interpolation, there are also :ref:`Vector2.cubic_interpolate() "
"<class_Vector2_method_linear_interpolate>` and :ref:`Vector3."
"cubic_interpolate() <class_Vector3_method_linear_interpolate>`, which do a :"
"ref:`Bezier <doc_beziers_and_curves>` style interpolation."
msgstr ""

#: ../../docs/tutorials/math/interpolation.rst:38
msgid ""
"Here is simple pseudo-code for going from point A to B using interpolation:"
msgstr ""

#: ../../docs/tutorials/math/interpolation.rst:48
#, fuzzy
msgid "It will produce the following motion:"
msgstr "적 씬은 다음 노드들을 사용할 것입니다:"

#: ../../docs/tutorials/math/interpolation.rst:53
#, fuzzy
msgid "Transform interpolation"
msgstr "변형 기능들"

#: ../../docs/tutorials/math/interpolation.rst:55
msgid ""
"It is also possible to interpolate whole transforms (make sure they have "
"either uniform scale or, at least, the same non-uniform scale). For this, "
"the function :ref:`Transform.interpolate_with() "
"<class_Transform_method_interpolate_with>` can be used."
msgstr ""

#: ../../docs/tutorials/math/interpolation.rst:58
msgid ""
"Here is an example of transforming a monkey from Position1 to Position2:"
msgstr ""

#: ../../docs/tutorials/math/interpolation.rst:62
#, fuzzy
msgid "Using the following pseudocode:"
msgstr "다음의 코드를 추가하세요:"

#: ../../docs/tutorials/math/interpolation.rst:74
msgid "And again, it will produce the following motion:"
msgstr ""

#: ../../docs/tutorials/math/interpolation.rst:80
#, fuzzy
msgid "Smoothing motion"
msgstr "옵션들 가져오기"

#: ../../docs/tutorials/math/interpolation.rst:82
msgid ""
"Interpolation can be used to smooth movement, rotation, etc. Here is an "
"example of a circle following the mouse using smoothed motion:"
msgstr ""

#: ../../docs/tutorials/math/interpolation.rst:94
#, fuzzy
msgid "Here is how it looks:"
msgstr "도표는 다음과 같습니다:"

#: ../../docs/tutorials/math/interpolation.rst:98
msgid ""
"This useful for smoothing camera movement, allies following you (ensuring "
"they stay within a certain range), and many other common game patterns."
msgstr ""

#: ../../docs/tutorials/math/beziers_and_curves.rst:4
msgid "Beziers, curves and paths"
msgstr ""

#: ../../docs/tutorials/math/beziers_and_curves.rst:6
msgid ""
"Bezier curves are a mathematical approximation of natural geometric shapes. "
"We use them to represent a curve with as little information as possible and "
"with a high level of flexibility."
msgstr ""

#: ../../docs/tutorials/math/beziers_and_curves.rst:10
msgid ""
"Unlike more abstract mathematical concepts, Bezier curves were created for "
"industrial design. They are a popular tool in the graphics software industry."
msgstr ""

#: ../../docs/tutorials/math/beziers_and_curves.rst:13
msgid ""
"They rely on :ref:`interpolation<doc_interpolation>`, which we saw in the "
"previous article, combining multiple steps to create smooth curves. To "
"better understand how Bezier curves work, let's start from its simplest "
"form: Quadratic Bezier."
msgstr ""

#: ../../docs/tutorials/math/beziers_and_curves.rst:19
msgid "Quadratic Bezier"
msgstr ""

#: ../../docs/tutorials/math/beziers_and_curves.rst:21
msgid "Take three points, the minimum required for Quadratic Bezier to work:"
msgstr ""

#: ../../docs/tutorials/math/beziers_and_curves.rst:25
msgid ""
"To draw a curve between them, we first interpolate gradually over the two "
"vertices of each of the two segments formed by the three points, using "
"values ranging from 0 to 1. This gives us two points that move along the "
"segments as we change the value of ``t`` from 0 to 1."
msgstr ""

#: ../../docs/tutorials/math/beziers_and_curves.rst:37
msgid ""
"We then interpolate ``q0`` and ``q1`` to obtain a single point ``r`` that "
"moves along a curve."
msgstr ""

#: ../../docs/tutorials/math/beziers_and_curves.rst:46
msgid "This type of is called a *Quadratic Bezier* curve."
msgstr ""

#: ../../docs/tutorials/math/beziers_and_curves.rst:50
#: ../../docs/tutorials/math/beziers_and_curves.rst:114
msgid "*(Image credit: Wikipedia)*"
msgstr ""

#: ../../docs/tutorials/math/beziers_and_curves.rst:53
msgid "Cubic Bezier"
msgstr ""

#: ../../docs/tutorials/math/beziers_and_curves.rst:55
msgid ""
"Building upon the previous example, we can get more control by interpolating "
"between four points."
msgstr ""

#: ../../docs/tutorials/math/beziers_and_curves.rst:60
msgid ""
"We first use a function with four parameters to take four points as an "
"input, ``p0``, ``p1``, ``p2`` and ``p3``:"
msgstr ""

#: ../../docs/tutorials/math/beziers_and_curves.rst:68
msgid ""
"We apply a linear interpolation to each couple of points to reduce them to "
"three:"
msgstr ""

#: ../../docs/tutorials/math/beziers_and_curves.rst:78
msgid "We then take our three points and reduce them to two:"
msgstr ""

#: ../../docs/tutorials/math/beziers_and_curves.rst:86
#, fuzzy
msgid "And to one:"
msgstr "그리고 어떻게 실행하는 지의 예제입니다:"

#: ../../docs/tutorials/math/beziers_and_curves.rst:94
#, fuzzy
msgid "Here is the full function:"
msgstr "다음과 같은 주의 사항이 있습니다:"

#: ../../docs/tutorials/math/beziers_and_curves.rst:110
msgid ""
"The result will be a smooth curve interpolating between all four points:"
msgstr ""

#: ../../docs/tutorials/math/beziers_and_curves.rst:116
msgid ""
"Cubic Bezier interpolation works the same in 3D, just use ``Vector3`` "
"instead of ``Vector2``."
msgstr ""

#: ../../docs/tutorials/math/beziers_and_curves.rst:120
#, fuzzy
msgid "Adding control points"
msgstr "빛 추가하기"

#: ../../docs/tutorials/math/beziers_and_curves.rst:122
msgid ""
"Building upon Cubic Bezier, we can change the way two of the points work to "
"control the shape of our curve freely. Instead of having ``p0``, ``p1``, "
"``p2`` and ``p3``, we will store them as:"
msgstr ""

#: ../../docs/tutorials/math/beziers_and_curves.rst:126
msgid "``point0 = p0``: Is the first point, the source"
msgstr ""

#: ../../docs/tutorials/math/beziers_and_curves.rst:127
msgid "``control0 = p1 - p0``: Is a vector relative to the first control point"
msgstr ""

#: ../../docs/tutorials/math/beziers_and_curves.rst:128
msgid ""
"``control1 = p3 - p2``: Is a vector relative to the second control point"
msgstr ""

#: ../../docs/tutorials/math/beziers_and_curves.rst:129
msgid "``point1 = p3``: Is the second point, the destination"
msgstr ""

#: ../../docs/tutorials/math/beziers_and_curves.rst:131
msgid ""
"This way, we have two points and two control points which are relative "
"vectors to the respective points. If you've used graphics or animation "
"software before, this might look familiar:"
msgstr ""

#: ../../docs/tutorials/math/beziers_and_curves.rst:137
msgid ""
"This is how graphics software presents Bezier curves to the users, and how "
"they work and look in Godot."
msgstr ""

#: ../../docs/tutorials/math/beziers_and_curves.rst:141
msgid "Curve2D, Curve3D, Path and Path2D"
msgstr ""

#: ../../docs/tutorials/math/beziers_and_curves.rst:143
#, fuzzy
msgid ""
"There are two objects that contain curves: :ref:`Curve3D <class_Curve3D>` "
"and :ref:`Curve2D <class_Curve2D>` (for 3D and 2D respectively)."
msgstr ""
"두 가지 방법이 항상 호환되는 것은 아닙니다. 컨테이너는 자식을 제어하기 때문"
"에, 레이아웃 메뉴를 그것들에게 사용할 수 없습니다. 각 컨테이너는 특정한 효과"
"를 갖고 있으므로 당신은 제대로 동작하는 인터페이스를 얻기 위해 그들을 중첩"
"(nest)할지도 모릅니다. 레이아웃 접근을 사용하는 경우 자식들을 아래계층에서 위"
"계층 방향으로 작업합니다. 씬에 추가적이 컨테이너를 사용하지 않으므로 더 깨끗"
"한 계층 구조를 만들 수 있지만, 항목을 행이나 열, 격자 등으로 배열하기는 더 어"
"렵습니다."

#: ../../docs/tutorials/math/beziers_and_curves.rst:145
msgid ""
"They can contain several points, allowing for longer paths. It is also "
"possible to set them to nodes: :ref:`Path <class_Path>` and :ref:`Path2D "
"<class_Path2D>` (also for 3D and 2D respectively):"
msgstr ""

#: ../../docs/tutorials/math/beziers_and_curves.rst:149
msgid ""
"Using them, however, may not be completely obvious, so following is a "
"description of the most common use cases for Bezier curves."
msgstr ""

#: ../../docs/tutorials/math/beziers_and_curves.rst:152
msgid "Evaluating"
msgstr ""

#: ../../docs/tutorials/math/beziers_and_curves.rst:154
msgid ""
"Just evaluating them may be an option, but in most cases it's not very "
"useful. The big drawback with Bezier curves is that if you traverse them at "
"constant speed, from ``t = 0`` to ``t = 1``, the actual interpolation will "
"*not* move at constant speed. The speed is also an interpolation between the "
"distances between points ``p0``, ``p1``, ``p2`` and ``p3`` and there is not "
"a mathematically simple way to traverse the curve at constant speed."
msgstr ""

#: ../../docs/tutorials/math/beziers_and_curves.rst:156
msgid "Let's do a simple example with the following pseudocode:"
msgstr ""

#: ../../docs/tutorials/math/beziers_and_curves.rst:170
msgid ""
"As you can see, the speed (in pixels per second) of the circle varies, even "
"though ``t`` is increased at constant speed. This makes beziers difficult to "
"use for anything practical out of the box."
msgstr ""

#: ../../docs/tutorials/math/beziers_and_curves.rst:173
#: ../../docs/tutorials/gui/custom_gui_controls.rst:17
msgid "Drawing"
msgstr ""

#: ../../docs/tutorials/math/beziers_and_curves.rst:175
msgid ""
"Drawing beziers (or objects based on the curve) is a very common use case, "
"but it's also not easy. For pretty much any case, Bezier curves need to be "
"converted to some sort of segments. This is normally difficult, however, "
"without creating a very high amount of them."
msgstr ""

#: ../../docs/tutorials/math/beziers_and_curves.rst:177
msgid ""
"The reason is that some sections of a curve (specifically, corners) may "
"require considerable amounts of points, while other sections may not:"
msgstr ""

#: ../../docs/tutorials/math/beziers_and_curves.rst:181
msgid ""
"Additionally, if both control points were ``0, 0`` (remember they are "
"relative vectors), the Bezier curve would just be a straight line (so "
"drawing a high amount of points would be wasteful)."
msgstr ""

#: ../../docs/tutorials/math/beziers_and_curves.rst:183
msgid ""
"Before drawing Bezier curves, *tessellation* is required. This is often done "
"with a recursive or divide and conquer function that splits the curve until "
"the curvature amount becomes less than a certain threshold."
msgstr ""

#: ../../docs/tutorials/math/beziers_and_curves.rst:185
msgid ""
"The *Curve* classes provide this via the :ref:`Curve2D.tessellate() "
"<class_Curve2D_method_tessellate>` function (which receives optional "
"``stages`` of recursion and angle ``tolerance`` arguments). This way, "
"drawing something based on a curve is easier."
msgstr ""

#: ../../docs/tutorials/math/beziers_and_curves.rst:189
msgid "Traversal"
msgstr ""

#: ../../docs/tutorials/math/beziers_and_curves.rst:191
msgid ""
"The last common use case for the curves is to traverse them. Because of what "
"was mentioned before regarding constant speed, this is also difficult."
msgstr ""

#: ../../docs/tutorials/math/beziers_and_curves.rst:193
msgid ""
"To make this easier, the curves need to be *baked* into equidistant points. "
"This way, they can be approximated with regular  interpolation (which can be "
"improved further with a cubic option). To do this, just use the :ref:`Curve."
"interpolate_baked()<class_Curve_method_interpolate_baked>` method together "
"with :ref:`Curve2D."
"get_baked_length()<class_Curve2D_method_get_baked_length>`. The first call "
"to either of them will bake the curve internally."
msgstr ""

#: ../../docs/tutorials/math/beziers_and_curves.rst:196
msgid ""
"Traversal at constant speed, then, can be done with the following pseudo-"
"code:"
msgstr ""

#: ../../docs/tutorials/math/beziers_and_curves.rst:207
msgid "And the output will, then, move at constant speed:"
msgstr ""

#: ../../docs/tutorials/animation/introduction_2d.rst:4
msgid "Introduction to the 2D animation features"
msgstr "2D 애니메이션 특징 소개"

#: ../../docs/tutorials/animation/introduction_2d.rst:9
msgid ""
"The :ref:`class_AnimationPlayer` node allows you to create anything from "
"simple to complex animations."
msgstr ""
":ref:`class_AnimationPlayer` 노드는 간단한 애니메이션부터 복잡한 애니메이션까"
"지 만들 수 있습니다."

#: ../../docs/tutorials/animation/introduction_2d.rst:12
#, fuzzy
msgid "In this guide you learn to:"
msgstr "이 가이드는 다음을 배웁니다:"

#: ../../docs/tutorials/animation/introduction_2d.rst:14
#, fuzzy
msgid "Work with the Animation Panel"
msgstr "애니메이션 패널 작업"

#: ../../docs/tutorials/animation/introduction_2d.rst:15
#, fuzzy
msgid "Animate any property of any node"
msgstr "노드의 속성 애니메이션하기"

#: ../../docs/tutorials/animation/introduction_2d.rst:16
msgid "Create a simple animation"
msgstr "간단한 애니메이션 만들기"

#: ../../docs/tutorials/animation/introduction_2d.rst:17
msgid "Call functions with the powerful Call Function Tracks"
msgstr ""

#: ../../docs/tutorials/animation/introduction_2d.rst:19
#, fuzzy
msgid ""
"In Godot, you can animate anything available in the Inspector, such as Node "
"transforms, sprites, UI elements, particles, visibility and color of "
"materials, and so on. You can also modify values of script variables and "
"call any function."
msgstr ""
"Godot에서 당신은 인스펙터(Inspecter)의 노드 변형, 스프라이트, UI 요소, 입자, "
"가시성 및 재료 색상 기타 등을  애니메이션 할 수 있습니다. 스크립트 변수 값을 "
"수정하고 임의의 함수를 호출할 수도 있습니다."

#: ../../docs/tutorials/animation/introduction_2d.rst:25
msgid "Create an AnimationPlayer node"
msgstr "AnimationPlayer 노드 만들기"

#: ../../docs/tutorials/animation/introduction_2d.rst:27
msgid ""
"To use the animation tools we first have to create an :ref:"
"`class_AnimationPlayer` node."
msgstr ""
"애니메이션 도구를 사용하기 위해서는 먼저 :ref:`class_AnimationPlayer` 노드를 "
"만들어야 합니다."

#: ../../docs/tutorials/animation/introduction_2d.rst:30
#, fuzzy
msgid ""
"The AnimationPlayer node type is the data container for your animations. One "
"AnimationPlayer node can hold multiple animations, that can automatically "
"transition to one another."
msgstr ""
"AnimationPlayer 노드 유형은 애니메이션의 데이터 컨테이너입니다.. "
"AnimationPlayer 노드 하나로 여러 애니메이션을 저장할 수 있으며 자동으로 서로 "
"전환될 수 있습니다."

#: ../../docs/tutorials/animation/introduction_2d.rst:37
msgid "The AnimationPlayer node"
msgstr "AnimationPlayer 노드"

#: ../../docs/tutorials/animation/introduction_2d.rst:39
#, fuzzy
msgid ""
"After creating one click on the AnimationPlayer node in the Node tab to open "
"the Animation Panel at the bottom of the viewport."
msgstr ""
"노드 탭에서 AnimationPlayer 노드를 클릭해서 뷰포트 하단의 애니메이션 패널을 "
"엽니다."

#: ../../docs/tutorials/animation/introduction_2d.rst:45
msgid "The animation panel position"
msgstr "애니메이션 패널 위치"

#: ../../docs/tutorials/animation/introduction_2d.rst:47
#, fuzzy
msgid "It consists of four parts:"
msgstr "애니메이션 패널은 5가지 부분으로 구성되어 있습니다:"

#: ../../docs/tutorials/animation/introduction_2d.rst:52
msgid "The animation panel"
msgstr "애니메이션 패널"

#: ../../docs/tutorials/animation/introduction_2d.rst:54
msgid "Animation controls (i.e. add, load, save, and delete animations)"
msgstr ""

#: ../../docs/tutorials/animation/introduction_2d.rst:55
msgid "The tracks listing"
msgstr ""

#: ../../docs/tutorials/animation/introduction_2d.rst:56
msgid "The timeline with keyframes"
msgstr ""

#: ../../docs/tutorials/animation/introduction_2d.rst:57
msgid ""
"The timeline and track controls, where you can zoom the timeline and edit "
"tracks for example."
msgstr ""

#: ../../docs/tutorials/animation/introduction_2d.rst:61
msgid "Computer animation relies on keyframes"
msgstr ""

#: ../../docs/tutorials/animation/introduction_2d.rst:63
msgid "A keyframe defines the value of a property at a certain point in time."
msgstr "키프레임은 특정 시점의 속성이 가지는 값을 정의합니다."

#: ../../docs/tutorials/animation/introduction_2d.rst:65
msgid ""
"Diamond shapes represent keyframes in the timeline. A line between two "
"keyframes indicates that the value hasn't changed."
msgstr ""

#: ../../docs/tutorials/animation/introduction_2d.rst:71
msgid "Keyframes in Godot"
msgstr "Godot에서의 키프레임"

#: ../../docs/tutorials/animation/introduction_2d.rst:73
msgid ""
"The engine interpolates values between keyframes, resulting in a gradual "
"change in values over time."
msgstr ""
"엔진은 키프레임 사이의 값을 보간하여 시간이 지남에 따라 값이 점진적으로 변하"
"게 됩니다."

#: ../../docs/tutorials/animation/introduction_2d.rst:79
msgid "Two keyframes are all it takes to obtain a smooth motion"
msgstr "두 개의 키프레임만 있으면 부드러운 움직임을 얻을 수 있습니다"

#: ../../docs/tutorials/animation/introduction_2d.rst:81
msgid ""
"The timeline lets you insert keyframes and change their timing. It also "
"defines how long the animation is."
msgstr ""
"타임라인을 사용하면 키프레임을 삽입하고 시기를 변경할 수 있습니다. 또한 애니"
"메이션의 길이를 정의합니다."

#: ../../docs/tutorials/animation/introduction_2d.rst:87
msgid "The timeline in the animation panel"
msgstr "애니메이션 패널에서의 타임라인"

#: ../../docs/tutorials/animation/introduction_2d.rst:89
#, fuzzy
msgid ""
"Each line of the Animation Panel is an animation track. Normal and Transform "
"tracks reference node properties. Their name or id is a path to the node and "
"the affected property."
msgstr ""
"애니메이션 패널의 각각의 줄은 애니메이션 트랙입니다. Normal 과 Transform 은 "
"참조하는 노드 속성을 추적합니다. 이들의 이름이나 아이디는 노드와 영향을 받는 "
"속성의 경로입니다."

#: ../../docs/tutorials/animation/introduction_2d.rst:96
msgid "Example of Normal animation tracks"
msgstr ""

#: ../../docs/tutorials/animation/introduction_2d.rst:100
msgid ""
"If you animate the wrong property, you can edit a track's path anytime. "
"Double click on it and type the new path. Play the animation using the "
"\"Play from beginning\" button |Play from beginning| (or pressing :kbd:"
"`Shift + D` on keyboard) to see the changes instantly."
msgstr ""

#: ../../docs/tutorials/animation/introduction_2d.rst:106
msgid "Tutorial: Creating a simple animation"
msgstr ""

#: ../../docs/tutorials/animation/introduction_2d.rst:111
msgid ""
"For this tutorial, we'll going to create an AnimationPlayer node and a "
"sprite node as its child."
msgstr ""

#: ../../docs/tutorials/animation/introduction_2d.rst:117
msgid "Our scene setup"
msgstr ""

#: ../../docs/tutorials/animation/introduction_2d.rst:119
msgid ""
"The sprite holds an image texture and we animate that sprite to move between "
"two points on the screen. For this tutorial use the default Godot Icon as "
"the sprites' texture. As a starting point, move the sprite to a left "
"position on the screen."
msgstr ""

#: ../../docs/tutorials/animation/introduction_2d.rst:126
msgid ""
"Adding animated nodes as children to the AnimationPlayer node is not "
"required, but it is a nice way of distinguishing animated nodes from non-"
"animated nodes in the Scene Tree."
msgstr ""

#: ../../docs/tutorials/animation/introduction_2d.rst:130
#, fuzzy
msgid ""
"Select the AnimationPlayer node, then click the \"Animation\" button in the "
"animation editor. From the list select \"New\" (|Add Animation|) to add a "
"new animation. And Enter a name for the animation in the dialog box."
msgstr ""
"``AnimationPlayer`` 를 선택하고 \"애니메이션\" 버튼을 클릭한 다음 \"새 파일"
"\"을 클릭하세요. 새 애니메이션을 \"walk\"로 이름을 지으세요. 애니메이션 길이"
"를 ``0.6`` 로 설정하고 \"Loop\" 버튼을 클릭해서 애니메이션이 반복되도록 하세"
"요."

#: ../../docs/tutorials/animation/introduction_2d.rst:138
msgid "Add a new animation"
msgstr ""

#: ../../docs/tutorials/animation/introduction_2d.rst:141
msgid "Adding a track"
msgstr ""

#: ../../docs/tutorials/animation/introduction_2d.rst:143
msgid ""
"To add a new track for our sprite, select it and take a look in the toolbar:"
msgstr ""

#: ../../docs/tutorials/animation/introduction_2d.rst:149
msgid "Convenience buttons"
msgstr ""

#: ../../docs/tutorials/animation/introduction_2d.rst:151
msgid ""
"These switches and buttons allow you to add keyframes for the selected "
"node's location, rotation, and scale respectively."
msgstr ""

#: ../../docs/tutorials/animation/introduction_2d.rst:154
msgid ""
"Deselect rotation, because we are only interested in the location of our "
"sprite for this tutorial and click on the key button."
msgstr ""

#: ../../docs/tutorials/animation/introduction_2d.rst:157
msgid ""
"As we don't have a track already set up for the transform/location property, "
"Godot asks, whether it should set it up for us. Click on \"Create\"."
msgstr ""

#: ../../docs/tutorials/animation/introduction_2d.rst:161
msgid ""
"This creates a new track and our first keyframe at the beginning of the "
"timeline:"
msgstr ""

#: ../../docs/tutorials/animation/introduction_2d.rst:167
msgid "The sprite track"
msgstr ""

#: ../../docs/tutorials/animation/introduction_2d.rst:170
msgid "The second keyframe"
msgstr ""

#: ../../docs/tutorials/animation/introduction_2d.rst:172
msgid ""
"Now we need to set the destination where our sprite should be headed and how "
"much time it takes to get there."
msgstr ""

#: ../../docs/tutorials/animation/introduction_2d.rst:175
msgid ""
"Let's say, we want it to take 2 seconds to go to the other point. By default "
"the animation is set to last only 1 second, so change this in the timeline "
"controls in animation panel's lower panel to 2."
msgstr ""

#: ../../docs/tutorials/animation/introduction_2d.rst:182
msgid "Animation length"
msgstr ""

#: ../../docs/tutorials/animation/introduction_2d.rst:184
msgid ""
"Click on the timeline header near the 2 second mark and move the sprite to "
"the target destination on the right side."
msgstr ""

#: ../../docs/tutorials/animation/introduction_2d.rst:187
msgid ""
"Again, click the key button in the toolbar. This creates our second keyframe."
msgstr ""

#: ../../docs/tutorials/animation/introduction_2d.rst:191
msgid "Run the animation"
msgstr ""

#: ../../docs/tutorials/animation/introduction_2d.rst:193
msgid "Click on the \"Play from beginning\" (|Play from beginning|) button."
msgstr ""

#: ../../docs/tutorials/animation/introduction_2d.rst:195
msgid "Yay! Our animation runs:"
msgstr ""

#: ../../docs/tutorials/animation/introduction_2d.rst:200
msgid "The animation"
msgstr ""

#: ../../docs/tutorials/animation/introduction_2d.rst:203
msgid "Back and forth"
msgstr ""

#: ../../docs/tutorials/animation/introduction_2d.rst:205
msgid ""
"Godot has an additional feature here. Like said before, Godot always "
"calculates the frames between two keyframes. In a loop, the first keyframe "
"is also the last keyframe, if no keyframe is specified at the end."
msgstr ""

#: ../../docs/tutorials/animation/introduction_2d.rst:213
msgid "Animation loop"
msgstr ""

#: ../../docs/tutorials/animation/introduction_2d.rst:215
msgid ""
"If you set the animation length to 4 seconds now, the animation moves back "
"and forth. You can change this behaviour if you change the track's loop "
"mode. This is covered in the next chapter."
msgstr ""

#: ../../docs/tutorials/animation/introduction_2d.rst:220
#: ../../docs/tutorials/animation/introduction_2d.rst:228
msgid "Track settings"
msgstr ""

#: ../../docs/tutorials/animation/introduction_2d.rst:222
msgid ""
"Each track has a settings panel at the end, where you can set the update "
"mode, the track interpolation, and the loop mode."
msgstr ""

#: ../../docs/tutorials/animation/introduction_2d.rst:230
msgid ""
"The update mode of a track tells Godot when to update the property values. "
"This can be:"
msgstr ""

#: ../../docs/tutorials/animation/introduction_2d.rst:233
msgid "Continuous: Update the property on each frame"
msgstr ""

#: ../../docs/tutorials/animation/introduction_2d.rst:234
msgid "Discrete: Only update the property on keyframes"
msgstr ""

#: ../../docs/tutorials/animation/introduction_2d.rst:235
msgid "Trigger: Only update the property on keyframes or triggers"
msgstr ""

#: ../../docs/tutorials/animation/introduction_2d.rst:236
msgid ""
"Capture: The current value of a property is remembered, and it will blend "
"with the first animation key found"
msgstr ""

#: ../../docs/tutorials/animation/introduction_2d.rst:241
#, fuzzy
msgid "Track mode"
msgstr "툴 모드"

#: ../../docs/tutorials/animation/introduction_2d.rst:243
msgid ""
"In normal animations, you usually use \"Continuous\". The other types are "
"used to script complex animations."
msgstr ""

#: ../../docs/tutorials/animation/introduction_2d.rst:246
msgid ""
"The interpolation tells Godot how to calculate the frame values between the "
"keyframes. These interpolation modes are supported:"
msgstr ""

#: ../../docs/tutorials/animation/introduction_2d.rst:249
msgid "Nearest: Set the nearest keyframe value"
msgstr ""

#: ../../docs/tutorials/animation/introduction_2d.rst:250
msgid ""
"Linear: Set the value based on a linear function calculation between the two "
"keyframes"
msgstr ""

#: ../../docs/tutorials/animation/introduction_2d.rst:252
msgid ""
"Cubic: Set the value based on a cubic function calculation between the two "
"keyframes"
msgstr ""

#: ../../docs/tutorials/animation/introduction_2d.rst:258
msgid "Track interpolation"
msgstr ""

#: ../../docs/tutorials/animation/introduction_2d.rst:260
msgid ""
"Cubic interpolation leads to a more natural movement, where the animation is "
"slower at a keyframe and faster between keyframes. This is usually used for "
"character animation. Linear interpolation creates more of a robotic movement."
msgstr ""

#: ../../docs/tutorials/animation/introduction_2d.rst:265
msgid ""
"Godot supports two loop modes, which affect the animation if it's set to "
"loop:"
msgstr ""

#: ../../docs/tutorials/animation/introduction_2d.rst:271
msgid "Loop modes"
msgstr ""

#: ../../docs/tutorials/animation/introduction_2d.rst:273
msgid ""
"Clamp loop interpolation: When this is selected, the animation stops after "
"the last keyframe for this track. When the first keyframe is reached again, "
"the animation will reset to its values."
msgstr ""

#: ../../docs/tutorials/animation/introduction_2d.rst:276
msgid ""
"Wrap loop interpolation: When this is selected, Godot calculates the "
"animation after the last keyframe to reach the values of the first keyframe "
"again."
msgstr ""

#: ../../docs/tutorials/animation/introduction_2d.rst:281
#: ../../docs/tutorials/animation/introduction_2d.rst:294
msgid "Keyframes for other properties"
msgstr ""

#: ../../docs/tutorials/animation/introduction_2d.rst:283
msgid ""
"Godot doesn't restrict you to only edit transform properties. Every property "
"can be used as a track where you can set keyframes."
msgstr ""

#: ../../docs/tutorials/animation/introduction_2d.rst:286
msgid ""
"If you select your sprite while the animation panel is visible, you get a "
"small keyframe button for all of the sprite's properties. Click on this "
"button and Godot automatically adds a track and keyframe to the current "
"animation."
msgstr ""

#: ../../docs/tutorials/animation/introduction_2d.rst:297
msgid "Edit keyframes"
msgstr ""

#: ../../docs/tutorials/animation/introduction_2d.rst:299
msgid ""
"For advanced use and to edit keyframes in detail, You can click on them to "
"bring up the keyframe editor in the inspector. You can use this to directly "
"edit its values."
msgstr ""

#: ../../docs/tutorials/animation/introduction_2d.rst:306
msgid "Keyframe editor editing a key"
msgstr ""

#: ../../docs/tutorials/animation/introduction_2d.rst:308
msgid ""
"Additionally, you can also edit the easing value for this keyframe by "
"clicking and dragging the easing setting. This tells Godot, how to change "
"the property values when it reaches this keyframe."
msgstr ""

#: ../../docs/tutorials/animation/introduction_2d.rst:312
msgid ""
"You usually tweak your animations this way, when the movement doesn't \"look "
"right\"."
msgstr ""

#: ../../docs/tutorials/animation/introduction_2d.rst:316
msgid "Advanced: Call Method tracks"
msgstr ""

#: ../../docs/tutorials/animation/introduction_2d.rst:318
msgid ""
"Godot's animation engine doesn't stop here. If you're already comfortable "
"with Godot's scripting language :ref:`doc_gdscript` and :doc:`/classes/"
"index` you know that each node type is a class and has a bunch of callable "
"methods."
msgstr ""

#: ../../docs/tutorials/animation/introduction_2d.rst:324
msgid ""
"For example, the :ref:`class_AudioStreamPlayer` node type has a method to "
"play an audio stream."
msgstr ""

#: ../../docs/tutorials/animation/introduction_2d.rst:327
msgid ""
"Wouldn't it be great to use a method at a specific keyframe in an animation? "
"This is where \"Call Method Tracks\" come in handy. These tracks reference a "
"node again, this time without a reference to a property. Instead, a keyframe "
"holds the name and arguments of a method, that Godot should call when it "
"reaches this keyframe."
msgstr ""

#: ../../docs/tutorials/animation/introduction_2d.rst:333
msgid ""
"To demonstrate, we're going to use a call method track to play audio at a "
"specific keyframe. Normally to play audio you should use an audio track, but "
"for the sake of demonstrating methods we're going to do it this way."
msgstr ""

#: ../../docs/tutorials/animation/introduction_2d.rst:337
msgid ""
"Add a :ref:`class_AudioStreamPlayer` to the Scene Tree and setup a stream "
"using an audio file you put in your project."
msgstr ""

#: ../../docs/tutorials/animation/introduction_2d.rst:340
msgid ""
"Click on \"Add track\" (|Add track|) on the animation panel's track controls."
msgstr ""

#: ../../docs/tutorials/animation/introduction_2d.rst:343
msgid "Select \"Add Call Method Track\" from the list of possible track types."
msgstr ""

#: ../../docs/tutorials/animation/introduction_2d.rst:348
msgid "Add Call Method Track"
msgstr ""

#: ../../docs/tutorials/animation/introduction_2d.rst:350
msgid ""
"Select the :ref:`class_AudioStreamPlayer` node in the selection window. "
"Godot adds the track with the reference to the node."
msgstr ""

#: ../../docs/tutorials/animation/introduction_2d.rst:356
msgid "Select AudioStreamPlayer"
msgstr ""

#: ../../docs/tutorials/animation/introduction_2d.rst:358
msgid ""
"Right click the timeline where Godot should play the sample and click the "
"\"Insert Key\" option. This will bring up a list of methods that can be "
"called for the AudioStreamPlayer node. Select the first one."
msgstr ""

#: ../../docs/tutorials/animation/introduction_2d.rst:365
msgid ""
"When Godot reaches the keyframe, Godot calls the :ref:"
"`class_AudioStreamPlayer` node's \"play\" function and the stream plays."
msgstr ""

#: ../../docs/tutorials/animation/introduction_2d.rst:369
msgid ""
"You can change its position by dragging it on the timeline, you can also "
"click on the keyframe and use the keyframe settings in the inspector."
msgstr ""

#: ../../docs/tutorials/animation/cutout_animation.rst:4
msgid "Cutout animation"
msgstr "컷 아웃(Cutout) 애니메이션"

#: ../../docs/tutorials/animation/cutout_animation.rst:7
#: ../../docs/tutorials/inputs/inputevent.rst:7
msgid "What is it?"
msgstr ""

#: ../../docs/tutorials/animation/cutout_animation.rst:9
msgid ""
"Traditionally, `cutout animation <https://en.wikipedia.org/wiki/"
"Cutout_animation>`__ is a type of `stop motion animation <https://en."
"wikipedia.org/wiki/Stop_motion>`__ in which pieces of paper (or other thin "
"material) are cut into special shapes and arranged in two-dimensional "
"representations of characters and objects. Characters' bodies are usually "
"made out of several pieces. The pieces are arranged and photographed once "
"for each frame of the film. The animator moves and rotates the parts in "
"small increments between each shot to create the illusion of movement when "
"the images are played back quickly in sequence."
msgstr ""

#: ../../docs/tutorials/animation/cutout_animation.rst:18
#, fuzzy
msgid ""
"Simulations of cutout animation can now be created using software as seen in "
"`South Park <https://en.wikipedia.org/wiki/South_Park>`__ and `Jake and the "
"Never Land Pirates <https://en.wikipedia.org/wiki/"
"Jake_and_the_Never_Land_Pirates>`__."
msgstr ""
"디지털 시대의 도래와 함께 이 기술은 컴퓨터를 사용하여 가능하게 되었고 결과적"
"으로 디지털 컷아웃을 이용한 애니메이션 TV 쇼의 양이 증가하게 되었습니다. 눈"
"에 띄는 예로는 `South Park <https://en.wikipedia.org/wiki/South_Park>`__ 또"
"는 `Jake and the Never Land Pirates <https://en.wikipedia.org/wiki/"
"Jake_and_the_Never_Land_Pirates>`__ 있습니다."

#: ../../docs/tutorials/animation/cutout_animation.rst:22
#, fuzzy
msgid ""
"In video games, this technique has also become popular. Examples of this are "
"`Paper Mario <https://en.wikipedia.org/wiki/Super_Paper_Mario>`__ or `Rayman "
"Origins <https://en.wikipedia.org/wiki/Rayman_Origins>`__ ."
msgstr ""
"비디오 게임에서 또한 이 기술이 유명합니다. 예로는 `Paper Mario <https://en."
"wikipedia.org/wiki/Super_Paper_Mario>`__ 또는 `Rayman Origins <https://en."
"wikipedia.org/wiki/Rayman_Origins>`__ 가 있습니다."

#: ../../docs/tutorials/animation/cutout_animation.rst:27
#, fuzzy
msgid "Cutout animation in Godot"
msgstr "컷 아웃(Cutout) 애니메이션"

#: ../../docs/tutorials/animation/cutout_animation.rst:29
msgid ""
"Godot provides tools for working with cutout rigs, and is ideal for the "
"workflow:"
msgstr ""

#: ../../docs/tutorials/animation/cutout_animation.rst:31
#, fuzzy
msgid ""
"**The animation system is fully integrated with the engine**: This means "
"animations can control much more than just motion of objects. Textures, "
"sprite sizes, pivots, opacity, color modulation, and more, can all be "
"animated and blended."
msgstr ""
"**애니메이션 시스템이 엔진과 완전히 통합됨**: 이 말은 즉 애니메이션은 텍스"
"처, 스프라이트 크기, 중심점, 불투명함, 색깔 변조(modulation) 등과 같은 단순"
"한 오브젝트의 움직임 이상의 것을 제어할 수 있습니다의."

#: ../../docs/tutorials/animation/cutout_animation.rst:35
msgid ""
"**Combine animation styles**: AnimatedSprite allows traditional cel "
"animation to be used alongside cutout animation. In cel animation different "
"animation frames use entirely different drawings rather than the same pieces "
"positioned differently. In an otherwise cutout-based animation, cel "
"animation can be used selectively for complex parts such as hands, feet, "
"changing facial expressions, etc."
msgstr ""

#: ../../docs/tutorials/animation/cutout_animation.rst:41
msgid ""
"**Custom Shaped Elements**: Custom shapes can be created with :ref:"
"`Polygon2D <class_Polygon2D>` allowing UV animation, deformations, etc."
msgstr ""

#: ../../docs/tutorials/animation/cutout_animation.rst:44
#, fuzzy
msgid ""
"**Particle Systems**: A cutout animation rig can be combined with particle "
"systems. This can useful for magic effects, jetpacks, etc."
msgstr ""
"**입자 시스템**: 또한 전통적인 애니메이션 구조와 혼합될 수 있습니다. 마법 효"
"과, 제트팩 등에 유용함."

#: ../../docs/tutorials/animation/cutout_animation.rst:46
#, fuzzy
msgid ""
"**Custom Colliders**: Set colliders and influence areas in different parts "
"of the skeletons, great for bosses and fighting games."
msgstr ""
"**사용자 정의 충돌기(Colliders)**: 뼈대의 각기 다른 부분에 충돌기와 영향 영역"
"을 설정합니다. 보스, 격투 게임 등에 적합함."

#: ../../docs/tutorials/animation/cutout_animation.rst:48
#, fuzzy
msgid ""
"**Animation Tree**: Allows complex combinations and blending between several "
"animations, the same way it works in 3D."
msgstr ""
"**애니메이션 트리**: 여러 애니메이션의 복잡한 조합과 혼합을 가능하게 합니다. "
"3D에서 동일한 방식으로 작동합니다."

#: ../../docs/tutorials/animation/cutout_animation.rst:51
#: ../../docs/tutorials/shading/shader_materials.rst:24
msgid "And much more!"
msgstr "그리고 더 많이 있습니다!"

#: ../../docs/tutorials/animation/cutout_animation.rst:54
msgid "Making of GBot"
msgstr "GBot 만들기"

#: ../../docs/tutorials/animation/cutout_animation.rst:56
msgid ""
"For this tutorial, we will use as demo content the pieces of the `GBot "
"<https://www.youtube.com/watch?"
"v=S13FrWuBMx4&list=UUckpus81gNin1aV8WSffRKw>`__ character, created by "
"Andreas Esau."
msgstr ""
"이번 튜토리얼을 위해서 우리는 `GBot <https://www.youtube.com/watch?"
"v=S13FrWuBMx4&list=UUckpus81gNin1aV8WSffRKw>`__ 캐릭터의 조각들을 데모 컨텐츠"
"로 사용할 것입니다. created by Andreas Esau."

#: ../../docs/tutorials/animation/cutout_animation.rst:62
msgid ""
"Get your assets: :download:`gbot_resources.zip <files/gbot_resources.zip>`."
msgstr ""

#: ../../docs/tutorials/animation/cutout_animation.rst:65
msgid "Setting up the rig"
msgstr ""

#: ../../docs/tutorials/animation/cutout_animation.rst:67
msgid "Create an empty Node2D as root of the scene, we will work under it:"
msgstr "씬의 루트로 빈 Node2D를 만듭니다. 우리는 아래와 같이 작업할 것입니다:"

#: ../../docs/tutorials/animation/cutout_animation.rst:71
#, fuzzy
msgid ""
"The first node of the model is the hip. Generally, both in 2D and 3D, the "
"hip is the root of the skeleton. This makes it easier to animate:"
msgstr ""
"좋아요. 우리가 만들 모델의 첫 번째 노드는 엉덩이가 될 것 입니다. 일반적으로 "
"2D와 3D 모두 엉덩이는 골격의 뿌리입니다. 이렇게 하면 애니메이션을 보다 쉽게 "
"할 수 있습니다:"

#: ../../docs/tutorials/animation/cutout_animation.rst:77
#, fuzzy
msgid ""
"Next will be the torso. The torso needs to be a child of the hip, so create "
"a child sprite and load the torso texture, later accommodate it properly:"
msgstr ""
"다음은 몸통입니다. 몸통은 엉덩이의 자식이여야 하므로 자식 스프라이트를 만들"
"어 몸통을 불러오고 나중에 적당히 맞춥니다:"

#: ../../docs/tutorials/animation/cutout_animation.rst:82
#, fuzzy
msgid ""
"This looks good. Let's see if our hierarchy works as a skeleton by rotating "
"the torso. We can do this be pressing :kbd:`E` to enter rotate mode, and "
"dragging with the left mouse button. To exit rotate mode hit :kbd:`ESC`."
msgstr ""
"좋아 보입니다. 우리 구조가 몸통을 돌려서 골격으로 작용하는지 봅시다. ``E`` "
"를 눌러 회전 모드로 들어가고 왼쪽 마우스 버튼으로 끌 수 있습니다. 회전 모드"
"를 종료하려면 ``ESC`` 를 누르세요."

#: ../../docs/tutorials/animation/cutout_animation.rst:88
#, fuzzy
msgid "The rotation pivot is wrong and needs to be adjusted."
msgstr ""
"이런, 좋게 보이지 않습니다! 회전 중심점이 잘못 되었습니다. 즉 조정할 필요가 "
"있습니다."

#: ../../docs/tutorials/animation/cutout_animation.rst:90
#, fuzzy
msgid ""
"This small cross in the middle of the :ref:`Sprite <class_Sprite>` is the "
"rotation pivot:"
msgstr ""
":ref:`Sprite <class_Sprite>` 의 가운데에 있는 이 작은 십자가가 회전 중심점입"
"니다:"

#: ../../docs/tutorials/animation/cutout_animation.rst:96
msgid "Adjusting the pivot"
msgstr "중심점 조정하기"

#: ../../docs/tutorials/animation/cutout_animation.rst:98
msgid ""
"The pivot can be adjusted by changing the *offset* property in the Sprite:"
msgstr "중심점은 스프라이트에서 *offset* 속성을 변경해서 조정될 수 있습니다:"

#: ../../docs/tutorials/animation/cutout_animation.rst:103
#, fuzzy
msgid ""
"The pivot can also be adjusted *visually*. While hovering over the desired "
"pivot point,  press :kbd:`V` to move the pivot there for the selected "
"Sprite. There is also a tool in the tool bar that has a similar function."
msgstr ""
"그러나 *시각적으로* 할 수 있는 방법이 더 있습니다. 중심점이 있기를 원하는 지"
"점에 커서를 올려놓고 단순히 \"v\" 키를 누르면 선택된 스프라이트의 중심점이 해"
"당 위치로 움직입니다. 또는 툴바에 유사한 기능을 가진 도구가 있습니다."

#: ../../docs/tutorials/animation/cutout_animation.rst:110
#, fuzzy
msgid ""
"Continue adding body pieces, starting with the right arm. Make sure to put "
"each sprite in its correct place in the hierarchy, so its rotations and "
"translations are relative to its parent:"
msgstr ""
"이제 좋아 보입니다! 오른쪽 팔을 시작으로 몸 부분을 계속 추가합시다. 구조에 넣"
"을 때 스프라이트의 회전과 변환이 부모에 상대적이 되도록 하세요:"

#: ../../docs/tutorials/animation/cutout_animation.rst:116
msgid ""
"With the left arm there's a problem. In 2D, child nodes appear in front of "
"their parents:"
msgstr ""

#: ../../docs/tutorials/animation/cutout_animation.rst:121
msgid ""
"We want the left arm to appear *behind* the hip and the torso. We could move "
"the left arm nodes behind the hip (above the hip node in the scene "
"hierarchy), but then the left arm is no longer in its proper place in the "
"hierarchy. This means it wouldn't be affected the movement of the torso. "
"We'll fix this problem with ``RemoteTransform2D`` nodes."
msgstr ""

#: ../../docs/tutorials/animation/cutout_animation.rst:127
msgid ""
"You can also fix depth ordering problems by adjusting the Z property of any "
"node inheriting from Node2D."
msgstr ""

#: ../../docs/tutorials/animation/cutout_animation.rst:131
msgid "RemoteTransform2D node"
msgstr "RemoteTransform2D 노드"

#: ../../docs/tutorials/animation/cutout_animation.rst:133
#, fuzzy
msgid ""
"The :ref:`RemoteTransform2D <class_RemoteTransform2D>` node transforms nodes "
"somewhere else in the hierarchy. This node applies its own transform "
"(including any transformation it inherits from its parents) to the remote "
"node it targets."
msgstr ""
"Godot은 :ref:`RemoteTransform2D <class_RemoteTransform2D>` 라는 특수한 노드"
"를 제공합니다. 이 노드는 원격 노드에 적용한 변형을 계층 어딘가에 있는 노드를 "
"변형할 것입니다."

#: ../../docs/tutorials/animation/cutout_animation.rst:137
#, fuzzy
msgid ""
"This allows us to correct the visibility order of our elements independent "
"from the locations of those parts in the cutout hierarchy."
msgstr "이를 통해 계층과 독립적인 뚜렷한 순서를 가질 수 있습니다."

#: ../../docs/tutorials/animation/cutout_animation.rst:140
msgid ""
"Create a ``RemoteTransform2D`` node as a child of the torso. Call it "
"``remote_arm_l``. Create another RemoteTransform2D node inside the first and "
"call it ``remote_hand_l``. Use the ``Remote Path`` property of the two new "
"nodes to target the ``arm_l`` and ``hand_l`` sprites respectively:"
msgstr ""

#: ../../docs/tutorials/animation/cutout_animation.rst:147
#, fuzzy
msgid ""
"Moving the ``RemoteTransform2D`` nodes now moves the sprites. So we can "
"create animations by adjusting the ``RemoteTransform2D`` transforms:"
msgstr ""
"원격 변형 노드를 움직이면 스프라이트가 움직입니다. 쉽게 애니메이션을 할 수 있"
"고 캐릭터 자세를 잡을 수 있습니다:"

#: ../../docs/tutorials/animation/cutout_animation.rst:153
msgid "Completing the skeleton"
msgstr "뼈대 완성하기"

#: ../../docs/tutorials/animation/cutout_animation.rst:155
msgid ""
"Complete the skeleton by following the same steps for the rest of the parts. "
"The resulting scene should look similar to this:"
msgstr ""
"나머지 부분도 같은 과정을 거쳐서 뼈대를 완성합니다. 씬 결과는 다음과 같이 비"
"슷하게 보여야 합니다:"

#: ../../docs/tutorials/animation/cutout_animation.rst:160
msgid ""
"The resulting rig will be easy to animate. By selecting the nodes and "
"rotating them you can animate forward kinematics (FK) efficiently."
msgstr ""

#: ../../docs/tutorials/animation/cutout_animation.rst:163
msgid "For simple objects and rigs this is fine, but there are limitations:"
msgstr ""

#: ../../docs/tutorials/animation/cutout_animation.rst:165
msgid ""
"Selecting sprites in the main viewport can become difficult in complex rigs. "
"The scene tree ends up being used to select parts instead, which can be "
"slower."
msgstr ""

#: ../../docs/tutorials/animation/cutout_animation.rst:167
msgid ""
"Inverse Kinematics (IK) is useful for animating extremities like hands and "
"feet, and can't be used with our rig in its current state."
msgstr ""

#: ../../docs/tutorials/animation/cutout_animation.rst:170
#, fuzzy
msgid "To solve these problems we'll use Godot's skeletons."
msgstr ""
"이러한 문제를 해결하기 위해서 Godot은 골격에 관한 간단한 메서드를 지원합니다."

#: ../../docs/tutorials/animation/cutout_animation.rst:173
msgid "Skeletons"
msgstr "골격(Skeletons)"

#: ../../docs/tutorials/animation/cutout_animation.rst:175
msgid ""
"In Godot there is a helper to create \"bones\" between nodes. The bone-"
"linked nodes are called skeletons."
msgstr ""

#: ../../docs/tutorials/animation/cutout_animation.rst:178
#, fuzzy
msgid ""
"As an example, let's turn the right arm into a skeleton. To create a "
"skeleton, a chain of nodes must be selected from top to bottom:"
msgstr ""
"예를 들어 오른쪽 팔을 골격으로 만들어 봅시다. 골격을 만들기 위해서는 일련의 "
"노드가 위에서 아래로 선택되어야 합니다:"

#: ../../docs/tutorials/animation/cutout_animation.rst:183
msgid "Then, click on the Skeleton menu and select ``Make Bones``."
msgstr ""
"그 다음 스켈레톤 설정 메뉴를 클릭하고 ``노드에서 맞춤 본 만들기`` 를 선택하세"
"요."

#: ../../docs/tutorials/animation/cutout_animation.rst:187
msgid "This will add bones covering the arm, but the result may be surprising."
msgstr ""

#: ../../docs/tutorials/animation/cutout_animation.rst:191
msgid ""
"Why does the hand lack a bone? In Godot, a bone connects a node with its "
"parent. And there's currently no child of the hand node. With this knowledge "
"let's try again."
msgstr ""

#: ../../docs/tutorials/animation/cutout_animation.rst:195
msgid ""
"The first step is creating an endpoint node. Any kind of node will do, but :"
"ref:`Position2D <class_Position2D>` is preferred because it's visible in the "
"editor. The endpoint node will ensure that the last bone has orientation."
msgstr ""

#: ../../docs/tutorials/animation/cutout_animation.rst:202
msgid ""
"Now select the whole chain, from the endpoint to the arm and create bones:"
msgstr ""

#: ../../docs/tutorials/animation/cutout_animation.rst:207
msgid ""
"The result resembles a skeleton a lot more, and now the arm and forearm can "
"be selected and animated."
msgstr ""

#: ../../docs/tutorials/animation/cutout_animation.rst:210
msgid ""
"Create endpoints for all important extremities. Generate bones for all "
"articulable parts of the cutout, with the hip as the ultimate connection "
"between all of them."
msgstr ""

#: ../../docs/tutorials/animation/cutout_animation.rst:214
msgid ""
"You may notice that an extra bone is created when connecting the hip and "
"torso. Godot has connected the hip node to the scene root with a bone, and "
"we don't want that. To fix this, select the root and hip node, open the "
"Skeleton menu, click ``clear bones``."
msgstr ""

#: ../../docs/tutorials/animation/cutout_animation.rst:221
#, fuzzy
msgid "Your final skeleton should look something like this:"
msgstr "당신의 최종 씬은 이렇게 보여야 할 것입니다."

#: ../../docs/tutorials/animation/cutout_animation.rst:225
msgid ""
"You might have noticed a second set of endpoints in the hands. This will "
"make sense soon."
msgstr ""

#: ../../docs/tutorials/animation/cutout_animation.rst:228
msgid ""
"Now that the whole figure is rigged, the next step is setting up the IK "
"chains. IK chains allow for more natural control of extremities."
msgstr ""

#: ../../docs/tutorials/animation/cutout_animation.rst:232
msgid "IK chains"
msgstr "IK 체인"

#: ../../docs/tutorials/animation/cutout_animation.rst:234
msgid ""
"IK stands for inverse kinematics. It's a convenient technique for animating "
"the position of hands, feet and other extremities of rigs like the one we've "
"made. Imagine you want to pose a character's foot in a specific position on "
"the ground. Without IK chains, each motion of the foot would require "
"rotating and positioning several other bones (the shin and the thigh at "
"least). This would be quite complex and lead to imprecise results."
msgstr ""

#: ../../docs/tutorials/animation/cutout_animation.rst:241
msgid ""
"IK allows us to move directly the foot while the shin and thigh self-adjust."
msgstr ""

#: ../../docs/tutorials/animation/cutout_animation.rst:243
msgid ""
"To create an IK chain, select a chain of bones from endpoint to the base for "
"the chain. For example, to create an IK chain for the right leg, select the "
"following:"
msgstr ""

#: ../../docs/tutorials/animation/cutout_animation.rst:249
msgid "Then enable this chain for IK. Go to Edit > Make IK Chain."
msgstr ""

#: ../../docs/tutorials/animation/cutout_animation.rst:253
msgid "As a result, the base of the chain will turn *Yellow*."
msgstr ""

#: ../../docs/tutorials/animation/cutout_animation.rst:257
msgid ""
"Once the IK chain is set-up grab any child or grand-child of the base of the "
"chain (e.g. a foot) and move it. You'll see the rest of the chain adjust as "
"you adjust its position."
msgstr ""

#: ../../docs/tutorials/animation/cutout_animation.rst:264
#, fuzzy
msgid "Animation tips"
msgstr "애니메이션 설정"

#: ../../docs/tutorials/animation/cutout_animation.rst:266
msgid ""
"The following section will be a collection of tips for creating animation "
"for your cutout rigs. For more information on how the animation system in "
"Godot works, see :ref:`doc_animations`."
msgstr ""

#: ../../docs/tutorials/animation/cutout_animation.rst:271
#, fuzzy
msgid "Setting keyframes and excluding properties"
msgstr "씬 노드 속성 접근하기"

#: ../../docs/tutorials/animation/cutout_animation.rst:273
msgid ""
"Special contextual elements appear in the top toolbar when the animation "
"editor window is open:"
msgstr ""

#: ../../docs/tutorials/animation/cutout_animation.rst:278
msgid ""
"The key button inserts location, rotation, and scale keyframes for the "
"selected objects or bones at the current playhead position."
msgstr ""

#: ../../docs/tutorials/animation/cutout_animation.rst:281
msgid ""
"The \"loc\", \"rot\", and \"scl\" toggle buttons to the left of the key "
"button modify its function, allowing you to specify which of the three "
"properties keyframes will be created for."
msgstr ""

#: ../../docs/tutorials/animation/cutout_animation.rst:285
msgid ""
"Here's an illustration of how this can be useful: Imagine you have a node "
"which already has two keyframes animating its scale only. You want to add an "
"overlapping rotation movement to the same node. The rotation movement should "
"begin and end at different times from the scale change that's already set "
"up. You can use the toggle buttons to have only rotation information added "
"when you add a new keyframe. This way, you can avoid adding unwanted scale "
"keyframes which would disrupt the existing scale animation."
msgstr ""

#: ../../docs/tutorials/animation/cutout_animation.rst:294
#, fuzzy
msgid "Creating a rest pose"
msgstr "프로젝트 생성하기"

#: ../../docs/tutorials/animation/cutout_animation.rst:296
msgid ""
"Think of a rest pose as a default pose that your cutout rig should be set to "
"when no other pose is active in your game. Create a rest pose as follows:"
msgstr ""

#: ../../docs/tutorials/animation/cutout_animation.rst:299
msgid ""
"1. Make sure the rig parts are positioned in what looks like a \"resting\" "
"arrangement."
msgstr ""

#: ../../docs/tutorials/animation/cutout_animation.rst:302
#, fuzzy
msgid "Create a new animation, rename it \"rest\"."
msgstr "AnimationPlayer 노드 만들기"

#: ../../docs/tutorials/animation/cutout_animation.rst:304
msgid "Select all nodes in your rig (box selection should work fine)."
msgstr ""

#: ../../docs/tutorials/animation/cutout_animation.rst:306
msgid ""
"4. Make sure the \"loc\", \"rot\", and \"scl\" toggle buttons are all active "
"in the toolbar."
msgstr ""

#: ../../docs/tutorials/animation/cutout_animation.rst:309
msgid ""
"5. Press the key button. Keys will be inserted for all selected parts "
"storing their current arrangement. This pose can now be recalled when "
"necessary in your game by playing the \"rest\" animation you've created."
msgstr ""

#: ../../docs/tutorials/animation/cutout_animation.rst:316
msgid "Modifying rotation only"
msgstr ""

#: ../../docs/tutorials/animation/cutout_animation.rst:318
msgid ""
"When animating a cutout rig, often it's only the rotation of the nodes that "
"needs to change. Location and scale are rarely used."
msgstr ""

#: ../../docs/tutorials/animation/cutout_animation.rst:322
msgid ""
"So when inserting keys, you might find it convenient to have only the \"rot"
"\" toggle active most of the time:"
msgstr ""

#: ../../docs/tutorials/animation/cutout_animation.rst:327
msgid ""
"This will avoid the creation of unwanted animation tracks for position and "
"scale."
msgstr ""

#: ../../docs/tutorials/animation/cutout_animation.rst:331
#, fuzzy
msgid "Keyframing IK chains"
msgstr "IK 체인"

#: ../../docs/tutorials/animation/cutout_animation.rst:333
msgid ""
"When editing IK chains, it's not necessary to select the whole chain to add "
"keyframes. Selecting the endpoint of the chain and inserting a keyframe will "
"automatically insert keyframes for all other parts of the chain too."
msgstr ""

#: ../../docs/tutorials/animation/cutout_animation.rst:338
msgid "Visually move a sprite behind its parent"
msgstr ""

#: ../../docs/tutorials/animation/cutout_animation.rst:340
msgid ""
"Sometimes it is necessary to have a node change its visual depth relative to "
"its parent node during an animation. Think of a character facing the camera, "
"who pulls something out from behind his back and holds it out in front of "
"him. During this animation the whole arm and the object in his hand would "
"need to change their visual depth relative to the body of the character."
msgstr ""

#: ../../docs/tutorials/animation/cutout_animation.rst:346
msgid ""
"To help with this there's a keyframable \"Behind Parent\" property on all "
"Node2D-inheriting nodes. When planning your rig, think about the movements "
"it will need to perform and give some thought to how you'll use \"Behind "
"Parent\" and/or RemoteTransform2D nodes. They provide overlapping "
"functionality."
msgstr ""

#: ../../docs/tutorials/animation/cutout_animation.rst:354
msgid "Setting easing curves for multiple keys"
msgstr ""

#: ../../docs/tutorials/animation/cutout_animation.rst:356
msgid "To apply the same the easing curve to multiple keyframes at once:"
msgstr ""

#: ../../docs/tutorials/animation/cutout_animation.rst:358
msgid "Select the relevant keys."
msgstr ""

#: ../../docs/tutorials/animation/cutout_animation.rst:359
#, fuzzy
msgid ""
"Click on the pencil icon in the bottom right of the animation panel, this "
"will open the transition editor."
msgstr ""
"노드 탭에서 AnimationPlayer 노드를 클릭해서 뷰포트 하단의 애니메이션 패널을 "
"엽니다."

#: ../../docs/tutorials/animation/cutout_animation.rst:361
msgid "In the transition editor click on the desired curve to apply it."
msgstr ""

#: ../../docs/tutorials/animation/cutout_animation.rst:366
msgid "2D Skeletal deform"
msgstr ""

#: ../../docs/tutorials/animation/cutout_animation.rst:368
msgid ""
"Skeletal deform can be used to augment a cutout rig, allowing single pieces "
"to deform organically (e.g. antennae that wobble as an insect character "
"walks)."
msgstr ""

#: ../../docs/tutorials/animation/cutout_animation.rst:371
msgid ""
"This process is described in a :ref:`separate tutorial <doc_2d_skeletons>`."
msgstr ""

#: ../../docs/tutorials/animation/2d_skeletons.rst:4
#, fuzzy
msgid "2D skeletons"
msgstr "스켈레톤"

#: ../../docs/tutorials/animation/2d_skeletons.rst:9
msgid ""
"When working with 3D, skeletal deforms are common for characters and "
"creatures and most 3D modelling applications support it. For 2D, as this "
"function is not used as often, it's difficult to find mainstream software "
"aimed for this."
msgstr ""

#: ../../docs/tutorials/animation/2d_skeletons.rst:13
msgid ""
"One option is to create animations in third-party software such as Spine or "
"Dragonbones. From Godot 3.1 onwards, though, this functionality is supported "
"built-in."
msgstr ""

#: ../../docs/tutorials/animation/2d_skeletons.rst:17
msgid ""
"Why would you want to do skeletal animations directly in Godot? The answer "
"is that there are many advantages to it:"
msgstr ""

#: ../../docs/tutorials/animation/2d_skeletons.rst:20
msgid ""
"Better integration with the engine, so less hassle importing and editing "
"from an external tool."
msgstr ""

#: ../../docs/tutorials/animation/2d_skeletons.rst:22
msgid ""
"Ability to control particle systems, shaders, sounds, call scripts, colors, "
"transparency, etc. in animations."
msgstr ""

#: ../../docs/tutorials/animation/2d_skeletons.rst:24
msgid ""
"The built-in skeletal system in Godot is very efficient and designed for "
"performance."
msgstr ""

#: ../../docs/tutorials/animation/2d_skeletons.rst:27
msgid "The following tutorial will, then, explain 2D skeletal deformations."
msgstr ""

#: ../../docs/tutorials/animation/2d_skeletons.rst:34
msgid ""
"Before starting, we recommend you to go through the :ref:"
"`doc_cutout_animation` tutorial to gain a general understanding of animating "
"within Godot."
msgstr ""

#: ../../docs/tutorials/animation/2d_skeletons.rst:38
msgid ""
"For this tutorial, we will be using a single image to construct our "
"character. Download it from :download:`gBot_pieces.png <img/gBot_pieces."
"png>` or save the image below."
msgstr ""

#: ../../docs/tutorials/animation/2d_skeletons.rst:44
msgid ""
"It is also advised to download the final character image :download:"
"`gBot_complete.png <img/gBot_complete.png>` to have a good reference for "
"putting the different pieces together."
msgstr ""

#: ../../docs/tutorials/animation/2d_skeletons.rst:51
#, fuzzy
msgid "Creating the polygons"
msgstr "애니메이션 만들기"

#: ../../docs/tutorials/animation/2d_skeletons.rst:53
msgid ""
"Create a new scene for your model (if it's going to be an animated "
"character, you may want to use a ``KinematicBody2D``). For ease of use, an "
"empty 2D node is created as a root for the polygons."
msgstr ""

#: ../../docs/tutorials/animation/2d_skeletons.rst:57
msgid ""
"Begin with a ``Polygon2D`` node. There is no need to place it anywhere in "
"the scene for now, so simply create it like this:"
msgstr ""

#: ../../docs/tutorials/animation/2d_skeletons.rst:62
msgid ""
"Select it and assign the texture with the character pieces you have "
"downloaded before:"
msgstr ""

#: ../../docs/tutorials/animation/2d_skeletons.rst:67
msgid ""
"Drawing a polygon directly is not advised. Instead, open the \"UV\" dialog "
"for the polygon:"
msgstr ""

#: ../../docs/tutorials/animation/2d_skeletons.rst:72
msgid ""
"Head over to the *Points* mode, select the pencil and draw a polygon around "
"the desired piece:"
msgstr ""

#: ../../docs/tutorials/animation/2d_skeletons.rst:77
msgid ""
"Duplicate the polygon node and give it a proper name. Then, enter the \"UV\" "
"dialog again and replace the old polygon with another one in the new desired "
"piece."
msgstr ""

#: ../../docs/tutorials/animation/2d_skeletons.rst:81
msgid ""
"When you duplicate nodes and the next piece has a similar shape, you can "
"edit the previous polygon instead of drawing a new one."
msgstr ""

#: ../../docs/tutorials/animation/2d_skeletons.rst:84
msgid ""
"After moving the polygon, remember to update the UV by selecting Edit -> "
"\"Polygon -> UV\" in the Polygon 2D UV Editor."
msgstr ""

#: ../../docs/tutorials/animation/2d_skeletons.rst:89
msgid "Keep doing this until you mapped all pieces."
msgstr ""

#: ../../docs/tutorials/animation/2d_skeletons.rst:93
msgid ""
"You will notice that pieces for nodes appear in the same layout as they do "
"in the original texture. This is because by default, when you draw a "
"polygon, the UV and points are the same."
msgstr ""

#: ../../docs/tutorials/animation/2d_skeletons.rst:97
msgid ""
"Rearrange the pieces and build the character. This should be pretty quick. "
"There is no need to change pivots, so don't bother making sure rotation "
"pivots for each piece are right; you can leave them be for now."
msgstr ""

#: ../../docs/tutorials/animation/2d_skeletons.rst:103
msgid ""
"Ah, the visual order of the pieces is not correct yet, as some are covering "
"wrong pieces. Rearrange the order of the nodes to fix this:"
msgstr ""

#: ../../docs/tutorials/animation/2d_skeletons.rst:108
msgid ""
"And there you go! It was definitely much easier than in the cutout tutorial."
msgstr ""

#: ../../docs/tutorials/animation/2d_skeletons.rst:111
#, fuzzy
msgid "Creating the skeleton"
msgstr "스켈레톤(Skeleton) 정리하기"

#: ../../docs/tutorials/animation/2d_skeletons.rst:113
msgid ""
"Create a ``Skeleton2D`` node as a child of the root node. This will be the "
"base of our skeleton:"
msgstr ""

#: ../../docs/tutorials/animation/2d_skeletons.rst:118
msgid ""
"Create a ``Bone2D`` node as a child of the skeleton. Put it on the hip "
"(usually skeletons start here). The bone will be pointing to the right, but "
"you can ignore this for now."
msgstr ""

#: ../../docs/tutorials/animation/2d_skeletons.rst:124
msgid "Keep creating bones in hierarchy and naming them accordingly."
msgstr ""

#: ../../docs/tutorials/animation/2d_skeletons.rst:128
msgid ""
"At the end of this chain, there will be a *jaw* node. It is, again, very "
"short and pointing to the right. This is normal for bones without children. "
"The length of *tip* bones can be changed with a property in the inspector:"
msgstr ""

#: ../../docs/tutorials/animation/2d_skeletons.rst:134
msgid ""
"In this case, we don't need to rotate the bone (coincidentally the jaw "
"points right in the sprite), but in case you need to, feel free to do it. "
"Again, this is only really needed for tip bones as nodes with children don't "
"usually need a length or a specific rotation."
msgstr ""

#: ../../docs/tutorials/animation/2d_skeletons.rst:139
msgid "Keep going and build the whole skeleton:"
msgstr ""

#: ../../docs/tutorials/animation/2d_skeletons.rst:143
msgid ""
"You will notice that all bones raise an annoying warning about a missing "
"rest pose. This means that it's time to set one. Go to the *skeleton* node "
"and create a rest pose. This pose is the default one, you can come back to "
"it anytime you want (which is very handy for animating):"
msgstr ""

#: ../../docs/tutorials/animation/2d_skeletons.rst:150
msgid ""
"The warnings will go away. If you modify the skeleton (add/remove bones) you "
"will need to set the rest pose again."
msgstr ""

#: ../../docs/tutorials/animation/2d_skeletons.rst:154
#, fuzzy
msgid "Deforming the polygons"
msgstr "행성 색칠하기"

#: ../../docs/tutorials/animation/2d_skeletons.rst:156
msgid ""
"Select the previously created polygons and assign the skeleton node to their "
"``Skeleton`` property. This will ensure that they can eventually be deformed "
"by it."
msgstr ""

#: ../../docs/tutorials/animation/2d_skeletons.rst:162
msgid "Click the property highlighted above and select the skeleton node:"
msgstr ""

#: ../../docs/tutorials/animation/2d_skeletons.rst:166
msgid ""
"Again, open the UV editor for the polygon and go to the *Bones* section."
msgstr ""

#: ../../docs/tutorials/animation/2d_skeletons.rst:170
msgid ""
"You will not be able to paint weights yet. For this you need to synchronize "
"the list of bones from the skeleton with the polygon. This step is done only "
"once and manually (unless you modify the skeleton by adding/removing/"
"renaming bones). It ensures that your rigging information is kept in the "
"polygon, even if a skeleton node is accidentally lost or the skeleton "
"modified. Push the \"Sync Bones to Polygon\" button to sync the list."
msgstr ""

#: ../../docs/tutorials/animation/2d_skeletons.rst:179
msgid ""
"The list of bones will automatically appear. By default, your polygon has no "
"weight assigned to any of them. Select the bones you want to assign weight "
"to and paint them:"
msgstr ""

#: ../../docs/tutorials/animation/2d_skeletons.rst:185
msgid ""
"Points in white have a full weight assigned, while points in black are not "
"influenced by the bone. If the same point is painted white for multiple "
"bones, the influence will be distributed amongst them (so usually there is "
"not that much need to use shades in-between unless you want to polish the "
"bending effect)."
msgstr ""

#: ../../docs/tutorials/animation/2d_skeletons.rst:193
msgid ""
"After painting the weights, animating the bones (NOT the polygons!) will "
"have the desired effect of modifying and bending the polygons accordingly. "
"As you only need to animate bones in this approach, work becomes much easier!"
msgstr ""

#: ../../docs/tutorials/animation/2d_skeletons.rst:197
msgid ""
"But it's not all roses. Trying to animate bones that bend the polygon will "
"often yield unexpected results:"
msgstr ""

#: ../../docs/tutorials/animation/2d_skeletons.rst:202
msgid ""
"This happens because Godot generates internal triangles that connect the "
"points when drawing the polygon. They don't always bend the way you would "
"expect. To solve this, you need to set hints in the geometry to clarify how "
"you expect it to deform."
msgstr ""

#: ../../docs/tutorials/animation/2d_skeletons.rst:208
msgid "Internal vertices"
msgstr ""

#: ../../docs/tutorials/animation/2d_skeletons.rst:210
msgid ""
"Open the UV menu for each bone again and go to the *Points* section. Add "
"some internal vertices in the regions where you expect the geometry to bend:"
msgstr ""

#: ../../docs/tutorials/animation/2d_skeletons.rst:215
msgid ""
"Now, go to the *Polygon* section and redraw your own polygons with more "
"detail. Imagine that, as your polygons bend, you need to make sure they "
"deform the least possible, so experiment a bit to find the right setup."
msgstr ""

#: ../../docs/tutorials/animation/2d_skeletons.rst:221
msgid ""
"Once you start drawing, the original polygon will disappear and you will be "
"free to create your own:"
msgstr ""

#: ../../docs/tutorials/animation/2d_skeletons.rst:226
msgid ""
"This amount of detail is usually fine, though you may want to have more fine-"
"grained control over where triangles go. Experiment by yourself until you "
"get the results you like."
msgstr ""

#: ../../docs/tutorials/animation/2d_skeletons.rst:230
msgid ""
"**Note:** Don't forget that your newly added internal vertices also need "
"weight painting! Go to the *Bones* section again to assign them to the right "
"bones."
msgstr ""

#: ../../docs/tutorials/animation/2d_skeletons.rst:233
msgid "Once you are all set, you will get much better results:"
msgstr ""

#: ../../docs/tutorials/animation/animation_tree.rst:4
msgid "AnimationTree"
msgstr "애니메이션 트리"

#: ../../docs/tutorials/animation/animation_tree.rst:9
msgid ""
"With :ref:`AnimationPlayer <class_AnimationPlayer>`, Godot has one of the "
"most flexible animation systems that you can find in any game engine. The "
"ability to animate pretty much any property in any node or resource, as well "
"as having dedicated transform, bezier, function calling, audio and sub-"
"animation tracks, is pretty much unique."
msgstr ""

#: ../../docs/tutorials/animation/animation_tree.rst:13
msgid ""
"However, the support for blending those animations via ``AnimationPlayer`` "
"is relatively limited, as only a fixed cross-fade transition time can be set."
msgstr ""

#: ../../docs/tutorials/animation/animation_tree.rst:15
msgid ""
":ref:`AnimationTree <class_AnimationTree>` is a new node introduced in Godot "
"3.1 to deal with advanced transitions. It supersedes the ancient "
"``AnimationTreePlayer``, while adding a huge amount of features and "
"flexibility."
msgstr ""

#: ../../docs/tutorials/animation/animation_tree.rst:19
#, fuzzy
msgid "Creating an AnimationTree"
msgstr "애니메이션 만들기"

#: ../../docs/tutorials/animation/animation_tree.rst:21
msgid ""
"Before starting, it must be made clear that an ``AnimationTree`` node does "
"not contain its own animations. Instead, it uses animations contained in an "
"``AnimationPlayer`` node. This way, you can edit your animations (or import "
"them from a 3D scene) as usual and then use this extra node to control the "
"playback."
msgstr ""

#: ../../docs/tutorials/animation/animation_tree.rst:25
msgid ""
"The most common way to use ``AnimationTree`` is in a 3D scene. When "
"importing your scenes from a 3D exchange format, they will usually come with "
"animations built-in (either multiple ones or split from a large one on "
"import). At the end, the imported Godot scene will contain the animations in "
"a ``AnimationPlayer`` node."
msgstr ""

#: ../../docs/tutorials/animation/animation_tree.rst:29
msgid ""
"As you rarely use imported scenes directly in Godot (they are either "
"instantiated or inherited from), you can place the ``AnimationTree`` node in "
"your new scene which contains the imported one. Afterwards, point the "
"``AnimationTree`` node to the ``AnimationPlayer`` that was created in the "
"imported scene."
msgstr ""

#: ../../docs/tutorials/animation/animation_tree.rst:32
msgid ""
"This is how it's done in the `Third Person Shooter demo <https://github.com/"
"godotengine/tps-demo>`_, for reference:"
msgstr ""

#: ../../docs/tutorials/animation/animation_tree.rst:36
msgid ""
"A new scene was created for the player with a ``KinematicBody`` as root. "
"Inside this scene, the original ``.dae`` (Collada) file was instantiated and "
"an ``AnimationTree`` node was created."
msgstr ""

#: ../../docs/tutorials/animation/animation_tree.rst:40
#, fuzzy
msgid "Creating a tree"
msgstr "프로젝트 생성하기"

#: ../../docs/tutorials/animation/animation_tree.rst:42
msgid ""
"There are three main types of nodes that can be used in ``AnimationTree``:"
msgstr ""

#: ../../docs/tutorials/animation/animation_tree.rst:44
msgid ""
"Animation nodes, which reference an animation from the linked "
"``AnimationTree``."
msgstr ""

#: ../../docs/tutorials/animation/animation_tree.rst:45
msgid "Animation Root nodes, which are used to blend sub-nodes."
msgstr ""

#: ../../docs/tutorials/animation/animation_tree.rst:46
msgid ""
"Animation Blend nodes, which are used within ``AnimationNodeBlendTree`` as "
"single-graph blending via multiple input ports."
msgstr ""

#: ../../docs/tutorials/animation/animation_tree.rst:48
msgid "To set a root node in ``AnimationTree``, a few types are available:"
msgstr ""

#: ../../docs/tutorials/animation/animation_tree.rst:52
msgid ""
"``AnimationNodeAnimation``: Selects an animation from the list and plays it. "
"This is the simplest root node, and generally not used directly as root."
msgstr ""

#: ../../docs/tutorials/animation/animation_tree.rst:53
msgid ""
"``AnimationNodeBlendTree``: Contains many *blend* type nodes, such as mix, "
"blend2, blend3, one shot, etc. This is one of the most commonly used roots."
msgstr ""

#: ../../docs/tutorials/animation/animation_tree.rst:54
msgid ""
"``AnimationNodeStateMachine``: Contains multiple root nodes as children in a "
"graph. Each node is used as a *state*, and provides multiple functions to "
"alternate between states."
msgstr ""

#: ../../docs/tutorials/animation/animation_tree.rst:55
msgid ""
"``AnimationNodeBlendSpace2D``: Allows placing root nodes in a 2D blend "
"space. Control the blend position in 2D to mix between multiple animations."
msgstr ""

#: ../../docs/tutorials/animation/animation_tree.rst:56
msgid "``AnimationNodeBlendSpace1D``: Simplified version of the above (1D)."
msgstr ""

#: ../../docs/tutorials/animation/animation_tree.rst:59
#, fuzzy
msgid "Blend tree"
msgstr "씬 트리"

#: ../../docs/tutorials/animation/animation_tree.rst:61
msgid ""
"An ``AnimationNodeBlendTree`` can contain both root and regular nodes used "
"for blending. Nodes are added to the graph from a menu:"
msgstr ""

#: ../../docs/tutorials/animation/animation_tree.rst:65
msgid ""
"All blend trees contain an ``Output`` node by default, and something has to "
"be connected to it in order for animations to play."
msgstr ""

#: ../../docs/tutorials/animation/animation_tree.rst:67
msgid ""
"The easiest way to test this functionality is to connect an ``Animation`` "
"node to it directly:"
msgstr ""

#: ../../docs/tutorials/animation/animation_tree.rst:71
msgid ""
"This will simply play back the animation. Make sure that the "
"``AnimationTree`` is active for something to actually happen."
msgstr ""

#: ../../docs/tutorials/animation/animation_tree.rst:73
msgid "Following is a short description of available nodes:"
msgstr ""

#: ../../docs/tutorials/animation/animation_tree.rst:76
msgid "Blend2 / Blend3"
msgstr ""

#: ../../docs/tutorials/animation/animation_tree.rst:78
msgid ""
"These nodes will blend between two or three inputs by a user-specified blend "
"value:"
msgstr ""

#: ../../docs/tutorials/animation/animation_tree.rst:82
msgid "For more complex blending, it is advised to use blend spaces instead."
msgstr ""

#: ../../docs/tutorials/animation/animation_tree.rst:84
msgid ""
"Blending can also use filters, i.e. you can control individually which "
"tracks go through the blend function. This is very useful for layering "
"animations on top of each other."
msgstr ""

#: ../../docs/tutorials/animation/animation_tree.rst:90
msgid "OneShot"
msgstr ""

#: ../../docs/tutorials/animation/animation_tree.rst:92
msgid ""
"This node will execute a sub-animation and return once it finishes. Blend "
"times for fading in and out can be customized, as well as filters."
msgstr ""

#: ../../docs/tutorials/animation/animation_tree.rst:97
msgid "Seek"
msgstr ""

#: ../../docs/tutorials/animation/animation_tree.rst:99
msgid ""
"This node can be used to cause a seek command to happen to any sub-children "
"of the graph. After setting the time, this value returns to -1."
msgstr ""

#: ../../docs/tutorials/animation/animation_tree.rst:102
#, fuzzy
msgid "TimeScale"
msgstr "타이머(Timer) 예제"

#: ../../docs/tutorials/animation/animation_tree.rst:104
msgid ""
"Allows scaling the speed of the animation (or reverse it) in any children "
"nodes. Setting it to 0 will pause the animation."
msgstr ""

#: ../../docs/tutorials/animation/animation_tree.rst:107
#, fuzzy
msgid "Transition"
msgstr "변환"

#: ../../docs/tutorials/animation/animation_tree.rst:109
msgid ""
"Very simple state machine (when you don't want to cope with a "
"``StateMachine`` node). Animations can be connected to the outputs and "
"transition times can be specified."
msgstr ""

#: ../../docs/tutorials/animation/animation_tree.rst:112
msgid "BlendSpace2D"
msgstr ""

#: ../../docs/tutorials/animation/animation_tree.rst:114
msgid ""
"``BlendSpace2D`` is a node to do advanced blending in two dimensions. Points "
"are added to a two dimensional space and then a position can be controlled "
"to determine blending:"
msgstr ""

#: ../../docs/tutorials/animation/animation_tree.rst:119
msgid ""
"The ranges in X and Y can be controlled (and labeled for convenience). By "
"default, points can be placed anywhere (just right-click on the coordinate "
"system or use the *add point* button) and triangles will be generated "
"automatically using Delaunay."
msgstr ""

#: ../../docs/tutorials/animation/animation_tree.rst:124
msgid ""
"It is also possible to draw the triangles manually by disabling the *auto "
"triangle* option, though this is rarely necessary:"
msgstr ""

#: ../../docs/tutorials/animation/animation_tree.rst:128
msgid ""
"Finally, it is possible to change the blend mode. By default, blending "
"happens by interpolating points inside the closest triangle. When dealing "
"with 2D animations (frame by frame), you may want to switch to *Discrete* "
"mode. Alternatively, if you want to keep the current play position when "
"switching between discrete animations, there is a *Carry* mode. This mode "
"can be changed in the *Blend* menu:"
msgstr ""

#: ../../docs/tutorials/animation/animation_tree.rst:136
msgid "BlendSpace1D"
msgstr ""

#: ../../docs/tutorials/animation/animation_tree.rst:138
msgid ""
"This is similar to 2D blend spaces, but in one dimension (so triangles are "
"not needed)."
msgstr ""

#: ../../docs/tutorials/animation/animation_tree.rst:141
msgid "StateMachine"
msgstr ""

#: ../../docs/tutorials/animation/animation_tree.rst:143
msgid ""
"This node is a relatively simple state machine. Root nodes can be created "
"and connected via lines. States are connected via *Transitions*, which are "
"connections with special properties. Transitions are uni-directional, but "
"two can be used to connect in both ways."
msgstr ""

#: ../../docs/tutorials/animation/animation_tree.rst:148
#, fuzzy
msgid "There are many types of transitions:"
msgstr "전환(transition) 유형"

#: ../../docs/tutorials/animation/animation_tree.rst:152
msgid ""
"*Immediate*: Will switch to the next state immediately. The current state "
"will end and blend into the beginning of the new one."
msgstr ""

#: ../../docs/tutorials/animation/animation_tree.rst:153
msgid ""
"*Sync*: Will switch to the next state immediately, but will seek the new "
"state to the playback position of the old state."
msgstr ""

#: ../../docs/tutorials/animation/animation_tree.rst:154
msgid ""
"*At End*: Will wait for the current state playback to end, then switch to "
"the beginning of the next state animation."
msgstr ""

#: ../../docs/tutorials/animation/animation_tree.rst:156
msgid ""
"Transitions also have a few properties. Click any transition and it will be "
"displayed in the inspector dock:"
msgstr ""

#: ../../docs/tutorials/animation/animation_tree.rst:160
msgid ""
"*Switch Mode* is the transition type (see above), it can be modified after "
"creation here."
msgstr ""

#: ../../docs/tutorials/animation/animation_tree.rst:161
msgid ""
"*Auto Advance* will turn on the transition automatically when this state is "
"reached. This works best with the *At End* switch mode."
msgstr ""

#: ../../docs/tutorials/animation/animation_tree.rst:162
msgid ""
"*Advance Condition* will turn on auto advance when this condition is set. "
"This is a custom text field that can be filled with a variable name. The "
"variable can be modified from code (more on this later)."
msgstr ""

#: ../../docs/tutorials/animation/animation_tree.rst:164
msgid "*Xfade Time* is the time to cross-fade between this state and the next."
msgstr ""

#: ../../docs/tutorials/animation/animation_tree.rst:165
msgid ""
"*Priority* is used together with the ``travel()`` function from code (more "
"on this later). When travelling from a state to another, give more priority "
"to this node."
msgstr ""

#: ../../docs/tutorials/animation/animation_tree.rst:166
msgid ""
"*Disabled* allows to disable this transition (it will not be used during "
"travel or auto advance)."
msgstr ""

#: ../../docs/tutorials/animation/animation_tree.rst:170
#, fuzzy
msgid "Root motion"
msgstr "옵션들 가져오기"

#: ../../docs/tutorials/animation/animation_tree.rst:172
msgid ""
"When working with 3D animations, a popular technique is for animators to use "
"the root skeleton bone to give motion to the rest of the skeleton. This "
"allows animating characters in a way where steps actually match the floor "
"below. It also allows precise interaction with objects during cinematics."
msgstr ""

#: ../../docs/tutorials/animation/animation_tree.rst:175
msgid ""
"When playing back the animation in Godot, it is possible to select this bone "
"as the *root motion track*. Doing so will cancel the bone transformation "
"visually (the animation will stay in place)."
msgstr ""

#: ../../docs/tutorials/animation/animation_tree.rst:180
msgid ""
"Afterwards, the actual motion can be retrieved via the :ref:`AnimationTree "
"<class_AnimationTree>` API as a transform:"
msgstr ""

#: ../../docs/tutorials/animation/animation_tree.rst:191
msgid ""
"This can be fed to functions such as :ref:`KinematicBody.move_and_slide "
"<class_KinematicBody_method_move_and_slide>` to control the character "
"movement."
msgstr ""

#: ../../docs/tutorials/animation/animation_tree.rst:193
msgid ""
"There is also a tool node, ``RootMotionView``, that can be placed in a scene "
"and will act as a custom floor for your character and animations (this node "
"is normally disabled during the game)."
msgstr ""

#: ../../docs/tutorials/animation/animation_tree.rst:200
msgid "Controlling from code"
msgstr ""

#: ../../docs/tutorials/animation/animation_tree.rst:202
msgid ""
"After building the tree and previewing it, the only question remaining is "
"\"How is all this controlled from code?\"."
msgstr ""

#: ../../docs/tutorials/animation/animation_tree.rst:204
msgid ""
"Keep in mind that the animation nodes are just resources and, as such, they "
"are shared between all the instances. Setting values in the nodes directly "
"will affect all instances of the scene that uses this ``AnimationTree``. "
"This has some cool use cases, though, e.g. you can copy and paste parts of "
"your animation tree, or reuse nodes with a complex layout (such as a state "
"machine or blend space) in different animation trees."
msgstr ""

#: ../../docs/tutorials/animation/animation_tree.rst:209
msgid ""
"The actual animation data is contained in the ``AnimationTree`` node and is "
"accessed via properties. Check the \"Parameters\" section of the "
"``AnimationTree`` node to see all the parameters that can be modified in "
"real-time:"
msgstr ""

#: ../../docs/tutorials/animation/animation_tree.rst:214
msgid ""
"This is handy because it makes it possible to animate them from an "
"``AnimationPlayer``, or even the ``AnimationTree`` itself, allowing the "
"realisation of very complex animation logic."
msgstr ""

#: ../../docs/tutorials/animation/animation_tree.rst:217
msgid ""
"To modify these values from code, the property path must be obtained. This "
"is done easily by hovering the mouse over any of the parameters:"
msgstr ""

#: ../../docs/tutorials/animation/animation_tree.rst:221
msgid "Which allows setting them or reading them:"
msgstr ""

#: ../../docs/tutorials/animation/animation_tree.rst:236
msgid "State machine travel"
msgstr ""

#: ../../docs/tutorials/animation/animation_tree.rst:238
msgid ""
"One of the nice features in Godot's ``StateMachine`` implementation is the "
"ability to travel. The graph can be instructed to go from the current state "
"to another one, while visiting all the intermediate ones. This is done via "
"the A\\* algorithm."
msgstr ""

#: ../../docs/tutorials/animation/animation_tree.rst:241
msgid ""
"To use the travel ability, you should first retrieve the :ref:"
"`AnimationNodeStateMachinePlayback "
"<class_AnimationNodeStateMachinePlayback>` object from the ``AnimationTree`` "
"node (it is exported as a property)."
msgstr ""

#: ../../docs/tutorials/animation/animation_tree.rst:254
msgid ""
"Once retrieved, it can be used by calling one of the many functions it "
"offers:"
msgstr ""

#: ../../docs/tutorials/inputs/inputevent.rst:4
msgid "InputEvent"
msgstr ""

#: ../../docs/tutorials/inputs/inputevent.rst:9
msgid ""
"Managing input is usually complex, no matter the OS or platform. To ease "
"this a little, a special built-in type is provided, :ref:`InputEvent "
"<class_InputEvent>`. This datatype can be configured to contain several "
"types of input events. Input events travel through the engine and can be "
"received in multiple locations, depending on the purpose."
msgstr ""

#: ../../docs/tutorials/inputs/inputevent.rst:15
msgid "Here is a quick example, closing your game if the escape key is hit:"
msgstr ""

#: ../../docs/tutorials/inputs/inputevent.rst:34
msgid ""
"However, it is cleaner and more flexible to use the provided :ref:`InputMap "
"<class_InputMap>` feature, which allows you to define input actions and "
"assign them different keys. This way, you can define multiple keys for the "
"same action (e.g. they keyboard escape key and the start button on a "
"gamepad). You can then more easily change this mapping in the project "
"settings without updating your code, and even build a key mapping feature on "
"top of it to allow your game to change the key mapping at runtime!"
msgstr ""

#: ../../docs/tutorials/inputs/inputevent.rst:40
msgid ""
"You can setup your InputMap under **Project > Project Settings > Input Map** "
"and then use those actions like this:"
msgstr ""

#: ../../docs/tutorials/inputs/inputevent.rst:60
msgid "How does it work?"
msgstr ""

#: ../../docs/tutorials/inputs/inputevent.rst:62
msgid ""
"Every input event is originated from the user/player (though it's possible "
"to generate an InputEvent and feed them back to the engine, which is useful "
"for gestures). The OS object for each platform will read events from the "
"device, then feed them to MainLoop. As :ref:`SceneTree <class_SceneTree>` is "
"the default MainLoop implementation, events are fed to it. Godot provides a "
"function to get the current SceneTree object : **get_tree()**."
msgstr ""

#: ../../docs/tutorials/inputs/inputevent.rst:70
msgid ""
"But SceneTree does not know what to do with the event, so it will give it to "
"the viewports, starting by the \"root\" :ref:`Viewport <class_Viewport>` "
"(the first node of the scene tree). Viewport does quite a lot of stuff with "
"the received input, in order:"
msgstr ""

#: ../../docs/tutorials/inputs/inputevent.rst:77
msgid ""
"First of all, the standard :ref:`Node._input() <class_Node_method__input>` "
"function will be called in any node that overrides it (and hasn't disabled "
"input processing with :ref:`Node.set_process_input() "
"<class_Node_method_set_process_input>`). If any function consumes the event, "
"it can call :ref:`SceneTree.set_input_as_handled() "
"<class_SceneTree_method_set_input_as_handled>`, and the event will not "
"spread any more. This ensures that you can filter all events of interest, "
"even before the GUI. For gameplay input, :ref:`Node._unhandled_input() "
"<class_Node_method__unhandled_input>` is generally a better fit, because it "
"allows the GUI to intercept the events."
msgstr ""

#: ../../docs/tutorials/inputs/inputevent.rst:82
msgid ""
"Second, it will try to feed the input to the GUI, and see if any control can "
"receive it. If so, the :ref:`Control <class_Control>` will be called via the "
"virtual function :ref:`Control._gui_input() "
"<class_Control_method__gui_input>` and the signal \"input_event\" will be "
"emitted (this function is re-implementable by script by inheriting from it). "
"If the control wants to \"consume\" the event, it will call :ref:`Control."
"accept_event() <class_Control_method_accept_event>` and the event will not "
"spread any more. Use the :ref:`Control.mouse_filter "
"<class_Control_property_mouse_filter>` property to control whether a :ref:"
"`Control <class_Control>` is notified of mouse events via :ref:`Control."
"_gui_input() <class_Control_method__gui_input>` callback, and whether these "
"events are propagated further."
msgstr ""

#: ../../docs/tutorials/inputs/inputevent.rst:92
msgid ""
"If so far no one consumed the event, the unhandled input callback will be "
"called if overridden (and not disabled with :ref:`Node."
"set_process_unhandled_input() "
"<class_Node_method_set_process_unhandled_input>`). If any function consumes "
"the event, it can call :ref:`SceneTree.set_input_as_handled() "
"<class_SceneTree_method_set_input_as_handled>`, and the event will not "
"spread any more. The unhandled input callback is ideal for full-screen "
"gameplay events, so they are not received when a GUI is active."
msgstr ""

#: ../../docs/tutorials/inputs/inputevent.rst:97
msgid ""
"If no one wanted the event so far, and a :ref:`Camera <class_Camera>` is "
"assigned to the Viewport, a ray to the physics world (in the ray direction "
"from the click) will be cast. If this ray hits an object, it will call the :"
"ref:`CollisionObject._input_event() "
"<class_CollisionObject_method__input_event>` function in the relevant "
"physics object (bodies receive this callback by default, but areas do not. "
"This can be configured through :ref:`Area <class_Area>` properties)."
msgstr ""

#: ../../docs/tutorials/inputs/inputevent.rst:103
msgid ""
"Finally, if the event was unhandled, it will be passed to the next Viewport "
"in the tree, otherwise it will be ignored."
msgstr ""

#: ../../docs/tutorials/inputs/inputevent.rst:106
msgid ""
"When sending events to all listening nodes within a scene, the viewport will "
"do so in a reverse depth-first order: Starting with the node at the bottom "
"of the scene tree, and ending at the root node:"
msgstr ""

#: ../../docs/tutorials/inputs/inputevent.rst:112
msgid ""
"GUI events also travel up the scene tree but, since these events target "
"specific Controls, only direct ancestors of the targeted Control node "
"receive the event."
msgstr ""

#: ../../docs/tutorials/inputs/inputevent.rst:115
msgid ""
"In accordance with Godot's node-based design, this enables specialized child "
"nodes to handle and consume particular events, while their ancestors, and "
"ultimately the scene root, can provide more generalized behaviour if needed."
msgstr ""

#: ../../docs/tutorials/inputs/inputevent.rst:121
msgid "Anatomy of an InputEvent"
msgstr ""

#: ../../docs/tutorials/inputs/inputevent.rst:123
msgid ""
":ref:`InputEvent <class_InputEvent>` is just a base built-in type, it does "
"not represent anything and only contains some basic information, such as "
"event ID (which is increased for each event), device index, etc."
msgstr ""

#: ../../docs/tutorials/inputs/inputevent.rst:127
msgid ""
"There are several specialised types of InputEvent, described in the table "
"below:"
msgstr ""

#: ../../docs/tutorials/inputs/inputevent.rst:130
msgid "Event"
msgstr ""

#: ../../docs/tutorials/inputs/inputevent.rst:130
msgid "Type Index"
msgstr ""

#: ../../docs/tutorials/inputs/inputevent.rst:132
msgid ":ref:`InputEvent <class_InputEvent>`"
msgstr ""

#: ../../docs/tutorials/inputs/inputevent.rst:132
msgid "NONE"
msgstr ""

#: ../../docs/tutorials/inputs/inputevent.rst:132
msgid "Empty Input Event."
msgstr ""

#: ../../docs/tutorials/inputs/inputevent.rst:134
msgid ":ref:`InputEventKey <class_InputEventKey>`"
msgstr ""

#: ../../docs/tutorials/inputs/inputevent.rst:134
msgid "KEY"
msgstr ""

#: ../../docs/tutorials/inputs/inputevent.rst:134
msgid "Contains a scancode and unicode value, as well as modifiers."
msgstr ""

#: ../../docs/tutorials/inputs/inputevent.rst:137
msgid ":ref:`InputEventMouseButton <class_InputEventMouseButton>`"
msgstr ""

#: ../../docs/tutorials/inputs/inputevent.rst:137
msgid "MOUSE_BUTTON"
msgstr ""

#: ../../docs/tutorials/inputs/inputevent.rst:137
msgid "Contains click information, such as button, modifiers, etc."
msgstr ""

#: ../../docs/tutorials/inputs/inputevent.rst:140
msgid ":ref:`InputEventMouseMotion <class_InputEventMouseMotion>`"
msgstr ""

#: ../../docs/tutorials/inputs/inputevent.rst:140
msgid "MOUSE_MOTION"
msgstr ""

#: ../../docs/tutorials/inputs/inputevent.rst:140
msgid ""
"Contains motion information, such as relative, absolute positions and speed."
msgstr ""

#: ../../docs/tutorials/inputs/inputevent.rst:143
msgid ":ref:`InputEventJoypadMotion <class_InputEventJoypadMotion>`"
msgstr ""

#: ../../docs/tutorials/inputs/inputevent.rst:143
msgid "JOYSTICK_MOTION"
msgstr ""

#: ../../docs/tutorials/inputs/inputevent.rst:143
msgid "Contains Joystick/Joypad analog axis information."
msgstr ""

#: ../../docs/tutorials/inputs/inputevent.rst:146
msgid ":ref:`InputEventJoypadButton <class_InputEventJoypadButton>`"
msgstr ""

#: ../../docs/tutorials/inputs/inputevent.rst:146
msgid "JOYSTICK_BUTTON"
msgstr ""

#: ../../docs/tutorials/inputs/inputevent.rst:146
msgid "Contains Joystick/Joypad button information."
msgstr ""

#: ../../docs/tutorials/inputs/inputevent.rst:149
msgid ":ref:`InputEventScreenTouch <class_InputEventScreenTouch>`"
msgstr ""

#: ../../docs/tutorials/inputs/inputevent.rst:149
msgid "SCREEN_TOUCH"
msgstr ""

#: ../../docs/tutorials/inputs/inputevent.rst:149
msgid ""
"Contains multi-touch press/release information. (only available on mobile "
"devices)"
msgstr ""

#: ../../docs/tutorials/inputs/inputevent.rst:153
msgid ":ref:`InputEventScreenDrag <class_InputEventScreenDrag>`"
msgstr ""

#: ../../docs/tutorials/inputs/inputevent.rst:153
msgid "SCREEN_DRAG"
msgstr ""

#: ../../docs/tutorials/inputs/inputevent.rst:153
msgid ""
"Contains multi-touch drag information. (only available on mobile devices)"
msgstr ""

#: ../../docs/tutorials/inputs/inputevent.rst:156
msgid ":ref:`InputEventAction <class_InputEventAction>`"
msgstr ""

#: ../../docs/tutorials/inputs/inputevent.rst:156
msgid "SCREEN_ACTION"
msgstr ""

#: ../../docs/tutorials/inputs/inputevent.rst:156
msgid ""
"Contains a generic action. These events are often generated by the "
"programmer as feedback. (more on this below)"
msgstr ""

#: ../../docs/tutorials/inputs/inputevent.rst:162
msgid "Actions"
msgstr ""

#: ../../docs/tutorials/inputs/inputevent.rst:164
msgid ""
"An InputEvent may or may not represent a pre-defined action. Actions are "
"useful because they abstract the input device when programming the game "
"logic. This allows for:"
msgstr ""

#: ../../docs/tutorials/inputs/inputevent.rst:168
msgid ""
"The same code to work on different devices with different inputs (e.g., "
"keyboard on PC, Joypad on console)."
msgstr ""

#: ../../docs/tutorials/inputs/inputevent.rst:170
msgid "Input to be reconfigured at run-time."
msgstr ""

#: ../../docs/tutorials/inputs/inputevent.rst:172
msgid ""
"Actions can be created from the Project Settings menu in the Actions tab."
msgstr ""

#: ../../docs/tutorials/inputs/inputevent.rst:175
msgid ""
"Any event has the methods :ref:`InputEvent.is_action() "
"<class_InputEvent_method_is_action>`, :ref:`InputEvent.is_pressed() "
"<class_InputEvent_method_is_pressed>` and :ref:`InputEvent "
"<class_InputEvent>`."
msgstr ""

#: ../../docs/tutorials/inputs/inputevent.rst:178
msgid ""
"Alternatively, it may be desired to supply the game back with an action from "
"the game code (a good example of this is detecting gestures). The Input "
"singleton has a method for this: :ref:`Input.parse_input_event() "
"<class_input_method_parse_input_event>`. You would normally use it like this:"
msgstr ""

#: ../../docs/tutorials/inputs/inputevent.rst:203
#: ../../docs/tutorials/inputs/input_examples.rst:140
msgid "InputMap"
msgstr ""

#: ../../docs/tutorials/inputs/inputevent.rst:205
msgid ""
"Customizing and re-mapping input from code is often desired. If your whole "
"workflow depends on actions, the :ref:`InputMap <class_InputMap>` singleton "
"is ideal for reassigning or creating different actions at run-time. This "
"singleton is not saved (must be modified manually) and its state is run from "
"the project settings (project.godot). So any dynamic system of this type "
"needs to store settings in the way the programmer best sees fit."
msgstr ""

#: ../../docs/tutorials/inputs/input_examples.rst:4
#, fuzzy
msgid "Input examples"
msgstr "예:"

#: ../../docs/tutorials/inputs/input_examples.rst:9
msgid ""
"In this tutorial, you'll learn how to use Godot's :ref:`InputEvent "
"<class_InputEvent>` system to capture player input. There are many different "
"types of input your game may use - keyboard, gamepad, mouse, etc. - and many "
"different ways to turn those inputs into actions in your game. This document "
"will show you some of the most common scenarios, which you can use as "
"starting points for your own projects."
msgstr ""

#: ../../docs/tutorials/inputs/input_examples.rst:16
msgid ""
"For a detailed overview of how Godot's input event system works, see :ref:"
"`doc_inputevent`."
msgstr ""

#: ../../docs/tutorials/inputs/input_examples.rst:20
msgid "Events versus polling"
msgstr ""

#: ../../docs/tutorials/inputs/input_examples.rst:22
msgid ""
"Sometimes you want your game to respond to a certain input event - pressing "
"the \"jump\" button, for example. For other situations, you might want "
"something to happen as long as a key is pressed, such as movement. In the "
"first case, you can use the ``_input()`` function, which will be called "
"whenever an input event occurs. In the second case, Godot provides the :ref:"
"`Input <class_Input>` singleton, which you can use to query the state of an "
"input."
msgstr ""

#: ../../docs/tutorials/inputs/input_examples.rst:29
#: ../../docs/tutorials/platform/services_for_ios.rst:399
msgid "Examples:"
msgstr ""

#: ../../docs/tutorials/inputs/input_examples.rst:62
msgid ""
"This gives you the flexibility to mix-and-match the type of input processing "
"you do."
msgstr ""

#: ../../docs/tutorials/inputs/input_examples.rst:65
msgid ""
"For the remainder of this tutorial, we'll focus on capturing individual "
"events in ``_input()``."
msgstr ""

#: ../../docs/tutorials/inputs/input_examples.rst:69
#: ../../docs/tutorials/gui/custom_gui_controls.rst:118
msgid "Input events"
msgstr ""

#: ../../docs/tutorials/inputs/input_examples.rst:71
msgid ""
"Input events are objects that inherit from :ref:`InputEvent "
"<class_InputEvent>`. Depending on the event type, the object will contain "
"specific properties related to that event. To see what events actually look "
"like, add a Node and attach the following script:"
msgstr ""

#: ../../docs/tutorials/inputs/input_examples.rst:91
msgid ""
"As you press keys, move the mouse, and perform other inputs, you'll see each "
"event scroll by in the output window. Here's an example of the output:"
msgstr ""

#: ../../docs/tutorials/inputs/input_examples.rst:105
msgid ""
"As you can see, the results are very different for the different types of "
"input. Key events are even printed as their key symbols. For example, let's "
"consider :ref:`InputEventMouseButton <class_InputEventMouseButton>`. It "
"inherits from the following classes:"
msgstr ""

#: ../../docs/tutorials/inputs/input_examples.rst:109
msgid ""
":ref:`InputEvent <class_InputEvent>` - the base class for all input events"
msgstr ""

#: ../../docs/tutorials/inputs/input_examples.rst:110
msgid ""
":ref:`InputEventWithModifiers <class_InputEventWithModifiers>` - adds the "
"ability to check if modifiers are pressed, such as :kbd:`Shift` or :kbd:"
"`Alt`."
msgstr ""

#: ../../docs/tutorials/inputs/input_examples.rst:111
msgid ""
":ref:`InputEventMouse <class_InputEventMouse>` - adds mouse event "
"properties, such as ``position``"
msgstr ""

#: ../../docs/tutorials/inputs/input_examples.rst:112
msgid ""
":ref:`InputEventMouseButton <class_InputEventMouseButton>` - contains the "
"index of the button that was pressed, whether it was a double-click, etc."
msgstr ""

#: ../../docs/tutorials/inputs/input_examples.rst:114
msgid ""
"It's a good idea to keep the class reference open while you're working with "
"events so you can check the event type's available properties and methods."
msgstr ""

#: ../../docs/tutorials/inputs/input_examples.rst:118
msgid ""
"You can encounter errors if you try to access a property on an input type "
"that doesn't contain it - calling ``position`` on ``InputEventKey`` for "
"example. To avoid this, make sure to test the event type first:"
msgstr ""

#: ../../docs/tutorials/inputs/input_examples.rst:142
msgid ""
"The :ref:`InputMap <class_InputMap>` is the most flexible way to handle a "
"variety of inputs. You use this by creating named input *actions*, to which "
"you can assign any number of input events, such as keypresses or mouse "
"clicks. A new Godot project includes a number of default actions already "
"defined. To see them, and to add your own, open Project -> Project Settings "
"and select the InputMap tab:"
msgstr ""

#: ../../docs/tutorials/inputs/input_examples.rst:152
#, fuzzy
msgid "Capturing actions"
msgstr "수학 함수"

#: ../../docs/tutorials/inputs/input_examples.rst:154
msgid ""
"Once you've defined your actions, you can process them in your scripts using "
"``is_action_pressed()`` and ``is_action_released()`` by passing the name of "
"the action you're looking for:"
msgstr ""

#: ../../docs/tutorials/inputs/input_examples.rst:176
#, fuzzy
msgid "Keyboard events"
msgstr "키보드 단축키"

#: ../../docs/tutorials/inputs/input_examples.rst:178
msgid ""
"Keyboard events are captured in :ref:`InputEventKey <class_InputEventKey>`. "
"While it's recommended to use input actions instead, there may be cases "
"where you want to specifically look at key events. For this example, let's "
"check for the :kbd:`T`:"
msgstr ""

#: ../../docs/tutorials/inputs/input_examples.rst:204
#: ../../docs/tutorials/inputs/input_examples.rst:242
msgid ""
"See :ref:`@GlobalScope_KeyList <enum_@GlobalScope_KeyList>` for a list of "
"scancode constants."
msgstr ""

#: ../../docs/tutorials/inputs/input_examples.rst:208
#, fuzzy
msgid "Keyboard modifiers"
msgstr "플레이스 홀더 수정자"

#: ../../docs/tutorials/inputs/input_examples.rst:210
msgid ""
"Modifier properties are inherited from :ref:`InputEventWithModifiers "
"<class_InputEventWithModifiers>`. This  allows you to check for modifier "
"combinations using boolean properties. Let's imagine you want one thing to "
"happen when the :kbd:`T` is pressed, but something different when it's :kbd:"
"`Shift + T`:"
msgstr ""

#: ../../docs/tutorials/inputs/input_examples.rst:246
msgid "Mouse events"
msgstr ""

#: ../../docs/tutorials/inputs/input_examples.rst:248
msgid ""
"Mouse events stem from the :ref:`InputEventMouse <class_InputEventMouse>` "
"class, and are separated into two types: :ref:`InputEventMouseButton "
"<class_InputEventMouseButton>` and :ref:`InputEventMouseMotion "
"<class_InputEventMouseMotion>`. Note that this means that all mouse events "
"will contain a ``position`` property."
msgstr ""

#: ../../docs/tutorials/inputs/input_examples.rst:254
msgid "Mouse buttons"
msgstr ""

#: ../../docs/tutorials/inputs/input_examples.rst:256
msgid ""
"Capturing mouse buttons is very similar to handling key events. :ref:"
"`@GlobalScope_ButtonList <enum_@GlobalScope_ButtonList>` contains a list of "
"``BUTTON_*`` constants for each possible button, which will be reported in "
"the event's ``button_index`` property. Note that the scrollwheel also counts "
"as a button - two buttons, to be precise, with both ``BUTTON_WHEEL_UP`` and "
"``BUTTON_WHEEL_DOWN`` being separate events."
msgstr ""

#: ../../docs/tutorials/inputs/input_examples.rst:291
#, fuzzy
msgid "Mouse motion"
msgstr "옵션들 가져오기"

#: ../../docs/tutorials/inputs/input_examples.rst:293
msgid ""
":ref:`InputEventMouseMotion <class_InputEventMouseMotion>` events occur "
"whenever the mouse moves. You can find the move's distance with the "
"``relative`` property."
msgstr ""

#: ../../docs/tutorials/inputs/input_examples.rst:297
msgid ""
"Here's an example using mouse events to drag-and-drop a :ref:`Sprite "
"<class_Sprite>` node:"
msgstr ""

#: ../../docs/tutorials/inputs/input_examples.rst:355
msgid "Touch events"
msgstr ""

#: ../../docs/tutorials/inputs/input_examples.rst:357
msgid ""
"If you are using a touchscreen device, you can generate touch events. :ref:"
"`InputEventScreenTouch <class_InputEventScreenTouch>` is equivalent to a "
"mouse click event, and :ref:`InputEventScreenDrag "
"<class_InputEventScreenDrag>` works much the same as mouse motion."
msgstr ""

#: ../../docs/tutorials/inputs/input_examples.rst:362
msgid ""
"To test your touch events on a non-touchscreen device, open Project Settings "
"and go to the \"Input Devices/Pointing\" section. Enable \"Emulate Touch "
"From Mouse\" and your project will interpret mouse clicks and motion as "
"touch events."
msgstr ""

#: ../../docs/tutorials/inputs/mouse_and_input_coordinates.rst:4
msgid "Mouse and input coordinates"
msgstr ""

#: ../../docs/tutorials/inputs/mouse_and_input_coordinates.rst:9
msgid ""
"The reason for this small tutorial is to clear up many common mistakes about "
"input coordinates, obtaining mouse position and screen resolution, etc."
msgstr ""

#: ../../docs/tutorials/inputs/mouse_and_input_coordinates.rst:14
msgid "Hardware display coordinates"
msgstr ""

#: ../../docs/tutorials/inputs/mouse_and_input_coordinates.rst:16
msgid ""
"Using hardware coordinates makes sense in the case of writing complex UIs "
"meant to run on PC, such as editors, MMOs, tools, etc. However, it does not "
"make as much sense outside of that scope."
msgstr ""

#: ../../docs/tutorials/inputs/mouse_and_input_coordinates.rst:21
msgid "Viewport display coordinates"
msgstr ""

#: ../../docs/tutorials/inputs/mouse_and_input_coordinates.rst:23
msgid ""
"Godot uses viewports to display content, and viewports can be scaled by "
"several options (see :ref:`doc_multiple_resolutions` tutorial). Use, then, "
"the functions in nodes to obtain the mouse coordinates and viewport size, "
"for example:"
msgstr ""

#: ../../docs/tutorials/inputs/mouse_and_input_coordinates.rst:55
msgid ""
"Alternatively, it's possible to ask the viewport for the mouse position:"
msgstr ""

#: ../../docs/tutorials/inputs/mouse_and_input_coordinates.rst:66
msgid ""
"When the mouse mode is set to ``Input.MOUSE_MODE_CAPTURED``, the ``event."
"position`` value from ``InputEventMouseMotion`` is the center of the screen. "
"Use ``event.relative`` instead of ``event.position`` and ``event.speed`` to "
"process mouse movement and position changes."
msgstr ""

#: ../../docs/tutorials/inputs/custom_mouse_cursor.rst:4
msgid "Customizing mouse cursor"
msgstr ""

#: ../../docs/tutorials/inputs/custom_mouse_cursor.rst:6
msgid ""
"You might want to change the appearance of the mouse cursor in your game in "
"order to suit the overall design. There are two ways to customize the mouse "
"cursor:"
msgstr ""

#: ../../docs/tutorials/inputs/custom_mouse_cursor.rst:8
#: ../../docs/tutorials/inputs/custom_mouse_cursor.rst:14
msgid "Using project settings"
msgstr ""

#: ../../docs/tutorials/inputs/custom_mouse_cursor.rst:9
#: ../../docs/tutorials/inputs/custom_mouse_cursor.rst:26
msgid "Using a script"
msgstr ""

#: ../../docs/tutorials/inputs/custom_mouse_cursor.rst:11
msgid ""
"Using project settings is a simpler (but more limited) way to customize the "
"mouse cursor. The second way is more customizable, but involves scripting."
msgstr ""

#: ../../docs/tutorials/inputs/custom_mouse_cursor.rst:16
msgid ""
"Open project settings, go to Display>Mouse Cursor. You will see Custom Image "
"and Custom Image Hotspot."
msgstr ""

#: ../../docs/tutorials/inputs/custom_mouse_cursor.rst:20
msgid ""
"Custom Image is the desired image that you would like to set as the mouse "
"cursor. Custom Hotspot is the point in the image that you would like to use "
"as the cursor's detection point."
msgstr ""

#: ../../docs/tutorials/inputs/custom_mouse_cursor.rst:23
msgid "The custom image **must** be less than 256x256."
msgstr ""

#: ../../docs/tutorials/inputs/custom_mouse_cursor.rst:28
msgid "Create a Node and attach the following script."
msgstr ""

#: ../../docs/tutorials/inputs/custom_mouse_cursor.rst:64
msgid ""
"Check :ref:`Input.set_custom_mouse_cursor() "
"<class_Input_method_set_custom_mouse_cursor>`."
msgstr ""

#: ../../docs/tutorials/inputs/custom_mouse_cursor.rst:68
msgid "Demo project"
msgstr ""

#: ../../docs/tutorials/inputs/custom_mouse_cursor.rst:70
msgid ""
"Find out more by studying this demo project: https://github.com/"
"guilhermefelipecgs/custom_hardware_cursor"
msgstr ""

#: ../../docs/tutorials/inputs/custom_mouse_cursor.rst:74
msgid "Cursor list"
msgstr ""

#: ../../docs/tutorials/inputs/custom_mouse_cursor.rst:76
msgid ""
"As documented in the :ref:`Input <class_Input>` class (see the "
"**CursorShape** enum), there are multiple mouse cursors you can define. "
"Which ones you want to use depends on your use case."
msgstr ""

#: ../../docs/tutorials/io/index.rst:2
msgid "I/O"
msgstr ""

#: ../../docs/tutorials/io/background_loading.rst:4
msgid "Background loading"
msgstr ""

#: ../../docs/tutorials/io/background_loading.rst:6
msgid ""
"When switching the main scene of your game (e.g. going to a new level), you "
"might want to show a loading screen with some indication that progress is "
"being made. The main load method (``ResourceLoader::load`` or just ``load`` "
"from GDScript) blocks your thread, making your game appear frozen and "
"unresponsive while the resource is being loaded. This document discusses the "
"alternative of using the ``ResourceInteractiveLoader`` class for smoother "
"load screens."
msgstr ""

#: ../../docs/tutorials/io/background_loading.rst:15
msgid "ResourceInteractiveLoader"
msgstr ""

#: ../../docs/tutorials/io/background_loading.rst:17
msgid ""
"The ``ResourceInteractiveLoader`` class allows you to load a resource in "
"stages. Every time the method ``poll`` is called, a new stage is loaded, and "
"control is returned to the caller. Each stage is generally a sub-resource "
"that is loaded by the main resource. For example, if you're loading a scene "
"that loads 10 images, each image will be one stage."
msgstr ""

#: ../../docs/tutorials/io/background_loading.rst:24
#: ../../docs/community/contributing/updating_the_class_reference.rst:231
msgid "Usage"
msgstr "사용"

#: ../../docs/tutorials/io/background_loading.rst:26
msgid "Usage is generally as follows"
msgstr ""

#: ../../docs/tutorials/io/background_loading.rst:29
msgid "Obtaining a ResourceInteractiveLoader"
msgstr ""

#: ../../docs/tutorials/io/background_loading.rst:35
msgid ""
"This method will give you a ResourceInteractiveLoader that you will use to "
"manage the load operation."
msgstr ""

#: ../../docs/tutorials/io/background_loading.rst:39
msgid "Polling"
msgstr ""

#: ../../docs/tutorials/io/background_loading.rst:45
msgid ""
"Use this method to advance the progress of the load. Each call to ``poll`` "
"will load the next stage of your resource. Keep in mind that each stage is "
"one entire \"atomic\" resource, such as an image, or a mesh, so it will take "
"several frames to load."
msgstr ""

#: ../../docs/tutorials/io/background_loading.rst:50
msgid ""
"Returns ``OK`` on no errors, ``ERR_FILE_EOF`` when loading is finished. Any "
"other return value means there was an error and loading has stopped."
msgstr ""

#: ../../docs/tutorials/io/background_loading.rst:54
msgid "Load progress (optional)"
msgstr ""

#: ../../docs/tutorials/io/background_loading.rst:56
msgid "To query the progress of the load, use the following methods:"
msgstr ""

#: ../../docs/tutorials/io/background_loading.rst:63
msgid ""
"``get_stage_count`` returns the total number of stages to load. "
"``get_stage`` returns the current stage being loaded."
msgstr ""

#: ../../docs/tutorials/io/background_loading.rst:67
msgid "Forcing completion (optional)"
msgstr ""

#: ../../docs/tutorials/io/background_loading.rst:73
msgid ""
"Use this method if you need to load the entire resource in the current "
"frame, without any more steps."
msgstr ""

#: ../../docs/tutorials/io/background_loading.rst:77
msgid "Obtaining the resource"
msgstr ""

#: ../../docs/tutorials/io/background_loading.rst:83
msgid ""
"If everything goes well, use this method to retrieve your loaded resource."
msgstr ""

#: ../../docs/tutorials/io/background_loading.rst:89
msgid ""
"This example demonstrates how to load a new scene. Consider it in the "
"context of the :ref:`doc_singletons_autoload` example."
msgstr ""

#: ../../docs/tutorials/io/background_loading.rst:92
msgid ""
"First, we set up some variables and initialize the ``current_scene`` with "
"the main scene of the game:"
msgstr ""

#: ../../docs/tutorials/io/background_loading.rst:106
msgid ""
"The function ``goto_scene`` is called from the game when the scene needs to "
"be switched. It requests an interactive loader, and calls "
"``set_process(true)`` to start polling the loader in the ``_process`` "
"callback. It also starts a \"loading\" animation, which could show a "
"progress bar or loading screen."
msgstr ""

#: ../../docs/tutorials/io/background_loading.rst:128
msgid ""
"``_process`` is where the loader is polled. ``poll`` is called, and then we "
"deal with the return value from that call. ``OK`` means keep polling, "
"``ERR_FILE_EOF`` means loading is done, anything else means there was an "
"error. Also note we skip one frame (via ``wait_frames``, set on the "
"``goto_scene`` function) to allow the loading screen to show up."
msgstr ""

#: ../../docs/tutorials/io/background_loading.rst:134
msgid ""
"Note how we use ``OS.get_ticks_msec`` to control how long we block the "
"thread. Some stages might load fast, which means we might be able to cram "
"more than one call to ``poll`` in one frame; some might take way more than "
"your value for ``time_max``, so keep in mind we won't have precise control "
"over the timings."
msgstr ""

#: ../../docs/tutorials/io/background_loading.rst:170
msgid ""
"Some extra helper functions. ``update_progress`` updates a progress bar, or "
"can also update a paused animation (the animation represents the entire load "
"process from beginning to end). ``set_new_scene`` puts the newly loaded "
"scene on the tree. Because it's a scene being loaded, ``instance()`` needs "
"to be called on the resource obtained from the loader."
msgstr ""

#: ../../docs/tutorials/io/background_loading.rst:195
#: ../../docs/tutorials/threads/using_multiple_threads.rst:4
msgid "Using multiple threads"
msgstr ""

#: ../../docs/tutorials/io/background_loading.rst:197
msgid ""
"ResourceInteractiveLoader can be used from multiple threads. A couple of "
"things to keep in mind if you attempt it:"
msgstr ""

#: ../../docs/tutorials/io/background_loading.rst:201
msgid "Use a semaphore"
msgstr ""

#: ../../docs/tutorials/io/background_loading.rst:203
msgid ""
"While your thread waits for the main thread to request a new resource, use a "
"``Semaphore`` to sleep (instead of a busy loop or anything similar)."
msgstr ""

#: ../../docs/tutorials/io/background_loading.rst:207
msgid "Not blocking main thread during the polling"
msgstr ""

#: ../../docs/tutorials/io/background_loading.rst:209
msgid ""
"If you have a mutex to allow calls from the main thread to your loader "
"class, don't lock the main thread while you call ``poll`` on your loader "
"class. When a resource is done loading, it might require some resources from "
"the low-level APIs (VisualServer, etc), which might need to lock the main "
"thread to acquire them. This might cause a deadlock if the main thread is "
"waiting for your mutex while your thread is waiting to load a resource."
msgstr ""

#: ../../docs/tutorials/io/background_loading.rst:218
msgid "Example class"
msgstr ""

#: ../../docs/tutorials/io/background_loading.rst:220
msgid ""
"You can find an example class for loading resources in threads here: :"
"download:`resource_queue.gd <files/resource_queue.gd>`. Usage is as follows:"
msgstr ""

#: ../../docs/tutorials/io/background_loading.rst:227
msgid "Call after you instance the class to start the thread."
msgstr ""

#: ../../docs/tutorials/io/background_loading.rst:233
msgid ""
"Queue a resource. Use optional argument \"p_in_front\" to put it in front of "
"the queue."
msgstr ""

#: ../../docs/tutorials/io/background_loading.rst:240
msgid "Remove a resource from the queue, discarding any loading done."
msgstr ""

#: ../../docs/tutorials/io/background_loading.rst:246
msgid ""
"Returns ``true`` if a resource is fully loaded and ready to be retrieved."
msgstr ""

#: ../../docs/tutorials/io/background_loading.rst:252
msgid ""
"Get the progress of a resource. Returns -1 if there was an error (for "
"example if the resource is not in the queue), or a number between 0.0 and "
"1.0 with the progress of the load. Use mostly for cosmetic purposes "
"(updating progress bars, etc), use ``is_ready`` to find out if a resource is "
"actually ready."
msgstr ""

#: ../../docs/tutorials/io/background_loading.rst:262
msgid ""
"Returns the fully loaded resource, or ``null`` on error. If the resource is "
"not fully loaded (``is_ready`` returns ``false``), it will block your thread "
"and finish the load. If the resource is not on the queue, it will call "
"``ResourceLoader::load`` to load it normally and return it."
msgstr ""

#: ../../docs/tutorials/io/background_loading.rst:298
msgid ""
"**Note**: this code, in its current form, is not tested in real world "
"scenarios. Ask punto on IRC (#godotengine on irc.freenode.net) for help."
msgstr ""

#: ../../docs/tutorials/io/data_paths.rst:4
msgid "Data paths"
msgstr ""

#: ../../docs/tutorials/io/data_paths.rst:7
msgid "Path separators"
msgstr ""

#: ../../docs/tutorials/io/data_paths.rst:9
msgid ""
"For the sake of supporting as many platforms as possible, Godot only accepts "
"UNIX-style path separators (``/``). These work on all platforms, including "
"Windows."
msgstr ""

#: ../../docs/tutorials/io/data_paths.rst:13
msgid "A path like ``C:\\Projects`` will become ``C:/Projects``."
msgstr ""

#: ../../docs/tutorials/io/data_paths.rst:18
msgid ""
"As mentioned in the :ref:`doc_command_line_tutorial`, Godot considers that a "
"project exists in any given folder that contains a ``project.godot`` text "
"file, even if such file is empty."
msgstr ""

#: ../../docs/tutorials/io/data_paths.rst:22
msgid ""
"Accessing project files can be done by opening any path with ``res://`` as a "
"base. For example, a texture located in the root of the project folder may "
"be opened from the following path: ``res://some_texture.png``."
msgstr ""

#: ../../docs/tutorials/io/data_paths.rst:27
msgid "User path (persistent data)"
msgstr ""

#: ../../docs/tutorials/io/data_paths.rst:29
msgid ""
"While the project is running, it is a common scenario that the resource path "
"will be read-only, due to it being inside a package, self-contained "
"executable, or system-wide install location."
msgstr ""

#: ../../docs/tutorials/io/data_paths.rst:33
msgid ""
"Storing persistent files in such scenarios should be done by using the "
"``user://`` prefix, for example: ``user://game_save.txt``."
msgstr ""

#: ../../docs/tutorials/io/data_paths.rst:36
msgid ""
"On some devices (for example, mobile and consoles), this path is unique to "
"the project. On desktop operating systems, the engine uses the typical ``~/."
"local/share/godot/app_userdata/Name`` on macOS and Linux, and ``%APPDATA%/"
"Name`` on Windows. ``Name`` is taken from the application name defined in "
"the Project Settings, but it can be overridden on a per-platform basis "
"using :ref:`feature tags <doc_feature_tags>`."
msgstr ""

#: ../../docs/tutorials/io/data_paths.rst:45
#, fuzzy
msgid "Editor data paths"
msgstr "편집기 매뉴얼"

#: ../../docs/tutorials/io/data_paths.rst:47
msgid ""
"The editor uses different paths for user data, user settings and cache "
"depending on the platform. By default, these paths are:"
msgstr ""

#: ../../docs/tutorials/io/data_paths.rst:53
#, fuzzy
msgid "User data"
msgstr "사용자 경로(User path)"

#: ../../docs/tutorials/io/data_paths.rst:53
#: ../../docs/tutorials/io/data_paths.rst:57
msgid "Windows: ``%APPDATA%\\Godot\\``"
msgstr ""

#: ../../docs/tutorials/io/data_paths.rst:54
#: ../../docs/tutorials/io/data_paths.rst:58
msgid "macOS: ``~/Library/Application Support/Godot/``"
msgstr ""

#: ../../docs/tutorials/io/data_paths.rst:55
msgid "Linux: ``~/.local/share/godot/``"
msgstr ""

#: ../../docs/tutorials/io/data_paths.rst:57
#, fuzzy
msgid "User settings"
msgstr "MultiMesh 설정"

#: ../../docs/tutorials/io/data_paths.rst:59
msgid "Linux: ``~/.config/godot/``"
msgstr ""

#: ../../docs/tutorials/io/data_paths.rst:61
msgid "Cache"
msgstr ""

#: ../../docs/tutorials/io/data_paths.rst:61
msgid "Windows: ``%TEMP%\\Godot\\``"
msgstr ""

#: ../../docs/tutorials/io/data_paths.rst:62
msgid "macOS: ``~/Library/Caches/Godot/``"
msgstr ""

#: ../../docs/tutorials/io/data_paths.rst:63
msgid "Linux: ``~/.cache/godot/``"
msgstr ""

#: ../../docs/tutorials/io/data_paths.rst:66
msgid "**User data** contains export templates and project-specific data."
msgstr ""

#: ../../docs/tutorials/io/data_paths.rst:67
msgid ""
"**User settings** contains editor settings, text editor themes, script "
"templates, etc."
msgstr ""

#: ../../docs/tutorials/io/data_paths.rst:69
msgid ""
"**Cache** contains temporary data. It can safely be removed when Godot is "
"closed."
msgstr ""

#: ../../docs/tutorials/io/data_paths.rst:72
msgid ""
"Godot complies with the `XDG Base Directory Specification <https://"
"specifications.freedesktop.org/basedir-spec/basedir-spec-latest.html>`__ on "
"all platforms. Environment variables can be overridden as per the "
"specification to change the editor (and project) data paths."
msgstr ""

#: ../../docs/tutorials/io/data_paths.rst:77
msgid ""
"If you use `Godot packaged as a Flatpak <https://flathub.org/apps/details/"
"org.godotengine.Godot>`__, the editor data paths will be located in "
"subfolders in ``~/.var/app/org.godotengine.Godot/``."
msgstr ""

#: ../../docs/tutorials/io/data_paths.rst:83
msgid "Self-contained mode"
msgstr ""

#: ../../docs/tutorials/io/data_paths.rst:85
msgid ""
"If you create a file called ``._sc_`` or ``_sc_`` in the same directory as "
"the editor binary, Godot will enable *self-contained mode*. This will make "
"Godot write all user data to a directory named ``editor_data/`` in the same "
"directory as the editor binary. This is useful to create a \"portable\" "
"installation, which can then be placed on an USB drive."
msgstr ""

#: ../../docs/tutorials/io/data_paths.rst:91
msgid ""
"The `Steam release of Godot <https://store.steampowered.com/app/404790/>`__ "
"uses self-contained mode by default."
msgstr ""

#: ../../docs/tutorials/io/saving_games.rst:4
msgid "Saving games"
msgstr ""

#: ../../docs/tutorials/io/saving_games.rst:9
msgid ""
"Save games can be complicated. For example, it may be desirable to store "
"information from multiple objects across multiple levels. Advanced save game "
"systems should allow for additional information about an arbitrary number of "
"objects. This will allow the save function to scale as the game grows more "
"complex."
msgstr ""

#: ../../docs/tutorials/io/saving_games.rst:17
msgid ""
"If you're looking to save user configuration, you can use the :ref:"
"`class_ConfigFile` class for this purpose."
msgstr ""

#: ../../docs/tutorials/io/saving_games.rst:21
msgid "Identify persistent objects"
msgstr ""

#: ../../docs/tutorials/io/saving_games.rst:23
msgid ""
"Firstly, we should identify what objects we want to keep between game "
"sessions and what information we want to keep from those objects. For this "
"tutorial, we will use groups to mark and handle objects to be saved, but "
"other methods are certainly possible."
msgstr ""

#: ../../docs/tutorials/io/saving_games.rst:28
msgid ""
"We will start by adding objects we wish to save to the \"Persist\" group. As "
"in the :ref:`doc_scripting_continued` tutorial, we can do this through "
"either the GUI or script. Let's add the relevant nodes using the GUI:"
msgstr ""

#: ../../docs/tutorials/io/saving_games.rst:34
msgid ""
"Once this is done, when we need to save the game, we can get all objects to "
"save them and then tell them all to save with this script:"
msgstr ""

#: ../../docs/tutorials/io/saving_games.rst:54
msgid "Serializing"
msgstr ""

#: ../../docs/tutorials/io/saving_games.rst:56
msgid ""
"The next step is to serialize the data. This makes it much easier to read "
"from and store to disk. In this case, we're assuming each member of group "
"Persist is an instanced node and thus has a path. GDScript has helper "
"functions for this, such as :ref:`to_json() "
"<class_@GDScript_method_to_json>` and :ref:`parse_json() "
"<class_@GDScript_method_parse_json>`, so we will use a dictionary. Our node "
"needs to contain a save function that returns this data. The save function "
"will look like this:"
msgstr ""

#: ../../docs/tutorials/io/saving_games.rst:119
msgid ""
"This gives us a dictionary with the style ``{ \"variable_name\":"
"value_of_variable }``, which will be useful when loading."
msgstr ""

#: ../../docs/tutorials/io/saving_games.rst:124
msgid "Saving and reading data"
msgstr ""

#: ../../docs/tutorials/io/saving_games.rst:126
msgid ""
"As covered in the :ref:`doc_filesystem` tutorial, we'll need to open a file "
"so we can write to it or read from it. Now that we have a way to call our "
"groups and get their relevant data, let's use :ref:`to_json() "
"<class_@GDScript_method_to_json>` to convert it into an easily stored string "
"and store them in a file. Doing it this way ensures that each line is its "
"own object, so we have an easy way to pull the data out of the file as well."
msgstr ""

#: ../../docs/tutorials/io/saving_games.rst:202
msgid ""
"Game saved! Loading is fairly simple as well. For that, we'll read each "
"line, use parse_json() to read it back to a dict, and then iterate over the "
"dict to read our values. But we'll need to first create the object and we "
"can use the filename and parent values to achieve that. Here is our load "
"function:"
msgstr ""

#: ../../docs/tutorials/io/saving_games.rst:292
msgid ""
"Now we can save and load an arbitrary number of objects laid out almost "
"anywhere across the scene tree! Each object can store different data "
"depending on what it needs to save."
msgstr ""

#: ../../docs/tutorials/io/saving_games.rst:297
msgid "Some notes"
msgstr ""

#: ../../docs/tutorials/io/saving_games.rst:299
msgid ""
"We have glossed over setting up the game state for loading. It's ultimately "
"up to the project creator where much of this logic goes. This is often "
"complicated and will need to be heavily customized based on the needs of the "
"individual project."
msgstr ""

#: ../../docs/tutorials/io/saving_games.rst:304
msgid ""
"Additionally, our implementation assumes no Persist objects are children of "
"other Persist objects. Otherwise, invalid paths would be created. To "
"accommodate nested Persist objects, consider saving objects in stages. Load "
"parent objects first so they are available for the :ref:`add_child() "
"<class_node_method_add_child>` call when child objects are loaded. You will "
"also need a way to link children to parents as the :ref:`NodePath "
"<class_nodepath>` will likely be invalid."
msgstr ""

#: ../../docs/tutorials/io/encrypting_save_games.rst:4
msgid "Encrypting save games"
msgstr ""

#: ../../docs/tutorials/io/encrypting_save_games.rst:9
msgid ""
"Because the world today is not the world of yesterday. A capitalist "
"oligarchy runs the world and forces us to consume in order to keep the gears "
"of this rotten society on track. As such, the biggest market for video game "
"consumption today is the mobile one. It is a market of poor souls forced to "
"compulsively consume digital content in order to forget the misery of their "
"everyday life, commute, or just any other brief free moment they have that "
"they are not using to produce goods or services for the ruling class. These "
"individuals need to keep focusing on their video games (because not doing so "
"will fill them with tremendous existential angst), so they go as far as "
"spending money on them to extend their experience, and their preferred way "
"of doing so is through in-app purchases and virtual currency."
msgstr ""

#: ../../docs/tutorials/io/encrypting_save_games.rst:22
msgid ""
"But what if someone were to find a way to edit the saved games and assign "
"the items and currency without effort? That would be terrible, because it "
"would help players consume the content much faster, and therefore run out of "
"it sooner than expected. If that happens, they will have nothing that avoids "
"them to think, and the tremendous agony of realizing their own irrelevance "
"would again take over their life."
msgstr ""

#: ../../docs/tutorials/io/encrypting_save_games.rst:29
msgid ""
"No, we definitely do not want that to happen, so let's see how to encrypt "
"savegames and protect the world order."
msgstr ""

#: ../../docs/tutorials/io/encrypting_save_games.rst:33
msgid "How?"
msgstr ""

#: ../../docs/tutorials/io/encrypting_save_games.rst:35
msgid ""
"The class :ref:`File <class_File>` can open a file at a location and read/"
"write data (integers, strings and variants). It also supports encryption. To "
"create an encrypted file, a passphrase must be provided, like this:"
msgstr ""

#: ../../docs/tutorials/io/encrypting_save_games.rst:55
msgid ""
"This will make the file unreadable to users, but will still not prevent them "
"from sharing savefiles. To solve this, use the device unique id or some "
"unique user identifier, for example:"
msgstr ""

#: ../../docs/tutorials/io/encrypting_save_games.rst:74
msgid "Note that ``OS.get_unique_id()`` does not work on UWP or HTML5."
msgstr ""

#: ../../docs/tutorials/io/encrypting_save_games.rst:76
msgid "That is all! Thank you for your cooperation, citizen."
msgstr ""

#: ../../docs/tutorials/io/encrypting_save_games.rst:78
msgid ""
"This method cannot really prevent players from editing their savegames "
"locally because, since the encryption key is stored inside the game, the "
"player can still decrypt and edit the file themselves. The only way to "
"prevent this from being possible is to store the save data on a remote "
"server, where players can only make authorized changes to their save data. "
"If your game deals with real money, you need to be doing this anyway."
msgstr ""

#: ../../docs/tutorials/i18n/internationalizing_games.rst:4
msgid "Internationalizing games"
msgstr ""

#: ../../docs/tutorials/i18n/internationalizing_games.rst:9
#, fuzzy
msgid ""
"Sería excelente que el mundo hablara solo un idioma (It would be great if "
"the world spoke only one language). Unfortunately for us developers, that is "
"not the case. While indie or niche games usually do not need localization, "
"games targeting a more massive market often require localization. Godot "
"offers many tools to make this process more straightforward, so this "
"tutorial is more like a collection of tips and tricks."
msgstr ""
"Sería excelente que el mundo hablara solo un idioma(만약 세계가 오직 하나의 "
"언어로 말할수 있었다면 굉장했을 것이다). 불행하게도, 우리 개발자들은 저러한 "
"상황이 아닙니다. 인디게임 혹은 틈새게임은 보통 현지화를 필요로 하지 않습니"
"다. 하지만 훨씬 더큰 시장을 목표로 삼은 게임들은 현지화가 자주 필요합니다. "
"Godot은 이러한것을 더욱 간단하게 진행하도록 만드는 많은 기능들을 제공합니다. "
"따라서 이번 튜토리얼은 팁과 재주의 콜랙숀과 같은 것입니다."

#: ../../docs/tutorials/i18n/internationalizing_games.rst:17
msgid ""
"Localization is usually done by specific studios hired for the job and, "
"despite the huge amount of software and file formats available for this, the "
"most common way to do localization to this day is still with spreadsheets. "
"The process of creating the spreadsheets and importing them is already "
"covered in the :ref:`doc_importing_translations` tutorial, so this one could "
"be seen more like a follow-up to that one."
msgstr ""

#: ../../docs/tutorials/i18n/internationalizing_games.rst:25
msgid ""
"We will be using the official demo as an example; you can `download it from "
"the Asset Library <https://godotengine.org/asset-library/asset/134>`_."
msgstr ""
"예제로써 공식 데모를 이용할 것 입니다.; `애셋라이브러리에서 다운 받을수 있습"
"니다. <https://godotengine.org/asset-library/asset/134>`_."

#: ../../docs/tutorials/i18n/internationalizing_games.rst:29
#, fuzzy
msgid "Configuring the imported translation"
msgstr "번역을 가져와서 구성하기"

#: ../../docs/tutorials/i18n/internationalizing_games.rst:31
msgid ""
"Translations can get updated and re-imported when they change, but they "
"still have to be added to the project. This is done in **Project → Project "
"Settings → Localization**:"
msgstr ""
"번역들은 바뀌었을때 업데이트 되고 다시 임포트 될수 있습니다. 하지만 여전히 프"
"로젝트에 추가해야합니다. 이것은 다음 경로에서 완수됩니다 **Project → Project "
"Settings → Localization**:"

#: ../../docs/tutorials/i18n/internationalizing_games.rst:37
msgid "The above dialog is used to add or remove translations project-wide."
msgstr ""
"위의 대화 상자는 프로젝트 전체적으로 번역을 추가 혹은 제거에 사용합니다."

#: ../../docs/tutorials/i18n/internationalizing_games.rst:40
msgid "Localizing resources"
msgstr "리소스 현지화"

#: ../../docs/tutorials/i18n/internationalizing_games.rst:42
msgid ""
"It is also possible to instruct Godot to use alternate versions of assets "
"(resources) depending on the current language. The **Remaps** tab can be "
"used for this:"
msgstr ""
"또한 이는 Godot을 현재 언어에 의존하는 애셋의 버전을 오가며 사용할 수 있도록 "
"구성하는게 가능합니다. **Remaps** 탭이 이를 위해 사용됩니다:"

#: ../../docs/tutorials/i18n/internationalizing_games.rst:48
msgid ""
"Select the resource to be remapped, then add some alternatives for each "
"locale."
msgstr ""

#: ../../docs/tutorials/i18n/internationalizing_games.rst:52
msgid "Converting keys to text"
msgstr "key들을 text로 컨버팅하기"

#: ../../docs/tutorials/i18n/internationalizing_games.rst:54
msgid ""
"Some controls, such as :ref:`Button <class_Button>` and :ref:`Label "
"<class_Label>`, will automatically fetch a translation if their text matches "
"a translation key. For example, if a label's text is "
"\"MAIN_SCREEN_GREETING1\" and that key exists in the current translation, "
"then the text will automatically be translated."
msgstr ""
":ref:`Button <class_Button>` 그리고 :ref:`Label <class_Label>`과 같은 컨트롤"
"들은 만약 그 안의 text가 번역key와 동일하다면 자동적으로 번역이 적용됩니다. "
"예로 들어, 만약 label의 text가 \"MAIN_SCREEN_GREETING1\" 이고 저 key가 현재 "
"번역에 존재한다면, text는 자동적으로 번역이 될것입니다."

#: ../../docs/tutorials/i18n/internationalizing_games.rst:59
msgid ""
"In code, the :ref:`Object.tr() <class_Object_method_tr>` function can be "
"used. This will just look up the text in the translations and convert it if "
"found:"
msgstr ""
"코드에서는 :ref:`Object.tr() <class_Object_method_tr>` 함수가 사용됩니다. 이"
"것은 번역안에 있는 text를 찾고 발견되면 그것을 변환합니다:"

#: ../../docs/tutorials/i18n/internationalizing_games.rst:69
msgid "Making controls resizable"
msgstr ""

#: ../../docs/tutorials/i18n/internationalizing_games.rst:71
msgid ""
"The same text in different languages can vary greatly in length. For this, "
"make sure to read the tutorial on :ref:`doc_size_and_anchors`, as "
"dynamically adjusting control sizes may help. :ref:`Container "
"<class_Container>` can be useful, as well as the text wrapping options "
"available in :ref:`Label <class_Label>`."
msgstr ""

#: ../../docs/tutorials/i18n/internationalizing_games.rst:78
msgid "TranslationServer"
msgstr ""

#: ../../docs/tutorials/i18n/internationalizing_games.rst:80
msgid ""
"Godot has a server handling low-level translation management called the :ref:"
"`TranslationServer <class_TranslationServer>`. Translations can be added or "
"removed during run-time; the current language can also be changed at run-"
"time."
msgstr ""

#: ../../docs/tutorials/i18n/internationalizing_games.rst:86
msgid "Command line"
msgstr ""

#: ../../docs/tutorials/i18n/internationalizing_games.rst:88
msgid ""
"Language can be tested when running Godot from the command line. For "
"example, to test a game in French, the following argument can be supplied:"
msgstr ""

#: ../../docs/tutorials/i18n/internationalizing_games.rst:97
msgid "Translating the project name"
msgstr ""

#: ../../docs/tutorials/i18n/internationalizing_games.rst:99
msgid ""
"The project name becomes the app name when exporting to different operating "
"systems and platforms. To specify the project name in more than one "
"language, create a new setting ``application/name`` in the **Project "
"Settings** and append the locale identifier to it. For instance, for "
"Spanish, this would be ``application/name_es``:"
msgstr ""

#: ../../docs/tutorials/i18n/internationalizing_games.rst:107
msgid ""
"If you are unsure about the language code to use, refer to the :ref:`list of "
"locale codes <doc_locales>`."
msgstr ""

#: ../../docs/tutorials/i18n/localization_using_gettext.rst:4
#, fuzzy
msgid "Localization using gettext"
msgstr "현지화"

#: ../../docs/tutorials/i18n/localization_using_gettext.rst:6
msgid ""
"In addition to :ref:`doc_importing_translations` in CSV format, Godot also "
"supports loading translation files written in the GNU gettext (``.po``) "
"format."
msgstr ""

#: ../../docs/tutorials/i18n/localization_using_gettext.rst:10
msgid ""
"For an introduction to gettext, check out `A Quick Gettext Tutorial <https://"
"www.labri.fr/perso/fleury/posts/programming/a-quick-gettext-tutorial."
"html>`_. It's written with C projects in mind, but much of the advice also "
"applies to Godot (with the exception of ``xgettext``)."
msgstr ""

#: ../../docs/tutorials/i18n/localization_using_gettext.rst:16
#, fuzzy
msgid "Advantages"
msgstr "**이점:**"

#: ../../docs/tutorials/i18n/localization_using_gettext.rst:18
msgid ""
"gettext is a standard format, which can be edited using any text editor or "
"GUI editors such as `Poedit <https://poedit.net/>`_."
msgstr ""

#: ../../docs/tutorials/i18n/localization_using_gettext.rst:20
msgid ""
"gettext is supported by translation platforms such as `Transifex <https://"
"www.transifex.com/>`_ and `Weblate <https://weblate.org/>`_, which makes it "
"easier for people to collaborate to localization."
msgstr ""

#: ../../docs/tutorials/i18n/localization_using_gettext.rst:23
msgid ""
"Compared to CSV, gettext works better with version control systems like Git, "
"as each locale has its own messages file."
msgstr ""

#: ../../docs/tutorials/i18n/localization_using_gettext.rst:25
msgid ""
"Multiline strings are more convenient to edit in gettext files compared to "
"CSV files."
msgstr ""

#: ../../docs/tutorials/i18n/localization_using_gettext.rst:29
#, fuzzy
msgid "Disadvantages"
msgstr "**이점:**"

#: ../../docs/tutorials/i18n/localization_using_gettext.rst:31
msgid ""
"gettext is a more complex format than CSV and can be harder to grasp for "
"people new to software localization."
msgstr ""

#: ../../docs/tutorials/i18n/localization_using_gettext.rst:33
msgid ""
"People who maintain localization files will have to install gettext tools on "
"their system. However, as Godot doesn't use compiled message object files "
"(``.mo``), translators can test their work without having to install gettext "
"tools."
msgstr ""

#: ../../docs/tutorials/i18n/localization_using_gettext.rst:39
msgid "Caveats"
msgstr ""

#: ../../docs/tutorials/i18n/localization_using_gettext.rst:41
msgid ""
"As Godot uses its own PO file parser behind the scenes (which is more "
"limited than the reference GNU gettext implementation), some features such "
"as pluralization aren't supported."
msgstr ""

#: ../../docs/tutorials/i18n/localization_using_gettext.rst:46
#, fuzzy
msgid "Installing gettext tools"
msgstr "패키지 설치하기"

#: ../../docs/tutorials/i18n/localization_using_gettext.rst:48
msgid ""
"The command line gettext tools are required to perform maintenance "
"operations, such as updating message files. Therefore, it's strongly "
"recommended to install them."
msgstr ""

#: ../../docs/tutorials/i18n/localization_using_gettext.rst:52
msgid ""
"**Windows:** Download an installer from `this page <https://mlocati.github."
"io/articles/gettext-iconv-windows.html>`_. Any architecture and binary type "
"(shared or static) works; if in doubt, choose the 64-bit static installer."
msgstr ""

#: ../../docs/tutorials/i18n/localization_using_gettext.rst:56
msgid ""
"**macOS:** Use `Homebrew <https://brew.sh/>`_ to install gettext with the "
"``brew install gettext`` command."
msgstr ""

#: ../../docs/tutorials/i18n/localization_using_gettext.rst:58
msgid ""
"**Linux:** On most distributions, install the ``gettext`` package from your "
"distribution's package manager."
msgstr ""

#: ../../docs/tutorials/i18n/localization_using_gettext.rst:62
#, fuzzy
msgid "Creating the PO template (POT) manually"
msgstr "스켈레톤(Skeleton) 정리하기"

#: ../../docs/tutorials/i18n/localization_using_gettext.rst:64
msgid ""
"Godot currently doesn't support extracting source strings using "
"``xgettext``, so the ``.pot`` file must be created manually. This file can "
"be placed anywhere in the project directory, but it's recommended to keep it "
"in a subdirectory, as each locale will be defined in its own file."
msgstr ""

#: ../../docs/tutorials/i18n/localization_using_gettext.rst:69
msgid ""
"Create a directory named `locale` in the project directory. In this "
"directory, save a file named ``messages.pot`` with the following contents:"
msgstr ""

#: ../../docs/tutorials/i18n/localization_using_gettext.rst:81
msgid ""
"Messages in gettext are made of ``msgid`` and ``msgstr`` pairs. ``msgid`` is "
"the source string (usually in English), ``msgstr`` will be the translated "
"string."
msgstr ""

#: ../../docs/tutorials/i18n/localization_using_gettext.rst:85
msgid ""
"The ``msgstr`` value in PO template files (``.pot``) should **always** be "
"empty. Localization will be done in the generated ``.po`` files instead."
msgstr ""

#: ../../docs/tutorials/i18n/localization_using_gettext.rst:89
#, fuzzy
msgid "Creating the PO template (POT) using pybabel"
msgstr "스켈레톤(Skeleton) 정리하기"

#: ../../docs/tutorials/i18n/localization_using_gettext.rst:91
msgid ""
"The Python tool pybabel has support for Godot and can be used to "
"automatically create and update the POT file from your scene files and "
"scripts."
msgstr ""

#: ../../docs/tutorials/i18n/localization_using_gettext.rst:94
msgid "After installing ``babel`` and ``babel-godot``, for example using pip:"
msgstr ""

#: ../../docs/tutorials/i18n/localization_using_gettext.rst:100
msgid ""
"Write a mapping file (for example ``babelrc``) which will indicate which "
"files pybabel needs to process (note that we process GDScript as Python, "
"which is generally sufficient):"
msgstr ""

#: ../../docs/tutorials/i18n/localization_using_gettext.rst:112
msgid "You can then run pybabel like so:"
msgstr ""

#: ../../docs/tutorials/i18n/localization_using_gettext.rst:118
msgid ""
"Use the ``-k`` option to specify what needs to be extracted. In this case, "
"arguments to :ref:`tr() <class_Object_method_tr>` will be translated, as "
"well as properties named \"text\" (commonly used by Control nodes) and "
"LineEdit's \"placeholder_text\" property."
msgstr ""

#: ../../docs/tutorials/i18n/localization_using_gettext.rst:124
msgid "Creating a messages file from a PO template"
msgstr ""

#: ../../docs/tutorials/i18n/localization_using_gettext.rst:126
msgid ""
"The ``msginit`` command is used to turn a PO template into a messages file. "
"For instance, to create a French localization file, use the following "
"command while in the ``locale`` directory:"
msgstr ""

#: ../../docs/tutorials/i18n/localization_using_gettext.rst:134
msgid ""
"The command above will create a file named ``fr.po`` in the same directory "
"as the PO template."
msgstr ""

#: ../../docs/tutorials/i18n/localization_using_gettext.rst:137
msgid ""
"Alternatively, you can do that graphically using Poedit, or by uploading the "
"POT file to your web platform of choice."
msgstr ""

#: ../../docs/tutorials/i18n/localization_using_gettext.rst:141
#, fuzzy
msgid "Loading a messages file in Godot"
msgstr "Godot 3.0+에서 에셋 가져오기"

#: ../../docs/tutorials/i18n/localization_using_gettext.rst:143
msgid ""
"To register a messages file as a translation in a project, open the "
"**Project Settings**, then go to the **Localization** tab. In "
"**Translations**, click **Add…** then choose the ``.po`` file in the file "
"dialog. The locale will be inferred from the ``\"Language: <code>\\n\"`` "
"property in the messages file."
msgstr ""

#: ../../docs/tutorials/i18n/localization_using_gettext.rst:149
msgid ""
"See :ref:`doc_internationalizing_games` for more information on importing "
"and testing translations in Godot."
msgstr ""

#: ../../docs/tutorials/i18n/localization_using_gettext.rst:153
msgid "Updating message files to follow the PO template"
msgstr ""

#: ../../docs/tutorials/i18n/localization_using_gettext.rst:155
msgid ""
"After updating the PO template, you will have to update message files so "
"that they contain new strings, while removing strings that are no longer "
"present in the PO template removed in the PO template. This can be done "
"automatically using the ``msgmerge`` tool:"
msgstr ""

#: ../../docs/tutorials/i18n/localization_using_gettext.rst:165
msgid ""
"If you want to keep a backup of the original message file (which would be "
"saved as ``fr.po~`` in this example), remove the ``--backup=none`` argument."
msgstr ""

#: ../../docs/tutorials/i18n/localization_using_gettext.rst:169
msgid "Checking the validity of a PO file or template"
msgstr ""

#: ../../docs/tutorials/i18n/localization_using_gettext.rst:171
msgid ""
"It is possible to check whether a gettext file's syntax is valid by running "
"the command below:"
msgstr ""

#: ../../docs/tutorials/i18n/localization_using_gettext.rst:178
msgid ""
"If there are syntax errors or warnings, they will be displayed in the "
"console. Otherwise, ``msgfmt`` won't output anything."
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:4
msgid "Locales"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:6
msgid ""
"This is the list of supported locales and variants in the engine. It's based "
"on the Unix standard locale strings:"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:10
msgid "Locale"
msgstr "로케일"

#: ../../docs/tutorials/i18n/locales.rst:10
msgid "Language and Variant"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:12
msgid "aa"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:12
msgid "Afar"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:14
msgid "aa_DJ"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:14
msgid "Afar (Djibouti)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:16
msgid "aa_ER"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:16
msgid "Afar (Eritrea)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:18
msgid "aa_ET"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:18
msgid "Afar (Ethiopia)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:20
msgid "af"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:20
msgid "Afrikaans"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:22
msgid "af_ZA"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:22
msgid "Afrikaans (South Africa)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:24
msgid "agr_PE"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:24
msgid "Aguaruna (Peru)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:26
msgid "ak_GH"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:26
msgid "Akan (Ghana)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:28
msgid "am_ET"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:28
msgid "Amharic (Ethiopia)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:30
msgid "an_ES"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:30
msgid "Aragonese (Spain)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:32
msgid "anp_IN"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:32
msgid "Angika (India)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:34
msgid "ar"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:34
msgid "Arabic"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:36
msgid "ar_AE"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:36
msgid "Arabic (United Arab Emirates)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:38
msgid "ar_BH"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:38
msgid "Arabic (Bahrain)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:40
msgid "ar_DZ"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:40
msgid "Arabic (Algeria)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:42
msgid "ar_EG"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:42
msgid "Arabic (Egypt)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:44
msgid "ar_IQ"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:44
msgid "Arabic (Iraq)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:46
msgid "ar_JO"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:46
msgid "Arabic (Jordan)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:48
msgid "ar_KW"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:48
msgid "Arabic (Kuwait)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:50
msgid "ar_LB"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:50
msgid "Arabic (Lebanon)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:52
msgid "ar_LY"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:52
msgid "Arabic (Libya)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:54
msgid "ar_MA"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:54
msgid "Arabic (Morocco)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:56
msgid "ar_OM"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:56
msgid "Arabic (Oman)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:58
msgid "ar_QA"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:58
msgid "Arabic (Qatar)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:60
msgid "ar_SA"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:60
msgid "Arabic (Saudi Arabia)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:62
msgid "ar_SD"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:62
msgid "Arabic (Sudan)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:64
msgid "ar_SY"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:64
msgid "Arabic (Syria)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:66
msgid "ar_TN"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:66
msgid "Arabic (Tunisia)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:68
msgid "ar_YE"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:68
msgid "Arabic (Yemen)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:70
msgid "as_IN"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:70
msgid "Assamese (India)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:72
msgid "ast_ES"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:72
msgid "Asturian (Spain)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:74
msgid "ayc_PE"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:74
msgid "Southern Aymara (Peru)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:76
msgid "ay_PE"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:76
msgid "Aymara (Peru)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:78
msgid "az_AZ"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:78
msgid "Azerbaijani (Azerbaijan)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:80
msgid "be"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:80
msgid "Belarusian"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:82
msgid "be_BY"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:82
msgid "Belarusian (Belarus)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:84
msgid "bem_ZM"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:84
msgid "Bemba (Zambia)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:86
msgid "ber_DZ"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:86
msgid "Berber languages (Algeria)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:88
msgid "ber_MA"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:88
msgid "Berber languages (Morocco)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:90
msgid "bg"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:90
msgid "Bulgarian"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:92
msgid "bg_BG"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:92
msgid "Bulgarian (Bulgaria)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:94
msgid "bhb_IN"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:94
msgid "Bhili (India)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:96
msgid "bho_IN"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:96
msgid "Bhojpuri (India)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:98
msgid "bi_TV"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:98
msgid "Bislama (Tuvalu)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:100
msgid "bn"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:100
msgid "Bengali"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:102
msgid "bn_BD"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:102
msgid "Bengali (Bangladesh)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:104
msgid "bn_IN"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:104
msgid "Bengali (India)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:106
msgid "bo"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:106
msgid "Tibetan"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:108
msgid "bo_CN"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:108
msgid "Tibetan (China)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:110
msgid "bo_IN"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:110
msgid "Tibetan (India)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:112
msgid "br_FR"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:112
msgid "Breton (France)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:114
msgid "brx_IN"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:114
msgid "Bodo (India)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:116
msgid "bs_BA"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:116
msgid "Bosnian (Bosnia and Herzegovina)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:118
msgid "byn_ER"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:118
msgid "Bilin (Eritrea)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:120
msgid "ca"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:120
msgid "Catalan"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:122
msgid "ca_AD"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:122
msgid "Catalan (Andorra)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:124
msgid "ca_ES"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:124
msgid "Catalan (Spain)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:126
msgid "ca_FR"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:126
msgid "Catalan (France)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:128
msgid "ca_IT"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:128
msgid "Catalan (Italy)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:130
msgid "ce_RU"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:130
msgid "Chechen (Russia)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:132
msgid "chr_US"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:132
msgid "Cherokee (United States)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:134
msgid "cmn_TW"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:134
msgid "Mandarin Chinese (Taiwan)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:136
msgid "crh_UA"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:136
msgid "Crimean Tatar (Ukraine)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:138
msgid "csb_PL"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:138
msgid "Kashubian (Poland)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:140
msgid "cs"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:140
msgid "Czech"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:142
msgid "cs_CZ"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:142
msgid "Czech (Czech Republic)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:144
msgid "cv_RU"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:144
msgid "Chuvash (Russia)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:146
msgid "cy_GB"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:146
msgid "Welsh (United Kingdom)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:148
msgid "da"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:148
msgid "Danish"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:150
msgid "da_DK"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:150
msgid "Danish (Denmark)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:152
msgid "de"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:152
msgid "German"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:154
msgid "de_AT"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:154
msgid "German (Austria)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:156
msgid "de_BE"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:156
msgid "German (Belgium)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:158
msgid "de_CH"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:158
msgid "German (Switzerland)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:160
msgid "de_DE"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:160
msgid "German (Germany)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:162
msgid "de_IT"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:162
msgid "German (Italy)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:164
msgid "de_LU"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:164
msgid "German (Luxembourg)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:166
msgid "doi_IN"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:166
msgid "Dogri (India)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:168
msgid "dv_MV"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:168
msgid "Dhivehi (Maldives)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:170
msgid "dz_BT"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:170
msgid "Dzongkha (Bhutan)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:172
msgid "el"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:172
msgid "Greek"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:174
msgid "el_CY"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:174
msgid "Greek (Cyprus)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:176
msgid "el_GR"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:176
msgid "Greek (Greece)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:178
msgid "English"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:180
msgid "en_AG"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:180
msgid "English (Antigua and Barbuda)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:182
msgid "en_AU"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:182
msgid "English (Australia)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:184
msgid "en_BW"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:184
msgid "English (Botswana)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:186
msgid "en_CA"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:186
msgid "English (Canada)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:188
msgid "en_DK"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:188
msgid "English (Denmark)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:190
msgid "en_GB"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:190
msgid "English (United Kingdom)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:192
msgid "en_HK"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:192
msgid "English (Hong Kong)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:194
msgid "en_IE"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:194
msgid "English (Ireland)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:196
msgid "en_IL"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:196
msgid "English (Israel)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:198
msgid "en_IN"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:198
msgid "English (India)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:200
msgid "en_NG"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:200
msgid "English (Nigeria)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:202
msgid "en_MT"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:202
msgid "English (Malta)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:204
msgid "en_NZ"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:204
msgid "English (New Zealand)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:206
msgid "en_PH"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:206
msgid "English (Philippines)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:208
msgid "en_SG"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:208
msgid "English (Singapore)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:210
msgid "en_US"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:210
msgid "English (United States)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:212
msgid "en_ZA"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:212
msgid "English (South Africa)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:214
msgid "en_ZM"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:214
msgid "English (Zambia)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:216
msgid "en_ZW"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:216
msgid "English (Zimbabwe)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:218
msgid "eo"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:218
msgid "Esperanto"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:220
msgid "Spanish"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:222
msgid "es_AR"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:222
msgid "Spanish (Argentina)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:224
msgid "es_BO"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:224
msgid "Spanish (Bolivia)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:226
msgid "es_CL"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:226
msgid "Spanish (Chile)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:228
msgid "es_CO"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:228
msgid "Spanish (Colombia)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:230
msgid "es_CR"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:230
msgid "Spanish (Costa Rica)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:232
msgid "en_CU"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:232
msgid "Spanish (Cuba)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:234
msgid "es_DO"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:234
msgid "Spanish (Dominican Republic)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:236
msgid "es_EC"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:236
msgid "Spanish (Ecuador)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:238
msgid "es_ES"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:238
msgid "Spanish (Spain)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:240
msgid "es_GT"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:240
msgid "Spanish (Guatemala)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:242
msgid "es_HN"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:242
msgid "Spanish (Honduras)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:244
msgid "es_MX"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:244
msgid "Spanish (Mexico)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:246
msgid "es_NI"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:246
msgid "Spanish (Nicaragua)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:248
msgid "es_PA"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:248
msgid "Spanish (Panama)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:250
msgid "es_PE"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:250
msgid "Spanish (Peru)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:252
msgid "es_PR"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:252
msgid "Spanish (Puerto Rico)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:254
msgid "es_PY"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:254
msgid "Spanish (Paraguay)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:256
msgid "es_SV"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:256
msgid "Spanish (El Salvador)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:258
msgid "es_US"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:258
msgid "Spanish (United States)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:260
msgid "es_UY"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:260
msgid "Spanish (Uruguay)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:262
msgid "es_VE"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:262
msgid "Spanish (Venezuela)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:264
msgid "et"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:264
msgid "Estonian"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:266
msgid "et_EE"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:266
msgid "Estonian (Estonia)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:268
msgid "eu"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:268
msgid "Basque"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:270
msgid "eu_ES"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:270
msgid "Basque (Spain)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:272
msgid "fa"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:272
msgid "Persian"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:274
msgid "fa_IR"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:274
msgid "Persian (Iran)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:276
msgid "ff_SN"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:276
msgid "Fulah (Senegal)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:278
msgid "fi"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:278
msgid "Finnish"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:280
msgid "fi_FI"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:280
msgid "Finnish (Finland)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:282
msgid "fil_PH"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:282
msgid "Filipino (Philippines)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:284
msgid "fo_FO"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:284
msgid "Faroese (Faroe Islands)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:286
msgid "fr"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:286
msgid "French"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:288
msgid "fr_BE"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:288
msgid "French (Belgium)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:290
msgid "fr_CA"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:290
msgid "French (Canada)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:292
msgid "fr_CH"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:292
msgid "French (Switzerland)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:294
msgid "fr_FR"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:294
msgid "French (France)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:296
msgid "fr_LU"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:296
msgid "French (Luxembourg)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:298
msgid "fur_IT"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:298
msgid "Friulian (Italy)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:300
msgid "fy_DE"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:300
msgid "Western Frisian (Germany)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:302
msgid "fy_NL"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:302
msgid "Western Frisian (Netherlands)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:304
msgid "ga"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:304
msgid "Irish"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:306
msgid "ga_IE"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:306
msgid "Irish (Ireland)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:308
msgid "gd_GB"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:308
msgid "Scottish Gaelic (United Kingdom)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:310
msgid "gez_ER"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:310
msgid "Geez (Eritrea)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:312
msgid "gez_ET"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:312
msgid "Geez (Ethiopia)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:314
msgid "gl_ES"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:314
msgid "Galician (Spain)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:316
msgid "gu_IN"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:316
msgid "Gujarati (India)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:318
msgid "gv_GB"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:318
msgid "Manx (United Kingdom)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:320
msgid "hak_TW"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:320
msgid "Hakka Chinese (Taiwan)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:322
msgid "ha_NG"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:322
msgid "Hausa (Nigeria)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:324
msgid "he"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:324
msgid "Hebrew"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:326
msgid "he_IL"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:326
msgid "Hebrew (Israel)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:328
msgid "hi"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:328
msgid "Hindi"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:330
msgid "hi_IN"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:330
msgid "Hindi (India)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:332
msgid "hne_IN"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:332
msgid "Chhattisgarhi (India)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:334
msgid "hr"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:334
msgid "Croatian"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:336
msgid "hr_HR"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:336
msgid "Croatian (Croatia)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:338
msgid "hsb_DE"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:338
msgid "Upper Sorbian (Germany)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:340
msgid "ht_HT"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:340
msgid "Haitian (Haiti)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:342
msgid "hu"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:342
msgid "Hungarian"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:344
msgid "hu_HU"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:344
msgid "Hungarian (Hungary)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:346
msgid "hus_MX"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:346
msgid "Huastec (Mexico)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:348
msgid "hy_AM"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:348
msgid "Armenian (Armenia)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:350
msgid "ia_FR"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:350
msgid "Interlingua (France)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:352
msgid "id"
msgstr "id"

#: ../../docs/tutorials/i18n/locales.rst:352
msgid "Indonesian"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:354
msgid "id_ID"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:354
msgid "Indonesian (Indonesia)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:356
msgid "ig_NG"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:356
msgid "Igbo (Nigeria)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:358
msgid "ik_CA"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:358
msgid "Inupiaq (Canada)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:360
msgid "Icelandic"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:362
msgid "is_IS"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:362
msgid "Icelandic (Iceland)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:364
msgid "it"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:364
msgid "Italian"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:366
msgid "it_CH"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:366
msgid "Italian (Switzerland)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:368
msgid "it_IT"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:368
msgid "Italian (Italy)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:370
msgid "iu_CA"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:370
msgid "Inuktitut (Canada)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:372
msgid "Japanese"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:374
msgid "ja_JP"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:374
msgid "Japanese (Japan)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:376
msgid "kab_DZ"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:376
msgid "Kabyle (Algeria)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:378
msgid "ka_GE"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:378
msgid "Georgian (Georgia)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:380
msgid "kk_KZ"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:380
msgid "Kazakh (Kazakhstan)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:382
msgid "kl_GL"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:382
msgid "Kalaallisut (Greenland)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:384
msgid "km_KH"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:384
msgid "Central Khmer (Cambodia)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:386
msgid "kn_IN"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:386
msgid "Kannada (India)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:388
msgid "kok_IN"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:388
msgid "Konkani (India)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:390
msgid "ko"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:390
msgid "Korean"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:392
msgid "ko_KR"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:392
msgid "Korean (South Korea)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:394
msgid "ks_IN"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:394
msgid "Kashmiri (India)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:396
msgid "ku"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:396
msgid "Kurdish"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:398
msgid "ku_TR"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:398
msgid "Kurdish (Turkey)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:400
msgid "kw_GB"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:400
msgid "Cornish (United Kingdom)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:402
msgid "ky_KG"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:402
msgid "Kirghiz (Kyrgyzstan)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:404
msgid "lb_LU"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:404
msgid "Luxembourgish (Luxembourg)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:406
msgid "lg_UG"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:406
msgid "Ganda (Uganda)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:408
msgid "li_BE"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:408
msgid "Limburgan (Belgium)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:410
msgid "li_NL"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:410
msgid "Limburgan (Netherlands)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:412
msgid "lij_IT"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:412
msgid "Ligurian (Italy)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:414
msgid "ln_CD"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:414
msgid "Lingala (Congo)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:416
msgid "lo_LA"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:416
msgid "Lao (Laos)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:418
msgid "lt"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:418
msgid "Lithuanian"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:420
msgid "lt_LT"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:420
msgid "Lithuanian (Lithuania)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:422
msgid "lv"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:422
msgid "Latvian"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:424
msgid "lv_LV"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:424
msgid "Latvian (Latvia)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:426
msgid "lzh_TW"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:426
msgid "Literary Chinese (Taiwan)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:428
msgid "mag_IN"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:428
msgid "Magahi (India)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:430
msgid "mai_IN"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:430
msgid "Maithili (India)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:432
msgid "mg_MG"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:432
msgid "Malagasy (Madagascar)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:434
msgid "mh_MH"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:434
msgid "Marshallese (Marshall Islands)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:436
msgid "mhr_RU"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:436
msgid "Eastern Mari (Russia)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:438
msgid "mi_NZ"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:438
msgid "Maori (New Zealand)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:440
msgid "miq_NI"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:440
msgid "Mískito  (Nicaragua)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:442
msgid "mk"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:442
msgid "Macedonian"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:444
msgid "mk_MK"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:444
msgid "Macedonian (Macedonia)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:446
msgid "ml_IN"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:446
msgid "Malayalam (India)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:448
msgid "mni_IN"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:448
msgid "Manipuri (India)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:450
msgid "mn_MN"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:450
msgid "Mongolian (Mongolia)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:452
msgid "mr_IN"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:452
msgid "Marathi (India)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:454
msgid "ms"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:454
msgid "Malay"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:456
msgid "ms_MY"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:456
msgid "Malay (Malaysia)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:458
msgid "mt"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:458
msgid "Maltese"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:460
msgid "mt_MT"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:460
msgid "Maltese (Malta)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:462
msgid "my_MM"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:462
msgid "Burmese (Myanmar)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:464
msgid "myv_RU"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:464
msgid "Erzya  (Russia)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:466
msgid "nah_MX"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:466
msgid "Nahuatl languages (Mexico)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:468
msgid "nan_TW"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:468
msgid "Min Nan Chinese (Taiwan)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:470
msgid "nb"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:470
msgid "Norwegian Bokmål"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:472
msgid "nb_NO"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:472
msgid "Norwegian Bokmål (Norway)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:474
msgid "nds_DE"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:474
msgid "Low German (Germany)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:476
msgid "nds_NL"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:476
msgid "Low German (Netherlands)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:478
msgid "ne_NP"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:478
msgid "Nepali (Nepal)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:480
msgid "nhn_MX"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:480
msgid "Central Nahuatl (Mexico)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:482
msgid "niu_NU"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:482
msgid "Niuean (Niue)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:484
msgid "niu_NZ"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:484
msgid "Niuean (New Zealand)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:486
msgid "nl"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:486
msgid "Dutch"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:488
msgid "nl_AW"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:488
msgid "Dutch (Aruba)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:490
msgid "nl_BE"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:490
msgid "Dutch (Belgium)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:492
msgid "nl_NL"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:492
msgid "Dutch (Netherlands)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:494
msgid "nn"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:494
msgid "Norwegian Nynorsk"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:496
msgid "nn_NO"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:496
msgid "Norwegian Nynorsk (Norway)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:498
msgid "no"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:498
msgid "Norwegian"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:500
msgid "no_NO"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:500
msgid "Norwegian (Norway)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:502
msgid "nr_ZA"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:502
msgid "South Ndebele (South Africa)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:504
msgid "nso_ZA"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:504
msgid "Pedi (South Africa)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:506
msgid "oc_FR"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:506
msgid "Occitan (France)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:508
msgid "om"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:508
msgid "Oromo"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:510
msgid "om_ET"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:510
msgid "Oromo (Ethiopia)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:512
msgid "om_KE"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:512
msgid "Oromo (Kenya)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:514
msgid "or_IN"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:514
msgid "Oriya (India)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:516
msgid "os_RU"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:516
msgid "Ossetian (Russia)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:518
msgid "pa_IN"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:518
msgid "Panjabi (India)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:520
msgid "pap"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:520
msgid "Papiamento"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:522
msgid "pap_AN"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:522
msgid "Papiamento (Netherlands Antilles)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:524
msgid "pap_AW"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:524
msgid "Papiamento (Aruba)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:526
msgid "pap_CW"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:526
msgid "Papiamento (Curaçao)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:528
msgid "pa_PK"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:528
msgid "Panjabi (Pakistan)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:530
msgid "pl"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:530
msgid "Polish"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:532
msgid "pl_PL"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:532
msgid "Polish (Poland)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:534
msgid "pr"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:534
msgid "Pirate"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:536
msgid "ps_AF"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:536
msgid "Pushto (Afghanistan)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:538
msgid "pt"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:538
msgid "Portuguese"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:540
msgid "pt_BR"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:540
msgid "Portuguese (Brazil)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:542
msgid "pt_PT"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:542
msgid "Portuguese (Portugal)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:544
msgid "quy_PE"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:544
msgid "Ayacucho Quechua (Peru)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:546
msgid "quz_PE"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:546
msgid "Cusco Quechua (Peru)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:548
msgid "raj_IN"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:548
msgid "Rajasthani (India)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:550
msgid "ro"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:550
msgid "Romanian"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:552
msgid "ro_RO"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:552
msgid "Romanian (Romania)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:554
msgid "ru"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:554
msgid "Russian"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:556
msgid "ru_RU"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:556
msgid "Russian (Russia)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:558
msgid "ru_UA"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:558
msgid "Russian (Ukraine)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:560
msgid "rw_RW"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:560
msgid "Kinyarwanda (Rwanda)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:562
msgid "sa_IN"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:562
msgid "Sanskrit (India)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:564
msgid "sat_IN"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:564
msgid "Santali (India)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:566
msgid "sc_IT"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:566
msgid "Sardinian (Italy)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:568
msgid "sco"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:568
msgid "Scots"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:570
msgid "sd_IN"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:570
msgid "Sindhi (India)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:572
msgid "se_NO"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:572
msgid "Northern Sami (Norway)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:574
msgid "sgs_LT"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:574
msgid "Samogitian (Lithuania)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:576
msgid "shs_CA"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:576
msgid "Shuswap (Canada)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:578
msgid "sid_ET"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:578
msgid "Sidamo (Ethiopia)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:580
msgid "si_LK"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:580
msgid "Sinhala (Sri Lanka)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:582
msgid "sk"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:582
msgid "Slovak"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:584
msgid "sk_SK"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:584
msgid "Slovak (Slovakia)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:586
msgid "sl"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:586
msgid "Slovenian"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:588
msgid "so"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:588
msgid "Somali"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:590
msgid "so_DJ"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:590
msgid "Somali (Djibouti)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:592
msgid "so_ET"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:592
msgid "Somali (Ethiopia)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:594
msgid "so_KE"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:594
msgid "Somali (Kenya)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:596
msgid "so_SO"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:596
msgid "Somali (Somalia)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:598
msgid "son_ML"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:598
msgid "Songhai languages (Mali)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:600
msgid "sq"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:600
msgid "Albanian"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:602
msgid "sq_AL"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:602
msgid "Albanian (Albania)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:604
msgid "sq_KV"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:604
msgid "Albanian (Kosovo)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:606
msgid "sq_MK"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:606
msgid "Albanian (Macedonia)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:608
msgid "sr"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:608
msgid "Serbian"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:610
msgid "sr_BA"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:610
msgid "Serbian (Bosnia and Herzegovina)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:612
msgid "sr_CS"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:612
msgid "Serbian (Serbia and Montenegro)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:614
msgid "sr_ME"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:614
msgid "Serbian (Montenegro)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:616
msgid "sr_RS"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:616
msgid "Serbian (Serbia)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:618
msgid "ss_ZA"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:618
msgid "Swati (South Africa)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:620
msgid "st_ZA"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:620
msgid "Southern Sotho (South Africa)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:622
msgid "sv"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:622
msgid "Swedish"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:624
msgid "sv_FI"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:624
msgid "Swedish (Finland)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:626
msgid "sv_SE"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:626
msgid "Swedish (Sweden)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:628
msgid "sw_KE"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:628
msgid "Swahili (Kenya)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:630
msgid "sw_TZ"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:630
msgid "Swahili (Tanzania)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:632
msgid "szl_PL"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:632
msgid "Silesian (Poland)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:634
msgid "ta"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:634
msgid "Tamil"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:636
msgid "ta_IN"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:636
msgid "Tamil (India)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:638
msgid "ta_LK"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:638
msgid "Tamil (Sri Lanka)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:640
msgid "tcy_IN"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:640
msgid "Tulu (India)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:642
msgid "te_IN"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:642
msgid "Telugu (India)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:644
msgid "tg_TJ"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:644
msgid "Tajik (Tajikistan)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:646
msgid "the_NP"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:646
msgid "Chitwania Tharu (Nepal)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:648
msgid "th"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:648
msgid "Thai"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:650
msgid "th_TH"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:650
msgid "Thai (Thailand)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:652
msgid "th_TH_TH"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:652
msgid "Thai (Thailand,TH)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:654
msgid "ti"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:654
msgid "Tigrinya"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:656
msgid "ti_ER"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:656
msgid "Tigrinya (Eritrea)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:658
msgid "ti_ET"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:658
msgid "Tigrinya (Ethiopia)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:660
msgid "tig_ER"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:660
msgid "Tigre (Eritrea)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:662
msgid "tk_TM"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:662
msgid "Turkmen (Turkmenistan)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:664
msgid "tl_PH"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:664
msgid "Tagalog (Philippines)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:666
msgid "tn_ZA"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:666
msgid "Tswana (South Africa)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:668
msgid "tr"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:668
msgid "Turkish"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:670
msgid "tr_CY"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:670
msgid "Turkish (Cyprus)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:672
msgid "tr_TR"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:672
msgid "Turkish (Turkey)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:674
msgid "ts_ZA"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:674
msgid "Tsonga (South Africa)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:676
msgid "tt_RU"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:676
msgid "Tatar (Russia)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:678
msgid "ug_CN"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:678
msgid "Uighur (China)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:680
msgid "uk"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:680
msgid "Ukrainian"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:682
msgid "uk_UA"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:682
msgid "Ukrainian (Ukraine)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:684
msgid "unm_US"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:684
msgid "Unami (United States)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:686
msgid "ur"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:686
msgid "Urdu"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:688
msgid "ur_IN"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:688
msgid "Urdu (India)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:690
msgid "ur_PK"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:690
msgid "Urdu (Pakistan)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:692
msgid "uz"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:692
msgid "Uzbek"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:694
msgid "uz_UZ"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:694
msgid "Uzbek (Uzbekistan)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:696
msgid "ve_ZA"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:696
msgid "Venda (South Africa)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:698
msgid "vi"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:698
msgid "Vietnamese"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:700
msgid "vi_VN"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:700
msgid "Vietnamese (Vietnam)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:702
msgid "wa_BE"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:702
msgid "Walloon (Belgium)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:704
msgid "wae_CH"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:704
msgid "Walser (Switzerland)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:706
msgid "wal_ET"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:706
msgid "Wolaytta (Ethiopia)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:708
msgid "wo_SN"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:708
msgid "Wolof (Senegal)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:710
msgid "xh_ZA"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:710
msgid "Xhosa (South Africa)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:712
msgid "yi_US"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:712
msgid "Yiddish (United States)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:714
msgid "yo_NG"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:714
msgid "Yoruba (Nigeria)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:716
msgid "yue_HK"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:716
msgid "Yue Chinese (Hong Kong)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:718
msgid "zh"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:718
msgid "Chinese"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:720
msgid "zh_CN"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:720
msgid "Chinese (China)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:722
msgid "zh_HK"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:722
msgid "Chinese (Hong Kong)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:724
msgid "zh_SG"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:724
msgid "Chinese (Singapore)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:726
msgid "zh_TW"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:726
msgid "Chinese (Taiwan)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:728
msgid "zu_ZA"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:728
msgid "Zulu (South Africa)"
msgstr ""

#: ../../docs/tutorials/gui/gui_skinning.rst:4
msgid "GUI skinning"
msgstr ""

#: ../../docs/tutorials/gui/gui_skinning.rst:7
msgid "Oh, beautiful GUI!"
msgstr ""

#: ../../docs/tutorials/gui/gui_skinning.rst:9
msgid ""
"This tutorial is about advanced skinning of an user interface. Most games "
"generally don't need this, as they end up just relying on :ref:`Label "
"<class_Label>`, :ref:`TextureRect <class_TextureRect>`, :ref:`TextureButton "
"<class_TextureButton>` and :ref:`TextureProgress <class_TextureProgress>`."
msgstr ""

#: ../../docs/tutorials/gui/gui_skinning.rst:15
msgid ""
"However, many types of games often need complex user interfaces, like MMOs, "
"traditional RPGs, Simulators, Strategy, etc. These kinds of interface are "
"also common in some games that include editors to create content, or "
"interfaces for network connectivity."
msgstr ""

#: ../../docs/tutorials/gui/gui_skinning.rst:20
msgid ""
"Godot's user interface uses these kinds of control with the default theme, "
"but they can be skinned to resemble pretty much any kind of user interface."
msgstr ""

#: ../../docs/tutorials/gui/gui_skinning.rst:25
msgid "Theme"
msgstr "테마"

#: ../../docs/tutorials/gui/gui_skinning.rst:27
msgid ""
"The GUI is skinned through the :ref:`Theme <class_Theme>` resource. Theme "
"contains all the information required to change the entire visual styling of "
"all controls. Theme options are named, so it's not obvious which name "
"changes what (especially from code), but several tools are provided. The "
"ultimate place to look at what each theme option is for each control, which "
"will always be more up to date than any documentation, is the file `scene/"
"resources/default_theme/default_theme.cpp <https://github.com/godotengine/"
"godot/blob/master/scene/resources/default_theme/default_theme.cpp>`__. The "
"rest of this document will explain the different tools used to customize the "
"theme."
msgstr ""

#: ../../docs/tutorials/gui/gui_skinning.rst:38
msgid ""
"A Theme can be applied to any control in the scene. As a result, all "
"children and grand-children controls will use that same theme, too (unless "
"another theme is specified further down the tree). If a value is not found "
"in a theme, it will be searched in themes higher up in the hierarchy, "
"towards the root. If nothing was found, the default theme is used. This "
"system allows for flexible overriding of themes in complex user interfaces."
msgstr ""

#: ../../docs/tutorials/gui/gui_skinning.rst:47
msgid "Theme options"
msgstr ""

#: ../../docs/tutorials/gui/gui_skinning.rst:49
msgid "Each kind of option in a theme can be:"
msgstr ""

#: ../../docs/tutorials/gui/gui_skinning.rst:51
msgid ""
"**An integer constant**: A single numerical constant. Generally used to "
"define spacing between components or alignment."
msgstr ""

#: ../../docs/tutorials/gui/gui_skinning.rst:53
msgid ""
"**A Color**: A single color, with or without transparency. Colors are "
"usually applied to fonts and icons."
msgstr ""

#: ../../docs/tutorials/gui/gui_skinning.rst:55
msgid ""
"**A Texture**: A single image. Textures are not often used, but when they "
"are, they represent handles to pick or icons in a complex control (such as a "
"file dialog)."
msgstr ""

#: ../../docs/tutorials/gui/gui_skinning.rst:58
msgid ""
"**A Font**: Every control that uses text can be assigned the fonts used to "
"draw strings."
msgstr ""

#: ../../docs/tutorials/gui/gui_skinning.rst:60
msgid ""
"**A StyleBox**: Stylebox is a resource that defines how to draw a panel in "
"varying sizes (more information on them later)."
msgstr ""

#: ../../docs/tutorials/gui/gui_skinning.rst:63
msgid "Every option is associated with:"
msgstr ""

#: ../../docs/tutorials/gui/gui_skinning.rst:65
msgid "A name (the name of the option)"
msgstr ""

#: ../../docs/tutorials/gui/gui_skinning.rst:66
msgid "A Control (the name of the control)"
msgstr ""

#: ../../docs/tutorials/gui/gui_skinning.rst:68
msgid "An example usage:"
msgstr ""

#: ../../docs/tutorials/gui/gui_skinning.rst:87
msgid ""
"In the example above, a new theme is created. The \"font_color\" option is "
"changed and then applied to a label. As a result, the label (and all "
"children and grandchildren labels) will use that color."
msgstr ""

#: ../../docs/tutorials/gui/gui_skinning.rst:91
msgid ""
"It is possible to override those options without using the theme directly, "
"and only for a specific control, by using the override API in :ref:`Control."
"add_color_override() <class_Control_method_add_color_override>`:"
msgstr ""

#: ../../docs/tutorials/gui/gui_skinning.rst:106
msgid ""
"In the inline help of Godot (in the script tab) you can check which theme "
"options are overridable, or check the :ref:`Control <class_Control>` class "
"reference."
msgstr ""

#: ../../docs/tutorials/gui/gui_skinning.rst:110
msgid "Customizing a control"
msgstr ""

#: ../../docs/tutorials/gui/gui_skinning.rst:112
msgid ""
"If only a few controls need to be skinned, it is often not necessary to "
"create a new theme. Controls offer their theme options as special kinds of "
"properties. If checked, overriding will take place:"
msgstr ""

#: ../../docs/tutorials/gui/gui_skinning.rst:118
msgid ""
"As can be seen in the image above, theme options have little check boxes. If "
"checked, they can be used to override the value of the theme just for that "
"control."
msgstr ""

#: ../../docs/tutorials/gui/gui_skinning.rst:123
msgid "Creating a theme"
msgstr ""

#: ../../docs/tutorials/gui/gui_skinning.rst:125
msgid ""
"The simplest way to create a theme is to edit a theme resource. Create a "
"Theme from the resource menu; the editor will appear immediately. After "
"that, save it (for example, with the name mytheme.theme):"
msgstr ""

#: ../../docs/tutorials/gui/gui_skinning.rst:131
msgid ""
"This will create an empty theme that can later be loaded and assigned to "
"controls."
msgstr ""

#: ../../docs/tutorials/gui/gui_skinning.rst:135
msgid "Example: theming a button"
msgstr ""

#: ../../docs/tutorials/gui/gui_skinning.rst:137
msgid ""
"Download these assets (:download:`skin_assets.zip <files/skin_assets.zip>`) "
"and add them to your project. Open the theme editor, click on \"Edit Theme\" "
"and select \"Add Class Items\":"
msgstr ""

#: ../../docs/tutorials/gui/gui_skinning.rst:143
msgid ""
"A menu will appear prompting the type of control to create. Select \"Button"
"\":"
msgstr ""

#: ../../docs/tutorials/gui/gui_skinning.rst:148
msgid ""
"Immediately, all button theme options will appear in the property editor, "
"where they can be edited:"
msgstr ""

#: ../../docs/tutorials/gui/gui_skinning.rst:153
msgid ""
"From ``Styles``, open the \"Normal\" drop-down menu next to where it "
"probably says \"null\" and create a \"New StyleBoxTexture\", then edit it. A "
"texture stylebox basically contains a texture and the size of the margins "
"that will not stretch when the texture is stretched. This is called \"3x3\" "
"stretching:"
msgstr ""

#: ../../docs/tutorials/gui/gui_skinning.rst:161
msgid ""
"Repeat the steps and add the other assets. There is no hover or disabled "
"image in the example files, so use the same stylebox as in normal. Set the "
"supplied font as the button font and change the font color to black. Soon, "
"your button will look different and retro:"
msgstr ""

#: ../../docs/tutorials/gui/gui_skinning.rst:168
msgid ""
"Save this theme to the .theme file. Go to the 2D editor and create a few "
"buttons:"
msgstr ""

#: ../../docs/tutorials/gui/gui_skinning.rst:173
msgid ""
"Now, go to the root node of the scene and locate the \"theme\" property, "
"replace it with the theme that was just created. It should look like this:"
msgstr ""

#: ../../docs/tutorials/gui/gui_skinning.rst:178
msgid "Congratulations! You have created a reusable GUI Theme!"
msgstr ""

#: ../../docs/tutorials/gui/custom_gui_controls.rst:4
msgid "Custom GUI controls"
msgstr ""

#: ../../docs/tutorials/gui/custom_gui_controls.rst:7
msgid "So many controls..."
msgstr ""

#: ../../docs/tutorials/gui/custom_gui_controls.rst:9
msgid ""
"Yet there are never enough. Creating your own custom controls that act just "
"the way you want them to is an obsession of almost every GUI programmer. "
"Godot provides plenty of them, but they may not work exactly the way you "
"want. Before contacting the developers with a pull-request to support "
"diagonal scrollbars, at least it will be good to know how to create these "
"controls easily from script."
msgstr ""

#: ../../docs/tutorials/gui/custom_gui_controls.rst:19
msgid ""
"For drawing, it is recommended to check the :ref:`doc_custom_drawing_in_2d` "
"tutorial. The same applies. Some functions are worth mentioning due to their "
"usefulness when drawing, so they will be detailed next:"
msgstr ""

#: ../../docs/tutorials/gui/custom_gui_controls.rst:24
msgid "Checking control size"
msgstr ""

#: ../../docs/tutorials/gui/custom_gui_controls.rst:26
msgid ""
"Unlike 2D nodes, \"size\" is important with controls, as it helps to "
"organize them in proper layouts. For this, the :ref:`Control.rect_size "
"<class_Control_property_rect_size>` property is provided. Checking it during "
"``_draw()`` is vital to ensure everything is kept in-bounds."
msgstr ""

#: ../../docs/tutorials/gui/custom_gui_controls.rst:33
msgid "Checking focus"
msgstr ""

#: ../../docs/tutorials/gui/custom_gui_controls.rst:35
msgid ""
"Some controls (such as buttons or text editors) might provide input focus "
"for keyboard or joypad input. Examples of this are entering text or pressing "
"a button. This is controlled with the :ref:`Control.focus_mode "
"<class_Control_property_focus_mode>` property. When drawing, and if the "
"control supports input focus, it is always desired to show some sort of "
"indicator (highlight, box, etc.) to indicate that this is the currently "
"focused control. To check for this status, the :ref:`Control.has_focus() "
"<class_Control_method_has_focus>` method exists. Example"
msgstr ""

#: ../../docs/tutorials/gui/custom_gui_controls.rst:69
msgid "Sizing"
msgstr ""

#: ../../docs/tutorials/gui/custom_gui_controls.rst:71
msgid ""
"As mentioned before, size is important to controls. This allows them to lay "
"out properly, when set into grids, containers, or anchored. Controls, most "
"of the time, provide a *minimum size* to help properly lay them out. For "
"example, if controls are placed vertically on top of each other using a :ref:"
"`VBoxContainer <class_VBoxContainer>`, the minimum size will make sure your "
"custom control is not squished by the other controls in the container."
msgstr ""

#: ../../docs/tutorials/gui/custom_gui_controls.rst:79
msgid ""
"To provide this callback, just override :ref:`Control.get_minimum_size() "
"<class_Control_method_get_minimum_size>`, for example:"
msgstr ""

#: ../../docs/tutorials/gui/custom_gui_controls.rst:96
msgid "Or alternatively, set it via function:"
msgstr ""

#: ../../docs/tutorials/gui/custom_gui_controls.rst:112
#: ../../docs/tutorials/viewports/viewports.rst:38
msgid "Input"
msgstr "입력"

#: ../../docs/tutorials/gui/custom_gui_controls.rst:114
msgid ""
"Controls provide a few helpers to make managing input events much easier "
"than regular nodes."
msgstr ""

#: ../../docs/tutorials/gui/custom_gui_controls.rst:120
msgid ""
"There are a few tutorials about input before this one, but it's worth "
"mentioning that controls have a special input method that only works when:"
msgstr ""

#: ../../docs/tutorials/gui/custom_gui_controls.rst:124
msgid "The mouse pointer is over the control."
msgstr ""

#: ../../docs/tutorials/gui/custom_gui_controls.rst:125
msgid ""
"The button was pressed over this control (control always captures input "
"until button is released)"
msgstr ""

#: ../../docs/tutorials/gui/custom_gui_controls.rst:127
msgid ""
"Control provides keyboard/joypad focus via :ref:`Control.focus_mode "
"<class_Control_property_focus_mode>`."
msgstr ""

#: ../../docs/tutorials/gui/custom_gui_controls.rst:130
msgid ""
"This function is :ref:`Control._gui_input() "
"<class_Control_method__gui_input>`. Simply override it in your control. No "
"processing needs to be set."
msgstr ""

#: ../../docs/tutorials/gui/custom_gui_controls.rst:153
msgid ""
"For more information about events themselves, check the :ref:"
"`doc_inputevent` tutorial."
msgstr ""

#: ../../docs/tutorials/gui/custom_gui_controls.rst:159
msgid ""
"Controls also have many useful notifications for which no dedicated callback "
"exists, but which can be checked with the _notification callback:"
msgstr ""

#: ../../docs/tutorials/gui/size_and_anchors.rst:4
msgid "Size and anchors"
msgstr ""

#: ../../docs/tutorials/gui/size_and_anchors.rst:6
msgid ""
"If a game was always going to be run on the same device and at the same "
"resolution, positioning controls would be a simple matter of setting the "
"position and size of each one of them. Unfortunately, that is rarely the "
"case."
msgstr ""

#: ../../docs/tutorials/gui/size_and_anchors.rst:11
msgid ""
"Only TVs nowadays have a standard resolution and aspect ratio. Everything "
"else, from computer monitors to tablets, portable consoles and mobile phones "
"have different resolutions and aspect ratios."
msgstr ""

#: ../../docs/tutorials/gui/size_and_anchors.rst:15
msgid ""
"There are several ways to handle this, but for now, let's just imagine that "
"the screen resolution has changed and the controls need to be re-positioned. "
"Some will need to follow the bottom of the screen, others the top of the "
"screen, or maybe the right or left margins."
msgstr ""

#: ../../docs/tutorials/gui/size_and_anchors.rst:22
msgid ""
"This is done by editing the *margin* properties of controls. Each control "
"has four margins: left, right, bottom and top. By default, all of them "
"represent a distance in pixels relative to the top-left corner of the parent "
"control or (in case there is no parent control) the viewport."
msgstr ""

#: ../../docs/tutorials/gui/size_and_anchors.rst:29
msgid ""
"When horizontal (left,right) and/or vertical (top,bottom) anchors are "
"changed to 1, the margin values become relative to the bottom-right corner "
"of the parent control or viewport."
msgstr ""

#: ../../docs/tutorials/gui/size_and_anchors.rst:35
msgid ""
"Here, the control is set to expand its bottom-right corner with that of the "
"parent, so when re-sizing the parent, the control will always cover it, "
"leaving a 20 pixel margin:"
msgstr ""

#: ../../docs/tutorials/gui/size_and_anchors.rst:42
#, fuzzy
msgid "Centering a control"
msgstr "프로젝트 생성하기"

#: ../../docs/tutorials/gui/size_and_anchors.rst:44
msgid ""
"To center a control in its parent, set its anchors to 0.5 and each margin to "
"half of its relevant dimension. For example, the code below shows how a "
"TextureRect can be centered in its parent:"
msgstr ""

#: ../../docs/tutorials/gui/size_and_anchors.rst:63
msgid ""
"Setting each anchor to 0.5 moves the reference point for the margins to the "
"center of its parent. From there, we set negative margins so that the "
"control gets its natural size."
msgstr ""

#: ../../docs/tutorials/gui/gui_containers.rst:4
#: ../../docs/development/cpp/core_types.rst:138
msgid "Containers"
msgstr ""

#: ../../docs/tutorials/gui/gui_containers.rst:6
msgid ""
":ref:`Anchors <doc_size_and_anchors>` are an efficient way to handle "
"different aspect ratios for basic multiple resolution handling in GUIs,"
msgstr ""

#: ../../docs/tutorials/gui/gui_containers.rst:9
msgid "For more complex user interfaces, they can become difficult to use."
msgstr ""

#: ../../docs/tutorials/gui/gui_containers.rst:11
msgid ""
"This is often the case of games, such as RPGs, online chats, tycoons or "
"simulations. Another common case where more advanced layout features may be "
"required is in-game tools (or simply just tools)."
msgstr ""

#: ../../docs/tutorials/gui/gui_containers.rst:14
msgid ""
"All these situations require a more capable OS-like user interface, with "
"advanced layout and formatting. For that, :ref:`Containers "
"<class_container>` are more useful."
msgstr ""

#: ../../docs/tutorials/gui/gui_containers.rst:18
#, fuzzy
msgid "Container layout"
msgstr "컨테이너 내장 타입"

#: ../../docs/tutorials/gui/gui_containers.rst:20
msgid ""
"Containers provide a huge amount of layout power (as an example, the Godot "
"editor user interface is entirely done using them):"
msgstr ""

#: ../../docs/tutorials/gui/gui_containers.rst:24
msgid ""
"When a :ref:`Container <class_Container>`-derived node is used, all "
"children :ref:`Control <class_Control>` nodes give up their own positioning "
"ability. This means the *Container* will control their positioning and any "
"attempt to manually alter these nodes will be either ignored or invalidated "
"the next time their parent is resized."
msgstr ""

#: ../../docs/tutorials/gui/gui_containers.rst:28
msgid ""
"Likewise, when a *Container* derived node is resized, all its children will "
"be re-positioned according to it, with a behavior based on the type of "
"container used:"
msgstr ""

#: ../../docs/tutorials/gui/gui_containers.rst:33
msgid "Example of *HBoxContainer* resizing children buttons."
msgstr ""

#: ../../docs/tutorials/gui/gui_containers.rst:35
msgid ""
"The real strength of containers is that they can be nested (as nodes), "
"allowing the creation of very complex layouts that resize effortlessly."
msgstr ""

#: ../../docs/tutorials/gui/gui_containers.rst:40
msgid ""
"When adding a node to a container, the way the container treats each child "
"depends mainly on their *size flags*. These flags can be found by inspecting "
"any control that is a child of a *Container*."
msgstr ""

#: ../../docs/tutorials/gui/gui_containers.rst:45
msgid ""
"Size flags are independent for vertical and horizontal sizing and not all "
"containers make use of them (but most do):"
msgstr ""

#: ../../docs/tutorials/gui/gui_containers.rst:47
msgid ""
"**Fill**: Ensures the control *fills* the designated area within the "
"container. No matter if a control *expands* or not (see below), it will only "
"*fill* the designated area when this is toggled on (it is by default)."
msgstr ""

#: ../../docs/tutorials/gui/gui_containers.rst:49
msgid ""
"**Expand**: Attempts to use as most space as possible in the parent "
"container (in this each axis). Controls that don't expand will be pushed "
"away by those that do. Between those expanding, the amount of space they "
"take from each other is determined by the *Ratio* (see below)."
msgstr ""

#: ../../docs/tutorials/gui/gui_containers.rst:52
msgid ""
"**Shrink Center** When expanding (and if not filling), try to remain at the "
"center of the expanded area (by default it remains at the left or top)."
msgstr ""

#: ../../docs/tutorials/gui/gui_containers.rst:54
msgid ""
"**Ratio** Simple ratio of how much expanded controls take up the available "
"space in relation to each other. A control with \"2\", will take up twice as "
"much available space as one with \"1\"."
msgstr ""

#: ../../docs/tutorials/gui/gui_containers.rst:57
msgid ""
"Experimenting with these flags and different containers is recommended to "
"get a better grasp on how they work."
msgstr ""

#: ../../docs/tutorials/gui/gui_containers.rst:60
#, fuzzy
msgid "Container types"
msgstr "컨테이너 내장 타입"

#: ../../docs/tutorials/gui/gui_containers.rst:62
msgid ""
"Godot provides several container types out of the box as they serve "
"different purposes:"
msgstr ""

#: ../../docs/tutorials/gui/gui_containers.rst:65
msgid "Box Containers"
msgstr ""

#: ../../docs/tutorials/gui/gui_containers.rst:67
msgid ""
"Arrange child controls vertically or horizontally (via :ref:`HBoxContainer "
"<class_HBoxContainer>` and :ref:`VBoxContainer <class_VBoxContainer>`). In "
"the opposite of the designated direction (as in, vertical for an horizontal "
"container), it just expands the children."
msgstr ""

#: ../../docs/tutorials/gui/gui_containers.rst:73
msgid ""
"These containers make use of the *Ratio* property for children with the "
"*Expand* flag set."
msgstr ""

#: ../../docs/tutorials/gui/gui_containers.rst:76
msgid "Grid Container"
msgstr ""

#: ../../docs/tutorials/gui/gui_containers.rst:78
msgid ""
"Arranges child controls in a grid layout (via :ref:`GridContainer "
"<class_GridContainer>`, amount of columns must be specified). Uses both the "
"vertical and horizontal expand flags."
msgstr ""

#: ../../docs/tutorials/gui/gui_containers.rst:84
msgid "Margin Container"
msgstr ""

#: ../../docs/tutorials/gui/gui_containers.rst:86
msgid ""
"Child controls are expanded towards the bounds of this control (via :ref:"
"`MarginContainer <class_MarginContainer>`). Padding will be added on the "
"margins depending on the theme configuration."
msgstr ""

#: ../../docs/tutorials/gui/gui_containers.rst:92
msgid ""
"Again, keep in mind that the margins are a *Theme* value, so they need to be "
"edited at the constants overrides section if desired for a single control:"
msgstr ""

#: ../../docs/tutorials/gui/gui_containers.rst:98
msgid "Tab Container"
msgstr ""

#: ../../docs/tutorials/gui/gui_containers.rst:100
msgid ""
"Allows you to place several child controls stacked on top of each other "
"(via :ref:`TabContainer <class_TabContainer>`), with only the *current* one "
"visible."
msgstr ""

#: ../../docs/tutorials/gui/gui_containers.rst:105
msgid ""
"Changing the *current* one is done via tabs located at the top of the "
"container, via clicking:"
msgstr ""

#: ../../docs/tutorials/gui/gui_containers.rst:109
msgid ""
"The titles are generated from the node names by default (although they can "
"be overridden via *TabContainer* API)."
msgstr ""

#: ../../docs/tutorials/gui/gui_containers.rst:111
msgid ""
"Settings such as tab placement and *StyleBox* can be modified in the "
"*TabContainer* theme overrides."
msgstr ""

#: ../../docs/tutorials/gui/gui_containers.rst:114
msgid "Split Container"
msgstr ""

#: ../../docs/tutorials/gui/gui_containers.rst:116
msgid ""
"Accepts only one or two children controls, then places them side to side "
"with a divisor (via :ref:`HSplitContainer <class_HSplitContainer>` and :ref:"
"`VSplitContainer <class_VSplitContainer>`). Respects both horizontal and "
"vertical flags, as well as *Ratio*."
msgstr ""

#: ../../docs/tutorials/gui/gui_containers.rst:122
msgid ""
"The divisor can be dragged around to change the size relation between both "
"children:"
msgstr ""

#: ../../docs/tutorials/gui/gui_containers.rst:128
msgid "PanelContainer"
msgstr ""

#: ../../docs/tutorials/gui/gui_containers.rst:130
msgid ""
"Simple container that draws a *StyleBox*, then expands children to cover its "
"whole area (via :ref:`PanelContainer <class_PanelContainer>`, respecting the "
"*StyleBox* margins). It respects both the horizontal and vertical size flags."
msgstr ""

#: ../../docs/tutorials/gui/gui_containers.rst:136
msgid ""
"This container is useful as top-level, or just to add custom backgrounds to "
"sections of a layout."
msgstr ""

#: ../../docs/tutorials/gui/gui_containers.rst:139
msgid "ScrollContainer"
msgstr ""

#: ../../docs/tutorials/gui/gui_containers.rst:141
msgid ""
"Accepts a single child node. If this node is bigger than the container, "
"scrollbars will be added to allow panning the node around (via :ref:"
"`ScrollContainer <class_ScrollContainer>`). Both vertical and horizontal "
"size flags are respected, and the behavior can be turned on or off per axis "
"in the properties."
msgstr ""

#: ../../docs/tutorials/gui/gui_containers.rst:148
msgid ""
"Mouse wheel and touch drag (when touch is available) are also valid ways to "
"pan the child control around."
msgstr ""

#: ../../docs/tutorials/gui/gui_containers.rst:152
msgid ""
"As in the example above, one of the most common ways to use this container "
"is together with a *VBoxContainer* as child."
msgstr ""

#: ../../docs/tutorials/gui/gui_containers.rst:156
#, fuzzy
msgid "ViewportContainer"
msgstr "뷰포트"

#: ../../docs/tutorials/gui/gui_containers.rst:158
msgid ""
"This is a special control that will only accept a single *Viewport* node as "
"child, and it will display it as if it was an image (via :ref:"
"`ViewportContainer <class_ViewportContainer>`)."
msgstr ""

#: ../../docs/tutorials/gui/gui_containers.rst:162
#, fuzzy
msgid "Creating custom Containers"
msgstr "맞춤 데이터 타입 생성하기"

#: ../../docs/tutorials/gui/gui_containers.rst:164
msgid ""
"It is possible to easily create a custom container using script. Here is an "
"example of a simple container that fits children to its rect size:"
msgstr ""

#: ../../docs/tutorials/gui/bbcode_in_richtextlabel.rst:4
msgid "BBCode in RichTextLabel"
msgstr ""

#: ../../docs/tutorials/gui/bbcode_in_richtextlabel.rst:9
msgid ""
"Label nodes are great for displaying basic text but they have limits. If you "
"want to change the color of the text, or its alignment, that change affects "
"all of the text in the Label node. You can't have only one part of the text "
"be one color, or only one part of the text be centered. To get around this "
"limitation you would use a :ref:`class_RichTextLabel`."
msgstr ""

#: ../../docs/tutorials/gui/bbcode_in_richtextlabel.rst:15
msgid ""
":ref:`class_RichTextLabel` allows the display of complex text markup in a "
"Control. It has a built-in API for generating the markup, but can also parse "
"a BBCode."
msgstr ""

#: ../../docs/tutorials/gui/bbcode_in_richtextlabel.rst:18
msgid ""
"Note that the BBCode tags can also be used, to some extent, in the :ref:`XML "
"source of the class reference <doc_updating_the_class_reference>`."
msgstr ""

#: ../../docs/tutorials/gui/bbcode_in_richtextlabel.rst:22
#, fuzzy
msgid "Using BBCode"
msgstr "RigidBody2D 사용하기"

#: ../../docs/tutorials/gui/bbcode_in_richtextlabel.rst:24
msgid ""
"For uniformly formatted text you can write in the \"Text\" property, but if "
"you want to use BBCode markup you should use the \"Text\" property in the "
"\"Bb Code\" section instead (``bbcode_text``). Writing to this property will "
"trigger the parsing of your markup to format the text as requested. Before "
"this happens, you need to toggle the \"Enabled\" checkbox in the \"Bb Code\" "
"section (``bbcode_enabled``)."
msgstr ""

#: ../../docs/tutorials/gui/bbcode_in_richtextlabel.rst:32
msgid ""
"For example, ``BBCode [color=blue]blue[/color]`` would render the word \"blue"
"\" with a blue color."
msgstr ""

#: ../../docs/tutorials/gui/bbcode_in_richtextlabel.rst:37
msgid ""
"You'll notice that after writing in the BBCode \"Text\" property the regular "
"\"Text\" property now has the text without the BBCode. While the text "
"property will be updated by the BBCode property, you can't edit the text "
"property or you'll lose the BBCode markup. All changes to the text must be "
"done in the BBCode parameter."
msgstr ""

#: ../../docs/tutorials/gui/bbcode_in_richtextlabel.rst:44
msgid ""
"For BBCode tags such as ``[b]`` (bold) or ``[i]`` (italics) to work you must "
"set up custom fonts for the RichTextLabel node first."
msgstr ""

#: ../../docs/tutorials/gui/bbcode_in_richtextlabel.rst:48
#: ../../docs/development/cpp/inheritance_class_tree.rst:10
msgid "Reference"
msgstr ""

#: ../../docs/tutorials/gui/bbcode_in_richtextlabel.rst:51
#: ../../docs/community/contributing/updating_the_class_reference.rst:231
msgid "Tag"
msgstr ""

#: ../../docs/tutorials/gui/bbcode_in_richtextlabel.rst:53
msgid "**bold**"
msgstr ""

#: ../../docs/tutorials/gui/bbcode_in_richtextlabel.rst:53
msgid "``[b]{text}[/b]``"
msgstr ""

#: ../../docs/tutorials/gui/bbcode_in_richtextlabel.rst:53
msgid "Makes {text} bold."
msgstr ""

#: ../../docs/tutorials/gui/bbcode_in_richtextlabel.rst:55
msgid "**italics**"
msgstr ""

#: ../../docs/tutorials/gui/bbcode_in_richtextlabel.rst:55
msgid "``[i]{text}[/i]``"
msgstr ""

#: ../../docs/tutorials/gui/bbcode_in_richtextlabel.rst:55
msgid "Makes {text} italics."
msgstr ""

#: ../../docs/tutorials/gui/bbcode_in_richtextlabel.rst:57
msgid "**underline**"
msgstr ""

#: ../../docs/tutorials/gui/bbcode_in_richtextlabel.rst:57
msgid "``[u]{text}[/u]``"
msgstr ""

#: ../../docs/tutorials/gui/bbcode_in_richtextlabel.rst:57
msgid "Makes {text} underline."
msgstr ""

#: ../../docs/tutorials/gui/bbcode_in_richtextlabel.rst:59
msgid "**strikethrough**"
msgstr ""

#: ../../docs/tutorials/gui/bbcode_in_richtextlabel.rst:59
msgid "``[s]{text}[/s]``"
msgstr ""

#: ../../docs/tutorials/gui/bbcode_in_richtextlabel.rst:59
msgid "Makes {text} strikethrough."
msgstr ""

#: ../../docs/tutorials/gui/bbcode_in_richtextlabel.rst:61
msgid "**code**"
msgstr ""

#: ../../docs/tutorials/gui/bbcode_in_richtextlabel.rst:61
msgid "``[code]{text}[/code]``"
msgstr ""

#: ../../docs/tutorials/gui/bbcode_in_richtextlabel.rst:61
msgid "Makes {text} monospace."
msgstr ""

#: ../../docs/tutorials/gui/bbcode_in_richtextlabel.rst:63
msgid "**center**"
msgstr ""

#: ../../docs/tutorials/gui/bbcode_in_richtextlabel.rst:63
msgid "``[center]{text}[/center]``"
msgstr ""

#: ../../docs/tutorials/gui/bbcode_in_richtextlabel.rst:63
msgid "Makes {text} centered."
msgstr ""

#: ../../docs/tutorials/gui/bbcode_in_richtextlabel.rst:65
msgid "**right**"
msgstr ""

#: ../../docs/tutorials/gui/bbcode_in_richtextlabel.rst:65
msgid "``[right]{text}[/right]``"
msgstr ""

#: ../../docs/tutorials/gui/bbcode_in_richtextlabel.rst:65
msgid "Makes {text} right-aligned."
msgstr ""

#: ../../docs/tutorials/gui/bbcode_in_richtextlabel.rst:67
msgid "**fill**"
msgstr ""

#: ../../docs/tutorials/gui/bbcode_in_richtextlabel.rst:67
msgid "``[fill]{text}[/fill]``"
msgstr ""

#: ../../docs/tutorials/gui/bbcode_in_richtextlabel.rst:67
msgid "Makes {text} fill width."
msgstr ""

#: ../../docs/tutorials/gui/bbcode_in_richtextlabel.rst:69
msgid "**indent**"
msgstr ""

#: ../../docs/tutorials/gui/bbcode_in_richtextlabel.rst:69
msgid "``[indent]{text}[/indent]``"
msgstr ""

#: ../../docs/tutorials/gui/bbcode_in_richtextlabel.rst:69
msgid "Increase indent level of {text}."
msgstr ""

#: ../../docs/tutorials/gui/bbcode_in_richtextlabel.rst:71
msgid "**url**"
msgstr ""

#: ../../docs/tutorials/gui/bbcode_in_richtextlabel.rst:71
msgid "``[url]{url}[/url]``"
msgstr ""

#: ../../docs/tutorials/gui/bbcode_in_richtextlabel.rst:71
msgid "Show {url} as such."
msgstr ""

#: ../../docs/tutorials/gui/bbcode_in_richtextlabel.rst:73
msgid "**url (ref)**"
msgstr ""

#: ../../docs/tutorials/gui/bbcode_in_richtextlabel.rst:73
msgid "``[url=<url>]{text}[/url]``"
msgstr ""

#: ../../docs/tutorials/gui/bbcode_in_richtextlabel.rst:73
msgid "Makes {text} reference <url>."
msgstr ""

#: ../../docs/tutorials/gui/bbcode_in_richtextlabel.rst:75
msgid "**image**"
msgstr ""

#: ../../docs/tutorials/gui/bbcode_in_richtextlabel.rst:75
msgid "``[img]{path}[/img]``"
msgstr ""

#: ../../docs/tutorials/gui/bbcode_in_richtextlabel.rst:75
msgid "Insert image at resource {path}."
msgstr ""

#: ../../docs/tutorials/gui/bbcode_in_richtextlabel.rst:77
#: ../../docs/tutorials/gui/bbcode_in_richtextlabel.rst:79
#, fuzzy
msgid "**resized image**"
msgstr "**release**"

#: ../../docs/tutorials/gui/bbcode_in_richtextlabel.rst:77
msgid "``[img=<width>]{path}[/img]``"
msgstr ""

#: ../../docs/tutorials/gui/bbcode_in_richtextlabel.rst:77
msgid "Insert image at resource {path} using <width> (keeps ratio)."
msgstr ""

#: ../../docs/tutorials/gui/bbcode_in_richtextlabel.rst:79
msgid "``[img=<width>x<height>]{path}[/img]``"
msgstr ""

#: ../../docs/tutorials/gui/bbcode_in_richtextlabel.rst:79
msgid "Insert image at resource {path} using <width> & <height>."
msgstr ""

#: ../../docs/tutorials/gui/bbcode_in_richtextlabel.rst:81
msgid "**font**"
msgstr ""

#: ../../docs/tutorials/gui/bbcode_in_richtextlabel.rst:81
msgid "``[font=<path>]{text}[/font]``"
msgstr ""

#: ../../docs/tutorials/gui/bbcode_in_richtextlabel.rst:81
msgid "Use custom font at <path> for {text}."
msgstr ""

#: ../../docs/tutorials/gui/bbcode_in_richtextlabel.rst:83
msgid "**color**"
msgstr ""

#: ../../docs/tutorials/gui/bbcode_in_richtextlabel.rst:83
msgid "``[color=<code/name>]{text}[/color]``"
msgstr ""

#: ../../docs/tutorials/gui/bbcode_in_richtextlabel.rst:83
msgid "Change {text} color; use name or # format, such as #ff00ff."
msgstr ""

#: ../../docs/tutorials/gui/bbcode_in_richtextlabel.rst:87
msgid "Built-in color names"
msgstr ""

#: ../../docs/tutorials/gui/bbcode_in_richtextlabel.rst:89
msgid "List of valid color names for the [color=<name>] tag:"
msgstr ""

#: ../../docs/tutorials/gui/bbcode_in_richtextlabel.rst:91
msgid "aqua"
msgstr ""

#: ../../docs/tutorials/gui/bbcode_in_richtextlabel.rst:92
msgid "black"
msgstr ""

#: ../../docs/tutorials/gui/bbcode_in_richtextlabel.rst:93
msgid "blue"
msgstr ""

#: ../../docs/tutorials/gui/bbcode_in_richtextlabel.rst:94
msgid "fuchsia"
msgstr ""

#: ../../docs/tutorials/gui/bbcode_in_richtextlabel.rst:95
msgid "gray"
msgstr ""

#: ../../docs/tutorials/gui/bbcode_in_richtextlabel.rst:96
msgid "green"
msgstr ""

#: ../../docs/tutorials/gui/bbcode_in_richtextlabel.rst:97
msgid "lime"
msgstr ""

#: ../../docs/tutorials/gui/bbcode_in_richtextlabel.rst:98
msgid "maroon"
msgstr ""

#: ../../docs/tutorials/gui/bbcode_in_richtextlabel.rst:99
msgid "navy"
msgstr ""

#: ../../docs/tutorials/gui/bbcode_in_richtextlabel.rst:100
msgid "purple"
msgstr ""

#: ../../docs/tutorials/gui/bbcode_in_richtextlabel.rst:101
msgid "red"
msgstr ""

#: ../../docs/tutorials/gui/bbcode_in_richtextlabel.rst:102
msgid "silver"
msgstr ""

#: ../../docs/tutorials/gui/bbcode_in_richtextlabel.rst:103
msgid "teal"
msgstr ""

#: ../../docs/tutorials/gui/bbcode_in_richtextlabel.rst:104
msgid "white"
msgstr ""

#: ../../docs/tutorials/gui/bbcode_in_richtextlabel.rst:105
msgid "yellow"
msgstr ""

#: ../../docs/tutorials/gui/bbcode_in_richtextlabel.rst:108
msgid "Hexadecimal color codes"
msgstr ""

#: ../../docs/tutorials/gui/bbcode_in_richtextlabel.rst:110
msgid ""
"For opaque RGB colors, any valid 6-digit hexadecimal code is supported, e.g. "
"``[color=#ffffff]white[/color]``."
msgstr ""

#: ../../docs/tutorials/gui/bbcode_in_richtextlabel.rst:112
msgid ""
"For transparent RGB colors, any 8-digit hexadecimal code can be used, e.g. "
"``[color=#88ffffff]translucent white[/color]``. In this case, note that the "
"alpha channel is the **first** component of the color code, not the last one."
msgstr ""

#: ../../docs/tutorials/gui/bbcode_in_richtextlabel.rst:116
msgid "Image vertical offset"
msgstr ""

#: ../../docs/tutorials/gui/bbcode_in_richtextlabel.rst:118
msgid "You use a custom font for your image in order to align it vertically."
msgstr ""

#: ../../docs/tutorials/gui/bbcode_in_richtextlabel.rst:120
#, fuzzy
msgid "Create a ``BitmapFont`` resource"
msgstr "자신의 리소스 만들기"

#: ../../docs/tutorials/gui/bbcode_in_richtextlabel.rst:121
msgid ""
"Set this bitmap font with a positive value for the ``ascent`` property, "
"that's your height offset"
msgstr ""

#: ../../docs/tutorials/gui/bbcode_in_richtextlabel.rst:122
msgid ""
"Set the BBCode tag this way: ``[font=<font-path>][img]{image-path}[/img][/"
"font]``"
msgstr ""

#: ../../docs/tutorials/gui/bbcode_in_richtextlabel.rst:125
#, fuzzy
msgid "Animation effects"
msgstr "애니메이션 설정"

#: ../../docs/tutorials/gui/bbcode_in_richtextlabel.rst:127
msgid ""
"BBCode can also be used to create different text animation effects. Five "
"customizable effects are provided out of the box, and you can easily create "
"your own."
msgstr ""

#: ../../docs/tutorials/gui/bbcode_in_richtextlabel.rst:131
msgid "Wave"
msgstr ""

#: ../../docs/tutorials/gui/bbcode_in_richtextlabel.rst:135
msgid ""
"Wave makes the text go up and down. Its tag format is ``[wave amp=50 freq=2]"
"[/wave]``. ``amp`` controls how high and low the effect goes, and ``freq`` "
"controls how fast the text goes up and down."
msgstr ""

#: ../../docs/tutorials/gui/bbcode_in_richtextlabel.rst:140
msgid "Tornado"
msgstr ""

#: ../../docs/tutorials/gui/bbcode_in_richtextlabel.rst:144
msgid ""
"Tornao makes the text move around in a circle. Its tag format is ``[tornado "
"radius=5 freq=2][/tornado]``. ``radius`` is the radius of the circle that "
"controls the offset, ``freq`` is how fast the text moves in a circle."
msgstr ""

#: ../../docs/tutorials/gui/bbcode_in_richtextlabel.rst:150
msgid "Shake"
msgstr ""

#: ../../docs/tutorials/gui/bbcode_in_richtextlabel.rst:154
msgid ""
"Shake makes the text shake. Its tag format is ``[shake rate=5 level=10][/"
"shake]``. ``rate`` controls how fast the text shakes, ``level`` controls how "
"far the text is offset from the origin."
msgstr ""

#: ../../docs/tutorials/gui/bbcode_in_richtextlabel.rst:159
msgid "Fade"
msgstr ""

#: ../../docs/tutorials/gui/bbcode_in_richtextlabel.rst:163
msgid ""
"Fade creates a fade effect over the text that is not animated. Its tag "
"format is ``[fade start=4 length=14][/fade]``. ``start`` controls the "
"starting position of the falloff relative to where the fade command is "
"inserted, ``length`` controls over how many characters should the fade out "
"take place."
msgstr ""

#: ../../docs/tutorials/gui/bbcode_in_richtextlabel.rst:170
msgid "Rainbow"
msgstr ""

#: ../../docs/tutorials/gui/bbcode_in_richtextlabel.rst:174
msgid ""
"Rainbow gives the text a rainbow color that changes over time. Its tag "
"format is ``[rainbow freq=0.2 sat=10 val=20][/rainbow]``. ``freq`` is the "
"number of full rainbow cycles per second, ``sat`` is the saturation of the "
"rainbow, ``val`` is the value of the rainbow."
msgstr ""

#: ../../docs/tutorials/gui/bbcode_in_richtextlabel.rst:180
msgid "Custom BBCode tags and text effects"
msgstr ""

#: ../../docs/tutorials/gui/bbcode_in_richtextlabel.rst:182
msgid ""
"You can extend the :ref:`class_RichTextEffect` resource type to create your "
"own custom BBCode tags. You begin by extending the :ref:"
"`class_RichTextEffect` resource type. Add the ``tool`` prefix to your "
"GDScript file if you wish to have these custom effects run within the editor "
"itself. The RichTextLabel does not need to have a script attached, nor does "
"it need to be running in ``tool`` mode."
msgstr ""

#: ../../docs/tutorials/gui/bbcode_in_richtextlabel.rst:188
msgid ""
"There is only one function that you need to extend: "
"``_process_custom_fx(char_fx)``. Optionally, you can also provide a custom "
"BBCode identifier simply by adding a member name ``bbcode``. The code will "
"check the ``bbcode`` property automatically or will use the name of the file "
"to determine what the BBCode tag should be."
msgstr ""

#: ../../docs/tutorials/gui/bbcode_in_richtextlabel.rst:194
msgid "``_process_custom_fx``"
msgstr ""

#: ../../docs/tutorials/gui/bbcode_in_richtextlabel.rst:196
msgid ""
"This is where the logic of each effect takes place and is called once per "
"character during the draw phase of text rendering. This passes in a :ref:"
"`class_CharFXTransform` object, which holds a few variables to control how "
"the associated character is rendered:"
msgstr ""

#: ../../docs/tutorials/gui/bbcode_in_richtextlabel.rst:200
msgid ""
"``identity`` specifies which custom effect is being processed. You should "
"use that for code flow control."
msgstr ""

#: ../../docs/tutorials/gui/bbcode_in_richtextlabel.rst:202
msgid ""
"``relative_index`` tells you how far into a given custom effect block you "
"are in as an index."
msgstr ""

#: ../../docs/tutorials/gui/bbcode_in_richtextlabel.rst:204
msgid ""
"``absolute_index`` tells you how far into the entire text you are as an "
"index."
msgstr ""

#: ../../docs/tutorials/gui/bbcode_in_richtextlabel.rst:205
msgid ""
"``elapsed_time`` is the total amount of time the text effect has been "
"running."
msgstr ""

#: ../../docs/tutorials/gui/bbcode_in_richtextlabel.rst:206
msgid ""
"``visible`` will tell you whether the character is visible or not and will "
"also allow you to hide a given portion of text."
msgstr ""

#: ../../docs/tutorials/gui/bbcode_in_richtextlabel.rst:208
msgid ""
"``offset`` is an offset position relative to where the given character "
"should render under normal circumstances."
msgstr ""

#: ../../docs/tutorials/gui/bbcode_in_richtextlabel.rst:210
msgid "``color`` is the color of a given character."
msgstr ""

#: ../../docs/tutorials/gui/bbcode_in_richtextlabel.rst:211
msgid ""
"Finally, ``env`` is a :ref:`class_Dictionary` of parameters assigned to a "
"given custom effect. You can use :ref:`get() <class_Dictionary_method_get>` "
"with an optional default value to retrieve each parameter, if specified by "
"the user. For example ``[custom_fx spread=0.5 color=#FFFF00]test[/"
"custom_fx]`` would have a float ``spread`` and Color ``color`` parameters in "
"its ` `env`` Dictionary. See below for more usage examples."
msgstr ""

#: ../../docs/tutorials/gui/bbcode_in_richtextlabel.rst:217
msgid ""
"The last thing to note about this function is that it is necessary to return "
"a boolean ``true`` value to verify that the effect processed correctly. This "
"way, if there's a problem with rendering a given character, it will back out "
"of rendering custom effects entirely until the user fixes whatever error "
"cropped up in their custom effect logic."
msgstr ""

#: ../../docs/tutorials/gui/bbcode_in_richtextlabel.rst:222
#, fuzzy
msgid "Here are some examples of custom effects:"
msgstr "어떻게 작동하는 지의 예제입니다:"

#: ../../docs/tutorials/gui/bbcode_in_richtextlabel.rst:225
msgid "Ghost"
msgstr ""

#: ../../docs/tutorials/gui/bbcode_in_richtextlabel.rst:247
msgid "Pulse"
msgstr ""

#: ../../docs/tutorials/gui/bbcode_in_richtextlabel.rst:273
#, fuzzy
msgid "Matrix"
msgstr "행렬 팁"

#: ../../docs/tutorials/gui/bbcode_in_richtextlabel.rst:307
#, fuzzy
msgid "This will add a few new BBCode commands, which can be used like so:"
msgstr "이름을 더블 클릭하여 이름을 바꿀 수 있는 새 함수가 추가됩니다:"

#: ../../docs/tutorials/viewports/viewports.rst:9
msgid ""
"Think of a :ref:`Viewport <class_Viewport>` as a screen onto which the game "
"is projected. In order to see the game, we need to have a surface on which "
"to draw it; that surface is the Root :ref:`Viewport <class_Viewport>`."
msgstr ""

#: ../../docs/tutorials/viewports/viewports.rst:16
msgid ""
":ref:`Viewports <class_Viewport>` can also be added to the scene so that "
"there are multiple surfaces to draw on. When we are drawing to a :ref:"
"`Viewport <class_Viewport>` that is not the Root, we call it a render "
"target. We can access the contents of a render target by accessing its "
"corresponding :ref:`texture <class_ViewportTexture>`. By using a :ref:"
"`Viewport <class_Viewport>` as a render target, we can either render "
"multiple scenes simultaneously or we can render to a :ref:`texture "
"<class_ViewportTexture>` which is applied to an object in the scene, for "
"example a dynamic skybox."
msgstr ""

#: ../../docs/tutorials/viewports/viewports.rst:25
msgid ""
":ref:`Viewports <class_Viewport>` have a variety of use cases, including:"
msgstr ""

#: ../../docs/tutorials/viewports/viewports.rst:27
msgid "Rendering 3D objects within a 2D game"
msgstr ""

#: ../../docs/tutorials/viewports/viewports.rst:28
msgid "Rendering 2D elements in a 3D game"
msgstr ""

#: ../../docs/tutorials/viewports/viewports.rst:29
msgid "Rendering dynamic textures"
msgstr ""

#: ../../docs/tutorials/viewports/viewports.rst:30
msgid "Generating procedural textures at runtime"
msgstr ""

#: ../../docs/tutorials/viewports/viewports.rst:31
msgid "Rendering multiple cameras in the same scene"
msgstr ""

#: ../../docs/tutorials/viewports/viewports.rst:33
msgid ""
"What all these use cases have in common is that you are given the ability to "
"draw objects to a texture as if it were another screen and can then choose "
"what to do with the resulting texture."
msgstr ""

#: ../../docs/tutorials/viewports/viewports.rst:40
msgid ""
":ref:`Viewports <class_Viewport>` are also responsible for delivering "
"properly adjusted and scaled input events to all their children nodes. "
"Typically, input is received by the nearest :ref:`Viewport <class_Viewport>` "
"in the tree, but you can set :ref:`Viewports <class_Viewport>` not to "
"receive input by checking 'Disable Input' to 'on'; this will allow the next "
"nearest :ref:`Viewport <class_Viewport>` in the tree to capture the input."
msgstr ""

#: ../../docs/tutorials/viewports/viewports.rst:48
msgid ""
"For more information on how Godot handles input, please read the :ref:`Input "
"Event Tutorial<doc_inputevent>`."
msgstr ""

#: ../../docs/tutorials/viewports/viewports.rst:51
msgid "Listener"
msgstr ""

#: ../../docs/tutorials/viewports/viewports.rst:53
msgid ""
"Godot supports 3D sound (in both 2D and 3D nodes); more on this can be found "
"in the :ref:`Audio Streams Tutorial<doc_audio_streams>`. For this type of "
"sound to be audible, the :ref:`Viewport <class_Viewport>` needs to be "
"enabled as a listener (for 2D or 3D). If you are using a custom :ref:"
"`Viewport <class_Viewport>` to display your :ref:`World <class_World>`, "
"don't forget to enable this!"
msgstr ""

#: ../../docs/tutorials/viewports/viewports.rst:60
msgid "Cameras (2D & 3D)"
msgstr ""

#: ../../docs/tutorials/viewports/viewports.rst:62
msgid ""
"When using a :ref:`Camera <class_Camera>` / :ref:`Camera2D "
"<class_Camera2D>`, cameras will always display on the closest parent :ref:"
"`Viewport <class_Viewport>` (going towards the root). For example, in the "
"following hierarchy:"
msgstr ""

#: ../../docs/tutorials/viewports/viewports.rst:69
msgid ""
"CameraA will display on the Root :ref:`Viewport <class_Viewport>` and it "
"will draw MeshA. CameraB will be captured by the :ref:`Viewport "
"<class_Viewport>` Node along with MeshB. Even though MeshB is in the scene "
"hierarchy, it will still not be drawn to the Root :ref:`Viewport "
"<class_Viewport>`. Similarly MeshA will not be visible from the :ref:"
"`Viewport <class_Viewport>` node because :ref:`Viewport <class_Viewport>` "
"nodes only capture nodes below them in the hierarchy."
msgstr ""

#: ../../docs/tutorials/viewports/viewports.rst:75
msgid ""
"There can only be one active camera per :ref:`Viewport <class_Viewport>`, so "
"if there is more than one, make sure that the desired one has the \"current"
"\" property set, or make it the current camera by calling:"
msgstr ""
"뷰포트 당 하나의 활성 카메라만 있을 수 있습니다. 둘 이상 이라면 원하는 카메라"
"의 \"current\" 속성을 설정해야 합니다. 또는 다음과 같은 호출을 통해 현재 카메"
"라를 만들 수 있습니다:"

#: ../../docs/tutorials/viewports/viewports.rst:83
msgid ""
"By default, cameras will render all objects in their world. In 3D, cameras "
"can use their :ref:`cull_mask <class_Camera_property_cull_mask>` property "
"combined with the :ref:`VisualInstance's <class_VisualInstance>` :ref:`layer "
"<class_VisualInstance_property_layers>` property to restrict which objects "
"are rendered."
msgstr ""

#: ../../docs/tutorials/viewports/viewports.rst:89
msgid "Scale & stretching"
msgstr ""

#: ../../docs/tutorials/viewports/viewports.rst:91
msgid ""
":ref:`Viewports <class_Viewport>` have a \"size\" property, which represents "
"the size of the :ref:`Viewport <class_Viewport>` in pixels. For :ref:"
"`Viewports <class_Viewport>` which are children of :ref:`ViewportContainers "
"<class_viewportcontainer>`, these values are overridden, but for all others, "
"this sets their resolution."
msgstr ""

#: ../../docs/tutorials/viewports/viewports.rst:95
msgid ""
"It is also possible to scale the 2D content and make the :ref:`Viewport "
"<class_Viewport>` resolution different from the one specified in size, by "
"calling:"
msgstr ""

#: ../../docs/tutorials/viewports/viewports.rst:103
msgid ""
"The root :ref:`Viewport <class_Viewport>` uses this for the stretch options "
"in the project settings. For more information on scaling and stretching "
"visit the :ref:`Multiple Resolutions Tutorial <doc_multiple_resolutions>`"
msgstr ""

#: ../../docs/tutorials/viewports/viewports.rst:107
msgid "Worlds"
msgstr ""

#: ../../docs/tutorials/viewports/viewports.rst:109
msgid ""
"For 3D, a :ref:`Viewport <class_Viewport>` will contain a :ref:`World "
"<class_World>`. This is basically the universe that links physics and "
"rendering together. Spatial-base nodes will register using the :ref:`World "
"<class_World>` of the closest :ref:`Viewport <class_Viewport>`. By default, "
"newly created :ref:`Viewports <class_Viewport>` do not contain a :ref:`World "
"<class_World>` but use the same as their parent :ref:`Viewport "
"<class_Viewport>` (the root :ref:`Viewport <class_Viewport>` always contains "
"a :ref:`World <class_World>`, which is the one objects are rendered to by "
"default). A :ref:`World <class_World>` can be set in a :ref:`Viewport "
"<class_Viewport>` using the \"world\" property, and that will separate all "
"children nodes of that :ref:`Viewport <class_Viewport>` from interacting "
"with the parent :ref:`Viewport's <class_Viewport>` :ref:`World "
"<class_World>`. This is especially useful in scenarios where, for example, "
"you might want to show a separate character in 3D imposed over the game "
"(like in StarCraft)."
msgstr ""

#: ../../docs/tutorials/viewports/viewports.rst:121
msgid ""
"As a helper for situations where you want to create :ref:`Viewports "
"<class_Viewport>` that display single objects and don't want to create a :"
"ref:`World <class_World>`, :ref:`Viewport <class_Viewport>` has the option "
"to use its own :ref:`World <class_World>`. This is useful when you want to "
"instance 3D characters or objects in a 2D :ref:`World <class_World2D>`."
msgstr ""

#: ../../docs/tutorials/viewports/viewports.rst:126
msgid ""
"For 2D, each :ref:`Viewport <class_Viewport>` always contains its own :ref:"
"`World2D <class_World2D>`. This suffices in most cases, but in case sharing "
"them may be desired, it is possible to do so by setting the :ref:`Viewport's "
"<class_Viewport>` :ref:`World2D <class_World2D>` manually."
msgstr ""

#: ../../docs/tutorials/viewports/viewports.rst:130
msgid ""
"For an example of how this works, see the demo projects `3D in 2D <https://"
"github.com/godotengine/godot-demo-projects/tree/master/viewport/3d_in_2d>`_ "
"and `2D in 3D <https://github.com/godotengine/godot-demo-projects/tree/"
"master/viewport/2d_in_3d>`_ respectively."
msgstr ""

#: ../../docs/tutorials/viewports/viewports.rst:133
msgid "Capture"
msgstr "캡처"

#: ../../docs/tutorials/viewports/viewports.rst:135
msgid ""
"It is possible to query a capture of the :ref:`Viewport <class_Viewport>` "
"contents. For the root :ref:`Viewport <class_Viewport>`, this is effectively "
"a screen capture. This is done with the following code:"
msgstr ""

#: ../../docs/tutorials/viewports/viewports.rst:152
msgid ""
"But if you use this in ``_ready()`` or from the first frame of the :ref:"
"`Viewport's <class_Viewport>` initialization, you will get an empty texture "
"because there is nothing to get as texture. You can deal with it using (for "
"example):"
msgstr ""

#: ../../docs/tutorials/viewports/viewports.rst:163
msgid "Viewport Container"
msgstr ""

#: ../../docs/tutorials/viewports/viewports.rst:165
msgid ""
"If the :ref:`Viewport <class_Viewport>` is a child of a :ref:"
"`ViewportContainer <class_viewportcontainer>`, it will become active and "
"display anything it has inside. The layout looks like this:"
msgstr ""

#: ../../docs/tutorials/viewports/viewports.rst:169
msgid ""
"The :ref:`Viewport <class_Viewport>` will cover the area of its parent :ref:"
"`ViewportContainer <class_viewportcontainer>` completely if :ref:"
"`Stretch<class_viewportcontainer_property_stretch>` is set to ``true`` in :"
"ref:`ViewportContainer <class_viewportcontainer>`. Note: The size of the :"
"ref:`ViewportContainer <class_viewportcontainer>` cannot be smaller than the "
"size of the :ref:`Viewport <class_Viewport>`."
msgstr ""

#: ../../docs/tutorials/viewports/viewports.rst:176
msgid ""
"Due to the fact that the :ref:`Viewport <class_Viewport>` is an entryway "
"into another rendering surface, it exposes a few rendering properties that "
"can be different from the project settings. The first is MSAA; you can "
"choose to use a different level of MSAA for each :ref:`Viewport "
"<class_Viewport>`; the default behavior is DISABLED. You can also set the :"
"ref:`Viewport <class_Viewport>` to use HDR, HDR is very useful for when you "
"want to store values in the texture that are outside the range 0.0 - 1.0."
msgstr ""

#: ../../docs/tutorials/viewports/viewports.rst:181
msgid ""
"If you know how the :ref:`Viewport <class_Viewport>` is going to be used, "
"you can set its Usage to either 3D or 2D. Godot will then restrict how the :"
"ref:`Viewport <class_Viewport>` is drawn to in accordance with your choice; "
"default is 3D. The 2D usage mode is slightly faster and uses less memory "
"compared to the 3D one. It's a good idea to set the :ref:`Viewport "
"<class_Viewport>`'s Usage property to 2D if your viewport doesn't render "
"anything in 3D."
msgstr ""

#: ../../docs/tutorials/viewports/viewports.rst:187
msgid ""
"If you need to render 3D shadows in the viewport, make sure to set the "
"viewport's *Shadow Atlas Size* property to a value higher than 0. Otherwise, "
"shadows won't be rendered. For reference, the Project Settings define it to "
"4096 by default."
msgstr ""

#: ../../docs/tutorials/viewports/viewports.rst:190
msgid ""
"Godot also provides a way of customizing how everything is drawn inside :ref:"
"`Viewports <class_Viewport>` using “Debug Draw”. Debug Draw allows you to "
"specify one of four options for how the :ref:`Viewport <class_Viewport>` "
"will display things drawn inside it. Debug Draw is disabled by default."
msgstr ""

#: ../../docs/tutorials/viewports/viewports.rst:196
msgid "*A scene drawn with Debug Draw disabled*"
msgstr ""

#: ../../docs/tutorials/viewports/viewports.rst:198
msgid ""
"The other three options are Unshaded, Overdraw, and Wireframe. Unshaded "
"draws the scene without using lighting information so all the objects appear "
"flatly colored the color of their albedo."
msgstr ""

#: ../../docs/tutorials/viewports/viewports.rst:204
msgid "*The same scene with Debug Draw set to Unshaded*"
msgstr ""

#: ../../docs/tutorials/viewports/viewports.rst:206
msgid ""
"Overdraw draws the meshes semi-transparent with an additive blend so you can "
"see how the meshes overlap."
msgstr ""

#: ../../docs/tutorials/viewports/viewports.rst:210
msgid "*The same scene with Debug Draw set to Overdraw*"
msgstr ""

#: ../../docs/tutorials/viewports/viewports.rst:212
msgid ""
"Lastly, Wireframe draws the scene using only the edges of triangles in the "
"meshes."
msgstr ""

#: ../../docs/tutorials/viewports/viewports.rst:216
msgid ""
"The effects of the Wireframe mode are only visible in the editor, not while "
"the project is running."
msgstr ""

#: ../../docs/tutorials/viewports/viewports.rst:219
msgid "Render target"
msgstr ""

#: ../../docs/tutorials/viewports/viewports.rst:221
msgid ""
"When rendering to a :ref:`Viewport <class_Viewport>`, whatever is inside "
"will not be visible in the scene editor. To display the contents, you have "
"to draw the :ref:`Viewport's <class_Viewport>` :ref:`ViewportTexture "
"<class_ViewportTexture>` somewhere. This can be requested via code using "
"(for example):"
msgstr ""

#: ../../docs/tutorials/viewports/viewports.rst:231
msgid ""
"Or it can be assigned in the editor by selecting \"New ViewportTexture\""
msgstr ""

#: ../../docs/tutorials/viewports/viewports.rst:235
msgid ""
"and then selecting the :ref:`Viewport <class_Viewport>` you want to use."
msgstr ""

#: ../../docs/tutorials/viewports/viewports.rst:239
msgid ""
"Every frame, the :ref:`Viewport <class_Viewport>`'s texture is cleared away "
"with the default clear color (or a transparent color if :ref:`Transparent "
"BG<class_Viewport_property_transparent_bg>` is set to ``true``). This can be "
"changed by setting :ref:`Clear "
"Mode<class_Viewport_property_render_target_clear_mode>` to Never or Next "
"Frame. As the name implies, Never means the texture will never be cleared, "
"while next frame will clear the texture on the next frame and then set "
"itself to Never."
msgstr ""

#: ../../docs/tutorials/viewports/viewports.rst:244
msgid ""
"By default, re-rendering of the :ref:`Viewport <class_Viewport>` happens "
"when the :ref:`Viewport <class_Viewport>`'s :ref:`ViewportTexture "
"<class_ViewportTexture>` has been drawn in a frame. If visible, it will be "
"rendered; otherwise, it will not. This behavior can be changed to manual "
"rendering (once), or always render, no matter if visible or not. This "
"flexibility allows users to render an image once and then use the texture "
"without incurring the cost of rendering every frame."
msgstr ""

#: ../../docs/tutorials/viewports/viewports.rst:252
msgid ""
"Make sure to check the Viewport demos! Viewport folder in the demos archive "
"available to download, or https://github.com/godotengine/godot-demo-projects/"
"tree/master/viewport"
msgstr ""

#: ../../docs/tutorials/viewports/multiple_resolutions.rst:4
msgid "Multiple resolutions"
msgstr ""

#: ../../docs/tutorials/viewports/multiple_resolutions.rst:7
#, fuzzy
msgid "The problem of multiple resolutions"
msgstr "전환(transition) 유형"

#: ../../docs/tutorials/viewports/multiple_resolutions.rst:9
msgid ""
"Developers often have trouble understanding how to best support multiple "
"resolutions in their games. For desktop and console games, this is more or "
"less straightforward, as most screen aspect ratios are 16:9 and resolutions "
"are standard (720p, 1080p, 1440p, 4K, …)."
msgstr ""

#: ../../docs/tutorials/viewports/multiple_resolutions.rst:14
msgid ""
"For mobile games, at first, it was easy. For many years, the iPhone and iPad "
"used the same resolution. When *Retina* was implemented, they just doubled "
"the pixel density; most developers had to supply assets in default and "
"double resolutions."
msgstr ""

#: ../../docs/tutorials/viewports/multiple_resolutions.rst:19
msgid ""
"Nowadays, this is no longer the case, as there are plenty of different "
"screen sizes, densities, and aspect ratios. Non-conventional sizes are also "
"becoming increasingly popular, such as ultrawide displays."
msgstr ""

#: ../../docs/tutorials/viewports/multiple_resolutions.rst:23
msgid ""
"For 3D games, there is not much of a need to support multiple resolutions "
"(from the aesthetic point of view). The 3D geometry will just fill the "
"screen based on the field of view, disregarding the aspect ratio. The main "
"reason one may want to support this, in this case, is for *performance* "
"reasons (running in lower resolution to increase frames per second)."
msgstr ""

#: ../../docs/tutorials/viewports/multiple_resolutions.rst:29
msgid ""
"For 2D and game UIs, this is a different matter, as art needs to be created "
"using specific pixel sizes in software such as Photoshop, GIMP or Krita."
msgstr ""

#: ../../docs/tutorials/viewports/multiple_resolutions.rst:32
msgid ""
"Since layouts, aspect ratios, resolutions, and pixel densities can change so "
"much, it is no longer possible to design UIs for every specific screen. "
"Another method must be used."
msgstr ""

#: ../../docs/tutorials/viewports/multiple_resolutions.rst:37
msgid "One size fits all"
msgstr ""

#: ../../docs/tutorials/viewports/multiple_resolutions.rst:39
msgid ""
"The most common approach is to use a single *base* resolution and then fit "
"it to everything else. This resolution is how most players are expected to "
"play the game (given their hardware). For mobile, Google has useful `stats "
"<https://developer.android.com/about/dashboards>`_ online, and for desktop, "
"Steam `also does <https://store.steampowered.com/hwsurvey/>`_."
msgstr ""

#: ../../docs/tutorials/viewports/multiple_resolutions.rst:45
msgid ""
"As an example, Steam shows that the most common *primary display resolution* "
"is 1920×1080, so a sensible approach is to develop a game for this "
"resolution, then handle scaling for different sizes and aspect ratios."
msgstr ""

#: ../../docs/tutorials/viewports/multiple_resolutions.rst:49
msgid "Godot provides a several useful tools to do this easily."
msgstr ""

#: ../../docs/tutorials/viewports/multiple_resolutions.rst:52
msgid "Base size"
msgstr ""

#: ../../docs/tutorials/viewports/multiple_resolutions.rst:54
msgid ""
"A base size for the window can be specified in the Project Settings under "
"**Display → Window**."
msgstr ""

#: ../../docs/tutorials/viewports/multiple_resolutions.rst:59
msgid ""
"However, what it does is not completely obvious; the engine will *not* "
"attempt to switch the monitor to this resolution. Rather, think of this "
"setting as the \"design size\", i.e. the size of the area that you work with "
"in the editor. This setting corresponds directly to the size of the blue "
"rectangle in the 2D editor."
msgstr ""

#: ../../docs/tutorials/viewports/multiple_resolutions.rst:65
msgid ""
"There is often a need to support devices with screen and window sizes that "
"are different from this base size. Godot offers many ways to control how the "
"viewport will be resized and stretched to different screen sizes."
msgstr ""

#: ../../docs/tutorials/viewports/multiple_resolutions.rst:71
msgid "Resizing"
msgstr ""

#: ../../docs/tutorials/viewports/multiple_resolutions.rst:73
msgid ""
"There are several types of devices, with several types of screens, which in "
"turn have different pixel density and resolutions. Handling all of them can "
"be a lot of work, so Godot tries to make the developer's life a little "
"easier. The :ref:`Viewport <class_Viewport>` node has several functions to "
"handle resizing, and the root node of the scene tree is always a viewport "
"(scenes loaded are instanced as a child of it, and it can always be accessed "
"by calling ``get_tree().get_root()`` or ``get_node(\"/root\")``)."
msgstr ""

#: ../../docs/tutorials/viewports/multiple_resolutions.rst:82
msgid ""
"In any case, while changing the root Viewport params is probably the most "
"flexible way to deal with the problem, it can be a lot of work, code and "
"guessing, so Godot provides a simple set of parameters in the project "
"settings to handle multiple resolutions."
msgstr ""

#: ../../docs/tutorials/viewports/multiple_resolutions.rst:88
msgid "Stretch settings"
msgstr ""

#: ../../docs/tutorials/viewports/multiple_resolutions.rst:90
msgid ""
"Stretch settings are located in the project settings, it's just a bunch of "
"configuration variables that provide several options:"
msgstr ""

#: ../../docs/tutorials/viewports/multiple_resolutions.rst:96
msgid "Stretch Mode"
msgstr ""

#: ../../docs/tutorials/viewports/multiple_resolutions.rst:98
msgid ""
"The **Stretch Mode** setting defines how the base size is stretched to fit "
"the resolution of the window or screen."
msgstr ""

#: ../../docs/tutorials/viewports/multiple_resolutions.rst:103
msgid ""
"The animations below use a \"base size\" of just 16×9 pixels to demonstrate "
"the effect of different stretch modes. A single sprite, also 16×9 pixels in "
"size, covers the entire viewport, and a diagonal :ref:`Line2D "
"<class_Line2D>` is added on top of it:"
msgstr ""

#: ../../docs/tutorials/viewports/multiple_resolutions.rst:113
msgid ""
"**Stretch Mode = Disabled** (default): No stretching happens. One unit in "
"the scene corresponds to one pixel on the screen. In this mode, the "
"**Stretch Aspect** setting has no effect."
msgstr ""

#: ../../docs/tutorials/viewports/multiple_resolutions.rst:117
msgid ""
"This is a good option if you want full control over every screen pixel, and "
"is probably the best option for 3D games."
msgstr ""

#: ../../docs/tutorials/viewports/multiple_resolutions.rst:122
msgid ""
"**Stretch Mode = 2D**: In this mode, the size specified in display/width and "
"display/height in the project settings is stretched to cover the whole "
"screen (taking the **Stretch Aspect** setting into account). This means that "
"everything is rendered directly at the target resolution. 3D is largely "
"unaffected, while in 2D, there is no longer a 1:1 correspondence between "
"sprite pixels and screen pixels, which may result in scaling artifacts."
msgstr ""

#: ../../docs/tutorials/viewports/multiple_resolutions.rst:130
msgid ""
"This is a good option if your 2D artwork has a sufficiently high resolution "
"and does not require pixel-perfect rendering. Consider enabling texture "
"filtering and mipmapping on your 2D textures and fonts."
msgstr ""

#: ../../docs/tutorials/viewports/multiple_resolutions.rst:137
msgid ""
"**Stretch Mode = Viewport**: Viewport scaling means that the size of the "
"root :ref:`Viewport <class_Viewport>` is set precisely to the base size "
"specified in the Project Settings' **Display** section. The scene is "
"rendered to this viewport first. Finally, this viewport is scaled to fit the "
"screen (taking the **Stretch Aspect** setting into account)."
msgstr ""

#: ../../docs/tutorials/viewports/multiple_resolutions.rst:144
msgid ""
"This mode is useful when working with pixel-precise games, or for the sake "
"of rendering to a lower resolution to improve performance."
msgstr ""

#: ../../docs/tutorials/viewports/multiple_resolutions.rst:150
msgid "Stretch Aspect"
msgstr ""

#: ../../docs/tutorials/viewports/multiple_resolutions.rst:152
msgid ""
"The second setting is the stretch aspect. Note that this only takes effect "
"if **Stretch Mode** is set to something other than **Disabled**."
msgstr ""

#: ../../docs/tutorials/viewports/multiple_resolutions.rst:155
msgid ""
"In the animations below, you will notice gray and black areas. The black "
"areas are added by the engine and cannot be drawn into. The gray areas are "
"part of your scene, and can be drawn to. The gray areas correspond to the "
"region outside the blue frame you see in the 2D editor."
msgstr ""

#: ../../docs/tutorials/viewports/multiple_resolutions.rst:160
msgid ""
"**Stretch Aspect = Ignore**: Ignore the aspect ratio when stretching the "
"screen. This means that the original resolution will be stretched to exactly "
"fill the screen, even if it's wider or narrower. This may result in "
"nonuniform stretching: things looking wider or taller than designed."
msgstr ""

#: ../../docs/tutorials/viewports/multiple_resolutions.rst:168
msgid ""
"**Stretch Aspect = Keep**: Keep aspect ratio when stretching the screen. "
"This means that the viewport retains its original size regardless of the "
"screen resolution, and black bars will be added to the top/bottom of the "
"screen (\"letterboxing\") or the sides (\"pillarboxing\")."
msgstr ""

#: ../../docs/tutorials/viewports/multiple_resolutions.rst:174
msgid ""
"This is a good option if you know the aspect ratio of your target devices in "
"advance, or if you don't want to handle different aspect ratios."
msgstr ""

#: ../../docs/tutorials/viewports/multiple_resolutions.rst:180
msgid ""
"**Stretch Aspect = Keep Width**: Keep aspect ratio when stretching the "
"screen. If the screen is wider than the base size, black bars are added at "
"the left and right (pillarboxing). But if the screen is taller than the base "
"resolution, the viewport will be grown in the vertical direction (and more "
"content will be visible to the bottom). You can also think of this as "
"\"Expand Vertically\"."
msgstr ""

#: ../../docs/tutorials/viewports/multiple_resolutions.rst:187
msgid ""
"This is usually the best option for creating GUIs or HUDs that scale, so "
"some controls can be anchored to the bottom (:ref:`doc_size_and_anchors`)."
msgstr ""

#: ../../docs/tutorials/viewports/multiple_resolutions.rst:193
msgid ""
"**Stretch Aspect = Keep Height**: Keep aspect ratio when stretching the "
"screen. If the screen is taller than the base size, black bars are added at "
"the top and bottom (letterboxing). But if the screen is wider than the base "
"resolution, the viewport will be grown in the horizontal direction (and more "
"content will be visible to the right). You can also think of this as "
"\"Expand Horizontally\"."
msgstr ""

#: ../../docs/tutorials/viewports/multiple_resolutions.rst:200
msgid ""
"This is usually the best option for 2D games that scroll horizontally (like "
"runners or platformers)."
msgstr ""

#: ../../docs/tutorials/viewports/multiple_resolutions.rst:205
msgid ""
"**Stretch Aspect = Expand**: Keep aspect ratio when stretching the screen, "
"but keep neither the base width nor height. Depending on the screen aspect "
"ratio, the viewport will either be larger in the horizontal direction (if "
"the screen is wider than the base size) or in the vertical direction (if the "
"screen is taller than the original size)."
msgstr ""

#: ../../docs/tutorials/viewports/multiple_resolutions.rst:215
msgid "Stretch Shrink"
msgstr ""

#: ../../docs/tutorials/viewports/multiple_resolutions.rst:217
msgid ""
"The **Shrink** setting allows you to add an extra scaling factor on top of "
"what the **Stretch** options above already provide. The default value of 1 "
"means that no scaling occurs."
msgstr ""

#: ../../docs/tutorials/viewports/multiple_resolutions.rst:221
msgid ""
"If, for example, you set **Shrink** to 4 and leave **Stretch Mode** on "
"**Disabled**, each unit in your scene will correspond to 4×4 pixels on the "
"screen."
msgstr ""

#: ../../docs/tutorials/viewports/multiple_resolutions.rst:225
msgid ""
"If **Stretch Mode** is set to something other than **Disabled**, the size of "
"the root viewport is scaled down by the **Shrink** factor, and pixels in the "
"output are scaled up by the same amount. This is rarely useful for 2D games, "
"but can be used to increase performance in 3D games by rendering them at a "
"lower resolution."
msgstr ""

#: ../../docs/tutorials/viewports/multiple_resolutions.rst:232
msgid "From scripts"
msgstr ""

#: ../../docs/tutorials/viewports/multiple_resolutions.rst:234
msgid ""
"To configure stretching at runtime from a script, use the ``get_tree()."
"set_screen_stretch()`` function (see :ref:`SceneTree.set_screen_stretch() "
"<class_SceneTree_method_set_screen_stretch>`)."
msgstr ""

#: ../../docs/tutorials/viewports/multiple_resolutions.rst:239
msgid "Reducing aliasing on downsampling"
msgstr ""

#: ../../docs/tutorials/viewports/multiple_resolutions.rst:241
msgid ""
"If the game has a very high base resolution (e.g. 3840×2160), aliasing might "
"appear when downsampling to something considerably lower like 1280×720. "
"Aliasing can be made less visible by shrinking all images by a factor of 2 "
"upon loading. This can be done by calling the method below before the game "
"data is loaded:"
msgstr ""

#: ../../docs/tutorials/viewports/multiple_resolutions.rst:253
#, fuzzy
msgid "Handling aspect ratios"
msgstr "시그널 다루기"

#: ../../docs/tutorials/viewports/multiple_resolutions.rst:255
msgid ""
"Once scaling for different resolutions is accounted for, make sure that your "
"*user interface* also scales for different aspect ratios. This can be done "
"using :ref:`anchors <doc_size_and_anchors>` and/or :ref:`containers "
"<doc_gui_containers>`."
msgstr ""

#: ../../docs/tutorials/viewports/multiple_resolutions.rst:261
msgid "Field of view scaling"
msgstr ""

#: ../../docs/tutorials/viewports/multiple_resolutions.rst:263
msgid ""
"The 3D Camera node's **Keep Aspect** property defaults to the **Keep "
"Height** scaling mode (also called *Hor+*). This is usually the best value "
"for desktop games and mobile games in landscape mode, as widescreen displays "
"will automatically use a wider field of view."
msgstr ""

#: ../../docs/tutorials/viewports/multiple_resolutions.rst:268
msgid ""
"However, if your 3D game is intended to be played in portrait mode, it may "
"make more sense to use **Keep Width** instead (also called *Vert-*). This "
"way, smartphones with an aspect ratio taller than 16:9 (e.g. 19:9) will use "
"a *taller* field of view, which is more logical here."
msgstr ""

#: ../../docs/tutorials/viewports/using_viewport_as_texture.rst:4
msgid "Using a Viewport as a texture"
msgstr ""

#: ../../docs/tutorials/viewports/using_viewport_as_texture.rst:9
msgid ""
"This tutorial will introduce you to using the :ref:`Viewport "
"<class_Viewport>` as a texture that can be applied to 3D objects. In order "
"to do so, it will walk you through the process of making a procedural planet "
"like the one below:"
msgstr ""

#: ../../docs/tutorials/viewports/using_viewport_as_texture.rst:15
msgid ""
"This tutorial does not cover how to code a dynamic atmosphere like the one "
"this planet has."
msgstr ""

#: ../../docs/tutorials/viewports/using_viewport_as_texture.rst:17
msgid ""
"This tutorial assumes you are familiar with how to set up a basic scene "
"including: a :ref:`Camera <class_Camera>`, a :ref:`light source "
"<class_OmniLight>`, a :ref:`Mesh Instance <class_MeshInstance>` with a :ref:"
"`Primitive Mesh <class_PrimitiveMesh>`, and applying a :ref:`Spatial "
"Material <class_SpatialMaterial>` to the mesh. The focus will be on using "
"the :ref:`Viewport <class_Viewport>` to dynamically create textures that can "
"be applied to the mesh."
msgstr ""

#: ../../docs/tutorials/viewports/using_viewport_as_texture.rst:23
#, fuzzy
msgid "During the course of this tutorial, we'll cover the following topics:"
msgstr "적 씬은 다음 노드들을 사용할 것입니다:"

#: ../../docs/tutorials/viewports/using_viewport_as_texture.rst:25
msgid "How to use a :ref:`Viewport <class_Viewport>` as a render texture"
msgstr ""

#: ../../docs/tutorials/viewports/using_viewport_as_texture.rst:26
msgid "Mapping a texture to a sphere with equirectangular mapping"
msgstr ""

#: ../../docs/tutorials/viewports/using_viewport_as_texture.rst:27
msgid "Fragment shader techniques for procedural planets"
msgstr ""

#: ../../docs/tutorials/viewports/using_viewport_as_texture.rst:28
msgid ""
"Setting a Roughness map from a :ref:`Viewport Texture "
"<class_ViewportTexture>`"
msgstr ""

#: ../../docs/tutorials/viewports/using_viewport_as_texture.rst:31
msgid "Setting up the Viewport"
msgstr "뷰포트(Viewport) 설정하기"

#: ../../docs/tutorials/viewports/using_viewport_as_texture.rst:33
msgid "First, add a :ref:`Viewport <class_Viewport>` to the scene."
msgstr ""

#: ../../docs/tutorials/viewports/using_viewport_as_texture.rst:35
msgid ""
"Next, set the size of the :ref:`Viewport <class_Viewport>` to ``(1024, "
"512)``. The :ref:`Viewport <class_Viewport>` can actually be any size so "
"long as the width is double the height. The width needs to be double the "
"height so that the image will accurately map onto the sphere, as we will be "
"using equirectangular projection, but more on that later."
msgstr ""

#: ../../docs/tutorials/viewports/using_viewport_as_texture.rst:42
msgid ""
"Next, disable HDR and disable 3D. We don't need HDR because our planet's "
"surface will not be especially bright, so values between ``0`` and ``1`` "
"will be fine. And we will be using a :ref:`ColorRect <class_ColorRect>` to "
"render the surface, so we don't need 3D either."
msgstr ""

#: ../../docs/tutorials/viewports/using_viewport_as_texture.rst:46
msgid ""
"Select the Viewport and add a :ref:`ColorRect <class_ColorRect>` as a child."
msgstr ""

#: ../../docs/tutorials/viewports/using_viewport_as_texture.rst:48
msgid ""
"Set the anchors \"Right\" and \"Bottom\" to ``1``, then make sure all the "
"margins are set to ``0``. This will ensure that the :ref:`ColorRect "
"<class_ColorRect>` takes up the entire :ref:`Viewport <class_Viewport>`."
msgstr ""

#: ../../docs/tutorials/viewports/using_viewport_as_texture.rst:53
msgid ""
"Next, we add a :ref:`Shader Material <class_ShaderMaterial>` to the :ref:"
"`ColorRect <class_ColorRect>` (ColorRect > CanvasItem > Material > Material "
"> ``New ShaderMaterial``)."
msgstr ""

#: ../../docs/tutorials/viewports/using_viewport_as_texture.rst:55
msgid ""
"Basic familiarity with shading is recommended for this tutorial. However, "
"even if you are new to shaders, all the code will be provided, so you should "
"have no problem following along."
msgstr ""

#: ../../docs/tutorials/viewports/using_viewport_as_texture.rst:58
msgid ""
"ColorRect > CanvasItem > Material > Material > click / Edit > ShaderMaterial "
"> Shader > ``New Shader`` > click / Edit:"
msgstr ""

#: ../../docs/tutorials/viewports/using_viewport_as_texture.rst:68
msgid "The above code renders a gradient like the one below."
msgstr ""

#: ../../docs/tutorials/viewports/using_viewport_as_texture.rst:72
msgid ""
"Now we have the basics of a :ref:`Viewport <class_Viewport>` that we render "
"to and we have a unique image that we can apply to the sphere."
msgstr ""

#: ../../docs/tutorials/viewports/using_viewport_as_texture.rst:76
msgid "Applying the texture"
msgstr ""

#: ../../docs/tutorials/viewports/using_viewport_as_texture.rst:78
msgid ""
"MeshInstance > GeometryInstance > Geometry > Material Override > ``New "
"SpatialMaterial``:"
msgstr ""

#: ../../docs/tutorials/viewports/using_viewport_as_texture.rst:80
msgid ""
"Now we go into the :ref:`Mesh Instance <class_MeshInstance>` and add a :ref:"
"`Spatial Material <class_SpatialMaterial>` to it. No need for a special :ref:"
"`Shader Material <class_ShaderMaterial>` (although that would be a good idea "
"for more advanced effects, like the atmosphere in the example above)."
msgstr ""

#: ../../docs/tutorials/viewports/using_viewport_as_texture.rst:84
msgid ""
"MeshInstance > GeometryInstance > Geometry > Material Override > ``click`` / "
"``Edit``:"
msgstr ""

#: ../../docs/tutorials/viewports/using_viewport_as_texture.rst:86
msgid ""
"Open the newly created :ref:`Spatial Material <class_SpatialMaterial>` and "
"scroll down to the \"Albedo\" section and click beside the \"Texture\" "
"property to add an Albedo Texture. Here we will apply the texture we made. "
"Choose \"New ViewportTexture\""
msgstr ""

#: ../../docs/tutorials/viewports/using_viewport_as_texture.rst:92
msgid ""
"Then, from the menu that pops up, select the Viewport that we rendered to "
"earlier."
msgstr ""

#: ../../docs/tutorials/viewports/using_viewport_as_texture.rst:96
msgid ""
"Your sphere should now be colored in with the colors we rendered to the "
"Viewport."
msgstr ""

#: ../../docs/tutorials/viewports/using_viewport_as_texture.rst:100
msgid ""
"Notice the ugly seam that forms where the texture wraps around? This is "
"because we are picking a color based on UV coordinates and UV coordinates do "
"not wrap around the texture. This is a classic problem in 2D map projection. "
"Game developers often have a 2-dimensional map they want to project onto a "
"sphere, but when it wraps around, it has large seams. There is an elegant "
"workaround for this problem that we will illustrate in the next section."
msgstr ""

#: ../../docs/tutorials/viewports/using_viewport_as_texture.rst:107
msgid "Making the planet texture"
msgstr "행성 텍스처 만들기"

#: ../../docs/tutorials/viewports/using_viewport_as_texture.rst:109
msgid ""
"So now, when we render to our :ref:`Viewport <class_Viewport>`, it appears "
"magically on the sphere. But there is an ugly seam created by our texture "
"coordinates. So how do we get a range of coordinates that wrap around the "
"sphere in a nice way? One solution is to use a function that repeats on the "
"domain of our texture. ``sin`` and ``cos`` are two such functions. Let's "
"apply them to the texture and see what happens."
msgstr ""

#: ../../docs/tutorials/viewports/using_viewport_as_texture.rst:120
msgid ""
"Not too bad. If you look around, you can see that the seam has now "
"disappeared, but in its place, we have pinching at the poles. This pinching "
"is due to the way Godot maps textures to spheres in its :ref:`Spatial "
"Material <class_SpatialMaterial>`. It uses a projection technique called "
"equirectangular projection, which translates a spherical map onto a 2D plane."
msgstr ""

#: ../../docs/tutorials/viewports/using_viewport_as_texture.rst:125
msgid ""
"If you are interested in a little extra information on the technique, we "
"will be converting from spherical coordinates into Cartesian coordinates. "
"Spherical coordinates map the longitude and latitude of the sphere, while "
"Cartesian coordinates are, for all intents and purposes, a vector from the "
"center of the sphere to the point."
msgstr ""

#: ../../docs/tutorials/viewports/using_viewport_as_texture.rst:130
msgid ""
"For each pixel, we will calculate its 3D position on the sphere. From that, "
"we will use 3D noise to determine a color value. By calculating the noise in "
"3D, we solve the problem of the pinching at the poles. To understand why, "
"picture the noise being calculated across the surface of the sphere instead "
"of across the 2D plane. When you calculate across the surface of the sphere, "
"you never hit an edge, and hence you never create a seam or a pinch point on "
"the pole. The following code converts the ``UVs`` into Cartesian coordinates."
msgstr ""

#: ../../docs/tutorials/viewports/using_viewport_as_texture.rst:149
msgid "And if we use ``unit`` as an output ``COLOR`` value, we get:"
msgstr ""

#: ../../docs/tutorials/viewports/using_viewport_as_texture.rst:153
msgid ""
"Now that we can calculate the 3D position of the surface of the sphere, we "
"can use 3D noise to make the planet. We will be using this noise function "
"directly from a `Shadertoy <https://www.shadertoy.com/view/Xsl3Dl>`_:"
msgstr ""

#: ../../docs/tutorials/viewports/using_viewport_as_texture.rst:181
msgid ""
"All credit goes to the author, Inigo Quilez. It is published under the "
"``MIT`` licence."
msgstr ""

#: ../../docs/tutorials/viewports/using_viewport_as_texture.rst:183
msgid ""
"Now to use ``noise``, add the following to the    ``fragment`` function:"
msgstr ""

#: ../../docs/tutorials/viewports/using_viewport_as_texture.rst:192
msgid "In order to highlight the texture, we set the material to unshaded."
msgstr ""

#: ../../docs/tutorials/viewports/using_viewport_as_texture.rst:194
msgid ""
"You can see now that the noise indeed wraps seamlessly around the sphere. "
"Although this looks nothing like the planet you were promised. So let's move "
"onto something more colorful."
msgstr ""

#: ../../docs/tutorials/viewports/using_viewport_as_texture.rst:198
msgid "Coloring the planet"
msgstr "행성 색칠하기"

#: ../../docs/tutorials/viewports/using_viewport_as_texture.rst:200
msgid ""
"Now to make the planet colors. While there are many ways to do this, for "
"now, we will stick with a gradient between water and land."
msgstr ""

#: ../../docs/tutorials/viewports/using_viewport_as_texture.rst:203
msgid ""
"To make a gradient in GLSL, we use the ``mix`` function. ``mix`` takes two "
"values to interpolate between and a third argument to choose how much to "
"interpolate between them; in essence, it *mixes* the two values together. In "
"other APIs, this function is often called ``lerp``. However, ``lerp`` is "
"typically reserved for mixing two floats together; ``mix`` can take any "
"values whether it be floats or vector types."
msgstr ""

#: ../../docs/tutorials/viewports/using_viewport_as_texture.rst:213
msgid ""
"The first color is blue for the ocean. The second color is a kind of reddish "
"color (because all alien planets need red terrain). And finally, they are "
"mixed together by ``n * 0.5 + 0.5``. ``n`` smoothly varies between ``-1`` "
"and ``1``. So we map it into the ``0-1`` range that ``mix`` expects. Now you "
"can see that the colors change between blue and red."
msgstr ""

#: ../../docs/tutorials/viewports/using_viewport_as_texture.rst:220
msgid ""
"That is a little more blurry than we want. Planets typically have a "
"relatively clear separation between land and sea. In order to do that, we "
"will change the last term to ``smoothstep(-0.1, 0.0, n)``. And thus the "
"whole line becomes:"
msgstr ""

#: ../../docs/tutorials/viewports/using_viewport_as_texture.rst:228
msgid ""
"What ``smoothstep`` does is return ``0`` if the third argument is below the "
"first and ``1`` if the third argument is larger than the second and smoothly "
"blends between ``0`` and ``1`` if the third number is between the first and "
"the second. So in this line, ``smoothstep`` returns ``0`` whenever ``n`` is "
"less than ``-0.1`` and it returns ``1`` whenever ``n`` is above ``0``."
msgstr ""

#: ../../docs/tutorials/viewports/using_viewport_as_texture.rst:235
msgid ""
"One more thing to make this a little more planet-y. The land shouldn't be so "
"blobby; let's make the edges a little rougher. A trick that is often used in "
"shaders to make rough looking terrain with noise is to layer levels of noise "
"over one another at various frequencies. We use one layer to make the "
"overall blobby structure of the continents. Then another layer breaks up the "
"edges a bit, and then another, and so on. What we will do is calculate ``n`` "
"with four lines of shader code instead of just one. ``n`` becomes:"
msgstr ""

#: ../../docs/tutorials/viewports/using_viewport_as_texture.rst:249
msgid "And now the planet looks like:"
msgstr ""

#: ../../docs/tutorials/viewports/using_viewport_as_texture.rst:253
msgid "And with shading turned back on, it looks like:"
msgstr ""

#: ../../docs/tutorials/viewports/using_viewport_as_texture.rst:258
msgid "Making an ocean"
msgstr ""

#: ../../docs/tutorials/viewports/using_viewport_as_texture.rst:260
msgid ""
"One final thing to make this look more like a planet. The ocean and the land "
"reflect light differently. So we want the ocean to shine a little more than "
"the land. We can do this by passing a fourth value into the ``alpha`` "
"channel of our output ``COLOR`` and using it as a Roughness map."
msgstr ""

#: ../../docs/tutorials/viewports/using_viewport_as_texture.rst:268
msgid ""
"This line returns ``0.3`` for water and ``1.0`` for land. This means that "
"the land is going to be quite rough, while the water will be quite smooth."
msgstr ""

#: ../../docs/tutorials/viewports/using_viewport_as_texture.rst:271
msgid ""
"And then, in the material, under the \"Metallic\" section, make sure "
"``Metallic`` is set to ``0`` and ``Specular`` is set to ``1``. The reason "
"for this is the water reflects light really well, but isn't metallic. These "
"values are not physically accurate, but they are good enough for this demo."
msgstr ""

#: ../../docs/tutorials/viewports/using_viewport_as_texture.rst:275
msgid ""
"Next, under the \"Roughness\" section, set ``Roughness`` to ``1`` and set "
"the roughness texture to a :ref:`Viewport Texture <class_ViewportTexture>` "
"pointing to our planet texture :ref:`Viewport <class_Viewport>`. Finally, "
"set the ``Texture Channel`` to ``Alpha``. This instructs the renderer to use "
"the ``alpha`` channel of our output ``COLOR`` as the ``Roughness`` value."
msgstr ""

#: ../../docs/tutorials/viewports/using_viewport_as_texture.rst:282
msgid ""
"You'll notice that very little changes except that the planet is no longer "
"reflecting the sky. This is happening because, by default, when something is "
"rendered with an alpha value, it gets drawn as a transparent object over the "
"background. And since the default background of the :ref:`Viewport "
"<class_Viewport>` is opaque, the ``alpha`` channel of the :ref:`Viewport "
"Texture <class_ViewportTexture>` is ``1``, resulting in the planet texture "
"being drawn with slightly fainter colors and a ``Roughness`` value of ``1`` "
"everywhere. To correct this, we go into the :ref:`Viewport <class_Viewport>` "
"and set \"Transparent Bg\" to on. Since we are now rendering one transparent "
"object on top of another, we want to enable ``blend_premul_alpha``:"
msgstr ""

#: ../../docs/tutorials/viewports/using_viewport_as_texture.rst:295
msgid ""
"This pre-multiplies the colors by the ``alpha`` value and then blends them "
"correctly together. Typically, when blending one transparent color on top of "
"another, even if the background has an ``alpha`` of ``0`` (as it does in "
"this case), you end up with weird color bleed issues. Setting "
"``blend_premul_alpha`` fixes that."
msgstr ""

#: ../../docs/tutorials/viewports/using_viewport_as_texture.rst:299
msgid ""
"Now the planet should look like it is reflecting light on the ocean but not "
"the land. If you haven't done so already, add an :ref:`OmniLight "
"<class_OmniLight>` to the scene so you can move it around and see the effect "
"of the reflections on the ocean."
msgstr ""

#: ../../docs/tutorials/viewports/using_viewport_as_texture.rst:305
msgid ""
"And there you have it. A procedural planet generated using a :ref:`Viewport "
"<class_Viewport>`."
msgstr ""

#: ../../docs/tutorials/viewports/custom_postprocessing.rst:4
msgid "Custom post-processing"
msgstr ""

#: ../../docs/tutorials/viewports/custom_postprocessing.rst:9
msgid ""
"Godot provides many post-processing effects out of the box, including Bloom, "
"DOF, and SSAO. Sometimes you want to write your own custom effect. Here's "
"how you can do so."
msgstr ""

#: ../../docs/tutorials/viewports/custom_postprocessing.rst:12
msgid ""
"Post-processing effects are shaders applied to a frame after Godot rendered "
"it. You first want to render your scene into a :ref:`Viewport "
"<class_Viewport>`, then render the ``Viewport`` inside a :ref:"
"`ViewportTexture <class_ViewportTexture>` and show it on the screen."
msgstr ""

#: ../../docs/tutorials/viewports/custom_postprocessing.rst:16
msgid ""
"The easiest way to implement a custom post-processing shader is to use "
"Godot's built-in ability to read from the screen texture. If you're not "
"familiar with this, you should read the :ref:`Screen Reading Shaders "
"Tutorial <doc_screen-reading_shaders>` first."
msgstr ""

#: ../../docs/tutorials/viewports/custom_postprocessing.rst:22
msgid ""
"As of the time of writing, Godot does not support rendering to multiple "
"buffers at the same time. Your post-processing shader will not have access "
"to normals or other render passes. You only have access to the rendered "
"frame."
msgstr ""

#: ../../docs/tutorials/viewports/custom_postprocessing.rst:27
msgid "Single pass post-processing"
msgstr ""

#: ../../docs/tutorials/viewports/custom_postprocessing.rst:29
msgid ""
"You will need a ``Viewport`` to render your scene to, and a scene to render "
"your ``Viewport`` on the screen. You can use a :ref:`ViewportContainer "
"<class_ViewportContainer>` to display your ``Viewport`` on the entire screen "
"or inside another :ref:`Control <class_Control>` node."
msgstr ""

#: ../../docs/tutorials/viewports/custom_postprocessing.rst:36
msgid ""
"Rendering using a ``Viewport`` gives you control over how the scene render, "
"including the framerate, and you can use the ``ViewportContainer`` to render "
"3D objects in a 2D scene."
msgstr ""

#: ../../docs/tutorials/viewports/custom_postprocessing.rst:40
msgid ""
"For this demo, we will use a :ref:`Node2D <class_Node2D>` with a "
"``ViewportContainer`` and finally a ``Viewport``. Your **Scene** tab should "
"look like this:"
msgstr ""

#: ../../docs/tutorials/viewports/custom_postprocessing.rst:45
msgid ""
"Inside the ``Viewport``, you can have whatever you want. This will contain "
"your main scene. For this tutorial, we will use a field of random boxes:"
msgstr ""

#: ../../docs/tutorials/viewports/custom_postprocessing.rst:50
msgid ""
"Add a new :ref:`ShaderMaterial <class_ShaderMaterial>` to the "
"``ViewportContainer``, and assign a new shader resource to it. You can "
"access your rendered ``Viewport`` with the built-in ``TEXTURE`` uniform."
msgstr ""

#: ../../docs/tutorials/viewports/custom_postprocessing.rst:55
msgid ""
"You can choose not to use a ``ViewportContainer``, but if you do so, you "
"will need to create your own uniform in the shader and pass the ``Viewport`` "
"texture in manually, like so:"
msgstr ""

#: ../../docs/tutorials/viewports/custom_postprocessing.rst:64
msgid "And you can pass the texture into the shader from GDScript like so:"
msgstr ""

#: ../../docs/tutorials/viewports/custom_postprocessing.rst:72
msgid ""
"Copy the following code to your shader. The above code is a single pass edge "
"detection filter, a `Sobel filter <https://en.wikipedia.org/wiki/"
"Sobel_operator>`_."
msgstr ""

#: ../../docs/tutorials/viewports/custom_postprocessing.rst:94
msgid ""
"The Sobel filter reads pixels in a 9x9 grid around the current pixel and "
"adds them together, using weight. What makes it interesting is that it "
"assigns weights to each pixel; +1 for each of the eight around the center "
"and -8 for the center pixel. The choice of weights is called a \"kernel\". "
"You can use different kernels to create edge detection filters, outlines, "
"and all sorts of effects."
msgstr ""

#: ../../docs/tutorials/viewports/custom_postprocessing.rst:102
msgid "Multi-pass post-processing"
msgstr ""

#: ../../docs/tutorials/viewports/custom_postprocessing.rst:104
msgid ""
"Some post-processing effects like blur are resource intensive. If you break "
"them down in multiple passes however, you can make them run a lot faster. In "
"a multipass material, each pass takes the result from the previous pass as "
"an input and processes it."
msgstr ""

#: ../../docs/tutorials/viewports/custom_postprocessing.rst:108
msgid ""
"To make a multi-pass post-processing shader, you stack ``Viewport`` nodes. "
"In the example above, you rendered the content of one ``Viewport`` object "
"into the root ``Viewport``, through a ``ViewportContainer`` node. You can do "
"the same thing for a multi-pass shader by rendering the content of one "
"``Viewport`` into another and then rendering the last ``Viewport`` into the "
"root ``Viewport``."
msgstr ""

#: ../../docs/tutorials/viewports/custom_postprocessing.rst:113
msgid "Your scene hierarchy will look something like this:"
msgstr "씬 계층 구조는 다음과 같이 보일 것입니다:"

#: ../../docs/tutorials/viewports/custom_postprocessing.rst:117
msgid ""
"Godot will render the bottom ``Viewport`` node first. So if the order of the "
"passes matters for your shaders, make sure that you assign the shader you "
"want to apply first to the lowest ``ViewportContainer`` in the tree."
msgstr ""

#: ../../docs/tutorials/viewports/custom_postprocessing.rst:123
msgid ""
"You can also render your Viewports separately without nesting them like "
"this. You just need to use two Viewports and to render them one after the "
"other."
msgstr ""

#: ../../docs/tutorials/viewports/custom_postprocessing.rst:126
msgid ""
"Apart from the node structure, the steps are the same as with the single-"
"pass post-processing shader."
msgstr ""

#: ../../docs/tutorials/viewports/custom_postprocessing.rst:128
msgid ""
"As an example, you could write a full screen Gaussian blur effect by "
"attaching the following pieces of code to each of the :ref:"
"`ViewportContainers <class_ViewportContainer>`. The order in which you apply "
"the shaders does not matter:"
msgstr ""

#: ../../docs/tutorials/viewports/custom_postprocessing.rst:168
msgid ""
"Using the above code, you should end up with a full screen blur effect like "
"below."
msgstr ""

#: ../../docs/tutorials/viewports/custom_postprocessing.rst:172
msgid ""
"For more information on how ``Viewport`` nodes work, see the :ref:`Viewports "
"Tutorial <doc_viewports>`."
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/index.rst:2
#, fuzzy
msgid "Shading reference"
msgstr "현재 씬 변경하기"

#: ../../docs/tutorials/shading/shading_reference/shaders.rst:4
msgid "Shaders"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shaders.rst:9
msgid ""
"Shaders are unique programs that run on the GPU. They are used to specify "
"how to take mesh data (vertex positions, colors, normals, etc.) and draw "
"them to the screen. Shaders do not process information the same way a normal "
"program does because they are optimized for running on the GPU. One "
"consequence of this is that shaders do not retain their data after they run; "
"they output a final color to the screen and then move on. Accordingly, there "
"is no way of accessing the color output from the last run of the shader."
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shaders.rst:16
msgid ""
"Godot uses a shader language very similar to GLSL, but with added "
"functionality and slightly less flexibility. The reason for doing this is "
"that Godot integrates built-in functionality to make writing complex shaders "
"substantially easier. Godot wraps the user-written shader code in code of "
"its own. That way, Godot handles a lot of the low-level stuff that the user "
"doesn't need to worry about, and it is able to parse your shader code and "
"use it to affect the rendering pipeline. For more advanced shaders, you can "
"turn this functionality off using a render_mode."
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shaders.rst:23
msgid ""
"This document provides you with some information about shaders, specific to "
"Godot. For a detailed reference of the shading language in Godot see the :"
"ref:`Godot shading language doc<doc_shading_language>`."
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shaders.rst:27
#, fuzzy
msgid "Shader types"
msgstr "플레이스 홀더 유형"

#: ../../docs/tutorials/shading/shading_reference/shaders.rst:29
msgid ""
"Instead of supplying a general purpose configuration for all uses (2D, 3D, "
"particles), Godot shaders must specify what they are intended for. Different "
"types support different render modes, built-in variables, and processing "
"functions."
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shaders.rst:33
msgid ""
"All shaders need to specify their type in the first line, in the following "
"format:"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shaders.rst:41
msgid ":ref:`spatial <doc_spatial_shader>`: For 3D rendering."
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shaders.rst:42
msgid ":ref:`canvas_item <doc_canvas_item_shader>`: For 2D rendering."
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shaders.rst:43
msgid ":ref:`particles <doc_particle_shader>`: For particle systems."
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shaders.rst:45
msgid ""
"For detailed information on each shading type, see the corresponding "
"reference document."
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shaders.rst:48
#: ../../docs/tutorials/shading/shading_reference/spatial_shader.rst:12
#: ../../docs/tutorials/shading/shading_reference/canvas_item_shader.rst:14
#: ../../docs/tutorials/shading/shading_reference/particle_shader.rst:27
#, fuzzy
msgid "Render modes"
msgstr "플레이스 홀더 수정자"

#: ../../docs/tutorials/shading/shading_reference/shaders.rst:50
msgid ""
"Different shader types support different render modes. They are optional "
"and, if specified, must be after the *shader_type*. Render modes are used to "
"alter the way built-in functionality is handled. For example, it is common "
"to use the render mode ``unshaded`` to skip the built-in light processor "
"function."
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shaders.rst:55
msgid "Render modes are specified underneath the shader type:"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shaders.rst:62
msgid ""
"Each shader type has a different list of render modes available. See the "
"document for each shader type for a complete list of render modes."
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shaders.rst:66
#, fuzzy
msgid "Processor functions"
msgstr "프로세싱(Processing)"

#: ../../docs/tutorials/shading/shading_reference/shaders.rst:68
msgid ""
"Depending on the shader type, different processor functions may be "
"optionally overridden. For \"spatial\" and \"canvas_item\", it is possible "
"to override ``vertex``, ``fragment``, and ``light``. For \"particles\", only "
"``vertex`` can be overridden."
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shaders.rst:73
#, fuzzy
msgid "Vertex processor"
msgstr "``x.attribute``"

#: ../../docs/tutorials/shading/shading_reference/shaders.rst:75
msgid ""
"The ``vertex`` processing function is called once for every vertex in "
"\"spatial\" and \"canvas_item\" shaders. For \"particles\" shaders, it is "
"called once for every particle."
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shaders.rst:78
msgid ""
"The ``vertex`` function is used to modify per-vertex information that will "
"be passed on to the fragment function. It can also be used to establish "
"variables that will be sent to the fragment function by using varyings(see "
"other doc)."
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shaders.rst:82
msgid ""
"By default, Godot will take your vertex information and transform it "
"accordingly to be drawn. If this is undesirable, you can use render modes to "
"transform the data yourself; see the :ref:`Spatial shader doc "
"<doc_spatial_shader>` for an example of this."
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shaders.rst:87
msgid "Fragment processor"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shaders.rst:89
msgid ""
"The ``fragment`` processing function is used to set up the Godot material "
"parameters per pixel. This code runs on every visible pixel the object or "
"primitive draws. It is only available in \"spatial\" and \"canvas_item\" "
"shaders."
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shaders.rst:93
msgid ""
"The standard use of the fragment function is to set up material properties "
"that will be used to calculate lighting. For example, you would set values "
"for ``ROUGHNESS``, ``RIM``, or ``TRANSMISSION`` which would tell the light "
"function how the lights respond to that fragment. This makes it possible to "
"control a complex shading pipeline without the user having to write much "
"code. If you don't need this built-in functionality, you can ignore it and "
"write your own light processing function and Godot will optimize it away. "
"For example, if you do not write a value to ``RIM``, Godot will not "
"calculate rim lighting. During compilation, Godot checks to see if ``RIM`` "
"is used; if not, it cuts all the corresponding code out. Therefore, you will "
"not waste calculations on effects that you do not use."
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shaders.rst:103
msgid "Light processor"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shaders.rst:105
msgid ""
"The ``light`` processor runs per pixel too, but also runs for every light "
"that affects the object (and does not run if no lights affect the object). "
"It exists as a function called inside the ``fragment`` processor and "
"typically operates on the material properties setup inside the ``fragment`` "
"function."
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shaders.rst:110
msgid ""
"The ``light`` processor works differently in 2D than it does in 3D; for a "
"description of how it works in each, see their documentation, :ref:"
"`CanvasItem shaders <doc_canvas_item_shader>` and :ref:`Spatial shaders "
"<doc_spatial_shader>`, respectively."
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:4
#: ../../docs/tutorials/misc/gles2_gles3_differences.rst:127
msgid "Shading language"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:9
msgid ""
"Godot uses a shading language similar to GLSL ES 3.0. Most datatypes and "
"functions are supported, and the few remaining ones will likely be added "
"over time."
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:12
msgid ""
"If you are already familiar with GLSL, the :ref:`Godot Shader Migration "
"Guide<doc_migrating_to_godot_shader_language>` is a resource that will help "
"you transition from regular GLSL to Godot's shading language."
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:16
msgid "Data types"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:18
msgid "Most GLSL ES 3.0 datatypes are supported:"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:23
msgid "**void**"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:23
msgid "Void datatype, useful only for functions that return nothing."
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:25
#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:610
msgid "**bool**"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:25
#, fuzzy
msgid "Boolean datatype, can only contain ``true`` or ``false``."
msgstr "불리언 데이터 타입으로 ``true`` 아니면 ``false`` 값만 가지고 있습니다."

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:27
msgid "**bvec2**"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:27
msgid "Two-component vector of booleans."
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:29
msgid "**bvec3**"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:29
msgid "Three-component vector of booleans."
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:31
msgid "**bvec4**"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:31
msgid "Four-component vector of booleans."
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:33
#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:612
msgid "**int**"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:33
msgid "Signed scalar integer."
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:35
msgid "**ivec2**"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:35
msgid "Two-component vector of signed integers."
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:37
msgid "**ivec3**"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:37
msgid "Three-component vector of signed integers."
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:39
msgid "**ivec4**"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:39
msgid "Four-component vector of signed integers."
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:41
msgid "**uint**"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:41
msgid "Unsigned scalar integer; can't contain negative numbers."
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:43
msgid "**uvec2**"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:43
msgid "Two-component vector of unsigned integers."
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:45
msgid "**uvec3**"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:45
msgid "Three-component vector of unsigned integers."
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:47
msgid "**uvec4**"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:47
msgid "Four-component vector of unsigned integers."
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:49
#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:614
msgid "**float**"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:49
msgid "Floating point scalar."
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:51
#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:616
msgid "**vec2**"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:51
msgid "Two-component vector of floating point values."
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:53
#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:618
msgid "**vec3**"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:53
msgid "Three-component vector of floating point values."
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:55
#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:587
#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:620
msgid "**vec4**"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:55
msgid "Four-component vector of floating point values."
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:57
msgid "**mat2**"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:57
msgid "2x2 matrix, in column major order."
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:59
msgid "**mat3**"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:59
msgid "3x3 matrix, in column major order."
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:61
#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:622
#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:624
msgid "**mat4**"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:61
msgid "4x4 matrix, in column major order."
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:63
#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:591
#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:593
#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:595
#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:597
#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:599
#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:601
msgid "**sampler2D**"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:63
msgid "Sampler type for binding 2D textures, which are read as float."
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:65
msgid "**isampler2D**"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:65
msgid "Sampler type for binding 2D textures, which are read as signed integer."
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:67
msgid "**usampler2D**"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:67
msgid ""
"Sampler type for binding 2D textures, which are read as unsigned integer."
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:69
#, fuzzy
msgid "**sampler2DArray**"
msgstr "**예제**"

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:69
msgid "Sampler type for binding 2D texture arrays, which are read as float."
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:71
#, fuzzy
msgid "**isampler2DArray**"
msgstr "**예제**"

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:71
msgid ""
"Sampler type for binding 2D texture arrays, which are read as signed integer."
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:73
#, fuzzy
msgid "**usampler2DArray**"
msgstr "**예제**"

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:73
msgid ""
"Sampler type for binding 2D texture arrays, which are read as unsigned "
"integer."
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:75
#, fuzzy
msgid "**sampler3D**"
msgstr "**예제**"

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:75
msgid "Sampler type for binding 3D textures, which are read as float."
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:77
#, fuzzy
msgid "**isampler3D**"
msgstr "**예제**"

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:77
msgid "Sampler type for binding 3D textures, which are read as signed integer."
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:79
#, fuzzy
msgid "**usampler3D**"
msgstr "**예제**"

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:79
msgid ""
"Sampler type for binding 3D textures, which are read as unsigned integer."
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:81
msgid "**samplerCube**"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:81
msgid "Sampler type for binding Cubemaps, which are read as floats."
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:87
msgid ""
"Just like GLSL ES 3.0, implicit casting between scalars and vectors of the "
"same size but different type is not allowed. Casting of types of different "
"size is also not allowed. Conversion must be done explicitly via "
"constructors."
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:98
msgid ""
"Default integer constants are signed, so casting is always needed to convert "
"to unsigned:"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:107
msgid "Members"
msgstr "멤버"

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:109
msgid ""
"Individual scalar members of vector types are accessed via the \"x\", \"y\", "
"\"z\" and \"w\" members. Alternatively, using \"r\", \"g\", \"b\" and \"a\" "
"also works and is equivalent. Use whatever fits best for your needs."
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:113
msgid ""
"For matrices, use the ``m[row][column]`` indexing syntax to access each "
"scalar, or ``m[idx]`` to access a vector by row index. For example, for "
"accessing the y position of an object in a mat4 you  use ``m[3][1]``."
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:118
msgid "Constructing"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:120
msgid "Construction of vector types must always pass:"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:132
msgid ""
"Construction of matrix types requires vectors of the same dimension as the "
"matrix. You can also build a diagonal matrix using ``matx(float)`` syntax. "
"Accordingly, ``mat4(1.0)`` is an identity matrix."
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:142
msgid ""
"Matrices can also be built from a matrix of another dimension. There are two "
"rules : If a larger matrix is constructed from a smaller matrix, the "
"additional rows and columns are set to the values they would have in an "
"identity matrix. If a smaller matrix is constructed from a larger matrix, "
"the top, left submatrix of the larger matrix is used."
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:155
msgid "Swizzling"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:157
msgid ""
"It is possible to obtain any combination of components in any order, as long "
"as the result is another vector type (or scalar). This is easier shown than "
"explained:"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:174
#: ../../docs/tutorials/shading/migrating_to_godot_shader_language.rst:116
msgid "Precision"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:176
msgid ""
"It is possible to add precision modifiers to datatypes; use them for "
"uniforms, variables, arguments and varyings:"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:185
msgid ""
"Using lower precision for some operations can speed up the math involved (at "
"the cost of less precision). This is rarely needed in the vertex processor "
"function (where full precision is needed most of the time), but is often "
"useful in the fragment processor."
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:189
msgid ""
"Keep in mind that some architectures (mainly mobile) benefit a lot from "
"this, but are also restricted (conversion between precisions has a cost). "
"Please read the relevant documentation on the target architecture to find "
"out more. In all honesty though, mobile drivers are buggy, so, to stay out "
"of trouble, make simple shaders without specifying precision unless you "
"*really* need to."
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:197
msgid ""
"Arrays are containers for multiple variables of a similar type. Note: As of "
"Godot 3.2, only local and varying arrays have been implemented."
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:201
#, fuzzy
msgid "Local arrays"
msgstr "지역 변수(Local Variables)"

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:203
msgid ""
"Local arrays are declared in functions. They can use all of the allowed "
"datatypes, except samplers. The array declaration follows a C-style syntax: "
"``typename + identifier + [array size]``."
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:212
msgid "They can be initialized at the beginning like:"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:224
msgid ""
"You can declare multiple arrays (even with different sizes) in one "
"expression:"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:234
msgid "To access an array element, use the indexing syntax:"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:244
msgid ""
"Arrays also have a built-in function ``.length()`` (not to be confused with "
"the built-in ``length()`` function). It doesn't accept any parameters and "
"will return the array's size."
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:253
msgid ""
"Note: If you use an index below 0 or greater than array size - the shader "
"will crash and break rendering. To prevent this, use ``length()``, ``if``, "
"or ``clamp()`` functions to ensure the index is between 0 and the array's "
"length. Always carefully test and check your code. If you pass a constant "
"expression or a simple number, the editor will check its bounds to prevent "
"this crash."
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:258
msgid ""
"Use the ``const`` keyword before the variable declaration to make that "
"variable immutable, which means that it cannot be modified. All basic types, "
"except samplers can be declared as constants. Accessing and using a constant "
"value is slightly faster than using a uniform. Constants must be initialized "
"at their declaration."
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:268
msgid ""
"Constants cannot be modified and additionally cannot have hints, but "
"multiple of them (if they have the same type) can be declared in a single "
"expression e.g"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:274
msgid "Similar to variables, arrays can also be declared with ``const``."
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:284
msgid ""
"Constants can be declared both globally (outside of any function) or locally "
"(inside a function). Global constants are useful when you want to have "
"access to a value throughout your shader that does not need to be modified. "
"Like uniforms, global constants are shared between all shader stages, but "
"they are not accessible outside of the shader."
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:295
#, fuzzy
msgid "Structs"
msgstr "Constructors(생성자)"

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:297
msgid ""
"Structs are compound types which can be used for better abstaction of shader "
"code. You can declare them at the global scope like:"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:307
msgid "After declaration, you can instantiate and initialize them like:"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:319
msgid "Or use struct constructor for same purpose:"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:325
msgid ""
"Structs may contain other struct or array, you can also instance them as "
"global constant:"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:344
msgid "You can also pass them to functions:"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:364
msgid ""
"Godot shading language supports the same set of operators as GLSL ES 3.0. "
"Below is the list of them in precedence order:"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:367
msgid "Precedence"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:367
msgid "Class"
msgstr "클래스"

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:367
msgid "Operator"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:369
msgid "1 (highest)"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:369
msgid "parenthetical grouping"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:369
msgid "**()**"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:371
#: ../../docs/tutorials/misc/binary_serialization_api.rst:29
msgid "2"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:371
msgid "unary"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:371
msgid "**+, -, !, ~**"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:373
#: ../../docs/tutorials/misc/binary_serialization_api.rst:31
msgid "3"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:373
msgid "multiplicative"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:373
msgid "**/, \\*, %**"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:375
#: ../../docs/tutorials/misc/binary_serialization_api.rst:33
#: ../../docs/tutorials/misc/binary_serialization_api.rst:94
#: ../../docs/tutorials/misc/binary_serialization_api.rst:103
#: ../../docs/tutorials/misc/binary_serialization_api.rst:112
#: ../../docs/tutorials/misc/binary_serialization_api.rst:121
#: ../../docs/tutorials/misc/binary_serialization_api.rst:134
#: ../../docs/tutorials/misc/binary_serialization_api.rst:136
#: ../../docs/tutorials/misc/binary_serialization_api.rst:145
#: ../../docs/tutorials/misc/binary_serialization_api.rst:147
#: ../../docs/tutorials/misc/binary_serialization_api.rst:149
#: ../../docs/tutorials/misc/binary_serialization_api.rst:151
#: ../../docs/tutorials/misc/binary_serialization_api.rst:160
#: ../../docs/tutorials/misc/binary_serialization_api.rst:162
#: ../../docs/tutorials/misc/binary_serialization_api.rst:164
#: ../../docs/tutorials/misc/binary_serialization_api.rst:173
#: ../../docs/tutorials/misc/binary_serialization_api.rst:175
#: ../../docs/tutorials/misc/binary_serialization_api.rst:177
#: ../../docs/tutorials/misc/binary_serialization_api.rst:179
#: ../../docs/tutorials/misc/binary_serialization_api.rst:181
#: ../../docs/tutorials/misc/binary_serialization_api.rst:183
#: ../../docs/tutorials/misc/binary_serialization_api.rst:192
#: ../../docs/tutorials/misc/binary_serialization_api.rst:194
#: ../../docs/tutorials/misc/binary_serialization_api.rst:196
#: ../../docs/tutorials/misc/binary_serialization_api.rst:198
#: ../../docs/tutorials/misc/binary_serialization_api.rst:207
#: ../../docs/tutorials/misc/binary_serialization_api.rst:209
#: ../../docs/tutorials/misc/binary_serialization_api.rst:211
#: ../../docs/tutorials/misc/binary_serialization_api.rst:213
#: ../../docs/tutorials/misc/binary_serialization_api.rst:222
#: ../../docs/tutorials/misc/binary_serialization_api.rst:224
#: ../../docs/tutorials/misc/binary_serialization_api.rst:226
#: ../../docs/tutorials/misc/binary_serialization_api.rst:228
#: ../../docs/tutorials/misc/binary_serialization_api.rst:230
#: ../../docs/tutorials/misc/binary_serialization_api.rst:232
#: ../../docs/tutorials/misc/binary_serialization_api.rst:241
#: ../../docs/tutorials/misc/binary_serialization_api.rst:243
#: ../../docs/tutorials/misc/binary_serialization_api.rst:245
#: ../../docs/tutorials/misc/binary_serialization_api.rst:247
#: ../../docs/tutorials/misc/binary_serialization_api.rst:249
#: ../../docs/tutorials/misc/binary_serialization_api.rst:251
#: ../../docs/tutorials/misc/binary_serialization_api.rst:253
#: ../../docs/tutorials/misc/binary_serialization_api.rst:255
#: ../../docs/tutorials/misc/binary_serialization_api.rst:257
#: ../../docs/tutorials/misc/binary_serialization_api.rst:266
#: ../../docs/tutorials/misc/binary_serialization_api.rst:268
#: ../../docs/tutorials/misc/binary_serialization_api.rst:270
#: ../../docs/tutorials/misc/binary_serialization_api.rst:272
#: ../../docs/tutorials/misc/binary_serialization_api.rst:274
#: ../../docs/tutorials/misc/binary_serialization_api.rst:276
#: ../../docs/tutorials/misc/binary_serialization_api.rst:278
#: ../../docs/tutorials/misc/binary_serialization_api.rst:280
#: ../../docs/tutorials/misc/binary_serialization_api.rst:282
#: ../../docs/tutorials/misc/binary_serialization_api.rst:284
#: ../../docs/tutorials/misc/binary_serialization_api.rst:286
#: ../../docs/tutorials/misc/binary_serialization_api.rst:288
#: ../../docs/tutorials/misc/binary_serialization_api.rst:297
#: ../../docs/tutorials/misc/binary_serialization_api.rst:299
#: ../../docs/tutorials/misc/binary_serialization_api.rst:301
#: ../../docs/tutorials/misc/binary_serialization_api.rst:303
#: ../../docs/tutorials/misc/binary_serialization_api.rst:312
#: ../../docs/tutorials/misc/binary_serialization_api.rst:332
#: ../../docs/tutorials/misc/binary_serialization_api.rst:334
#: ../../docs/tutorials/misc/binary_serialization_api.rst:342
#: ../../docs/tutorials/misc/binary_serialization_api.rst:361
#: ../../docs/tutorials/misc/binary_serialization_api.rst:373
#: ../../docs/tutorials/misc/binary_serialization_api.rst:385
#: ../../docs/tutorials/misc/binary_serialization_api.rst:398
#: ../../docs/tutorials/misc/binary_serialization_api.rst:400
#: ../../docs/tutorials/misc/binary_serialization_api.rst:409
#: ../../docs/tutorials/misc/binary_serialization_api.rst:411
#: ../../docs/tutorials/misc/binary_serialization_api.rst:420
#: ../../docs/tutorials/misc/binary_serialization_api.rst:428
#: ../../docs/tutorials/misc/binary_serialization_api.rst:441
#: ../../docs/tutorials/misc/binary_serialization_api.rst:443
#: ../../docs/tutorials/misc/binary_serialization_api.rst:445
#: ../../docs/tutorials/misc/binary_serialization_api.rst:454
#: ../../docs/tutorials/misc/binary_serialization_api.rst:456
#: ../../docs/tutorials/misc/binary_serialization_api.rst:458
#: ../../docs/tutorials/misc/binary_serialization_api.rst:460
#: ../../docs/tutorials/misc/binary_serialization_api.rst:469
#: ../../docs/tutorials/misc/binary_serialization_api.rst:471
#: ../../docs/tutorials/misc/binary_serialization_api.rst:473
#: ../../docs/tutorials/misc/binary_serialization_api.rst:475
#: ../../docs/tutorials/misc/binary_serialization_api.rst:477
msgid "4"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:375
msgid "additive"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:375
msgid "**+, -**"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:377
#: ../../docs/tutorials/misc/binary_serialization_api.rst:35
msgid "5"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:377
msgid "bit-wise shift"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:377
msgid "**<<, >>**"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:379
#: ../../docs/tutorials/misc/binary_serialization_api.rst:37
msgid "6"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:379
msgid "relational"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:379
msgid "**<, >, <=, >=**"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:381
#: ../../docs/tutorials/misc/binary_serialization_api.rst:39
msgid "7"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:381
msgid "equality"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:381
msgid "**==, !=**"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:383
#: ../../docs/tutorials/misc/binary_serialization_api.rst:41
#: ../../docs/tutorials/misc/binary_serialization_api.rst:123
#: ../../docs/tutorials/misc/binary_serialization_api.rst:136
#: ../../docs/tutorials/misc/binary_serialization_api.rst:147
#: ../../docs/tutorials/misc/binary_serialization_api.rst:162
#: ../../docs/tutorials/misc/binary_serialization_api.rst:175
#: ../../docs/tutorials/misc/binary_serialization_api.rst:194
#: ../../docs/tutorials/misc/binary_serialization_api.rst:209
#: ../../docs/tutorials/misc/binary_serialization_api.rst:224
#: ../../docs/tutorials/misc/binary_serialization_api.rst:243
#: ../../docs/tutorials/misc/binary_serialization_api.rst:268
#: ../../docs/tutorials/misc/binary_serialization_api.rst:299
#: ../../docs/tutorials/misc/binary_serialization_api.rst:321
#: ../../docs/tutorials/misc/binary_serialization_api.rst:334
msgid "8"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:383
msgid "bit-wise and"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:383
msgid "**&**"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:385
#: ../../docs/tutorials/misc/binary_serialization_api.rst:43
msgid "9"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:385
msgid "bit-wise exclusive or"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:385
msgid "**^**"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:387
#: ../../docs/tutorials/misc/binary_serialization_api.rst:45
msgid "10"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:387
msgid "bit-wise inclusive or"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:387
msgid "**|**"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:389
#: ../../docs/tutorials/misc/binary_serialization_api.rst:47
msgid "11"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:389
msgid "logical and"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:389
msgid "**&&**"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:391
msgid "12 (lowest)"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:391
msgid "logical inclusive or"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:391
msgid "**||**"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:395
msgid "Flow control"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:397
msgid "Godot Shading language supports the most common types of flow control:"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:437
msgid ""
"Keep in mind that, in modern GPUs, an infinite loop can exist and can freeze "
"your application (including editor). Godot can't protect you from this, so "
"be careful not to make this mistake!"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:441
msgid "Discarding"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:443
msgid ""
"Fragment and light functions can use the **discard** keyword. If used, the "
"fragment is discarded and nothing is written."
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:448
msgid ""
"It is possible to define functions in a Godot shader. They use the following "
"syntax:"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:463
msgid ""
"You can only use functions that have been defined above (higher in the "
"editor) the function from which you are calling them."
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:466
msgid "Function arguments can have special qualifiers:"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:468
msgid "**in**: Means the argument is only for reading (default)."
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:469
msgid "**out**: Means the argument is only for writing."
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:470
msgid "**inout**: Means the argument is fully passed via reference."
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:472
msgid "Example below:"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:481
#: ../../docs/tutorials/shading/migrating_to_godot_shader_language.rst:57
msgid "Varyings"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:483
msgid ""
"To send data from the vertex to the fragment processor function, *varyings* "
"are used. They are set for every primitive vertex in the *vertex processor*, "
"and the value is interpolated for every pixel in the fragment processor."
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:500
msgid "Varying can also be an array:"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:517
msgid "Interpolation qualifiers"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:519
msgid ""
"Certain values are interpolated during the shading pipeline. You can modify "
"how these interpolations are done by using *interpolation qualifiers*."
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:536
msgid "There are two possible interpolation qualifiers:"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:539
msgid "Qualifier"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:541
msgid "**flat**"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:541
msgid "The value is not interpolated."
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:543
msgid "**smooth**"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:543
msgid ""
"The value is interpolated in a perspective-correct fashion. This is the "
"default."
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:548
#: ../../docs/tutorials/shading/your_first_shader/your_first_spatial_shader.rst:192
msgid "Uniforms"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:550
msgid ""
"Passing values to shaders is possible. These are global to the whole shader "
"and are called *uniforms*. When a shader is later assigned to a material, "
"the uniforms will appear as editable parameters in it. Uniforms can't be "
"written from within the shader."
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:560
msgid ""
"You can set uniforms in the editor in the material. Or you can set them "
"through GDScript:"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:566
msgid ""
"The first argument to ``set_shader_param`` is the name of the uniform in the "
"shader. It must match *exactly* to the name of the uniform in the shader or "
"else it will not be recognized."
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:569
msgid ""
"Any GLSL type except for *void* can be a uniform. Additionally, Godot "
"provides optional shader hints to make the compiler understand for what the "
"uniform is used."
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:580
msgid ""
"It's important to understand that textures that are supplied as color "
"require hints for proper sRGB->linear conversion (i.e. ``hint_albedo``), as "
"Godot’s 3D engine renders in linear color space."
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:582
msgid "Full list of hints below:"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:585
msgid "Hint"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:587
msgid "hint_color"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:587
msgid "Used as color"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:589
msgid "**int, float**"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:589
msgid "hint_range(min,max [,step] )"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:589
msgid "Used as range (with min/max/step)"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:591
msgid "hint_albedo"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:591
msgid "Used as albedo color, default white"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:593
msgid "hint_black_albedo"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:593
msgid "Used as albedo color, default black"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:595
msgid "hint_normal"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:595
msgid "Used as normalmap"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:597
msgid "hint_white"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:597
msgid "As value, default to white."
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:599
msgid "hint_black"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:599
msgid "As value, default to black"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:601
msgid "hint_aniso"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:601
msgid "As flowmap, default to right."
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:604
msgid ""
"GDScript uses different variable types than GLSL does, so when passing "
"variables from GDScript to shaders, Godot converts the type automatically. "
"Below is a table of the corresponding types:"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:608
#, fuzzy
msgid "GDScript type"
msgstr "GDScript"

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:608
msgid "GLSL type"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:616
msgid "**Vector2**"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:618
msgid "**Vector3**"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:620
#, fuzzy
msgid "**Color**"
msgstr "색깔"

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:622
#, fuzzy
msgid "**Transform**"
msgstr "변형"

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:624
#, fuzzy
msgid "**Transform2D**"
msgstr "변형"

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:627
msgid ""
"Be careful when setting shader uniforms from GDScript, no error will be "
"thrown if the type does not match. Your shader will just exhibit undefined "
"behaviour."
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:630
msgid "Uniforms can also be assigned default values:"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:640
#, fuzzy
msgid "Built-in functions"
msgstr "정적 함수"

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:642
msgid ""
"A large number of built-in functions are supported, conforming to GLSL ES "
"3.0. When vec_type (float), vec_int_type, vec_uint_type, vec_bool_type "
"nomenclature is used, it can be scalar or vector."
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:645
msgid ""
"For a list of the functions that are not available in the GLES2 backend, "
"please see the :ref:`Differences between GLES2 and GLES3 doc "
"<doc_gles2_gles3_differences>`."
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:649
#: ../../docs/tutorials/misc/gles2_gles3_differences.rst:135
msgid "Function"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:651
msgid "vec_type **radians** ( vec_type degrees )"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:651
msgid "Convert degrees to radians"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:653
msgid "vec_type **degrees** ( vec_type radians )"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:653
msgid "Convert radians to degrees"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:655
msgid "vec_type **sin** ( vec_type x )"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:655
msgid "Sine"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:657
msgid "vec_type **cos** ( vec_type x )"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:657
msgid "Cosine"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:659
msgid "vec_type **tan** ( vec_type x )"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:659
msgid "Tangent"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:661
msgid "vec_type **asin** ( vec_type x )"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:661
msgid "Arc-Sine"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:663
msgid "vec_type **acos** ( vec_type x )"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:663
msgid "Arc-Cosine"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:665
msgid "vec_type **atan** ( vec_type y_over_x )"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:665
msgid "Arc-Tangent"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:667
msgid "vec_type **atan** ( vec_type y, vec_type x )"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:667
msgid "Arc-Tangent to convert vector to angle"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:669
msgid "vec_type **sinh** ( vec_type x )"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:669
msgid "Hyperbolic-Sine"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:671
msgid "vec_type **cosh** ( vec_type x )"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:671
msgid "Hyperbolic-Cosine"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:673
msgid "vec_type **tanh** ( vec_type x )"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:673
msgid "Hyperbolic-Tangent"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:675
msgid "vec_type **asinh** ( vec_type x )"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:675
msgid "Inverse-Hyperbolic-Sine"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:677
msgid "vec_type **acosh** ( vec_type x )"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:677
msgid "Inverse-Hyperbolic-Cosine"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:679
msgid "vec_type **atanh** ( vec_type x )"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:679
msgid "Inverse-Hyperbolic-Tangent"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:681
msgid "vec_type **pow** ( vec_type x, vec_type y )"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:681
msgid "Power"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:683
msgid "vec_type **exp** ( vec_type x )"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:683
msgid "Base-e Exponential"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:685
msgid "vec_type **exp2** ( vec_type x )"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:685
msgid "Base-2 Exponential"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:687
msgid "vec_type **log** ( vec_type x )"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:687
msgid "Natural Logarithm"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:689
msgid "vec_type **log2** ( vec_type x )"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:689
msgid "Base-2 Logarithm"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:691
msgid "vec_type **sqrt** ( vec_type x )"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:691
msgid "Square Root"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:693
msgid "vec_type **inversesqrt** ( vec_type x )"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:693
msgid "Inverse Square Root"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:695
msgid "vec_type **abs** ( vec_type x )"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:695
#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:697
msgid "Absolute"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:697
msgid "ivec_type **abs** ( ivec_type x )"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:699
msgid "vec_type **sign** ( vec_type x )"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:699
#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:701
msgid "Sign"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:701
msgid "ivec_type **sign** ( ivec_type x )"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:703
msgid "vec_type **floor** ( vec_type x )"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:703
msgid "Floor"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:705
msgid "vec_type **round** ( vec_type x )"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:705
msgid "Round"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:707
msgid "vec_type **roundEven** ( vec_type x )"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:707
msgid "Round nearest even"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:709
msgid "vec_type **trunc** ( vec_type x )"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:709
msgid "Truncation"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:711
msgid "vec_type **ceil** ( vec_type x )"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:711
msgid "Ceil"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:713
msgid "vec_type **fract** ( vec_type x )"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:713
msgid "Fractional"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:715
msgid "vec_type **mod** ( vec_type x, vec_type y )"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:715
#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:717
msgid "Remainder"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:717
msgid "vec_type **mod** ( vec_type x , float y )"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:719
#: ../../docs/tutorials/misc/gles2_gles3_differences.rst:137
msgid "vec_type **modf** ( vec_type x, out vec_type i )"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:719
msgid "Fractional of x, with i has integer part"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:721
msgid "vec_type  **min** ( vec_type a, vec_type b )"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:721
msgid "Minimum"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:723
msgid "vec_type  **max** ( vec_type a, vec_type b )"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:723
msgid "Maximum"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:725
msgid "vec_type **clamp** ( vec_type x, vec_type min, vec_type max )"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:725
msgid "Clamp to Min-Max"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:727
msgid "vec_type **mix** ( float a, float b, float c )"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:727
#, fuzzy
msgid "Linear Interpolate"
msgstr "보간법 (Interpolation)"

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:729
msgid "vec_type **mix** ( vec_type a, vec_type b, float c )"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:729
msgid "Linear Interpolate (Scalar Coef.)"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:731
msgid "vec_type **mix** ( vec_type a, vec_type b, vec_type c )"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:731
msgid "Linear Interpolate (Vector Coef.)"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:733
msgid "vec_type **mix** ( vec_type a, vec_type b, bvec_type c )"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:733
msgid "Linear Interpolate (Boolean-Vector Selection)"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:735
msgid "vec_type **step** ( vec_type a, vec_type b )"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:735
msgid "``b[i] < a[i] ? 0.0 : 1.0``"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:737
msgid "vec_type **step** ( float a, vec_type b)"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:737
msgid "``b[i] < a ? 0.0 : 1.0``"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:739
msgid "vec_type **smoothstep** ( vec_type a, vec_type b, vec_type c )"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:739
#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:741
msgid "Hermite Interpolate"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:741
msgid "vec_type **smoothstep** ( float a, float b, vec_type c )"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:743
msgid "bvec_type **isnan** ( vec_type x )"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:743
msgid "Scalar, or vector component being NaN"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:745
msgid "bvec_type **isinf** ( vec_type x )"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:745
msgid "Scalar, or vector component being INF"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:747
msgid "ivec_type **floatBitsToInt** ( vec_type x )"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:747
msgid "Float->Int bit copying, no conversion"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:749
msgid "uvec_type **floatBitsToUint** ( vec_type x )"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:749
msgid "Float->UInt bit copying, no conversion"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:751
msgid "vec_type **intBitsToFloat** ( ivec_type x )"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:751
msgid "Int->Float bit copying, no conversion"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:753
msgid "vec_type **uintBitsToFloat** ( uvec_type x  )"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:753
msgid "UInt->Float bit copying, no conversion"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:755
msgid "float **length** ( vec_type x )"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:755
msgid "Vector Length"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:757
msgid "float **distance** ( vec_type a, vec_type b )"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:757
msgid "Distance between vectors i.e ``length(a - b)``"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:759
msgid "float **dot** ( vec_type a, vec_type b )"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:759
msgid "Dot Product"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:761
msgid "vec3 **cross** ( vec3 a, vec3 b )"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:761
msgid "Cross Product"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:763
msgid "vec_type **normalize** ( vec_type x )"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:763
msgid "Normalize to unit length"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:765
msgid "vec3 **reflect** ( vec3 I, vec3 N )"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:765
msgid "Reflect"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:767
msgid "vec3 **refract** ( vec3 I, vec3 N, float eta )"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:767
msgid "Refract"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:769
msgid "vec_type **faceforward** ( vec_type N, vec_type I, vec_type Nref )"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:769
msgid "If dot(Nref, I) < 0, return N, otherwise –N"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:771
msgid "mat_type **matrixCompMult** ( mat_type x, mat_type y )"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:771
msgid "Matrix Component Multiplication"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:773
msgid "mat_type **outerProduct** ( vec_type column, vec_type row )"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:773
msgid "Matrix Outer Product"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:775
msgid "mat_type **transpose** ( mat_type m )"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:775
msgid "Transpose Matrix"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:777
msgid "float **determinant** ( mat_type m )"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:777
msgid "Matrix Determinant"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:779
msgid "mat_type **inverse** ( mat_type m )"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:779
msgid "Inverse Matrix"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:781
msgid "bvec_type **lessThan** ( vec_type x, vec_type y )"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:781
msgid "Bool vector cmp on < int/uint/float vectors"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:783
msgid "bvec_type **greaterThan** ( vec_type x, vec_type y )"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:783
msgid "Bool vector cmp on > int/uint/float vectors"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:785
msgid "bvec_type **lessThanEqual** ( vec_type x, vec_type y )"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:785
msgid "Bool vector cmp on <= int/uint/float vectors"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:787
msgid "bvec_type **greaterThanEqual** ( vec_type x, vec_type y )"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:787
msgid "Bool vector cmp on >= int/uint/float vectors"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:789
msgid "bvec_type **equal** ( vec_type x, vec_type y )"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:789
msgid "Bool vector cmp on == int/uint/float vectors"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:791
msgid "bvec_type **notEqual** ( vec_type x, vec_type y )"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:791
msgid "Bool vector cmp on != int/uint/float vectors"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:793
msgid "bool **any** ( bvec_type x )"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:793
msgid "Any component is ``true``"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:795
msgid "bool **all** ( bvec_type x )"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:795
msgid "All components are ``true``"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:797
msgid "bvec_type **not** ( bvec_type x )"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:797
#, fuzzy
msgid "Invert boolean vector"
msgstr "Invert Color(색상 반전)"

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:799
#: ../../docs/tutorials/misc/gles2_gles3_differences.rst:147
msgid "ivec2 **textureSize** ( sampler2D_type s, int lod )"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:799
msgid "Get the size of a 2D texture"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:801
msgid "ivec3 **textureSize** ( sampler2DArray_type s, int lod )"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:801
msgid "Get the size of a 2D texture array"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:803
msgid "ivec3 **textureSize** ( sampler3D s, int lod )"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:803
msgid "Get the size of a 3D texture"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:805
#: ../../docs/tutorials/misc/gles2_gles3_differences.rst:149
msgid "ivec2 **textureSize** ( samplerCube s, int lod )"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:805
msgid "Get the size of a Cube texture"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:807
msgid "vec4_type **texture** ( sampler2D_type s, vec2 uv [, float bias] )"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:807
msgid "Perform a 2D texture read"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:809
msgid ""
"vec4_type  **texture** ( sampler2DArray_type s, vec3 uv [, float bias] )"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:809
msgid "Perform a 2D texture array read"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:811
msgid "vec4_type  **texture** ( sampler3D_type s, vec3 uv [, float bias] )"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:811
msgid "Perform a 3D texture read"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:813
msgid "vec4 **texture** ( samplerCube s, vec3 uv [, float bias] )"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:813
msgid "Perform an Cube texture read"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:815
msgid "vec4_type **textureProj** ( sampler2D_type s, vec3 uv [, float bias] )"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:815
#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:817
msgid "Perform a 2D texture read with projection"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:817
msgid "vec4_type **textureProj** ( sampler2D_type s, vec4 uv [, float bias] )"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:819
msgid "vec4_type  **textureProj** ( sampler3D_type s, vec4 uv [, float bias] )"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:819
msgid "Perform a 3D texture read with projection"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:821
msgid "vec4_type **textureLod** ( sampler2D_type s, vec2 uv, float lod )"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:821
msgid "Perform a 2D texture read at custom mipmap"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:823
msgid "vec4_type **textureLod** ( sampler2DArray_type s, vec3 uv, float lod )"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:823
msgid "Perform a 2D texture array read at custom mipmap"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:825
msgid "vec4_type **textureLod** ( sampler3D_type s, vec3 uv, float lod )"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:825
#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:827
msgid "Perform a 3D texture read at custom mipmap"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:827
msgid "vec4 **textureLod** ( samplerCube s, vec3 uv, float lod )"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:829
msgid "vec4_type **textureProjLod** ( sampler2D_type s, vec3 uv, float lod )"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:829
#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:831
msgid "Perform a 2D texture read with projection/lod"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:831
msgid "vec4_type **textureProjLod** ( sampler2D_type s, vec4 uv, float lod )"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:833
msgid "vec4_type **textureProjLod** ( sampler3D_type s, vec4 uv, float lod )"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:833
msgid "Perform a 3D texture read with projection/lod"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:835
msgid "vec4_type **texelFetch** ( sampler2D_type s, ivec2 uv, int lod )"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:835
#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:837
#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:839
msgid "Fetch a single texel using integer coords"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:837
msgid "vec4_type **texelFetch** ( sampler2DArray_type s, ivec3 uv, int lod )"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:839
msgid "vec4_type **texelFetch** ( sampler3D_type s, ivec3 uv, int lod )"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:841
#: ../../docs/tutorials/misc/gles2_gles3_differences.rst:161
msgid "vec_type **dFdx** ( vec_type p )"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:841
msgid "Derivative in x using local differencing"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:843
#: ../../docs/tutorials/misc/gles2_gles3_differences.rst:163
msgid "vec_type **dFdy** ( vec_type p )"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:843
msgid "Derivative in y using local differencing"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:845
#: ../../docs/tutorials/misc/gles2_gles3_differences.rst:165
msgid "vec_type **fwidth** ( vec_type p )"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:845
msgid "Sum of absolute derivative in x and y"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/spatial_shader.rst:4
msgid "Spatial shaders"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/spatial_shader.rst:6
msgid ""
"Spatial shaders are used for shading 3D objects. They are the most complex "
"type of shader Godot offers. Spatial shaders are highly configurable with "
"different render modes and different rendering options (e.g. Subsurface "
"Scattering, Transmission, Ambient Occlusion, Rim lighting etc). Users can "
"optionally write vertex, fragment, and light processor functions to affect "
"how objects are drawn."
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/spatial_shader.rst:15
#: ../../docs/tutorials/shading/shading_reference/canvas_item_shader.rst:17
#: ../../docs/tutorials/shading/shading_reference/particle_shader.rst:30
msgid "Render mode"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/spatial_shader.rst:17
#: ../../docs/tutorials/shading/shading_reference/canvas_item_shader.rst:19
msgid "**blend_mix**"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/spatial_shader.rst:17
#: ../../docs/tutorials/shading/shading_reference/canvas_item_shader.rst:19
msgid "Mix blend mode (alpha is transparency), default."
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/spatial_shader.rst:19
#: ../../docs/tutorials/shading/shading_reference/canvas_item_shader.rst:21
msgid "**blend_add**"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/spatial_shader.rst:19
#: ../../docs/tutorials/shading/shading_reference/canvas_item_shader.rst:21
msgid "Additive blend mode."
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/spatial_shader.rst:21
#: ../../docs/tutorials/shading/shading_reference/canvas_item_shader.rst:23
msgid "**blend_sub**"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/spatial_shader.rst:21
#: ../../docs/tutorials/shading/shading_reference/canvas_item_shader.rst:23
msgid "Subtractive blend mode."
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/spatial_shader.rst:23
#: ../../docs/tutorials/shading/shading_reference/canvas_item_shader.rst:25
msgid "**blend_mul**"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/spatial_shader.rst:23
#: ../../docs/tutorials/shading/shading_reference/canvas_item_shader.rst:25
msgid "Multiplicative blend mode."
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/spatial_shader.rst:25
msgid "**depth_draw_opaque**"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/spatial_shader.rst:25
msgid "Only draw depth for opaque geometry (not transparent)."
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/spatial_shader.rst:27
msgid "**depth_draw_always**"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/spatial_shader.rst:27
msgid "Always draw depth (opaque and transparent)."
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/spatial_shader.rst:29
msgid "**depth_draw_never**"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/spatial_shader.rst:29
msgid "Never draw depth."
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/spatial_shader.rst:31
msgid "**depth_draw_alpha_prepass**"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/spatial_shader.rst:31
msgid "Do opaque depth pre-pass for transparent geometry."
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/spatial_shader.rst:33
msgid "**depth_test_disable**"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/spatial_shader.rst:33
msgid "Disable depth testing."
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/spatial_shader.rst:35
msgid "**cull_front**"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/spatial_shader.rst:35
msgid "Cull front-faces."
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/spatial_shader.rst:37
msgid "**cull_back**"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/spatial_shader.rst:37
msgid "Cull back-faces (default)."
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/spatial_shader.rst:39
msgid "**cull_disabled**"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/spatial_shader.rst:39
msgid "Culling disabled (double sided)."
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/spatial_shader.rst:41
#: ../../docs/tutorials/shading/shading_reference/canvas_item_shader.rst:31
msgid "**unshaded**"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/spatial_shader.rst:41
#: ../../docs/tutorials/shading/shading_reference/canvas_item_shader.rst:31
msgid "Result is just albedo. No lighting/shading happens in material."
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/spatial_shader.rst:43
msgid "**diffuse_lambert**"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/spatial_shader.rst:43
msgid "Lambert shading for diffuse (default)."
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/spatial_shader.rst:45
msgid "**diffuse_lambert_wrap**"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/spatial_shader.rst:45
msgid "Lambert wrapping (roughness dependent) for diffuse."
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/spatial_shader.rst:47
msgid "**diffuse_oren_nayar**"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/spatial_shader.rst:47
msgid "Oren Nayar for diffuse."
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/spatial_shader.rst:49
msgid "**diffuse_burley**"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/spatial_shader.rst:49
msgid "Burley (Disney PBS) for diffuse."
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/spatial_shader.rst:51
msgid "**diffuse_toon**"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/spatial_shader.rst:51
msgid "Toon shading for diffuse."
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/spatial_shader.rst:53
msgid "**specular_schlick_ggx**"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/spatial_shader.rst:53
msgid "Schlick-GGX for specular (default)."
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/spatial_shader.rst:55
msgid "**specular_blinn**"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/spatial_shader.rst:55
msgid "Blinn for specular (compatibility)."
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/spatial_shader.rst:57
msgid "**specular_phong**"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/spatial_shader.rst:57
msgid "Phong for specular (compatibility)."
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/spatial_shader.rst:59
msgid "**specular_toon**"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/spatial_shader.rst:59
msgid "Toon for specular."
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/spatial_shader.rst:61
msgid "**specular_disabled**"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/spatial_shader.rst:61
msgid "Disable specular."
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/spatial_shader.rst:63
#: ../../docs/tutorials/shading/shading_reference/canvas_item_shader.rst:35
msgid "**skip_vertex_transform**"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/spatial_shader.rst:63
msgid "VERTEX/NORMAL/etc. need to be transformed manually in vertex function."
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/spatial_shader.rst:65
msgid "**world_vertex_coords**"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/spatial_shader.rst:65
msgid "VERTEX/NORMAL/etc. are modified in world coordinates instead of local."
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/spatial_shader.rst:67
msgid "**ensure_correct_normals**"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/spatial_shader.rst:67
msgid "Use when non-uniform scale is applied to mesh."
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/spatial_shader.rst:69
msgid "**vertex_lighting**"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/spatial_shader.rst:69
msgid "Use vertex-based lighting."
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/spatial_shader.rst:71
msgid "**shadows_disabled**"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/spatial_shader.rst:71
msgid "Disable computing shadows in shader."
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/spatial_shader.rst:73
msgid "**ambient_light_disabled**"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/spatial_shader.rst:73
msgid "Disable contribution from ambient light and radiance map."
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/spatial_shader.rst:75
msgid "**shadow_to_opacity**"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/spatial_shader.rst:81
#: ../../docs/tutorials/shading/shading_reference/canvas_item_shader.rst:39
#: ../../docs/tutorials/shading/shading_reference/particle_shader.rst:40
#, fuzzy
msgid "Vertex built-ins"
msgstr "벡터 내장 타입"

#: ../../docs/tutorials/shading/shading_reference/spatial_shader.rst:83
#: ../../docs/tutorials/shading/shading_reference/canvas_item_shader.rst:41
#: ../../docs/tutorials/shading/shading_reference/particle_shader.rst:42
msgid ""
"Values marked as \"in\" are read-only. Values marked as \"out\" are for "
"optional writing and will not necessarily contain sensible values. Values "
"marked as \"inout\" provide a sensible default value, and can optionally be "
"written to. Samplers are not subjects of writing and they are not marked."
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/spatial_shader.rst:88
msgid ""
"Vertex data (``VERTEX``, ``NORMAL``, ``TANGENT``, ``BITANGENT``) are "
"presented in local model space. If not written to, these values will not be "
"modified and be passed through as they came."
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/spatial_shader.rst:92
msgid ""
"They can optionally be presented in world space by using the "
"*world_vertex_coords* render mode."
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/spatial_shader.rst:94
msgid ""
"Users can disable the built-in modelview transform (projection will still "
"happen later) and do it manually with the following code:"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/spatial_shader.rst:108
msgid ""
"Other built-ins, such as UV, UV2 and COLOR, are also passed through to the "
"fragment function if not modified."
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/spatial_shader.rst:110
msgid ""
"Users can override the modelview and projection transforms using the "
"``POSITION`` built-in. When ``POSITION`` is used, the value from ``VERTEX`` "
"is ignored and projection does not happen. However, the value passed to the "
"fragment shader still comes from ``VERTEX``."
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/spatial_shader.rst:114
#: ../../docs/tutorials/shading/shading_reference/canvas_item_shader.rst:87
msgid ""
"For instancing, the INSTANCE_CUSTOM variable contains the instance custom "
"data. When using particles, this information is usually:"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/spatial_shader.rst:117
#: ../../docs/tutorials/shading/shading_reference/canvas_item_shader.rst:90
msgid "**x**: Rotation angle in radians."
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/spatial_shader.rst:118
#: ../../docs/tutorials/shading/shading_reference/canvas_item_shader.rst:91
msgid "**y**: Phase during lifetime (0 to 1)."
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/spatial_shader.rst:119
#: ../../docs/tutorials/shading/shading_reference/canvas_item_shader.rst:92
msgid "**z**: Animation frame."
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/spatial_shader.rst:121
msgid ""
"This allows you to easily adjust the shader to a particle system using "
"default particles material. When writing a custom particles shader, this "
"value can be used as desired."
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/spatial_shader.rst:125
#: ../../docs/tutorials/shading/shading_reference/spatial_shader.rst:179
#: ../../docs/tutorials/shading/shading_reference/spatial_shader.rst:292
#: ../../docs/tutorials/shading/shading_reference/canvas_item_shader.rst:95
#: ../../docs/tutorials/shading/shading_reference/canvas_item_shader.rst:144
#: ../../docs/tutorials/shading/shading_reference/canvas_item_shader.rst:195
#: ../../docs/tutorials/shading/shading_reference/particle_shader.rst:51
msgid "Built-in"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/spatial_shader.rst:127
#: ../../docs/tutorials/shading/shading_reference/spatial_shader.rst:181
#: ../../docs/tutorials/shading/shading_reference/spatial_shader.rst:294
#: ../../docs/tutorials/shading/shading_reference/canvas_item_shader.rst:103
#: ../../docs/tutorials/shading/shading_reference/canvas_item_shader.rst:176
#: ../../docs/tutorials/shading/shading_reference/canvas_item_shader.rst:219
#: ../../docs/tutorials/shading/shading_reference/particle_shader.rst:67
msgid "in float **TIME**"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/spatial_shader.rst:127
#: ../../docs/tutorials/shading/shading_reference/spatial_shader.rst:181
#: ../../docs/tutorials/shading/shading_reference/spatial_shader.rst:294
msgid "Elapsed total time in seconds."
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/spatial_shader.rst:129
#: ../../docs/tutorials/shading/shading_reference/spatial_shader.rst:183
#: ../../docs/tutorials/shading/shading_reference/spatial_shader.rst:296
msgid "in vec2 **VIEWPORT_SIZE**"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/spatial_shader.rst:129
#: ../../docs/tutorials/shading/shading_reference/spatial_shader.rst:183
#: ../../docs/tutorials/shading/shading_reference/spatial_shader.rst:296
msgid "Size of viewport (in pixels)."
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/spatial_shader.rst:131
msgid "inout mat4 **WORLD_MATRIX**"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/spatial_shader.rst:131
#: ../../docs/tutorials/shading/shading_reference/spatial_shader.rst:188
#: ../../docs/tutorials/shading/shading_reference/spatial_shader.rst:303
msgid "Model space to world space transform."
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/spatial_shader.rst:133
#: ../../docs/tutorials/shading/shading_reference/spatial_shader.rst:190
#: ../../docs/tutorials/shading/shading_reference/spatial_shader.rst:305
msgid "in mat4 **INV_CAMERA_MATRIX**"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/spatial_shader.rst:133
#: ../../docs/tutorials/shading/shading_reference/spatial_shader.rst:190
#: ../../docs/tutorials/shading/shading_reference/spatial_shader.rst:305
msgid "World space to view space transform."
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/spatial_shader.rst:135
msgid "inout mat4 **PROJECTION_MATRIX**"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/spatial_shader.rst:135
#: ../../docs/tutorials/shading/shading_reference/spatial_shader.rst:194
#: ../../docs/tutorials/shading/shading_reference/spatial_shader.rst:309
#: ../../docs/tutorials/shading/shading_reference/canvas_item_shader.rst:101
msgid "View space to clip space transform."
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/spatial_shader.rst:137
#: ../../docs/tutorials/shading/shading_reference/spatial_shader.rst:192
#: ../../docs/tutorials/shading/shading_reference/spatial_shader.rst:307
msgid "in mat4 **CAMERA_MATRIX**"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/spatial_shader.rst:137
#: ../../docs/tutorials/shading/shading_reference/spatial_shader.rst:192
#: ../../docs/tutorials/shading/shading_reference/spatial_shader.rst:307
msgid "View space to world space transform."
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/spatial_shader.rst:139
msgid "inout mat4 **MODELVIEW_MATRIX**"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/spatial_shader.rst:139
msgid "Model space to view space transform (use if possible)."
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/spatial_shader.rst:141
msgid "inout mat4 **INV_PROJECTION_MATRIX**"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/spatial_shader.rst:141
#: ../../docs/tutorials/shading/shading_reference/spatial_shader.rst:196
#: ../../docs/tutorials/shading/shading_reference/spatial_shader.rst:311
msgid "Clip space to view space transform."
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/spatial_shader.rst:143
msgid "inout vec3 **VERTEX**"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/spatial_shader.rst:143
#, fuzzy
msgid "Vertex in local coordinates."
msgstr "이 기능은 항상 전반적인 좌표에 적용됩니다."

#: ../../docs/tutorials/shading/shading_reference/spatial_shader.rst:145
msgid "out vec4  **POSITION**"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/spatial_shader.rst:145
msgid "If written to, overrides final vertex position."
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/spatial_shader.rst:147
#: ../../docs/tutorials/shading/shading_reference/spatial_shader.rst:204
#: ../../docs/tutorials/shading/shading_reference/canvas_item_shader.rst:150
msgid "inout vec3 **NORMAL**"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/spatial_shader.rst:147
#, fuzzy
msgid "Normal in local coordinates."
msgstr "이 기능은 항상 전반적인 좌표에 적용됩니다."

#: ../../docs/tutorials/shading/shading_reference/spatial_shader.rst:149
#: ../../docs/tutorials/shading/shading_reference/spatial_shader.rst:206
msgid "inout vec3 **TANGENT**"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/spatial_shader.rst:149
#, fuzzy
msgid "Tangent in local coordinates."
msgstr "이 기능은 항상 전반적인 좌표에 적용됩니다."

#: ../../docs/tutorials/shading/shading_reference/spatial_shader.rst:151
#: ../../docs/tutorials/shading/shading_reference/spatial_shader.rst:208
msgid "inout vec3 **BINORMAL**"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/spatial_shader.rst:151
#, fuzzy
msgid "Binormal in local coordinates."
msgstr "이 기능은 항상 전반적인 좌표에 적용됩니다."

#: ../../docs/tutorials/shading/shading_reference/spatial_shader.rst:153
#: ../../docs/tutorials/shading/shading_reference/spatial_shader.rst:232
msgid "out float **ROUGHNESS**"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/spatial_shader.rst:153
msgid "Roughness for vertex lighting."
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/spatial_shader.rst:155
#: ../../docs/tutorials/shading/shading_reference/canvas_item_shader.rst:115
msgid "inout vec2 **UV**"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/spatial_shader.rst:155
msgid "UV main channel."
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/spatial_shader.rst:157
msgid "inout vec2 **UV2**"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/spatial_shader.rst:157
msgid "UV secondary channel."
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/spatial_shader.rst:159
#: ../../docs/tutorials/shading/shading_reference/spatial_shader.rst:218
#: ../../docs/tutorials/shading/shading_reference/spatial_shader.rst:325
msgid "in bool **OUTPUT_IS_SRGB**"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/spatial_shader.rst:159
#: ../../docs/tutorials/shading/shading_reference/spatial_shader.rst:218
#: ../../docs/tutorials/shading/shading_reference/spatial_shader.rst:325
msgid ""
"``true`` when calculations happen in sRGB color space (``true`` in GLES2, "
"``false`` in GLES3)."
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/spatial_shader.rst:162
#: ../../docs/tutorials/shading/shading_reference/canvas_item_shader.rst:117
#: ../../docs/tutorials/shading/shading_reference/canvas_item_shader.rst:159
#: ../../docs/tutorials/shading/shading_reference/particle_shader.rst:53
msgid "inout vec4 **COLOR**"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/spatial_shader.rst:162
msgid "Color from vertices."
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/spatial_shader.rst:164
#: ../../docs/tutorials/shading/shading_reference/canvas_item_shader.rst:119
msgid "inout float **POINT_SIZE**"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/spatial_shader.rst:164
msgid "Point size for point rendering."
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/spatial_shader.rst:166
msgid "in int **INSTANCE_ID**"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/spatial_shader.rst:166
msgid "Instance ID for instancing."
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/spatial_shader.rst:168
#: ../../docs/tutorials/shading/shading_reference/canvas_item_shader.rst:105
msgid "in vec4 **INSTANCE_CUSTOM**"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/spatial_shader.rst:168
msgid "Instance custom data (for particles, mostly)."
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/spatial_shader.rst:172
#: ../../docs/tutorials/shading/shading_reference/canvas_item_shader.rst:123
#, fuzzy
msgid "Fragment built-ins"
msgstr "벡터 내장 타입"

#: ../../docs/tutorials/shading/shading_reference/spatial_shader.rst:174
msgid ""
"The default use of a Godot fragment processor function is to set up the "
"material properties of your object and to let the built-in renderer handle "
"the final shading. However, you are not required to use all these "
"properties, and if you don't write to them, Godot will optimize away the "
"corresponding functionality."
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/spatial_shader.rst:185
#: ../../docs/tutorials/shading/shading_reference/spatial_shader.rst:298
#: ../../docs/tutorials/shading/shading_reference/canvas_item_shader.rst:146
#: ../../docs/tutorials/shading/shading_reference/canvas_item_shader.rst:197
msgid "in vec4 **FRAGCOORD**"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/spatial_shader.rst:185
msgid ""
"Coordinate of pixel center in screen space. ``xy`` specifies  position in "
"window, ``z`` specifies fragment depth if ``DEPTH`` is not used. Origin is "
"lower-left."
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/spatial_shader.rst:188
#: ../../docs/tutorials/shading/shading_reference/spatial_shader.rst:303
#: ../../docs/tutorials/shading/shading_reference/canvas_item_shader.rst:97
msgid "in mat4 **WORLD_MATRIX**"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/spatial_shader.rst:194
#: ../../docs/tutorials/shading/shading_reference/spatial_shader.rst:309
#: ../../docs/tutorials/shading/shading_reference/canvas_item_shader.rst:101
msgid "in mat4 **PROJECTION_MATRIX**"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/spatial_shader.rst:196
#: ../../docs/tutorials/shading/shading_reference/spatial_shader.rst:311
msgid "in mat4 **INV_PROJECTION_MATRIX**"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/spatial_shader.rst:198
msgid "in vec3 **VERTEX**"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/spatial_shader.rst:198
msgid "Vertex that comes from vertex function (default, in view space)."
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/spatial_shader.rst:200
#: ../../docs/tutorials/shading/shading_reference/spatial_shader.rst:319
msgid "in vec3 **VIEW**"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/spatial_shader.rst:200
msgid "Vector from camera to fragment position (in view space)."
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/spatial_shader.rst:202
msgid "in bool **FRONT_FACING**"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/spatial_shader.rst:202
msgid "``true`` if current face is front face."
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/spatial_shader.rst:204
msgid "Normal that comes from vertex function (default, in view space)."
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/spatial_shader.rst:206
msgid "Tangent that comes from vertex function."
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/spatial_shader.rst:208
msgid "Binormal that comes from vertex function."
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/spatial_shader.rst:210
#: ../../docs/tutorials/shading/shading_reference/canvas_item_shader.rst:152
msgid "out vec3 **NORMALMAP**"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/spatial_shader.rst:210
msgid "Set normal here if reading normal from a texture instead of NORMAL."
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/spatial_shader.rst:212
msgid "out float **NORMALMAP_DEPTH**"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/spatial_shader.rst:212
msgid "Depth from variable above. Defaults to 1.0."
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/spatial_shader.rst:214
#: ../../docs/tutorials/shading/shading_reference/spatial_shader.rst:315
#: ../../docs/tutorials/shading/shading_reference/canvas_item_shader.rst:157
#: ../../docs/tutorials/shading/shading_reference/canvas_item_shader.rst:204
msgid "in vec2 **UV**"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/spatial_shader.rst:214
#: ../../docs/tutorials/shading/shading_reference/spatial_shader.rst:315
msgid "UV that comes from vertex function."
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/spatial_shader.rst:216
#: ../../docs/tutorials/shading/shading_reference/spatial_shader.rst:317
msgid "in vec2 **UV2**"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/spatial_shader.rst:216
#: ../../docs/tutorials/shading/shading_reference/spatial_shader.rst:317
msgid "UV2 that comes from vertex function."
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/spatial_shader.rst:220
#: ../../docs/tutorials/shading/shading_reference/canvas_item_shader.rst:206
msgid "in vec4 **COLOR**"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/spatial_shader.rst:220
msgid "COLOR that comes from vertex function."
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/spatial_shader.rst:222
msgid "out vec3 **ALBEDO**"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/spatial_shader.rst:222
msgid "Albedo (default white)."
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/spatial_shader.rst:224
#: ../../docs/tutorials/shading/shading_reference/spatial_shader.rst:332
msgid "out float **ALPHA**"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/spatial_shader.rst:224
#: ../../docs/tutorials/shading/shading_reference/spatial_shader.rst:332
msgid ""
"Alpha (0..1); if written to, the material will go to the transparent "
"pipeline."
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/spatial_shader.rst:226
msgid "out float **ALPHA_SCISSOR**"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/spatial_shader.rst:226
msgid "If written to, values below a certain amount of alpha are discarded."
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/spatial_shader.rst:228
msgid "out float **METALLIC**"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/spatial_shader.rst:228
msgid "Metallic (0..1)."
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/spatial_shader.rst:230
msgid "out float **SPECULAR**"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/spatial_shader.rst:230
msgid ""
"Specular. Defaults to 0.5, best not to modify unless you want to change IOR."
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/spatial_shader.rst:232
msgid "Roughness (0..1)."
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/spatial_shader.rst:234
msgid "out float **RIM**"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/spatial_shader.rst:234
msgid "Rim (0..1). If used, Godot calculates rim lighting."
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/spatial_shader.rst:236
msgid "out float **RIM_TINT**"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/spatial_shader.rst:236
msgid ""
"Rim Tint, goes from 0 (white) to 1 (albedo). If used, Godot calculates rim "
"lighting."
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/spatial_shader.rst:238
msgid "out float **CLEARCOAT**"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/spatial_shader.rst:238
msgid "Small added specular blob. If used, Godot calculates Clearcoat."
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/spatial_shader.rst:240
msgid "out float **CLEARCOAT_GLOSS**"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/spatial_shader.rst:240
msgid "Gloss of Clearcoat. If used, Godot calculates Clearcoat."
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/spatial_shader.rst:242
msgid "out float **ANISOTROPY**"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/spatial_shader.rst:242
msgid "For distorting the specular blob according to tangent space."
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/spatial_shader.rst:244
msgid "out vec2 **ANISOTROPY_FLOW**"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/spatial_shader.rst:244
msgid "Distortion direction, use with flowmaps."
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/spatial_shader.rst:246
msgid "out float **SSS_STRENGTH**"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/spatial_shader.rst:246
msgid ""
"Strength of Subsurface Scattering. If used, Subsurface Scattering will be "
"applied to object."
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/spatial_shader.rst:248
msgid "out vec3 **TRANSMISSION**"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/spatial_shader.rst:248
msgid ""
"Transmission mask (default 0,0,0). Allows light to pass through object. Only "
"applied if used."
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/spatial_shader.rst:250
msgid "out vec3 **EMISSION**"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/spatial_shader.rst:250
msgid "Emission color (can go over 1,1,1 for HDR)."
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/spatial_shader.rst:252
msgid "out float **AO**"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/spatial_shader.rst:252
msgid "Strength of Ambient Occlusion. For use with pre-baked AO."
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/spatial_shader.rst:254
msgid "out float **AO_LIGHT_AFFECT**"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/spatial_shader.rst:254
msgid "How much AO affects lights (0..1; default 0)."
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/spatial_shader.rst:256
msgid "sampler2D **SCREEN_TEXTURE**"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/spatial_shader.rst:256
msgid ""
"Built-in Texture for reading from the screen. Mipmaps contain increasingly "
"blurred copies."
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/spatial_shader.rst:258
msgid "sampler2D **DEPTH_TEXTURE**"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/spatial_shader.rst:258
msgid ""
"Built-in Texture for reading depth from the screen. Must convert to linear "
"using INV_PROJECTION."
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/spatial_shader.rst:260
msgid "out float **DEPTH**"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/spatial_shader.rst:260
msgid "Custom depth value (0..1)."
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/spatial_shader.rst:262
#: ../../docs/tutorials/shading/shading_reference/canvas_item_shader.rst:170
#: ../../docs/tutorials/shading/shading_reference/canvas_item_shader.rst:215
msgid "in vec2 **SCREEN_UV**"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/spatial_shader.rst:262
msgid "Screen UV coordinate for current pixel."
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/spatial_shader.rst:264
#: ../../docs/tutorials/shading/shading_reference/canvas_item_shader.rst:174
#: ../../docs/tutorials/shading/shading_reference/canvas_item_shader.rst:217
msgid "in vec2 **POINT_COORD**"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/spatial_shader.rst:264
msgid "Point Coordinate for drawing points with POINT_SIZE."
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/spatial_shader.rst:268
#: ../../docs/tutorials/shading/shading_reference/canvas_item_shader.rst:184
#, fuzzy
msgid "Light built-ins"
msgstr "기본 내장 타입"

#: ../../docs/tutorials/shading/shading_reference/spatial_shader.rst:270
msgid ""
"Writing light processor functions is completely optional. You can skip the "
"light function by setting render_mode to ``unshaded``. If no light function "
"is written, Godot will use the material properties written to in the "
"fragment function to calculate the lighting for you (subject to the "
"render_mode)."
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/spatial_shader.rst:275
msgid ""
"To write a light function, assign something to ``DIFFUSE_LIGHT`` or "
"``SPECULAR_LIGHT``. Assigning nothing means no light is processed."
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/spatial_shader.rst:278
msgid ""
"The light function is called for every light in every pixel. It is called "
"within a loop for each light type."
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/spatial_shader.rst:281
msgid ""
"Below is an example of a custom light function using a Lambertian lighting "
"model:"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/spatial_shader.rst:289
msgid ""
"If you want the lights to add together, add the light contribution to "
"``DIFFUSE_LIGHT`` using ``+=``, rather than overwriting it."
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/spatial_shader.rst:298
msgid ""
"Coordinate of pixel center in screen space. ``xy`` specifies position in "
"window, ``z`` specifies fragment depth if ``DEPTH`` is not used. Origin is "
"lower-left."
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/spatial_shader.rst:313
#: ../../docs/tutorials/shading/shading_reference/canvas_item_shader.rst:201
msgid "in vec3 **NORMAL**"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/spatial_shader.rst:313
msgid "Normal vector, in view space."
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/spatial_shader.rst:319
msgid "View vector, in view space."
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/spatial_shader.rst:321
msgid "in vec3 **LIGHT**"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/spatial_shader.rst:321
msgid "Light Vector, in view space."
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/spatial_shader.rst:323
msgid "in vec3 **ATTENUATION**"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/spatial_shader.rst:323
msgid "Attenuation based on distance or shadow."
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/spatial_shader.rst:328
msgid "in vec3 **ALBEDO**"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/spatial_shader.rst:328
msgid "Base albedo."
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/spatial_shader.rst:330
msgid "in vec3 **LIGHT_COLOR**"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/spatial_shader.rst:330
msgid "Color of light multiplied by energy."
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/spatial_shader.rst:335
msgid "in float **ROUGHNESS**"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/spatial_shader.rst:335
msgid "Roughness."
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/spatial_shader.rst:337
msgid "in vec3 **TRANSMISSION**"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/spatial_shader.rst:337
#, fuzzy
msgid "Transmission mask from fragment function."
msgstr "당신의 첫 게임"

#: ../../docs/tutorials/shading/shading_reference/spatial_shader.rst:339
msgid "out vec3 **DIFFUSE_LIGHT**"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/spatial_shader.rst:339
msgid "Diffuse light result."
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/spatial_shader.rst:341
msgid "out vec3 **SPECULAR_LIGHT**"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/spatial_shader.rst:341
msgid "Specular light result."
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/canvas_item_shader.rst:4
msgid "CanvasItem shaders"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/canvas_item_shader.rst:6
msgid ""
"CanvasItem shaders are used to draw all 2D elements in Godot. These include "
"all nodes that inherit from CanvasItems, and all GUI elements."
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/canvas_item_shader.rst:9
msgid ""
"CanvasItem shaders contain less built-in variables and functionality than "
"Spatial shaders, but they maintain the same basic structure with vertex, "
"fragment, and light processor functions."
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/canvas_item_shader.rst:27
msgid "**blend_premul_alpha**"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/canvas_item_shader.rst:27
msgid "Pre-multiplied alpha blend mode."
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/canvas_item_shader.rst:29
msgid "**blend_disabled**"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/canvas_item_shader.rst:29
msgid "Disable blending, values (including alpha) are written as-is."
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/canvas_item_shader.rst:33
msgid "**light_only**"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/canvas_item_shader.rst:33
msgid "Only draw on light pass."
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/canvas_item_shader.rst:35
msgid "VERTEX/NORMAL/etc need to be transformed manually in vertex function."
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/canvas_item_shader.rst:46
msgid ""
"Vertex data (``VERTEX``) is presented in local space (pixel coordinates, "
"relative to the camera). If not written to, these values will not be "
"modified and be passed through as they came."
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/canvas_item_shader.rst:49
msgid ""
"The user can disable the built-in modelview transform (projection will still "
"happen later) and do it manually with the following code:"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/canvas_item_shader.rst:62
msgid ""
"``WORLD_MATRIX`` is actually a modelview matrix. It takes input in local "
"space and transforms it into view space."
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/canvas_item_shader.rst:65
msgid ""
"In order to get the world space coordinates of a vertex, you have to pass in "
"a custom uniform like so:"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/canvas_item_shader.rst:72
msgid "Then, in your vertex shader:"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/canvas_item_shader.rst:83
msgid ""
"``world_position`` can then be used in either the vertex or fragment "
"functions."
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/canvas_item_shader.rst:85
msgid ""
"Other built-ins, such as UV and COLOR, are also passed through to the "
"fragment function if not modified."
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/canvas_item_shader.rst:97
msgid "Image space to view space transform."
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/canvas_item_shader.rst:99
msgid "in mat4 **EXTRA_MATRIX**"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/canvas_item_shader.rst:99
msgid "Extra transform."
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/canvas_item_shader.rst:103
msgid "Global time, in seconds."
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/canvas_item_shader.rst:105
msgid "Instance custom data."
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/canvas_item_shader.rst:107
#: ../../docs/tutorials/shading/shading_reference/canvas_item_shader.rst:178
msgid "in bool **AT_LIGHT_PASS**"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/canvas_item_shader.rst:107
#: ../../docs/tutorials/shading/shading_reference/canvas_item_shader.rst:178
msgid "``true`` if this is a light pass."
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/canvas_item_shader.rst:109
msgid "inout vec2 **VERTEX**"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/canvas_item_shader.rst:109
msgid "Vertex, in image space."
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/canvas_item_shader.rst:111
#: ../../docs/tutorials/shading/shading_reference/canvas_item_shader.rst:166
#: ../../docs/tutorials/shading/shading_reference/canvas_item_shader.rst:211
msgid "in vec2 **TEXTURE_PIXEL_SIZE**"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/canvas_item_shader.rst:111
#: ../../docs/tutorials/shading/shading_reference/canvas_item_shader.rst:166
#: ../../docs/tutorials/shading/shading_reference/canvas_item_shader.rst:211
msgid ""
"Normalized pixel size of default 2D texture. For a Sprite with a texture of "
"size 64x32px, **TEXTURE_PIXEL_SIZE** = :code:`vec2(1/64, 1/32)`"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/canvas_item_shader.rst:115
msgid "UV."
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/canvas_item_shader.rst:117
msgid "Color from vertex primitive."
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/canvas_item_shader.rst:119
msgid "Point size for point drawing."
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/canvas_item_shader.rst:125
msgid ""
"Certain Nodes (for example, :ref:`Sprites <class_Sprite>`) display a texture "
"by default. However, when a custom fragment function is attached to these "
"nodes, the texture lookup needs to be done manually. Godot does not provide "
"the texture color in the ``COLOR`` built-in variable; to read the texture "
"color for such nodes, use:"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/canvas_item_shader.rst:134
msgid ""
"This differs from the behaviour of the built-in normal map. If a normal map "
"is attached, Godot uses it by default and assigns its value to the built-in "
"``NORMAL`` variable. If you are using a normal map meant for use in 3D, it "
"will appear inverted. In order to use it in your shader, you must assign it "
"to the ``NORMALMAP`` property. Godot will handle converting it for use in 2D "
"and overwriting ``NORMAL``."
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/canvas_item_shader.rst:146
#: ../../docs/tutorials/shading/shading_reference/canvas_item_shader.rst:197
msgid ""
"Coordinate of pixel center. In screen space. ``xy`` specifies position in "
"window, ``z`` specifies fragment depth if ``DEPTH`` is not used. Origin is "
"lower-left."
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/canvas_item_shader.rst:150
msgid "Normal read from **NORMAL_TEXTURE**. Writable."
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/canvas_item_shader.rst:152
msgid ""
"Configures normal maps meant for 3D for use in 2D. If used, overwrites "
"**NORMAL**."
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/canvas_item_shader.rst:155
msgid "inout float **NORMALMAP_DEPTH**"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/canvas_item_shader.rst:155
msgid "Normalmap depth for scaling."
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/canvas_item_shader.rst:157
msgid "UV from vertex function."
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/canvas_item_shader.rst:159
msgid ""
"Color from vertex function and output fragment color. If unused, will be set "
"to **TEXTURE** color."
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/canvas_item_shader.rst:162
msgid "in sampler2D **TEXTURE**"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/canvas_item_shader.rst:162
msgid "Default 2D texture."
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/canvas_item_shader.rst:164
msgid "in sampler2D **NORMAL_TEXTURE**"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/canvas_item_shader.rst:164
msgid "Default 2D normal texture."
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/canvas_item_shader.rst:170
msgid "Screen UV for use with **SCREEN_TEXTURE**."
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/canvas_item_shader.rst:172
msgid "in vec2 **SCREEN_PIXEL_SIZE**"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/canvas_item_shader.rst:172
msgid "Size of individual pixels. Equal to inverse of resolution."
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/canvas_item_shader.rst:174
msgid "Coordinate for drawing points."
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/canvas_item_shader.rst:176
#: ../../docs/tutorials/shading/shading_reference/canvas_item_shader.rst:219
#: ../../docs/tutorials/shading/shading_reference/particle_shader.rst:67
msgid "Global time in seconds."
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/canvas_item_shader.rst:180
msgid "in sampler2D **SCREEN_TEXTURE**"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/canvas_item_shader.rst:180
msgid "Screen texture, mipmaps contain gaussian blurred versions."
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/canvas_item_shader.rst:186
msgid ""
"Light processor functions work differently in 2D than they do in 3D. In "
"CanvasItem shaders, the shader is called once for the object being drawn, "
"and then once for each light touching that object in the scene. Use "
"render_mode ``unshaded`` if you do not want any light passes to occur for "
"that object. Use render_mode ``light_only`` if you only want light passes to "
"occur for that object; this can be useful when you only want the object "
"visible where it is covered by light."
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/canvas_item_shader.rst:192
msgid ""
"When the shader is on a light pass, the ``AT_LIGHT_PASS`` variable will be "
"``true``."
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/canvas_item_shader.rst:201
msgid ""
"Input Normal. Although this value is passed in, **normal calculation still "
"happens outside of this function**."
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/canvas_item_shader.rst:204
msgid "UV from vertex function, equivalent to the UV in the fragment function."
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/canvas_item_shader.rst:206
msgid ""
"Input Color. This is the output of the fragment function with final "
"modulation applied."
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/canvas_item_shader.rst:209
msgid "sampler2D **TEXTURE**"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/canvas_item_shader.rst:209
msgid "Current texture in use for CanvasItem."
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/canvas_item_shader.rst:215
msgid "**SCREEN_TEXTURE** Coordinate (for using with screen texture)."
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/canvas_item_shader.rst:217
msgid "UV for Point Sprite."
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/canvas_item_shader.rst:221
msgid "inout vec2 **LIGHT_VEC**"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/canvas_item_shader.rst:221
msgid ""
"Vector from light to fragment in local coordinates. It can be modified to "
"alter illumination direction when normal maps are used."
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/canvas_item_shader.rst:224
msgid "inout vec2 **SHADOW_VEC**"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/canvas_item_shader.rst:224
msgid ""
"Vector from light to fragment in local coordinates. It can be modified to "
"alter shadow computation."
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/canvas_item_shader.rst:227
msgid "inout float **LIGHT_HEIGHT**"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/canvas_item_shader.rst:227
msgid "Height of Light. Only effective when normals are used."
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/canvas_item_shader.rst:229
msgid "inout vec4 **LIGHT_COLOR**"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/canvas_item_shader.rst:229
msgid "Color of Light."
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/canvas_item_shader.rst:231
msgid "in vec2 **LIGHT_UV**"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/canvas_item_shader.rst:231
msgid "UV for Light texture."
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/canvas_item_shader.rst:233
msgid "out vec4 **SHADOW_COLOR**"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/canvas_item_shader.rst:233
msgid "Shadow Color of Light."
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/canvas_item_shader.rst:235
msgid "inout vec4 **LIGHT**"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/canvas_item_shader.rst:235
msgid ""
"Value from the Light texture and output color. Can be modified. If not used, "
"the light function is ignored."
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/particle_shader.rst:4
#, fuzzy
msgid "Particle shaders"
msgstr "파티클(Particles)"

#: ../../docs/tutorials/shading/shading_reference/particle_shader.rst:6
msgid ""
"Particle shaders are a special type of vertex shader that runs before the "
"object is drawn. They are used for calculating material properties such as "
"color, position, and rotation. They are drawn with any regular material for "
"CanvasItem or Spatial, depending on whether they are 2D or 3D."
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/particle_shader.rst:11
msgid ""
"Particle shaders are unique because they are not used to draw the object "
"itself; they are used to calculate particle properties, which are then used "
"by the CanvasItem of Spatial shader. They contain only a vertex processor "
"function that outputs multiple properties (see built-ins below)."
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/particle_shader.rst:16
msgid ""
"Particle shaders use a transform feedback shader, which is a special type of "
"vertex shader that runs on its own. It takes in data in a buffer like a "
"regular vertex shader does, but it also outputs to data buffers instead of "
"outputting to the fragment shader for pixel-processing. Because of this, "
"transform feedback shaders can build on themselves each run, unlike other "
"shaders that discard the data they have calculated once they draw to the "
"frame buffer."
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/particle_shader.rst:23
msgid ""
"Particle shaders are only available in the GLES3 backend. If you need "
"particles in GLES2, use :ref:`CPUParticles <class_CPUParticles>`."
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/particle_shader.rst:32
msgid "**keep_data**"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/particle_shader.rst:32
msgid "Do not clear previous data on restart."
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/particle_shader.rst:34
msgid "**disable_force**"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/particle_shader.rst:34
msgid "Disable attractor force. (Not currently implemented in 3.1)"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/particle_shader.rst:36
msgid "**disable_velocity**"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/particle_shader.rst:36
msgid "Ignore **VELOCITY** value."
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/particle_shader.rst:47
msgid ""
"In order to use the ``COLOR`` variable in a SpatialMaterial, set "
"``use_vertex_as_albedo`` to ``true``. In a ShaderMaterial, access it with "
"the ``COLOR`` variable."
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/particle_shader.rst:53
msgid ""
"Particle color, can be written to and accessed in mesh's vertex function."
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/particle_shader.rst:55
msgid "inout vec3 **VELOCITY**"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/particle_shader.rst:55
msgid "Particle velocity, can be modified."
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/particle_shader.rst:57
msgid "out float **MASS**"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/particle_shader.rst:57
msgid "Particle mass, use for attractors (not implemented in 3.1)."
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/particle_shader.rst:59
msgid "inout bool **ACTIVE**"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/particle_shader.rst:59
msgid "``true`` when Particle is active, can be set to ``false``."
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/particle_shader.rst:61
msgid "in bool **RESTART**"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/particle_shader.rst:61
msgid "``true`` when particle must restart (lifetime cycled)."
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/particle_shader.rst:63
msgid "inout vec4 **CUSTOM**"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/particle_shader.rst:63
msgid ""
"Custom particle data. Accessible from shader of mesh as **INSTANCE_CUSTOM**."
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/particle_shader.rst:65
msgid "inout mat4 **TRANSFORM**"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/particle_shader.rst:65
msgid "Particle transform."
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/particle_shader.rst:69
msgid "in float **LIFETIME**"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/particle_shader.rst:69
msgid "Particle lifetime."
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/particle_shader.rst:71
msgid "in float **DELTA**"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/particle_shader.rst:71
msgid "Delta process time."
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/particle_shader.rst:73
msgid "in uint **NUMBER**"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/particle_shader.rst:73
msgid "Unique number since emission start."
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/particle_shader.rst:75
msgid "in int **INDEX**"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/particle_shader.rst:75
msgid "Particle index (from total particles)."
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/particle_shader.rst:77
msgid "in mat4 **EMISSION_TRANSFORM**"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/particle_shader.rst:77
msgid "Emitter transform (used for non-local systems)."
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/particle_shader.rst:79
msgid "in uint **RANDOM_SEED**"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/particle_shader.rst:79
msgid "Random seed used as base for random."
msgstr ""

#: ../../docs/tutorials/shading/your_first_shader/index.rst:2
#, fuzzy
msgid "Your first shader"
msgstr "당신의 첫 게임"

#: ../../docs/tutorials/shading/your_first_shader/index.rst:4
msgid ""
"This tutorial series will walk you through writing your first shader. It is "
"intended for people who have very little prior experience with shaders and "
"want to get started with the basics. This tutorial will not cover advanced "
"topics and it is not comprehensive. For a comprehensive and detailed "
"overview of shaders in Godot see the :ref:`Shading Reference Page <toc-"
"shading-reference>`."
msgstr ""

#: ../../docs/tutorials/shading/your_first_shader/index.rst:10
msgid ""
"\"What are shaders\" gives you a high-level overview of what shaders are and "
"how they fit into the rendering pipeline."
msgstr ""

#: ../../docs/tutorials/shading/your_first_shader/index.rst:13
msgid ""
"The \"your first shader\" tutorials walk you through the process of writing "
"a shader step-by-step."
msgstr ""

#: ../../docs/tutorials/shading/your_first_shader/index.rst:16
msgid ""
"For a more general introduction into shaders and the OpenGL Shading "
"Language, use `The Book of Shaders <https://thebookofshaders.com>`_."
msgstr ""

#: ../../docs/tutorials/shading/your_first_shader/what_are_shaders.rst:4
#, fuzzy
msgid "What are shaders?"
msgstr "파티클(Particles)"

#: ../../docs/tutorials/shading/your_first_shader/what_are_shaders.rst:9
msgid ""
"So, you have decided to give shaders a try. You have likely heard that they "
"can be used to create interesting effects that run incredibly fast. You have "
"also likely heard that they are terrifying. Both are true."
msgstr ""

#: ../../docs/tutorials/shading/your_first_shader/what_are_shaders.rst:13
msgid ""
"Shaders can be used to create a wide range of effects (in fact everything "
"drawn in a modern rendering engine is done with shaders)."
msgstr ""

#: ../../docs/tutorials/shading/your_first_shader/what_are_shaders.rst:16
msgid ""
"Writing shaders can also be very difficult for people unfamiliar with them. "
"Godot tries to make writing shaders a little easier by exposing many useful "
"built-in features and handling some of the lower-level initialization work "
"for you. However, GLSL (the OpenGL Shading Language, which Godot uses) is "
"still unintuitive and restricting, especially for users who are used to "
"GDScript."
msgstr ""

#: ../../docs/tutorials/shading/your_first_shader/what_are_shaders.rst:22
msgid "But what are they?"
msgstr ""

#: ../../docs/tutorials/shading/your_first_shader/what_are_shaders.rst:24
msgid ""
"Shaders are a special kind of program that runs on Graphics Processing Units "
"(GPUs). Most computers have some sort of GPU, either one integrated into "
"their CPU or discrete (meaning it is a separate hardware component, for "
"example, the typical graphics card). GPUs are especially useful for "
"rendering because they are optimized for running thousands of instructions "
"in parallel."
msgstr ""

#: ../../docs/tutorials/shading/your_first_shader/what_are_shaders.rst:29
msgid ""
"The output of the shader is typically the colored pixels of the object drawn "
"to the viewport. But some shaders allow for specialized outputs (this is "
"especially true for APIs like Vulkan). Shaders operate inside the shader "
"pipeline. The standard process is the vertex -> fragment shader pipeline. "
"The vertex shader is used to decided where each vertex (point in a 3D model, "
"or corner of a Sprite) goes and the fragment shader decides what color "
"individual pixels receive."
msgstr ""

#: ../../docs/tutorials/shading/your_first_shader/what_are_shaders.rst:35
msgid ""
"Suppose you want to update all the pixels in a texture to a given color, on "
"the CPU you would write:"
msgstr ""

#: ../../docs/tutorials/shading/your_first_shader/what_are_shaders.rst:43
msgid ""
"In a shader you are given access only to the inside of the loop so what you "
"write looks like this:"
msgstr ""

#: ../../docs/tutorials/shading/your_first_shader/what_are_shaders.rst:52
msgid ""
"You have no control over how this function is called. So you have to design "
"your shaders differently from how you would design programs on the CPU."
msgstr ""

#: ../../docs/tutorials/shading/your_first_shader/what_are_shaders.rst:55
msgid ""
"A consequence of the shader pipeline is that you cannot access the results "
"from a previous run of the shader, you cannot access other pixels from the "
"pixel being drawn, and you cannot write outside of the current pixel being "
"drawn. This enables the GPU to execute the shader for different pixels in "
"parallel, as they do not depend on each other. This lack of flexibility is "
"designed to work with the GPU which allows shaders to be incredibly fast."
msgstr ""

#: ../../docs/tutorials/shading/your_first_shader/what_are_shaders.rst:62
msgid "What can they do"
msgstr ""

#: ../../docs/tutorials/shading/your_first_shader/what_are_shaders.rst:64
msgid "position vertices very fast"
msgstr ""

#: ../../docs/tutorials/shading/your_first_shader/what_are_shaders.rst:65
msgid "compute color very fast"
msgstr ""

#: ../../docs/tutorials/shading/your_first_shader/what_are_shaders.rst:66
msgid "compute lighting very fast"
msgstr ""

#: ../../docs/tutorials/shading/your_first_shader/what_are_shaders.rst:67
msgid "lots and lots of math"
msgstr ""

#: ../../docs/tutorials/shading/your_first_shader/what_are_shaders.rst:70
msgid "What can't they do"
msgstr ""

#: ../../docs/tutorials/shading/your_first_shader/what_are_shaders.rst:72
msgid "draw outside mesh"
msgstr ""

#: ../../docs/tutorials/shading/your_first_shader/what_are_shaders.rst:73
msgid "access other pixels from current pixel (or vertices)"
msgstr ""

#: ../../docs/tutorials/shading/your_first_shader/what_are_shaders.rst:74
#, fuzzy
msgid "store previous iterations"
msgstr "기타 고려 사항"

#: ../../docs/tutorials/shading/your_first_shader/what_are_shaders.rst:75
msgid "update on the fly (they can, but they need to be compiled)"
msgstr ""

#: ../../docs/tutorials/shading/your_first_shader/what_are_shaders.rst:78
#, fuzzy
msgid "Structure of a shader"
msgstr "Label의 사진"

#: ../../docs/tutorials/shading/your_first_shader/what_are_shaders.rst:80
msgid ""
"In Godot, shaders are made up of 3 main functions: the ``vertex()`` "
"function, the ``fragment()`` function and the ``light()`` function."
msgstr ""

#: ../../docs/tutorials/shading/your_first_shader/what_are_shaders.rst:83
msgid ""
"The ``vertex()`` function runs over all the vertices in the mesh and sets "
"their positions as well as some other per-vertex variables."
msgstr ""

#: ../../docs/tutorials/shading/your_first_shader/what_are_shaders.rst:86
msgid ""
"The ``fragment()`` function runs for every pixel that is covered by the "
"mesh. It uses the variables from the ``vertex()`` function to run. The "
"variables from the ``vertex()`` function are interpolated between the "
"vertices to provide the values for the ``fragment()`` function."
msgstr ""

#: ../../docs/tutorials/shading/your_first_shader/what_are_shaders.rst:90
msgid ""
"The ``light()`` function runs for every pixel and for every light. It takes "
"variables from the ``fragment()`` function and from previous runs of itself."
msgstr ""

#: ../../docs/tutorials/shading/your_first_shader/what_are_shaders.rst:93
msgid ""
"For more information about how shaders operate specifically in Godot see "
"the :ref:`Shaders <doc_shaders>` doc."
msgstr ""

#: ../../docs/tutorials/shading/your_first_shader/what_are_shaders.rst:96
#, fuzzy
msgid "Technical overview"
msgstr "파트 개요"

#: ../../docs/tutorials/shading/your_first_shader/what_are_shaders.rst:98
msgid ""
"GPUs are able to render graphics much faster than CPUs for a few reasons, "
"but most notably, because they are able to run calculations massively in "
"parallel. A CPU typically has 4 or 8 cores while a GPU typically has "
"thousands. That means a GPU can do hundreds of tasks at once. GPU architects "
"have exploited this in a way that allows for doing many calculations very "
"quickly, but only when many or all cores are doing the same calculation at "
"once, but with different data."
msgstr ""

#: ../../docs/tutorials/shading/your_first_shader/what_are_shaders.rst:104
msgid ""
"That is where shaders come in. The GPU will call the shader a bunch of times "
"simultaneously, and then operate on different bits of data (vertices, or "
"pixels). These bunches of data are often called wavefronts. A shader will "
"run the same for every thread in the wavefront. For example, if a given GPU "
"can handle 100 threads per wavefront, a wavefront will run on a 10x10 block "
"of pixels together. And it will continue to run for all pixels in that "
"wavefront until they are complete. Accordingly, if you have one pixel slower "
"than the rest (due to excessive branching), the entire block will be slowed "
"down, resulting in massively slower render times. This is different than CPU "
"based operations, on a CPU if you can speed up even one pixel the entire "
"rendering time will decrease. On a GPU, you have to speed up the entire "
"wavefront to speed up rendering."
msgstr ""

#: ../../docs/tutorials/shading/your_first_shader/your_first_canvasitem_shader.rst:4
#: ../../docs/tutorials/shading/your_first_shader/your_first_canvasitem_shader.rst:51
#, fuzzy
msgid "Your first CanvasItem shader"
msgstr "당신의 첫 게임"

#: ../../docs/tutorials/shading/your_first_shader/your_first_canvasitem_shader.rst:9
msgid ""
"Shaders are special programs that execute on the GPU and are used for "
"rendering graphics. All modern rendering is done with shaders. For a more "
"detailed description of what shaders are please see :ref:`What are shaders "
"<doc_what_are_shaders>`."
msgstr ""

#: ../../docs/tutorials/shading/your_first_shader/your_first_canvasitem_shader.rst:13
msgid ""
"This tutorial will focus on the practical aspects of writing shader programs "
"by walking you through the process of writing a shader with both vertex and "
"fragment functions. This tutorial targets absolute beginners to shaders."
msgstr ""

#: ../../docs/tutorials/shading/your_first_shader/your_first_canvasitem_shader.rst:17
msgid ""
"If you have experience writing shaders and are just looking for an overview "
"of how shaders work in Godot, see the :ref:`Shading Reference <toc-shading-"
"reference>`."
msgstr ""

#: ../../docs/tutorials/shading/your_first_shader/your_first_canvasitem_shader.rst:23
msgid ""
":ref:`CanvasItem <doc_canvas_item_shader>` shaders are used to draw all 2D "
"objects in Godot, while :ref:`Spatial <doc_spatial_shader>` shaders are used "
"to draw all 3D objects."
msgstr ""

#: ../../docs/tutorials/shading/your_first_shader/your_first_canvasitem_shader.rst:26
msgid ""
"In order to use a shader it must be attached inside a :ref:`Material "
"<class_material>` which must be attached to an object. Materials are a type "
"of :ref:`Resource <doc_resources>`. To draw multiple objects with the same "
"material, the material must be attached to each object."
msgstr ""

#: ../../docs/tutorials/shading/your_first_shader/your_first_canvasitem_shader.rst:30
msgid ""
"All objects derived from a :ref:`CanvasItem <class_canvasitem>` have a "
"material property. This includes all :ref:`GUI elements <class_Control>`, :"
"ref:`Sprites <class_sprite>`, :ref:`TileMaps <class_tilemap>`, :ref:"
"`MeshInstance2Ds <class_meshinstance2d>` etc. They also have an option to "
"inherit their parent's material. This can be useful if you have a large "
"number of nodes that you want to use the same material."
msgstr ""

#: ../../docs/tutorials/shading/your_first_shader/your_first_canvasitem_shader.rst:36
msgid ""
"To begin, create a Sprite node. You can use any CanvasItem, but for this "
"tutorial we will use a Sprite."
msgstr ""

#: ../../docs/tutorials/shading/your_first_shader/your_first_canvasitem_shader.rst:39
msgid ""
"In the Inspector, click beside \"Texture\" where it says \"[empty]\" and "
"select \"Load\", then select \"Icon.png\". For new projects, this is the "
"Godot icon. You should now see the icon in the viewport."
msgstr ""

#: ../../docs/tutorials/shading/your_first_shader/your_first_canvasitem_shader.rst:42
msgid ""
"Next, look down in the Inspector, under the CanvasItem section, click beside "
"\"Material\" and select \"New ShaderMaterial\". This creates a new Material "
"resource. Click on the sphere that appears. Godot currently doesn't know "
"whether you are writing a CanvasItem Shader or a Spatial Shader and it "
"previews the output of spatial shaders. So what you are seeing is the output "
"of the default Spatial Shader."
msgstr ""

#: ../../docs/tutorials/shading/your_first_shader/your_first_canvasitem_shader.rst:47
msgid ""
"Click beside \"Shader\" and select \"New Shader\". Finally, click on the new "
"shader resource and the shader editor will open. You are now ready to begin "
"writing your first shader."
msgstr ""

#: ../../docs/tutorials/shading/your_first_shader/your_first_canvasitem_shader.rst:53
msgid ""
"In Godot, all shaders start with a line specifying what type of shader they "
"are. It uses the following format:"
msgstr ""

#: ../../docs/tutorials/shading/your_first_shader/your_first_canvasitem_shader.rst:60
msgid ""
"Because we are writing a CanvasItem shader, we specify ``canvas_item`` in "
"the first line. All our code will go beneath this declaration."
msgstr ""

#: ../../docs/tutorials/shading/your_first_shader/your_first_canvasitem_shader.rst:63
msgid ""
"This line tells the engine which built-in variables and functionality to "
"supply you with."
msgstr ""

#: ../../docs/tutorials/shading/your_first_shader/your_first_canvasitem_shader.rst:65
msgid ""
"In Godot you can override three functions to control how the shader "
"operates; ``vertex``, ``fragment``, and ``light``. This tutorial will walk "
"you through writing a shader with both vertex and fragment functions. Light "
"functions are significantly more complex than vertex and fragment functions "
"and so will not be covered here."
msgstr ""

#: ../../docs/tutorials/shading/your_first_shader/your_first_canvasitem_shader.rst:70
#, fuzzy
msgid "Your first fragment function"
msgstr "당신의 첫 게임"

#: ../../docs/tutorials/shading/your_first_shader/your_first_canvasitem_shader.rst:72
msgid ""
"The fragment function runs for every pixel in a Sprite and determines what "
"color that pixel should be."
msgstr ""

#: ../../docs/tutorials/shading/your_first_shader/your_first_canvasitem_shader.rst:74
msgid ""
"They are restricted to the pixels covered by the Sprite, that means you "
"cannot use one to, for example, create an outline around a Sprite."
msgstr ""

#: ../../docs/tutorials/shading/your_first_shader/your_first_canvasitem_shader.rst:77
msgid ""
"The most basic fragment function does nothing except assign a single color "
"to every pixel."
msgstr ""

#: ../../docs/tutorials/shading/your_first_shader/your_first_canvasitem_shader.rst:79
msgid ""
"We do so by writing a ``vec4`` to the built-in variable ``COLOR``. ``vec4`` "
"is shorthand for constructing a vector with 4 numbers. For more information "
"about vectors see the :ref:`Vector math tutorial <doc_vector_math>` "
"``COLOR`` is both an input variable to the fragment function and the final "
"output from it."
msgstr ""

#: ../../docs/tutorials/shading/your_first_shader/your_first_canvasitem_shader.rst:91
msgid ""
"Congratulations! You're done. You have successfully written your first "
"shader in Godot."
msgstr ""

#: ../../docs/tutorials/shading/your_first_shader/your_first_canvasitem_shader.rst:93
msgid "Now let's make things more complex."
msgstr ""

#: ../../docs/tutorials/shading/your_first_shader/your_first_canvasitem_shader.rst:95
msgid ""
"There are many inputs to the fragment function that you can use for "
"calculating ``COLOR``. ``UV`` is one of them. UV coordinates are specified "
"in your Sprite (without you knowing it!) and they tell the shader where to "
"read from textures for each part of the mesh."
msgstr ""

#: ../../docs/tutorials/shading/your_first_shader/your_first_canvasitem_shader.rst:99
msgid ""
"In the fragment function you can only read from ``UV``, but you can use it "
"in other functions or to assign values to ``COLOR`` directly."
msgstr ""

#: ../../docs/tutorials/shading/your_first_shader/your_first_canvasitem_shader.rst:102
msgid "``UV`` varies between 0-1 from left-right and from top-bottom."
msgstr ""

#: ../../docs/tutorials/shading/your_first_shader/your_first_canvasitem_shader.rst:115
msgid "Using ``TEXTURE`` built-in"
msgstr ""

#: ../../docs/tutorials/shading/your_first_shader/your_first_canvasitem_shader.rst:117
msgid ""
"When you want to adjust a color in a Sprite you cannot just adjust the color "
"from the texture manually like in the code below."
msgstr ""

#: ../../docs/tutorials/shading/your_first_shader/your_first_canvasitem_shader.rst:127
msgid ""
"The default fragment function reads from a texture and displays it. When you "
"overwrite the default fragment function, you lose that functionality, so you "
"have to implement it yourself. You read from textures using the ``texture`` "
"function. Certain nodes, like Sprites, have a dedicated texture variable "
"that can be accessed in the shader using ``TEXTURE``. Use it together with "
"``UV`` and ``texture`` to draw the Sprite."
msgstr ""

#: ../../docs/tutorials/shading/your_first_shader/your_first_canvasitem_shader.rst:142
#, fuzzy
msgid "Uniform input"
msgstr "입력을 확인."

#: ../../docs/tutorials/shading/your_first_shader/your_first_canvasitem_shader.rst:144
msgid ""
"Uniform input is used to pass data into a shader that will be the same "
"across the entire shader."
msgstr ""

#: ../../docs/tutorials/shading/your_first_shader/your_first_canvasitem_shader.rst:146
msgid ""
"You can use uniforms by defining them at the top of your shader like so:"
msgstr ""

#: ../../docs/tutorials/shading/your_first_shader/your_first_canvasitem_shader.rst:152
#, fuzzy
msgid ""
"For more information about usage see the :ref:`Shading Language doc "
"<doc_shading_language>`."
msgstr ":ref:`셰이딩 언어 <doc_shading_language>`"

#: ../../docs/tutorials/shading/your_first_shader/your_first_canvasitem_shader.rst:154
msgid "Add a uniform to change the amount of blue in our Sprite."
msgstr ""

#: ../../docs/tutorials/shading/your_first_shader/your_first_canvasitem_shader.rst:165
msgid ""
"Now you can change the amount of blue in the Sprite from the editor. Look "
"back at the Inspector under where you created your shader. You should see a "
"section called \"Shader Param\". Unfold that section and you will see the "
"uniform you just declared. If you change the value in the editor, it will "
"overwrite the default value you provided in the shader."
msgstr ""

#: ../../docs/tutorials/shading/your_first_shader/your_first_canvasitem_shader.rst:171
#, fuzzy
msgid "Interacting with shaders from code"
msgstr "쿼터니언(quaternions) 으로 보간하기"

#: ../../docs/tutorials/shading/your_first_shader/your_first_canvasitem_shader.rst:173
msgid ""
"You can change uniforms from code using the function ``set_shader_param()`` "
"which is called on the node's material resource. With a Sprite node, the "
"following code can be used to set the ``blue`` uniform."
msgstr ""

#: ../../docs/tutorials/shading/your_first_shader/your_first_canvasitem_shader.rst:181
msgid ""
"Note that the name of the uniform is a string. The string must match exactly "
"with how it is written in the shader, including spelling and case."
msgstr ""

#: ../../docs/tutorials/shading/your_first_shader/your_first_canvasitem_shader.rst:185
msgid "Your first vertex function"
msgstr ""

#: ../../docs/tutorials/shading/your_first_shader/your_first_canvasitem_shader.rst:187
msgid "Now that we have a fragment function, let's write a vertex function."
msgstr ""

#: ../../docs/tutorials/shading/your_first_shader/your_first_canvasitem_shader.rst:189
msgid ""
"Use the vertex function to calculate where on the screen each vertex should "
"end up."
msgstr ""

#: ../../docs/tutorials/shading/your_first_shader/your_first_canvasitem_shader.rst:191
msgid ""
"The most important variable in the vertex function is ``VERTEX``. Initially, "
"it specifies the vertex coordinates in your model, but you also write to it "
"to determine where to actually draw those vertices. ``VERTEX`` is a ``vec2`` "
"that is initially presented in local-space (i.e. not relative to the camera, "
"viewport, or parent nodes)."
msgstr ""

#: ../../docs/tutorials/shading/your_first_shader/your_first_canvasitem_shader.rst:196
msgid "You can offset the vertices by directly adding to ``VERTEX``."
msgstr ""

#: ../../docs/tutorials/shading/your_first_shader/your_first_canvasitem_shader.rst:204
msgid ""
"Combined with the ``TIME`` built-in variable, this can be used for simple "
"animation."
msgstr ""

#: ../../docs/tutorials/shading/your_first_shader/your_first_canvasitem_shader.rst:216
msgid ""
"At their core, shaders do what you have seen so far, they compute ``VERTEX`` "
"and ``COLOR``. It is up to you to dream up more complex mathematical "
"strategies for assigning values to those variables."
msgstr ""

#: ../../docs/tutorials/shading/your_first_shader/your_first_canvasitem_shader.rst:219
msgid ""
"For inspiration, take a look at some of the more advanced shader tutorials, "
"and look at other sites like `Shadertoy <https://www.shadertoy.com/results?"
"query=&sort=popular&from=10&num=4>`_ and `The Book of Shaders <https://"
"thebookofshaders.com>`_."
msgstr ""

#: ../../docs/tutorials/shading/your_first_shader/your_first_spatial_shader.rst:4
#, fuzzy
msgid "Your first Spatial shader"
msgstr "당신의 첫 게임"

#: ../../docs/tutorials/shading/your_first_shader/your_first_spatial_shader.rst:6
msgid ""
"You have decided to start writing your own custom Spatial shader. Maybe you "
"saw a cool trick online that was done with shaders, or you have found that "
"the :ref:`SpatialMaterial <class_SpatialMaterial>` isn't quite meeting your "
"needs. Either way, you have decided to write your own and now you need "
"figure out where to start."
msgstr ""

#: ../../docs/tutorials/shading/your_first_shader/your_first_spatial_shader.rst:11
msgid ""
"This tutorial will explain how to write a Spatial shader and will cover more "
"topics than the :ref:`CanvasItem <doc_your_first_canvasitem_shader>` "
"tutorial."
msgstr ""

#: ../../docs/tutorials/shading/your_first_shader/your_first_spatial_shader.rst:14
msgid ""
"Spatial shaders have more built-in functionality than CanvasItem shaders. "
"The expectation with spatial shaders is that Godot has already provided the "
"functionality for common use cases and all the user needs to do in the "
"shader is set the proper parameters. This is especially true for a PBR "
"(physically based rendering) workflow."
msgstr ""

#: ../../docs/tutorials/shading/your_first_shader/your_first_spatial_shader.rst:19
msgid ""
"This is a two-part tutorial. In this first part we are going to go through "
"how to make a simple terrain using vertex displacement from a heightmap in "
"the vertex function. In the :ref:`second part "
"<doc_your_second_spatial_shader>` we are going to take the concepts from "
"this tutorial and walk through how to set up custom materials in a fragment "
"shader by writing an ocean water shader."
msgstr ""

#: ../../docs/tutorials/shading/your_first_shader/your_first_spatial_shader.rst:24
msgid ""
"This tutorial assumes some basic shader knowledge such as types (``vec2``, "
"``float``, ``sampler2D``), and functions. If you are uncomfortable with "
"these concepts it is best to get a gentle introduction from `The Book of "
"Shaders <https://thebookofshaders.com>`_ before completing this tutorial."
msgstr ""

#: ../../docs/tutorials/shading/your_first_shader/your_first_spatial_shader.rst:30
msgid "Where to assign my material"
msgstr ""

#: ../../docs/tutorials/shading/your_first_shader/your_first_spatial_shader.rst:32
msgid ""
"In 3D, objects are drawn using :ref:`Meshes <class_Mesh>`. Meshes are a "
"resource type that store geometry (the shape of your object) and materials "
"(the color and how the object reacts to light) in units called \"surfaces\". "
"A Mesh can have multiple surfaces, or just one. Typically, you would import "
"a mesh from another program (e.g. Blender). But Godot also has a few :ref:"
"`PrimitiveMeshes <class_primitivemesh>` that allow you to add basic geometry "
"to a scene without importing Meshes."
msgstr ""

#: ../../docs/tutorials/shading/your_first_shader/your_first_spatial_shader.rst:38
msgid ""
"There are multiple node types that you can use to draw a mesh. The main one "
"is :ref:`MeshInstance <class_meshinstance>`, but you can also use :ref:"
"`Particles <class_particles>`, :ref:`MultiMeshes <class_MultiMesh>` (with a :"
"ref:`MultiMeshInstance <class_multimeshinstance>`), or others."
msgstr ""

#: ../../docs/tutorials/shading/your_first_shader/your_first_spatial_shader.rst:42
msgid ""
"Typically, a material is associated with a given surface in a mesh, but some "
"nodes, like MeshInstance, allow you to override the material for a specific "
"surface, or for all surfaces."
msgstr ""

#: ../../docs/tutorials/shading/your_first_shader/your_first_spatial_shader.rst:45
msgid ""
"If you set a material on the surface or mesh itself, then all MeshInstances "
"that share that mesh will share that material. However, if you want to reuse "
"the same mesh across multiple mesh instances, but have different materials "
"for each instance then you should set the material on the Meshinstance."
msgstr ""

#: ../../docs/tutorials/shading/your_first_shader/your_first_spatial_shader.rst:49
msgid ""
"For this tutorial we will set our material on the mesh itself rather than "
"taking advantage of the MeshInstance's ability to override materials."
msgstr ""

#: ../../docs/tutorials/shading/your_first_shader/your_first_spatial_shader.rst:55
msgid "Add a new :ref:`MeshInstance <class_meshinstance>` node to your scene."
msgstr ""

#: ../../docs/tutorials/shading/your_first_shader/your_first_spatial_shader.rst:57
msgid ""
"In the inspector tab beside \"Mesh\" click \"[empty]\" and select \"New "
"PlaneMesh\". Then click on the image of a plane that appears."
msgstr ""

#: ../../docs/tutorials/shading/your_first_shader/your_first_spatial_shader.rst:60
msgid "This adds a :ref:`PlaneMesh <class_planemesh>` to our scene."
msgstr ""

#: ../../docs/tutorials/shading/your_first_shader/your_first_spatial_shader.rst:62
msgid ""
"Then, in the viewport, click in the upper left corner on the button that "
"says \"Perspective\". A menu will appear. In the middle of the menu are "
"options for how to display the scene. Select 'Display Wireframe'."
msgstr ""

#: ../../docs/tutorials/shading/your_first_shader/your_first_spatial_shader.rst:66
msgid "This will allow you to see the triangles making up the plane."
msgstr ""

#: ../../docs/tutorials/shading/your_first_shader/your_first_spatial_shader.rst:70
msgid "Now set ``Subdivide Width`` and ``Subdivide Depth`` to ``32``."
msgstr ""

#: ../../docs/tutorials/shading/your_first_shader/your_first_spatial_shader.rst:74
msgid ""
"You can see that there are now many more triangles in the :ref:"
"`Mesh<class_MeshInstance>`. This will give us more vertices to work with and "
"thus allow us to add more detail."
msgstr ""

#: ../../docs/tutorials/shading/your_first_shader/your_first_spatial_shader.rst:79
msgid ""
":ref:`PrimitiveMeshes <class_primitivemesh>`, like PlaneMesh, only have one "
"surface, so instead of an array of materials there is only one. Click beside "
"\"Material\" where it says \"[empty]\" and select \"New ShaderMaterial\". "
"Then click the sphere that appears."
msgstr ""

#: ../../docs/tutorials/shading/your_first_shader/your_first_spatial_shader.rst:83
msgid ""
"Now click beside \"Shader\" where it says \"[empty]\" and select \"New Shader"
"\"."
msgstr ""

#: ../../docs/tutorials/shading/your_first_shader/your_first_spatial_shader.rst:85
msgid ""
"The shader editor should now pop up and you are ready to begin writing your "
"first Spatial shader!"
msgstr ""

#: ../../docs/tutorials/shading/your_first_shader/your_first_spatial_shader.rst:88
msgid "Shader magic"
msgstr ""

#: ../../docs/tutorials/shading/your_first_shader/your_first_spatial_shader.rst:92
msgid ""
"Notice how there is already error? This is because the shader editor reloads "
"shaders on the fly. The first thing Godot shaders need is a declaration of "
"what type of shader they are. We set the variable ``shader_type`` to "
"``spatial`` because this is a spatial shader."
msgstr ""

#: ../../docs/tutorials/shading/your_first_shader/your_first_spatial_shader.rst:100
msgid ""
"Next we will define the ``vertex()`` function. The ``vertex()`` function "
"determines where the vertices of your :ref:`Mesh<class_MeshInstance>` appear "
"in the final scene. We will be using it to offset the height of each vertex "
"and make our flat plane appear like a little terrain."
msgstr ""

#: ../../docs/tutorials/shading/your_first_shader/your_first_spatial_shader.rst:104
msgid "We define the vertex shader like so:"
msgstr ""

#: ../../docs/tutorials/shading/your_first_shader/your_first_spatial_shader.rst:112
msgid ""
"With nothing in the ``vertex()`` function, Godot will use its default vertex "
"shader. We can easily start to make changes by adding a single line:"
msgstr ""

#: ../../docs/tutorials/shading/your_first_shader/your_first_spatial_shader.rst:121
msgid "Adding this line, you should get an image like the one below."
msgstr ""

#: ../../docs/tutorials/shading/your_first_shader/your_first_spatial_shader.rst:125
msgid ""
"Okay, let's unpack this. The ``y`` value of the ``VERTEX`` is being "
"increased. And we are passing the ``x`` and ``z`` components of the "
"``VERTEX`` as arguments to ``cos`` and ``sin``; that gives us a wave-like "
"appearance across the ``x`` and ``z`` axes."
msgstr ""

#: ../../docs/tutorials/shading/your_first_shader/your_first_spatial_shader.rst:129
msgid ""
"What we want to achieve is the look of little hills; after all. ``cos`` and "
"``sin`` already look kind of like hills. We do so by scaling the inputs to "
"the ``cos`` and ``sin`` functions."
msgstr ""

#: ../../docs/tutorials/shading/your_first_shader/your_first_spatial_shader.rst:140
msgid ""
"This looks better, but it is still too spiky and repetitive, let's make it a "
"little more interesting."
msgstr ""

#: ../../docs/tutorials/shading/your_first_shader/your_first_spatial_shader.rst:143
msgid "Noise heightmap"
msgstr ""

#: ../../docs/tutorials/shading/your_first_shader/your_first_spatial_shader.rst:145
msgid ""
"Noise is a very popular tool for faking the look of terrain. Think of it as "
"similar to the cosine function where you have repeating hills except, with "
"noise, each hill has a different height."
msgstr ""

#: ../../docs/tutorials/shading/your_first_shader/your_first_spatial_shader.rst:148
msgid ""
"Godot provides the :ref:`NoiseTexture <class_noisetexture>` resource for "
"generating a noise texture that can be accessed from a shader."
msgstr ""

#: ../../docs/tutorials/shading/your_first_shader/your_first_spatial_shader.rst:151
msgid ""
"To access a texture in a shader add the following code near the top of your "
"shader, outside the ``vertex()`` function."
msgstr ""

#: ../../docs/tutorials/shading/your_first_shader/your_first_spatial_shader.rst:158
msgid ""
"This will allow you to send a noise texture to the shader. Now look in the "
"inspecter under your material. You should see a section called \"Shader "
"Params\". If you open it up you will see a section called \"noise\"."
msgstr ""

#: ../../docs/tutorials/shading/your_first_shader/your_first_spatial_shader.rst:161
msgid ""
"Click beside it where it says \"[empty]\" and select \"New NoiseTexture\". "
"Then in your NoiseTexture click beside where it says \"Noise\" and select "
"\"New OpenSimplexNoise\"."
msgstr ""

#: ../../docs/tutorials/shading/your_first_shader/your_first_spatial_shader.rst:164
msgid ""
":ref:`OpenSimplexNoise <class_opensimplexnoise>` is used by the NoiseTexture "
"to generate a heightmap."
msgstr ""

#: ../../docs/tutorials/shading/your_first_shader/your_first_spatial_shader.rst:166
#, fuzzy
msgid "Once you set it up and should look like this."
msgstr "코드에서는 이렇게 보일 것이다:"

#: ../../docs/tutorials/shading/your_first_shader/your_first_spatial_shader.rst:170
msgid ""
"Now, access the noise texture using the ``texture()`` function. "
"``texture()`` takes a texture as the first argument and a ``vec2`` for the "
"position on the texture as the second argument. We use the ``x`` and ``z`` "
"channels of ``VERTEX`` to determine where on the texture to look up. "
"``texture()`` returns a ``vec4`` of the ``r, g, b, a`` channels at the "
"position. Since the noise texture is grayscale, all of the values are the "
"same, so we can use any one of the channels as the height. In this case "
"we'll use the ``r``, or ``x`` channel."
msgstr ""

#: ../../docs/tutorials/shading/your_first_shader/your_first_spatial_shader.rst:181
msgid ""
"Note: ``xyzw`` is the same as ``rgba`` in GLSL, so instead of ``texture()."
"x`` above, we could use ``texture().r``. See the `OpenGL documentation "
"<https://www.khronos.org/opengl/wiki/Data_Type_(GLSL)#Vectors>`_ for more "
"details."
msgstr ""

#: ../../docs/tutorials/shading/your_first_shader/your_first_spatial_shader.rst:184
msgid "Using this code you can see the texture creates random looking hills."
msgstr ""

#: ../../docs/tutorials/shading/your_first_shader/your_first_spatial_shader.rst:188
msgid ""
"Right now it is too spiky, we want to soften the hills a bit. To do that we "
"will use a uniform. You already used a uniform above to pass in the noise "
"texture, now let's learn how they work."
msgstr ""

#: ../../docs/tutorials/shading/your_first_shader/your_first_spatial_shader.rst:194
msgid ""
"Uniform variables allow you to pass data from the game into the shader. They "
"are very useful for controlling shader effects. Uniforms can be almost any "
"datatype that can be used in the shader. To use a uniform, you declare it in "
"your :ref:`Shader<class_Shader>` using the keyword ``uniform``."
msgstr ""

#: ../../docs/tutorials/shading/your_first_shader/your_first_spatial_shader.rst:199
msgid "Let's make a uniform that changes the height of the terrain."
msgstr ""

#: ../../docs/tutorials/shading/your_first_shader/your_first_spatial_shader.rst:206
msgid ""
"Godot lets you initialize a uniform with a value; here, ``height_scale`` is "
"set to ``0.5``. You can set uniforms from GDScript by calling the function "
"``set_shader_param()`` on the material corresponding to the shader. The "
"value passed from GDScript takes precedence over the value used to "
"initialize it in the shader."
msgstr ""

#: ../../docs/tutorials/shading/your_first_shader/your_first_spatial_shader.rst:216
msgid ""
"Changing uniforms from Spatial nodes is different than in CanvasItem nodes. "
"Here, we set the material inside the PlaneMesh resource. In other mesh "
"resources you may need to first access the material by calling "
"``surface_get_material()``. While in the MeshInstance you would access the "
"material using ``get_surface_material()`` or ``material_override``."
msgstr ""

#: ../../docs/tutorials/shading/your_first_shader/your_first_spatial_shader.rst:222
msgid ""
"Remember that the string passed into ``set_shader_param()`` must match the "
"name of the uniform variable in the :ref:`Shader<class_Shader>`. You can use "
"the uniform variable anywhere inside your :ref:`Shader<class_Shader>`. Here, "
"we will use it to set the height value instead of arbitrarily multiplying by "
"``0.5``."
msgstr ""

#: ../../docs/tutorials/shading/your_first_shader/your_first_spatial_shader.rst:231
msgid "Now it looks  much better."
msgstr ""

#: ../../docs/tutorials/shading/your_first_shader/your_first_spatial_shader.rst:235
msgid ""
"Using uniforms, we can even change the value every frame to animate the "
"height of the terrain. Combined with :ref:`Tweens <class_Tween>`, this can "
"be especially useful for simple animations."
msgstr ""

#: ../../docs/tutorials/shading/your_first_shader/your_first_spatial_shader.rst:239
msgid "Interacting with light"
msgstr ""

#: ../../docs/tutorials/shading/your_first_shader/your_first_spatial_shader.rst:241
msgid ""
"First, turn wireframe off. To do so, click in the upper-left of the Viewport "
"again, where it says \"Perspective\", and select \"Display Normal\"."
msgstr ""

#: ../../docs/tutorials/shading/your_first_shader/your_first_spatial_shader.rst:246
msgid ""
"Note how the mesh color goes flat. This is because the lighting on it is "
"flat. Let's add a light!"
msgstr ""

#: ../../docs/tutorials/shading/your_first_shader/your_first_spatial_shader.rst:248
msgid "First, we will add an :ref:`OmniLight<class_OmniLight>` to the scene."
msgstr ""

#: ../../docs/tutorials/shading/your_first_shader/your_first_spatial_shader.rst:252
msgid ""
"You can see the light affecting the terrain, but it looks odd. The problem "
"is the light is affecting the terrain as if it were a flat plane. This is "
"because the light shader uses the normals from the :ref:`Mesh <class_mesh>` "
"to calculate light."
msgstr ""

#: ../../docs/tutorials/shading/your_first_shader/your_first_spatial_shader.rst:256
msgid ""
"The normals are stored in the Mesh, but we are changing the shape of the "
"Mesh in the shader, so the normals are no longer correct. To fix this, we "
"can recalculate the normals in the shader or use a normal texture that "
"corresponds to our noise. Godot makes both easy for us."
msgstr ""

#: ../../docs/tutorials/shading/your_first_shader/your_first_spatial_shader.rst:260
msgid ""
"You can calculate the new normal manually in the vertex function and then "
"just set ``NORMAL``. With ``NORMAL`` set, Godot will do all the difficult "
"lighting calculations for us. We will cover this method in the next part of "
"this tutorial, for now we will read normals from a texture."
msgstr ""

#: ../../docs/tutorials/shading/your_first_shader/your_first_spatial_shader.rst:264
msgid ""
"Instead we will rely on the NoiseTexture again to calculate normals for us. "
"We do that by passing in a second noise texture."
msgstr ""

#: ../../docs/tutorials/shading/your_first_shader/your_first_spatial_shader.rst:271
msgid ""
"Set this second uniform texture to another NoiseTexture with another "
"OpenSimplexNoise. But this time, check off \"As Normalmap\"."
msgstr ""

#: ../../docs/tutorials/shading/your_first_shader/your_first_spatial_shader.rst:276
msgid ""
"Now, because this is a normalmap and not a per-vertex normal, we are going "
"to assign it in the ``fragment()`` function. The ``fragment()`` function "
"will be explained in more detail in the next part of this tutorial."
msgstr ""

#: ../../docs/tutorials/shading/your_first_shader/your_first_spatial_shader.rst:284
msgid ""
"When we have normals that correspond to a specific vertex we set ``NORMAL``, "
"but if you have a normalmap that comes from a texture, set the normal using "
"``NORMALMAP``. This way Godot will handle the wrapping the texture around "
"the mesh automatically."
msgstr ""

#: ../../docs/tutorials/shading/your_first_shader/your_first_spatial_shader.rst:288
msgid ""
"Lastly, in order to ensure that we are reading from the same places on the "
"noise texture and the normalmap texture, we are going to pass the ``VERTEX."
"xz`` position from the ``vertex()`` function to the ``fragment()`` function. "
"We do that with varyings."
msgstr ""

#: ../../docs/tutorials/shading/your_first_shader/your_first_spatial_shader.rst:292
msgid ""
"Above the ``vertex()`` define a ``vec2`` called ``vertex_position``. And "
"inside the ``vertex()`` function assign ``VERTEX.xz`` to ``vertex_position``."
msgstr ""

#: ../../docs/tutorials/shading/your_first_shader/your_first_spatial_shader.rst:304
msgid ""
"And now we can access ``vertex_position`` from the ``fragment()`` function."
msgstr ""

#: ../../docs/tutorials/shading/your_first_shader/your_first_spatial_shader.rst:312
msgid ""
"With the normals in place the light now reacts to the height of the mesh "
"dynamically."
msgstr ""

#: ../../docs/tutorials/shading/your_first_shader/your_first_spatial_shader.rst:316
msgid ""
"We can even drag the light around and the lighting will update automatically."
msgstr ""

#: ../../docs/tutorials/shading/your_first_shader/your_first_spatial_shader.rst:320
msgid ""
"Here is the full code for this tutorial. You can see it is not very long as "
"Godot handles most of the difficult stuff for you."
msgstr ""

#: ../../docs/tutorials/shading/your_first_shader/your_first_spatial_shader.rst:343
msgid ""
"That is everything for this part. Hopefully, you now understand the basics "
"of vertex shaders in Godot. In the next part of this tutorial we will write "
"a fragment function to accompany this vertex function and we will cover a "
"more advanced technique to turn this terrain into an ocean of moving waves."
msgstr ""

#: ../../docs/tutorials/shading/your_first_shader/your_second_spatial_shader.rst:4
msgid "Your first Spatial shader: part 2"
msgstr ""

#: ../../docs/tutorials/shading/your_first_shader/your_second_spatial_shader.rst:6
msgid ""
"From a high-level, what Godot does is give the user a bunch of parameters "
"that can be optionally set (``AO``, ``SSS_Strength``, ``RIM``, etc.). These "
"parameters correspond to different complex effects (Ambient Occlusion, "
"SubSurface Scattering, Rim Lighting, etc.). When not written to, the code is "
"thrown out before it is compiled and so the shader does not incur the cost "
"of the extra feature. This makes it easy for users to have complex PBR-"
"correct shading, without writing complex shaders. Of course, Godot also "
"allows you to ignore all these parameters and write a fully customized "
"shader."
msgstr ""

#: ../../docs/tutorials/shading/your_first_shader/your_second_spatial_shader.rst:13
msgid ""
"For a full list of these parameters see the :ref:`spatial shader "
"<doc_spatial_shader>` reference doc."
msgstr ""

#: ../../docs/tutorials/shading/your_first_shader/your_second_spatial_shader.rst:15
msgid ""
"A difference between the vertex function and a fragment function is that the "
"vertex function runs per vertex and sets properties such as ``VERTEX`` "
"(position) and ``NORMAL``, while the fragment shader runs per pixel and, "
"most importantly, sets the ``ALBEDO`` color of the :ref:"
"`Mesh<class_MeshInstance>`."
msgstr ""

#: ../../docs/tutorials/shading/your_first_shader/your_second_spatial_shader.rst:20
msgid "Your first spatial fragment function"
msgstr ""

#: ../../docs/tutorials/shading/your_first_shader/your_second_spatial_shader.rst:22
msgid ""
"As mentioned in the previous part of this tutorial. The standard use of the "
"fragment function in Godot is to set up different material properties and "
"let Godot handle the rest. In order to provide even more flexibility, Godot "
"also provides things called render modes. Render modes are set at the top of "
"the shader, directly below ``shader_type``, and they specify what sort of "
"functionality you want the built-in aspects of the shader to have."
msgstr ""

#: ../../docs/tutorials/shading/your_first_shader/your_second_spatial_shader.rst:28
msgid ""
"For example, if you do not want to have lights affect an object, set the "
"render mode to ``unshaded``:"
msgstr ""

#: ../../docs/tutorials/shading/your_first_shader/your_second_spatial_shader.rst:35
msgid ""
"You can also stack multiple render modes together. For example, if you want "
"to use toon shading instead of more-realistic PBR shading, set the diffuse "
"mode and specular mode to toon:"
msgstr ""

#: ../../docs/tutorials/shading/your_first_shader/your_second_spatial_shader.rst:42
msgid ""
"This model of built-in functionality allows you to write complex custom "
"shaders by changing only a few parameters."
msgstr ""

#: ../../docs/tutorials/shading/your_first_shader/your_second_spatial_shader.rst:45
#, fuzzy
msgid ""
"For a full list of render modes see the :ref:`Spatial shader reference "
"<doc_spatial_shader>`."
msgstr ":ref:`Spatial 셰이더 <doc_spatial_shader>`"

#: ../../docs/tutorials/shading/your_first_shader/your_second_spatial_shader.rst:47
msgid ""
"In this part of the tutorial, we will walk through how to take the bumpy "
"terrain from the previous part and turn it into an ocean."
msgstr ""

#: ../../docs/tutorials/shading/your_first_shader/your_second_spatial_shader.rst:50
msgid ""
"First let's set the color of the water. We do that by setting ``ALBEDO``."
msgstr ""

#: ../../docs/tutorials/shading/your_first_shader/your_second_spatial_shader.rst:52
msgid "``ALBEDO`` is a ``vec3`` that contains the color of the object."
msgstr ""

#: ../../docs/tutorials/shading/your_first_shader/your_second_spatial_shader.rst:54
msgid "Let's set it to a nice shade of blue."
msgstr ""

#: ../../docs/tutorials/shading/your_first_shader/your_second_spatial_shader.rst:64
msgid ""
"We set it to a very dark shade of blue because most of the blueness of the "
"water will come from reflections from the sky."
msgstr ""

#: ../../docs/tutorials/shading/your_first_shader/your_second_spatial_shader.rst:67
msgid ""
"The PBR model that Godot uses relies on two main parameters: ``METALLIC`` "
"and ``ROUGHNESS``."
msgstr ""

#: ../../docs/tutorials/shading/your_first_shader/your_second_spatial_shader.rst:69
msgid ""
"``ROUGHNESS`` specifies how smooth/rough the surface of a material is. A low "
"``ROUGHNESS`` will make a material appear like a shiny plastic, while a high "
"roughness makes the material appear more solid in color."
msgstr ""

#: ../../docs/tutorials/shading/your_first_shader/your_second_spatial_shader.rst:73
msgid ""
"``METALLIC`` specifies how much like a metal the object is. It is better set "
"close to ``0`` or ``1``. Think of ``METALLIC`` as changing the balance "
"between the reflection and the ``ALBEDO`` color. A high ``METALLIC`` almost "
"ignores ``ALBEDO`` altogether, and looks like a mirror of the sky. While a "
"low ``METALLIC`` has a more equal representation of sky color and ``ALBEDO`` "
"color."
msgstr ""

#: ../../docs/tutorials/shading/your_first_shader/your_second_spatial_shader.rst:78
msgid ""
"``ROUGHNESS`` increases from ``0`` to ``1`` from left to right while "
"``METALLIC`` increase from ``0`` to ``1`` from top to bottom."
msgstr ""

#: ../../docs/tutorials/shading/your_first_shader/your_second_spatial_shader.rst:83
msgid ""
"``METALLIC`` should be close to ``0`` or ``1`` for proper PBR shading. Only "
"set it between them for blending between materials."
msgstr ""

#: ../../docs/tutorials/shading/your_first_shader/your_second_spatial_shader.rst:86
msgid ""
"Water is not a metal, so we will set its ``METALLIC`` property to ``0.0``. "
"Water is also highly reflective, so we will set its ``ROUGHNESS`` property "
"to be quite low as well."
msgstr ""

#: ../../docs/tutorials/shading/your_first_shader/your_second_spatial_shader.rst:99
msgid ""
"Now we have a smooth plastic looking surface. It is time to think about some "
"particular properties of water that we want to emulate. There are two main "
"ones that will take this from a weird plastic surface to nice stylized "
"water. The first is specular reflections. Specular reflections are those "
"bright spots you see from where the sun reflects directly into your eye. The "
"second is fresnel reflectance. Fresnel reflectance is the property of "
"objects to become more reflective at shallow angles. It is the reason why "
"you can see into water below you, but farther away it reflects the sky."
msgstr ""

#: ../../docs/tutorials/shading/your_first_shader/your_second_spatial_shader.rst:106
msgid ""
"In order to increase the specular reflections, we will do two things. First, "
"we will change the render mode for specular to toon because the toon render "
"mode has larger specular highlights."
msgstr ""

#: ../../docs/tutorials/shading/your_first_shader/your_second_spatial_shader.rst:115
msgid ""
"Second we will add rim lighting. Rim lighting increases the effect of light "
"at glancing angles. Usually it is used to emulate the way light passes "
"through fabric on the edges of an object, but we will use it here to help "
"achieve a nice watery effect."
msgstr ""

#: ../../docs/tutorials/shading/your_first_shader/your_second_spatial_shader.rst:131
msgid ""
"In order to add fresnal reflectance we will compute a fresnel term in our "
"fragment shader. We are not going to use a real fresnel term, instead we "
"will approximate it using the dot product of the ``NORMAL`` and ``VIEW`` "
"vectors. The ``NORMAL`` vector points away from a surface of the, while the "
"``VIEW`` vector is the direction between your eye and that point on the "
"surface. The dot product between them is a handy way to tell when you are "
"looking at the surface head-on your at a glancing angle."
msgstr ""

#: ../../docs/tutorials/shading/your_first_shader/your_second_spatial_shader.rst:142
msgid ""
"And mix it into both ``ROUGHNESS`` and ``ALBEDO``. This is the benefit of "
"ShaderMaterials over SpatialMaterials. With SpatialMaterials we could set "
"these properties with a texture, or to a flat number. But with shaders we "
"can set them based on any mathematical function that we can dream up."
msgstr ""

#: ../../docs/tutorials/shading/your_first_shader/your_second_spatial_shader.rst:159
msgid ""
"And now, with only 5 lines of code, you can have complex looking water. Now "
"that we have lighting, this water is looking too bright. Let's darken it. "
"This is done easily by decreasing the values of the ``vec3`` we pass into "
"``ALBEDO``. Let's set them to ``vec3(0.01, 0.03, 0.05)``."
msgstr ""

#: ../../docs/tutorials/shading/your_first_shader/your_second_spatial_shader.rst:167
msgid "Animating with ``TIME``"
msgstr ""

#: ../../docs/tutorials/shading/your_first_shader/your_second_spatial_shader.rst:169
msgid ""
"Going back to the vertex function, we can animated the waves using the built-"
"in variable ``TIME``."
msgstr ""

#: ../../docs/tutorials/shading/your_first_shader/your_second_spatial_shader.rst:171
msgid ""
"``TIME`` is a built-in variable that is accessible from the vertex and "
"fragment functions."
msgstr ""

#: ../../docs/tutorials/shading/your_first_shader/your_second_spatial_shader.rst:174
msgid ""
"In the last tutorial we calculated height by reading from a heightmap. For "
"this tutorial, we will do the same. Put the heightmap code in a function "
"called ``height()``."
msgstr ""

#: ../../docs/tutorials/shading/your_first_shader/your_second_spatial_shader.rst:183
msgid ""
"In order to use ``TIME`` in the ``height()`` function we need to pass it in."
msgstr ""

#: ../../docs/tutorials/shading/your_first_shader/your_second_spatial_shader.rst:190
msgid "And make sure to correctly pass it in inside the vertex function."
msgstr ""

#: ../../docs/tutorials/shading/your_first_shader/your_second_spatial_shader.rst:200
msgid ""
"Instead of using a normalmap to calculate normals. We are going to compute "
"them manually in the ``vertex()`` function. To do so use the following line "
"of code."
msgstr ""

#: ../../docs/tutorials/shading/your_first_shader/your_second_spatial_shader.rst:207
msgid ""
"We need to compute ``NORMAL`` manually because in the next section we will "
"be using math to create complex-looking waves."
msgstr ""

#: ../../docs/tutorials/shading/your_first_shader/your_second_spatial_shader.rst:210
msgid ""
"Now, we are going to make the ``height()`` function a little more "
"complicated by offsetting ``position`` by the cosine of ``TIME``."
msgstr ""

#: ../../docs/tutorials/shading/your_first_shader/your_second_spatial_shader.rst:220
msgid ""
"This results in waves that move slowly, but not in a very natural way. The "
"next section will dig deeper into using shaders to create more complex "
"effects, in this case realistic waves, by adding a few more mathematical "
"functions."
msgstr ""

#: ../../docs/tutorials/shading/your_first_shader/your_second_spatial_shader.rst:225
#, fuzzy
msgid "Advanced effects: waves"
msgstr "고급 벡터 연산"

#: ../../docs/tutorials/shading/your_first_shader/your_second_spatial_shader.rst:227
msgid ""
"What makes shaders so powerful is that you can achieve complex effects by "
"using math. To illustrate this, we are going to take our waves to the next "
"level by modifying the ``height()`` function and by introducing a new "
"function called ``wave()``."
msgstr ""

#: ../../docs/tutorials/shading/your_first_shader/your_second_spatial_shader.rst:231
msgid ""
"``wave()`` has one parameter, ``position``, which is the same as it is in "
"``height()``."
msgstr ""

#: ../../docs/tutorials/shading/your_first_shader/your_second_spatial_shader.rst:233
msgid ""
"We are going to call ``wave()`` multiple times in ``height()`` in order to "
"fake the way waves look."
msgstr ""

#: ../../docs/tutorials/shading/your_first_shader/your_second_spatial_shader.rst:243
msgid "At first this looks complicated. So let's go through it line-by-line."
msgstr ""

#: ../../docs/tutorials/shading/your_first_shader/your_second_spatial_shader.rst:249
msgid ""
"Offset the position by the ``noise`` texture. This will make the waves curve "
"so they are not straight lines completely aligned with the grid."
msgstr ""

#: ../../docs/tutorials/shading/your_first_shader/your_second_spatial_shader.rst:256
msgid ""
"Define a wave-like function using ``sin()`` and ``position``. Normally "
"``sin()`` waves are very round. We use ``abs()`` to absolute to give them a "
"sharp ridge and constrain them to the 0-1 range. And then we subtract it "
"from ``1.0`` to put the peak on top."
msgstr ""

#: ../../docs/tutorials/shading/your_first_shader/your_second_spatial_shader.rst:264
msgid ""
"Multiply the x-directional wave by the y-directional wave and raise it to a "
"power to sharpen the peaks. Then subtract that from ``1.0`` so that the "
"ridges become peaks and raise that to a power to sharpen the ridges."
msgstr ""

#: ../../docs/tutorials/shading/your_first_shader/your_second_spatial_shader.rst:268
msgid ""
"We can now replace the contents of our ``height()`` function with ``wave()``."
msgstr ""

#: ../../docs/tutorials/shading/your_first_shader/your_second_spatial_shader.rst:276
#, fuzzy
msgid "Using this you get:"
msgstr "이 가이드는 다음을 배웁니다:"

#: ../../docs/tutorials/shading/your_first_shader/your_second_spatial_shader.rst:280
msgid ""
"The shape of the sin wave is too obvious. So let's spread the waves out a "
"bit. We do this by scaling ``position``."
msgstr ""

#: ../../docs/tutorials/shading/your_first_shader/your_second_spatial_shader.rst:288
msgid "Now it looks much better."
msgstr ""

#: ../../docs/tutorials/shading/your_first_shader/your_second_spatial_shader.rst:292
msgid ""
"We can do even better if we layer multiple waves on top of each other at "
"varying frequencies and amplitudes. What this means is that we are going to "
"scale position for each one to make the waves thinner or wider (frequency). "
"And we are going to multiply the output of the wave to make them shorter or "
"taller (amplitude)."
msgstr ""

#: ../../docs/tutorials/shading/your_first_shader/your_second_spatial_shader.rst:297
msgid ""
"Here is an example for how you could layer the four waves to achieve nicer "
"looking waves."
msgstr ""

#: ../../docs/tutorials/shading/your_first_shader/your_second_spatial_shader.rst:309
msgid ""
"Note that we add time to two and subtract it from the other two. This makes "
"the waves move in different directions creating a complex effect. Also note "
"that the amplitudes (the number the result is multiplied by) all add up to "
"``1.0``. This keeps the wave in the 0-1 range."
msgstr ""

#: ../../docs/tutorials/shading/your_first_shader/your_second_spatial_shader.rst:313
msgid ""
"With this code you should end up with more complex looking waves and all you "
"had to do was add a little bit of math!"
msgstr ""

#: ../../docs/tutorials/shading/your_first_shader/your_second_spatial_shader.rst:318
msgid ""
"For more information about Spatial shaders read the :ref:`Shading Language "
"<doc_shading_language>` doc and the :ref:`Spatial Shaders "
"<doc_spatial_shader>` doc. Also look at more advanced tutorials in the :ref:"
"`Shading section <toc-learn-features-shading>` and the :ref:`3D <toc-learn-"
"features-3d>` sections."
msgstr ""

#: ../../docs/tutorials/shading/shader_materials.rst:4
msgid "Shader materials"
msgstr ""

#: ../../docs/tutorials/shading/shader_materials.rst:9
msgid ""
"For the most common cases, Godot provides ready to use materials for most "
"types of shaders, such as :ref:`SpatialMaterial <class_SpatialMaterial>`, :"
"ref:`CanvasItemMaterial <class_CanvasItemMaterial>` and :ref:"
"`ParticlesMaterial <class_ParticlesMaterial>`. They are flexible "
"implementations that cover most use cases."
msgstr ""

#: ../../docs/tutorials/shading/shader_materials.rst:14
msgid ""
"Shader materials allow writing a custom shader directly, for maximum "
"flexibility. Examples of this are:"
msgstr ""

#: ../../docs/tutorials/shading/shader_materials.rst:17
msgid "Create procedural textures."
msgstr ""

#: ../../docs/tutorials/shading/shader_materials.rst:18
msgid "Create complex texture blending effects."
msgstr ""

#: ../../docs/tutorials/shading/shader_materials.rst:19
msgid "Create animated materials, or materials that change over time."
msgstr ""

#: ../../docs/tutorials/shading/shader_materials.rst:20
msgid "Create refractive effects or other advanced effects."
msgstr ""

#: ../../docs/tutorials/shading/shader_materials.rst:21
msgid "Create special lighting shaders for more exotic materials."
msgstr ""

#: ../../docs/tutorials/shading/shader_materials.rst:22
msgid "Animate vertices, like tree leaves or grass."
msgstr ""

#: ../../docs/tutorials/shading/shader_materials.rst:23
#, fuzzy
msgid "Create custom particle code."
msgstr "맞춤 데이터 타입 생성하기"

#: ../../docs/tutorials/shading/shader_materials.rst:26
msgid ""
"Godot provides built in functionality to make frequent operations easier. "
"Additionally, Godot's shader editor will detect errors as you type, so you "
"can see your edited shaders in real-time. It is also possible to edit "
"shaders using a visual, node-based graph editor."
msgstr ""

#: ../../docs/tutorials/shading/shader_materials.rst:32
msgid "Creating a ShaderMaterial"
msgstr ""

#: ../../docs/tutorials/shading/shader_materials.rst:34
msgid ""
"Create a new ShaderMaterial in some object of your choice. Go to the "
"\"Material\" property and create a ShaderMaterial."
msgstr ""

#: ../../docs/tutorials/shading/shader_materials.rst:39
msgid ""
"Next, click on the shader material to see its properties. From here you can "
"create a shader or visual shader. Regular shaders use code to set their "
"properties while a visual shader uses a node based workflow."
msgstr ""

#: ../../docs/tutorials/shading/shader_materials.rst:43
msgid ""
"If you need to you can convert a visual shader to a text shader. However you "
"can't convert a text shader to a visual shader."
msgstr ""

#: ../../docs/tutorials/shading/shader_materials.rst:46
msgid "Choose one of them and you can start editing your shader."
msgstr ""

#: ../../docs/tutorials/shading/shader_materials.rst:50
msgid ""
"If you create a regular shader click on it and the shader editor will open."
msgstr ""

#: ../../docs/tutorials/shading/shader_materials.rst:54
msgid ""
"If you create a visual shader the visual shader editor will open "
"automatically."
msgstr ""

#: ../../docs/tutorials/shading/shader_materials.rst:58
msgid ""
"In the visual shader editor you can click a button and see what your visual "
"shader looks like as shader code. This can be useful if you're trying to "
"replicate a text shader as nodes, or it can be used as a preview for "
"converting your visual shader to a text shader."
msgstr ""

#: ../../docs/tutorials/shading/shader_materials.rst:67
msgid "To learn more about visual shaders, read :ref:`doc_visual_shaders`."
msgstr ""

#: ../../docs/tutorials/shading/shader_materials.rst:70
msgid "Converting to ShaderMaterial"
msgstr ""

#: ../../docs/tutorials/shading/shader_materials.rst:72
msgid ""
"It is possible to convert from SpatialMaterial, CanvasItemMaterial and "
"ParticlesMaterial to ShaderMaterial. To do so, go to the material properties "
"and select the convert option."
msgstr ""

#: ../../docs/tutorials/shading/shader_materials.rst:80
msgid ""
"Using the convert option will turn the SpatialMaterial into a ShaderMaterial "
"with a text shader, not a visual shader."
msgstr ""

#: ../../docs/tutorials/shading/visual_shaders.rst:4
#, fuzzy
msgid "VisualShaders"
msgstr ":ref:`doc_visual_shader_plugins`"

#: ../../docs/tutorials/shading/visual_shaders.rst:6
msgid ""
"Just as VisualScript is an alternative for users that prefer a graphical "
"approach to coding, VisualShaders are the visual alternative for creating "
"shaders."
msgstr ""

#: ../../docs/tutorials/shading/visual_shaders.rst:10
msgid ""
"As shaders are inherently linked to visuals, the graph-based approach with "
"previews of textures, materials, etc. offers a lot of additional convenience "
"compared to purely script-based shaders. On the other hand, VisualShaders do "
"not expose all features of the shader script and using both in parallel "
"might be necessary for specific effects."
msgstr ""

#: ../../docs/tutorials/shading/visual_shaders.rst:18
msgid ""
"If you are not familiar with shaders, start by reading :ref:"
"`doc_what_are_shaders`."
msgstr ""

#: ../../docs/tutorials/shading/visual_shaders.rst:22
#, fuzzy
msgid "Creating a VisualShader"
msgstr "타일셋(TileSet) 내보내기"

#: ../../docs/tutorials/shading/visual_shaders.rst:24
msgid ""
"VisualShaders can be created in any :ref:`class_ShaderMaterial`. To begin "
"using VisualShaders, create a new ``ShaderMaterial`` in an object of your "
"choice."
msgstr ""

#: ../../docs/tutorials/shading/visual_shaders.rst:29
msgid ""
"Then assign a :ref:`class_VisualShader` resource to the ``Shader`` property."
msgstr ""

#: ../../docs/tutorials/shading/visual_shaders.rst:33
msgid ""
"Click on the new ``VisualShader`` resource and the Visual Shader Editor will "
"open automatically. The layout of the Visual Shader Editor comprises two "
"parts: the upper toolbar and the graph itself."
msgstr ""

#: ../../docs/tutorials/shading/visual_shaders.rst:39
msgid "From left to right in the toolbar:"
msgstr ""

#: ../../docs/tutorials/shading/visual_shaders.rst:41
msgid ""
"The ``Add Node`` button displays a popup menu to let you add nodes to the "
"shader graph."
msgstr ""

#: ../../docs/tutorials/shading/visual_shaders.rst:43
msgid ""
"The drop-down menu is the shader type: Vertex, Fragment and Light. Like for "
"script shaders, it defines what built-in nodes will be available."
msgstr ""

#: ../../docs/tutorials/shading/visual_shaders.rst:45
msgid ""
"The following buttons and number input control the zooming level, grid "
"snapping and distance between grid lines (in pixels)."
msgstr ""

#: ../../docs/tutorials/shading/visual_shaders.rst:47
msgid ""
"The last icon shows the generated shader code corresponding to your graph."
msgstr ""

#: ../../docs/tutorials/shading/visual_shaders.rst:51
msgid ""
"Although VisualShaders do not require coding, they share the same logic with "
"script shaders. It is advised to learn the basics of both to have a good "
"understanding of the shading pipeline."
msgstr ""

#: ../../docs/tutorials/shading/visual_shaders.rst:55
msgid ""
"The visual shader graph is converted to a script shader behind the scene, "
"and you can see this code by pressing the last button in the toolbar. This "
"can be convenient to understand what a given node does and how to reproduce "
"it in scripts."
msgstr ""

#: ../../docs/tutorials/shading/visual_shaders.rst:61
#, fuzzy
msgid "Using the Visual Shader Editor"
msgstr "외부 텍스트 편집기 사용하기"

#: ../../docs/tutorials/shading/visual_shaders.rst:63
msgid ""
"By default, every new ``VisualShader`` will have an output node. Every node "
"connection ends at one of the output node's sockets. A node is the basic "
"unit to create your shader. To add a new node, click on the ``Add Node`` "
"button on the upper left corner or right click on any empty location in the "
"graph, and a menu will pop up."
msgstr ""

#: ../../docs/tutorials/shading/visual_shaders.rst:71
#, fuzzy
msgid "This popup has the following properties:"
msgstr "HUD는 다음의 정보들을 보여줍니다:"

#: ../../docs/tutorials/shading/visual_shaders.rst:73
msgid ""
"If you right-click on the graph, this menu will be called at the cursor "
"position and the created node, in that case, will also be placed under that "
"position; otherwise, it will be created at the graph's center."
msgstr ""

#: ../../docs/tutorials/shading/visual_shaders.rst:76
msgid ""
"It can be resized horizontally and vertically allowing more content to be "
"shown. Size transform and tree content position are saved between the calls, "
"so if you suddenly closed the popup you can easily restore its previous "
"state."
msgstr ""

#: ../../docs/tutorials/shading/visual_shaders.rst:79
msgid ""
"The ``Expand All`` and ``Collapse All`` options in the drop-down option menu "
"can be used to easily list the available nodes."
msgstr ""

#: ../../docs/tutorials/shading/visual_shaders.rst:81
msgid "You can also drag and drop nodes from the popup onto the graph."
msgstr ""

#: ../../docs/tutorials/shading/visual_shaders.rst:83
msgid ""
"While the popup has nodes sorted in categories, it can seem overwhelming at "
"first. Try to add some of the nodes, plug them in the output socket and "
"observe what happens."
msgstr ""

#: ../../docs/tutorials/shading/visual_shaders.rst:87
msgid ""
"When connecting any ``scalar`` output to a ``vector`` input, all components "
"of the vector will take the value of the scalar."
msgstr ""

#: ../../docs/tutorials/shading/visual_shaders.rst:90
msgid ""
"When connecting any ``vector`` output to a ``scalar`` input, the value of "
"the scalar will be the average of the vector's components."
msgstr ""

#: ../../docs/tutorials/shading/visual_shaders.rst:94
#, fuzzy
msgid "Visual Shader nodes"
msgstr ":ref:`doc_visual_shader_plugins`"

#: ../../docs/tutorials/shading/visual_shaders.rst:96
msgid ""
"Below are some special nodes that are worth knowing about. The list is not "
"exhaustive and might be expanded with more nodes and examples."
msgstr ""

#: ../../docs/tutorials/shading/visual_shaders.rst:100
#, fuzzy
msgid "Expression node"
msgstr "Expression Node(표현식 노드)"

#: ../../docs/tutorials/shading/visual_shaders.rst:102
msgid ""
"The ``Expression`` node allows you to write Godot Shading Language (GLSL-"
"like) expressions inside your visual shaders. The node has buttons to add "
"any amount of required input and output ports and can be resized. You can "
"also set up the name and type of each port. The expression you have entered "
"will apply immediately to the material (once the focus leaves the expression "
"text box). Any parsing or compilation errors will be printed to the Output "
"tab. The outputs are initialized to their zero value by default. The node is "
"located under the Special tab and can be used in all shader modes."
msgstr ""

#: ../../docs/tutorials/shading/visual_shaders.rst:113
msgid ""
"The possibilities of this node are almost limitless – you can write complex "
"procedures, and use all the power of text-based shaders, such as loops, the "
"``discard`` keyword, extended types, etc. For example:"
msgstr ""

#: ../../docs/tutorials/shading/visual_shaders.rst:120
#, fuzzy
msgid "Fresnel node"
msgstr "노드 만들기"

#: ../../docs/tutorials/shading/visual_shaders.rst:122
msgid ""
"The ``Fresnel`` node is designed to accept normal and view vectors and "
"produces a scalar which is the saturated dot product between them. "
"Additionally, you can setup the inversion and the power of equation. The "
"``Fresnel`` node is great for adding a rim-like lighting effect to objects."
msgstr ""

#: ../../docs/tutorials/shading/visual_shaders.rst:130
#, fuzzy
msgid "Boolean node"
msgstr "불 방식 OR"

#: ../../docs/tutorials/shading/visual_shaders.rst:132
msgid ""
"The ``Boolean`` node can be converted to ``Scalar`` or ``Vector`` to "
"represent ``0`` or ``1`` and ``(0, 0, 0)`` or ``(1, 1, 1)`` respectively. "
"This property can be used to enable or disable some effect parts with one "
"click."
msgstr ""

#: ../../docs/tutorials/shading/visual_shaders.rst:139
msgid "If node"
msgstr ""

#: ../../docs/tutorials/shading/visual_shaders.rst:141
msgid ""
"The ``If`` node allows you to setup a vector which will be returned the "
"result of the comparison between ``a`` and ``b``. There are three vectors "
"which can be returned: ``a == b`` (in that case the tolerance parameter is "
"provided as a comparison threshold – by default it is equal to the minimal "
"value, i.e. ``0.00001``), ``a > b`` and ``a < b``."
msgstr ""

#: ../../docs/tutorials/shading/visual_shaders.rst:150
#, fuzzy
msgid "Switch node"
msgstr "Switch(스위치)"

#: ../../docs/tutorials/shading/visual_shaders.rst:152
msgid ""
"The ``Switch`` node returns a vector if the boolean condition is ``true`` or "
"``false``. ``Boolean`` was introduced above. If you convert a vector to a "
"true boolean, all components of the vector should be above zero."
msgstr ""

#: ../../docs/tutorials/shading/visual_shaders.rst:160
msgid ""
"The ``Switch`` node is only available on the GLES3 backed. If you are "
"targeting GLES2 devices, you cannot use ``switch`` statements."
msgstr ""

#: ../../docs/tutorials/shading/intro_to_shaders_water_workshop.rst:4
msgid "Intro to shaders: 2D and 3D water"
msgstr ""

#: ../../docs/tutorials/shading/intro_to_shaders_water_workshop.rst:8
msgid ""
"In this hands-on video series, you will create your first water shaders in "
"2D and in 3D. If you're new to shaders, you should start 2D, because you "
"need some basic understanding of the shading language, vertex and fragment "
"shaders, to build upon. 3D adds quite a bit of complexity when it comes to "
"writing shader programs, as you will see in the third video."
msgstr ""

#: ../../docs/tutorials/shading/intro_to_shaders_water_workshop.rst:15
msgid "Watch the tutorials"
msgstr ""

#: ../../docs/tutorials/shading/intro_to_shaders_water_workshop.rst:19
msgid ""
"You can watch the `full playlist on YouTube <https://www.youtube.com/watch?"
"v=xoyk_A0RSpI&list=PLhqJJNjsQ7KHqNMYmTwtsYTeTrqrRP_fP>`__. Here are the "
"individual videos:"
msgstr ""

#: ../../docs/tutorials/shading/intro_to_shaders_water_workshop.rst:21
msgid ""
"`Intro to Shader Programming <https://www.youtube.com/watch?v=xoyk_A0RSpI>`__"
msgstr ""
"`Intro to Shader Programming <https://www.youtube.com/watch?v=xoyk_A0RSpI>`__"

#: ../../docs/tutorials/shading/intro_to_shaders_water_workshop.rst:22
msgid ""
"`Animated Water and UV Coordinates <https://www.youtube.com/watch?"
"v=U91nqeUe1qQ>`__"
msgstr ""

#: ../../docs/tutorials/shading/intro_to_shaders_water_workshop.rst:24
msgid "`Water in 3D <https://www.youtube.com/watch?v=vm9Sdvhq6ho>`__"
msgstr ""

#: ../../docs/tutorials/shading/intro_to_shaders_water_workshop.rst:25
msgid ""
"`Texture-based Deformation <https://www.youtube.com/watch?v=Pg79tztNZeA>`__"
msgstr ""

#: ../../docs/tutorials/shading/intro_to_shaders_water_workshop.rst:27
msgid ""
"`Merging the Two Waves Together <https://www.youtube.com/watch?"
"v=aC5Yzx7tS74>`__"
msgstr ""

#: ../../docs/tutorials/shading/intro_to_shaders_water_workshop.rst:29
msgid ""
"`Functions in ShaderScript <https://www.youtube.com/watch?v=1eNWPbfph1E>`__"
msgstr ""

#: ../../docs/tutorials/shading/intro_to_shaders_water_workshop.rst:31
msgid ""
"`Water Shadow and Masking <https://www.youtube.com/watch?v=Xqv7C9mVhak>`__"
msgstr ""

#: ../../docs/tutorials/shading/intro_to_shaders_water_workshop.rst:35
msgid "Download the source code"
msgstr ""

#: ../../docs/tutorials/shading/intro_to_shaders_water_workshop.rst:37
msgid ""
"Download the intro to shaders project here to follow along: :download:"
"`2d_water_shader.zip <files/2d_water_shader.zip>`."
msgstr ""

#: ../../docs/tutorials/shading/intro_to_shaders_water_workshop.rst:40
msgid ""
"It comes with a `start` folder to follow along with the 2D tutorials, and an "
"`end` folder that contains the final code."
msgstr ""

#: ../../docs/tutorials/shading/intro_to_shaders_water_workshop.rst:43
msgid ""
"You will find the 3D water project on `this GitHub repository <https://"
"github.com/BastiaanOlij/shader_tutorial>`_. We didn't include it here, as it "
"is a little heavy."
msgstr ""

#: ../../docs/tutorials/shading/screen-reading_shaders.rst:4
msgid "Screen-reading shaders"
msgstr ""

#: ../../docs/tutorials/shading/screen-reading_shaders.rst:9
msgid ""
"Very often, it is desired to make a shader that reads from the same screen "
"to which it's writing. 3D APIs, such as OpenGL or DirectX, make this very "
"difficult because of internal hardware limitations. GPUs are extremely "
"parallel, so reading and writing causes all sorts of cache and coherency "
"problems. As a result, not even the most modern hardware supports this "
"properly."
msgstr ""

#: ../../docs/tutorials/shading/screen-reading_shaders.rst:16
msgid ""
"The workaround is to make a copy of the screen, or a part of the screen, to "
"a back-buffer and then read from it while drawing. Godot provides a few "
"tools that make this process easy!"
msgstr ""

#: ../../docs/tutorials/shading/screen-reading_shaders.rst:21
msgid "SCREEN_TEXTURE built-in texture"
msgstr ""

#: ../../docs/tutorials/shading/screen-reading_shaders.rst:23
msgid ""
"Godot :ref:`doc_shading_language` has a special texture, \"SCREEN_TEXTURE"
"\" (and \"DEPTH_TEXTURE\" for depth, in the case of 3D). It takes as "
"argument the UV of the screen and returns a vec3 RGB with the color. A "
"special built-in varying: SCREEN_UV can be used to obtain the UV for the "
"current fragment. As a result, this simple 2D fragment shader:"
msgstr ""

#: ../../docs/tutorials/shading/screen-reading_shaders.rst:34
msgid "results in an invisible object, because it just shows what lies behind."
msgstr ""

#: ../../docs/tutorials/shading/screen-reading_shaders.rst:36
msgid ""
"The reason why textureLod must be used is because, when Godot copies back a "
"chunk of the screen, it also does an efficient separatable gaussian blur to "
"its mipmaps."
msgstr ""

#: ../../docs/tutorials/shading/screen-reading_shaders.rst:39
msgid ""
"This allows for not only reading from the screen, but reading from it with "
"different amounts of blur at no cost."
msgstr ""

#: ../../docs/tutorials/shading/screen-reading_shaders.rst:43
msgid "SCREEN_TEXTURE example"
msgstr ""

#: ../../docs/tutorials/shading/screen-reading_shaders.rst:45
msgid ""
"SCREEN_TEXTURE can be used for many things. There is a special demo for "
"*Screen Space Shaders*, that you can download to see and learn. One example "
"is a simple shader to adjust brightness, contrast and saturation:"
msgstr ""

#: ../../docs/tutorials/shading/screen-reading_shaders.rst:69
msgid "Behind the scenes"
msgstr ""

#: ../../docs/tutorials/shading/screen-reading_shaders.rst:71
msgid ""
"While this seems magical, it's not. The SCREEN_TEXTURE built-in, when first "
"found in a node that is about to be drawn, does a full-screen copy to a back-"
"buffer. Subsequent nodes that use it in shaders will not have the screen "
"copied for them, because this ends up being inefficient."
msgstr ""

#: ../../docs/tutorials/shading/screen-reading_shaders.rst:77
msgid ""
"As a result, if shaders that use SCREEN_TEXTURE overlap, the second one will "
"not use the result of the first one, resulting in unexpected visuals:"
msgstr ""

#: ../../docs/tutorials/shading/screen-reading_shaders.rst:83
msgid ""
"In the above image, the second sphere (top right) is using the same source "
"for SCREEN_TEXTURE as the first one below, so the first one \"disappears\", "
"or is not visible."
msgstr ""

#: ../../docs/tutorials/shading/screen-reading_shaders.rst:87
msgid ""
"In 3D, this is unavoidable because copying happens when opaque rendering "
"completes."
msgstr ""

#: ../../docs/tutorials/shading/screen-reading_shaders.rst:90
msgid ""
"In 2D, this can be corrected via the :ref:`BackBufferCopy "
"<class_BackBufferCopy>` node, which can be instantiated between both "
"spheres. BackBufferCopy can work by either specifying a screen region or the "
"whole screen:"
msgstr ""

#: ../../docs/tutorials/shading/screen-reading_shaders.rst:96
msgid "With correct back-buffer copying, the two spheres blend correctly:"
msgstr ""

#: ../../docs/tutorials/shading/screen-reading_shaders.rst:101
msgid "Back-buffer logic"
msgstr ""

#: ../../docs/tutorials/shading/screen-reading_shaders.rst:103
msgid ""
"So, to make it clearer, here's how the backbuffer copying logic works in "
"Godot:"
msgstr ""

#: ../../docs/tutorials/shading/screen-reading_shaders.rst:106
msgid ""
"If a node uses the SCREEN_TEXTURE, the entire screen is copied to the back "
"buffer before drawing that node. This only happens the first time; "
"subsequent nodes do not trigger this."
msgstr ""

#: ../../docs/tutorials/shading/screen-reading_shaders.rst:109
msgid ""
"If a BackBufferCopy node was processed before the situation in the point "
"above (even if SCREEN_TEXTURE was not used), the behavior described in the "
"point above does not happen. In other words, automatic copying of the entire "
"screen only happens if SCREEN_TEXTURE is used in a node for the first time "
"and no BackBufferCopy node (not disabled) was found before in tree-order."
msgstr ""

#: ../../docs/tutorials/shading/screen-reading_shaders.rst:115
msgid ""
"BackBufferCopy can copy either the entire screen or a region. If set to only "
"a region (not the whole screen) and your shader uses pixels not in the "
"region copied, the result of that read is undefined (most likely garbage "
"from previous frames). In other words, it's possible to use BackBufferCopy "
"to copy back a region of the screen and then use SCREEN_TEXTURE on a "
"different region. Avoid this behavior!"
msgstr ""

#: ../../docs/tutorials/shading/screen-reading_shaders.rst:124
msgid "DEPTH_TEXTURE"
msgstr ""

#: ../../docs/tutorials/shading/screen-reading_shaders.rst:126
msgid ""
"For 3D Shaders, it's also possible to access the screen depth buffer. For "
"this, the DEPTH_TEXTURE built-in is used. This texture is not linear; it "
"must be converted via the inverse projection matrix."
msgstr ""

#: ../../docs/tutorials/shading/screen-reading_shaders.rst:130
msgid ""
"The following code retrieves the 3D position below the pixel being drawn:"
msgstr ""

#: ../../docs/tutorials/shading/migrating_to_godot_shader_language.rst:4
msgid "Migrating to Godot's shading language"
msgstr ""

#: ../../docs/tutorials/shading/migrating_to_godot_shader_language.rst:9
msgid ""
"This document explains the differences between Godot's shading language and "
"GLSL and gives practical advice on how to migrate shaders from other "
"sources, such as Shadertoy and The Book of Shaders, into Godot shaders."
msgstr ""

#: ../../docs/tutorials/shading/migrating_to_godot_shader_language.rst:13
msgid ""
"For detailed information on Godot's shading language, please refer to the :"
"ref:`Shading Language <doc_shading_language>` reference."
msgstr ""

#: ../../docs/tutorials/shading/migrating_to_godot_shader_language.rst:17
msgid "GLSL"
msgstr ""

#: ../../docs/tutorials/shading/migrating_to_godot_shader_language.rst:19
msgid ""
"Godot uses a shading language based on GLSL with the addition of a few "
"quality-of-life features. Accordingly, most features available in GLSL are "
"available in Godot's shading language."
msgstr ""

#: ../../docs/tutorials/shading/migrating_to_godot_shader_language.rst:23
msgid "Shader programs"
msgstr ""

#: ../../docs/tutorials/shading/migrating_to_godot_shader_language.rst:25
msgid ""
"In GLSL, each shader uses a separate program. You have one program for the "
"vertex shader and one for the fragment shader. In Godot, you have a single "
"shader that contains a ``vertex`` and/or a ``fragment`` function. If you "
"only choose to write one, Godot will supply the other."
msgstr ""

#: ../../docs/tutorials/shading/migrating_to_godot_shader_language.rst:29
msgid ""
"Godot allows uniform variables and functions to be shared by defining the "
"fragment and vertex shaders in one file. In GLSL, the vertex and fragment "
"programs cannot share variables except when varyings are used."
msgstr ""

#: ../../docs/tutorials/shading/migrating_to_godot_shader_language.rst:34
#, fuzzy
msgid "Vertex attributes"
msgstr "``x.attribute``"

#: ../../docs/tutorials/shading/migrating_to_godot_shader_language.rst:36
msgid ""
"In GLSL, you can pass in per-vertex information using attributes and have "
"the flexibility to pass in as much or as little as you want. In Godot, you "
"have a set number of input attributes, including ``VERTEX`` (position), "
"``COLOR``, ``UV``, ``UV2``, ``NORMAL``. For a complete list, see the :ref:"
"`Shading language reference <doc_shading_language>`."
msgstr ""

#: ../../docs/tutorials/shading/migrating_to_godot_shader_language.rst:42
#: ../../docs/tutorials/shading/migrating_to_godot_shader_language.rst:98
msgid "gl_Position"
msgstr "gl_Position"

#: ../../docs/tutorials/shading/migrating_to_godot_shader_language.rst:44
msgid ""
"``gl_Position`` receives the final position of a vertex specified in the "
"vertex shader. It is specified by the user in clip space. Typically, in "
"GLSL, the model space vertex position is passed in using a vertex attribute "
"called ``position`` and you handle the conversion from model space to clip "
"space manually."
msgstr ""

#: ../../docs/tutorials/shading/migrating_to_godot_shader_language.rst:49
msgid ""
"In Godot, ``VERTEX`` specifies the vertex position in model space at the "
"beginning of the ``vertex`` function. Godot also handles the final "
"conversion to clip space after the user-defined ``vertex`` function is run. "
"If you want to skip the conversion from model to view space, you can set the "
"``render_mode`` to ``skip_vertex_transform``. If you want to skip all "
"transforms, set ``render_mode`` to ``skip_vertex_transform`` and set the "
"``PROJECTION_MATRIX`` to ``mat4(1.0)`` in order to nullify the final "
"transform from view space to clip space."
msgstr ""

#: ../../docs/tutorials/shading/migrating_to_godot_shader_language.rst:59
msgid ""
"Varyings are a type of variable that can be passed from the vertex shader to "
"the fragment shader. In modern GLSL (3.0 and up), varyings are defined with "
"the ``in`` and ``out`` keywords. A variable going out of the vertex shader "
"is defined with ``out`` in the vertex shader and ``in`` inside the fragment "
"shader."
msgstr ""

#: ../../docs/tutorials/shading/migrating_to_godot_shader_language.rst:64
#: ../../docs/tutorials/shading/migrating_to_godot_shader_language.rst:206
msgid "Main"
msgstr ""

#: ../../docs/tutorials/shading/migrating_to_godot_shader_language.rst:66
msgid ""
"In GLSL, each shader program looks like a self-contained C-style program. "
"Accordingly, the main entry point is ``main``. If you are copying a vertex "
"shader, rename ``main`` to ``vertex`` and if you are copying a fragment "
"shader, rename ``main`` to ``fragment``."
msgstr ""

#: ../../docs/tutorials/shading/migrating_to_godot_shader_language.rst:73
msgid ""
"Godot currently does not support constants. You can fake the functionality "
"by using a uniform initialized to the value, but you will not benefit from "
"the increased speed from using a constant."
msgstr ""

#: ../../docs/tutorials/shading/migrating_to_godot_shader_language.rst:77
msgid "Macros"
msgstr ""

#: ../../docs/tutorials/shading/migrating_to_godot_shader_language.rst:79
msgid ""
"In keeping with its similarity to C, GLSL lets you use macros. Commonly "
"``#define`` is used to define constants or small functions. There is no "
"straightforward way to translate defines to Godot's shading language. If it "
"is a function that is defined, then replace with a function, and if it is a "
"constant, then replace with a uniform. For other macros (``#if``, "
"``#ifdef``, etc.), there is no equivalent because they run during the pre-"
"processing stage of compilation."
msgstr ""

#: ../../docs/tutorials/shading/migrating_to_godot_shader_language.rst:88
msgid ""
"GLSL has many built-in variables that are hard-coded. These variables are "
"not uniforms, so they are not editable from the main program."
msgstr ""

#: ../../docs/tutorials/shading/migrating_to_godot_shader_language.rst:92
#: ../../docs/tutorials/shading/migrating_to_godot_shader_language.rst:158
#: ../../docs/tutorials/shading/migrating_to_godot_shader_language.rst:218
msgid "Variable"
msgstr "변수"

#: ../../docs/tutorials/shading/migrating_to_godot_shader_language.rst:92
#: ../../docs/tutorials/shading/migrating_to_godot_shader_language.rst:158
#: ../../docs/tutorials/shading/migrating_to_godot_shader_language.rst:218
msgid "Equivalent"
msgstr ""

#: ../../docs/tutorials/shading/migrating_to_godot_shader_language.rst:94
#: ../../docs/tutorials/shading/migrating_to_godot_shader_language.rst:220
msgid "gl_FragColor"
msgstr ""

#: ../../docs/tutorials/shading/migrating_to_godot_shader_language.rst:94
#: ../../docs/tutorials/shading/migrating_to_godot_shader_language.rst:160
#: ../../docs/tutorials/shading/migrating_to_godot_shader_language.rst:220
msgid "out vec4"
msgstr ""

#: ../../docs/tutorials/shading/migrating_to_godot_shader_language.rst:94
#: ../../docs/tutorials/shading/migrating_to_godot_shader_language.rst:160
#: ../../docs/tutorials/shading/migrating_to_godot_shader_language.rst:220
msgid "COLOR"
msgstr ""

#: ../../docs/tutorials/shading/migrating_to_godot_shader_language.rst:94
#: ../../docs/tutorials/shading/migrating_to_godot_shader_language.rst:160
#: ../../docs/tutorials/shading/migrating_to_godot_shader_language.rst:220
msgid "Output color for each pixel."
msgstr ""

#: ../../docs/tutorials/shading/migrating_to_godot_shader_language.rst:96
#: ../../docs/tutorials/shading/migrating_to_godot_shader_language.rst:222
msgid "gl_FragCoord"
msgstr ""

#: ../../docs/tutorials/shading/migrating_to_godot_shader_language.rst:96
#: ../../docs/tutorials/shading/migrating_to_godot_shader_language.rst:98
#: ../../docs/tutorials/shading/migrating_to_godot_shader_language.rst:174
#: ../../docs/tutorials/shading/migrating_to_godot_shader_language.rst:176
#: ../../docs/tutorials/shading/migrating_to_godot_shader_language.rst:222
msgid "vec4"
msgstr ""

#: ../../docs/tutorials/shading/migrating_to_godot_shader_language.rst:96
#: ../../docs/tutorials/shading/migrating_to_godot_shader_language.rst:222
msgid "FRAGCOORD"
msgstr ""

#: ../../docs/tutorials/shading/migrating_to_godot_shader_language.rst:96
#: ../../docs/tutorials/shading/migrating_to_godot_shader_language.rst:162
#: ../../docs/tutorials/shading/migrating_to_godot_shader_language.rst:222
msgid "For full screen quads. For smaller quads, use UV."
msgstr ""

#: ../../docs/tutorials/shading/migrating_to_godot_shader_language.rst:98
msgid "VERTEX"
msgstr ""

#: ../../docs/tutorials/shading/migrating_to_godot_shader_language.rst:98
msgid "Position of Vertex, output from Vertex Shader."
msgstr ""

#: ../../docs/tutorials/shading/migrating_to_godot_shader_language.rst:100
msgid "gl_PointSize"
msgstr ""

#: ../../docs/tutorials/shading/migrating_to_godot_shader_language.rst:100
#: ../../docs/tutorials/shading/migrating_to_godot_shader_language.rst:166
#: ../../docs/tutorials/shading/migrating_to_godot_shader_language.rst:168
#: ../../docs/tutorials/shading/migrating_to_godot_shader_language.rst:170
#: ../../docs/tutorials/shading/migrating_to_godot_shader_language.rst:172
#: ../../docs/tutorials/shading/migrating_to_godot_shader_language.rst:226
#: ../../docs/tutorials/misc/binary_serialization_api.rst:31
msgid "float"
msgstr "float"

#: ../../docs/tutorials/shading/migrating_to_godot_shader_language.rst:100
msgid "POINT_SIZE"
msgstr ""

#: ../../docs/tutorials/shading/migrating_to_godot_shader_language.rst:100
msgid "Size of Point primitive."
msgstr ""

#: ../../docs/tutorials/shading/migrating_to_godot_shader_language.rst:102
msgid "gl_PointCoord"
msgstr ""

#: ../../docs/tutorials/shading/migrating_to_godot_shader_language.rst:102
#: ../../docs/tutorials/shading/migrating_to_godot_shader_language.rst:162
#: ../../docs/tutorials/shading/migrating_to_godot_shader_language.rst:224
#: ../../docs/tutorials/shading/migrating_to_godot_shader_language.rst:228
msgid "vec2"
msgstr ""

#: ../../docs/tutorials/shading/migrating_to_godot_shader_language.rst:102
msgid "POINT_COORD"
msgstr ""

#: ../../docs/tutorials/shading/migrating_to_godot_shader_language.rst:102
msgid "Position on point when drawing Point primitives."
msgstr ""

#: ../../docs/tutorials/shading/migrating_to_godot_shader_language.rst:104
msgid "gl_FrontFacing"
msgstr ""

#: ../../docs/tutorials/shading/migrating_to_godot_shader_language.rst:104
#: ../../docs/tutorials/misc/binary_serialization_api.rst:27
msgid "bool"
msgstr "bool"

#: ../../docs/tutorials/shading/migrating_to_godot_shader_language.rst:104
msgid "FRONT_FACING"
msgstr ""

#: ../../docs/tutorials/shading/migrating_to_godot_shader_language.rst:104
msgid "True if front face of primitive."
msgstr ""

#: ../../docs/tutorials/shading/migrating_to_godot_shader_language.rst:110
#: ../../docs/tutorials/shading/migrating_to_godot_shader_language.rst:184
#: ../../docs/tutorials/shading/migrating_to_godot_shader_language.rst:232
msgid "Coordinates"
msgstr ""

#: ../../docs/tutorials/shading/migrating_to_godot_shader_language.rst:112
msgid ""
"``gl_FragCoord`` in GLSL and ``FRAGCOORD`` in the Godot shading language use "
"the same coordinate system. If using UV in Godot, the y-coordinate will be "
"flipped upside down."
msgstr ""

#: ../../docs/tutorials/shading/migrating_to_godot_shader_language.rst:118
msgid ""
"In GLSL, you can define the precision of a given type (float or int) at the "
"top of the shader with the ``precision`` keyword. In Godot, you can set the "
"precision of individual variables as you need by placing precision "
"qualifiers ``lowp``, ``mediump``, and ``highp`` before the type when "
"defining the variable. For more information, see the :ref:`Shading Language "
"<doc_shading_language>` reference."
msgstr ""

#: ../../docs/tutorials/shading/migrating_to_godot_shader_language.rst:124
msgid "Shadertoy"
msgstr ""

#: ../../docs/tutorials/shading/migrating_to_godot_shader_language.rst:126
msgid ""
"`Shadertoy <https://www.shadertoy.com/results?"
"query=&sort=popular&from=10&num=4>`_ is a website that makes it easy to "
"write fragment shaders and create `pure magic <https://www.shadertoy.com/"
"view/4tjGRh>`_."
msgstr ""

#: ../../docs/tutorials/shading/migrating_to_godot_shader_language.rst:129
msgid ""
"Shadertoy does not give the user full control over the shader. It handles "
"all the input and uniforms and only lets the user write the fragment shader."
msgstr ""

#: ../../docs/tutorials/shading/migrating_to_godot_shader_language.rst:133
#: ../../docs/tutorials/shading/migrating_to_godot_shader_language.rst:200
msgid "Types"
msgstr "타입(Types)"

#: ../../docs/tutorials/shading/migrating_to_godot_shader_language.rst:135
msgid ""
"Shadertoy uses the webgl spec, so it runs a slightly different version of "
"GLSL. However, it still has the regular types, including `Constants`_ and "
"macros."
msgstr ""

#: ../../docs/tutorials/shading/migrating_to_godot_shader_language.rst:139
msgid "mainImage"
msgstr "메인 이미지(mainImage)"

#: ../../docs/tutorials/shading/migrating_to_godot_shader_language.rst:141
msgid ""
"The main point of entry to a Shadertoy shader is the ``mainImage`` function. "
"``mainImage`` has two parameters, ``fragColor`` and ``fragCoord``, which "
"correspond to ``COLOR`` and ``FRAGCOORD`` in Godot, respectively. These "
"parameters are handled automatically in Godot, so you do not need to include "
"them as parameters yourself. Anything in the ``mainImage`` function should "
"be copied into the ``fragment`` function when porting to Godot."
msgstr ""

#: ../../docs/tutorials/shading/migrating_to_godot_shader_language.rst:150
msgid ""
"In order to make writing fragment shaders straightforward and easy, "
"Shadertoy handles passing a lot of helpful information from the main program "
"into the fragment shader for you. A few of these have no equivalents in "
"Godot because Godot has chosen not to make them available by default. This "
"is okay because Godot gives you the ability to make your own uniforms. For "
"variables whose equivalents are listed as \"Provide with Uniform\", users "
"are responsible for creating that uniform themselves. The description gives "
"the reader a hint about what they can pass in as a substitute."
msgstr ""

#: ../../docs/tutorials/shading/migrating_to_godot_shader_language.rst:160
msgid "fragColor"
msgstr "fragColor"

#: ../../docs/tutorials/shading/migrating_to_godot_shader_language.rst:162
msgid "fragCoord"
msgstr ""

#: ../../docs/tutorials/shading/migrating_to_godot_shader_language.rst:162
msgid "FRAGCOORD.xy"
msgstr ""

#: ../../docs/tutorials/shading/migrating_to_godot_shader_language.rst:164
msgid "iResolution"
msgstr ""

#: ../../docs/tutorials/shading/migrating_to_godot_shader_language.rst:164
#: ../../docs/tutorials/shading/migrating_to_godot_shader_language.rst:178
msgid "vec3"
msgstr ""

#: ../../docs/tutorials/shading/migrating_to_godot_shader_language.rst:164
#: ../../docs/tutorials/shading/migrating_to_godot_shader_language.rst:224
msgid "1.0 / SCREEN_PIXEL_SIZE"
msgstr ""

#: ../../docs/tutorials/shading/migrating_to_godot_shader_language.rst:164
#: ../../docs/tutorials/shading/migrating_to_godot_shader_language.rst:224
msgid "Can also pass in manually."
msgstr ""

#: ../../docs/tutorials/shading/migrating_to_godot_shader_language.rst:166
msgid "iTime"
msgstr ""

#: ../../docs/tutorials/shading/migrating_to_godot_shader_language.rst:166
#: ../../docs/tutorials/shading/migrating_to_godot_shader_language.rst:226
msgid "TIME"
msgstr ""

#: ../../docs/tutorials/shading/migrating_to_godot_shader_language.rst:166
#: ../../docs/tutorials/shading/migrating_to_godot_shader_language.rst:226
msgid "Time since shader started."
msgstr ""

#: ../../docs/tutorials/shading/migrating_to_godot_shader_language.rst:168
msgid "iTimeDelta"
msgstr ""

#: ../../docs/tutorials/shading/migrating_to_godot_shader_language.rst:168
#: ../../docs/tutorials/shading/migrating_to_godot_shader_language.rst:170
#: ../../docs/tutorials/shading/migrating_to_godot_shader_language.rst:172
#: ../../docs/tutorials/shading/migrating_to_godot_shader_language.rst:174
#: ../../docs/tutorials/shading/migrating_to_godot_shader_language.rst:176
#: ../../docs/tutorials/shading/migrating_to_godot_shader_language.rst:228
msgid "Provide with Uniform"
msgstr ""

#: ../../docs/tutorials/shading/migrating_to_godot_shader_language.rst:168
msgid "Time to render previous frame."
msgstr ""

#: ../../docs/tutorials/shading/migrating_to_godot_shader_language.rst:170
msgid "iFrame"
msgstr ""

#: ../../docs/tutorials/shading/migrating_to_godot_shader_language.rst:170
msgid "Frame number."
msgstr ""

#: ../../docs/tutorials/shading/migrating_to_godot_shader_language.rst:172
msgid "iChannelTime[4]"
msgstr ""

#: ../../docs/tutorials/shading/migrating_to_godot_shader_language.rst:172
msgid "Time since that particular texture started."
msgstr ""

#: ../../docs/tutorials/shading/migrating_to_godot_shader_language.rst:174
msgid "iMouse"
msgstr ""

#: ../../docs/tutorials/shading/migrating_to_godot_shader_language.rst:174
#: ../../docs/tutorials/shading/migrating_to_godot_shader_language.rst:228
msgid "Mouse position in pixel coordinates."
msgstr ""

#: ../../docs/tutorials/shading/migrating_to_godot_shader_language.rst:176
msgid "iDate"
msgstr ""

#: ../../docs/tutorials/shading/migrating_to_godot_shader_language.rst:176
msgid "Current date, expressed in seconds."
msgstr ""

#: ../../docs/tutorials/shading/migrating_to_godot_shader_language.rst:178
msgid "iChannelResolution[4]"
msgstr ""

#: ../../docs/tutorials/shading/migrating_to_godot_shader_language.rst:178
msgid "1.0 / TEXTURE_PIXEL_SIZE"
msgstr ""

#: ../../docs/tutorials/shading/migrating_to_godot_shader_language.rst:178
msgid "Resolution of particular texture."
msgstr ""

#: ../../docs/tutorials/shading/migrating_to_godot_shader_language.rst:180
msgid "iChanneli"
msgstr ""

#: ../../docs/tutorials/shading/migrating_to_godot_shader_language.rst:180
msgid "Sampler2D"
msgstr ""

#: ../../docs/tutorials/shading/migrating_to_godot_shader_language.rst:180
msgid "TEXTURE"
msgstr ""

#: ../../docs/tutorials/shading/migrating_to_godot_shader_language.rst:180
msgid "Godot provides only one built-in; user can make more."
msgstr ""

#: ../../docs/tutorials/shading/migrating_to_godot_shader_language.rst:186
msgid ""
"``fragCoord`` behaves the same as ``gl_FragCoord`` in :ref:`GLSL "
"<glsl_coordinates>` and ``FRAGCOORD`` in Godot."
msgstr ""

#: ../../docs/tutorials/shading/migrating_to_godot_shader_language.rst:190
msgid "The Book of Shaders"
msgstr ""

#: ../../docs/tutorials/shading/migrating_to_godot_shader_language.rst:192
msgid ""
"Similar to Shadertoy, `The Book of Shaders <https://thebookofshaders.com>`_ "
"provides access to a fragment shader in the web browser, with which the user "
"may interact. The user is restricted to writing fragment shader code with a "
"set list of uniforms passed in and with no ability to add additional "
"uniforms."
msgstr ""

#: ../../docs/tutorials/shading/migrating_to_godot_shader_language.rst:196
msgid ""
"For further help on porting shaders to various frameworks generally, The "
"Book of Shaders provides a `page <https://thebookofshaders.com/04>`_ on "
"running shaders in various frameworks."
msgstr ""

#: ../../docs/tutorials/shading/migrating_to_godot_shader_language.rst:202
msgid ""
"The Book of Shaders uses the webgl spec, so it runs a slightly different "
"version of GLSL. However, it still has the regular types, including "
"`Constants`_ and macros."
msgstr ""

#: ../../docs/tutorials/shading/migrating_to_godot_shader_language.rst:208
msgid ""
"The entry point for a Book of Shaders fragment shader is ``main``, just like "
"in GLSL. Everything written in a Book of Shaders ``main`` function should be "
"copied into Godot's ``fragment`` function."
msgstr ""

#: ../../docs/tutorials/shading/migrating_to_godot_shader_language.rst:214
msgid ""
"The Book of Shaders sticks closer to plain GLSL than Shadertoy does. It also "
"implements fewer uniforms than Shadertoy."
msgstr ""

#: ../../docs/tutorials/shading/migrating_to_godot_shader_language.rst:224
msgid "u_resolution"
msgstr ""

#: ../../docs/tutorials/shading/migrating_to_godot_shader_language.rst:226
msgid "u_time"
msgstr ""

#: ../../docs/tutorials/shading/migrating_to_godot_shader_language.rst:228
msgid "u_mouse"
msgstr ""

#: ../../docs/tutorials/shading/migrating_to_godot_shader_language.rst:234
msgid ""
"The Book of Shaders uses the same coordinate system as :ref:`GLSL "
"<glsl_coordinates>`."
msgstr ""

#: ../../docs/tutorials/shading/advanced_postprocessing.rst:4
msgid "Advanced post-processing"
msgstr ""

#: ../../docs/tutorials/shading/advanced_postprocessing.rst:9
msgid ""
"This tutorial describes an advanced method for post-processing in Godot. In "
"particular, it will explain how to write a post-processing shader that uses "
"the depth buffer. You should already be familiar with post-processing "
"generally and, in particular, with the methods outlined in the :ref:`custom "
"post-processing tutorial <doc_custom_postprocessing>`."
msgstr ""

#: ../../docs/tutorials/shading/advanced_postprocessing.rst:14
msgid ""
"In the previous post-processing tutorial, we rendered the scene to a :ref:"
"`Viewport <class_Viewport>` and then rendered the Viewport in a :ref:"
"`ViewportContainer <class_ViewportContainer>` to the main scene. One "
"limitation of this method is that we could not access the depth buffer "
"because the depth buffer is only available in spatial shaders and Viewports "
"do not maintain depth information."
msgstr ""

#: ../../docs/tutorials/shading/advanced_postprocessing.rst:21
msgid "Full screen quad"
msgstr ""

#: ../../docs/tutorials/shading/advanced_postprocessing.rst:23
msgid ""
"In the :ref:`custom post-processing tutorial <doc_custom_postprocessing>`, "
"we covered how to use a Viewport to make custom post-processing effects. "
"There are two main drawbacks of using a Viewport:"
msgstr ""

#: ../../docs/tutorials/shading/advanced_postprocessing.rst:27
msgid "The depth buffer cannot be accessed"
msgstr ""

#: ../../docs/tutorials/shading/advanced_postprocessing.rst:28
msgid "The effect of the post-processing shader is not visible in the editor"
msgstr ""

#: ../../docs/tutorials/shading/advanced_postprocessing.rst:30
msgid ""
"To get around the limitation on using the depth buffer, use a :ref:"
"`MeshInstance <class_MeshInstance>` with a :ref:`QuadMesh <class_QuadMesh>` "
"primitive. This allows us to use a spatial shader and to access the depth "
"texture of the scene. Next, use a vertex shader to make the quad cover the "
"screen at all times so that the post-processing effect will be applied at "
"all times, including in the editor."
msgstr ""

#: ../../docs/tutorials/shading/advanced_postprocessing.rst:36
msgid ""
"First, create a new MeshInstance and set its mesh to a QuadMesh. This "
"creates a quad centered at position ``(0, 0, 0)`` with a width and height of "
"``1``. Set the width and height to ``2``. Right now, the quad occupies a "
"position in world space at the origin; however, we want it to move with the "
"camera so that it always covers the entire screen. To do this, we will "
"bypass the coordinate transforms that translate the vertex positions through "
"the difference coordinate spaces and treat the vertices as if they were "
"already in clip space."
msgstr ""

#: ../../docs/tutorials/shading/advanced_postprocessing.rst:44
msgid ""
"The vertex shader expects coordinates to be output in clip space, which are "
"coordinates ranging from ``-1`` at the left and bottom of the screen to "
"``1`` at the top and right of the screen. This is why the QuadMesh needs to "
"have height and width of ``2``. Godot handles the transform from model to "
"view space to clip space behind the scenes, so we need to nullify the "
"effects of Godot's transformations. We do this by setting the ``POSITION`` "
"built-in to our desired position. ``POSITION`` bypasses the built-in "
"transformations and sets the vertex position directly."
msgstr ""

#: ../../docs/tutorials/shading/advanced_postprocessing.rst:60
msgid ""
"Even with this vertex shader, the quad keeps disappearing. This is due to "
"frustum culling, which is done on the CPU. Frustum culling uses the camera "
"matrix and the AABBs of Meshes to determine if the Mesh will be visible "
"*before* passing it to the GPU. The CPU has no knowledge of what we are "
"doing with the vertices, so it assumes the coordinates specified refer to "
"world positions, not clip space positions, which results in Godot culling "
"the quad when we turn away from the center of the scene. In order to keep "
"the quad from being culled, there are a few options:"
msgstr ""

#: ../../docs/tutorials/shading/advanced_postprocessing.rst:68
msgid ""
"Add the QuadMesh as a child to the camera, so the camera is always pointed "
"at it"
msgstr ""

#: ../../docs/tutorials/shading/advanced_postprocessing.rst:69
msgid ""
"Set the Geometry property ``extra_cull_margin`` as large as possible in the "
"QuadMesh"
msgstr ""

#: ../../docs/tutorials/shading/advanced_postprocessing.rst:71
msgid ""
"The second option ensures that the quad is visible in the editor, while the "
"first option guarantees that it will still be visible even if the camera "
"moves outside the cull margin. You can also use both options."
msgstr ""

#: ../../docs/tutorials/shading/advanced_postprocessing.rst:76
msgid "Depth texture"
msgstr ""

#: ../../docs/tutorials/shading/advanced_postprocessing.rst:78
msgid ""
"To read from the depth texture, perform a texture lookup using ``texture()`` "
"and the uniform variable ``DEPTH_TEXTURE``."
msgstr ""

#: ../../docs/tutorials/shading/advanced_postprocessing.rst:85
msgid ""
"Similar to accessing the screen texture, accessing the depth texture is only "
"possible when reading from the current viewport. The depth texture cannot be "
"accessed from another viewport to which you have rendered."
msgstr ""

#: ../../docs/tutorials/shading/advanced_postprocessing.rst:89
msgid ""
"The values returned by ``DEPTH_TEXTURE`` are between ``0`` and ``1`` and are "
"nonlinear. When displaying depth directly from the ``DEPTH_TEXTURE``, "
"everything will look almost white unless it is very close. This is because "
"the depth buffer stores objects closer to the camera using more bits than "
"those further, so most of the detail in depth buffer is found close to the "
"camera. In order to make the depth value align with world or model "
"coordinates, we need to linearise the value. When we apply the projection "
"matrix to the vertex position, the z value is made nonlinear, so to "
"linearise it, we multiply it by the inverse of the projection matrix, which "
"in Godot, is accessible with the variable ``INV_PROJECTION_MATRIX``."
msgstr ""

#: ../../docs/tutorials/shading/advanced_postprocessing.rst:99
msgid ""
"Firstly, take the screen space coordinates and transform them into "
"normalized device coordinates (NDC). NDC run from ``-1`` to ``1``, similar "
"to clip space coordinates. Reconstruct the NDC using ``SCREEN_UV`` for the "
"``x`` and ``y`` axis, and the depth value for ``z``."
msgstr ""

#: ../../docs/tutorials/shading/advanced_postprocessing.rst:111
msgid ""
"Convert NDC to view space by multiplying the NDC by "
"``INV_PROJECTION_MATRIX``. Recall that view space gives positions relative "
"to the camera, so the ``z`` value will give us the distance to the point."
msgstr ""

#: ../../docs/tutorials/shading/advanced_postprocessing.rst:124
msgid ""
"Because the camera is facing the negative ``z`` direction, the position will "
"have a negative ``z`` value. In order to get a usable depth value, we have "
"to negate ``view.z``."
msgstr ""

#: ../../docs/tutorials/shading/advanced_postprocessing.rst:127
msgid ""
"The world position can be constructed from the depth buffer using the "
"following code. Note that the ``CAMERA_MATRIX`` is needed to transform the "
"position from view space into world space, so it needs to be passed to the "
"fragment shader with a varying."
msgstr ""

#: ../../docs/tutorials/shading/advanced_postprocessing.rst:146
#, fuzzy
msgid "An optimization"
msgstr "애니메이션"

#: ../../docs/tutorials/shading/advanced_postprocessing.rst:148
msgid ""
"You can benefit from using a single large triangle rather than using a full "
"screen quad. The reason for this is explained `here <https://michaldrobot."
"com/2014/04/01/gcn-execution-patterns-in-full-screen-passes>`_. However, the "
"benefit is quite small and only beneficial when running especially complex "
"fragment shaders."
msgstr ""

#: ../../docs/tutorials/shading/advanced_postprocessing.rst:153
msgid ""
"Set the Mesh in the MeshInstance to an :ref:`ArrayMesh <class_ArrayMesh>`. "
"An ArrayMesh is a tool that allows you to easily construct a Mesh from "
"Arrays for vertices, normals, colors, etc."
msgstr ""

#: ../../docs/tutorials/shading/advanced_postprocessing.rst:157
#, fuzzy
msgid "Now, attach a script to the MeshInstance and use the following code:"
msgstr "KineticBody2D에 스크립트를 연결하고 다음 코드를 추가합니다:"

#: ../../docs/tutorials/shading/advanced_postprocessing.rst:179
msgid ""
"The triangle is specified in normalized device coordinates. Recall, NDC run "
"from ``-1`` to ``1`` in both the ``x`` and ``y`` directions. This makes the "
"screen ``2`` units wide and ``2`` units tall. In order to cover the entire "
"screen with a single triangle, use a triangle that is ``4`` units wide and "
"``4`` units tall, double its height and width."
msgstr ""

#: ../../docs/tutorials/shading/advanced_postprocessing.rst:185
msgid ""
"Assign the same vertex shader from above and everything should look exactly "
"the same."
msgstr ""

#: ../../docs/tutorials/shading/advanced_postprocessing.rst:187
msgid ""
"The one drawback to using an ArrayMesh over using a QuadMesh is that the "
"ArrayMesh is not visible in the editor because the triangle is not "
"constructed until the scene is run. To get around that, construct a single "
"triangle Mesh in a modelling program and use that in the MeshInstance "
"instead."
msgstr ""

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:4
msgid "High level multiplayer"
msgstr "하이 레벨 멀티플레이어(High level multiplayer)"

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:7
msgid "High level vs low level API"
msgstr "하이 레벨 vs 로우 레벨 API(High level vs low level API)"

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:9
msgid ""
"The following explains the differences of high- and low-level networking in "
"Godot as well as some fundamentals. If you want to jump in head-first and "
"add networking to your first nodes, skip to `Initializing the network`_ "
"below. But make sure to read the rest later on!"
msgstr ""
"여기부터는 몇 가지 기본 사항과 함께, Godot에서 하이 레벨 네트워킹과 로우 레"
"벨 네트워킹의 차이를 설명합니다. 바로 실전으로 가서 첫 노드에 네트워킹을 추가"
"하고 싶다면, 아래의 `네트워크 초기화하기(Initializing the network)`_\\ 로 건"
"너 뛰세요. 하지만 나중에라도 이 부분을 읽어주세요!"

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:11
msgid ""
"Godot always supported standard low-level networking via UDP, TCP and some "
"higher level protocols such as SSL and HTTP. These protocols are flexible "
"and can be used for almost anything. However, using them to synchronize game "
"state manually can be a large amount of work. Sometimes that work can't be "
"avoided or is worth it, for example when working with a custom server "
"implementation on the backend. But in most cases, it's worthwhile to "
"consider Godot's high-level networking API, which sacrifices some of the "
"fine-grained control of low-level networking for greater ease of use."
msgstr ""
"Godot는 항상 UDP, TCP, 그 외 SSL이나 HTTP와 같은 일부 하이 레벨 프로토콜을 통"
"해, 일반적인 로우 레벨 네트워킹을 지원했습니다. 이 프로토콜은 유연하고 거의 "
"모든 것에 사용될 수 있습니다. 하지만 게임 상태를 일일이 동기화하기 위해 이 프"
"로토콜을 사용하는 일은 많은 작업이 필요합니다. 때로는 그 작업이 필요하고, 가"
"치가 있습니다. 예를 들면 백엔드에서 맞춤 서버 구현을 작업할 때가 있죠. 하지"
"만, 대부분의 경우, Godot의 하이 레벨 네트워킹 API를 생각하게 만들었습니다. 쉽"
"게 쓸 수 있지만, 로우 레벨 네트워킹의 세밀한 제어를 희생하죠."

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:14
msgid "This is due to the inherent limitations of the low-level protocols:"
msgstr "이는 로우 레벨 프로토콜의 고유의 한계 때문입니다:"

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:16
msgid ""
"TCP ensures packets will always arrive reliably and in order, but latency is "
"generally higher due to error correction. It's also quite a complex protocol "
"because it understands what a \"connection\" is, and optimizes for goals "
"that often don't suit applications like multiplayer games. Packets are "
"buffered to be sent in larger batches, trading less per-packet overhead for "
"higher latency. This can be useful for things like HTTP, but generally not "
"for games. Some of this can be configured and disabled (e.g. by disabling "
"\"Nagle's algorithm\" for the TCP connection)."
msgstr ""
"TCP는 패킷(Packet)이 항상 안전하게 도착하도록 보장합니다. 하지만 오류 연결 때"
"문에 지연 시간은 점진적으로 길어집니다. 이 또한 복잡한 프로토콜입니다. 왜냐하"
"면 무엇이 \"연결(Connection)\"인지를 이해해야 하고, 멀티플레이어 게임과 같은 "
"애플리케이션과는 맞지 않은 목적을 이루기 위해 최적화를 해야 합니다. 패킷은 "
"더 큰 배치(Batch)로 전송되도록 버퍼링됩니다. 그렇게 되면 전달하는 패킷 당 오"
"버헤드(Overhead)는 줄어들고 지연 시간이 길어집니다. 이는 HTTP에는 유용하겠지"
"만, 일반적인 게임에는 아니죠. 일부 프로토콜은 이를 설정하거나 끌 수 있습니"
"다. (예: TCP 연결의 \"네이글 알고리즘(Nagle Algorithm)\"을 끔)."

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:18
msgid ""
"UDP is a simpler protocol, which only sends packets (and has no concept of a "
"\"connection\"). No error correction makes it pretty quick (low latency), "
"but packets may be lost along the way or received in the wrong order. Added "
"to that, the MTU (maximum packet size) for UDP is generally low (only a few "
"hundred bytes), so transmitting larger packets means splitting them, "
"reorganizing them and retrying if a part fails."
msgstr ""
"UDP는 더 간단한 프로토콜로, 패킷을 보내기만 합니다 (즉, \"연결"
"(Connection)\"의 개념이 없습니다). 오류 연결이 없어서 꽤 빠릅니다 (짧은 지연 "
"시간). 하지만 패킷을 보내는 과정에서 잃을 수 있고, 잘못된 상대방이 받을 수 있"
"습니다. 게다가, UDP의 MTU (최대 패킷 크기)는 (겨우 몇 백 바이트로) 보통 낮습"
"니다. 따라서 더 큰 패킷을 전송하려면 패킷을 분리하고, 다시 구조화하고, 만일 "
"일부분이 잘못되면 다시 시도해야 합니다."

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:23
msgid ""
"In general, TCP can be thought of as reliable, ordered, and slow; UDP as "
"unreliable, unordered and fast. Because of the large difference in "
"performance, it often makes sense to re-build the parts of TCP wanted for "
"games (optional reliability and packet order), while avoiding the unwanted "
"parts (congestion/traffic control features, Nagle's algorithm, etc). Due to "
"this, most game engines come with such an implementation, and Godot is no "
"exception."
msgstr ""
"보통은, TCP를 신뢰할 수 있고 질서 있고 느리다고 생각할 수 있습니다. 반대로 "
"UDP는 신뢰할 수 없고, 무질서하며, 빠르다고 생각하겠죠. 그 이유는 둘 간의 큰 "
"성능 차이입니다. 종종 게임에 필요한 TCP 부분을 새로 만드는 것이 합리적이기도 "
"합니다 (선택적인 안정성과 패킷 순서). 그러면서 원하지 않은 부분은 피할 수 있"
"으니까요 (혼잡(Congestion)/트래픽(traffic) 제어 기능, 네이글 알고리즘 등). "
"이 때문에 대부분의 게임 엔진은 이러한 네트워킹 구현을 제공합니다. Godot 역시 "
"예외가 아니죠."

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:26
msgid ""
"In summary, you can use the low-level networking API for maximum control and "
"implement everything on top of bare network protocols or use the high-level "
"API based on :ref:`SceneTree <class_SceneTree>` that does most of the heavy "
"lifting behind the scenes in a generally optimized way."
msgstr ""
"요약해서 말하자면, 최대한의 제어와 순수한 네트워크 프로토콜에서 모든 것을 구"
"현하려면, 로우 레벨 네트워킹 API를 사용할 수 있습니다. 혹은 일반적으로 최적"
"화 된 방식에서 씬 뒤로 대부분의 무거운 리프팅을 수행하는 :ref:`SceneTree(씬 "
"트리) <class_SceneTree>`\\ 에서 하이 레벨 API를 사용할 수 있습니다."

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:28
msgid ""
"Most of Godot's supported platforms offer all or most of the mentioned high- "
"and low-level networking features. As networking is always largely hardware "
"and operating system dependent, however, some features may change or not be "
"available on some target platforms. Most notably, the HTML5 platform "
"currently only offers WebSocket support and lacks some of the higher level "
"features as well as raw access to low-level protocols like TCP and UDP."
msgstr ""
"Godot의 지원하는 플랫폼 대부분은 앞서 언급한 하이 레벨과 로우 레벨 네트워킹 "
"기능을 거의 전부 제공합니다. 그러나 네트워킹은 항상 하드웨어와 운영체제에 따"
"라 크게 달라지므로, 일부 기능은 특정 플랫폼에서 달라지거나 이용할 수 없을지"
"도 모릅니다. 가장 주목할 것으로, HTML5 플랫폼은 현재로써 오직 WebSocket 지원"
"을 제공하고 하이 레벨 기능은 부족하고, TCP 및 UDP와 같은 로우 레벨 프로토콜"
"로 원시 접근만 지원합니다."

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:34
#, fuzzy
msgid ""
"More about TCP/IP, UDP, and networking: https://web.archive.org/"
"web/20190406162102/https://gafferongames.com/post/udp_vs_tcp/"
msgstr ""
"TCP/IP, UDP, 네트워킹에 더 알아보세요: https://gafferongames.com/post/"
"udp_vs_tcp/"

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:37
#, fuzzy
msgid ""
"Gaffer On Games has a lot of useful articles about networking in Games "
"(`here <https://web.archive.org/web/20190405204744/https://gafferongames.com/"
"tags/networking/>`__), including the comprehensive `introduction to "
"networking models in games <http://web.archive.org/web/20190407004521/"
"https://gafferongames.com/post/"
"what_every_programmer_needs_to_know_about_game_networking/>`__."
msgstr ""
"Gaffer On Games에는 게임의 네트워크에 관한 많은 유용한 기사가 있습니다 (`여기"
"로 <https://gafferongames.com/tags/networking>`__). 기사 중에는 포괄적인 `게"
"임에서 네트워킹 모델 소개 <https://gafferongames.com/post/"
"what_every_programmer_needs_to_know_about_game_networking/>`__\\ 도 있습니다."

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:41
msgid ""
"If you want to use your low-level networking library of choice instead of "
"Godot's built-in networking, see here for an example: https://github.com/"
"PerduGames/gdnet3"
msgstr ""
"Godot의 내장 네트워킹 대신 로우 레벨 네트워킹 라이브러리를 쓰고 싶다면, 여기"
"서 예제를 확인하세요: https://github.com/PerduGames/gdnet3"

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:45
msgid ""
"Adding networking to your game comes with some responsibility. It can make "
"your application vulnerable if done wrong and may lead to cheats or "
"exploits. It may even allow an attacker to compromise the machines your "
"application runs on and use your servers to send spam, attack others or "
"steal your users data if they play your game."
msgstr ""
"게임에 네트워킹을 추가하는 일은 책임도 따릅니다. 이 작업은 애플리케이션이 잘"
"못되어 사기나 착취에 취약해질 수 있습니다. 게다가 공격자가 실행 중인 애플리케"
"이션의 시스템을 손상시키고, 서버를 통해 스팸을 보내거나, 다른 이를 공격하고, "
"게임을 하고 있던 사용자 정보를 훔칠 수도 있습니다."

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:50
msgid ""
"This is always the case when networking is involved and has nothing to do "
"with Godot. You can of course experiment, but when you release a networked "
"application, always take care of any possible security concerns."
msgstr ""
"이 일은 네트워킹에 관련되어 있고 Godot와는 관련이 없는 경우입니다. 물론 시험"
"을 해볼 수는 있지만, 네트워크가 연결된 애플리케이션을 출시하면, 가능한 보안 "
"문제를 항상 관리하세요."

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:55
msgid "Mid level abstraction"
msgstr "중급 추상화(Mid level abstraction)"

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:57
msgid ""
"Before going into how we would like to synchronize a game across the "
"network, it can be helpful to understand how the base network API for "
"synchronization works."
msgstr ""
"어떻게 네트워크를 통해 게임을 동기화할 지 알아보기 전에, 기본 네트워크 API가 "
"어떻게 동기화에 작동하는지 이해하는 것이 좋습니다."

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:59
#, fuzzy
msgid ""
"Godot uses a mid-level object :ref:`NetworkedMultiplayerPeer "
"<class_NetworkedMultiplayerPeer>`. This object is not meant to be created "
"directly, but is designed so that several implementations can provide it."
msgstr ""
"Godot는 중급(mid level) 객체로 :ref:`NetworkedMultiplayerPeer "
"<class_NetworkedMultiplayerPeer>`\\ 를 사용합니다. 이 객체는 바로 네트워크를 "
"만드는 것은 아니지만, 설계를 함으로써 여러 구현 기능을 제공합니다:"

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:62
msgid ""
"This object extends from :ref:`PacketPeer <class_PacketPeer>`, so it "
"inherits all the useful methods for serializing, sending and receiving data. "
"On top of that, it adds methods to set a peer, transfer mode, etc. It also "
"includes signals that will let you know when peers connect or disconnect."
msgstr ""
"이 객체는 :ref:`PacketPeer <class_PacketPeer>`\\ 에서 확장됩니다. 따라서 직렬"
"화(Serialize), 데이터 보내기 및 받기에 유용한 메서드를 갖습니다. 또한 피어"
"(Peer), 전송 모드(Transfer Mode) 등을 설정하는 메소드를 추가합니다. 그리고 시"
"그널을 갖고 있어 언제 피어가 연결되고 끊기는지 알 수 있습니다."

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:64
msgid ""
"This class interface can abstract most types of network layers, topologies "
"and libraries. By default, Godot provides an implementation based on ENet (:"
"ref:`NetworkedMultiplayerEnet <class_NetworkedMultiplayerENet>`), one based "
"on WebRTC (:ref:`WebRTCMultiplayer <class_WebRTCMultiplayer>`), and one "
"based on WebSocket (:ref:`WebSocketMultiplayerPeer "
"<class_WebSocketMultiplayerPeer>`), but this could be used to implement "
"mobile APIs (for adhoc WiFi, Bluetooth) or custom device/console-specific "
"networking APIs."
msgstr ""

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:70
msgid ""
"For most common cases, using this object directly is discouraged, as Godot "
"provides even higher level networking facilities. Yet it is made available "
"in case a game has specific needs for a lower level API."
msgstr ""

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:74
msgid "Initializing the network"
msgstr ""

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:76
msgid ""
"The object that controls networking in Godot is the same one that controls "
"everything tree-related: :ref:`SceneTree <class_SceneTree>`."
msgstr ""

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:78
msgid ""
"To initialize high level networking, the SceneTree must be provided a "
"NetworkedMultiplayerPeer object."
msgstr ""

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:80
msgid ""
"To create that object, it first has to be initialized as a server or client."
msgstr ""

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:82
msgid ""
"Initializing as a server, listening on the given port, with a given maximum "
"number of peers:"
msgstr ""

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:90
msgid "Initializing as a client, connecting to a given IP and port:"
msgstr ""

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:98
msgid "Get the previously set network peer:"
msgstr ""

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:104
msgid "Checking whether the tree is initialized as a server or client:"
msgstr ""

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:110
msgid "Terminating the networking feature:"
msgstr ""

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:116
msgid ""
"(Although it may make sense to send a message first to let the other peers "
"know you're going away instead of letting the connection close or timeout, "
"depending on your game.)"
msgstr ""

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:119
msgid "Managing connections"
msgstr ""

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:121
msgid ""
"Some games accept connections at any time, others during the lobby phase. "
"Godot can be requested to no longer accept connections at any point (see "
"``set_refuse_new_network_connections(bool)`` and related methods on :ref:"
"`SceneTree <class_SceneTree>`). To manage who connects, Godot provides the "
"following signals in SceneTree:"
msgstr ""

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:124
msgid "Server and Clients:"
msgstr ""

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:126
msgid "``network_peer_connected(int id)``"
msgstr ""

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:127
msgid "``network_peer_disconnected(int id)``"
msgstr ""

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:129
msgid ""
"The above signals are called on every peer connected to the server "
"(including on the server) when a new peer connects or disconnects. Clients "
"will connect with a unique ID greater than 1, while network peer ID 1 is "
"always the server. Anything below 1 should be handled as invalid. You can "
"retrieve the ID for the local system via :ref:`SceneTree."
"get_network_unique_id() <class_SceneTree_method_get_network_unique_id>`. "
"These IDs will be useful mostly for lobby management and should generally be "
"stored, as they identify connected peers and thus players. You can also use "
"IDs to send messages only to certain peers."
msgstr ""

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:135
msgid "Clients:"
msgstr ""

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:137
#, fuzzy
msgid "``connected_to_server``"
msgstr "연결(Connections)"

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:138
#, fuzzy
msgid "``connection_failed``"
msgstr "연결(Connections)"

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:139
msgid "``server_disconnected``"
msgstr ""

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:141
msgid ""
"Again, all these functions are mainly useful for lobby management or for "
"adding/removing players on the fly. For these tasks, the server clearly has "
"to work as a server and you have to perform tasks manually such as sending a "
"newly connected player information about other already connected players (e."
"g. their names, stats, etc)."
msgstr ""

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:145
msgid ""
"Lobbies can be implemented any way you want, but the most common way is to "
"use a node with the same name across scenes in all peers. Generally, an "
"autoloaded node/singleton is a great fit for this, to always have access to, "
"e.g. \"/root/lobby\"."
msgstr ""

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:149
msgid "RPC"
msgstr ""

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:151
msgid ""
"To communicate between peers, the easiest way is to use RPCs (remote "
"procedure calls). This is implemented as a set of functions in :ref:`Node "
"<class_Node>`:"
msgstr ""

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:154
msgid "``rpc(\"function_name\", <optional_args>)``"
msgstr ""

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:155
msgid "``rpc_id(<peer_id>,\"function_name\", <optional_args>)``"
msgstr ""

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:156
msgid "``rpc_unreliable(\"function_name\", <optional_args>)``"
msgstr ""

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:157
msgid "``rpc_unreliable_id(<peer_id>, \"function_name\", <optional_args>)``"
msgstr ""

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:159
msgid "Synchronizing member variables is also possible:"
msgstr ""

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:161
msgid "``rset(\"variable\", value)``"
msgstr ""

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:162
msgid "``rset_id(<peer_id>, \"variable\", value)``"
msgstr ""

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:163
msgid "``rset_unreliable(\"variable\", value)``"
msgstr ""

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:164
msgid "``rset_unreliable_id(<peer_id>, \"variable\", value)``"
msgstr ""

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:166
msgid "Functions can be called in two fashions:"
msgstr ""

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:168
msgid ""
"Reliable: the function call will arrive no matter what, but may take longer "
"because it will be re-transmitted in case of failure."
msgstr ""

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:169
msgid ""
"Unreliable: if the function call does not arrive, it will not be re-"
"transmitted; but if it arrives, it will do it quickly."
msgstr ""

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:171
msgid ""
"In most cases, reliable is desired. Unreliable is mostly useful when "
"synchronizing object positions (sync must happen constantly, and if a packet "
"is lost, it's not that bad because a new one will eventually arrive and it "
"would likely be outdated because the object moved further in the meantime, "
"even if it was resent reliably)."
msgstr ""

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:174
msgid ""
"There is also the ``get_rpc_sender_id`` function in ``SceneTree``, which can "
"be used to check which peer (or peer ID) sent an RPC."
msgstr ""

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:177
msgid "Back to lobby"
msgstr ""

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:179
msgid ""
"Let's get back to the lobby. Imagine that each player that connects to the "
"server will tell everyone about it."
msgstr ""

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:225
msgid ""
"You might have already noticed something different, which is the usage of "
"the ``remote`` keyword on the ``register_player`` function:"
msgstr ""

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:231
msgid ""
"This keyword has two main uses. The first is to let Godot know that this "
"function can be called from RPC. If no keywords are added, Godot will block "
"any attempts to call functions for security. This makes security work a lot "
"easier (so a client can't call a function to delete a file on another "
"client's system)."
msgstr ""

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:235
msgid ""
"The second use is to specify how the function will be called via RPC. There "
"are four different keywords:"
msgstr ""

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:237
#, fuzzy
msgid "``remote``"
msgstr "remote"

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:238
#, fuzzy
msgid "``remotesync``"
msgstr "`remotesync`"

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:239
#, fuzzy
msgid "``master``"
msgstr "master"

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:240
#, fuzzy
msgid "``puppet``"
msgstr "puppet"

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:242
msgid ""
"The ``remote`` keyword means that the ``rpc()`` call will go via network and "
"execute remotely."
msgstr ""

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:244
msgid ""
"The ``remotesync`` keyword means that the ``rpc()`` call will go via network "
"and execute remotely, but will also execute locally (do a normal function "
"call)."
msgstr ""

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:246
msgid ""
"The others will be explained further down. Note that you could also use the "
"``get_rpc_sender_id`` function on ``SceneTree`` to check which peer actually "
"made the RPC call to ``register_player``."
msgstr ""

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:249
msgid ""
"With this, lobby management should be more or less explained. Once you have "
"your game going, you will most likely want to add some extra security to "
"make sure clients don't do anything funny (just validate the info they send "
"from time to time, or before game start). For the sake of simplicity and "
"because each game will share different information, this is not shown here."
msgstr ""

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:254
msgid "Starting the game"
msgstr ""

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:256
msgid ""
"Once enough players have gathered in the lobby, the server should probably "
"start the game. This is nothing special in itself, but we'll explain a few "
"nice tricks that can be done at this point to make your life much easier."
msgstr ""

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:260
msgid "Player scenes"
msgstr ""

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:262
msgid ""
"In most games, each player will likely have its own scene. Remember that "
"this is a multiplayer game, so in every peer you need to instance **one "
"scene for each player connected to it**. For a 4 player game, each peer "
"needs to instance 4 player nodes."
msgstr ""

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:265
msgid ""
"So, how to name such nodes? In Godot, nodes need to have a unique name. It "
"must also be relatively easy for a player to tell which node represents each "
"player ID."
msgstr ""

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:268
msgid ""
"The solution is to simply name the *root nodes of the instanced player "
"scenes as their network ID*. This way, they will be the same in every peer "
"and RPC will work great! Here is an example:"
msgstr ""

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:297
msgid ""
"Depending on when you execute pre_configure_game(), you may need to change "
"any calls to ``add_child()`` to be deferred via ``call_deferred()``, as the "
"SceneTree is locked while the scene is being created (e.g. when ``_ready()`` "
"is being called)."
msgstr ""

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:301
msgid "Synchronizing game start"
msgstr ""

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:303
msgid ""
"Setting up players might take different amounts of time for every peer due "
"to lag, different hardware, or other reasons. To make sure the game will "
"actually start when everyone is ready, pausing the game until all players "
"are ready can be useful:"
msgstr ""

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:312
msgid ""
"When the server gets the OK from all the peers, it can tell them to start, "
"as for example:"
msgstr ""

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:333
msgid "Synchronizing the game"
msgstr ""

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:335
msgid ""
"In most games, the goal of multiplayer networking is that the game runs "
"synchronized on all the peers playing it. Besides supplying an RPC and "
"remote member variable set implementation, Godot adds the concept of network "
"masters."
msgstr ""

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:339
msgid "Network master"
msgstr ""

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:341
msgid ""
"The network master of a node is the peer that has the ultimate authority "
"over it."
msgstr ""

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:343
msgid ""
"When not explicitly set, the network master is inherited from the parent "
"node, which if not changed, is always going to be the server (ID 1). Thus "
"the server has authority over all nodes by default."
msgstr ""

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:345
msgid ""
"The network master can be set with the function :ref:`Node."
"set_network_master(id, recursive) <class_Node_method_set_network_master>` "
"(recursive is ``true`` by default and means the network master is "
"recursively set on all child nodes of the node as well)."
msgstr ""

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:348
msgid ""
"Checking that a specific node instance on a peer is the network master for "
"this node for all connected peers is done by calling :ref:`Node."
"is_network_master() <class_Node_method_is_network_master>`. This will return "
"``true`` when executed on the server and ``false`` on all client peers."
msgstr ""

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:350
msgid ""
"If you have paid attention to the previous example, it's possible you "
"noticed that each peer was set to have network master authority for their "
"own player (Node) instead of the server:"
msgstr ""

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:370
msgid ""
"Each time this piece of code is executed on each peer, the peer makes itself "
"master on the node it controls, and all other nodes remain as puppets with "
"the server being their network master."
msgstr ""

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:372
msgid ""
"To clarify, here is an example of how this looks in the `bomber demo "
"<https://github.com/godotengine/godot-demo-projects/tree/master/networking/"
"multiplayer_bomber>`_:"
msgstr ""

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:379
msgid "Master and puppet keywords"
msgstr "Master 그리고 puppet 키워드"

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:383
msgid ""
"The real advantage of this model is when used with the ``master``/``puppet`` "
"keywords in GDScript (or their equivalent in C# and Visual Script). "
"Similarly to the ``remote`` keyword, functions can also be tagged with them:"
msgstr ""

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:386
msgid "Example bomb code:"
msgstr ""

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:394
msgid "Example player code:"
msgstr ""

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:408
msgid ""
"In the above example, a bomb explodes somewhere (likely managed by whoever "
"is master). The bomb knows the bodies in the area, so it checks them and "
"checks that they contain an ``exploded`` function."
msgstr ""

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:411
msgid ""
"If they do, the bomb calls ``exploded`` on it. However, the ``exploded`` "
"method in the player has a ``master`` keyword. This means that only the "
"player who is master for that instance will actually get the function."
msgstr ""

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:414
msgid ""
"This instance, then, calls the ``stun`` method in the same instances of that "
"same player (but in different peers), and only those which are set as "
"puppet, making the player look stunned in all the peers (as well as the "
"current, master one)."
msgstr ""

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:417
msgid ""
"Note that you could also send the ``stun()`` message only to a specific "
"player by using ``rpc_id(<id>, \"exploded\", bomb_owner)``. This may not "
"make much sense for an area-of-effect case like the bomb, but in other "
"cases, like single target damage."
msgstr ""

#: ../../docs/tutorials/networking/http_request_class.rst:4
msgid "Making HTTP requests"
msgstr ""

#: ../../docs/tutorials/networking/http_request_class.rst:6
msgid ""
"The :ref:`HTTPRequest <class_HTTPRequest>` node is the easiest way to make "
"HTTP requests in Godot. It is backed by the more low-level :ref:`HTTPClient "
"<class_HTTPClient>`, for which a tutorial is available :ref:`here "
"<doc_http_client_class>`."
msgstr ""

#: ../../docs/tutorials/networking/http_request_class.rst:9
msgid ""
"For the sake of this example, we will create a simple UI with a button, that "
"when pressed will start the HTTP request to the specified URL."
msgstr ""

#: ../../docs/tutorials/networking/http_request_class.rst:12
msgid "Preparing scene"
msgstr ""

#: ../../docs/tutorials/networking/http_request_class.rst:14
msgid ""
"Create a new empty scene, add a CanvasLayer as the root node and add a "
"script to it. Then add two child nodes to it: a Button and an HTTPRequest "
"node. You will need to connect the following signals to the CanvasLayer "
"script:"
msgstr ""

#: ../../docs/tutorials/networking/http_request_class.rst:16
msgid "Button.pressed: When the button is pressed, we will start the request."
msgstr ""

#: ../../docs/tutorials/networking/http_request_class.rst:17
msgid ""
"HTTPRequest.request_completed: When the request is completed, we will get "
"the requested data as an argument."
msgstr ""

#: ../../docs/tutorials/networking/http_request_class.rst:24
msgid ""
"Below is all the code we need to make it work. The URL points to an online "
"API mocker; it returns a pre-defined JSON string, which we will then parse "
"to get access to the data."
msgstr ""

#: ../../docs/tutorials/networking/http_request_class.rst:40
msgid ""
"With this, you should see ``(hello:world)`` printed on the console; hello "
"being a key, and world being a value, both of them strings."
msgstr ""

#: ../../docs/tutorials/networking/http_request_class.rst:42
msgid ""
"For more information on parsing JSON, see the class references for :ref:"
"`JSON <class_JSON>` and :ref:`JSONParseResult <class_JSONParseResult>`."
msgstr ""

#: ../../docs/tutorials/networking/http_request_class.rst:44
msgid ""
"Note that you may want to check whether the ``result`` equals "
"``RESULT_SUCCESS`` and whether a JSON parsing error occurred, see the JSON "
"class reference and :ref:`HTTPRequest <class_HTTPRequest>` for more."
msgstr ""

#: ../../docs/tutorials/networking/http_request_class.rst:46
msgid ""
"Of course, you can also set custom HTTP headers. These are given as a string "
"array, with each string containing a header in the format ``\"header: value"
"\"``. For example, to set a custom user agent (the HTTP ``user-agent`` "
"header) you could use the following:"
msgstr ""

#: ../../docs/tutorials/networking/http_request_class.rst:53
msgid ""
"Please note that, for SSL/TLS encryption and thus HTTPS URLs to work, you "
"may need to take some steps as described :ref:`here <doc_ssl_certificates>`."
msgstr ""

#: ../../docs/tutorials/networking/http_request_class.rst:55
msgid ""
"Also, when calling APIs using authorization, be aware that someone might "
"analyse and decompile your released application and thus may gain access to "
"any embedded authorization information like tokens, usernames or passwords. "
"That means it is usually not a good idea to embed things such as database "
"access credentials inside your game. Avoid providing information useful to "
"an attacker whenever possible."
msgstr ""

#: ../../docs/tutorials/networking/http_request_class.rst:59
msgid "Sending data to server"
msgstr ""

#: ../../docs/tutorials/networking/http_request_class.rst:61
msgid ""
"Until now, we have limited ourselves to requesting data from a server. But "
"what if you need to send data to the server? Here is a common way of doing "
"it:"
msgstr ""

#: ../../docs/tutorials/networking/http_request_class.rst:72
msgid ""
"Keep in mind that you have to wait for a request to finish before sending "
"another one. Making multiple request at once requires you to have one node "
"per request. A common strategy is to create and delete HTTPRequest nodes at "
"runtime as necessary."
msgstr ""

#: ../../docs/tutorials/networking/http_client_class.rst:4
msgid "HTTP client class"
msgstr ""

#: ../../docs/tutorials/networking/http_client_class.rst:6
msgid ""
":ref:`HTTPClient <class_HTTPClient>` provides low-level access to HTTP "
"communication. For a higher-level interface, you may want to take a look at :"
"ref:`HTTPRequest <class_HTTPRequest>` first, which has a tutorial available :"
"ref:`here <doc_http_request_class>`."
msgstr ""

#: ../../docs/tutorials/networking/http_client_class.rst:10
msgid ""
"Here's an example of using the :ref:`HTTPClient <class_HTTPClient>` class. "
"It's just a script, so it can be run by executing:"
msgstr ""

#: ../../docs/tutorials/networking/http_client_class.rst:17
msgid "It will connect and fetch a website."
msgstr ""

#: ../../docs/tutorials/networking/ssl_certificates.rst:4
msgid "SSL certificates"
msgstr ""

#: ../../docs/tutorials/networking/ssl_certificates.rst:9
msgid ""
"It is often desired to use SSL connections for communications to avoid \"man "
"in the middle\" attacks. Godot has a connection wrapper, :ref:`StreamPeerSSL "
"<class_StreamPeerSSL>`, which can take a regular connection and add security "
"around it. The :ref:`HTTPClient <class_HTTPClient>` class also supports "
"HTTPS by using this same wrapper."
msgstr ""

#: ../../docs/tutorials/networking/ssl_certificates.rst:16
msgid ""
"For SSL to work, certificates need to be provided. A .crt file must be "
"specified in the project settings:"
msgstr ""

#: ../../docs/tutorials/networking/ssl_certificates.rst:21
msgid ""
"This file should contain any number of public certificates in `PEM format "
"<https://en.wikipedia.org/wiki/Privacy-enhanced_Electronic_Mail>`__."
msgstr ""

#: ../../docs/tutorials/networking/ssl_certificates.rst:24
msgid ""
"Of course, remember to add .crt as filter so the exporter recognizes this "
"when exporting your project."
msgstr ""

#: ../../docs/tutorials/networking/ssl_certificates.rst:29
msgid "There are two ways to obtain certificates:"
msgstr ""

#: ../../docs/tutorials/networking/ssl_certificates.rst:32
msgid "Approach 1: self signed cert"
msgstr ""

#: ../../docs/tutorials/networking/ssl_certificates.rst:34
msgid ""
"The first approach is the simplest: generate a private and public key pair "
"and add the public key (in PEM format) to the .crt file. The private key "
"should go to your server."
msgstr ""

#: ../../docs/tutorials/networking/ssl_certificates.rst:38
msgid ""
"OpenSSL has `some documentation <https://raw.githubusercontent.com/openssl/"
"openssl/master/doc/HOWTO/keys.txt>`__ about this. This approach also **does "
"not require domain validation** nor requires you to spend a considerable "
"amount of money in purchasing certificates from a CA."
msgstr ""

#: ../../docs/tutorials/networking/ssl_certificates.rst:45
msgid "Approach 2: CA cert"
msgstr ""

#: ../../docs/tutorials/networking/ssl_certificates.rst:47
msgid ""
"The second approach consists of using a certificate authority (CA) such as "
"Verisign, Geotrust, etc. This is a more cumbersome process, but it's more "
"\"official\" and ensures your identity is clearly represented."
msgstr ""

#: ../../docs/tutorials/networking/ssl_certificates.rst:52
msgid ""
"Unless you are working with large companies or corporations, or need to "
"connect to someone else's servers (i.e., connecting to Google or some other "
"REST API provider via HTTPS), this method is not as useful."
msgstr ""

#: ../../docs/tutorials/networking/ssl_certificates.rst:56
msgid ""
"Also, when using a CA issued cert, **you must enable domain validation**, to "
"ensure the domain you are connecting to is the one intended, otherwise any "
"website can issue any certificate in the same CA and it will work."
msgstr ""

#: ../../docs/tutorials/networking/ssl_certificates.rst:61
msgid ""
"If you are using Linux, you can use the supplied certs file, generally "
"located in:"
msgstr ""

#: ../../docs/tutorials/networking/ssl_certificates.rst:68
msgid ""
"This file allows HTTPS connections to virtually any website (i.e., Google, "
"Microsoft, etc.)."
msgstr ""

#: ../../docs/tutorials/networking/ssl_certificates.rst:71
msgid ""
"Or pick any of the more specific certificates there if you are connecting to "
"a specific one."
msgstr ""

#: ../../docs/tutorials/networking/websocket.rst:4
#: ../../docs/tutorials/networking/webrtc.rst:14
msgid "WebSocket"
msgstr ""

#: ../../docs/tutorials/networking/websocket.rst:7
msgid "HTML5 and WebSocket"
msgstr ""

#: ../../docs/tutorials/networking/websocket.rst:9
msgid ""
"The WebSocket protocol was standardized in 2011 with the original goal of "
"allowing browsers to create stable and bidirectional connections with a "
"server. Before that, browsers used to only support HTTPRequests, which is "
"not well suited for bidirectional communication."
msgstr ""

#: ../../docs/tutorials/networking/websocket.rst:12
msgid ""
"The protocol is quite simple, message based, and a very powerful tool to "
"send push notifications to browsers, and has been used to implement chats, "
"turn-based games, etc. It still uses a TCP connection, which is good for "
"reliability but not for latency, so not good for real-time applications like "
"VoIP and fast-paced games (see :ref:`WebRTC <doc_webrtc>` for those use "
"cases)."
msgstr ""

#: ../../docs/tutorials/networking/websocket.rst:14
msgid ""
"Due to its simplicity, its wide compatibility, and being easier to use than "
"a raw TCP connection, WebSocket soon started to spread outside the browsers, "
"in native applications as a mean to communicate with network servers."
msgstr ""

#: ../../docs/tutorials/networking/websocket.rst:16
msgid "Godot supports WebSocket in both native and HTML5 exports."
msgstr ""

#: ../../docs/tutorials/networking/websocket.rst:19
#, fuzzy
msgid "Using WebSocket in Godot"
msgstr "Godot에서 NuGet 패키지 사용하기"

#: ../../docs/tutorials/networking/websocket.rst:21
msgid ""
"WebSocket is implemented in Godot via three main classes :ref:"
"`WebSocketClient <class_WebSocketClient>`, :ref:`WebSocketServer "
"<class_WebSocketServer>`, and :ref:`WebSocketPeer <class_WebSocketPeer>`. "
"The WebSocket implementation is compatible with the High Level Multiplayer. "
"See section on :ref:`high-level multiplayer <doc_high_level_multiplayer>` "
"for more details."
msgstr ""

#: ../../docs/tutorials/networking/websocket.rst:24
#, fuzzy
msgid "Minimal client example"
msgstr "타이머(Timer) 예제"

#: ../../docs/tutorials/networking/websocket.rst:26
msgid ""
"This example will show you how to create a WebSocket connection to a remote "
"server, and how to send and receive data."
msgstr ""

#: ../../docs/tutorials/networking/websocket.rst:79
#: ../../docs/tutorials/networking/webrtc.rst:91
#, fuzzy
msgid "This will print:"
msgstr "이렇게 프린트 될 것입니다:"

#: ../../docs/tutorials/networking/websocket.rst:87
#, fuzzy
msgid "Minimal server example"
msgstr "타이머(Timer) 예제"

#: ../../docs/tutorials/networking/websocket.rst:89
msgid ""
"This example will show you how to create a WebSocket server that listen for "
"remote connections, and how to send and receive data."
msgstr ""

#: ../../docs/tutorials/networking/websocket.rst:145
msgid "This will print (when a client connects) something similar to this:"
msgstr ""

#: ../../docs/tutorials/networking/websocket.rst:153
#, fuzzy
msgid "Advanced chat demo"
msgstr "고급 벡터 연산"

#: ../../docs/tutorials/networking/websocket.rst:155
msgid ""
"A more advanced chat demo which optionally uses the multiplayer mid-level "
"abstraction and a high level multiplayer demo are available in the `godot "
"demo projects <https://github.com/godotengine/godot-demo-projects>`_ under "
"`networking/websocket_chat` and `networking/websocket_multiplayer`."
msgstr ""

#: ../../docs/tutorials/networking/webrtc.rst:4
#: ../../docs/tutorials/networking/webrtc.rst:21
msgid "WebRTC"
msgstr ""

#: ../../docs/tutorials/networking/webrtc.rst:7
msgid "HTML5, WebSocket, WebRTC"
msgstr ""

#: ../../docs/tutorials/networking/webrtc.rst:9
msgid ""
"One of Godot's great features is its ability to export to the HTML5/"
"WebAssembly platform, allowing your game to run directly in the browser when "
"a user visit your webpage."
msgstr ""

#: ../../docs/tutorials/networking/webrtc.rst:11
msgid ""
"This is a great opportunity for both demos and full games, but used to come "
"with some limitations. In the area of networking, browsers used to support "
"only HTTPRequests until recently, when first WebSocket and then WebRTC were "
"proposed as standards."
msgstr ""

#: ../../docs/tutorials/networking/webrtc.rst:16
msgid ""
"When the WebSocket protocol was standardized in December 2011, it allowed "
"browsers to create stable and bidirectional connections to a WebSocket "
"server. The protocol is quite simple, but a very powerful tool to send push "
"notifications to browsers, and has been used to implement chats, turn-based "
"games, etc."
msgstr ""

#: ../../docs/tutorials/networking/webrtc.rst:18
msgid ""
"WebSockets, though, still use a TCP connection, which is good for "
"reliability but not for latency, so not good for real-time applications like "
"VoIP and fast-paced games."
msgstr ""

#: ../../docs/tutorials/networking/webrtc.rst:23
msgid ""
"For this reason, since 2010, Google started working on a new technology "
"called WebRTC, which later on, in 2017, became a W3C candidate "
"recommendation. WebRTC is a much more complex set of specifications, and "
"relies on many other technologies behind the scenes (ICE, DTLS, SDP) to "
"provide fast, real-time, and secure communication between two peers."
msgstr ""

#: ../../docs/tutorials/networking/webrtc.rst:25
msgid ""
"The idea is to find the fastest route between the two peers and establish "
"whenever possible a direct communication (i.e. try to avoid a relaying "
"server)."
msgstr ""

#: ../../docs/tutorials/networking/webrtc.rst:27
msgid ""
"However, this comes at a price, which is that some media information must be "
"exchanged between the two peers before the communication can start (in the "
"form of Session Description Protocol - SDP strings). This usually takes the "
"form of a so-called WebRTC Signaling Server."
msgstr ""

#: ../../docs/tutorials/networking/webrtc.rst:31
msgid ""
"Peers connect to a signaling server (for example a WebSocket server) and "
"send their media information. The server then relays this information to "
"other peers, allowing them to establish the desired direct communication. "
"Once this step is done, peers can disconnect from the signaling server and "
"keep the direct Peer-to-Peer (P2P) connection open."
msgstr ""

#: ../../docs/tutorials/networking/webrtc.rst:34
#, fuzzy
msgid "Using WebRTC in Godot"
msgstr "Godot에서 NuGet 패키지 사용하기"

#: ../../docs/tutorials/networking/webrtc.rst:36
msgid ""
"WebRTC is implemented in Godot via two main classes :ref:"
"`WebRTCPeerConnection <class_WebRTCPeerConnection>` and :ref:"
"`WebRTCDataChannel <class_WebRTCDataChannel>`, plus the multiplayer API "
"implementation :ref:`WebRTCMultiplayer <class_WebRTCMultiplayer>`. See "
"section on :ref:`high-level multiplayer <doc_high_level_multiplayer>` for "
"more details."
msgstr ""

#: ../../docs/tutorials/networking/webrtc.rst:38
msgid ""
"These classes are available automatically in HTML5, but **require an "
"external GDNative plugin on native (non-HTML5) platforms**. Check out the "
"`webrtc-native plugin repository <https://github.com/godotengine/webrtc-"
"native>`__ for instructions and to get the latest `release <https://github."
"com/godotengine/webrtc-native/releases>`__."
msgstr ""

#: ../../docs/tutorials/networking/webrtc.rst:41
msgid "Minimal connection example"
msgstr ""

#: ../../docs/tutorials/networking/webrtc.rst:43
msgid ""
"This example will show you how to create a WebRTC connection between two "
"peers in the same application. This is not very useful in real life, but "
"will give you a good overview of how a WebRTC connection is set up."
msgstr ""

#: ../../docs/tutorials/networking/webrtc.rst:99
#, fuzzy
msgid "Local signaling example"
msgstr "발사 예제"

#: ../../docs/tutorials/networking/webrtc.rst:101
msgid ""
"This example expands on the previous one, separating the peers in two "
"different scenes, and using a :ref:`singleton <doc_singletons_autoload>` as "
"a signaling server."
msgstr ""

#: ../../docs/tutorials/networking/webrtc.rst:141
msgid "And now for the local signaling server:"
msgstr ""

#: ../../docs/tutorials/networking/webrtc.rst:143
msgid ""
"This local signaling server is supposed to be used as a :ref:`singleton "
"<doc_singletons_autoload>` to connect two peers in the same scene."
msgstr ""

#: ../../docs/tutorials/networking/webrtc.rst:177
#, fuzzy
msgid "Then you can use it like this:"
msgstr "다음과 같은 스크립트를 만드세요:"

#: ../../docs/tutorials/networking/webrtc.rst:198
msgid "This will print something similar to this:"
msgstr ""

#: ../../docs/tutorials/networking/webrtc.rst:206
msgid "Remote signaling with WebSocket"
msgstr ""

#: ../../docs/tutorials/networking/webrtc.rst:208
msgid ""
"A more advanced demo using WebSocket for signaling peers and :ref:"
"`WebRTCMultiplayer <class_WebRTCMultiplayer>` is available in the `godot "
"demo projects <https://github.com/godotengine/godot-demo-projects>`_ under "
"`networking/webrtc_signaling`."
msgstr ""

#: ../../docs/tutorials/assetlib/index.rst:2
msgid "Asset Library"
msgstr "애셋 라이브러리"

#: ../../docs/tutorials/assetlib/what_is_assetlib.rst:4
msgid "About the Asset Library"
msgstr "애셋 라이브러리에 대하여"

#: ../../docs/tutorials/assetlib/what_is_assetlib.rst:6
msgid ""
"The Godot Asset Library, otherwise known as the AssetLib, is a repository of "
"user-submitted Godot addons, scripts, tools and other resources, "
"collectively referred to as assets. They're available to all Godot users for "
"download directly from within the engine, but it can also be accessed at "
"Godot's `official website <https://godotengine.org/asset-library/asset>`_."
msgstr ""

#: ../../docs/tutorials/assetlib/what_is_assetlib.rst:11
msgid ""
"On the surface, the Asset Library might look and function similar to asset "
"stores available for other engines, such as Unity's Asset Store, or Unreal "
"Engine's Marketplace, where you can submit both freely-available assets, as "
"well as paid, commercial ones. In addition, often times such assets are "
"distributed under non-free, proprietary licenses, limiting what you can do "
"with them."
msgstr ""

#: ../../docs/tutorials/assetlib/what_is_assetlib.rst:17
msgid ""
"The Asset Library is different - all assets are distributed free of charge, "
"and under a host of open-source licenses (such as the MIT license, the GPL, "
"and the Boost Software License). This makes the AssetLib more similar to the "
"software repositories of a Linux distribution."
msgstr ""

#: ../../docs/tutorials/assetlib/what_is_assetlib.rst:21
msgid ""
"This set of pages will cover how to use the AssetLib (both from inside "
"Godot, and on the website), how you can submit your own assets, and what the "
"guidelines for submission are."
msgstr ""

#: ../../docs/tutorials/assetlib/what_is_assetlib.rst:24
msgid ""
"Please note that the AssetLib is relatively young - it may have various pain "
"points, bugs and usability issues. As with all Godot projects, the code "
"repository is available on `GitHub <https://github.com/godotengine/godot-"
"asset-library>`_, where you can submit pull requests and issues, so please "
"do not hesitate to visit it!"
msgstr ""

#: ../../docs/tutorials/assetlib/what_is_assetlib.rst:29
#, fuzzy
msgid "Types of assets"
msgstr "TypeCast(타입캐스트)"

#: ../../docs/tutorials/assetlib/what_is_assetlib.rst:31
msgid ""
"Be aware that there are, broadly, two different types of assets you can post."
msgstr ""

#: ../../docs/tutorials/assetlib/what_is_assetlib.rst:33
msgid ""
"Assets labeled as \"Templates\", \"Projects\", or \"Demos\" appear under the "
"\"Templates\" tab in the Godot project manager. These assets are standalone "
"Godot projects that can run by themselves."
msgstr ""

#: ../../docs/tutorials/assetlib/what_is_assetlib.rst:37
msgid ""
"Other assets show up inside of the Godot editor under the \"AssetLib\" main "
"screen tab, next to \"2D\", \"3D\", and \"Script\". These assets are meant "
"to be downloaded and placed into an existing Godot project."
msgstr ""

#: ../../docs/tutorials/assetlib/what_is_assetlib.rst:45
msgid "Can paid assets be uploaded to the asset library?"
msgstr ""

#: ../../docs/tutorials/assetlib/what_is_assetlib.rst:47
msgid ""
"Not to the official one, though in the future, there might be other asset "
"libraries which allow it. That said, you are allowed to monetize and sell "
"Godot assets outside the Asset Library."
msgstr ""

#: ../../docs/tutorials/assetlib/using_assetlib.rst:4
msgid "Using the AssetLib"
msgstr ""

#: ../../docs/tutorials/assetlib/using_assetlib.rst:7
msgid "On the website"
msgstr ""

#: ../../docs/tutorials/assetlib/using_assetlib.rst:12
msgid ""
"As mentioned before, you can access the web frontend of the AssetLib on "
"`Godot's official website <https://godotengine.org/asset-library/asset>`_, "
"and this is what it looks like when you first visit it:"
msgstr ""

#: ../../docs/tutorials/assetlib/using_assetlib.rst:18
msgid ""
"At the top, you see the **header**, which takes you to various other parts "
"of the AssetLib - at the moment, it's empty, as we are not logged in."
msgstr ""

#: ../../docs/tutorials/assetlib/using_assetlib.rst:22
msgid "Searching"
msgstr ""

#: ../../docs/tutorials/assetlib/using_assetlib.rst:24
msgid ""
"In the center is the **search bar + settings** section, and the **assets** "
"section below it - this lets you filter out certain kinds of assets based on "
"a host of criteria. These include the asset **category** (such as 2D tools, "
"scripts and demos), **engine version** they are intended for, **sorting "
"order** (by update date, by name, etc.) and **support level**."
msgstr ""

#: ../../docs/tutorials/assetlib/using_assetlib.rst:30
msgid ""
"While most other filter settings should be fairly self-explanatory, it's "
"worth going over what \"support level\" means in the Asset Library. "
"Currently there are three support levels, and each asset can belong to only "
"one."
msgstr ""

#: ../../docs/tutorials/assetlib/using_assetlib.rst:34
msgid ""
"**Official** assets are created and maintained by the official Godot Engine "
"developers. Currently, these include the official engine demos, which "
"showcase how various areas of the engine work."
msgstr ""

#: ../../docs/tutorials/assetlib/using_assetlib.rst:38
msgid ""
"**Community** assets are submitted and maintained by the members of the "
"Godot community."
msgstr ""

#: ../../docs/tutorials/assetlib/using_assetlib.rst:41
msgid ""
"**Testing** assets are works-in-progress, and may contain bugs and usability "
"issues. They are not recommended for use in serious projects, but you are "
"encouraged to download, test them, and submit issues to the original authors."
msgstr ""

#: ../../docs/tutorials/assetlib/using_assetlib.rst:45
msgid ""
"You can mix and match any of the search filters and criteria, and upon "
"clicking the Search button, receive the list of all assets in the Library "
"that match them."
msgstr ""

#: ../../docs/tutorials/assetlib/using_assetlib.rst:50
msgid ""
"Note that the search results are not updated in real-time, so you will have "
"to re-submit the search query each time you change the query settings."
msgstr ""

#: ../../docs/tutorials/assetlib/using_assetlib.rst:54
msgid "Breakdown of an asset"
msgstr ""

#: ../../docs/tutorials/assetlib/using_assetlib.rst:56
msgid ""
"Now let's take a look at what an asset's page looks like and what it "
"contains."
msgstr ""

#: ../../docs/tutorials/assetlib/using_assetlib.rst:60
msgid "Asset's thumbnail/icon."
msgstr ""

#: ../../docs/tutorials/assetlib/using_assetlib.rst:61
msgid "Asset's name."
msgstr ""

#: ../../docs/tutorials/assetlib/using_assetlib.rst:62
msgid "Current version number of the asset."
msgstr ""

#: ../../docs/tutorials/assetlib/using_assetlib.rst:63
msgid ""
"Asset's average rating, displayed in stars. (This is currently "
"unimplemented.)"
msgstr ""

#: ../../docs/tutorials/assetlib/using_assetlib.rst:64
msgid "Asset's category, Godot version, and support status."
msgstr ""

#: ../../docs/tutorials/assetlib/using_assetlib.rst:65
msgid "Asset's original author/submitter."
msgstr ""

#: ../../docs/tutorials/assetlib/using_assetlib.rst:66
msgid "The license the asset is distributed under."
msgstr ""

#: ../../docs/tutorials/assetlib/using_assetlib.rst:67
msgid "The date of the asset's latest edit/update."
msgstr ""

#: ../../docs/tutorials/assetlib/using_assetlib.rst:68
msgid "A textual description of the asset."
msgstr ""

#: ../../docs/tutorials/assetlib/using_assetlib.rst:69
msgid "Links related to the asset (download link, file list, issue tracker)."
msgstr ""

#: ../../docs/tutorials/assetlib/using_assetlib.rst:70
msgid "A SHA-256 hash of the asset, for download validation purposes."
msgstr ""

#: ../../docs/tutorials/assetlib/using_assetlib.rst:71
msgid "Images and videos showcasing the asset."
msgstr ""

#: ../../docs/tutorials/assetlib/using_assetlib.rst:74
msgid "Registering and logging in"
msgstr ""

#: ../../docs/tutorials/assetlib/using_assetlib.rst:76
msgid ""
"In order to upload assets to the AssetLib, you need to be logged in, and to "
"do that, you need a registered user account. In the future, this may also "
"give you access to other features, such as commenting on or rating the "
"existing assets. You do *not* need to be logged in to browse and download "
"the assets."
msgstr ""

#: ../../docs/tutorials/assetlib/using_assetlib.rst:81
msgid "The login/registration page can be accessed from the AssetLib header."
msgstr ""

#: ../../docs/tutorials/assetlib/using_assetlib.rst:85
msgid ""
"From here, you can register your account, which requires a valid email "
"address, a username, and a (preferably strong) password."
msgstr ""

#: ../../docs/tutorials/assetlib/using_assetlib.rst:90
msgid "Then, you can use your username and password to log in."
msgstr ""

#: ../../docs/tutorials/assetlib/using_assetlib.rst:94
msgid ""
"This will change the look of the AssetLib header. Now you get access to a "
"handful of new functions:"
msgstr ""

#: ../../docs/tutorials/assetlib/using_assetlib.rst:97
msgid ""
"The feed, which shows a list of status updates on your submitted assets (and "
"possibly more in the future)."
msgstr ""

#: ../../docs/tutorials/assetlib/using_assetlib.rst:98
msgid "A list of your uploaded assets."
msgstr ""

#: ../../docs/tutorials/assetlib/using_assetlib.rst:99
msgid "The ability to submit new assets."
msgstr ""

#: ../../docs/tutorials/assetlib/using_assetlib.rst:101
msgid "|image6|"
msgstr ""

#: ../../docs/tutorials/assetlib/using_assetlib.rst:103
msgid ""
"You can learn how to submit assets to the Library, and what the asset "
"submission guidelines are, in the next part of this tutorial, :ref:"
"`doc_uploading_to_assetlib`."
msgstr ""

#: ../../docs/tutorials/assetlib/using_assetlib.rst:107
msgid "In the editor"
msgstr ""

#: ../../docs/tutorials/assetlib/using_assetlib.rst:109
msgid ""
"You can also access the AssetLib directly from Godot. It is available from "
"two places - in the Project Manager's Templates tab, and inside of a "
"project, from the workspaces list."
msgstr ""

#: ../../docs/tutorials/assetlib/using_assetlib.rst:113
msgid "|image7|"
msgstr "|image7|"

#: ../../docs/tutorials/assetlib/using_assetlib.rst:115
msgid "|image14|"
msgstr "|image14|"

#: ../../docs/tutorials/assetlib/using_assetlib.rst:117
msgid ""
"Click on it, and Godot will fetch info about the assets from the AssetLib. "
"Once it's finished, you will see a window similar to what the AssetLib "
"website looks like, with some differences:"
msgstr ""

#: ../../docs/tutorials/assetlib/using_assetlib.rst:121
msgid "|image8|"
msgstr "|image8|"

#: ../../docs/tutorials/assetlib/using_assetlib.rst:123
msgid ""
"Similarly to the web version of the AssetLib, here you can search for assets "
"by category, name, and sort them by factors such as name or edit date."
msgstr ""

#: ../../docs/tutorials/assetlib/using_assetlib.rst:126
msgid ""
"Notably, you can only fetch assets for the current version of Godot you are "
"running. Projects, Demos and Templates can be downloaded from from the "
"Project Manager view of the AssetLib. Addons (tools, scripts, materials "
"etc.) can be downloaded from the in-project AssetLib and added to the "
"current project. In addition, unlike when using the web frontend, the search "
"results are updated in real-time (you do not have to press Search after "
"every change to your search query for the changes to take place)."
msgstr ""

#: ../../docs/tutorials/assetlib/using_assetlib.rst:134
msgid ""
"In the future, you will be able to choose a different AssetLib provider to "
"fetch assets from (using the Site dropdown menu), however currently only the "
"official `Godot website <https://godotengine.org>`_ version of the AssetLib "
"is supported, as well as the version that may be running on your local "
"machine's web server (the localhost option)."
msgstr ""

#: ../../docs/tutorials/assetlib/using_assetlib.rst:140
msgid "When you click on an asset, you will see more information about it."
msgstr ""

#: ../../docs/tutorials/assetlib/using_assetlib.rst:142
msgid "|image9|"
msgstr "|image9|"

#: ../../docs/tutorials/assetlib/using_assetlib.rst:144
msgid ""
"If you click on the Install button, Godot will fetch an archive of the "
"asset, and will track download progress of it at the bottom of the editor "
"window. If the download fails, you can retry it using the Retry button."
msgstr ""

#: ../../docs/tutorials/assetlib/using_assetlib.rst:148
msgid "|image10|"
msgstr "|image10|"

#: ../../docs/tutorials/assetlib/using_assetlib.rst:150
msgid ""
"When it finishes, you can proceed to install it using the Install button. "
"This will bring up the Package Installer window."
msgstr ""

#: ../../docs/tutorials/assetlib/using_assetlib.rst:153
msgid "|image11|"
msgstr "|image11|"

#: ../../docs/tutorials/assetlib/using_assetlib.rst:155
msgid ""
"Here you can see a list of all the files that will be installed. You can "
"tick off any of the files that you do not wish to install, and Godot will "
"also inform you about any problems with files that it cannot install. These "
"files will be shown in red, and hovering over them will show you a message "
"stating why it cannot be installed."
msgstr ""

#: ../../docs/tutorials/assetlib/using_assetlib.rst:161
msgid "|image12|"
msgstr "|image12|"

#: ../../docs/tutorials/assetlib/using_assetlib.rst:163
msgid ""
"Once you are done, you can press the Install button, which will unzip all "
"the files in the archive, and import any assets contained therein, such as "
"images or 3D models. Once this is done, you should see a message stating "
"that the Package installation is complete."
msgstr ""

#: ../../docs/tutorials/assetlib/using_assetlib.rst:168
msgid "|image13|"
msgstr "|image13|"

#: ../../docs/tutorials/assetlib/using_assetlib.rst:170
msgid ""
"You may also use the Import button to import asset archives obtained "
"elsewhere (such as downloading them directly from the AssetLib web "
"frontend), which will take you through the same package installation "
"procedure as with the assets downloaded directly via Godot that we just "
"covered."
msgstr ""

#: ../../docs/tutorials/assetlib/uploading_to_assetlib.rst:4
msgid "Submitting to the Asset Library"
msgstr ""

#: ../../docs/tutorials/assetlib/uploading_to_assetlib.rst:9
msgid ""
"This tutorial aims to serve as a guide on how you can submit your own assets "
"to the Godot Asset Library and share them with the Godot community."
msgstr ""

#: ../../docs/tutorials/assetlib/uploading_to_assetlib.rst:12
msgid ""
"As mentioned in the :ref:`doc_using_assetlib` document, in order to be able "
"to submit assets to the AssetLib, you need to have a registered account, and "
"be logged in."
msgstr ""

#: ../../docs/tutorials/assetlib/uploading_to_assetlib.rst:17
msgid "Submission guidelines"
msgstr ""

#: ../../docs/tutorials/assetlib/uploading_to_assetlib.rst:19
msgid ""
"Before submitting your asset, please ensure it follows all of the "
"requirements, and also consider following the recommendations."
msgstr ""

#: ../../docs/tutorials/assetlib/uploading_to_assetlib.rst:25
msgid ""
"Generally speaking, most assets people submit to the asset library are "
"accepted. However, in order for your asset to be accepted, there are a few "
"requirements your asset needs to meet to be approved."
msgstr ""

#: ../../docs/tutorials/assetlib/uploading_to_assetlib.rst:29
msgid ""
"The asset must work. If the asset doesn't run or otherwise doesn't work in "
"the specified Godot version, then it will be rejected."
msgstr ""

#: ../../docs/tutorials/assetlib/uploading_to_assetlib.rst:32
msgid ""
"No submodules, or any submodules must be non-essential. GitHub does not "
"include submodules in the downloaded ZIP file, so if the asset needs the "
"contents of the submodule, your asset won't work."
msgstr ""

#: ../../docs/tutorials/assetlib/uploading_to_assetlib.rst:36
msgid ""
"The license needs to be correct. The license listed on the asset library "
"must match the license in the repository."
msgstr ""

#: ../../docs/tutorials/assetlib/uploading_to_assetlib.rst:39
msgid ""
"Do not set the download commit to \"master\". The asset library validates "
"all assets with a SHA256 hash, so the version hosted on GitHub needs to be "
"*exactly* the same. Instead of \"master\", either specify a commit hash, or "
"tag versions and specify a version number."
msgstr ""

#: ../../docs/tutorials/assetlib/uploading_to_assetlib.rst:44
msgid ""
"Use proper English for the name and description of your asset. This includes "
"using correct capitalization, and using full sentences in the description."
msgstr ""

#: ../../docs/tutorials/assetlib/uploading_to_assetlib.rst:48
msgid ""
"The icon link must be a direct link. For icons hosted on GitHub, the link "
"must start with \"raw.githubusercontent.com\", not \"github.com\"."
msgstr ""

#: ../../docs/tutorials/assetlib/uploading_to_assetlib.rst:52
#, fuzzy
msgid "Recommendations"
msgstr "기타 고려 사항"

#: ../../docs/tutorials/assetlib/uploading_to_assetlib.rst:54
msgid ""
"These things are not required for your asset to be approved, but if you "
"follow these recommendations, you can help make the asset library a better "
"place for all users."
msgstr ""

#: ../../docs/tutorials/assetlib/uploading_to_assetlib.rst:58
msgid ""
"Fix or suppress all script warnings. The warning system is there to help "
"identify issues with your code, but people using your asset don't need to "
"see them."
msgstr ""

#: ../../docs/tutorials/assetlib/uploading_to_assetlib.rst:62
msgid ""
"Make your code conform to the official style guides. Having a consistent "
"style helps other people read your code, and it also helps if other people "
"wish to contribute to your asset. See: the :ref:`doc_gdscript_styleguide` or "
"the :ref:`doc_c_sharp_styleguide`."
msgstr ""

#: ../../docs/tutorials/assetlib/uploading_to_assetlib.rst:67
msgid ""
"If your asset is a library for working with other files, consider including "
"example files in the asset."
msgstr ""

#: ../../docs/tutorials/assetlib/uploading_to_assetlib.rst:70
msgid ""
"The icon should be a square, its aspect ratio should be 1:1. It should also "
"ideally have a minimum resolution of 64x64 pixels."
msgstr ""

#: ../../docs/tutorials/assetlib/uploading_to_assetlib.rst:73
msgid ""
"While the asset library allows more than just GitHub, consider hosting your "
"asset's source code on GitHub. Other services may not work reliably, and a "
"lack of familiarity can be a barrier to contributors."
msgstr ""

#: ../../docs/tutorials/assetlib/uploading_to_assetlib.rst:78
msgid "Submitting"
msgstr ""

#: ../../docs/tutorials/assetlib/uploading_to_assetlib.rst:80
msgid ""
"Once you are logged in, you will be able to head over to the \"Submit Assets"
"\" page of the AssetLib, which will look like this:"
msgstr ""

#: ../../docs/tutorials/assetlib/uploading_to_assetlib.rst:85
msgid ""
"While it may look like a lot (and there is more as you scroll down), each "
"field is described in terms of what you should put in. We will nonetheless "
"go over what is required in the submission form here as well."
msgstr ""

#: ../../docs/tutorials/assetlib/uploading_to_assetlib.rst:90
msgid "**Asset Name**:"
msgstr ""

#: ../../docs/tutorials/assetlib/uploading_to_assetlib.rst:90
msgid ""
"The name of your asset. Should be a unique, descriptive title of what your "
"asset is."
msgstr ""

#: ../../docs/tutorials/assetlib/uploading_to_assetlib.rst:96
msgid "**Category**:"
msgstr ""

#: ../../docs/tutorials/assetlib/uploading_to_assetlib.rst:93
msgid ""
"The category that your asset belongs to, and will be shown in search "
"results. The category is split into **Addons** and **Projects**. In-editor, "
"assets of the Project type (Templates, Demos, Projects) only show up when "
"viewing the AssetLib from the Project Manager, while assets of the Addon "
"type will only be visible from inside a project."
msgstr ""

#: ../../docs/tutorials/assetlib/uploading_to_assetlib.rst:102
msgid "**Godot version**:"
msgstr ""

#: ../../docs/tutorials/assetlib/uploading_to_assetlib.rst:99
msgid ""
"The version of the engine that the asset works with. Currently, it's not "
"possible to have a single asset entry contain downloads for multiple engine "
"versions, so you may need to re-submit the asset multiple times, with an "
"entry for each Godot version it supports. This is particularly important "
"when dealing with major versions of the engine, such as Godot 2.x and Godot "
"3.x."
msgstr ""

#: ../../docs/tutorials/assetlib/uploading_to_assetlib.rst:109
msgid "**Version**:"
msgstr ""

#: ../../docs/tutorials/assetlib/uploading_to_assetlib.rst:105
msgid ""
"The version number of the asset. While you are free to choose and use any "
"versioning scheme that you like, you may want to look into something such as "
"`SemVer <https://semver.org>`_ if you want your asset's versioning scheme to "
"be clear and consistent. Note that there is also an internal version number, "
"incremented every time the asset download URL is changed or updated."
msgstr ""

#: ../../docs/tutorials/assetlib/uploading_to_assetlib.rst:114
msgid "**Repository host**:"
msgstr ""

#: ../../docs/tutorials/assetlib/uploading_to_assetlib.rst:112
msgid ""
"Assets uploaded to the AssetLib are not hosted on it directly. Instead, they "
"point to repositories hosted on third-party Git providers, such as GitHub, "
"GitLab or Bitbucket. This is where you choose which provider your asset "
"uses, so the site can compute the final download link."
msgstr ""

#: ../../docs/tutorials/assetlib/uploading_to_assetlib.rst:117
msgid "**Repository URL**:"
msgstr ""

#: ../../docs/tutorials/assetlib/uploading_to_assetlib.rst:117
msgid ""
"The URL to your asset's files/webpage. This will vary based on your choice "
"of provider, but it should look similar to `https://github.com/<user>/"
"<project>`."
msgstr ""

#: ../../docs/tutorials/assetlib/uploading_to_assetlib.rst:122
msgid "**Issues URL**:"
msgstr ""

#: ../../docs/tutorials/assetlib/uploading_to_assetlib.rst:120
msgid ""
"The URL to your asset's issue tracker. Again, this will differ from "
"repository host to repository host, but will likely look similar to `https://"
"github.com/<user>/<project>/issues`. You may leave this field empty if you "
"use your provider's issue tracker, and it's part of the same repository."
msgstr ""

#: ../../docs/tutorials/assetlib/uploading_to_assetlib.rst:126
msgid "**Download Commit/Tag**:"
msgstr ""

#: ../../docs/tutorials/assetlib/uploading_to_assetlib.rst:125
msgid ""
"The commit or tag of the asset. For example, "
"`b1d3172f89b86e52465a74f63a74ac84c491d3e1` or `v1.0`. The site computes the "
"actual download URL from this."
msgstr ""

#: ../../docs/tutorials/assetlib/uploading_to_assetlib.rst:130
msgid "**Icon URL**:"
msgstr ""

#: ../../docs/tutorials/assetlib/uploading_to_assetlib.rst:129
msgid ""
"The URL to your asset's icon (which will be used as a thumbnail in the "
"AssetLib search results and on the asset's page). Should be an image in "
"either the PNG or JPG format."
msgstr ""

#: ../../docs/tutorials/assetlib/uploading_to_assetlib.rst:135
msgid "**License**:"
msgstr ""

#: ../../docs/tutorials/assetlib/uploading_to_assetlib.rst:133
msgid ""
"The license under which you are distributing the asset. The list includes a "
"variety of free and open-source software licenses, such as GPL (v2 and v3), "
"MIT, BSD and Boost Software License. You can visit `OpenSource.org <https://"
"opensource.org>`_ for a detailed description of each of the listed licenses."
msgstr ""

#: ../../docs/tutorials/assetlib/uploading_to_assetlib.rst:141
msgid "**Description**:"
msgstr ""

#: ../../docs/tutorials/assetlib/uploading_to_assetlib.rst:138
msgid ""
"Finally, you can use the Description field for a textual overview of your "
"asset, its features and behavior, a changelog, et cetera. In the future, "
"formatting with Markdown will be supported, but currently, your only option "
"is plain text."
msgstr ""

#: ../../docs/tutorials/assetlib/uploading_to_assetlib.rst:143
msgid ""
"You may also include up to three video and/or image previews, which will be "
"shown at the bottom of the asset page. Use the \"Enable\" checkbox on each "
"of the preview submission boxes to enable them."
msgstr ""

#: ../../docs/tutorials/assetlib/uploading_to_assetlib.rst:147
msgid "**Type**:"
msgstr ""

#: ../../docs/tutorials/assetlib/uploading_to_assetlib.rst:148
msgid "Either an image, or a video."
msgstr ""

#: ../../docs/tutorials/assetlib/uploading_to_assetlib.rst:149
msgid "**Image/YouTube URL**:"
msgstr ""

#: ../../docs/tutorials/assetlib/uploading_to_assetlib.rst:150
msgid "Either a link to the image, or to a video, hosted on YouTube."
msgstr ""

#: ../../docs/tutorials/assetlib/uploading_to_assetlib.rst:154
msgid "**Thumbnail URL**:"
msgstr ""

#: ../../docs/tutorials/assetlib/uploading_to_assetlib.rst:152
msgid ""
"A URL to an image that will be used as a thumbnail for the preview. This "
"option will be removed eventually, and thumbnails will be automatically "
"computed instead."
msgstr ""

#: ../../docs/tutorials/assetlib/uploading_to_assetlib.rst:156
msgid ""
"Once you are done, hit Submit. Your asset will be entered into the pending "
"queue, which you can visit on the AssetLib `here <https://godotengine.org/"
"asset-library/asset/edit?&asset=-1>`_ . The approval process is manual and "
"may take up to a few days for your addon to be accepted (or rejected), so "
"please be patient! You will be informed when your asset is reviewed. If it "
"was rejected, you will be told why that may have been, and you will be able "
"to submit it again with the appropriate changes. You may have some luck "
"accelerating the approval process by messaging the moderators/assetlib "
"reviewers on IRC (the #godotengine-atelier channel on Freenode), or the "
"official Discord server."
msgstr ""

#: ../../docs/tutorials/vr/vr_primer.rst:4
msgid "AR/VR primer"
msgstr "AR/VR 입문서"

#: ../../docs/tutorials/vr/vr_primer.rst:6
msgid ""
"This tutorial gives you a springboard into the world of AR and VR in the "
"Godot game engine."
msgstr ""
"이 튜토리얼은 Godot 게임 엔진에서 AR과 VR의 세계로 가도록 도와주는 발판이 될 "
"것입니다."

#: ../../docs/tutorials/vr/vr_primer.rst:8
msgid ""
"A new architecture was introduced in Godot 3 called the AR/VR Server. On top "
"of this architecture, specific implementations are available as interfaces, "
"most of which are plugins based on GDNative. This tutorial focuses purely on "
"the core elements abstracted by the core architecture. This architecture has "
"enough features for you to create an entire VR experience that can then be "
"deployed for various interfaces. However, each platform often has some "
"unique features that are impossible to abstract. Such features will be "
"documented on the relevant interfaces and fall outside of the scope of this "
"primer."
msgstr ""
"Godot 3부터 AR/VR Server라고 하는 새로운 아키텍처가 도입됬습니다. 이 아키텍처"
"를 기반으로 하여, 특정 구현을 인터페이스로 이용할 수 있게 되었습니다. 대부분"
"은 GDNative로 만들어진 플러그인입니다. 이 튜토리얼은 순수히 핵심 아키텍처에 "
"의해 추상화된 핵심 요소에 초점을 둘 것입니다. 이 아키텍처는 다양한 인터페이스"
"로 배포되면서 모든 VR 경험을 만들기에 충분한 기능을 갖고 있습니다. 하지만 각 "
"플랫폼은 추상화하기에 불가능한 독특한 기능을 갖고 있습니다. 그런 기능은 입문"
"서의 영역을 벗어나는 것이므로 관련 인터페이스에서 서술하겠습니다."

#: ../../docs/tutorials/vr/vr_primer.rst:12
msgid "AR/VR server"
msgstr "AR/VR 서버"

#: ../../docs/tutorials/vr/vr_primer.rst:14
msgid ""
"When Godot starts, each available interface will make itself known to the AR/"
"VR server. GDNative interfaces are setup as singletons; as long as they are "
"added to the list of GDNative singletons in your project, they will make "
"themselves known to the server."
msgstr ""
"Godot를 실행하면, 사용 가능한 각 인터페이스는 AR/VR 서버에 알려집니다. "
"GDNative 인터페이스는 싱글톤으로 설정됩니다; 인터페이스가 프로젝트의 "
"GDNative 싱글톤 목록에 추가되는 만큼, 서버로 알려질 것입니다."

#: ../../docs/tutorials/vr/vr_primer.rst:16
msgid ""
"You can use the function :ref:`get_interfaces() "
"<class_ARVRServer_method_get_interfaces>` to return a list of available "
"interfaces, but for this tutorial, we're going to use the :ref:`native "
"mobile VR interface <class_MobileVRInterface>` in our examples. This "
"interface is a straightforward implementation that uses the 3DOF sensors on "
"your phone for orientation and outputs a stereoscopic image to the screen. "
"It is also available in the Godot core and outputs to screen on desktop, "
"which makes it ideal for prototyping or a tutorial such as this one."
msgstr ""
"이용 가능한 인터페이스 목록을 반환하기 위해선 함수 :ref:`get_interfaces() "
"<class_ARVRServer_method_get_interfaces>`\\ 를 사용할 수 있습니다, 하지만 이 "
"튜토리얼에서, 예제를 위해 :ref:`네이티브 모바일 VR 인터페이스 "
"<class_MobileVRInterface>`\\ 를 사용하겠습니다. 이 인터페이스는 폰에서 3DOF"
"를 사용해 입체 이미지를 화면에 출력하도록 하는 간단한 구현입니다. 또한 Godot "
"코어로 데스크톱에서 화면을 출력할 수 있으므로, 프로토타입을 만들거나 이것과 "
"같은 튜토리얼을 하기에 이상적입니다."

#: ../../docs/tutorials/vr/vr_primer.rst:18
msgid "To enable an interface, you execute the following code:"
msgstr "인터페이스를 활성화하기 위해, 다음 코드를 실행합니다:"

#: ../../docs/tutorials/vr/vr_primer.rst:35
msgid ""
"This code finds the interface we wish to use, initializes it and, if that is "
"successful, binds the main viewport to the interface. This last step gives "
"some control over the viewport to the interface, which automatically enables "
"things like stereoscopic rendering on the viewport."
msgstr ""
"이 코드는 우리가 사용하고자 하는 인터페이스를 찾아 초기화합니다, 그리고 완료"
"되면 메인 뷰포트를 인터페이스에 제한합니다. 마지막 단계에서는 뷰포트에서 인터"
"페이스를 제어하여 뷰포트에 입체 렌더링과 같은 것을 자동으로 활성화하도록 할 "
"것입니다."

#: ../../docs/tutorials/vr/vr_primer.rst:37
#, fuzzy
msgid ""
"For our mobile VR interface, and any interface where the main input is "
"directly displayed on screen, the main viewport needs to be the viewport "
"where :ref:`arvr<class_Viewport_property_arvr>` is set to ``true``. But for "
"interfaces that render on an externally attached device, you can use a "
"secondary viewport. In the latter case, a viewport that shows its output on "
"screen will show an undistorted version of the left eye, while showing the "
"fully processed stereoscopic output on the device."
msgstr ""
"모바일 VR 인터페이스나, 화면에 주요 입력이 보여지는 인터페이스의 경우, 메인 "
"뷰포트는 arvr이 true로 설정되어 있어야 합니다. 하지만 외부에 부착된 기기에 렌"
"더링을 하는 인터페이스에는, 보조 뷰포트를 사용할 수 있습니다. 후자의 경우, 기"
"기에서 완전히 처리된 입체 영상을 출력하지만, 화면에 표시하는 뷰포트는 왜곡되"
"지 않은 왼쪽 눈 장면을 보여줄 것입니다."

#: ../../docs/tutorials/vr/vr_primer.rst:39
#, fuzzy
msgid ""
"Finally, you should only initialize an interface once; switching scenes and "
"reinitializing interfaces will just introduce a lot of overhead. If you want "
"to turn the headset off temporarily, just disable the viewport or set :ref:"
"`arvr<class_Viewport_property_arvr>` to ``false`` on the viewport. In most "
"scenarios though, you wouldn't disable the headset once you're in VR, this "
"can be disconcerting to the gamer."
msgstr ""
"마지막으로, 인터페이스를 한번만 초기화해야 합니다; 씬을 바꾸고 인터페이스를 "
"다시 초기화하면 많은 부담이 발생합니다. 헤드셋을 일시적으로 끄려면, 뷰포트를 "
"비활성화하거나 뷰포트에서 arvr을 false로 설정하세요. 하지만 대부분의 상황에서"
"는, VR에서는 헤드셋을 비활성화하진 않을 것입니다, 게이머로 하여금 당황할테니"
"까요."

#: ../../docs/tutorials/vr/vr_primer.rst:42
msgid "New AR/VR nodes"
msgstr "새로운 AR/VR 노드"

#: ../../docs/tutorials/vr/vr_primer.rst:44
msgid ""
"Three new node types have been added for supporting AR and VR in Godot and "
"one additional node type especially for AR. These are:"
msgstr ""
"Godot에서 AR과 VR을 지원하기 위해 세가지 새로운 노드 타입이 추가되었고 AR만"
"을 위한 추가적인 노드 타입 한 가지가 추가되었습니다. 다음과 같습니다:"

#: ../../docs/tutorials/vr/vr_primer.rst:46
msgid ":ref:`ARVROrigin <class_ARVROrigin>` - our origin point in the world"
msgstr ":ref:`ARVROrigin <class_ARVROrigin>` - 월드에서 원점"

#: ../../docs/tutorials/vr/vr_primer.rst:47
msgid ""
":ref:`ARVRCamera <class_ARVRCamera>` - a special subclass of the camera, "
"which is positionally tracked"
msgstr ""
":ref:`ARVRCamera <class_ARVRCamera>` - 위치 추적이 가능한 카메라의 특수 하위 "
"클래스"

#: ../../docs/tutorials/vr/vr_primer.rst:48
msgid ""
":ref:`ARVRController <class_ARVRController>` - a new spatial class, which "
"tracks the location of a controller"
msgstr ""
":ref:`ARVRController <class_ARVRController>` - 컨트롤러의 위치를 추적하는 새"
"로운 Spatial 클래스"

#: ../../docs/tutorials/vr/vr_primer.rst:49
msgid ""
":ref:`ARVRAnchor <class_ARVRAnchor>` - an anchor point for an AR "
"implementation mapping a real world location into your virtual world"
msgstr ""
":ref:`ARVRAnchor <class_ARVRAnchor>` - 실제 세상 위치를 가상 세계에 매핑하는 "
"AR 구현을 위한 기준점"

#: ../../docs/tutorials/vr/vr_primer.rst:51
msgid ""
"The first two must exist in your scene for AR/VR to work and this tutorial "
"focuses purely on them."
msgstr ""
"AR/VR을 위해선 앞의 두 개가 씬에 있어야 하고 이 튜토리얼 역시 이 둘에 초점을 "
"두고 있습니다."

#: ../../docs/tutorials/vr/vr_primer.rst:53
msgid ""
":ref:`ARVROrigin <class_ARVROrigin>` is an important node, you must have one "
"and only one of these somewhere in your scene. This node maps the center of "
"your real world tracking space to a location in your virtual world. "
"Everything else is positionally tracked in relation to this point. Where "
"this point lies exactly differs from one implementation to another, but the "
"best example to understand how this node works is to take a look at a room "
"scale location. While we have functions to adjust the point to center it on "
"the player by default, the origin point will be the center location of the "
"room you are in. As you physically walk around the room, the location of the "
"HMD is tracked in relation to this center position and the tracking is "
"mirror in the virtual world."
msgstr ""
":ref:`ARVROrigin <class_ARVROrigin>`\\ 은 중요한 노드로, 씬 어딘가에 반드시 "
"있어야 합니다. 이 노드는 실제 세상의 중심을 가상 세상의 한 위치에 매핑합니"
"다. 다른 모든 것들은 이 점으로 위치를 추적합니다. 이 점이 하나의 구현에서 다"
"른 구현으로는 다르지만, 이 노드가 작동하는 방식을 이해하기 위한 최선의 예는 "
"방 규모 장소를 살펴보는 것입니다. 기본적으로 플레이어를 중심으로 점이 조정되"
"지만, 원점은 당신이 있는 방의 중심에 있게 됩니다. 물리적으로 방을 돌어다니면 "
"HMD의 위치는 중심점에 따라 추적하고 이는 가상 세계에 반영됩니다."

#: ../../docs/tutorials/vr/vr_primer.rst:55
msgid ""
"To keep things simple, when you physically move around your room, the ARVR "
"Origin point stays where it is, the position of the camera and controllers "
"will be adjusted according to your movements. When you move through the "
"virtual world, either through controller input or when you implement a "
"teleport system, it is the position of the origin point which you will have "
"to adjust."
msgstr ""
"간단한 예로 물리적으로 방을 돌아다닐 때, ARVR 원점은 한 자리에 있고, 카메라"
"와 컨트롤러의 위치는 움직임에 따라 조정되는 것입니다. 가상 세상을 통해 움직이"
"거나 컨트롤러 조작을 통한 순간이동을 구현할 때, 그 위치에 원점을 조정해야할 "
"것입니다."

#: ../../docs/tutorials/vr/vr_primer.rst:58
msgid ""
":ref:`ARVRCamera <class_ARVRCamera>` is the second node that must always be "
"a part of your scene and it must always be a child node of your origin node. "
"It is a subclass of Godot's normal camera. However, its position is "
"automatically updated each frame based on the physical orientation and "
"position of the HMD. Also due to the precision required for rendering to an "
"HMD or rendering an AR overlay over a real world camera, most of the "
"standard camera properties are ignored. The only properties of the camera "
"that are used are the near and far plane settings. The FOV, aspect ratio and "
"projection mode are all ignored."
msgstr ""
":ref:`ARVRCamera <class_ARVRCamera>`\\ 는 씬에 반드시 있어야 되는 두 번째 노"
"드로, 항상 Origin 노드의 자식으로 있어야 합니다. Godot의 표준 카메라의 하위 "
"클래스입니다. 하지만, 위치는 매 프레임마다 HMD의 위치와 물리적 방위에 따라 자"
"동으로 업데이트됩니다. 그리고 HMD나 실제 카메라를 통한 AR 오버레이를 렌더링하"
"기 위한 정밀도 때문에, 대부분의 표준 카메라 속성은 무시됩니다. 사용되는 카메"
"라의 유일한 속성은 근거리 및 원거리 평면 설정입니다. FOV, 종횡비 그리고 투영 "
"모드 모두 무시됩니다."

#: ../../docs/tutorials/vr/vr_primer.rst:60
msgid ""
"Note that, for our native mobile VR implementation, there is no positional "
"tracking, only the orientation of the phone and by extension, the HMD is "
"tracked. This implementation artificially places the camera at a height (Y) "
"of 1.85."
msgstr ""
"주의하세요, 우리 고유의 모바일 VR 구현을 위해, 위치 추적 없이 스마트폰의 방위"
"만 확장되어, HMD를 추적합니다. 이 구현에서 인위적으로 카메라를 1.85의 높이 "
"(Y)에 둡니다."

#: ../../docs/tutorials/vr/vr_primer.rst:62
msgid ""
"Conclusion: your minimum setup in your scene to make AR or VR work should "
"look like this:"
msgstr "결론: 씬에서 AR이나 VR 작업을 위한 최소 설정은 다음과 같아야 합니다:"

#: ../../docs/tutorials/vr/vr_primer.rst:66
msgid ""
"And that's all you need to get started. Obviously, you need to add something "
"more into your scene, so there is something to see, but after that, you can "
"export the game to your phone of choice, pop it into a viewer and away you "
"go."
msgstr ""
"그리고 여기까지가 시작하는데 필요한 것입니다. 분명히, 씬에 무언가를 추가해야"
"할 것입니다, 그래야 볼거리가 있으니까요, 하지만 그 후, 게임을 선택한 폰에 내"
"보내고 뷰어에 나타나게 하거나 멀어지게 할 수 있습니다."

#: ../../docs/tutorials/vr/vr_primer.rst:69
msgid "Other things to consider"
msgstr "고려해야 할 다른 사항"

#: ../../docs/tutorials/vr/vr_primer.rst:71
msgid ""
"There are a few other subjects that we need to briefly touch upon in this "
"primer that are important to know."
msgstr ""
"이 입문서도 알아두면 좋지만, 이를 넘어 간략하게 볼 몇 가지 사항이 있습니다."

#: ../../docs/tutorials/vr/vr_primer.rst:73
msgid ""
"The first are our units. In normal 3D games, you don't have to think a lot "
"about units. As long as everything is at the same scale, a box sized 1 unit "
"by 1 unit by 1 unit can be any size from a cube you can hold in your hand to "
"something the size of a building. In AR and VR, this changes because things "
"in your virtual world are mapped to things in the real world. If you step 1 "
"meter forward in the real world, but you only move 1 cm forward in your "
"virtual world, you have a problem. The same with the position of your "
"controllers; if they don't appear in the right relative space, it breaks the "
"immersion for the player. Most VR platforms, including our AR/VR Server, "
"assume that 1 unit = 1 meter. The AR/VR server, however, has a property "
"that, for convenience, is also exposed on the ARVROrigin node called world "
"scale. For instance, setting this to a value of 10 changes our coordinate "
"system so 10 units = 1 meter."
msgstr ""
"첫 째는 단위입니다. 보통의 3D 게임에서, 단위에 대해 많이 생각할 필요는 없습니"
"다. 모든 것들이 같은 크기에 있는 한, 손에 잡는 상자부터 빌딩 크기의 것이든 어"
"떤 상자도 1:1:1 단위의 상자가 될 수 있습니다. AR과 VR에서는, 현실 세상에서 가"
"상 세상이 맞춰지기 때문에 이러한 사고는 바뀝니다. 실제 세상에서 1미터 앞으로 "
"걷는데, 가상 세상에서 1cm만 앞으로 걷는다면 문제가 일어납니다. 컨트롤러의 위"
"치도 마찬가지입니다; 맞는 해당 위치에 컨트롤러가 나타나지 않는다면, 플레이어"
"의 몰입감을 망가뜨릴 것입니다. 우리의 AR/VR 서버를 포함한 대부분의 VR 플랫폼"
"은 1 단위 = 1미터로 잡습니다. 하지만 AR/VR 서버는 편의를 위한 속성을 갖고 있"
"는데, 이는 ARVROrigin 노드에서 world scale이란 이름으로 나타나 있습니다. 예"
"를 들어, 속성 값을 10으로 설정하면 시스템은 10 단위 = 1미터로 인지합니다."

#: ../../docs/tutorials/vr/vr_primer.rst:77
msgid ""
"Performance is another thing that needs to be carefully considered. "
"Especially VR taxes your game a lot more than most people realise. For "
"mobile VR, you have to be extra careful here, but even for desktop games, "
"there are three factors that make life extra difficult:"
msgstr ""
"퍼포먼스는 신중하게 고려해야 할 또다른 사항입니다. 특히 VR은 대부분의 사람들"
"의 생각보다 게임에 많은 자원을 잡아 먹습니다. 모바일 VR의 경우, 더욱 주의해야"
"합니다, 하지만 데스크톱 게임이라도, 세 가지 요인이 작업을 더욱 어렵게 합니다:"

#: ../../docs/tutorials/vr/vr_primer.rst:79
msgid ""
"You are rendering stereoscopic, two for the price of one. While not exactly "
"doubling the work load and with things in the pipeline such as supporting "
"the new MultiView OpenGL extension in mind, there still is an extra workload "
"in rendering images for both eyes"
msgstr ""
"스테레오스코픽을 렌더링합니다, 하나 짜리를 두 개로 렌더링 하는 거죠. 새로운 "
"MultiView OpenGL 확장을 지원하는 것을 염두에 두기에, 작업 부하를 두 배로 늘리"
"거나 파이프라인에있는 작업을 두 배로 늘리지는 않더라도, 두 눈을 위한 렌더링 "
"이미지로 추가 작업 부하가 있습니다"

#: ../../docs/tutorials/vr/vr_primer.rst:80
msgid ""
"A normal game will run acceptably on 30fps and ideally manages 60fps. That "
"gives you a big range to play with between lower end and higher end "
"hardware. For any HMD application of AR or VR, however, 60fps is the "
"absolute minimum and you should target your games to run at a stable 90fps "
"to ensure your users don't get motion sickness right off the bat."
msgstr ""
"일반 게임은 30fps에서 정상적으로 실행되며 이상적으로는 60fps로 관리합니다. 이"
"는 저사양과 고사양 하드웨어를 사이에서 플레이하는데 큰 격차를 줄 수 있습니"
"다. 하지만 AR이나 VR의 HMD 애플리케이션은, 60fps가 절대적인 최솟값이므로 반드"
"시 게임이 안정적인 90fps로 실행되어 사용자가 즉시 멀미를 느끼지 않도록 해야 "
"합니다."

#: ../../docs/tutorials/vr/vr_primer.rst:81
msgid ""
"The high FOV and related lens distortion effect require many VR experiences "
"to render at double the resolution. Yes a VIVE may only have a resolution of "
"1080x1200 per eye, we're rendering each eye at 2160x2400 as a result. This "
"is less of an issue for most AR applications."
msgstr ""
"높은 FOV와 관련 렌즈 왜곡 효과는 화질을 두 배로 렌더하기 위해 많은 VR 경험이 "
"필요합니다. 네 VIVE는 각 눈마다 1080x1200의 화질을 갖고 있지만, 우리는 각 눈"
"에 2160x2400의 결과로 렌더링합니다. 이는 대부분의 AR 애플리케이션에서 문제가 "
"되지 않습니다."

#: ../../docs/tutorials/vr/vr_primer.rst:83
msgid ""
"All in all, the workload your GPU has in comparison with a normal 3D game is "
"a fair amount higher. While things are in the pipeline to improve this, such "
"as MultiView and foveated rendering, these aren't supported on all devices. "
"This is why you see many VR games using a more art style and if you pay "
"close attention to those VR games that go for realism, you'll probably "
"notice they're a bit more conservative on the effects or use some good old "
"optical trickery."
msgstr ""
"전체적으로, 일반 3D 게임과 비교하여 GPU의 작업량은 상당히 높습니다. 작업이 파"
"이프라인에 있는 동안, MultiView와 foveated 렌더링과 같은 것을 개선하기 위해, "
"이들은 모든 장치에서 지원하잔 않습니다. 이런 이유로 더 많은 아트 스타일을 사"
"용하는 많은 VR 게임을 보게되며, 현실감을 추구하는 VR 게임에 깊게 보다보면, 아"
"마 효과에 대해 조금 더 전통적이거나 좋은 오래된 눈속임을 사용한다는 것을 알 "
"수 있습니다."

#: ../../docs/tutorials/vr/vr_starter_tutorial/index.rst:2
#, fuzzy
msgid "VR starter tutorial"
msgstr "VR 초심자 튜토리얼"

#: ../../docs/tutorials/vr/vr_starter_tutorial/vr_starter_tutorial_part_one.rst:4
#, fuzzy
msgid "VR starter tutorial part 1"
msgstr "VR 초심자 튜토리얼"

#: ../../docs/tutorials/vr/vr_starter_tutorial/vr_starter_tutorial_part_one.rst:11
msgid ""
"This tutorial will show you how to make a beginner VR game project in Godot."
msgstr ""
"이 튜토리얼에서는 어떻게 Godot에서 초보자 VR 게임 프로젝트를 만드는 지를 보여"
"줍니다."

#: ../../docs/tutorials/vr/vr_starter_tutorial/vr_starter_tutorial_part_one.rst:13
msgid ""
"Keep in mind, **one of the most important things when making VR content is "
"getting the scale of your assets correct**! It can take lots of practice and "
"iterations to get this right, but there are a few things you can do to make "
"it easier:"
msgstr ""
"주의하세요, **VR 콘텐츠를 만들 때 가장 중요한 것은 애셋의 크기를 올바르게 하"
"는 것입니다**! 이 권리를 얻으려면 많은 연습과 반복이 필요합니다, 하지만 이를 "
"더 쉽게 할 수 있는 몇 가지가 있습니다:"

#: ../../docs/tutorials/vr/vr_starter_tutorial/vr_starter_tutorial_part_one.rst:16
msgid ""
"In VR, 1 unit is typically considered 1 meter. If you design your assets "
"around that standard, you can save yourself a lot of headache."
msgstr ""
"VR에서, 1 단위는 일반적으로 1미터로 취급됩니다. 이 표준을 기준으로 애셋을 디"
"자인한다면, 스스로 머리를 쥐어짜는 걱정은 덜게됩니다."

#: ../../docs/tutorials/vr/vr_starter_tutorial/vr_starter_tutorial_part_one.rst:17
msgid ""
"In your 3D modeling program, see if there is a way to measure and use real "
"world distances. In Blender, you can use the MeasureIt add-on; in Maya, you "
"can use the Measure Tool."
msgstr ""
"3D 모델링 프로그램에서, 실제 거리를 측정하고 사용하는 방법이 있는지 알아보세"
"요. 블렌더에서는 MeasureIt 애드온을 사용할 수 있고; Maya에서는 Measure Tool"
"을 사용할 수 있습니다."

#: ../../docs/tutorials/vr/vr_starter_tutorial/vr_starter_tutorial_part_one.rst:18
msgid ""
"You can make rough models using a tool like `Google Blocks <https://vr."
"google.com/blocks/>`_, and then refine in another 3D modelling program."
msgstr ""
"`Google Blocks <https://vr.google.com/blocks/>`_\\ 과 같은 도구를 사용해 거"
"친 모델을 만들 수 있고, 다른 3D 모델링 프로그램에서 이를 수정할 수 있습니다."

#: ../../docs/tutorials/vr/vr_starter_tutorial/vr_starter_tutorial_part_one.rst:19
msgid ""
"Test often, as the assets can look dramatically different in VR than on a "
"flat screen!"
msgstr "평상시보다 VR에서 애셋이 크게 달라질 수 있으므로 자주 테스트하세요!"

#: ../../docs/tutorials/vr/vr_starter_tutorial/vr_starter_tutorial_part_one.rst:21
msgid "Throughout the course of this tutorial, we will cover:"
msgstr "이 튜토리얼에서 다음 내용을 다룹니다:"

#: ../../docs/tutorials/vr/vr_starter_tutorial/vr_starter_tutorial_part_one.rst:23
msgid "How to tell Godot to run in VR."
msgstr "Godot에서 VR을 실행시키는 법."

#: ../../docs/tutorials/vr/vr_starter_tutorial/vr_starter_tutorial_part_one.rst:24
#, fuzzy
msgid ""
"How to make a teleportation locomotion system that uses the VR controllers."
msgstr "플레이어를 움직이기 위한 텔레포트 시스템을 만드는 법."

#: ../../docs/tutorials/vr/vr_starter_tutorial/vr_starter_tutorial_part_one.rst:25
#, fuzzy
msgid ""
"How to make a artificial movement locomotion system that uses the VR "
"controllers."
msgstr "플레이어를 움직이기 위한 방향 이동 시스템 (운동력)을 만드는 법."

#: ../../docs/tutorials/vr/vr_starter_tutorial/vr_starter_tutorial_part_one.rst:26
#, fuzzy
msgid ""
"How to create a :ref:`RigidBody <class_RigidBody>`-based system that allows "
"for picking up, dropping, and throwing RigidBody nodes using the VR "
"controllers."
msgstr ""
":ref:`RigidBody <class_RigidBody>` 기반 잡고 던지기 시스템을 만드는 법."

#: ../../docs/tutorials/vr/vr_starter_tutorial/vr_starter_tutorial_part_one.rst:27
msgid "How to create simple destroyable target."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial/vr_starter_tutorial_part_one.rst:28
#, fuzzy
msgid ""
"How to create some special :ref:`RigidBody <class_RigidBody>`-based objects "
"that can destroy the targets."
msgstr ""
":ref:`RigidBody <class_RigidBody>` 기반 잡고 던지기 시스템을 만드는 법."

#: ../../docs/tutorials/vr/vr_starter_tutorial/vr_starter_tutorial_part_one.rst:30
#, fuzzy
msgid ""
"While this tutorial can be completed by beginners, it is highly advised to "
"complete :ref:`doc_your_first_game`, if you are new to Godot and/or game "
"development."
msgstr ""
"이 튜토리얼은 초심자도 마칠 수 있지만, Godot나/ 혹은 다른 게임 개발에 처음이"
"라면 :ref:`doc_your_first_game`\\ 를 마치는 것을 권장하며, 이 튜토리얼 시리즈"
"를 시작하기 **전에** 3D 게임을 만드는 경험을 갖는 것이 좋습니다."

#: ../../docs/tutorials/vr/vr_starter_tutorial/vr_starter_tutorial_part_one.rst:34
msgid ""
"**Some experience with making 3D games is required** before going through "
"this tutorial series. This tutorial assumes you have experience with the "
"Godot editor, GDScript, and basic 3D game development. A OpenVR-ready "
"headset and two OpenVR-ready controllers are required."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial/vr_starter_tutorial_part_one.rst:38
#, fuzzy
msgid ""
"This tutorial was written and tested using a Windows Mixed Reality headset "
"and controllers. This project has also been tested on the HTC Vive. Code "
"adjustments may be required for other VR Headsets, such as the Oculus Rift."
msgstr ""
"그리고, 당신이 OpenVR이 준비된 헤드셋과 두 개의 OpenVR이 준비된 컨트롤러가 있"
"다고 가정합니다! 이 튜토리얼은 Windows 10에서 Windows 혼합 현실 헤드셋을 사용"
"하여 작성되었기에, 이 헤드셋에서 작동하도록 작성되었습니다. HTC Vive에서도 테"
"스트를 할 수 있습니다. 오큘러스 리프트 같은 다른 VR 헤드셋에는 코드를 수정해"
"야 할 수도 있습니다."

#: ../../docs/tutorials/vr/vr_starter_tutorial/vr_starter_tutorial_part_one.rst:41
msgid ""
"The Godot project for this tutorial is found on the `OpenVR GitHub "
"repository <https://github.com/GodotVR/godot_openvr_fps>`_. The starter "
"assets for this tutorial can be found in the releases section on the GitHub "
"repository. The starter assets contain some 3D models, sounds, scripts, and "
"scenes that are configured for this tutorial."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial/vr_starter_tutorial_part_one.rst:44
msgid "**Credits for the assets provided**:"
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial/vr_starter_tutorial_part_one.rst:46
#, fuzzy
msgid ""
"The sky panorama was created by `CGTuts <https://cgi.tutsplus.com/articles/"
"freebie-8-awesome-ocean-hdris--cg-5684>`_."
msgstr ""
"하늘 파노라마는 **CGTuts**\\ 로 만들었습니다. (`원본 출처 <https://cgi."
"tutsplus.com/articles/freebie-8-awesome-ocean-hdris--cg-5684>`_)."

#: ../../docs/tutorials/vr/vr_starter_tutorial/vr_starter_tutorial_part_one.rst:48
msgid "The font used is Titillium-Regular"
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial/vr_starter_tutorial_part_one.rst:49
#, fuzzy
msgid "The font is licensed under the SIL Open Font License, Version 1.1"
msgstr ""
"글꼴은 **Titillium-Regular**\\ 를 사용했으며, SIL Open Font License, Version "
"1.1 라이센스 하에 사용할 수 있습니다."

#: ../../docs/tutorials/vr/vr_starter_tutorial/vr_starter_tutorial_part_one.rst:51
#, fuzzy
msgid ""
"The audio used are from several different sources, all downloaded from the "
"Sonniss #GameAudioGDC Bundle (`License PDF <https://sonniss.com/gdc-bundle-"
"license/>`_)"
msgstr ""
"소리는 여러 다른 출처에서 가져왔으며, 모두 **Sonnis #GameAudioGDC Bundle**\\ "
"에서 다운로드했습니다 (`PDF 형식으로 라이센스됨 <https://sonniss.com/gdc-"
"bundle-license/>`_). 소리 파일이 있는 폴더는 번들에 있는 폴더와 같은 이름으"
"로 되어 있습니다."

#: ../../docs/tutorials/vr/vr_starter_tutorial/vr_starter_tutorial_part_one.rst:52
msgid ""
"The folders where the audio files are stored have the same name as folders "
"in the Sonniss audio bundle."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial/vr_starter_tutorial_part_one.rst:54
msgid ""
"The OpenVR addon was created by `Bastiaan Olij <https://github.com/"
"BastiaanOlij>`_ and is released under the MIT license. It can be found both "
"on the `Godot Asset Library <https://godotengine.org/asset-library/"
"asset/150>`_ and on `GitHub <https://github.com/GodotVR/godot-openvr-"
"asset>`_. *3rd party code and libraries used in the OpenVR addon may be "
"under a different license.*"
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial/vr_starter_tutorial_part_one.rst:56
msgid ""
"The initial project, 3D models, and scripts were created by `TwistedTwigleg "
"<https://github.com/TwistedTwigleg>`_ and is released under the MIT license."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial/vr_starter_tutorial_part_one.rst:58
#: ../../docs/tutorials/vr/vr_starter_tutorial/vr_starter_tutorial_part_two.rst:16
#, fuzzy
msgid ""
"You can find the finished project on the `OpenVR GitHub repository <https://"
"github.com/GodotVR/godot_openvr_fps>`_."
msgstr ""
"`godot-cpp 저장소 <https://github.com/GodotNativeTools/godot-cpp>`_ 의 사본."

#: ../../docs/tutorials/vr/vr_starter_tutorial/vr_starter_tutorial_part_one.rst:64
msgid ""
"If you have not already, go to the `OpenVR GitHub repository <https://github."
"com/GodotVR/godot_openvr_fps>`_ and download the \"Starter Assets\" file "
"from the releases. Once you have the starter assets downloaded, open up the "
"project in Godot."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial/vr_starter_tutorial_part_one.rst:67
msgid ""
"The starter assets are not required to use the scripts provided in this "
"tutorial. The starter assets include several premade scenes and scripts that "
"will be used throughout the tutorial."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial/vr_starter_tutorial_part_one.rst:70
msgid ""
"When the project is first loaded, the Game.tscn scene will be opened. This "
"will be the main scene used for the tutorial. It includes several nodes and "
"scenes already placed throughout the scene, some background music, and "
"several GUI-related :ref:`MeshInstance <class_MeshInstance>` nodes."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial/vr_starter_tutorial_part_one.rst:75
msgid ""
"The GUI-related :ref:`MeshInstance <class_MeshInstance>` nodes already have "
"scripts attached to them. These scripts will set the texture of a :ref:"
"`Viewport <class_Viewport>` node to the albedo texture of the material of "
"the :ref:`MeshInstance <class_MeshInstance>` node. This is used to display "
"text within the VR project. Feel free to take a look at the script, ``GUI."
"gd``, if you want. We will not be going over how to to use :ref:`Viewport "
"<class_Viewport>` nodes for displaying UI on :ref:`MeshInstance "
"<class_MeshInstance>` nodes in this tutorial ."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial/vr_starter_tutorial_part_one.rst:80
msgid ""
"If you are interested in how to use :ref:`Viewport <class_Viewport>` nodes "
"for displaying UI on :ref:`MeshInstance <class_MeshInstance>` nodes, see "
"the :ref:`doc_viewport_as_texture` tutorial. It covers how to use a :ref:"
"`Viewport <class_Viewport>` as a render texture, along with how to apply "
"that texture onto a :ref:`MeshInstance <class_MeshInstance>` node."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial/vr_starter_tutorial_part_one.rst:85
#, fuzzy
msgid ""
"Before we jump into the tutorial, let's take a moment to talk about how the "
"nodes used for VR work."
msgstr ""
"편집기로 가기 전에, 우리는 모형 이미지를 통해 어떻게 컨테이너를 중첩할 지 계"
"획을 세워야 됩니다."

#: ../../docs/tutorials/vr/vr_starter_tutorial/vr_starter_tutorial_part_one.rst:87
msgid ""
"The :ref:`ARVROrigin <class_ARVROrigin>` node is the center point of the VR "
"tracking system. The position of the :ref:`ARVROrigin <class_ARVROrigin>` is "
"the position the VR system considers the 'center' point on the floor. The :"
"ref:`ARVROrigin <class_ARVROrigin>` has a `world scale` property that "
"effects the size of the user within the VR scene. For this tutorial, it is "
"set to `1.4`, as the world was originally just a tad to big. As mentioned "
"earlier, keeping the scale relatively consistent is important in VR."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial/vr_starter_tutorial_part_one.rst:92
msgid ""
"The :ref:`ARVRCamera <class_ARVRCamera>` is the player's headset and view "
"into the scene. The :ref:`ARVRCamera <class_ARVRCamera>` is offset on the Y "
"axis by the VR user's height, which will be important later when we add "
"teleportation locomotoin. If the VR system supports room tracking, then the :"
"ref:`ARVRCamera <class_ARVRCamera>` will move as the player moves. This "
"means that the :ref:`ARVRCamera <class_ARVRCamera>` is not guaranteed to be "
"in the same position as the :ref:`ARVROrigin <class_ARVROrigin>` node."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial/vr_starter_tutorial_part_one.rst:96
msgid ""
"The :ref:`ARVRController <class_ARVRController>` node represents a VR "
"controller. The :ref:`ARVRController <class_ARVRController>` will follow the "
"position and rotation of the VR controller relative to the :ref:`ARVROrigin "
"<class_ARVROrigin>` node. All of the input for the VR controllers happens "
"through the :ref:`ARVRController <class_ARVRController>` node. An :ref:"
"`ARVRController <class_ARVRController>` node with an ``ID`` of ``1`` "
"represents the left VR controller, while an :ref:`ARVRController "
"<class_ARVRController>` controller with an ``ID`` of ``2`` represents the "
"right VR controller."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial/vr_starter_tutorial_part_one.rst:101
msgid "To summerize:"
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial/vr_starter_tutorial_part_one.rst:103
#, fuzzy
msgid ""
"The :ref:`ARVROrigin <class_ARVROrigin>` node is the center of the VR "
"tracking system and is positioned on the floor."
msgstr ":ref:`ARVROrigin <class_ARVROrigin>` - 월드에서 원점"

#: ../../docs/tutorials/vr/vr_starter_tutorial/vr_starter_tutorial_part_one.rst:105
#, fuzzy
msgid ""
"The :ref:`ARVRCamera <class_ARVRCamera>` is the player's VR headset and view "
"into the scene."
msgstr ""
":ref:`ARVRCamera <class_ARVRCamera>` - 위치 추적이 가능한 카메라의 특수 하위 "
"클래스"

#: ../../docs/tutorials/vr/vr_starter_tutorial/vr_starter_tutorial_part_one.rst:107
msgid ""
"The :ref:`ARVRCamera <class_ARVRCamera>` node is offset on the Y axis by the "
"user's height."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial/vr_starter_tutorial_part_one.rst:109
msgid ""
"If the VR system supports room tracking, then the :ref:`ARVRCamera "
"<class_ARVRCamera>` node may be offset on the X and Z axes as the player "
"moves."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial/vr_starter_tutorial_part_one.rst:111
#, fuzzy
msgid ""
"The :ref:`ARVRController <class_ARVRController>` nodes represent the VR "
"controllers and handle all of the input from the VR controllers."
msgstr ""
":ref:`ARVRController <class_ARVRController>` - 컨트롤러의 위치를 추적하는 새"
"로운 Spatial 클래스"

#: ../../docs/tutorials/vr/vr_starter_tutorial/vr_starter_tutorial_part_one.rst:115
msgid "Starting VR"
msgstr "VR 시작하기"

#: ../../docs/tutorials/vr/vr_starter_tutorial/vr_starter_tutorial_part_one.rst:117
msgid ""
"Now that we have gone over the VR nodes, let's start working on the project. "
"While in ``Game.tscn``, select the ``Game`` node and make a new script "
"called ``Game.gd``. In the ``Game.gd`` file, add the following code:"
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial/vr_starter_tutorial_part_one.rst:159
#, fuzzy
msgid "Let's go over what this code does."
msgstr "각각이 하는 일을 살펴보겠습니다:"

#: ../../docs/tutorials/vr/vr_starter_tutorial/vr_starter_tutorial_part_one.rst:163
msgid ""
"In the ``_ready`` function, we first get the OpenVR VR interface using the "
"``find_interface`` function in the :ref:`ARVRServer <class_ARVRServer>` and "
"assign it to a variable called `VR`. If the :ref:`ARVRServer "
"<class_ARVRServer>` finds an interface with the name OpenVR, it will return "
"it, otherwise it will return ``null``."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial/vr_starter_tutorial_part_one.rst:166
msgid ""
"The OpenVR VR interface is not included with Godot by default. You will need "
"to download the OpenVR asset from the `Asset Library <https://godotengine."
"org/asset-library/asset/150>`_ or `GitHub <https://github.com/GodotVR/godot-"
"openvr-asset>`_."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial/vr_starter_tutorial_part_one.rst:169
msgid ""
"The code then combines two conditionals, one to check if the `VR` variable "
"is NOT null (``if VR``) and another calls the initialize function, which "
"returns a boolean based on whether the OpenVR interface was able to "
"initialize or not. If both of these conditionals return true, then we can "
"turn the main Godot :ref:`Viewport <class_Viewport>` into an ARVR viewport."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial/vr_starter_tutorial_part_one.rst:173
msgid ""
"If the VR interface initialized successfully, we then get the root :ref:"
"`Viewport <class_Viewport>` and set the `arvr` property to ``true``. This "
"will tell Godot to use the initialized ARVR interface to drive the :ref:"
"`Viewport <class_Viewport>` display. After setting the ``arvr`` property to "
"``true``, we set the ``hdr`` property to ``false``. We do this because most "
"of the VR headsets do not currently support HDR rendering."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial/vr_starter_tutorial_part_one.rst:177
msgid "HDR support will be available for VR in Godot 3.2."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial/vr_starter_tutorial_part_one.rst:179
msgid ""
"Finally, we disable VSync so the Frames Per Second (FPS) is not capped by "
"the computer monitor. After this we tell Godot to render at ``90`` frames "
"per second, which is the standard for most VR headsets. Without disabling "
"VSync, the normal computer monitor may limit the frame rate of the VR "
"headset to the frame rate of the computer monitor."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial/vr_starter_tutorial_part_one.rst:182
msgid ""
"In the project settings, under the ``Physics->Common`` tab, the physics FPS "
"has been set to ``90``. This makes the physics engine run at the same frame "
"rate as the VR display, which makes physics reactions look smoother when in "
"VR."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial/vr_starter_tutorial_part_one.rst:187
msgid ""
"That is all we need to do for Godot to launch OpenVR within the project! Go "
"ahead and give it a try if you want. Assuming everything works, you will be "
"able to look around the world. If you have a VR headset with room tracking, "
"then you will be able to move around the scene within the limits of the room "
"tracking."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial/vr_starter_tutorial_part_one.rst:191
#, fuzzy
msgid "Creating the controllers"
msgstr "컨트롤러를 코딩하기"

#: ../../docs/tutorials/vr/vr_starter_tutorial/vr_starter_tutorial_part_one.rst:195
msgid ""
"Right now all that the VR user can do is stand around, which isn't really "
"what we are going for unless we are working on a VR film. Lets write the "
"code for the VR controllers. We are going to write all of the code for the "
"VR controllers in one go, so the code is rather long. That said, once we are "
"finished you will be able to teleport around the scene, artificially move "
"using the touchpad/joystick on the VR controller, and be able to pick up, "
"drop, and throw :ref:`RigidBody <class_RigidBody>`-based nodes."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial/vr_starter_tutorial_part_one.rst:200
msgid ""
"First we need to open the scene used for the VR controllers. "
"``Left_Controller.tscn`` or ``Right_Controller.tscn``. Let's briefly go over "
"how the scene is setup."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial/vr_starter_tutorial_part_one.rst:203
msgid "How the VR controller scene is setup"
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial/vr_starter_tutorial_part_one.rst:205
msgid ""
"In both scenes the root node is a ARVRController node. The only difference "
"is that the ``Left_Controller`` scene has the ``Controller Id`` property set "
"to ``1`` while the ``Right_Controller`` has the ``Controller Id`` property "
"set to ``2``."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial/vr_starter_tutorial_part_one.rst:208
msgid ""
"The :ref:`ARVRServer <class_ARVRServer>` attempts to use these two IDs for "
"the left and right VR controllers. For VR systems that support more than 2 "
"controllers/tracked-objects, these IDs may need adjusting."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial/vr_starter_tutorial_part_one.rst:211
msgid ""
"Next is the ``Hand`` :ref:`MeshInstance <class_MeshInstance>` node. This "
"node is used to display the hand mesh that will be used when the VR "
"controller is not holding onto a :ref:`RigidBody <class_RigidBody>` node. "
"The hand in the ``Left_Controller`` scene is a left hand, while the hand on "
"the ``Right_Controller`` scene is a right hand."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial/vr_starter_tutorial_part_one.rst:214
msgid ""
"The node named ``Raycast`` is a :ref:`Raycast <class_Raycast>` node that is "
"used for aiming where to teleport to when the VR controller is teleporting. "
"The length of the :ref:`Raycast <class_Raycast>` is set to ``-16`` on the Y "
"axis and is rotated so that it points out of the pointer finger of the hand. "
"The ``Raycast`` node has a single child node, ``Mesh``, that is a :ref:"
"`MeshInstance <class_MeshInstance>`. This is used for visually showing where "
"the teleportation :ref:`Raycast <class_Raycast>` is aiming."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial/vr_starter_tutorial_part_one.rst:218
msgid ""
"The node named ``Area`` is a :ref:`Area <class_Area>` node will be used for "
"grabbing :ref:`RigidBody <class_RigidBody>`-based nodes when the VR "
"controller grab mode is set to ``AREA``. The ``Area`` node has a single "
"child node, ``CollisionShape``, that defines a sphere :ref:`CollisionShape "
"<class_CollisionShape>`. When the VR controller is not holding any objects "
"and the grab button is pressed, the first :ref:`RigidBody <class_RigidBody>`-"
"based node within the ``Area`` node will be picked up."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial/vr_starter_tutorial_part_one.rst:222
msgid ""
"Next is a :ref:`Position3D <class_Position3D>` node called ``Grab_Pos``. "
"This is used to define the position that grabbed :ref:`RigidBody "
"<class_RigidBody>` nodes will follow then they are held by the VR controller."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial/vr_starter_tutorial_part_one.rst:225
msgid ""
"A large :ref:`Area <class_Area>` node called ``Sleep_Area`` is used to "
"disable sleeping for any RigidBody nodes within its :ref:`CollisionShape "
"<class_CollisionShape>`, simple called ``CollisionShape``. This is needed "
"because if a :ref:`RigidBody <class_RigidBody>` node falls asleep, then the "
"VR controller will be unable to grab it. By using ``Sleep_Area``, we can "
"write code that makes any :ref:`RigidBody <class_RigidBody>` node within it "
"not able to sleep, therefore allowing the VR controller to grab it."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial/vr_starter_tutorial_part_one.rst:229
msgid ""
"An :ref:`AudioStreamPlayer3D <class_AudioStreamPlayer3D>` node called "
"``AudioStreamPlayer3D`` has a sound loaded that we will use when an object "
"has been picked up, dropped or thrown by the VR controller. While this is "
"not necessary for the functionality of the VR controller, it makes grabbing "
"and dropping objects feel more natural."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial/vr_starter_tutorial_part_one.rst:232
msgid ""
"Finally, the last nodes are the ``Grab_Cast`` node and it's only child node, "
"``Mesh``. The ``Grab_Cast`` node will be used for grabbing :ref:`RigidBody "
"<class_RigidBody>`-based nodes when the VR controller grab mode is set to "
"``RAYCAST``. This will allow the VR controller to grab objects that are just "
"slightly out of reach using a Raycast. The ``Mesh`` node is used for "
"visually showing where the teleportation :ref:`Raycast <class_Raycast>` is "
"aiming."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial/vr_starter_tutorial_part_one.rst:236
msgid ""
"That is a quick overview of how the VR controller scenes are setup, and how "
"we will be using the nodes to provide the functionality for them. Now that "
"we have looked at the VR controller scene, let's write the code that will "
"drive them."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial/vr_starter_tutorial_part_one.rst:240
#, fuzzy
msgid "The code for the VR controllers"
msgstr "컨트롤러를 코딩하기"

#: ../../docs/tutorials/vr/vr_starter_tutorial/vr_starter_tutorial_part_one.rst:242
msgid ""
"Select the root node of the scene, either ``Right_Controller`` or "
"``Left_Controller``, and make a new script called ``VR_Controller.gd``. Both "
"scenes will be using the same script, so it doesn't matter which you use "
"first. With ``VR_Controller.gd`` opened, add the following code:"
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial/vr_starter_tutorial_part_one.rst:245
msgid ""
"You can copy and paste the code from this page directly into the script "
"editor."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial/vr_starter_tutorial_part_one.rst:249
msgid ""
"To convert the spaces to tabs in the script editor, click the ``Edit`` menu "
"and select ``Convert Indent To Tabs``. This will convert all the spaces into "
"tabs. You can select ``Convert Indent To Spaces`` to convert tabs back into "
"spaces."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial/vr_starter_tutorial_part_one.rst:540
msgid ""
"This is quite a bit of code to go through. Let's go through what the code "
"does step-by-step."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial/vr_starter_tutorial_part_one.rst:543
#, fuzzy
msgid "Explaining the VR controller code"
msgstr "컨트롤러를 코딩하기"

#: ../../docs/tutorials/vr/vr_starter_tutorial/vr_starter_tutorial_part_one.rst:545
#: ../../docs/tutorials/vr/vr_starter_tutorial/vr_starter_tutorial_part_two.rst:84
msgid "First, let's go through all of the class variables in the script:"
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial/vr_starter_tutorial_part_one.rst:547
msgid ""
"``controller_velocity``: A variable to hold a rough approximation of the VR "
"controller's velocity."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial/vr_starter_tutorial_part_one.rst:548
msgid ""
"``prior_controller_position``: A variable to hold the VR controller's last "
"position in 3D space."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial/vr_starter_tutorial_part_one.rst:549
msgid ""
"``prior_controller_velocities``: An Array to hold the last 30 calculated VR "
"controller velocities. This is used to smooth the velocity calculations over "
"time."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial/vr_starter_tutorial_part_one.rst:550
msgid ""
"``held_object``: A variable to hold a reference to the object the VR "
"controller is holding. If the VR controller is not holding any objects, this "
"variable will be ``null``."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial/vr_starter_tutorial_part_one.rst:551
msgid ""
"``held_object_data``: A dictionary to hold data for the :ref:`RigidBody "
"<class_RigidBody>` node being held by the VR controller. This is used to "
"reset the :ref:`RigidBody <class_RigidBody>`'s data when it is no longer "
"held."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial/vr_starter_tutorial_part_one.rst:552
msgid ""
"``grab_area``: A variable to hold the :ref:`Area <class_Area>` node used to "
"grab objects with the VR controller."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial/vr_starter_tutorial_part_one.rst:553
msgid ""
"``grab_raycast``: A variable to hold the :ref:`Raycast <class_Raycast>` node "
"used to grab objects with the VR controller."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial/vr_starter_tutorial_part_one.rst:554
msgid ""
"``grab_mode``: A variable to define the grab mode the VR controller is "
"using. There are only two modes for grabbing objects in this tutorial, "
"``AREA`` and ``RAYCAST``."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial/vr_starter_tutorial_part_one.rst:555
msgid ""
"``grab_pos_node``: A variable to hold the node that will be used to update "
"the position and rotation of held objects."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial/vr_starter_tutorial_part_one.rst:556
msgid ""
"``hand_mesh``: A variable to hold the :ref:`MeshInstance "
"<class_MeshInstance>` node that contains the hand mesh for the VR "
"controller. This mesh will be shown when the VR controller is not holding "
"anything."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial/vr_starter_tutorial_part_one.rst:557
msgid ""
"``hand_pickup_drop_sound``: A variable to hold the :ref:`AudioStreamPlayer3D "
"<class_AudioStreamPlayer3D>` node that contains the pickup/drop sound."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial/vr_starter_tutorial_part_one.rst:558
msgid ""
"``teleport_pos``: A variable to hold the position the player will be "
"teleported to when the VR controller teleports the player."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial/vr_starter_tutorial_part_one.rst:559
msgid ""
"``teleport_mesh``: A variable to hold the :ref:`MeshInstance "
"<class_MeshInstance>` node used to show where the player is teleporting to."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial/vr_starter_tutorial_part_one.rst:560
msgid ""
"``teleport_button_down``: A variable used to track whether the controller's "
"teleport button is held down. This will be used to detect if this VR "
"controller is trying to teleport the player."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial/vr_starter_tutorial_part_one.rst:561
msgid ""
"``teleport_raycast``: A variable to hold the :ref:`Raycast <class_Raycast>` "
"node used to calculate the teleport position. This node also has a :ref:"
"`MeshInstance <class_MeshInstance>` that acts as a 'laser sight' for aiming."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial/vr_starter_tutorial_part_one.rst:562
msgid ""
"``CONTROLLER_DEADZONE``: A constant to define the deadzone for both the "
"trackpad and the joystick on the VR controller. See the note below for more "
"information."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial/vr_starter_tutorial_part_one.rst:563
msgid ""
"``MOVEMENT_SPEED``: A constant to define the speed the player moves at when "
"using the trackpad/joystick to move artificially."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial/vr_starter_tutorial_part_one.rst:564
msgid ""
"``CONTROLLER_RUMBLE_FADE_SPEED``: A constant to define how fast the VR "
"controller rumble fades."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial/vr_starter_tutorial_part_one.rst:565
msgid ""
"``directional_movement``: A variable to hold whether this VR controller is "
"moving the player using the touchpad/joystick."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial/vr_starter_tutorial_part_one.rst:567
#: ../../docs/tutorials/vr/vr_starter_tutorial/vr_starter_tutorial_part_one.rst:708
msgid ""
"You can find a great article explaining all about how to handle touchpad/"
"joystick dead zones here: http://www.third-helix.com/2013/04/12/doing-"
"thumbstick-dead-zones-right.html"
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial/vr_starter_tutorial_part_one.rst:569
msgid ""
"We are using a translated version of the scaled radial dead zone code "
"provided in that article for the VR controller's joystick/touchpad. The "
"article is a great read, and I highly suggest giving it a look!"
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial/vr_starter_tutorial_part_one.rst:572
msgid ""
"That is quite a few class variables. Most of them are used to hold "
"references to nodes we will need throughout the code. Next let's start "
"looking at the functions, starting with the ``_ready`` function."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial/vr_starter_tutorial_part_one.rst:578
#: ../../docs/tutorials/vr/vr_starter_tutorial/vr_starter_tutorial_part_two.rst:98
#: ../../docs/tutorials/vr/vr_starter_tutorial/vr_starter_tutorial_part_two.rst:286
#: ../../docs/tutorials/vr/vr_starter_tutorial/vr_starter_tutorial_part_two.rst:684
#: ../../docs/tutorials/vr/vr_starter_tutorial/vr_starter_tutorial_part_two.rst:858
msgid "``_ready`` function step-by-step explanation"
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial/vr_starter_tutorial_part_one.rst:580
msgid ""
"First we tell Godot to silence the warnings about not using the values "
"returned by the ``connect`` function. We will not need the returned values "
"for this tutorial."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial/vr_starter_tutorial_part_one.rst:583
msgid ""
"Next we get the :ref:`Raycast <class_Raycast>` node we are going to use for "
"determining the position for teleporting and assign it to the "
"``teleport_raycast`` variable. We then get the :ref:`MeshInstance "
"<class_MeshInstance>` node that we will use to show where the player will be "
"teleporting to. The node we are using for teleporting is a child of the "
"``Game`` scene. We do this so the teleport mesh node is not effected by "
"changes in the VR controller, and so the teleport mesh can be used by both "
"VR controllers."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial/vr_starter_tutorial_part_one.rst:587
msgid ""
"Then the ``teleport_button_down`` variable is set to false, ``teleport_mesh."
"visible`` is set to ``false``, and ``teleport_raycast.visible`` is set to "
"``false``. This sets up the variables for teleporting the player into their "
"initial, not teleporting the player, state."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial/vr_starter_tutorial_part_one.rst:590
msgid ""
"The code then gets the ``grab_area`` node, the ``grab_raycast`` node, and "
"the ``grab_pos_node`` node and assigns them all to their respective "
"variables for use later."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial/vr_starter_tutorial_part_one.rst:592
msgid ""
"Next the ``grab_mode`` is set to ``AREA`` so the VR controller will attempt "
"to grab objects using the :ref:`Area <class_Area>` node defined in "
"``grab_area`` when the VR controller's grab/grip button is pressed. We also "
"set the ``grab_raycast`` node's ``visible`` property to ``false`` so the "
"'laser sight' child node of ``grab_raycast`` is not visible."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial/vr_starter_tutorial_part_one.rst:595
msgid ""
"After that we connect the ``body_entered`` and ``body_exited`` signals from "
"the ``Sleep_Area`` node in the VR controller to the ``sleep_area_entered`` "
"and ``sleep_area_exited`` functions. The ``sleep_area_entered`` and "
"``sleep_area_exited`` functions will be used to make :ref:`RigidBody "
"<class_RigidBody>` nodes unable to sleep when nearby the VR controller."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial/vr_starter_tutorial_part_one.rst:598
msgid ""
"Then the ``hand_mesh`` and ``hand_pickup_drop_sound`` nodes are gotten and "
"assigned them to their respective variables for use later."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial/vr_starter_tutorial_part_one.rst:600
msgid ""
"Finally, the ``button_pressed`` and ``button_release`` signals in the :ref:"
"`ARVRController <class_ARVRController>` node, which the VR controller "
"extends, are connected to the ``button_pressed`` and ``button_released`` "
"functions respectively. This means that when a button on the VR controller "
"is pressed or released, the ``button_pressed`` or ``button_released`` "
"functions defined in this script will be called."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial/vr_starter_tutorial_part_one.rst:606
#: ../../docs/tutorials/vr/vr_starter_tutorial/vr_starter_tutorial_part_two.rst:106
#: ../../docs/tutorials/vr/vr_starter_tutorial/vr_starter_tutorial_part_two.rst:292
#: ../../docs/tutorials/vr/vr_starter_tutorial/vr_starter_tutorial_part_two.rst:694
#: ../../docs/tutorials/vr/vr_starter_tutorial/vr_starter_tutorial_part_two.rst:868
msgid "``_physics_process`` function step-by-step explanation"
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial/vr_starter_tutorial_part_one.rst:608
msgid ""
"First we check to see if the ``rumble`` variable is more than zero. If the "
"``rumble`` variable, which is a property of the :ref:`ARVRController "
"<class_ARVRController>` node, is more than zero then the VR controller "
"rumbles."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial/vr_starter_tutorial_part_one.rst:611
msgid ""
"If the ``rumble`` variable is more than zero, then we reduce the rumble by "
"``CONTROLLER_RUMBLE_FADE_SPEED`` every second by subtracting "
"``CONTROLLER_RUMBLE_FADE_SPEED`` multiplied by delta. There is then a ``if`` "
"condition to check if ``rumble`` is less than zero, which sets ``rumble`` to "
"zero if its value is less than zero."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial/vr_starter_tutorial_part_one.rst:614
msgid ""
"This small section of code is all we need for reducing the VR controller's "
"rumble. Now when we set ``rumble`` to a value, this code will automatically "
"make it fade over time."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial/vr_starter_tutorial_part_one.rst:618
msgid ""
"The first section of code checks to see if the ``teleport_button_down`` "
"variable is equal to ``true``, which means this VR controller is trying to "
"teleport."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial/vr_starter_tutorial_part_one.rst:620
msgid ""
"If ``teleport_button_down`` is equal to ``true``, we force the "
"``teleport_raycast`` :ref:`Raycast <class_Raycast>` node to update using the "
"``force_raycast_update`` function. The ``force_raycast_update`` function "
"will update the properties within the :ref:`Raycast <class_Raycast>` node "
"with the latest version of the physics world."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial/vr_starter_tutorial_part_one.rst:623
msgid ""
"The code then checks to see if the ``teleport_raycast`` collided with "
"anything by checking of the ``is_colliding`` function in "
"``teleport_raycast`` is true. If the :ref:`Raycast <class_Raycast>` collided "
"with something, we then check to see if the :ref:`PhysicsBody "
"<class_PhysicsBody>` the raycast collided with is a :ref:`StaticBody "
"<class_StaticBody>` or not. We then check to see if the collision normal "
"vector returned by the raycast is greater than or equal to ``0.85`` on the Y "
"axis."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial/vr_starter_tutorial_part_one.rst:627
msgid ""
"We do this because we do not want the user to be able to teleport onto "
"RigidBody nodes and we only want the player to be able to teleport on floor-"
"like surfaces."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial/vr_starter_tutorial_part_one.rst:629
msgid ""
"If all these conditions are met, then we assign the ``teleport_pos`` "
"variable to the ``get_collision_point`` function in ``teleport_raycast``. "
"This will assign ``teleport_pos`` to the position the raycast collided at in "
"world space. We then move the ``teleport_mesh`` to the world position stored "
"in ``teleport_pos``."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial/vr_starter_tutorial_part_one.rst:632
msgid ""
"This section of code will get the position the player is aiming at with the "
"teleportation raycast and update the teleportation mesh, giving a visual "
"update on where the user will be teleporting to when the release the "
"teleport button."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial/vr_starter_tutorial_part_one.rst:637
msgid ""
"The next section of code first checks to see if the VR controller is active "
"through the ``get_is_active`` function, which is defined by :ref:"
"`ARVRController <class_ARVRController>`. If the VR controller is active, "
"then it calls the ``_physics_process_update_controller_velocity`` function."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial/vr_starter_tutorial_part_one.rst:640
msgid ""
"The ``_physics_process_update_controller_velocity`` function will calculate "
"the VR controller's velocity through changes in position. It is not perfect, "
"but this process gets a rough idea of the velocity of the VR controller, "
"which is fine for the purposes of this tutorial."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial/vr_starter_tutorial_part_one.rst:645
msgid ""
"The next section of code checks to see if the VR controller is holding an "
"object by checking to see if the ``held_object`` variable is not equal to "
"``null``."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial/vr_starter_tutorial_part_one.rst:647
msgid ""
"If the VR controller is holding an object, we first store it's scale in a "
"temporary variable called ``held_scale``. We then set the "
"``global_transform`` of the held object to the ``global_transform`` of the "
"``held_object`` node. This will make the held object have the same position, "
"rotation, and scale of the ``grab_pos_node`` node in world space."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial/vr_starter_tutorial_part_one.rst:650
msgid ""
"However, because we do not want the held object to change in scale when it "
"is grabbed, we need to set the ``scale`` property of the ``held_object`` "
"node back to ``held_scale``."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial/vr_starter_tutorial_part_one.rst:652
msgid ""
"This section of code will keep the held object in the same position and "
"rotation as the VR controller, keeping it synced with the VR controller."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial/vr_starter_tutorial_part_one.rst:656
msgid ""
"Finally, the last section of code simply calls the "
"``_physics_process_directional_movement`` function. This function contains "
"all of the code for moving the player when the touchpad/joystick on the VR "
"controller moves."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial/vr_starter_tutorial_part_one.rst:661
msgid ""
"``_physics_process_update_controller_velocity`` function step-by-step "
"explanation"
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial/vr_starter_tutorial_part_one.rst:663
msgid ""
"First this function resets the ``controller_velocity`` variable to zero :ref:"
"`Vector3 <class_Vector3>`."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial/vr_starter_tutorial_part_one.rst:667
msgid ""
"Then we check to see if there are any stored/cached VR controller velocities "
"saved in the ``prior_controller_velocities`` array. We do this by checking "
"to see if the ``size()`` function returns a value greater than ``0``. If "
"there are cached velocities within ``prior_controller_velocities``, then we "
"iterate through each of the stored velocities using a ``for`` loop."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial/vr_starter_tutorial_part_one.rst:670
msgid ""
"For each of the cached velocities, we simply add its value to "
"``controller_velocity``. Once the code has gone through all of the cached "
"velocities in ``prior_controller_velocities``, we divide "
"``controller_velocity`` by the size of the ``prior_controller_velocities`` "
"array, which will give us the combined velocity value. This helps take the "
"previous velocities into account, making the direction of the controller's "
"velocity more accurate."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial/vr_starter_tutorial_part_one.rst:676
msgid ""
"Next we calculate the change in position the VR controller has taken since "
"the last ``_physics_process`` function call. We do this by subtracting "
"``prior_controller_position`` from the global position of the VR controller, "
"``global_transform.origin``. This will give us a :ref:`Vector3 "
"<class_Vector3>` that points from the position in "
"``prior_controller_position`` to the current position of the VR controller, "
"which we store in a variable called ``relative_controller_position``."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial/vr_starter_tutorial_part_one.rst:680
msgid ""
"Next we add the change in position to ``controller_velocity`` so the latest "
"change in position is taken into account in the velocity calculation. We "
"then add ``relative_controller_position`` to ``prior_controller_velocities`` "
"so it can be taken into account on the next calculation of the VR "
"controller's velocity."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial/vr_starter_tutorial_part_one.rst:683
msgid ""
"Then ``prior_controller_position`` is updated with the global position of "
"the VR controller, ``global_transform.origin``. We then divide "
"``controller_velocity`` by ``delta`` so the velocity is higher, giving "
"results like those we expect, while still being relative to the amount of "
"time that has passed. It is not a perfect solution, but the results look "
"decent most of the time and for the purposes of this tutorial, it is good "
"enough."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial/vr_starter_tutorial_part_one.rst:687
msgid ""
"Finally, the function checks to see if the ``prior_controller_velocities`` "
"has more than ``30`` velocities cached by checking if the ``size()`` "
"function returns a value greater than ``30``. If there are more than ``30`` "
"cached velocities stored in ``prior_controller_velocities``, then we simply "
"remove the oldest cached velocity by calling the ``remove`` function and "
"passing in a index position of ``0``."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial/vr_starter_tutorial_part_one.rst:693
msgid ""
"What this function ultimately does is that it gets a rough idea of the VR "
"controller's velocity by calculating the VR controller's relative changes in "
"position over the last thirty ``_physics_process`` calls. While this is not "
"perfect, it gives a decent idea of how fast the VR controller is moving in "
"3D space."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial/vr_starter_tutorial_part_one.rst:698
msgid ""
"``_physics_process_directional_movement`` function step-by-step explanation"
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial/vr_starter_tutorial_part_one.rst:700
msgid ""
"First this function gets the axes for the trackpad and the joystick and "
"assigns them to :ref:`Vector2 <class_Vector2>` variables called "
"``trackpad_vector`` and ``joystick_vector`` respectively."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial/vr_starter_tutorial_part_one.rst:702
msgid ""
"You may need to remap the joystick and/or touchpad index values depending on "
"your VR headset and controller. The inputs in this tutorial are the index "
"values of a Windows Mixed Reality headset."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial/vr_starter_tutorial_part_one.rst:705
msgid ""
"Then ``trackpad_vector`` and ``joystick_vector`` have their deadzones "
"account for. The code for this is detailed in the article below, with slight "
"changes as the code is converted from C# to GDScript."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial/vr_starter_tutorial_part_one.rst:710
msgid ""
"Once the ``trackpad_vector`` and ``joystick_vector`` variables have had "
"their deadzones account for, the code then gets the forward and right "
"direction vectors relative to the global transform of the :ref:`ARVRCamera "
"<class_ARVRCamera>`. What this does is that it gives us vectors that point "
"forward and right relative to the rotation of the user camera, the :ref:"
"`ARVRCamera <class_ARVRCamera>`, in world space. These vectors point in the "
"same direction of the blue and red arrows when you select an object in the "
"Godot editor with the ``local space mode`` button enabled. The forward "
"direction vector is stored in a variable called ``forward_direction``, while "
"the right direction vector is stored in a variable called "
"``right_direction``."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial/vr_starter_tutorial_part_one.rst:716
msgid ""
"Next the code adds the ``trackpad_vector`` and ``joystick_vector`` variables "
"together and normalizes the results using the ``normalized`` function. This "
"gives us the combined movement direction of both input devices, so we can "
"use a single :ref:`Vector2 <class_Vector2>` for moving the user. We assign "
"the combined direction to a variable called ``movement_vector``."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial/vr_starter_tutorial_part_one.rst:719
msgid ""
"Then we calculate the distance the user will move forward, relative to the "
"forward direction stored in ``forward_direction``. To calculate this, we "
"multiply ``forward_direction`` by ``movement_vector.x``, ``delta``, and "
"``MOVEMENT_SPEED``. This will give us the distance the user will move "
"forward when the trackpad/joystick is pushed forward or backwards. We assign "
"this to a variable called ``movement_forward``."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial/vr_starter_tutorial_part_one.rst:723
msgid ""
"We do a similar calculation for the distance the user will move right, "
"relative to the right direction stored in ``right_direction``. To calculate "
"the distance the user will move right, we multiply ``right_direction`` by "
"``movement_vector.y``, ``delta``, and ``MOVEMENT_SPEED``. This will give us "
"the distance the user will move right when the trackpad/joystick is pushed "
"right or left. We assign this to a variable called ``movement_right``."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial/vr_starter_tutorial_part_one.rst:727
msgid ""
"Next we remove any movement on the ``Y`` axis of ``movement_forward`` and "
"``movement_right`` by assigning their ``Y`` values to ``0``. We do this so "
"the user cannot fly/fall simply by moving the trackpad or joystick. Without "
"doing this, the player could fly in the direction they are facing."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial/vr_starter_tutorial_part_one.rst:730
msgid ""
"Finally, we check to see if the ``length`` function on ``movement_right`` or "
"``movement_forward`` is greater than ``0``. If it is, then we need to move "
"the user. To move the user, we perform a global translation to the :ref:"
"`ARVROrigin <class_ARVROrigin>` node using ``get_parent().global_translate`` "
"and pass in the ``movement_right`` variable with the ``movement_forward`` "
"variable added to it. This will move the player in the direction the "
"trackpad/joystick is pointing, relative to the rotation of the VR headset. "
"We also set the ``directional_movement`` variable to ``true`` so the code "
"knows this VR controller is moving the player."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial/vr_starter_tutorial_part_one.rst:735
msgid ""
"If the ``length`` function on ``movement_right`` or ``movement_forward`` is "
"less than or equal to ``0``, then we simply set the ``directional_movement`` "
"variable to ``false`` so the code knows this VR controller is not moving the "
"player."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial/vr_starter_tutorial_part_one.rst:741
msgid ""
"What this function ultimately does is takes the input from the VR "
"controller's trackpad and joystick and moves the player in the direction the "
"player is pushing them. Movement is relative to the rotation of the VR "
"headset, so if the player pushes forward and turns their head to the left, "
"they will move to the left."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial/vr_starter_tutorial_part_one.rst:746
msgid "``button_pressed`` function step-by-step explanation"
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial/vr_starter_tutorial_part_one.rst:748
msgid ""
"This function checks to see if the VR button that was just pressed is equal "
"to one of the VR buttons used in this project. The ``button_index`` variable "
"is passed in by the ``button_pressed`` signal in :ref:`ARVRController "
"<class_ARVRController>`, which we connected in the ``_ready`` function."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial/vr_starter_tutorial_part_one.rst:751
msgid ""
"There are only three buttons we are looking for in this project: the trigger "
"button, the grab/grip button, and the menu button."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial/vr_starter_tutorial_part_one.rst:753
msgid ""
"You may need to remap these button index values depending on your VR headset "
"and controller. The inputs in this tutorial are the index values of a "
"Windows Mixed Reality headset."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial/vr_starter_tutorial_part_one.rst:756
msgid ""
"First we check if the ``button_index`` is equal to ``15``, which should map "
"to the trigger button on the VR controller. If the button pressed is the "
"trigger button, then the ``_on_button_pressed_trigger`` function is called."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial/vr_starter_tutorial_part_one.rst:759
msgid ""
"If the ``button_index`` is equal to ``2``, then the grab button was just "
"pressed. If the button pressed is the grab button, the "
"``_on_button_pressed_grab`` function is called."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial/vr_starter_tutorial_part_one.rst:761
msgid ""
"Finally, if the ``button_index`` is equal to ``1``, then the menu button was "
"just pressed. If the button pressed is the menu button, the "
"``_on_button_pressed_menu`` function is called."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial/vr_starter_tutorial_part_one.rst:765
msgid "``_on_button_pressed_trigger`` function step-by-step explanation"
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial/vr_starter_tutorial_part_one.rst:767
msgid ""
"First this function checks to see if the VR controller is not holding by "
"checking if ``held_object`` is equal to ``null``. If the VR controller is "
"not holding anything, then we assume that the trigger press on the VR "
"controller was for teleporting. We then make sure that ``teleport_mesh."
"visible`` is equal to ``false``. We use this to tell if the other VR "
"controller is trying to teleport or not, as ``teleport_mesh`` will be "
"visible if the other VR controller is teleporting."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial/vr_starter_tutorial_part_one.rst:771
msgid ""
"If ``teleport_mesh.visible`` is equal to ``false``, then we can teleport "
"with this VR controller. We set the ``teleport_button_down`` variable to "
"``true``, set ``teleport_mesh.visible`` to true, and set ``teleport_raycast."
"visible`` to ``true``. This will tell the code in ``_physics_process`` that "
"this VR controller is going to teleport, it will make the ``teleport_mesh`` "
"visible so the user knows where the are teleporting to, and will make "
"``teleport_raycast`` visible to the player has a 'laser sight' they can use "
"to aim the teleportation pos."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial/vr_starter_tutorial_part_one.rst:778
msgid ""
"If ``held_object`` is not equal to ``null``, then the VR controller is "
"holding something. We then check to see if the object that is being held, "
"``held_object``, extends a class called ``VR_Interactable_Rigidbody``. we "
"have not made ``VR_Interactable_Rigidbody`` yet, but "
"``VR_Interactable_Rigidbody`` will be a custom class we will use on all of "
"the special/custom :ref:`RigidBody <class_RigidBody>`-based nodes in the "
"project."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial/vr_starter_tutorial_part_one.rst:782
#: ../../docs/tutorials/vr/vr_starter_tutorial/vr_starter_tutorial_part_one.rst:857
#: ../../docs/tutorials/vr/vr_starter_tutorial/vr_starter_tutorial_part_one.rst:881
msgid ""
"Don't worry, we will cover ``VR_Interactable_Rigidbody`` after this section!"
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial/vr_starter_tutorial_part_one.rst:784
msgid ""
"If the ``held_object`` extends ``VR_Interactable_Rigidbody``, then we call "
"the ``interact`` function, so the held object can do whatever it is supposed "
"to do when the trigger is pressed and the object is held by the VR "
"controller."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial/vr_starter_tutorial_part_one.rst:789
msgid "``_on_button_pressed_grab`` function step-by-step explanation"
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial/vr_starter_tutorial_part_one.rst:791
msgid ""
"First this function checks to see if ``teleport_button_down`` is equal to "
"``true``. If it is, then it calls ``return``. We do this because we do not "
"want the user to be able to pick up objects while teleporting."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial/vr_starter_tutorial_part_one.rst:794
msgid ""
"Then we check to see if the VR controller is currently not holding anything "
"by checking if ``held_object`` is equal to ``null``. If the VR controller is "
"not holding anything, then the ``_pickup_rigidbody`` function is called. If "
"the VR controller is holding something, ``held_object`` is not equal to "
"``null``, then the ``_throw_rigidbody`` function is called."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial/vr_starter_tutorial_part_one.rst:797
msgid ""
"Finally, the pick-up/drop sound is played by calling the ``play`` function "
"on ``hand_pickup_drop_sound``."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial/vr_starter_tutorial_part_one.rst:801
msgid "``_pickup_rigidbody`` function step-by-step explanation"
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial/vr_starter_tutorial_part_one.rst:803
msgid ""
"First the function makes a variable called ``rigid_body``, which we'll be "
"using to store the :ref:`RigidBody <class_RigidBody>` that the VR controller "
"is going to pick up, assuming there is a RigidBody to pick up."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial/vr_starter_tutorial_part_one.rst:808
msgid ""
"Then the function checks to see if the ``grab_mode`` variable is equal to "
"``AREA``. If it is, then it gets all of the :ref:`PhysicsBody "
"<class_PhysicsBody>` nodes within the ``grab_area`` using the "
"``get_overlapping_bodies`` functions. This function will return an array of :"
"ref:`PhysicsBody <class_PhysicsBody>` nodes. We assign the array of :ref:"
"`PhysicsBody <class_PhysicsBody>` to a new variable called ``bodies``."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial/vr_starter_tutorial_part_one.rst:812
msgid ""
"We then check to see if the length of the ``bodies`` variable is more than "
"``0``. If it is, we go through each of the :ref:`PhysicsBody "
"<class_PhysicsBody>` nodes in ``bodies`` using a for loop."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial/vr_starter_tutorial_part_one.rst:814
msgid ""
"For each :ref:`PhysicsBody <class_PhysicsBody>` node, we check if it is, or "
"extends, a :ref:`RigidBody <class_RigidBody>` node using ``if body is "
"RigidBody``, which will return ``true`` if the :ref:`PhysicsBody "
"<class_PhysicsBody>` node is or extends the :ref:`RigidBody "
"<class_RigidBody>` node. If the object is a :ref:`RigidBody "
"<class_RigidBody>`, then we check to make sure there is not a variable/"
"constant called ``NO_PICKUP`` defined in the body. We do this because if you "
"want to have :ref:`RigidBody <class_RigidBody>` nodes that cannot be picked "
"up, all you have to do is define a constant/variable called ``NO_PICKUP`` "
"and the VR controller will be unable to pick it up. If the :ref:`RigidBody "
"<class_RigidBody>` node does not have a variable/constant defined with the "
"name ``NO_PICKUP``, then we assign the ``rigid_body`` variable to the :ref:"
"`RigidBody <class_RigidBody>` node and break the for loop."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial/vr_starter_tutorial_part_one.rst:820
msgid ""
"What this section of code does is goes through all of the physics bodies "
"within the ``grab_area`` and grabs the first :ref:`RigidBody "
"<class_RigidBody>` node that does not have a variable/constant named "
"``NO_PICKUP`` and assigns it to the ``rigid_body`` variable so we can do "
"some additional post processing later in this function."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial/vr_starter_tutorial_part_one.rst:825
msgid ""
"If the ``grab_mode`` variable is not equal to ``AREA``, we then check to see "
"if it is equal to ``RAYCAST`` instead. If it is equal to ``RAYCAST``, we "
"force the ``grab_raycast`` node to update using the ``force_raycast_update`` "
"function. The ``force_raycast_update`` function will update the :ref:"
"`Raycast <class_Raycast>` with the latest changes in the physics world. We "
"then check to see if the ``grab_raycast`` node collided with something using "
"the ``is_colliding`` function, which will return true if the :ref:`Raycast "
"<class_Raycast>` hit something."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial/vr_starter_tutorial_part_one.rst:829
msgid ""
"If the ``grab_raycast`` hit something, we get the :ref:`PhysicsBody "
"<class_PhysicsBody>` node hit using the ``get_collider`` function. The code "
"then checks to see if the node hit is a :ref:`RigidBody <class_RigidBody>` "
"node using ``if body is RigidBody``, which will return ``true`` if the :ref:"
"`PhysicsBody <class_PhysicsBody>` node is or extends the :ref:`RigidBody "
"<class_RigidBody>` node. Then the code checks to see if the :ref:`RigidBody "
"<class_RigidBody>` node does not have a variable named ``NO_PICKUP``, and if "
"it does not, then it assigns the :ref:`RigidBody <class_RigidBody>` node to "
"the ``rigid_body`` variable."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial/vr_starter_tutorial_part_one.rst:834
msgid ""
"What this section of code does is sends the ``grab_raycast`` :ref:`Raycast "
"<class_Raycast>` node out and checks if it collided with a :ref:`RigidBody "
"<class_RigidBody>` node that does not have a variable/constant named "
"``NO_PICKUP``. If it collided with a RigidBody without ``NO_PICKUP``, it "
"assigns the node to the ``rigid_body`` variable so we can do some additional "
"post processing later in this function."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial/vr_starter_tutorial_part_one.rst:840
msgid ""
"The final section of code first checks to see if ``rigid_body`` is not equal "
"to ``null``. If ``rigid_body`` is not equal to ``null``, then the VR "
"controller found a :ref:`RigidBody <class_RigidBody>`-based node that can be "
"picked up."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial/vr_starter_tutorial_part_one.rst:843
msgid ""
"If there is a VR controller to pickup, we assign ``held_object`` to the :ref:"
"`RigidBody <class_RigidBody>` node stored in ``rigid_body``. We then store "
"the :ref:`RigidBody <class_RigidBody>` node's ``mode``, ``collision_layer``, "
"and ``collision_mask`` in ``held_object_data`` using ``mode``, ``layer``, "
"and ``mask`` as keys for the respective values. This is so we can reapply "
"them later when the object is dropped by the VR controller."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial/vr_starter_tutorial_part_one.rst:847
msgid ""
"We then set the :ref:`RigidBody <class_RigidBody>`'s mode to "
"``MODE_STATIC``, it's ``collision_layer`` to zero, and it's "
"``collision_mask`` to zero. This will make it where the held :ref:`RigidBody "
"<class_RigidBody>` cannot interact with other objects in the physics world "
"when held by the VR controller."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial/vr_starter_tutorial_part_one.rst:850
msgid ""
"Next the ``hand_mesh`` :ref:`MeshInstance <class_MeshInstance>` is made "
"invisible by setting the ``visible`` property to ``false``. This is so the "
"hand does not get in the way of the held object. Likewise, the "
"``grab_raycast`` 'laser sight' is made invisible by setting the ``visible`` "
"property to ``false``."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial/vr_starter_tutorial_part_one.rst:853
msgid ""
"Then the code checks to see if the held object extends a class called "
"``VR_Interactable_Rigidbody``. If it does, then sets a variable called "
"``controller`` on ``held_object`` to ``self``, and calls the ``picked_up`` "
"function on ``held_object``. While we haven't made "
"``VR_Interactable_Rigidbody`` just yet, what this will do is set tell the "
"``VR_Interactable_Rigidbody`` class that it is being held by a VR "
"controller, where the a reference to the controller is stored in the "
"``controller`` variable, through calling the ``picked_up`` function."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial/vr_starter_tutorial_part_one.rst:859
#: ../../docs/tutorials/vr/vr_starter_tutorial/vr_starter_tutorial_part_one.rst:883
msgid ""
"The code should make more sense after completing part 2 of this tutorial "
"series, where we will actually be using ``VR_Interactable_Rigidbody``."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial/vr_starter_tutorial_part_one.rst:861
msgid ""
"What this section of code does is that if a :ref:`RigidBody "
"<class_RigidBody>` was found using the grab :ref:`Area <class_Area>` or :ref:"
"`Raycast <class_Raycast>`, it sets it up so that it can be carried by the VR "
"controller."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial/vr_starter_tutorial_part_one.rst:865
msgid "``_throw_rigidbody`` function step-by-step explanation"
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial/vr_starter_tutorial_part_one.rst:867
msgid ""
"First the function checks to see if the VR controller is not holding any "
"object by checking if the ``held_object`` variable is equal to ``null``. If "
"it is, then it simply calls ``return`` so nothing happens. While this "
"shouldn't be possible, the ``_throw_rigidbody`` function should only be "
"called if an object is held, this check helps ensure that if something "
"strange happens, this function will react as expected."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial/vr_starter_tutorial_part_one.rst:871
msgid ""
"After checking if the VR controller is holding an object, we assume it is "
"and set the stored :ref:`RigidBody <class_RigidBody>` data back to the held "
"object. We take the ``mode``, ``layer`` and ``mask`` data stored in the "
"``held_object_data`` dictionary and reapply it to the object in "
"``held_object``. This will set the :ref:`RigidBody <class_RigidBody>` back "
"to the state it was prior to being picked up."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial/vr_starter_tutorial_part_one.rst:875
msgid ""
"Then we call ``apply_impulse`` on the ``held_object`` so that the :ref:"
"`RigidBody <class_RigidBody>` is thrown in the direction of the VR "
"controller's velocity, ``controller_velocity``."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial/vr_starter_tutorial_part_one.rst:877
msgid ""
"We then check to see if the object held extends a class called "
"``VR_Interactable_Rigidbody``. If it does, then we call a function called "
"``dropped`` in ``held_object`` and set ``held_object.controller`` to "
"``null``. While we have not made ``VR_Interactable_Rigidbody`` yet, but what "
"this will do is call the ``droppped`` function so the :ref:`RigidBody "
"<class_RigidBody>` can do whatever it needs to do when dropped, and we set "
"the ``controller`` variable to ``null`` so that the :ref:`RigidBody "
"<class_RigidBody>` knows that it is not being held."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial/vr_starter_tutorial_part_one.rst:885
msgid ""
"Regardless of whether ``held_object`` extends ``VR_Interactable_Rigidbody`` "
"or not, we then set ``held_object`` to ``null`` so the VR controller knows "
"it is no longer holding anything. Because the VR controller is no longer "
"holding anything, we make the ``hand_mesh`` visible by setting ``hand_mesh."
"visible`` to true."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial/vr_starter_tutorial_part_one.rst:888
msgid ""
"Finally, if the ``grab_mode`` variable is set to ``RAYCAST``, we set "
"``grab_raycast.visible`` to ``true`` so the 'laser sight' for the :ref:"
"`Raycast <class_Raycast>` in ``grab_raycast`` is visible."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial/vr_starter_tutorial_part_one.rst:892
msgid "``_on_button_pressed_menu`` function step-by-step explanation"
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial/vr_starter_tutorial_part_one.rst:894
msgid ""
"First this function checks to see if the ``grab_mode`` variable is equal to "
"``AREA``. If it is, then it sets ``grab_mode`` to ``RAYCAST``. It then "
"checks to see if the VR controller is not holding anything by checking to "
"see if ``held_object`` is equal to ``null``. If the VR controller is not "
"holding anything, then ``grab_raycast.visible`` is set to ``true`` so the "
"'laser sight' on the grab raycast is visible."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial/vr_starter_tutorial_part_one.rst:898
msgid ""
"If the ``grab_mode`` variable is not equal to ``AREA``, then it checks to "
"see if it is equal to ``RAYCAST``. If it is, then it sets the ``grab_mode`` "
"to ``AREA`` and sets ``grab_raycast.visible`` to ``false`` so the 'laser "
"sight' on the grab raycast is not visible."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial/vr_starter_tutorial_part_one.rst:901
msgid ""
"This section of code simply changes how the VR controller will grab :ref:"
"`RigidBody <class_RigidBody>`-based nodes when the grab/grip button is "
"pressed. If ``grab_mode`` is set to ``AREA``, then the :ref:`Area "
"<class_Area>` node in ``grab_area`` will be used for detecting :ref:"
"`RigidBody <class_RigidBody>` nodes, while if ``grab_mode`` is set to "
"``RAYCAST`` the :ref:`Raycast <class_Raycast>` node in ``grab_raycast`` will "
"be used for detecting :ref:`RigidBody <class_RigidBody>` nodes."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial/vr_starter_tutorial_part_one.rst:907
msgid "``button_released`` function step-by-step explanation"
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial/vr_starter_tutorial_part_one.rst:909
msgid ""
"The only section of code in this function checks to see if the index of the "
"button that was just released, ``button_index``, is equal to ``15``, which "
"should map to the trigger button on the VR controller. The ``button_index`` "
"variable is passed in by the ``button_release`` signal in :ref:"
"`ARVRController <class_ARVRController>`, which we connected in the "
"``_ready`` function."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial/vr_starter_tutorial_part_one.rst:912
msgid ""
"If the trigger button was just released, then the "
"``_on_button_released_trigger`` function is called."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial/vr_starter_tutorial_part_one.rst:916
msgid "``_on_button_released_trigger`` function step-by-step explanation"
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial/vr_starter_tutorial_part_one.rst:918
msgid ""
"The only section of code in this function first checks to see if the VR "
"controller is trying to teleport by checking if the ``teleport_button_down`` "
"variable is equal to ``true``."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial/vr_starter_tutorial_part_one.rst:920
msgid ""
"If the ``teleport_button_down`` variable is equal to ``true``, the code then "
"checks if there is a teleport position set and whether the teleport mesh is "
"visible. It does this by checking to see if ``teleport_pos`` is not equal to "
"``null`` and if ``teleport_mesh.visible`` is equal to ``true``."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial/vr_starter_tutorial_part_one.rst:923
msgid ""
"If there is a teleport position set and the teleport mesh is visible, the "
"code then calculates the offset from the camera to the :ref:`ARVROrigin "
"<class_ARVROrigin>` node, which is assumed to be the parent node of the VR "
"controller. To calculate the offset, the global position (``global_transform."
"origin``) of the ``Player_Camera`` node has the global position of the :ref:"
"`ARVROrigin <class_ARVROrigin>` subtracted from it. This will result in a "
"vector that points from the :ref:`ARVROrigin <class_ARVROrigin>` to the :ref:"
"`ARVRCamera <class_ARVRCamera>`, which we store in a variable called "
"``camera_offset``."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial/vr_starter_tutorial_part_one.rst:927
msgid ""
"The reason we need to know the offset is because some VR headsets use room "
"tracking, where the player's camera can be offset from the :ref:`ARVROrigin "
"<class_ARVROrigin>` node. Because of this, when we teleport we want to keep "
"the offset created by room tracking so that when the player teleports, the "
"offset created by the room tracking is not applied. Without this, if you "
"moved in a room and then teleported, instead of appearing at the position "
"you wanted to teleport at, your position would be offset by the amount of "
"distance you have from the :ref:`ARVROrigin <class_ARVROrigin>` node."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial/vr_starter_tutorial_part_one.rst:931
msgid ""
"Now that we know the offset from the VR camera to the VR origin, we need to "
"remove the difference on the ``Y`` axis. We do this because we do not want "
"to offset based on the user's height. If we did not do this, when "
"teleporting the player's head would be level with the ground."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial/vr_starter_tutorial_part_one.rst:934
msgid ""
"Then we can 'teleport' the player by setting the global position "
"(``global_transform.origin``) of the ARVROrigin node to the position stored "
"in ``teleport_pos`` with ``camera_offset`` subtracted from it. This will "
"teleport the player and remove the room tracking offset, so the user appears "
"exactly where they want when teleporting."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial/vr_starter_tutorial_part_one.rst:937
msgid ""
"Finally, regardless of whether the VR controller teleported the user or not, "
"we reset the teleport related variables. ``teleport_button_down`` is set to "
"``false``, ``teleport_mesh.visible`` is set to ``false`` so the mesh is "
"invisible, ``teleport_raycast.visible`` is set to ``false``, and "
"``teleport_pos`` is set to ``null``."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial/vr_starter_tutorial_part_one.rst:942
msgid "``sleep_area_entered`` function step-by-step explanation"
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial/vr_starter_tutorial_part_one.rst:944
msgid ""
"The only section of code in this function checks to see if the :ref:"
"`PhysicsBody <class_PhysicsBody>` node that entered the ``Sleep_Area`` node "
"has a variable called ``can_sleep``. If it does, then it sets the "
"``can_sleep`` variable to ``false`` and sets the ``sleeping`` variable to "
"``false``."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial/vr_starter_tutorial_part_one.rst:947
msgid ""
"Without doing this, sleeping :ref:`PhysicsBody <class_PhysicsBody>` nodes "
"would not be able to be picked up by the VR controller, even if the VR "
"controller is at the same position as the :ref:`PhysicsBody "
"<class_PhysicsBody>` node. To work around this, we simply 'wake up' :ref:"
"`PhysicsBody <class_PhysicsBody>` nodes that are close to the VR controller."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial/vr_starter_tutorial_part_one.rst:953
msgid "``sleep_area_exited`` function step-by-step explanation"
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial/vr_starter_tutorial_part_one.rst:955
msgid ""
"The only section of code in this function checks to see if the :ref:"
"`PhysicsBody <class_PhysicsBody>` node that entered the ``Sleep_Area`` node "
"has a variable called ``can_sleep``. If it does, then it sets the "
"``can_sleep`` variable to ``true``."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial/vr_starter_tutorial_part_one.rst:958
msgid ""
"This allows :ref:`RigidBody <class_RigidBody>` nodes that leave the "
"``Sleep_Area`` to sleep again, saving performance."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial/vr_starter_tutorial_part_one.rst:962
msgid ""
"Okay, whew! That was a lot of code! Add the same script, ``VR_Controller."
"gd`` to the other VR controller scene so both VR controllers have the same "
"script."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial/vr_starter_tutorial_part_one.rst:964
msgid ""
"Now we just need to do one thing before testing the project! Right now we "
"are referencing a class called ``VR_Interactable_Rigidbody``, but we have "
"not defined it yet. While we will not be using ``VR_Interactable_Rigidbody`` "
"in this tutorial, let's create it real quick so the project can be run."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial/vr_starter_tutorial_part_one.rst:970
msgid "Creating a base class for interactable VR objects"
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial/vr_starter_tutorial_part_one.rst:972
msgid ""
"With the ``Script`` tab still open, create a new GDScript called "
"``VR_Interactable_Rigidbody.gd``."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial/vr_starter_tutorial_part_one.rst:974
msgid ""
"You can create GDScripts in the ``Script`` tab by pressing ``File -> New "
"Script...``."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial/vr_starter_tutorial_part_one.rst:976
#, fuzzy
msgid ""
"Once you have ``VR_Interactable_Rigidbody.gd`` open, add the following code:"
msgstr "kinematic body에 스크립트를 추가하고 다음과 같은 코드를 추가합니다:"

#: ../../docs/tutorials/vr/vr_starter_tutorial/vr_starter_tutorial_part_one.rst:1004
#, fuzzy
msgid "Let's quickly go through what this script."
msgstr "스크립트를 살펴보겠습니다:"

#: ../../docs/tutorials/vr/vr_starter_tutorial/vr_starter_tutorial_part_one.rst:1008
msgid ""
"First we start the script with ``class_name VR_Interactable_Rigidbody``. "
"What this does is that it tells Godot that this GDScript is a new class that "
"called ``VR_Interactable_Rigidbody``. This allows us to compare nodes "
"against the ``VR_Interactable_Rigidbody`` class in other script files "
"without having to load the script directly or do anything special. We can "
"compare the class just like all of the built-in Godot classes."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial/vr_starter_tutorial_part_one.rst:1012
msgid ""
"Next is a class variable called ``controller``. ``controller`` will be used "
"to hold a reference to the VR controller that is currently holding the "
"object. If a VR controller is not holding the object, then the "
"``controller`` variable will be ``null``. The reason we need to have a "
"reference to the VR controller is so held objects can access VR controller "
"specific data, like ``controller_velocity``."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial/vr_starter_tutorial_part_one.rst:1016
msgid ""
"Finally, we have four functions. The ``_ready`` function is defined by Godot "
"and all we do is simply have ``pass`` as there is nothing we need to do when "
"the object is added to the scene in ``VR_Interactable_Rigidbody``."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial/vr_starter_tutorial_part_one.rst:1019
msgid ""
"The ``interact`` function is a stub function that will be called when the "
"interact button on the VR controller, the trigger in this case, is pressed "
"while the object is held."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial/vr_starter_tutorial_part_one.rst:1021
msgid ""
"A stub function is a function that is defined but does not have any code. "
"Stub functions are generally designed to be overwritten or extended. In this "
"project, we are using the stub functions so there is a consistent interface "
"across all interactable :ref:`RigidBody <class_RigidBody>` objects."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial/vr_starter_tutorial_part_one.rst:1024
msgid ""
"The ``picked_up`` and ``dropped`` functions are stub functions that will be "
"called when the object is picked up and dropped by the VR controller."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial/vr_starter_tutorial_part_one.rst:1028
msgid ""
"That is all we need to do for now! In the next part of this tutorial series, "
"we'll start making special interactable :ref:`RigidBody <class_RigidBody>` "
"objects."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial/vr_starter_tutorial_part_one.rst:1030
msgid ""
"Now that the base class is defined, the code in the VR controller should "
"work. Go ahead and try the game again, and you should find you can teleport "
"around by pressing the touch pad, and can grab and throw objects using the "
"grab/grip buttons."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial/vr_starter_tutorial_part_one.rst:1033
msgid ""
"Now, you may want to try moving using the trackpads and/or joysticks, but "
"**it may make you motion sick!**"
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial/vr_starter_tutorial_part_one.rst:1035
msgid ""
"One of the main reasons this can make you feel motion sick is because your "
"vision tells you that you are moving, while your body is not moving. This "
"conflict of signals can make the body feel sick. Let's add a vignette shader "
"to help reduce motion sickness while moving in VR!"
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial/vr_starter_tutorial_part_one.rst:1041
msgid "Reducing motion sickness"
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial/vr_starter_tutorial_part_one.rst:1043
msgid ""
"There are plenty of ways to reduce motion sickness in VR, and there is no "
"one perfect way to reduce motion sickness. See `this page on the Oculus "
"Developer Center <https://developer.oculus.com/design/latest/concepts/bp-"
"locomotion/>`_ for more information on how to implement locomotion and "
"reducing motion sickness."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial/vr_starter_tutorial_part_one.rst:1047
msgid ""
"To help reduce motion sickness while moving, we are going to add a vignette "
"effect that will only be visible while the player moves."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial/vr_starter_tutorial_part_one.rst:1049
msgid ""
"First, quickly switch back to ``Game.tscn```. Under the :ref:`ARVROrigin "
"<class_ARVROrigin>` node there is a child node called ``Movement_Vignette``. "
"This node is going to apply a simple vignette to the VR headset when the "
"player is moving using the VR controllers. This should help reduce motion "
"sickness."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial/vr_starter_tutorial_part_one.rst:1052
msgid ""
"Open up ``Movement_Vignette.tscn``, which you can find in the ``Scenes`` "
"folder. The scene is just a :ref:`ColorRect <class_ColorRect>` node with a "
"custom shader. Feel free to look at the custom shader if you want, it is "
"just a slightly modified version of the vignette shader you can find in the "
"`Godot demo repository <https://github.com/godotengine/godot-demo-"
"projects>`_."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial/vr_starter_tutorial_part_one.rst:1056
msgid ""
"Let's write the code that will make the vignette shader visible when the "
"player is moving. Select the ``Movement_Vignette`` node and create a new "
"script called ``Movement_Vignette.gd``. Add the following code:"
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial/vr_starter_tutorial_part_one.rst:1099
msgid ""
"Because this script is fairly brief, let's quickly go over what it does."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial/vr_starter_tutorial_part_one.rst:1103
#, fuzzy
msgid "Explaining the vignette code"
msgstr "파일 아이콘 바꾸기"

#: ../../docs/tutorials/vr/vr_starter_tutorial/vr_starter_tutorial_part_one.rst:1105
msgid ""
"There are two class variables, ``controller_one`` and ``controller_two``. "
"These variables will hold references to the left and right VR controllers."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial/vr_starter_tutorial_part_one.rst:1109
msgid ""
"In the ``_ready`` function first waits for four frames using ``yield``. The "
"reason we are waiting four frames is because we want to ensure the VR "
"interface is ready and accessible."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial/vr_starter_tutorial_part_one.rst:1112
msgid ""
"After waiting the primary VR interface is retrieved using ``ARVRServer."
"primary_interface``, which is assigned to a variable called ``interface``. "
"The code then checks to see if ``interface`` is equal to ``null``. If "
"``interface`` is equal to ``null``, then ``_process`` is disabled using "
"``set_process`` with a value of ``false``."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial/vr_starter_tutorial_part_one.rst:1115
msgid ""
"If ``interface`` is not ``null``, then we set the ``rect_size`` of the "
"vignette shader to the render size of the VR viewport so it takes up the "
"entire screen. We need to do this because different VR headsets have "
"different resolutions and aspect ratios, so we need to resize the node "
"accordingly. We also set the ``rect_position`` of the vignette shader to "
"zero so it is in the correct position relative to the screen."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial/vr_starter_tutorial_part_one.rst:1119
msgid ""
"The left and right VR controllers are then retrieved and assigned to "
"``controller_one`` and ``controller_two`` respectively. Finally, the "
"vignette shader is made invisible by default by setting it's ``visible`` "
"property to ``false``."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial/vr_starter_tutorial_part_one.rst:1124
msgid ""
"In ``_process`` the code first checks if either ``controller_one`` or "
"``controller_two`` are equal to ``null``. If either node is equal to "
"``null``, then ``return`` is called so nothing happens."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial/vr_starter_tutorial_part_one.rst:1127
msgid ""
"Then the code checks to see if either of the VR controllers are moving the "
"player using the touchpad/joystick by checking if ``directional_movement`` "
"is equal to ``true`` in ``controller_one`` or ``controller_two``. If either "
"of the VR controllers are moving the player, then the vignette shader makes "
"itself visible by setting it's ``visible`` property to ``true``. If neither "
"VR controller is moving the player, so ``directional_movement`` is ``false`` "
"in both VR controllers, than the vignette shader makes itself invisible by "
"setting it's ``visible`` property to ``false``."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial/vr_starter_tutorial_part_one.rst:1134
msgid ""
"That is the whole script! Now that we have written the code, go ahead and "
"try moving around with the trackpad and/or joystick. You should find that it "
"is less motion sickness-inducing then before!"
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial/vr_starter_tutorial_part_one.rst:1137
msgid ""
"As previously mentioned, there are plenty of ways to reduce motion sickness "
"in VR. Check out `this page on the Oculus Developer Center <https://"
"developer.oculus.com/design/latest/concepts/bp-locomotion/>`_ for more "
"information on how to implement locomotion and reducing motion sickness."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial/vr_starter_tutorial_part_one.rst:1148
msgid ""
"Now you have fully working VR controllers that can move around the "
"environment and interact with :ref:`RigidBody <class_RigidBody>`-based "
"objects. In the next part of this tutorial series, we will be creating some "
"special :ref:`RigidBody <class_RigidBody>`-based objects for the player to "
"use!"
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial/vr_starter_tutorial_part_one.rst:1151
msgid ""
"You can download the finished project for this tutorial series on the Godot "
"OpenVR GitHub repository, under the releases tab!"
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial/vr_starter_tutorial_part_two.rst:4
#, fuzzy
msgid "VR starter tutorial part 2"
msgstr "VR 초심자 튜토리얼"

#: ../../docs/tutorials/vr/vr_starter_tutorial/vr_starter_tutorial_part_two.rst:11
msgid ""
"In this part of the VR starter tutorial series, we will be adding a number "
"of special :ref:`RigidBody <class_RigidBody>`-based nodes that can be used "
"in VR."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial/vr_starter_tutorial_part_two.rst:13
msgid ""
"This continues from where we left on in the last tutorial part, where we "
"just finished getting the VR controllers working and defined a custom class "
"called ``VR_Interactable_Rigidbody``."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial/vr_starter_tutorial_part_two.rst:20
msgid "Adding destroyable targets"
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial/vr_starter_tutorial_part_two.rst:22
msgid ""
"Before we make any of the special :ref:`RigidBody <class_RigidBody>`-based "
"nodes, we need something for them to do. Let's make a simple sphere target "
"that will break into a bunch of pieces when destroyed."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial/vr_starter_tutorial_part_two.rst:25
msgid ""
"Open up ``Sphere_Target.tscn``, which is in the ``Scenes`` folder. The scene "
"is fairly simple, with just a :ref:`StaticBody <class_StaticBody>` with a "
"sphere shaped :ref:`CollisionShape <class_CollisionShape>`, a :ref:"
"`MeshInstance <class_MeshInstance>` node displaying a sphere mesh, and an :"
"ref:`AudioStreamPlayer3D <class_AudioStreamPlayer3D>` node."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial/vr_starter_tutorial_part_two.rst:28
msgid ""
"The special :ref:`RigidBody <class_RigidBody>` nodes will handle damaging "
"the sphere, which is why we are using a :ref:`StaticBody <class_StaticBody>` "
"node instead of something like an :ref:`Area <class_Area>` or :ref:"
"`RigidBody <class_RigidBody>` node. Outside of that, there isn't really a "
"lot to talk about, so let's move straight into writing the code."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial/vr_starter_tutorial_part_two.rst:31
msgid ""
"Select the ``Sphere_Target_Root`` node and make a new script called "
"``Sphere_Target.gd``. Add the following code:"
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial/vr_starter_tutorial_part_two.rst:79
#: ../../docs/tutorials/vr/vr_starter_tutorial/vr_starter_tutorial_part_two.rst:263
#: ../../docs/tutorials/vr/vr_starter_tutorial/vr_starter_tutorial_part_two.rst:658
#, fuzzy
msgid "Let's go over how this script works."
msgstr "각각이 하는 일을 살펴보겠습니다:"

#: ../../docs/tutorials/vr/vr_starter_tutorial/vr_starter_tutorial_part_two.rst:82
msgid "Explaining the Sphere Target code"
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial/vr_starter_tutorial_part_two.rst:86
msgid ""
"``destroyed``: A variable to track whether the sphere target has been "
"destroyed."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial/vr_starter_tutorial_part_two.rst:87
msgid ""
"``destroyed_timer``: A variable to track how long the sphere target has been "
"destroyed."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial/vr_starter_tutorial_part_two.rst:88
msgid ""
"``DESTROY_WAIT_TIME``: A constant to define the length of time the target "
"can be destroyed for before it frees/deletes itself."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial/vr_starter_tutorial_part_two.rst:89
msgid ""
"``health``: A variable to store the amount of health the sphere target has."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial/vr_starter_tutorial_part_two.rst:90
msgid ""
"``RIGID_BODY_TARGET``: A constant to hold the scene of the destroyed sphere "
"target."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial/vr_starter_tutorial_part_two.rst:92
msgid ""
"Feel free to check out the ``RIGID_BODY_TARGET`` scene. It is just a bunch "
"of :ref:`RigidBody <class_RigidBody>` nodes and a broken sphere model."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial/vr_starter_tutorial_part_two.rst:94
msgid ""
"We'll be instancing this scene so when the target is destroyed, it looks "
"like it broke into a bunch of pieces."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial/vr_starter_tutorial_part_two.rst:100
msgid ""
"All the ``_ready`` function does is that it stops the ``_physics_process`` "
"from being called by calling ``set_physics_process`` and passing ``false``. "
"The reason we do this is because all of the code in ``_physics_process`` is "
"for destroying this node when enough time has passed, which we only want to "
"do when the target has been destroyed."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial/vr_starter_tutorial_part_two.rst:108
msgid ""
"First this function adds time, ``delta``, to the ``destroyed_timer`` "
"variable. It then checks to see if ``destroyed_timer`` is greater than or "
"equal to ``DESTROY_WAIT_TIME``. If ``destroyed_timer`` is greater than or "
"equal to ``DESTROY_WAIT_TIME``, then the sphere target frees/deletes itself "
"by calling the ``queue_free`` function."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial/vr_starter_tutorial_part_two.rst:113
msgid "``damage`` function step-by-step explanation"
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial/vr_starter_tutorial_part_two.rst:115
msgid ""
"The ``damage`` function will be called by the special :ref:`RigidBody "
"<class_RigidBody>` nodes, which will pass the amount of damage done to the "
"target, which is a function argument variable called ``damage``. The "
"``damage`` variable will hold the amount of damage the special :ref:"
"`RigidBody <class_RigidBody>` node did to the sphere target."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial/vr_starter_tutorial_part_two.rst:118
msgid ""
"First this function checks to make sure the target is not already destroyed "
"by checking if the ``destroyed`` variable is equal to ``true``. If "
"``destroyed`` is equal to ``true``, then the function calls ``return`` so "
"none of the other code is called. This is just a safety check so that if two "
"things damage the target at exactly the same time, the target cannot be "
"destroyed twice."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial/vr_starter_tutorial_part_two.rst:122
msgid ""
"Next the function removes the amount of damage taken, ``damage``, from the "
"target's health, ``health``. If then checks to see if ``health`` is equal to "
"zero or less, meaning that the target has just been destroyed."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial/vr_starter_tutorial_part_two.rst:125
msgid ""
"If the target has just been destroyed, then we disable the :ref:"
"`CollisionShape <class_CollisionShape>` by setting it's ``disabled`` "
"property to ``true``. We then make the ``Sphere_Target`` :ref:`MeshInstance "
"<class_MeshInstance>` invisible by setting the ``visible`` property to "
"``false``. We do this so the target can no longer effect the physics world "
"and so the non-broken target mesh is not visible."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial/vr_starter_tutorial_part_two.rst:128
msgid ""
"After this the function then instances the ``RIGID_BODY_TARGET`` scene and "
"adds it as a child of the target. It then sets the ``global_transform`` of "
"the newly instanced scene, called ``clone``, to the ``global_transform`` of "
"the non-broken target. This makes it where the broken target starts at the "
"same position as the non-broken target with the same rotation and scale."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial/vr_starter_tutorial_part_two.rst:131
msgid ""
"Then the function sets the ``destroyed`` variable to ``true`` so the target "
"knows it has been destroyed and calls the ``set_physics_process`` function "
"and passes ``true``. This will start executing the code in "
"``_physics_process`` so that after ``DESTROY_WAIT_TIME`` seconds have "
"passed, the sphere target will free/destroy itself."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial/vr_starter_tutorial_part_two.rst:134
msgid ""
"The function then gets the :ref:`AudioStreamPlayer3D "
"<class_AudioStreamPlayer3D>` node and calls the ``play`` function so it "
"plays its sound."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial/vr_starter_tutorial_part_two.rst:136
msgid ""
"Finally, the ``remove_sphere`` function is called in ``Game.gd``. To get "
"``Game.gd``, the code uses the scene tree and works its way from the root of "
"the scene tree to the root of the ``Game.tscn`` scene."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial/vr_starter_tutorial_part_two.rst:141
msgid "Adding the ``remove_sphere`` function to ``Game.gd``"
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial/vr_starter_tutorial_part_two.rst:143
msgid ""
"You may have noticed we are calling a function in ``Game.gd``, called "
"``remove_sphere``, that we have not defined yet. Open up ``Game.gd`` and add "
"the following additional class variables:"
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial/vr_starter_tutorial_part_two.rst:152
msgid ""
"``spheres_left``: The amount of sphere targets left in the world. In the "
"provided ``Game`` scene, there are ``10`` spheres, so that is the initial "
"value."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial/vr_starter_tutorial_part_two.rst:153
msgid ""
"``sphere_ui``: A reference to the sphere UI. We will use this later in the "
"tutorial to display the amount of spheres left in the world."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial/vr_starter_tutorial_part_two.rst:155
msgid ""
"With these variables defined, we can now add the ``remove_sphere`` function. "
"Add the following code to ``Game.gd``:"
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial/vr_starter_tutorial_part_two.rst:167
#, fuzzy
msgid "Let's go through what this function does real quick:"
msgstr "각각이 하는 일을 살펴보겠습니다:"

#: ../../docs/tutorials/vr/vr_starter_tutorial/vr_starter_tutorial_part_two.rst:169
msgid ""
"First, it removes one from the ``spheres_left`` variable. It then checks to "
"see if the ``sphere_ui`` variable is not equal to ``null``, and if it is not "
"equal to ``null`` it calls the ``update_ui`` function on ``sphere_ui``, "
"passing in the number of spheres as an argument to the function."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial/vr_starter_tutorial_part_two.rst:172
msgid "We will add the code for ``sphere_ui`` later in this tutorial!"
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial/vr_starter_tutorial_part_two.rst:174
msgid ""
"Now the ``Sphere_Target`` is ready to be used, but we don't have any way to "
"destroy it. Let's fix that by adding some special :ref:`RigidBody "
"<class_RigidBody>`-based nodes that can damage the targets."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial/vr_starter_tutorial_part_two.rst:179
msgid "Adding a pistol"
msgstr "권총을 추가하기"

#: ../../docs/tutorials/vr/vr_starter_tutorial/vr_starter_tutorial_part_two.rst:181
msgid ""
"Let's add a pistol as the first interactable :ref:`RigidBody "
"<class_RigidBody>` node. Open up ``Pistol.tscn``, which you can find in the "
"``Scenes`` folder."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial/vr_starter_tutorial_part_two.rst:183
msgid ""
"Let's quickly go over a few things of note in ``Pistol.tscn`` real quick "
"before we add the code."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial/vr_starter_tutorial_part_two.rst:185
msgid ""
"All of the nodes in ``Pistol.tscn`` expect the root node are rotated. This "
"is so the pistol is in the correct rotation relative to the VR controller "
"when it is picked up. The root node is a :ref:`RigidBody <class_RigidBody>` "
"node, which we need because we're going to use the "
"``VR_Interactable_Rigidbody`` class we created in the last part of this "
"tutorial series."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial/vr_starter_tutorial_part_two.rst:188
msgid ""
"There is a :ref:`MeshInstance <class_MeshInstance>` node called "
"``Pistol_Flash``, which is a simple mesh that we will be using to simulate "
"the muzzle flash on the end of the pistol's barrel. A :ref:`MeshInstance "
"<class_MeshInstance>` node called ``LaserSight`` is used to as a guide for "
"aiming the pistol, and it follows the direction of the :ref:`Raycast "
"<class_Raycast>` node, called ``Raycast``, that the pistol uses to detect if "
"its 'bullet' hit something. Finally, there is an :ref:`AudioStreamPlayer3D "
"<class_AudioStreamPlayer3D>` node at the end of the pistol that we will use "
"to play the sound of the pistol firing."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial/vr_starter_tutorial_part_two.rst:193
msgid ""
"Feel free to look at the other parts of the scene if you want. Most of the "
"scene is fairly straightforward, with the major changes mentioned above. "
"Select the :ref:`RigidBody <class_RigidBody>` node called ``Pistol`` and "
"make a new script called ``Pistol.gd``. Add the following code:"
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial/vr_starter_tutorial_part_two.rst:267
#, fuzzy
msgid "Explaining the pistol code"
msgstr "파일 아이콘 바꾸기"

#: ../../docs/tutorials/vr/vr_starter_tutorial/vr_starter_tutorial_part_two.rst:269
msgid ""
"First, notice how instead of ``extends RigidBody``, we instead have "
"``extends VR_Interactable_Rigidbody``. This makes it where the pistol script "
"extends the ``VR_Interactable_Rigidbody`` class so the VR controllers know "
"this object can be interacted with and that the functions defined in "
"``VR_Interactable_Rigidbody`` can be called when this object is held by a VR "
"controller."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial/vr_starter_tutorial_part_two.rst:273
#: ../../docs/tutorials/vr/vr_starter_tutorial/vr_starter_tutorial_part_two.rst:667
#: ../../docs/tutorials/vr/vr_starter_tutorial/vr_starter_tutorial_part_two.rst:849
msgid "Next, let's look at the class variables:"
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial/vr_starter_tutorial_part_two.rst:275
msgid ""
"``flash_mesh``: A variable to hold the :ref:`MeshInstance "
"<class_MeshInstance>` node that is used to simulate muzzle flash on the "
"pistol."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial/vr_starter_tutorial_part_two.rst:276
msgid ""
"``FLASH_TIME``: A constant to define how long the muzzle flash will be "
"visible. This will also define how fast the pistol can fire."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial/vr_starter_tutorial_part_two.rst:277
msgid ""
"``flash_timer``: A variable to hold the amount of time the muzzle flash has "
"been visible for."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial/vr_starter_tutorial_part_two.rst:278
msgid ""
"``laser_sight_mesh``: A variable to hold the :ref:`MeshInstance "
"<class_MeshInstance>` node that acts as the pistol's 'laser sight'."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial/vr_starter_tutorial_part_two.rst:279
msgid ""
"``pistol_fire_sound``: A variable to hold the :ref:`AudioStreamPlayer3D "
"<class_AudioStreamPlayer3D>` node used for the pistol's firing sound."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial/vr_starter_tutorial_part_two.rst:280
msgid ""
"``raycast``: A variable to hold the :ref:`Raycast <class_Raycast>` node that "
"is used for calculating the bullet's position and normal when the pistol is "
"fired."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial/vr_starter_tutorial_part_two.rst:281
msgid ""
"``BULLET_DAMAGE``: A constant to define the amount of damage a single bullet "
"from the pistol does."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial/vr_starter_tutorial_part_two.rst:282
msgid ""
"``COLLISION_FORCE``: A constant that defines the amount of force that is "
"applied to :ref:`RigidBody <class_RigidBody>` nodes when the pistol's bullet "
"collides."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial/vr_starter_tutorial_part_two.rst:288
msgid ""
"This function gets the nodes and assigns them to their proper variables. For "
"the ``flash_mesh`` and ``laser_sight_mesh`` nodes, both have their "
"``visible`` property set to ``false`` so they are not visible initially."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial/vr_starter_tutorial_part_two.rst:294
msgid ""
"The ``_physics_process`` function first checks to see if the pistol's muzzle "
"flash is visible by checking if ``flash_timer`` is more than zero. If "
"``flash_timer`` is more than zero, then we remove time, ``delta`` from it. "
"Next we check if the ``flash_timer`` variable is zero or less now that we "
"removed ``delta`` from it. If it is, then the pistol muzzle flash timer just "
"finished and so we need to make ``flash_mesh`` invisible by setting it's "
"``visible`` property to ``false``."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial/vr_starter_tutorial_part_two.rst:299
#: ../../docs/tutorials/vr/vr_starter_tutorial/vr_starter_tutorial_part_two.rst:473
#: ../../docs/tutorials/vr/vr_starter_tutorial/vr_starter_tutorial_part_two.rst:760
msgid "``interact`` function step-by-step explanation"
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial/vr_starter_tutorial_part_two.rst:301
msgid ""
"The interact function first checks to see if the pistol's muzzle flash is "
"invisible by checking to see if ``flash_timer`` is less than or equal to "
"zero. We do this so we can limit the rate of fire of the pistol to the "
"length of time the muzzle flash is visible, which is a simple solution for "
"limiting how fast the player can fire."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial/vr_starter_tutorial_part_two.rst:304
msgid ""
"If ``flash_timer`` is zero or less, we then set ``flash_timer`` to "
"``FLASH_TIME`` so there is a delay before the pistol can fire again. After "
"that we set ``flash_mesh.visible`` to ``true`` so the muzzle flash at the "
"end of the pistol is visible while ``flash_timer`` is more than zero."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial/vr_starter_tutorial_part_two.rst:307
#: ../../docs/tutorials/vr/vr_starter_tutorial/vr_starter_tutorial_part_two.rst:481
msgid ""
"Next we call the ``force_raycast_update`` function on the :ref:`Raycast "
"<class_Raycast>` node in ``raycast`` so that it gets the latest collision "
"info from the physics world. We then check if the ``raycast`` hit something "
"by checking if the ``is_colliding`` function is equal to ``true``."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial/vr_starter_tutorial_part_two.rst:312
#: ../../docs/tutorials/vr/vr_starter_tutorial/vr_starter_tutorial_part_two.rst:501
msgid ""
"If the ``raycast`` hit something, then we get the :ref:`PhysicsBody "
"<class_PhysicsBody>` it collided with through the ``get_collider`` function. "
"We assign the hit :ref:`PhysicsBody <class_PhysicsBody>` to a variable "
"called ``body``."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial/vr_starter_tutorial_part_two.rst:315
msgid ""
"We then get the direction of the :ref:`Raycast <class_Raycast>` by getting "
"it's positive ``Z`` directional axis from the :ref:`Basis <class_Basis>` on "
"the ``raycast`` node's ``global_transform``. This will give us the direction "
"the raycast is pointing on the Z axis, which is the same direction as the "
"blue arrow on the :ref:`Spatial <class_Spatial>` gizmo when ``Local space "
"mode`` is enabled in the Godot editor. We store this direction in a variable "
"called ``direction_vector``."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial/vr_starter_tutorial_part_two.rst:319
msgid ""
"Next we get the distance from the :ref:`Raycast <class_Raycast>` origin to "
"the :ref:`Raycast <class_Raycast>` collision point by getting the distance "
"from the global position, ``global_transform.origin`` of the ``raycast`` "
"node to the collision point of the :ref:`Raycast <class_Raycast>`, ``raycast."
"get_collision_point``, using the ``distance_to`` function. This will give us "
"the distance the :ref:`Raycast <class_Raycast>` traveled before it collided, "
"which we store in a variable called ``raycast_distance``."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial/vr_starter_tutorial_part_two.rst:323
#: ../../docs/tutorials/vr/vr_starter_tutorial/vr_starter_tutorial_part_two.rst:512
msgid ""
"Then the code checks if the :ref:`PhysicsBody <class_PhysicsBody>`, "
"``body``, has a function/method called ``damage`` using the ``has_method`` "
"function. If the :ref:`PhysicsBody <class_PhysicsBody>` has a function/"
"method called ``damage``, then we call the ``damage`` function and pass "
"``BULLET_DAMAGE`` so it takes damage from the bullet colliding into it."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial/vr_starter_tutorial_part_two.rst:326
#: ../../docs/tutorials/vr/vr_starter_tutorial/vr_starter_tutorial_part_two.rst:515
msgid ""
"Regardless of whether the :ref:`PhysicsBody <class_PhysicsBody>` has a "
"``damage`` function, we then check to see if ``body`` is a :ref:`RigidBody "
"<class_RigidBody>`-based node. If ``body`` is a :ref:`RigidBody "
"<class_RigidBody>`-based node, then we want to push it when the bullet "
"collides."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial/vr_starter_tutorial_part_two.rst:329
#: ../../docs/tutorials/vr/vr_starter_tutorial/vr_starter_tutorial_part_two.rst:518
msgid ""
"To calculate the amount of force applied, we simply take ``COLLISION_FORCE`` "
"and divide it by ``raycast_distance``, then we multiply the whole thing by "
"``body.mass``. We store this calculation in a variable called "
"``collision_force``. This will make collisions over a shorter distance apply "
"move force than those over longer distances, giving a *slightly* more "
"realistic collision response."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial/vr_starter_tutorial_part_two.rst:332
#: ../../docs/tutorials/vr/vr_starter_tutorial/vr_starter_tutorial_part_two.rst:521
msgid ""
"We then push the :ref:`RigidBody <class_RigidBody>` using the "
"``apply_impulse`` function, where the position is a zero Vector3 so the "
"force is applied from the center, and the collision force is the "
"``collision_force`` variable we calculated."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial/vr_starter_tutorial_part_two.rst:336
msgid ""
"Regardless of whether the ``raycast`` variable hit something or not, we then "
"play the pistol shot sound by calling the ``play`` function on the "
"``pistol_fire_sound`` variable."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial/vr_starter_tutorial_part_two.rst:338
msgid ""
"Finally, we check to see if the pistol is being held by a VR controller by "
"checking to see if the ``controller`` variable is not equal to ``null``. If "
"it is not equal to ``null``, we then set the ``rumble`` property of the VR "
"controller to ``0.25``, so there is a slight rumble when the pistol fires."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial/vr_starter_tutorial_part_two.rst:343
msgid "``picked_up`` function step-by-step explanation"
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial/vr_starter_tutorial_part_two.rst:345
msgid ""
"This function simply makes the ``laser_sight_mesh`` :ref:`MeshInstance "
"<class_MeshInstance>` visible by setting the ``visible`` property to "
"``true``."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial/vr_starter_tutorial_part_two.rst:348
msgid "``dropped`` function step-by-step explanation"
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial/vr_starter_tutorial_part_two.rst:350
msgid ""
"This function simply makes the ``laser_sight_mesh`` :ref:`MeshInstance "
"<class_MeshInstance>` invisible by setting the ``visible`` property to "
"``false``."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial/vr_starter_tutorial_part_two.rst:354
msgid "Pistol finished"
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial/vr_starter_tutorial_part_two.rst:359
msgid ""
"That is all we need to do to have working pistols in the project! Go ahead "
"and run the project. If you climb up the stairs and grab the pistols, you "
"can fire them at the sphere targets in the scene using the trigger button on "
"the VR controller! If you fire at the targets long enough, they will break "
"into pieces."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial/vr_starter_tutorial_part_two.rst:365
msgid "Adding a shotgun"
msgstr "샷건 추가하기"

#: ../../docs/tutorials/vr/vr_starter_tutorial/vr_starter_tutorial_part_two.rst:367
msgid "Next let's add a shotgun to the VR project."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial/vr_starter_tutorial_part_two.rst:369
msgid ""
"Adding a special shotgun :ref:`RigidBody <class_RigidBody>` should be fairly "
"straightforward, as almost everything with the shotgun is the same as the "
"pistol."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial/vr_starter_tutorial_part_two.rst:371
msgid ""
"Open up ``Shotgun.tscn``, which you can find in the ``Scenes`` folder and "
"take a look at the scene. Almost everything is the same as in ``Pistol."
"tscn``. The only thing that is different, beyond name changes, is that "
"instead of a single :ref:`Raycast <class_Raycast>`, there are five :ref:"
"`Raycast <class_Raycast>` nodes. This is because a shotgun generally fires "
"in a cone shape, so we are going to emulate that effect by having several :"
"ref:`Raycast <class_Raycast>` nodes that will rotate randomly in a cone "
"shape when the shotgun fires."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial/vr_starter_tutorial_part_two.rst:376
msgid ""
"Outside of that, everything is more or less the same as ``Pistol.tscn``."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial/vr_starter_tutorial_part_two.rst:378
msgid ""
"Let's write the code for the shotgun. Select the :ref:`RigidBody "
"<class_RigidBody>` node called ``Shotgun`` and make a new script called "
"``Shotgun.gd``. Add the following code:"
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial/vr_starter_tutorial_part_two.rst:456
msgid ""
"The majority of this code is exactly the same as the code for the pistol "
"with just a few *minor* changes that are primarily just different names. Due "
"to how similar these scripts are, let's just focus on the changes."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial/vr_starter_tutorial_part_two.rst:460
#, fuzzy
msgid "Explaining the shotgun code"
msgstr "리소스 해제(Free)하기"

#: ../../docs/tutorials/vr/vr_starter_tutorial/vr_starter_tutorial_part_two.rst:462
msgid ""
"Like with the pistol, the shotgun extends ``VR_Interactable_Rigidbody`` so "
"the VR controllers know that this object can be interacted with and what "
"functions are available."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial/vr_starter_tutorial_part_two.rst:465
msgid "There is only one new class variable:"
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial/vr_starter_tutorial_part_two.rst:467
msgid ""
"``raycasts``: A variable to hold the node that has all of the :ref:`Raycast "
"<class_Raycast>` nodes as its children."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial/vr_starter_tutorial_part_two.rst:469
msgid ""
"The new class variable replaces the ``raycast`` variable from ``Pistol.gd``, "
"because with the shotgun we need to process multiple :ref:`Raycast "
"<class_Raycast>` nodes instead of just one. All of the other class variables "
"are the same as ``Pistol.gd`` and function the same way, some just are "
"renamed to be non-pistol specific."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial/vr_starter_tutorial_part_two.rst:475
msgid ""
"The interact function first checks to see if the shotgun's muzzle flash is "
"invisible by checking to see if ``flash_timer`` is less than or equal to "
"zero. We do this so we can limit the rate of fire of the shotgun to the "
"length of time the muzzle flash is visible, which is a simple solution for "
"limiting how fast the player can fire."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial/vr_starter_tutorial_part_two.rst:478
msgid ""
"If ``flash_timer`` is zero or less, we then set ``flash_timer`` to "
"``FLASH_TIME`` so there is a delay before the shotgun can fire again. After "
"that we set ``flash_mesh.visible`` to ``true`` so the muzzle flash at the "
"end of the shotgun is visible while ``flash_timer`` is more than zero."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial/vr_starter_tutorial_part_two.rst:484
msgid ""
"Next we go through each of the child nodes of the ``raycasts`` variable "
"using a for loop. This way the code will go through each of the :ref:"
"`Raycast <class_Raycast>` nodes that are children of the ``raycasts`` "
"variable."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial/vr_starter_tutorial_part_two.rst:489
msgid ""
"For each node, we check to see if ``raycast`` is *not* a :ref:`Raycast "
"<class_Raycast>` node. If the node is not a :ref:`Raycast <class_Raycast>` "
"node, we simply use ``continue`` to skip it."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial/vr_starter_tutorial_part_two.rst:491
msgid ""
"Next we rotate the ``raycast`` node randomly around a small ``10`` degrees "
"cone by settings the ``rotation_degrees`` variable of the ``raycast`` to a "
"Vector3 where the X and Z axis are a random number from ``-10`` to ``10``. "
"This random number is selected using the ``rand_range`` function."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial/vr_starter_tutorial_part_two.rst:494
msgid ""
"Then we call the ``force_raycast_update`` function on the :ref:`Raycast "
"<class_Raycast>` node in ``raycast`` so that it gets the latest collision "
"info from the physics world. We then check if the ``raycast`` hit something "
"by checking if the ``is_colliding`` function is equal to ``true``."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial/vr_starter_tutorial_part_two.rst:497
msgid ""
"The rest of the code is exactly the same, but this process is repeated for "
"each :ref:`Raycast <class_Raycast>` node that is a child of the ``raycasts`` "
"variable."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial/vr_starter_tutorial_part_two.rst:504
msgid ""
"We then get the direction of the raycast by getting it's positive ``Z`` "
"directional axis from the :ref:`Basis <class_Basis>` on the ``raycast`` "
"node's ``global_transform``. This will give us the direction the raycast is "
"pointing on the Z axis, which is the same direction as the blue arrow on "
"the :ref:`Spatial <class_Spatial>` gizmo when ``Local space mode`` is "
"enabled in the Godot editor. We store this direction in a variable called "
"``direction_vector``."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial/vr_starter_tutorial_part_two.rst:508
msgid ""
"Next we get the distance from the raycast origin to the raycast collision "
"point by getting the distance from the global position, ``global_transform."
"origin`` of the ``raycast`` node to the collision point of the raycast, "
"``raycast.get_collision_point``, using the ``distance_to`` function. This "
"will give us the distance the :ref:`Raycast <class_Raycast>` traveled before "
"it collided, which we store in a variable called ``raycast_distance``."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial/vr_starter_tutorial_part_two.rst:526
msgid ""
"Once all of the :ref:`Raycast <class_Raycast>`\\s in the ``raycast`` "
"variable have been iterated over, we then play the shotgun shot sound by "
"calling the ``play`` function on the ``shotgun_fire_sound`` variable."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial/vr_starter_tutorial_part_two.rst:528
msgid ""
"Finally, we check to see if the shotgun is being held by a VR controller by "
"checking to see if the ``controller`` variable is not equal to ``null``. If "
"it is not equal to ``null``, we then set the ``rumble`` property of the VR "
"controller to ``0.25``, so there is a slight rumble when the shotgun fires."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial/vr_starter_tutorial_part_two.rst:532
msgid "Shotgun finished"
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial/vr_starter_tutorial_part_two.rst:534
msgid ""
"Everything else is exactly the same as the pistol, with at most just some "
"simple name changes."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial/vr_starter_tutorial_part_two.rst:536
msgid ""
"Now the shotgun is finished! You can find the shotgun in the sample scene by "
"looking around the back of one of the walls (not in the building though!)."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial/vr_starter_tutorial_part_two.rst:541
msgid "Adding a bomb"
msgstr "폭탄 추가하기"

#: ../../docs/tutorials/vr/vr_starter_tutorial/vr_starter_tutorial_part_two.rst:543
msgid ""
"Okay, let's add a different special :ref:`RigidBody <class_RigidBody>`. "
"Instead of adding something that shoots, let's add something we can throw - "
"a bomb!"
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial/vr_starter_tutorial_part_two.rst:545
msgid "Open up ``Bomb.tscn``, which is in the ``Scenes`` folder."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial/vr_starter_tutorial_part_two.rst:547
msgid ""
"The root node is a :ref:`RigidBody <class_RigidBody>` node that we'll be "
"extending to use ``VR_Interactable_Rigidbody``, which has a :ref:"
"`CollisionShape <class_CollisionShape>` like the other special :ref:"
"`RigidBody <class_RigidBody>` nodes we've made so far. Likewise, there is a :"
"ref:`MeshInstance <class_MeshInstance>` called ``Bomb`` that is used to "
"display the mesh for the bomb."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial/vr_starter_tutorial_part_two.rst:551
msgid ""
"Then we have an :ref:`Area <class_Area>` node simply called ``Area`` that "
"has a large :ref:`CollisionShape <class_CollisionShape>` as its child. We'll "
"use this :ref:`Area <class_Area>` node to effect anything within it when the "
"bomb explodes. Essentially, this :ref:`Area <class_Area>` node will be the "
"blast radius for the bomb."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial/vr_starter_tutorial_part_two.rst:554
msgid ""
"There is also a couple :ref:`Particles <class_Particles>` nodes. One of the :"
"ref:`Particles <class_Particles>` nodes are for the smoke coming out of the "
"bomb's fuse, while another is for the explosion. You can take a look at the :"
"ref:`ParticlesMaterial <class_ParticlesMaterial>` resources, which define "
"how the particles work, if you want. We will not be covering how the "
"particles work in this tutorial due to it being outside of the scope of this "
"tutorial."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial/vr_starter_tutorial_part_two.rst:558
msgid ""
"There is one thing with the :ref:`Particles <class_Particles>` nodes that we "
"need to make note of. If you select the ``Explosion_Particles`` node, you'll "
"find that its ``lifetime`` property is set to ``0.75`` and that the ``one "
"shot`` checkbox is enabled. This means that the particles will only play "
"once, and the particles will last for ``0.75`` seconds. We'll need to know "
"this so we can time the removal of the bomb with the end of the explosion :"
"ref:`Particles <class_Particles>`."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial/vr_starter_tutorial_part_two.rst:562
msgid ""
"Let's write the code for the bomb. Select the ``Bomb`` :ref:`RigidBody "
"<class_RigidBody>` node and make a new script called ``Bomb.gd``. Add the "
"following code:"
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial/vr_starter_tutorial_part_two.rst:662
msgid "Explaining the bomb code"
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial/vr_starter_tutorial_part_two.rst:664
msgid ""
"Like with the other special :ref:`RigidBody <class_RigidBody>` nodes, the "
"bomb extends ``VR_Interactable_Rigidbody`` so the VR controllers know this "
"object can be interacted with and that the functions defined defined in "
"``VR_Interactable_Rigidbody`` can be called when this object is held by a VR "
"controller."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial/vr_starter_tutorial_part_two.rst:669
msgid ""
"``bomb_mesh``: A variable to hold the :ref:`MeshInstance "
"<class_MeshInstance>` node that is used for the non-exploded bomb."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial/vr_starter_tutorial_part_two.rst:670
msgid ""
"``FUSE_TIME``: A constant to define how long the fuse will 'burn' before the "
"bomb explodes"
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial/vr_starter_tutorial_part_two.rst:671
msgid ""
"``fuse_timer``: A variable to hold the length of time that has passed since "
"the bomb's fuse has started to burn."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial/vr_starter_tutorial_part_two.rst:672
msgid ""
"``explosion_area``: A variable to hold the :ref:`Area <class_Area>` node "
"used to detect objects within the bomb's explosion."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial/vr_starter_tutorial_part_two.rst:673
msgid ""
"``EXPLOSION_DAMAGE``: A constant to define how much damage is applied with "
"the bomb explodes."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial/vr_starter_tutorial_part_two.rst:674
msgid ""
"``EXPLOSION_TIME``: A constant to define how long the bomb will last in the "
"scene after it explodes. This value should be the same as the ``lifetime`` "
"property of the explosion :ref:`Particles <class_Particles>` node."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial/vr_starter_tutorial_part_two.rst:675
msgid ""
"``explosion_timer`` A variable to hold the length of time that has passed "
"since the bomb exploded."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial/vr_starter_tutorial_part_two.rst:676
msgid "``exploded``: A variable to hold whether the bomb has exploded or not."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial/vr_starter_tutorial_part_two.rst:677
msgid ""
"``COLLISION_FORCE``: A constant that defines the amount of force that is "
"applied to :ref:`RigidBody <class_RigidBody>` nodes when the bomb explodes."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial/vr_starter_tutorial_part_two.rst:678
msgid ""
"``fuse_particles``: A variable to hold a reference to the :ref:`Particles "
"<class_Particles>` node used for the bomb's fuse."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial/vr_starter_tutorial_part_two.rst:679
msgid ""
"``explosion_particles``: A variable to hold a reference to the :ref:"
"`Particles <class_Particles>` node used for the bomb's explosion."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial/vr_starter_tutorial_part_two.rst:680
msgid ""
"``explosion_sound``: A variable to hold a reference to the :ref:"
"`AudioStreamPlayer3D <class_AudioStreamPlayer3D>` node used for the "
"explosion sound."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial/vr_starter_tutorial_part_two.rst:686
msgid ""
"The ``_ready`` function first gets all of the nodes from the bomb scene and "
"assigns them to their respective class variables for later use."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial/vr_starter_tutorial_part_two.rst:688
msgid ""
"Then we call ``set_physics_process`` and pass ``false`` so "
"``_physics_process`` is not executed. We do this because the code in "
"``_physics_process`` will start burning the fuse and exploding the bomb, "
"which we only want to do when the user interacts with the bomb. If we did "
"not disable ``_physics_process``, the bomb's fuse would start before the "
"user has a chance to get to the bomb."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial/vr_starter_tutorial_part_two.rst:696
msgid ""
"The ``_physics_process`` function first checks to see if ``fuse_timer`` is "
"less than ``FUSE_TIME``. If it is, then the bomb's fuse is still burning."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial/vr_starter_tutorial_part_two.rst:698
msgid ""
"If the bomb's fuse is still burning, we then add time, ``delta``, to the "
"``fuse_timer`` variable. We then check to see if ``fuse_timer`` is more than "
"or equal to ``FUSE_TIME`` now that we have added ``delta`` to it. If "
"``fuse_timer`` is more than or equal to ``FUSE_TIME``, then the fuse has "
"just finished and we need to explode the bomb."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial/vr_starter_tutorial_part_two.rst:701
msgid ""
"To explode the bomb, we first stop emitting particles for the fuse by "
"setting ``emitting`` to ``false`` on ``fuse_particles``. We then tell the "
"explosion :ref:`Particles <class_Particles>` node, ``explosion_particles``, "
"to emit all of its particle in a single shot by setting ``one_shot`` to "
"``true``. After that, we set ``emitting`` to ``true`` on "
"``explosion_particles`` so it looks like the bomb has exploded. To help make "
"it look like the bomb exploded, we hide the bomb :ref:`MeshInstance "
"<class_MeshInstance>` node by setting ``bomb_mesh.visible`` to ``false``."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial/vr_starter_tutorial_part_two.rst:705
msgid ""
"To keep the bomb from colliding with other objects in the physics world, we "
"set the ``collision_layer`` and ``collision_mask`` properties of the bomb to "
"``0``. We also change the :ref:`RigidBody <class_RigidBody>` mode to "
"``MODE_STATIC`` so the bomb :ref:`RigidBody <class_RigidBody>` does not move."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial/vr_starter_tutorial_part_two.rst:708
msgid ""
"Then we need to get all of the :ref:`PhysicsBody <class_PhysicsBody>` nodes "
"within the ``explosion_area`` node. To do this, we use the "
"``get_overlapping_bodies`` in a for loop. The ``get_overlapping_bodies`` "
"function will return an array of :ref:`PhysicsBody <class_PhysicsBody>` "
"nodes within the :ref:`Area <class_Area>` node, which is exactly what we are "
"looking for."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial/vr_starter_tutorial_part_two.rst:713
msgid ""
"For each :ref:`PhysicsBody <class_PhysicsBody>` node, which we store in a "
"variable called ``body``, we check to see if it is equal to ``self``. We do "
"this so the bomb does not accidentally explode itself, as the "
"``explosion_area`` could potentially detect the ``Bomb`` :ref:`RigidBody "
"<class_RigidBody>` as a PhysicsBody within the explosion area."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial/vr_starter_tutorial_part_two.rst:716
msgid ""
"If the :ref:`PhysicsBody <class_PhysicsBody>` node, ``body``, is not the "
"bomb, then we first check to see if the :ref:`PhysicsBody "
"<class_PhysicsBody>` node has a function called ``damage``. If the :ref:"
"`PhysicsBody <class_PhysicsBody>` node has a function called ``damage``, we "
"call it and pass ``EXPLOSION_DAMAGE`` to it so it takes damage from the "
"explosion."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial/vr_starter_tutorial_part_two.rst:719
msgid ""
"Next we check to see if the :ref:`PhysicsBody <class_PhysicsBody>` node is "
"a :ref:`RigidBody <class_RigidBody>`. If ``body`` is a :ref:`RigidBody "
"<class_RigidBody>`, we want to move it when the bomb explodes."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial/vr_starter_tutorial_part_two.rst:722
msgid ""
"To move the :ref:`RigidBody <class_RigidBody>` node when the bomb explodes, "
"we first need to calculate the direction from the bomb to the :ref:"
"`RigidBody <class_RigidBody>` node. To do this we subtract the global "
"position of the bomb, ``global_transform.origin`` from the global position "
"of the :ref:`RigidBody <class_RigidBody>`. This will give us a :ref:`Vector3 "
"<class_Vector3>` that points from the bomb to the :ref:`RigidBody "
"<class_RigidBody>` node. We store this :ref:`Vector3 <class_Vector3>` in a "
"variable called ``direction_vector``."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial/vr_starter_tutorial_part_two.rst:726
msgid ""
"We then calculate the distance the :ref:`RigidBody <class_RigidBody>` is "
"from the bomb by using the ``length`` function on ``direction_vector``. We "
"store the distance in a variable called ``bomb_distance``."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial/vr_starter_tutorial_part_two.rst:729
msgid ""
"We then calculate the amount of force the bomb will be applied to the :ref:"
"`RigidBody <class_RigidBody>` node when the bomb explodes by dividing "
"``COLLISION_FORCE`` by ``bomb_distance``, and multiplying that by "
"``collision_force``. This will make it so if the :ref:`RigidBody "
"<class_RigidBody>` node is closer to the bomb, it will be pushed farther."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial/vr_starter_tutorial_part_two.rst:732
msgid ""
"Finally, we push the :ref:`RigidBody <class_RigidBody>` node using the "
"``apply_impulse`` function, with a :ref:`Vector3 <class_Vector3>` position "
"of zero and ``collision_force`` multiplied by ``direction_vector."
"normalized`` as the force. This will send the :ref:`RigidBody "
"<class_RigidBody>` node flying when the bomb explodes."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial/vr_starter_tutorial_part_two.rst:737
msgid ""
"After we have looped through all of the :ref:`PhysicsBody "
"<class_PhysicsBody>` nodes within the ``explosion_area``, we set the "
"``exploded`` variable to ``true`` so the code knows the bomb exploded and "
"call ``play`` on ``explosion_sound`` so the sound of an explosion is played."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial/vr_starter_tutorial_part_two.rst:742
msgid ""
"Alright, the next section of code starts by first checking if ``exploded`` "
"is equal to ``true``."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial/vr_starter_tutorial_part_two.rst:744
msgid ""
"If ``exploded`` is equal to ``true``, then that means the bomb is waiting "
"for the explosion particles to finish before it frees/destroys itself. We "
"add time, ``delta``, to ``explosion_timer`` so we can track how long it has "
"been since the bomb has exploded."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial/vr_starter_tutorial_part_two.rst:747
msgid ""
"If ``explosion_timer`` is greater than or equal to ``EXPLOSION_TIME`` after "
"we added ``delta``, then the explosion timer just finished."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial/vr_starter_tutorial_part_two.rst:749
msgid ""
"If the explosion timer just finished, we set ``explosion_area.monitoring`` "
"to ``false``. The reason we do this is because there was a bug that would "
"print an error when you freed/deleted an :ref:`Area <class_Area>` node when "
"the ``monitoring`` property was true. To make sure this doesn't happen, we "
"simply set ``monitoring`` to false on ``explosion_area``."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial/vr_starter_tutorial_part_two.rst:752
msgid ""
"Next we check to see if the bomb is being held by a VR controller by "
"checking to see if the ``controller`` variable is not equal to ``null``. If "
"the bomb is being held by a VR controller, we set the ``held_object`` "
"property of the VR controller, ``controller``, to ``null``. Because the VR "
"controller is no longer holding anything, we make the VR controller's hand "
"mesh visible by setting ``controller.hand_mesh.visible`` to ``true``. Then "
"we check to see if the VR controller grab mode is ``RAYCAST``, and if it is "
"we set ``controller.grab_raycast.visible`` to ``true`` so the 'laser sight' "
"for the grab raycast is visible."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial/vr_starter_tutorial_part_two.rst:757
msgid ""
"Finally, regardless if the bomb is being held by a VR controller or not, we "
"call ``queue_free`` so the bomb scene is freed/removed from the scene."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial/vr_starter_tutorial_part_two.rst:762
msgid ""
"First the ``interact`` function calls ``set_physics_process`` and passes "
"``true`` so the code in ``_physics_process`` starts executing. This will "
"start the bomb's fuse and eventually lead to the bomb exploding."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial/vr_starter_tutorial_part_two.rst:765
msgid ""
"Finally, we start the fuse particles by setting ``fuse_particles.visible`` "
"to ``true``."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial/vr_starter_tutorial_part_two.rst:769
msgid "Bomb finished"
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial/vr_starter_tutorial_part_two.rst:771
msgid ""
"Now the bomb is ready to go! You can find the bombs in the orange building."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial/vr_starter_tutorial_part_two.rst:773
msgid ""
"Because of how we are calculating the VR controller's velocity, it is "
"easiest to throw the bombs using a thrusting-like motion instead of a more "
"natural throwing-like motion. The smooth curve of a throwing-like motion is "
"harder to track with the code we are using for calculating the velocity of "
"the VR controllers, so it does not always work correctly and can lead "
"inaccurately calculated velocities."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial/vr_starter_tutorial_part_two.rst:780
msgid "Adding a sword"
msgstr "검 추가하기"

#: ../../docs/tutorials/vr/vr_starter_tutorial/vr_starter_tutorial_part_two.rst:782
msgid ""
"Let's add one last special :ref:`RigidBody <class_RigidBody>`-based node "
"that can destroy targets. Let's add a sword so we can slice through the "
"targets!"
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial/vr_starter_tutorial_part_two.rst:784
msgid "Open up ``Sword.tscn``, which you can find in the ``Scenes`` folder."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial/vr_starter_tutorial_part_two.rst:786
msgid ""
"There is not a whole lot going on here. All of the child nodes of the root "
"``Sword`` :ref:`RigidBody <class_RigidBody>` node are rotated to they are "
"positioned correctly when the VR controller picks them up, there is a :ref:"
"`MeshInstance <class_MeshInstance>` node for displaying the sword, and there "
"is an :ref:`AudioStreamPlayer3D <class_AudioStreamPlayer3D>` node that holds "
"a sound for the sword colliding with something."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial/vr_starter_tutorial_part_two.rst:790
msgid ""
"There is one thing that is slightly different though. There is a :ref:"
"`KinematicBody <class_KinematicBody>` node called ``Damage_Body``. If you "
"take a look at it, you'll find that it is not on any collision layers, and "
"is instead only on a single collision mask. This is so the :ref:"
"`KinematicBody <class_KinematicBody>` will not effect other :ref:"
"`PhysicsBody <class_PhysicsBody>` nodes in the scene, but it will still be "
"effected by :ref:`PhysicsBody <class_PhysicsBody>` nodes."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial/vr_starter_tutorial_part_two.rst:794
msgid ""
"We are going to use the ``Damage_Body`` :ref:`KinematicBody "
"<class_KinematicBody>` node to detect the collision point and normal when "
"the sword collides with something in the scene."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial/vr_starter_tutorial_part_two.rst:796
msgid ""
"While this is perhaps not the best way of getting the collision information "
"from a performance point of view, it does give us a lot of information we "
"can use for post-processing! Using a :ref:`KinematicBody "
"<class_KinematicBody>` this way means we can detect exactly where ths sword "
"collided with other :ref:`PhysicsBody <class_PhysicsBody>` nodes."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial/vr_starter_tutorial_part_two.rst:799
msgid ""
"That is really the only thing note worthy about the sword scene. Select the "
"``Sword`` :ref:`RigidBody <class_RigidBody>` node and make a new script "
"called ``Sword.gd``. Add the following code:"
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial/vr_starter_tutorial_part_two.rst:840
#, fuzzy
msgid "Let's go over how this script works!"
msgstr "각각이 하는 일을 살펴보겠습니다:"

#: ../../docs/tutorials/vr/vr_starter_tutorial/vr_starter_tutorial_part_two.rst:844
#, fuzzy
msgid "Explaining the sword code"
msgstr "리소스 해제(Free)하기"

#: ../../docs/tutorials/vr/vr_starter_tutorial/vr_starter_tutorial_part_two.rst:846
msgid ""
"Like with the other special :ref:`RigidBody <class_RigidBody>` nodes, the "
"sword extends ``VR_Interactable_Rigidbody`` so the VR controllers know this "
"object can be interacted with and that the functions defined defined in "
"``VR_Interactable_Rigidbody`` can be called when this object is held by a VR "
"controller."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial/vr_starter_tutorial_part_two.rst:851
msgid ""
"``SWORD_DAMAGE``: A constant to define the amount of damage the sword does. "
"This damage is applied  to every object in the sword on every "
"``_physics_process`` call"
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial/vr_starter_tutorial_part_two.rst:852
msgid ""
"``COLLISION_FORCE``: A constant that defines the amount of force applied to :"
"ref:`RigidBody <class_RigidBody>` nodes when the sword collides with a :ref:"
"`PhysicsBody <class_PhysicsBody>`."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial/vr_starter_tutorial_part_two.rst:853
msgid ""
"``damage_body``: A variable to hold the :ref:`KinematicBody "
"<class_KinematicBody>` node used to detect whether the sword is stabbing a :"
"ref:`PhysicsBody <class_PhysicsBody>` node or not."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial/vr_starter_tutorial_part_two.rst:854
msgid ""
"``sword_noise``: A variable to hold the :ref:`AudioStreamPlayer3D "
"<class_AudioStreamPlayer3D>` node used to play a sound when the sword "
"collides with something."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial/vr_starter_tutorial_part_two.rst:860
msgid ""
"All we are doing in the ``_ready`` function is getting the ``Damage_Body`` :"
"ref:`KinematicBody <class_KinematicBody>` node and assigning it to "
"``damage_body``. Because we do not want the sword to detect a collision with "
"the root :ref:`RigidBody <class_RigidBody>` node of the sword, we call "
"``add_collision_exception_with`` on ``damage_body`` and pass ``self`` so the "
"sword will not be detected."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial/vr_starter_tutorial_part_two.rst:864
msgid ""
"Finally, we get the :ref:`AudioStreamPlayer3D <class_AudioStreamPlayer3D>` "
"node for the sword collision sound and apply it to the ``sword_noise`` "
"variable."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial/vr_starter_tutorial_part_two.rst:870
msgid ""
"First we need to determine whether the sword is colliding with something or "
"not. To do this, we use the ``move_and_collide`` function of the "
"``damage_body`` node. Unlike how ``move_and_collide`` is normally used, we "
"are not passing a velocity and instead are passing an empty :ref:`Vector3 "
"<class_Vector3>`. Because we do not want the ``damage_body`` node to move, "
"we set the ``test_only`` argument (the fourth argument) as ``true`` so the :"
"ref:`KinematicBody <class_KinematicBody>` generates collision info without "
"actually causing any collisions within the collision world."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial/vr_starter_tutorial_part_two.rst:875
#, fuzzy
msgid ""
"The ``move_and_collide`` function will return a :ref:`KinematicCollision "
"<class_KinematicCollision>` class that has all of the information we need "
"for detecting collisions on the sword. We assign the return value of "
"``move_and_collide`` to a variable called ``collision_results``."
msgstr ""
"이 함수는 ``move_and_collide()``\\ 를 사용할 때 충돌과 충돌 물체에 대한 정보"
"가 포함된 :ref:`KinematicCollision2D <class_KinematicCollision2D>` 객체를 반"
"환합니다. 이 정보를 사용하여 응답을 확인할 수 있습니다."

#: ../../docs/tutorials/vr/vr_starter_tutorial/vr_starter_tutorial_part_two.rst:878
msgid ""
"Next we check to see if ``collision_results`` is not equal to ``null``. If "
"``collision_results`` is not equal to ``null``, then we know that the sword "
"has collided with something."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial/vr_starter_tutorial_part_two.rst:880
msgid ""
"We then check to see if the :ref:`PhysicsBody <class_PhysicsBody>` the sword "
"collided with has a function/method called ``damage`` using the "
"``has_method`` function. If the :ref:`PhysicsBody <class_PhysicsBody>` has a "
"function called ``damage_body``, we call it and pass the amount of damage "
"the sword does, ``SWORD_DAMAGE``, to it."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial/vr_starter_tutorial_part_two.rst:883
msgid ""
"Next we check to see if the :ref:`PhysicsBody <class_PhysicsBody>` the sword "
"collided with is a :ref:`RigidBody <class_RigidBody>`. If what the sword "
"collided with is a :ref:`RigidBody <class_RigidBody>` node, we then check to "
"see if the sword is being held by a VR controller or not by checking to see "
"if ``controller`` is equal to ``null``."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial/vr_starter_tutorial_part_two.rst:886
msgid ""
"If the sword is not being held by a VR controller, ``controller`` is equal "
"to ``null``, then we move the :ref:`RigidBody <class_RigidBody>` node the "
"sword collided with using the ``apply_impulse`` function. For the "
"``position`` of the ``apply_impulse`` function, we use "
"``collision_position`` variable stored within the :ref:`KinematicCollision "
"<class_KinematicCollision>` class in ``collision_results``. For the "
"``velocity`` of the ``apply_impulse`` function, we use the "
"``collision_normal`` multiplied by the ``linear_velocity`` of the sword's :"
"ref:`RigidBody <class_RigidBody>` node multiplied by ``COLLISION_FORCE``."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial/vr_starter_tutorial_part_two.rst:891
msgid ""
"If the sword is being held by a VR controller, ``controller`` is not equal "
"to ``null``, then we move the :ref:`RigidBody <class_RigidBody>` node the "
"sword collided with using the ``apply_impulse`` function. For the "
"``position`` of the ``apply_impulse`` function, we use "
"``collision_position`` variable stored within the :ref:`KinematicCollision "
"<class_KinematicCollision>` class in ``collision_results``. For the "
"``velocity`` of the ``apply_impulse`` function, we use the "
"``collision_normal`` multiplied by the VR controller's velocity multiplied "
"by ``COLLISION_FORCE``."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial/vr_starter_tutorial_part_two.rst:895
msgid ""
"Finally, regardless of whether the :ref:`PhysicsBody <class_PhysicsBody>` is "
"a :ref:`RigidBody <class_RigidBody>` or not, we play the sound of the sword "
"colliding with something by calling ``play`` on ``sword_noise``."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial/vr_starter_tutorial_part_two.rst:900
msgid "Sword finished"
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial/vr_starter_tutorial_part_two.rst:904
msgid ""
"With that done, you can now slice through the targets! You can find the "
"sword in the corner in between the shotgun and the pistol."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial/vr_starter_tutorial_part_two.rst:909
msgid "Updating the target UI"
msgstr "대상 UI를 업데이트하기"

#: ../../docs/tutorials/vr/vr_starter_tutorial/vr_starter_tutorial_part_two.rst:911
msgid "Let's update the UI as the sphere targets are destroyed."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial/vr_starter_tutorial_part_two.rst:913
msgid ""
"Open up ``Main_VR_GUI.tscn``, which you can find in the ``Scenes`` folder. "
"Feel free to look at how the scene is setup if you want, but in an effort to "
"keep this tutorial from becoming too long, we will not be covering the scene "
"setup in this tutorial."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial/vr_starter_tutorial_part_two.rst:916
msgid ""
"Expand the ``GUI`` :ref:`Viewport <class_Viewport>` node and then select the "
"``Base_Control`` node. Add a new script called ``Base_Control.gd``, and add "
"the following:"
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial/vr_starter_tutorial_part_two.rst:937
#, fuzzy
msgid "Let's go over how this script works real quick."
msgstr "각각이 하는 일을 살펴보겠습니다:"

#: ../../docs/tutorials/vr/vr_starter_tutorial/vr_starter_tutorial_part_two.rst:939
msgid ""
"First, in ``_ready``, we get the :ref:`Label <class_Label>` that shows how "
"many spheres are left and assign it to the ``sphere_count_label`` class "
"variable. Next, we get ``Game.gd`` by using ``get_tree().root`` and assign "
"``sphere_ui`` to this script."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial/vr_starter_tutorial_part_two.rst:942
msgid ""
"In ``update_ui``, we change the sphere :ref:`Label <class_Label>`'s text. If "
"there is at least one sphere remaining, we change the text to show how many "
"spheres are still left in the world. If there are no more spheres remaining, "
"we change the text and congratulate the player."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial/vr_starter_tutorial_part_two.rst:948
msgid "Adding the final special RigidBody"
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial/vr_starter_tutorial_part_two.rst:950
msgid ""
"Finally, before we finish this tutorial, let's add a way to reset the game "
"while in VR."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial/vr_starter_tutorial_part_two.rst:952
msgid ""
"Open up ``Reset_Box.tscn``, which you will find in ``Scenes``. Select the "
"``Reset_Box`` :ref:`RigidBody <class_RigidBody>` node and make a new script "
"called ``Reset_Box.gd``. Add the following code:"
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial/vr_starter_tutorial_part_two.rst:990
#, fuzzy
msgid "Let's quickly go over how this script works."
msgstr "각각이 하는 일을 살펴보겠습니다:"

#: ../../docs/tutorials/vr/vr_starter_tutorial/vr_starter_tutorial_part_two.rst:994
#, fuzzy
msgid "Explaining the reset box code"
msgstr "리소스 해제(Free)하기"

#: ../../docs/tutorials/vr/vr_starter_tutorial/vr_starter_tutorial_part_two.rst:996
msgid ""
"Like with the other special :ref:`RigidBody <class_RigidBody>`-based objects "
"we've created, the reset box extends ``VR_Interactable_Rigidbody``."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial/vr_starter_tutorial_part_two.rst:998
msgid ""
"The ``start_transform`` class variable will store the global transform of "
"the reset box when the game starts, the ``reset_timer`` class variable will "
"hold the length of time that has passed since the reset box's position has "
"moved, the ``RESET_TIME`` constant defines the length of time the reset box "
"has to wait before being reset, and the ``RESET_MIN_DISTANCE`` constant "
"defines how far the reset box has to be away from it's initial position "
"before the reset timer starts."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial/vr_starter_tutorial_part_two.rst:1002
msgid ""
"In the ``_ready`` function all we are doing is storing the "
"``global_transform`` of the reset position when the scene starts. This is so "
"we can reset the position, rotation, and scale of the reset box object to "
"this initial transform when enough time has passed."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial/vr_starter_tutorial_part_two.rst:1005
msgid ""
"In the ``_physics_process`` function, the code checks to see if the reset "
"box's initial position to the reset box's current position is farther than "
"``RESET_MIN_DISTANCE``. If it is farther, then it starts adding time, "
"``delta``, to ``reset_timer``. Once ``reset_timer`` is more than or equal to "
"``RESET_TIME``, we reset the ``global_transform`` to the ``start_transform`` "
"so the reset box is back in its initial position. We then set "
"``reset_timer`` to ``0``."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial/vr_starter_tutorial_part_two.rst:1009
msgid ""
"The ``interact`` function simply reloads the ``Game.tscn`` scene using "
"``get_tree().change_scene``. This will reload the game scene, resetting "
"everything."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial/vr_starter_tutorial_part_two.rst:1011
msgid ""
"Finally, the ``dropped`` function resets the ``global_transform`` to the "
"initial transform in ``start_transform`` so the reset box has its initial "
"position/rotation. Then ``reset_timer`` is set to ``0`` so the timer is "
"reset."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial/vr_starter_tutorial_part_two.rst:1016
msgid "Reset box finished"
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial/vr_starter_tutorial_part_two.rst:1018
msgid ""
"With that done, when you grab and interact with the reset box, the entire "
"scene will reset/restart and you can destroy all the targets again!"
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial/vr_starter_tutorial_part_two.rst:1020
msgid ""
"Resetting the scene abruptly without any sort of transition can lead to "
"discomfort in VR."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial/vr_starter_tutorial_part_two.rst:1029
msgid "Whew! That was a lot of work."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial/vr_starter_tutorial_part_two.rst:1031
msgid ""
"Now you have a fully working VR project with multiple different types of "
"special :ref:`RigidBody <class_RigidBody>`-based nodes that can be used and "
"extended. Hopefully this will help serve as an introduction to making fully-"
"featured VR games in Godot! The code and concepts detailed in this tutorial "
"can be expanded on to make puzzle games, action games, story-based games, "
"and more!"
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial/vr_starter_tutorial_part_two.rst:1035
msgid ""
"You can download the finished project for this tutorial series on the "
"`OpenVR GitHub repository <https://github.com/GodotVR/godot_openvr_fps>`_, "
"under the releases tab!"
msgstr ""

#: ../../docs/tutorials/plugins/editor/index.rst:2
msgid "Editor plugins"
msgstr ""

#: ../../docs/tutorials/plugins/editor/installing_plugins.rst:4
#, fuzzy
msgid "Installing plugins"
msgstr ":ref:`doc_inspector_plugins`"

#: ../../docs/tutorials/plugins/editor/installing_plugins.rst:6
msgid ""
"Godot features an editor plugin system with numerous plugins developed by "
"the community. Plugins can extend the editor's functionality with new nodes, "
"additional docks, convenience features, and more."
msgstr ""

#: ../../docs/tutorials/plugins/editor/installing_plugins.rst:11
#, fuzzy
msgid "Finding plugins"
msgstr "플러그인에 대해서"

#: ../../docs/tutorials/plugins/editor/installing_plugins.rst:13
msgid ""
"The preferred way to find Godot plugins is to use the `Asset Library "
"<https://godotengine.org/asset-library/>`_. While it can be browsed online, "
"it's more convenient to use it directly from the editor. To do so, click the "
"**AssetLib** tab at the top of the editor:"
msgstr ""

#: ../../docs/tutorials/plugins/editor/installing_plugins.rst:20
msgid "You can also find assets on code hosting websites such as GitHub."
msgstr ""

#: ../../docs/tutorials/plugins/editor/installing_plugins.rst:24
msgid ""
"Some repositories describe themselves as \"plugins\" but may not actually be "
"*editor* plugins. This is especially the case for scripts that are intended "
"to be used in a running project. You don't need to enable such plugins to "
"use them. Download them and extract the files in your project folder."
msgstr ""

#: ../../docs/tutorials/plugins/editor/installing_plugins.rst:29
msgid ""
"One way to distinguish editor plugins from non-editor plugins is to look for "
"a ``plugin.cfg`` file in the repository that hosts the plugin. If the "
"repository contains a ``plugin.cfg`` file in a folder placed in the ``addons/"
"`` folder, then it is an editor plugin."
msgstr ""

#: ../../docs/tutorials/plugins/editor/installing_plugins.rst:35
#, fuzzy
msgid "Installing a plugin"
msgstr "패키지 설치하기"

#: ../../docs/tutorials/plugins/editor/installing_plugins.rst:37
msgid ""
"To install a plugin, download it as a ZIP archive. On the Asset Library, "
"this can be done using the **Download** button, either from the editor or "
"using the Web interface."
msgstr ""

#: ../../docs/tutorials/plugins/editor/installing_plugins.rst:41
msgid ""
"On GitHub, if a plugin has *tags* (versions) declared, go to the "
"**Releases** tab to download a stable release. This ensures you download a "
"version that was declared to be stable by its author."
msgstr ""

#: ../../docs/tutorials/plugins/editor/installing_plugins.rst:45
msgid ""
"On GitHub, if the plugin doesn't have any *tags* declared, use the "
"**Download ZIP** button to download a ZIP of the latest revision:"
msgstr ""

#: ../../docs/tutorials/plugins/editor/installing_plugins.rst:50
msgid ""
"Extract the ZIP archive and move the ``addons/`` folder it contains into "
"your project folder. If your project already contains an ``addons/`` folder, "
"move the plugin's ``addons/`` folder into your project folder to merge the "
"new folder contents with the existing one. Your file manager may ask you "
"whether to write into the folder; answer **Yes**. No files will be "
"overwritten in the process."
msgstr ""

#: ../../docs/tutorials/plugins/editor/installing_plugins.rst:57
#, fuzzy
msgid "Enabling a plugin"
msgstr "간단한 플러그인 만들기"

#: ../../docs/tutorials/plugins/editor/installing_plugins.rst:59
msgid ""
"To enable the freshly installed plugin, open **Project > Project Settings** "
"at the top of the editor then go the **Plugins** tab. If the plugin was "
"packaged correctly, you should see it in the list of plugins. Click on the "
"gray **Inactive** text and choose **Active** to enable the plugin. The word "
"**Active** will display in green to confirm the plugin was enabled."
msgstr ""

#: ../../docs/tutorials/plugins/editor/installing_plugins.rst:68
msgid ""
"You can use the plugin immediately after enabling it; there's no need to "
"restart the editor. Likewise, disabling a plugin can be done without having "
"to restart the editor."
msgstr ""

#: ../../docs/tutorials/plugins/editor/making_plugins.rst:4
msgid "Making plugins"
msgstr ""

#: ../../docs/tutorials/plugins/editor/making_plugins.rst:7
msgid "About plugins"
msgstr "플러그인에 대해서"

#: ../../docs/tutorials/plugins/editor/making_plugins.rst:9
msgid ""
"A plugin is a great way to extend the editor with useful tools. It can be "
"made entirely with GDScript and standard scenes, without even reloading the "
"editor. Unlike modules, you don't need to create C++ code nor recompile the "
"engine. While this makes plugins less powerful, there are still many things "
"you can do with them. Note that a plugin is similar to any scene you can "
"already make, except it is created using a script to add editor "
"functionality."
msgstr ""

#: ../../docs/tutorials/plugins/editor/making_plugins.rst:16
msgid ""
"This tutorial will guide you through the creation of two simple plugins so "
"you can understand how they work and be able to develop your own. The first "
"will be a custom node that you can add to any scene in the project and the "
"other will be a custom dock added to the editor."
msgstr ""

#: ../../docs/tutorials/plugins/editor/making_plugins.rst:22
msgid "Creating a plugin"
msgstr ""

#: ../../docs/tutorials/plugins/editor/making_plugins.rst:24
msgid ""
"Before starting, create a new empty project wherever you want. This will "
"serve as a base to develop and test the plugins."
msgstr ""

#: ../../docs/tutorials/plugins/editor/making_plugins.rst:27
msgid ""
"The first thing you need for the editor to identify a new plugin is to "
"create two files: a ``plugin.cfg`` for configuration and a tool script with "
"the functionality. Plugins have a standard path like ``addons/plugin_name`` "
"inside the project folder. Godot provides a dialog for generating those "
"files and placing them where they need to be."
msgstr ""

#: ../../docs/tutorials/plugins/editor/making_plugins.rst:33
msgid ""
"In the main toolbar, click the ``Project`` dropdown. Then click ``Project "
"Settings...``. Go to the ``Plugins`` tab and then click on the ``Create`` "
"button in the top-right."
msgstr ""

#: ../../docs/tutorials/plugins/editor/making_plugins.rst:37
msgid "You will see the dialog appear, like so:"
msgstr ""

#: ../../docs/tutorials/plugins/editor/making_plugins.rst:41
msgid ""
"The placeholder text in each field describes how it affects the plugin's "
"creation of the files and the config file's values."
msgstr ""

#: ../../docs/tutorials/plugins/editor/making_plugins.rst:44
#, fuzzy
msgid "To continue with the example, use the following values::"
msgstr "항등 기저는 다음과 같은 값을 가집니다:"

#: ../../docs/tutorials/plugins/editor/making_plugins.rst:55
#, fuzzy
msgid "You should end up with a directory structure like this:"
msgstr "4개의 컨테이너가 이렇게 있어야 합니다"

#: ../../docs/tutorials/plugins/editor/making_plugins.rst:59
msgid ""
"``plugin.cfg`` is a simple INI file with metadata about your plugin. The "
"name and description help people undersatnd what it does. Your name helps "
"you get properly credited for your work. The version number helps others "
"know if they have an outdated version; if you are unsure on how to come up "
"with the version number, check out `Semantic Versioning <https://semver.org/"
">`_. The main script file will instruct Godot what your plugin does in the "
"editor once it is active."
msgstr ""

#: ../../docs/tutorials/plugins/editor/making_plugins.rst:68
msgid "The script file"
msgstr ""

#: ../../docs/tutorials/plugins/editor/making_plugins.rst:70
msgid ""
"Upon creation of the plugin, the dialog will automatically open the "
"EditorPlugin script for you. The script has two requirements that you cannot "
"change: it must be a ``tool`` script, or else it will not load properly in "
"the editor, and it must inherit from :ref:`class_EditorPlugin`."
msgstr ""

#: ../../docs/tutorials/plugins/editor/making_plugins.rst:76
msgid ""
"In addition to the EditorPlugin script, any other GDScript that your plugin "
"uses must *also* be a tool.  Any GDScript without ``tool`` imported into the "
"editor will act like an empty file!"
msgstr ""

#: ../../docs/tutorials/plugins/editor/making_plugins.rst:80
msgid ""
"It's important to deal with initialization and clean-up of resources. A good "
"practice is to use the virtual function :ref:`_enter_tree() "
"<class_Node_method__enter_tree>` to initialize your plugin and :ref:"
"`_exit_tree() <class_Node_method__exit_tree>` to clean it up. Thankfully, "
"the dialog generates these callbacks for you. Your script should look "
"something like this:"
msgstr ""

#: ../../docs/tutorials/plugins/editor/making_plugins.rst:123
msgid "This is a good template to use when creating new plugins."
msgstr ""

#: ../../docs/tutorials/plugins/editor/making_plugins.rst:126
msgid "A custom node"
msgstr ""

#: ../../docs/tutorials/plugins/editor/making_plugins.rst:128
msgid ""
"Sometimes you want a certain behavior in many nodes, such as a custom scene "
"or control that can be reused. Instancing is helpful in a lot of cases, but "
"sometimes it can be cumbersome, especially if you're using it in many "
"projects. A good solution to this is to make a plugin that adds a node with "
"a custom behavior."
msgstr ""

#: ../../docs/tutorials/plugins/editor/making_plugins.rst:136
msgid ""
"Nodes added via an EditorPlugin are \"CustomType\" nodes. While they work "
"with any scripting language, they have fewer features than :ref:`the Script "
"Class system <doc_scripting_continued_class_name>`. If you are writing "
"GDScript or NativeScript, we recommend using them instead."
msgstr ""

#: ../../docs/tutorials/plugins/editor/making_plugins.rst:141
msgid ""
"To create a new node type, you can use the function :ref:`add_custom_type() "
"<class_EditorPlugin_method_add_custom_type>` from the :ref:"
"`class_EditorPlugin` class. This function can add new types to the editor "
"(nodes or resources). However, before you can create the type, you need a "
"script that will act as the logic for the type. While that script doesn't "
"have to use the ``tool`` keyword, it can be added so the script runs in the "
"editor."
msgstr ""

#: ../../docs/tutorials/plugins/editor/making_plugins.rst:148
msgid ""
"For this tutorial, we'll create a simple button that prints a message when "
"clicked. For that, we'll need a simple script that extends from :ref:"
"`class_Button`. It could also extend :ref:`class_BaseButton` if you prefer:"
msgstr ""

#: ../../docs/tutorials/plugins/editor/making_plugins.rst:184
msgid ""
"That's it for our basic button. You can save this as ``my_button.gd`` inside "
"the plugin folder. You'll also need a 16×16 icon to show in the scene tree. "
"If you don't have one, you can grab the default one from the engine and save "
"it in your `addons/my_custom_node` folder as `icon.png`, or use the default "
"Godot logo (`preload(\"res://icon.png\")`). You can also use SVG icons if "
"desired."
msgstr ""

#: ../../docs/tutorials/plugins/editor/making_plugins.rst:192
msgid ""
"Now, we need to add it as a custom type so it shows on the **Create New "
"Node** dialog. For that, change the ``custom_node.gd`` script to the "
"following:"
msgstr ""

#: ../../docs/tutorials/plugins/editor/making_plugins.rst:238
msgid ""
"With that done, the plugin should already be available in the plugin list in "
"the **Project Settings**, so activate it as explained in `Checking the "
"results`_."
msgstr ""

#: ../../docs/tutorials/plugins/editor/making_plugins.rst:241
msgid "Then try it out by adding your new node:"
msgstr ""

#: ../../docs/tutorials/plugins/editor/making_plugins.rst:245
msgid ""
"When you add the node, you can see that it already has the script you "
"created attached to it. Set a text to the button, save and run the scene. "
"When you click the button, you can see some text in the console:"
msgstr ""

#: ../../docs/tutorials/plugins/editor/making_plugins.rst:252
msgid "A custom dock"
msgstr ""

#: ../../docs/tutorials/plugins/editor/making_plugins.rst:254
msgid ""
"Sometimes, you need to extend the editor and add tools that are always "
"available. An easy way to do it is to add a new dock with a plugin. Docks "
"are just scenes based on Control, so they are created in a way similar to "
"usual GUI scenes."
msgstr ""

#: ../../docs/tutorials/plugins/editor/making_plugins.rst:258
msgid ""
"Creating a custom dock is done just like a custom node. Create a new "
"``plugin.cfg`` file in the ``addons/my_custom_dock`` folder, then add the "
"following content to it:"
msgstr ""

#: ../../docs/tutorials/plugins/editor/making_plugins.rst:283
msgid ""
"Then create the script ``custom_dock.gd`` in the same folder. Fill it with "
"the :ref:`template we've seen before <doc_making_plugins_template_code>` to "
"get a good start."
msgstr ""

#: ../../docs/tutorials/plugins/editor/making_plugins.rst:287
msgid ""
"Since we're trying to add a new custom dock, we need to create the contents "
"of the dock. This is nothing more than a standard Godot scene: just create a "
"new scene in the editor then edit it."
msgstr ""

#: ../../docs/tutorials/plugins/editor/making_plugins.rst:291
msgid ""
"For an editor dock, the root node **must** be a :ref:`Control "
"<class_Control>` or one of its child classes. For this tutorial, you can "
"create a single button. The name of the root node will also be the name that "
"appears on the dock tab, so be sure to give it a short and descriptive name. "
"Also, don't forget to add some text to your button."
msgstr ""

#: ../../docs/tutorials/plugins/editor/making_plugins.rst:299
msgid ""
"Save this scene as ``my_dock.tscn``. Now, we need to grab the scene we "
"created then add it as a dock in the editor. For this, you can rely on the "
"function :ref:`add_control_to_dock() "
"<class_EditorPlugin_method_add_control_to_dock>` from the :ref:`EditorPlugin "
"<class_EditorPlugin>` class."
msgstr ""

#: ../../docs/tutorials/plugins/editor/making_plugins.rst:304
msgid ""
"You need to select a dock position and define the control to add (which is "
"the scene you just created). Don't forget to **remove the dock** when the "
"plugin is deactivated. The script could look like this:"
msgstr ""

#: ../../docs/tutorials/plugins/editor/making_plugins.rst:362
msgid ""
"Note that, while the dock will initially appear at its specified position, "
"the user can freely change its position and save the resulting layout."
msgstr ""

#: ../../docs/tutorials/plugins/editor/making_plugins.rst:366
msgid "Checking the results"
msgstr ""

#: ../../docs/tutorials/plugins/editor/making_plugins.rst:368
msgid ""
"It's now time to check the results of your work. Open the **Project "
"Settings** and click on the **Plugins** tab. Your plugin should be the only "
"one on the list. If it is not showing, click on the **Update** button in the "
"top-right corner."
msgstr ""

#: ../../docs/tutorials/plugins/editor/making_plugins.rst:375
msgid ""
"You can see the plugin is inactive on the **Status** column; click on the "
"status to select **Active**. The dock should become visible before you even "
"close the settings window. You should now have a custom dock:"
msgstr ""

#: ../../docs/tutorials/plugins/editor/making_plugins.rst:382
msgid "Going beyond"
msgstr ""

#: ../../docs/tutorials/plugins/editor/making_plugins.rst:384
msgid ""
"Now that you've learned how to make basic plugins, you can extend the editor "
"in several ways. Lots of functionality can be added to the editor with "
"GDScript; it is a powerful way to create specialized editors without having "
"to delve into C++ modules."
msgstr ""

#: ../../docs/tutorials/plugins/editor/making_plugins.rst:389
msgid ""
"You can make your own plugins to help yourself and share them in the `Asset "
"Library <https://godotengine.org/asset-library/>`_ so that people can "
"benefit from your work."
msgstr ""

#: ../../docs/tutorials/plugins/editor/making_main_screen_plugins.rst:4
#, fuzzy
msgid "Making main screen plugins"
msgstr "간단한 플러그인 만들기"

#: ../../docs/tutorials/plugins/editor/making_main_screen_plugins.rst:7
msgid "What this tutorial covers"
msgstr ""

#: ../../docs/tutorials/plugins/editor/making_main_screen_plugins.rst:9
msgid ""
"As seen in the :ref:`doc_making_plugins` page, making a basic plugin that "
"extends the editor is fairly easy. This plugin mechanism also allows you to "
"create new UIs in the central part of the editor, similarly to the basic 2D, "
"3D, Script and AssetLib views. Such editor plugins are referred as \"Main "
"screen plugins\"."
msgstr ""

#: ../../docs/tutorials/plugins/editor/making_main_screen_plugins.rst:15
msgid ""
"This tutorial leads you through the creation of a basic main screen plugin. "
"With this plugin example, we want to demonstrate:"
msgstr ""

#: ../../docs/tutorials/plugins/editor/making_main_screen_plugins.rst:18
#, fuzzy
msgid "Creating a main screen plugin"
msgstr "간단한 플러그인 만들기"

#: ../../docs/tutorials/plugins/editor/making_main_screen_plugins.rst:19
msgid ""
"Linking the main screen to another plugin GUI element (such as a Tab panel, "
"similar to the Inspector tab)"
msgstr ""

#: ../../docs/tutorials/plugins/editor/making_main_screen_plugins.rst:22
msgid ""
"For the sake of simplicity, the two GUI elements of our main screen plugin "
"will both consist in a Label and a Button. Pressing one element's button "
"will display some text on the other's label node."
msgstr ""

#: ../../docs/tutorials/plugins/editor/making_main_screen_plugins.rst:27
msgid "Initializing the plugin"
msgstr ""

#: ../../docs/tutorials/plugins/editor/making_main_screen_plugins.rst:29
msgid ""
"The plugin itself is a Godot project. It is best to set its contents in an "
"``addons/my_plugin_name/`` structure. The only files that lie in the root "
"folder are the project.godot file, and the project icon."
msgstr ""

#: ../../docs/tutorials/plugins/editor/making_main_screen_plugins.rst:33
msgid ""
"In the ``addons/my_plugin_name/`` folder, we create the ``plugin.cfg`` file "
"as described in the :ref:`doc_making_plugins` page."
msgstr ""

#: ../../docs/tutorials/plugins/editor/making_main_screen_plugins.rst:45
msgid ""
"We also initialize the file targeted by the ``script=`` property of the ``."
"cfg`` file. In our example, ``main_screen_plugin.gd``."
msgstr ""

#: ../../docs/tutorials/plugins/editor/making_main_screen_plugins.rst:76
msgid ""
"The important part in this script is the ``has_main_screen()`` function, "
"which is overloaded so it returns ``true``. This function is automatically "
"called by the editor on plugin activation, to tell it that this plugin adds "
"a new center view to the editor. For now, we'll leave this script as-is and "
"we'll come back to it later."
msgstr ""

#: ../../docs/tutorials/plugins/editor/making_main_screen_plugins.rst:85
msgid ""
"The ``main_screen_plugin.gd`` file will be responsible for each of our "
"plugin's UI element instantiation, and it will also manage the communication "
"between them."
msgstr ""

#: ../../docs/tutorials/plugins/editor/making_main_screen_plugins.rst:88
msgid ""
"As a matter of fact, we wish to design each UI element in their own scene. "
"Different scenes are not aware of each other unless they are both children "
"of a parent scene, yet they will then require ``get_node(\"../sibling\")`` "
"accessors. Such practice is more likely to produce errors at runtime, "
"especially if these scenes do not share the same parent node. This is why, "
"they should only be allowed to access their children."
msgstr ""

#: ../../docs/tutorials/plugins/editor/making_main_screen_plugins.rst:95
msgid ""
"So, in order to communicate information to another scene, the best design is "
"to define signals. If a user action in a UI scene #1 has to trigger "
"something in another UI scene #2, then this user action has to emit a signal "
"from scene #1, and scene #2 will be connected to that signal. Since all of "
"our UI scenes will be instanced by ``main_screen_plugin.gd`` script, this "
"one script will also connect each of them to the required signals."
msgstr ""

#: ../../docs/tutorials/plugins/editor/making_main_screen_plugins.rst:102
msgid ""
"If the ``main_screen_plugin.gd`` instantiates the UI scenes, won't they be "
"sibling nodes then?"
msgstr ""

#: ../../docs/tutorials/plugins/editor/making_main_screen_plugins.rst:105
msgid ""
"Not necessarily: this script may add all UI scenes as children of the same "
"node of the editor's scene tree - but maybe it won't. And the "
"``main_screen_plugin.gd`` script will *not* be the parent node of any "
"instantiated scene because it is a script, not a node! This script will only "
"hold references to instantiated scenes."
msgstr ""

#: ../../docs/tutorials/plugins/editor/making_main_screen_plugins.rst:112
#, fuzzy
msgid "Main screen scene"
msgstr "메인 씬"

#: ../../docs/tutorials/plugins/editor/making_main_screen_plugins.rst:114
msgid ""
"Create a new scene with a ``Panel`` root node. Select this root node, and in "
"the viewport, click the ``Layout`` menu and select ``Full Rect``. You also "
"need to enable the ``Expand`` vertical size flag in the inspector. The panel "
"now uses all the space available in the viewport. Now, let's add a new "
"script on the root node. Name it ``main_panel.gd``."
msgstr ""

#: ../../docs/tutorials/plugins/editor/making_main_screen_plugins.rst:120
msgid ""
"We then add 2 children to this Panel node: first a ``Button`` node. Place it "
"anywhere on the Panel. Then add a ``Label`` node."
msgstr ""

#: ../../docs/tutorials/plugins/editor/making_main_screen_plugins.rst:123
msgid ""
"Now we need to define a behaviour when this button is pressed. This is "
"covered by the :ref:`Handling a signal <doc_scripting_handling_a_signal>` "
"page, so this part will not be described in details in this tutorial. Select "
"the Button node and click the ``Node`` side dock. Select the ``pressed()`` "
"signal and click the ``Connect`` button (you can also double-click the "
"``pressed()`` signal instead). In the window that opened, select the Panel "
"node (we will centralize all behaviors in its attached script). Keep the "
"default function name, make sure that the ``Make function`` toggle is ON and "
"hit ``Connect``. This creates an ``_on_Button_pressed()`` function in the "
"``main_panel.gd`` script, that will be called every time the button is "
"pressed."
msgstr ""

#: ../../docs/tutorials/plugins/editor/making_main_screen_plugins.rst:135
msgid ""
"As the button gets pressed, we want the side-panel's ``Label`` node to show "
"a specific text. As explained above, we cannot directly access the target "
"scene, so we'll emit a signal instead. The ``main_screen_plugin.gd`` script "
"will then connect this signal to the target scene. Let's continue in the "
"``main_panel.gd`` script:"
msgstr ""

#: ../../docs/tutorials/plugins/editor/making_main_screen_plugins.rst:151
msgid ""
"In the same way, this main scene's Label node has to show a value when it "
"receives a specific signal. Let's create a new "
"``_on_side_button_pressed(text_to_show)`` function for this purpose:"
msgstr ""

#: ../../docs/tutorials/plugins/editor/making_main_screen_plugins.rst:160
msgid ""
"We are done for the main screen panel. Save the scene as ``main_panel.tscn``."
msgstr ""

#: ../../docs/tutorials/plugins/editor/making_main_screen_plugins.rst:163
msgid "Tabbed panel scene"
msgstr ""

#: ../../docs/tutorials/plugins/editor/making_main_screen_plugins.rst:165
msgid ""
"The tabbed panel scene is almost identical to the main panel scene. You can "
"either duplicate the ``main_panel.tscn`` file and name the new file "
"``side_panel.tscn``, or re-create it from a new scene by following the "
"previous section again. However, you will have to create a new script and "
"attach it to the Panel root node. Save it as ``side_panel.gd``. Its content "
"is slightly different, as the signal emitted and the target function have "
"different names. Here is the script's full content:"
msgstr ""

#: ../../docs/tutorials/plugins/editor/making_main_screen_plugins.rst:188
msgid "Connecting the two scenes in the plugin script"
msgstr ""

#: ../../docs/tutorials/plugins/editor/making_main_screen_plugins.rst:190
msgid ""
"We now need to update the ``main_screen_plugin.gd`` script so the plugin "
"instances our 2 GUI scenes and places them at the right places in the "
"editor. Here is the full ``main.gd``:"
msgstr ""

#: ../../docs/tutorials/plugins/editor/making_main_screen_plugins.rst:249
msgid ""
"A couple of specific lines were added. First, we defined the constants that "
"contain our 2 GUI packed scenes (``MainPanel`` and ``SidePanel``). We will "
"use these resources to instance both scenes."
msgstr ""

#: ../../docs/tutorials/plugins/editor/making_main_screen_plugins.rst:253
msgid ""
"The ``_enter_tree()`` function is called before ``_ready()``. This is where "
"we actually instance the 2 GUI scenes, and add them as children of specific "
"parts of the editor. The side panel case is similar to the example shown in :"
"ref:`doc_making_plugins` page: we add the scene in an editor dock. We "
"specified it will be placed in the left-side dock, upper-left tab."
msgstr ""

#: ../../docs/tutorials/plugins/editor/making_main_screen_plugins.rst:259
msgid ""
"``EditorPlugin`` class does not provide any function to add an element in "
"the main viewport. We thus have to use the ``get_editor_interface()."
"get_editor_viewport()`` to obtain this viewport and add our main panel "
"instance as a child to it. We call the ``make_visible(false)`` function to "
"hide the main panel so it is not directly shown when first activating the "
"plugin."
msgstr ""

#: ../../docs/tutorials/plugins/editor/making_main_screen_plugins.rst:266
msgid ""
"The ``_exit_tree()`` is pretty straightforward. It is automatically called "
"when the plugin is deactivated. It is then important to ``queue_free()`` the "
"elements previously instanced to preserve memory. If you don't, the elements "
"will effectively be invisible in the editor, but they will remain present in "
"the memory. Multiple de-activations/re-activations will then increase memory "
"usage without any way to free it, which is not good."
msgstr ""

#: ../../docs/tutorials/plugins/editor/making_main_screen_plugins.rst:273
msgid ""
"Finally the ``make_visible()`` function is overridden to hide or show the "
"main panel as needed. This function is automatically called by the editor "
"when the user clicks on another main viewport button such as 2D, 3D or "
"Script."
msgstr ""

#: ../../docs/tutorials/plugins/editor/making_main_screen_plugins.rst:278
msgid "Try the plugin"
msgstr ""

#: ../../docs/tutorials/plugins/editor/making_main_screen_plugins.rst:280
msgid ""
"Activate the plugin in the Project Settings. You'll observe a new button "
"next to 2D, 3D, Script above the main viewport. You'll also notice a new tab "
"in the left dock. Try to click the buttons in both side and main panels: "
"events are emitted and caught by the corresponding target scene to change "
"the Label caption inside it."
msgstr ""

#: ../../docs/tutorials/plugins/editor/making_main_screen_plugins.rst:285
msgid ""
"If you would like to see a more complete example of what main screen plugins "
"are capable of, check out the 2.5D demo projects here: https://github.com/"
"godotengine/godot-demo-projects/tree/master/misc/2.5d"
msgstr ""

#: ../../docs/tutorials/plugins/editor/import_plugins.rst:4
msgid "Import plugins"
msgstr ""

#: ../../docs/tutorials/plugins/editor/import_plugins.rst:6
msgid ""
"This tutorial assumes you already know how to make generic plugins. If in "
"doubt, refer to the :ref:`doc_making_plugins` page. This also assumes you "
"are acquainted with Godot's import system."
msgstr ""

#: ../../docs/tutorials/plugins/editor/import_plugins.rst:13
msgid ""
"An import plugin is a special type of editor tool that allows custom "
"resources to be imported by Godot and be treated as first-class resources. "
"The editor itself comes bundled with a lot of import plugins to handle the "
"common resources like PNG images, Collada and glTF models, Ogg Vorbis "
"sounds, and many more."
msgstr ""

#: ../../docs/tutorials/plugins/editor/import_plugins.rst:18
msgid ""
"This tutorial will show you how to create a simple import plugin to load a "
"custom text file as a material resource. This text file will contain three "
"numeric values separated by comma, which represents the three channels of a "
"color, and the resulting color will be used as the albedo (main color) of "
"the imported material. In this example it will contain the pure blue color "
"(zero red, zero green, and full blue):"
msgstr ""

#: ../../docs/tutorials/plugins/editor/import_plugins.rst:30
msgid "Configuration"
msgstr ""

#: ../../docs/tutorials/plugins/editor/import_plugins.rst:32
msgid ""
"First we need a generic plugin that will handle the initialization and "
"destruction of our import plugin. Let's add the ``plugin.cfg`` file first:"
msgstr ""

#: ../../docs/tutorials/plugins/editor/import_plugins.rst:45
msgid ""
"Then we need the ``material_import.gd`` file to add and remove the import "
"plugin when needed:"
msgstr ""

#: ../../docs/tutorials/plugins/editor/import_plugins.rst:64
msgid ""
"When this plugin is activated, it will create a new instance of the import "
"plugin (which we'll soon make) and add it to the editor using the :ref:"
"`add_import_plugin() <class_EditorPlugin_method_add_import_plugin>` method. "
"We store a reference to it in a class member ``import_plugin`` so we can "
"refer to it later when removing it. The :ref:`remove_import_plugin() "
"<class_EditorPlugin_method_remove_import_plugin>` method is called when the "
"plugin is deactivated to clean up the memory and let the editor know the "
"import plugin isn't available anymore."
msgstr ""

#: ../../docs/tutorials/plugins/editor/import_plugins.rst:73
msgid ""
"Note that the import plugin is a reference type, so it doesn't need to be "
"explicitly released from memory with the ``free()`` function. It will be "
"released automatically by the engine when it goes out of scope."
msgstr ""

#: ../../docs/tutorials/plugins/editor/import_plugins.rst:78
msgid "The EditorImportPlugin class"
msgstr ""

#: ../../docs/tutorials/plugins/editor/import_plugins.rst:80
msgid ""
"The main character of the show is the :ref:`EditorImportPlugin class "
"<class_EditorImportPlugin>`. It is responsible for implementing the methods "
"that are called by Godot when it needs to know how to deal with files."
msgstr ""

#: ../../docs/tutorials/plugins/editor/import_plugins.rst:85
msgid "Let's begin to code our plugin, one method at time:"
msgstr ""

#: ../../docs/tutorials/plugins/editor/import_plugins.rst:96
msgid ""
"The first method is the :ref:"
"`get_importer_name()<class_EditorImportPlugin_method_get_importer_name>`. "
"This is a unique name for your plugin that is used by Godot to know which "
"import was used in a certain file. When the files needs to be reimported, "
"the editor will know which plugin to call."
msgstr ""

#: ../../docs/tutorials/plugins/editor/import_plugins.rst:107
msgid ""
"The :ref:"
"`get_visible_name()<class_EditorImportPlugin_method_get_visible_name>` "
"method is responsible for returning the name of the type it imports and it "
"will be shown to the user in the Import dock."
msgstr ""

#: ../../docs/tutorials/plugins/editor/import_plugins.rst:111
msgid ""
"You should choose this name as a continuation to \"Import as\", e.g. *"
"\"Import as Silly Material\"*. You can name it whatever you want but we "
"recommend a descriptive name for your plugin."
msgstr ""

#: ../../docs/tutorials/plugins/editor/import_plugins.rst:120
msgid ""
"Godot's import system detects file types by their extension. In the :ref:"
"`get_recognized_extensions()<class_EditorImportPlugin_method_get_recognized_extensions>` "
"method you return an array of strings to represent each extension that this "
"plugin can understand. If an extension is recognized by more than one "
"plugin, the user can select which one to use when importing the files."
msgstr ""

#: ../../docs/tutorials/plugins/editor/import_plugins.rst:126
msgid ""
"Common extensions like ``.json`` and ``.txt`` might be used by many plugins. "
"Also, there could be files in the project that are just data for the game "
"and should not be imported. You have to be careful when importing to "
"validate the data. Never expect the file to be well-formed."
msgstr ""

#: ../../docs/tutorials/plugins/editor/import_plugins.rst:136
msgid ""
"The imported files are saved in the ``.import`` folder at the project's "
"root. Their extension should match the type of resource you are importing, "
"but since Godot can't tell what you'll use (because there might be multiple "
"valid extensions for the same resource), you need to declare what will be "
"used in the import."
msgstr ""

#: ../../docs/tutorials/plugins/editor/import_plugins.rst:142
msgid ""
"Since we're importing a Material, we'll use the special extension for such "
"resource types. If you are importing a scene, you can use ``scn``. Generic "
"resources can use the ``res`` extension. However, this is not enforced in "
"any way by the engine."
msgstr ""

#: ../../docs/tutorials/plugins/editor/import_plugins.rst:152
msgid ""
"The imported resource has a specific type, so the editor can know which "
"property slot it belongs to. This allows drag and drop from the FileSystem "
"dock to a property in the Inspector."
msgstr ""

#: ../../docs/tutorials/plugins/editor/import_plugins.rst:156
msgid ""
"In our case it's a :ref:`class_SpatialMaterial`, which can be applied to 3D "
"objects."
msgstr ""

#: ../../docs/tutorials/plugins/editor/import_plugins.rst:159
msgid ""
"If you need to import different types from the same extension, you have to "
"create multiple import plugins. You can abstract the import code on another "
"file to avoid duplication in this regard."
msgstr ""

#: ../../docs/tutorials/plugins/editor/import_plugins.rst:164
msgid "Options and presets"
msgstr ""

#: ../../docs/tutorials/plugins/editor/import_plugins.rst:166
msgid ""
"Your plugin can provide different options to allow the user to control how "
"the resource will be imported. If a set of selected options is common, you "
"can also create different presets to make it easier for the user. The "
"following image shows how the options will appear in the editor:"
msgstr ""

#: ../../docs/tutorials/plugins/editor/import_plugins.rst:173
msgid ""
"Since there might be many presets and they are identified with a number, "
"it's a good practice to use an enum so you can refer to them using names."
msgstr ""

#: ../../docs/tutorials/plugins/editor/import_plugins.rst:185
msgid ""
"Now that the enum is defined, let's keep looking at the methods of an import "
"plugin:"
msgstr ""

#: ../../docs/tutorials/plugins/editor/import_plugins.rst:193
msgid ""
"The :ref:`get_preset_count() "
"<class_EditorImportPlugin_method_get_preset_count>` method returns the "
"amount of presets that this plugins defines. We only have one preset now, "
"but we can make this method future-proof by returning the size of our "
"``Presets`` enumeration."
msgstr ""

#: ../../docs/tutorials/plugins/editor/import_plugins.rst:208
msgid ""
"Here we have the :ref:`get_preset_name() "
"<class_EditorImportPlugin_method_get_preset_name>` method, which gives names "
"to the presets as they will be presented to the user, so be sure to use "
"short and clear names."
msgstr ""

#: ../../docs/tutorials/plugins/editor/import_plugins.rst:213
msgid ""
"We can use the ``match`` statement here to make the code more structured. "
"This way it's easy to add new presets in the future. We use the catch all "
"pattern to return something too. Although Godot won't ask for presets beyond "
"the preset count you defined, it's always better to be on the safe side."
msgstr ""

#: ../../docs/tutorials/plugins/editor/import_plugins.rst:218
msgid ""
"If you have only one preset you could simply return its name directly, but "
"if you do this you have to be careful when you add more presets."
msgstr ""

#: ../../docs/tutorials/plugins/editor/import_plugins.rst:233
msgid ""
"This is the method which defines the available options. :ref:"
"`get_import_options() <class_EditorImportPlugin_method_get_import_options>` "
"returns an array of dictionaries, and each dictionary contains a few keys "
"that are checked to customize the option as its shown to the user. The "
"following table shows the possible keys:"
msgstr ""

#: ../../docs/tutorials/plugins/editor/import_plugins.rst:240
msgid "Key"
msgstr "키"

#: ../../docs/tutorials/plugins/editor/import_plugins.rst:242
#: ../../docs/development/file_formats/tscn.rst:167
msgid "``name``"
msgstr ""

#: ../../docs/tutorials/plugins/editor/import_plugins.rst:242
msgid ""
"The name of the option. When showed, underscores become spaces and first "
"letters are capitalized."
msgstr ""

#: ../../docs/tutorials/plugins/editor/import_plugins.rst:244
msgid "``default_value``"
msgstr ""

#: ../../docs/tutorials/plugins/editor/import_plugins.rst:244
msgid "Any"
msgstr ""

#: ../../docs/tutorials/plugins/editor/import_plugins.rst:244
msgid "The default value of the option for this preset."
msgstr ""

#: ../../docs/tutorials/plugins/editor/import_plugins.rst:246
msgid "``property_hint``"
msgstr ""

#: ../../docs/tutorials/plugins/editor/import_plugins.rst:246
#: ../../docs/tutorials/plugins/editor/import_plugins.rst:250
msgid "Enum value"
msgstr ""

#: ../../docs/tutorials/plugins/editor/import_plugins.rst:246
msgid ""
"One of the :ref:`PropertyHint <enum_@GlobalScope_PropertyHint>` values to "
"use as hint."
msgstr ""

#: ../../docs/tutorials/plugins/editor/import_plugins.rst:248
msgid "``hint_string``"
msgstr ""

#: ../../docs/tutorials/plugins/editor/import_plugins.rst:248
msgid ""
"The hint text of the property. The same as you'd add in the ``export`` "
"statement in GDScript."
msgstr ""

#: ../../docs/tutorials/plugins/editor/import_plugins.rst:250
msgid "``usage``"
msgstr ""

#: ../../docs/tutorials/plugins/editor/import_plugins.rst:250
msgid ""
"One of the :ref:`PropertyUsageFlags <enum_@GlobalScope_PropertyUsageFlags>` "
"values to define the usage."
msgstr ""

#: ../../docs/tutorials/plugins/editor/import_plugins.rst:253
msgid ""
"The ``name`` and ``default_value`` keys are **mandatory**, the rest are "
"optional."
msgstr ""

#: ../../docs/tutorials/plugins/editor/import_plugins.rst:255
msgid ""
"Note that the ``get_import_options`` method receives the preset number, so "
"you can configure the options for each different preset (especially the "
"default value). In this example we use the ``match`` statement, but if you "
"have lots of options and the presets only change the value you may want to "
"create the array of options first and then change it based on the preset."
msgstr ""

#: ../../docs/tutorials/plugins/editor/import_plugins.rst:261
msgid ""
"The ``get_import_options`` method is called even if you don't define presets "
"(by making ``get_preset_count`` return zero). You have to return an array "
"even it's empty, otherwise you can get errors."
msgstr ""

#: ../../docs/tutorials/plugins/editor/import_plugins.rst:271
msgid ""
"For the :ref:`get_option_visibility() "
"<class_EditorImportPlugin_method_get_option_visibility>` method, we simply "
"return ``true`` because all of our options (i.e. the single one we defined) "
"are visible all the time."
msgstr ""

#: ../../docs/tutorials/plugins/editor/import_plugins.rst:276
msgid ""
"If you need to make certain option visible only if another is set with a "
"certain value, you can add the logic in this method."
msgstr ""

#: ../../docs/tutorials/plugins/editor/import_plugins.rst:280
msgid "The ``import`` method"
msgstr ""

#: ../../docs/tutorials/plugins/editor/import_plugins.rst:282
msgid ""
"The heavy part of the process, responsible for converting the files into "
"resources, is covered by the :ref:`import() "
"<class_EditorImportPlugin_method_import>` method. Our sample code is a bit "
"long, so let's split in a few parts:"
msgstr ""

#: ../../docs/tutorials/plugins/editor/import_plugins.rst:298
msgid ""
"The first part of our import method opens and reads the source file. We use "
"the :ref:`File <class_File>` class to do that, passing the ``source_file`` "
"parameter which is provided by the editor."
msgstr ""

#: ../../docs/tutorials/plugins/editor/import_plugins.rst:302
msgid ""
"If there's an error when opening the file, we return it to let the editor "
"know that the import wasn't successful."
msgstr ""

#: ../../docs/tutorials/plugins/editor/import_plugins.rst:317
msgid ""
"This code takes the line of the file it read before and splits it in pieces "
"that are separated by a comma. If there are more or less than the three "
"values, it considers the file invalid and reports an error."
msgstr ""

#: ../../docs/tutorials/plugins/editor/import_plugins.rst:321
msgid ""
"Then it creates a new :ref:`Color <class_Color>` variable and sets its "
"values according to the input file. If the ``use_red_anyway`` option is "
"enabled, then it sets the color as a pure red instead."
msgstr ""

#: ../../docs/tutorials/plugins/editor/import_plugins.rst:330
msgid ""
"This part makes a new :ref:`SpatialMaterial <class_SpatialMaterial>` that is "
"the imported resource. We create a new instance of it and then set its "
"albedo color as the value we got before."
msgstr ""

#: ../../docs/tutorials/plugins/editor/import_plugins.rst:338
msgid ""
"This is the last part and quite an important one, because here we save the "
"made resource to the disk. The path of the saved file is generated and "
"informed by the editor via the ``save_path`` parameter. Note that this comes "
"**without** the extension, so we add it using :ref:`string formatting "
"<doc_gdscript_printf>`. For this we call the ``get_save_extension`` method "
"that we defined earlier, so we can be sure that they won't get out of sync."
msgstr ""

#: ../../docs/tutorials/plugins/editor/import_plugins.rst:345
msgid ""
"We also return the result from the :ref:`ResourceSaver.save() "
"<class_ResourceSaver_method_save>` method, so if there's an error in this "
"step, the editor will know about it."
msgstr ""

#: ../../docs/tutorials/plugins/editor/import_plugins.rst:350
msgid "Platform variants and generated files"
msgstr ""

#: ../../docs/tutorials/plugins/editor/import_plugins.rst:352
msgid ""
"You may have noticed that our plugin ignored two arguments of the ``import`` "
"method. Those are *return arguments* (hence the ``r`` at the beginning of "
"their name), which means that the editor will read from them after calling "
"your import method. Both of them are arrays that you can fill with "
"information."
msgstr ""

#: ../../docs/tutorials/plugins/editor/import_plugins.rst:357
msgid ""
"The ``r_platform_variants`` argument is used if you need to import the "
"resource differently depending on the target platform. While it's called "
"*platform* variants, it is based on the presence of :ref:`feature tags "
"<doc_feature_tags>`, so even the same platform can have multiple variants "
"depending on the setup."
msgstr ""

#: ../../docs/tutorials/plugins/editor/import_plugins.rst:362
msgid ""
"To import a platform variant, you need to save it with the feature tag "
"before the extension, and then push the tag to the ``r_platform_variants`` "
"array so the editor can know that you did."
msgstr ""

#: ../../docs/tutorials/plugins/editor/import_plugins.rst:366
msgid ""
"For example, let's say we save a different material for a mobile platform. "
"We would need to do something like the following:"
msgstr ""

#: ../../docs/tutorials/plugins/editor/import_plugins.rst:374
msgid ""
"The ``r_gen_files`` argument is meant for extra files that are generated "
"during your import process and need to be kept. The editor will look at it "
"to understand the dependencies and make sure the extra file is not "
"inadvertently deleted."
msgstr ""

#: ../../docs/tutorials/plugins/editor/import_plugins.rst:379
msgid ""
"This is also an array and should be filled with full paths of the files you "
"save. As an example, let's create another material for the next pass and "
"save it in a different file:"
msgstr ""

#: ../../docs/tutorials/plugins/editor/import_plugins.rst:395
msgid "Trying the plugin"
msgstr ""

#: ../../docs/tutorials/plugins/editor/import_plugins.rst:397
msgid ""
"This has been theoretical, but now that the import plugin is done, let's "
"test it. Make sure you created the sample file (with the contents described "
"in the introduction section) and save it as ``test.mtxt``. Then activate the "
"plugin in the Project Settings."
msgstr ""

#: ../../docs/tutorials/plugins/editor/import_plugins.rst:402
msgid ""
"If everything goes well, the import plugin is added to the editor and the "
"file system is scanned, making the custom resource appear on the FileSystem "
"dock. If you select it and focus the Import dock, you can see the only "
"option to select there."
msgstr ""

#: ../../docs/tutorials/plugins/editor/import_plugins.rst:407
msgid ""
"Create a MeshInstance node in the scene, and for its Mesh property set up a "
"new SphereMesh. Unfold the Material section in the Inspector and then drag "
"the file from the FileSystem dock to the material property. The object will "
"update in the viewport with the blue color of the imported material."
msgstr ""

#: ../../docs/tutorials/plugins/editor/import_plugins.rst:414
msgid ""
"Go to Import dock, enable the \"Use Red Anyway\" option, and click on "
"\"Reimport\". This will update the imported material and should "
"automatically update the view showing the red color instead."
msgstr ""

#: ../../docs/tutorials/plugins/editor/import_plugins.rst:418
msgid ""
"And that's it! Your first import plugin is done! Now get creative and make "
"plugins for your own beloved formats. This can be quite useful to write your "
"data in a custom format and then use it in Godot as if they were native "
"resources. This shows how the import system is powerful and extendable."
msgstr ""

#: ../../docs/tutorials/plugins/editor/spatial_gizmos.rst:4
#, fuzzy
msgid "Spatial gizmo plugins"
msgstr "간단한 플러그인 만들기"

#: ../../docs/tutorials/plugins/editor/spatial_gizmos.rst:9
msgid ""
"Spatial gizmo plugins are used by the editor and custom plugins to define "
"the gizmos attached to any kind of Spatial node."
msgstr ""

#: ../../docs/tutorials/plugins/editor/spatial_gizmos.rst:12
msgid ""
"This tutorial will show you the two main approaches to defining your own "
"custom gizmos. The first option works well for simple gizmos and creates "
"less clutter in your plugin structure, while the second one will let you "
"store some per-gizmo data."
msgstr ""

#: ../../docs/tutorials/plugins/editor/spatial_gizmos.rst:16
msgid ""
"This tutorial assumes you already know how to make generic plugins. If in "
"doubt, refer to the :ref:`doc_making_plugins` page."
msgstr ""

#: ../../docs/tutorials/plugins/editor/spatial_gizmos.rst:20
msgid "The EditorSpatialGizmoPlugin"
msgstr ""

#: ../../docs/tutorials/plugins/editor/spatial_gizmos.rst:22
msgid ""
"Regardless of the approach we choose, we will need to create a new :ref:"
"`EditorSpatialGizmoPlugin <class_EditorSpatialGizmoPlugin>`. This will allow "
"us to set a name for the new gizmo type and define other behaviors such as "
"whether the gizmo can be hidden or not."
msgstr ""

#: ../../docs/tutorials/plugins/editor/spatial_gizmos.rst:27
msgid "This would be a basic setup:"
msgstr ""

#: ../../docs/tutorials/plugins/editor/spatial_gizmos.rst:57
msgid ""
"For simple gizmos, just inheriting :ref:`EditorSpatialGizmoPlugin "
"<class_EditorSpatialGizmoPlugin>` is enough. If you want to store some per-"
"gizmo data or you are porting a Godot 3.0 gizmo to 3.1+, you should go with "
"the second approach."
msgstr ""

#: ../../docs/tutorials/plugins/editor/spatial_gizmos.rst:63
msgid "Simple approach"
msgstr ""

#: ../../docs/tutorials/plugins/editor/spatial_gizmos.rst:65
msgid ""
"The first step is to, in our custom gizmo plugin, override the :ref:"
"`has_gizmo()<class_EditorSpatialGizmoPlugin_method_has_gizmo>` method so "
"that it returns ``true`` when the spatial parameter is of our target type."
msgstr ""

#: ../../docs/tutorials/plugins/editor/spatial_gizmos.rst:76
msgid ""
"Then we can override methods like :ref:"
"`redraw()<class_EditorSpatialGizmoPlugin_method_redraw>` or all the handle "
"related ones."
msgstr ""

#: ../../docs/tutorials/plugins/editor/spatial_gizmos.rst:107
msgid ""
"Note that we created a material in the `_init` method, and retrieved it in "
"the `redraw` method using :ref:"
"`get_material()<class_EditorSpatialGizmoPlugin_method_get_material>`. This "
"method retrieves one of the material's variants depending on the state of "
"the gizmo (selected and/or editable)."
msgstr ""

#: ../../docs/tutorials/plugins/editor/spatial_gizmos.rst:112
#, fuzzy
msgid "So the final plugin would look somewhat like this:"
msgstr "당신의 최종 씬은 이렇게 보여야 할 것입니다."

#: ../../docs/tutorials/plugins/editor/spatial_gizmos.rst:148
msgid ""
"Note that we just added some handles in the redraw method, but we still need "
"to implement the rest of handle-related callbacks in :ref:"
"`EditorSpatialGizmoPlugin <class_EditorSpatialGizmoPlugin>` to get properly "
"working handles."
msgstr ""

#: ../../docs/tutorials/plugins/editor/spatial_gizmos.rst:153
msgid "Alternative approach"
msgstr ""

#: ../../docs/tutorials/plugins/editor/spatial_gizmos.rst:155
msgid ""
"In some cases we want to provide our own implementation of :ref:"
"`EditorSpatialGizmo<class_EditorSpatialGizmo>`, maybe because we want to "
"have some state stored in each gizmo or because we are porting an old gizmo "
"plugin and we don't want to go through the rewriting process."
msgstr ""

#: ../../docs/tutorials/plugins/editor/spatial_gizmos.rst:159
msgid ""
"In these cases all we need to do is, in our new gizmo plugin, override :ref:"
"`create_gizmo()<class_EditorSpatialGizmoPlugin_method_create_gizmo>`, so it "
"returns our custom gizmo implementation for the Spatial nodes we want to "
"target."
msgstr ""

#: ../../docs/tutorials/plugins/editor/spatial_gizmos.rst:181
msgid ""
"This way all the gizmo logic and drawing methods can be implemented in a new "
"clas extending :ref:`EditorSpatialGizmo<class_EditorSpatialGizmo>`, like so:"
msgstr ""

#: ../../docs/tutorials/plugins/editor/spatial_gizmos.rst:217
msgid ""
"Note that we just added some handles in the redraw method, but we still need "
"to implement the rest of handle-related callbacks in :ref:"
"`EditorSpatialGizmo<class_EditorSpatialGizmo>` to get properly working "
"handles."
msgstr ""

#: ../../docs/tutorials/plugins/editor/inspector_plugins.rst:4
#, fuzzy
msgid "Inspector plugins"
msgstr ":ref:`doc_inspector_plugins`"

#: ../../docs/tutorials/plugins/editor/inspector_plugins.rst:6
msgid ""
"The inspector dock supports custom plugins to create your own widgets for "
"editing properties. This tutorial explains how to use the :ref:"
"`class_EditorInspectorPlugin` and :ref:`class_EditorProperty` classes to "
"write such plugins with the example of creating a custom value editor."
msgstr ""

#: ../../docs/tutorials/plugins/editor/inspector_plugins.rst:14
msgid ""
"Just like :ref:`doc_making_plugins`, we start out by making a new plugin, "
"getting a ``plugin.cfg`` file created, and start with our :ref:"
"`class_EditorPlugin`.  However, instead of using ``add_custom_node`` or "
"``add_control_to_dock`` we'll use ``add_inspector_plugin``."
msgstr ""

#: ../../docs/tutorials/plugins/editor/inspector_plugins.rst:37
#, fuzzy
msgid "EditorInspectorPlugin"
msgstr ":ref:`doc_inspector_plugins`"

#: ../../docs/tutorials/plugins/editor/inspector_plugins.rst:39
msgid ""
"To actually connect into the Inspector, we create a :ref:"
"`class_EditorInspectorPlugin` class. This script provides the \"hooks\" to "
"the inspector. Thanks to this class, the editor will call the functions "
"within the EditorInspectorPlugin while it goes through the process of "
"building the UI for the inspector. The script is used to check if we should "
"enable ourselves for any :ref:`class_Object` that is currently in the "
"inspector (including any :ref:`class_Resource` that is embedded!)."
msgstr ""

#: ../../docs/tutorials/plugins/editor/inspector_plugins.rst:47
msgid ""
"Once enabled, EditorInspectorPlugin has methods that allow for adding :ref:"
"`class_EditorProperty` nodes or just custom :ref:`class_Control` nodes to "
"the beginning and end of the inspector for that :ref:`class_Object`, or for "
"overriding or changing existing property editors."
msgstr ""

#: ../../docs/tutorials/plugins/editor/inspector_plugins.rst:80
#, fuzzy
msgid "EditorProperty"
msgstr "엔진 개발"

#: ../../docs/tutorials/plugins/editor/inspector_plugins.rst:82
msgid ""
"Next, we define the actual :ref:`class_EditorProperty` custom value editor "
"that we want instantiated to edit integers. This is a custom :ref:"
"`class_Control` and we can add any kinds of additional nodes to make "
"advanced widgets to embed in the inspector."
msgstr ""

#: ../../docs/tutorials/plugins/editor/visual_shader_plugins.rst:4
#, fuzzy
msgid "Visual Shader plugins"
msgstr ":ref:`doc_visual_shader_plugins`"

#: ../../docs/tutorials/plugins/editor/visual_shader_plugins.rst:6
msgid ""
"Visual Shader plugins are used to create custom :ref:`class_VisualShader` "
"nodes in GDScript."
msgstr ""

#: ../../docs/tutorials/plugins/editor/visual_shader_plugins.rst:9
msgid ""
"The creation process is different from usual editor plugins. You do not need "
"to create a ``plugin.cfg`` file to register it; instead, create and save a "
"script file and it will be ready to use, provided the custom node is "
"registered with ``class_name``."
msgstr ""

#: ../../docs/tutorials/plugins/editor/visual_shader_plugins.rst:14
msgid ""
"This short tutorial will explain how to make a Perlin-3D noise node "
"(original code from this `GPU noise shaders plugin <https://github.com/curly-"
"brace/Godot-3.0-Noise-Shaders/blob/master/assets/gpu_noise_shaders/"
"classic_perlin3d.tres>`_."
msgstr ""

#: ../../docs/tutorials/plugins/editor/visual_shader_plugins.rst:18
msgid ""
"Create a Sprite and assign a :ref:`class_ShaderMaterial` to its material "
"slot:"
msgstr ""

#: ../../docs/tutorials/plugins/editor/visual_shader_plugins.rst:22
msgid "Assign :ref:`class_VisualShader` to the shader slot of the material:"
msgstr ""

#: ../../docs/tutorials/plugins/editor/visual_shader_plugins.rst:26
msgid ""
"Don't forget to change its mode to \"CanvasItem\" (if you are using a "
"Sprite):"
msgstr ""

#: ../../docs/tutorials/plugins/editor/visual_shader_plugins.rst:30
msgid ""
"Create a script which derives from :ref:`class_VisualShaderNodeCustom`. This "
"is all you need to initialize your plugin."
msgstr ""

#: ../../docs/tutorials/plugins/editor/visual_shader_plugins.rst:182
msgid ""
"Save it and open the Visual Shader. You should see your new node type within "
"the member's dialog (if you can't see your new node, try restarting the "
"editor):"
msgstr ""

#: ../../docs/tutorials/plugins/editor/visual_shader_plugins.rst:186
msgid "Place it on a graph and connect the required ports:"
msgstr ""

#: ../../docs/tutorials/plugins/editor/visual_shader_plugins.rst:190
msgid ""
"That is everything you need to do, as you can see it is easy to create your "
"own custom VisualShader nodes!"
msgstr ""

#: ../../docs/tutorials/plugins/gdnative/gdnative-c-example.rst:4
msgid "GDNative C example"
msgstr ""

#: ../../docs/tutorials/plugins/gdnative/gdnative-c-example.rst:9
msgid ""
"This tutorial will introduce you to the bare minimum required to create "
"GDNative modules. This should be your starting point into the world of "
"GDNative. Understanding the contents of this tutorial will help you in "
"understanding all that is to come after this."
msgstr ""

#: ../../docs/tutorials/plugins/gdnative/gdnative-c-example.rst:14
msgid ""
"Before we begin, you can download the source code to the example object we "
"describe below in the `GDNative-demos repository <https://github.com/"
"GodotNativeTools/GDNative-demos/tree/master/c/SimpleDemo>`_."
msgstr ""

#: ../../docs/tutorials/plugins/gdnative/gdnative-c-example.rst:18
msgid ""
"This example project also contains a SConstruct file that makes compiling a "
"little easier, but in this tutorial we'll be doing things by hand to "
"understand the process."
msgstr ""

#: ../../docs/tutorials/plugins/gdnative/gdnative-c-example.rst:22
msgid ""
":ref:`GDNative <class_GDNative>` can be used to create several types of "
"additions to Godot, using interfaces such as :ref:`PluginScript "
"<class_PluginScript>` or :ref:`ARVRInterfaceGDNative "
"<class_ARVRInterfaceGDNative>`. In this tutorial we are going to look at "
"creating a :ref:`NativeScript <class_NativeScript>` module. NativeScript "
"allows you to write logic in C or C++ in a similar fashion as you would "
"write a GDScript file. We'll be creating the C equivalent of this GDScript:"
msgstr ""

#: ../../docs/tutorials/plugins/gdnative/gdnative-c-example.rst:43
msgid ""
"Future tutorials will focus on the other types of GDNative modules and "
"explain when and how to use each of them."
msgstr ""

#: ../../docs/tutorials/plugins/gdnative/gdnative-c-example.rst:47
msgid "Prerequisites"
msgstr ""

#: ../../docs/tutorials/plugins/gdnative/gdnative-c-example.rst:49
msgid "Before we start you'll need a few things:"
msgstr ""

#: ../../docs/tutorials/plugins/gdnative/gdnative-c-example.rst:51
msgid "A Godot executable for your target version."
msgstr ""

#: ../../docs/tutorials/plugins/gdnative/gdnative-c-example.rst:52
msgid ""
"A C compiler. On Linux, install ``gcc`` or ``clang`` from your package "
"manager. On macOS, you can install Xcode from the Mac App Store. On Windows, "
"you can use Visual Studio 2015 or later, or MinGW-w64."
msgstr ""

#: ../../docs/tutorials/plugins/gdnative/gdnative-c-example.rst:55
msgid ""
"A Git clone of the `godot_headers repository <https://github.com/"
"GodotNativeTools/godot_headers>`_: these are the C headers for Godot's "
"public API exposed to GDNative."
msgstr ""

#: ../../docs/tutorials/plugins/gdnative/gdnative-c-example.rst:59
msgid ""
"For the latter, we suggest that you create a dedicated folder for this "
"GDNative example project, open a terminal in that folder and execute:"
msgstr ""

#: ../../docs/tutorials/plugins/gdnative/gdnative-c-example.rst:66
msgid "This will download the required files into that folder."
msgstr ""

#: ../../docs/tutorials/plugins/gdnative/gdnative-c-example.rst:70
msgid ""
"If you plan to use Git for your GDNative project, you can also add "
"``godot_headers`` as a Git submodule."
msgstr ""

#: ../../docs/tutorials/plugins/gdnative/gdnative-c-example.rst:75
msgid ""
"The ``godot_headers`` repository has different branches. As Godot evolves, "
"so does GDNative. While we try to preserve compatibility between version, "
"you should always build your GDNative module against headers matching the "
"Godot stable branch (e.g. ``3.1``) and ideally actual release (e.g. ``3.1.1-"
"stable``) that you use. GDNative modules built against older versions of the "
"Godot headers *may* work with newer versions of the engine, but not the "
"other way around."
msgstr ""

#: ../../docs/tutorials/plugins/gdnative/gdnative-c-example.rst:83
msgid ""
"The ``master`` branch of the ``godot_headers`` repository is kept in line "
"with the ``master`` branch of Godot and thus contains the GDNative class and "
"structure definitions that will work with the latest development builds."
msgstr ""

#: ../../docs/tutorials/plugins/gdnative/gdnative-c-example.rst:87
msgid ""
"If you want to write a GDNative module for a stable version of Godot, look "
"at the available Git tags (with ``git tags``) for the one matching your "
"engine version. In the ``godot_headers`` repository, such tags are prefixed "
"with ``godot-``, so you can e.g. checkout the ``godot-3.1.1-stable`` tag for "
"use with Godot 3.1.1. In your cloned repository, you can do:"
msgstr ""

#: ../../docs/tutorials/plugins/gdnative/gdnative-c-example.rst:97
msgid ""
"If a tag matching your stable release is missing for any reason, you can "
"fall back to the matching stable branch (e.g. ``3.1``), which you would also "
"check out with ``git checkout 3.1``."
msgstr ""

#: ../../docs/tutorials/plugins/gdnative/gdnative-c-example.rst:101
msgid ""
"If you are building Godot from source with your own changes that impact "
"GDNative, you can find the updated class and structure definition in "
"``<godotsource>/modules/gdnative/include``"
msgstr ""

#: ../../docs/tutorials/plugins/gdnative/gdnative-c-example.rst:106
msgid "Our C source"
msgstr ""

#: ../../docs/tutorials/plugins/gdnative/gdnative-c-example.rst:108
msgid ""
"Let's start by writing our main code. Eventually, we want to end up with a "
"file structure that looks along those lines:"
msgstr ""

#: ../../docs/tutorials/plugins/gdnative/gdnative-c-example.rst:126
msgid ""
"Open up Godot and create a new project called \"simple\" alongside your "
"``godot_headers`` Git clone. This will create the ``simple`` folder and "
"``project.godot`` file. Then manually create a ``src`` folder alongside the "
"``simple`` folder, and a ``bin`` subfolder in the ``simple`` folder."
msgstr ""

#: ../../docs/tutorials/plugins/gdnative/gdnative-c-example.rst:131
msgid ""
"We're going to start by having a look at what our ``simple.c`` file "
"contains. Now, for our example here we're making a single C source file "
"without a header to keep things simple. Once you start writing bigger "
"projects it is advisable to break your project up into multiple files. That "
"however falls outside of the scope of this tutorial."
msgstr ""

#: ../../docs/tutorials/plugins/gdnative/gdnative-c-example.rst:137
msgid ""
"We'll be looking at the source code bit by bit so all the parts below should "
"all be put together into one big file. Each section will be explained as we "
"add it."
msgstr ""

#: ../../docs/tutorials/plugins/gdnative/gdnative-c-example.rst:149
msgid ""
"The above code includes the GDNative API struct header and a standard header "
"that we will use further down for string operations. It then defines two "
"pointers to two different structs. GDNative supports a large collection of "
"functions for calling back into the main Godot executable. In order for your "
"module to have access to these functions, GDNative provides your application "
"with a struct containing pointers to all these functions."
msgstr ""

#: ../../docs/tutorials/plugins/gdnative/gdnative-c-example.rst:156
msgid ""
"To keep this implementation modular and easily extendable, the core "
"functions are available directly through the \"core\" API struct, but "
"additional functions have their own \"GDNative structs\" that are accessible "
"through extensions."
msgstr ""

#: ../../docs/tutorials/plugins/gdnative/gdnative-c-example.rst:160
msgid ""
"In our example, we access one of these extension to gain access to the "
"functions specifically needed for NativeScript."
msgstr ""

#: ../../docs/tutorials/plugins/gdnative/gdnative-c-example.rst:163
msgid ""
"A NativeScript behaves like any other script in Godot. Because the "
"NativeScript API is rather low level, it requires the library to specify "
"many things more verbosely than other scripting systems, such as GDScript. "
"When a NativeScript instance gets created, a library-given constructor gets "
"called. When that instance gets destroyed, the given destructor will be "
"executed."
msgstr ""

#: ../../docs/tutorials/plugins/gdnative/gdnative-c-example.rst:176
msgid ""
"These are forward declarations for the functions we'll be implementing for "
"our object. A constructor and destructor is needed. Additionally, the object "
"will have a single method called ``get_data``."
msgstr ""

#: ../../docs/tutorials/plugins/gdnative/gdnative-c-example.rst:180
msgid ""
"Next up is the first of the entry points Godot will call when our dynamic "
"library is loaded. These methods are all prefixed with ``godot_`` (you can "
"change this later on) followed by their name. ``gdnative_init`` is a "
"function that initializes our dynamic library. Godot will give it a pointer "
"to a structure that contains various bits of information we may find useful "
"among which the pointers to our API structures."
msgstr ""

#: ../../docs/tutorials/plugins/gdnative/gdnative-c-example.rst:187
msgid ""
"For any additional API structures we need to loop through our extensions "
"array and check the type of extension."
msgstr ""

#: ../../docs/tutorials/plugins/gdnative/gdnative-c-example.rst:206
msgid ""
"Next up is ``gdnative_terminate`` which is called before the library is "
"unloaded. Godot will unload the library when no object uses it anymore. "
"Here, you can do any cleanup you may need to do. For our example, we're "
"simply going to clear our API pointers."
msgstr ""

#: ../../docs/tutorials/plugins/gdnative/gdnative-c-example.rst:218
msgid ""
"Finally we have ``nativescript_init`` which is the most important function "
"we'll need today. This function will be called by Godot as part of loading a "
"GDNative library and communicates back to the engine what objects we make "
"available."
msgstr ""

#: ../../docs/tutorials/plugins/gdnative/gdnative-c-example.rst:243
msgid ""
"We first tell the engine which classes are implemented by calling "
"``nativescript_register_class``. The first parameter here is the handle "
"pointer given to us. The second is the name of our object class. The third "
"is the type of object in Godot that we 'inherit' from; this is not true "
"inheritance but it's close enough. Finally, our fourth and fifth parameters "
"are descriptions for our constructor and destructor."
msgstr ""

#: ../../docs/tutorials/plugins/gdnative/gdnative-c-example.rst:250
msgid ""
"We then tell Godot about our methods (well our one method in this case), by "
"calling ``nativescript_register_method`` for each method of our class. In "
"our case, that is just ``get_data``. Our first parameter is yet again our "
"handle pointer. The second is again the name of the object class we're "
"registering. The third is the name of our function as it will be known to "
"GDScript. The fourth is our attributes setting (see "
"``godot_method_rpc_mode`` enum in ``godot_headers/nativescript/"
"godot_nativescript.h`` for possible values). The fifth and final parameter "
"is a description of which function to call when the method gets called."
msgstr ""

#: ../../docs/tutorials/plugins/gdnative/gdnative-c-example.rst:260
msgid ""
"The description struct ``instance_method`` contains the function pointer to "
"the function itself as first field. The other two fields in these structs "
"are for specifying per-method userdata. The second is the ``method_data`` "
"field which is passed on every function call as the ``p_method_data`` "
"argument. This is useful to reuse one function for different methods on "
"possibly multiple different script-classes. If the ``method_data`` value is "
"a pointer to memory that needs to be freed, the third ``free_func`` field "
"can contain a pointer to a function that will free that memory. That free "
"function gets called when the script itself (not instance!) gets unloaded "
"(so usually at library-unload time)."
msgstr ""

#: ../../docs/tutorials/plugins/gdnative/gdnative-c-example.rst:270
msgid ""
"Now, it's time to start working on the functions of our object. First, we "
"define a structure that we use to store the member data of an instance of "
"our GDNative class."
msgstr ""

#: ../../docs/tutorials/plugins/gdnative/gdnative-c-example.rst:280
msgid ""
"And then, we define our constructor. All we do in our constructor is "
"allocate memory for our structure and fill it with some data. Note that we "
"use Godot's memory functions so the memory gets tracked and then return the "
"pointer to our new structure. This pointer will act as our instance "
"identifier in case multiple objects are instantiated."
msgstr ""

#: ../../docs/tutorials/plugins/gdnative/gdnative-c-example.rst:286
msgid ""
"This pointer will be passed to any of our functions related to our object as "
"a parameter called ``p_user_data``, and can both be used to identify our "
"instance and to access its member data."
msgstr ""

#: ../../docs/tutorials/plugins/gdnative/gdnative-c-example.rst:299
msgid ""
"Our destructor is called when Godot is done with our object and we free our "
"instances' member data."
msgstr ""

#: ../../docs/tutorials/plugins/gdnative/gdnative-c-example.rst:308
msgid ""
"And finally, we implement our ``get_data`` function. Data is always sent and "
"returned as variants so in order to return our data, which is a string, we "
"first need to convert our C string to a Godot string object, and then copy "
"that string object into the variant we are returning."
msgstr ""

#: ../../docs/tutorials/plugins/gdnative/gdnative-c-example.rst:329
msgid ""
"Strings are heap-allocated in Godot, so they have a destructor which frees "
"the memory. Destructors are named ``godot_TYPENAME_destroy``. When a Variant "
"gets created with a String, it references the String. That means that the "
"original String can be \"destroyed\" to decrease the ref-count. If that does "
"not happen the String memory will leak since the ref-count will never be "
"zero and the memory never deallocated. The returned variant gets "
"automatically destroyed by Godot."
msgstr ""

#: ../../docs/tutorials/plugins/gdnative/gdnative-c-example.rst:338
msgid ""
"In more complex operations it can be confusing the keep track of which value "
"needs to be deallocated and which does not. As a general rule: call "
"``godot_TYPENAME_destroy`` when a C++ destructor would be called instead. "
"The String destructor would be called in C++ after the Variant was created, "
"so the same is necessary in C."
msgstr ""

#: ../../docs/tutorials/plugins/gdnative/gdnative-c-example.rst:344
msgid "The variant we return is destroyed automatically by Godot."
msgstr ""

#: ../../docs/tutorials/plugins/gdnative/gdnative-c-example.rst:346
msgid "And that is the whole source code of our module."
msgstr ""

#: ../../docs/tutorials/plugins/gdnative/gdnative-c-example.rst:351
msgid ""
"We now need to compile our source code. As mentioned our example project on "
"GitHub contains a SCons configuration that does all the hard work for you, "
"but for our tutorial here we are going to call the compilers directly."
msgstr ""

#: ../../docs/tutorials/plugins/gdnative/gdnative-c-example.rst:355
msgid ""
"Assuming you are sticking to the folder structure suggested above, it is "
"best to open a terminal session in the ``src`` folder and execute the "
"commands from there. Make sure to create the ``bin`` folder before you "
"proceed."
msgstr ""

#: ../../docs/tutorials/plugins/gdnative/gdnative-c-example.rst:359
msgid "On Linux:"
msgstr ""

#: ../../docs/tutorials/plugins/gdnative/gdnative-c-example.rst:366
msgid "On macOS:"
msgstr ""

#: ../../docs/tutorials/plugins/gdnative/gdnative-c-example.rst:373
msgid "On Windows:"
msgstr ""

#: ../../docs/tutorials/plugins/gdnative/gdnative-c-example.rst:382
msgid ""
"On the Windows build you also end up with a ``libsimple.lib`` library. This "
"is a library that you can compile into a project to provide access to the "
"DLL. We get it as a byproduct and we do not need it :) When exporting your "
"game for release this file will be ignored."
msgstr ""

#: ../../docs/tutorials/plugins/gdnative/gdnative-c-example.rst:388
msgid "Creating the GDNativeLibrary (``.gdnlib``) file"
msgstr ""

#: ../../docs/tutorials/plugins/gdnative/gdnative-c-example.rst:390
msgid ""
"With our module compiled, we now need to create a corresponding :ref:"
"`GDNativeLibrary <class_GDNativeLibrary>` resource with ``.gdnlib`` "
"extension which we place alongside our dynamic libraries. This file tells "
"Godot what dynamic libraries are part of our module and need to be loaded "
"per platform."
msgstr ""

#: ../../docs/tutorials/plugins/gdnative/gdnative-c-example.rst:396
msgid ""
"We can use Godot to generate this file, so open the \"simple\" project in "
"the editor."
msgstr ""

#: ../../docs/tutorials/plugins/gdnative/gdnative-c-example.rst:399
msgid "Start by clicking the create resource button in the Inspector:"
msgstr ""

#: ../../docs/tutorials/plugins/gdnative/gdnative-c-example.rst:403
msgid "And select ``GDNativeLibrary``:"
msgstr ""

#: ../../docs/tutorials/plugins/gdnative/gdnative-c-example.rst:407
msgid ""
"You should see a contextual editor appear in the bottom panel. Use the "
"\"Expand Bottom Panel\" button in the bottom right to expand it to full "
"height:"
msgstr ""

#: ../../docs/tutorials/plugins/gdnative/gdnative-c-example.rst:413
#, fuzzy
msgid "General properties"
msgstr "노드 속성"

#: ../../docs/tutorials/plugins/gdnative/gdnative-c-example.rst:415
msgid ""
"In the Inspector, you have various properties to control loading the library."
msgstr ""

#: ../../docs/tutorials/plugins/gdnative/gdnative-c-example.rst:417
msgid ""
"If *Load Once* is enabled, our library is loaded only once and each "
"individual script that uses our library will use the same data. Any variable "
"you define globally will be accessible from any instance of your object you "
"create. If *Load Once* is disabled, a new copy of the library is loaded into "
"memory each time a script accesses the library."
msgstr ""

#: ../../docs/tutorials/plugins/gdnative/gdnative-c-example.rst:423
msgid ""
"If *Singleton* is enabled, our library is automatically loaded and a "
"function called ``godot_gdnative_singleton`` is called. We'll leave that for "
"another tutorial."
msgstr ""

#: ../../docs/tutorials/plugins/gdnative/gdnative-c-example.rst:427
msgid ""
"The *Symbol Prefix* is a prefix for our core functions, such as ``godot_`` "
"in ``godot_nativescript_init`` seen earlier. If you use multiple GDNative "
"libraries that you wish to statically link, you will have to use different "
"prefixes. This again is a subject to dive into deeper in a separate "
"tutorial, it is only needed at this time for deployment to iOS as this "
"platform does not like dynamic libraries."
msgstr ""

#: ../../docs/tutorials/plugins/gdnative/gdnative-c-example.rst:434
msgid ""
"*Reloadable* defines whether the library should be reloaded when the editor "
"loses and gains focus, typically to pick up new or modified symbols from any "
"change made to the library externally."
msgstr ""

#: ../../docs/tutorials/plugins/gdnative/gdnative-c-example.rst:439
#, fuzzy
msgid "Platform libraries"
msgstr "플랫폼 이름."

#: ../../docs/tutorials/plugins/gdnative/gdnative-c-example.rst:441
msgid ""
"The GDNativeLibrary editor plugin lets you configure two things for each "
"platform and architecture that you aim to support."
msgstr ""

#: ../../docs/tutorials/plugins/gdnative/gdnative-c-example.rst:444
msgid ""
"The *Dynamic Library* column (``entry`` section in the saved file) tells us "
"for each platform and feature combination which dynamic library has to be "
"loaded. This also informs the exporter which files need to be exported when "
"exporting to a specific platform."
msgstr ""

#: ../../docs/tutorials/plugins/gdnative/gdnative-c-example.rst:449
msgid ""
"The *Dependencies* column (also ``dependencies`` section) tells Godot what "
"other files need to be exported for each platform in order for our library "
"to work. Say that your GDNative module uses another DLL to implement "
"functionality from a 3rd party library, this is where you list that DLL."
msgstr ""

#: ../../docs/tutorials/plugins/gdnative/gdnative-c-example.rst:454
msgid ""
"For our example, we only built libraries for Linux, macOS and/or Windows, so "
"you can link them in the relevant fields by clicking the folder button. If "
"you built all three libraries, you should have something like this:"
msgstr ""

#: ../../docs/tutorials/plugins/gdnative/gdnative-c-example.rst:461
#, fuzzy
msgid "Saving the resource"
msgstr "리소스 해제(Free)하기"

#: ../../docs/tutorials/plugins/gdnative/gdnative-c-example.rst:463
msgid ""
"We can then save our GDNativeLibrary resource as ``bin/libsimple.gdnlib`` "
"with the Save button in the Inspector:"
msgstr ""

#: ../../docs/tutorials/plugins/gdnative/gdnative-c-example.rst:468
msgid ""
"The file is saved in a text-based format and should have contents similar to "
"this:"
msgstr ""

#: ../../docs/tutorials/plugins/gdnative/gdnative-c-example.rst:495
msgid "Creating the NativeScript (``.gdns``) file"
msgstr ""

#: ../../docs/tutorials/plugins/gdnative/gdnative-c-example.rst:497
msgid ""
"With our ``.gdnlib`` file we've told Godot how to load our library, now we "
"need to tell it about our \"Simple\" object class. We do this by creating a :"
"ref:`NativeScript <class_NativeScript>` resource file with ``.gdns`` "
"extension."
msgstr ""

#: ../../docs/tutorials/plugins/gdnative/gdnative-c-example.rst:501
msgid ""
"Like done for the GDNativeLibrary resource, click the button to create a new "
"resource in the Inspector and select ``NativeScript``:"
msgstr ""

#: ../../docs/tutorials/plugins/gdnative/gdnative-c-example.rst:506
msgid ""
"The inspector will show a few properties that we need to fill. As *Class "
"Name* we enter \"Simple\" which is the object class name that we declared in "
"our C source when calling ``godot_nativescript_register_class``. We also "
"need to select our ``.gdnlib`` file by clicking on *Library* and selecting "
"*Load*:"
msgstr ""

#: ../../docs/tutorials/plugins/gdnative/gdnative-c-example.rst:513
msgid "Finally click on the save icon and save this as ``bin/simple.gdns``:"
msgstr ""

#: ../../docs/tutorials/plugins/gdnative/gdnative-c-example.rst:517
msgid ""
"Now it's time to build our scene. Add a Control node to your scene as your "
"root and call it ``main``. Then add a Button and a Label as child nodes. "
"Place them somewhere nice on screen and give your button a name."
msgstr ""

#: ../../docs/tutorials/plugins/gdnative/gdnative-c-example.rst:523
msgid "Select the control node and attach a script to it:"
msgstr ""

#: ../../docs/tutorials/plugins/gdnative/gdnative-c-example.rst:527
msgid "Next link up the ``pressed`` signal on the button to your script:"
msgstr ""

#: ../../docs/tutorials/plugins/gdnative/gdnative-c-example.rst:531
msgid "Don't forget to save your scene, call it ``main.tscn``."
msgstr ""

#: ../../docs/tutorials/plugins/gdnative/gdnative-c-example.rst:533
msgid "Now we can implement our ``main.gd`` code:"
msgstr ""

#: ../../docs/tutorials/plugins/gdnative/gdnative-c-example.rst:545
msgid ""
"After all that, our project should work. The first time you run it Godot "
"will ask you what your main scene is and you select your ``main.tscn`` file "
"and presto:"
msgstr ""

#: ../../docs/tutorials/plugins/gdnative/gdnative-cpp-example.rst:4
msgid "GDNative C++ example"
msgstr "GDNative  C++ 예제"

#: ../../docs/tutorials/plugins/gdnative/gdnative-cpp-example.rst:9
msgid ""
"This tutorial builds on top of the information given in the :ref:`GDNative C "
"example <doc_gdnative_c_example>`, so we highly recommend you read that "
"first."
msgstr ""

#: ../../docs/tutorials/plugins/gdnative/gdnative-cpp-example.rst:13
msgid ""
"The C++ bindings for GDNative are built on top of the NativeScript GDNative "
"API and provide a nicer way to \"extend\" nodes in Godot using C++. This is "
"equivalent to writing scripts in GDScript, but in C++ instead."
msgstr ""

#: ../../docs/tutorials/plugins/gdnative/gdnative-cpp-example.rst:17
msgid ""
"Godot 3.1 saw the introduction of the NativeScript 1.1 additions that "
"enabled the GDNative team to build a nicer C++ bindings library. These "
"changes have now been merged into the master branch and will be the way we "
"go forward. If you want to write a C++ GDNative plugin that also supports "
"Godot 3.0 you will need to use the 3.0 branch and the NativeScript 1.0 "
"syntax. We'll be showing them side by side in this writeup."
msgstr ""

#: ../../docs/tutorials/plugins/gdnative/gdnative-cpp-example.rst:24
msgid ""
"You can download the full example we'll be creating in this tutorial `on "
"GitHub <https://github.com/BastiaanOlij/gdnative_cpp_example>`__."
msgstr ""

#: ../../docs/tutorials/plugins/gdnative/gdnative-cpp-example.rst:28
msgid "Setting up the project"
msgstr "프로젝트 설정하기"

#: ../../docs/tutorials/plugins/gdnative/gdnative-cpp-example.rst:30
msgid "There are a few prerequisites you'll need:"
msgstr ""

#: ../../docs/tutorials/plugins/gdnative/gdnative-cpp-example.rst:32
msgid "a Godot 3.x executable,"
msgstr ""

#: ../../docs/tutorials/plugins/gdnative/gdnative-cpp-example.rst:33
msgid "a C++ compiler,"
msgstr ""

#: ../../docs/tutorials/plugins/gdnative/gdnative-cpp-example.rst:34
msgid "SCons as a build tool,"
msgstr ""

#: ../../docs/tutorials/plugins/gdnative/gdnative-cpp-example.rst:35
#, fuzzy
msgid ""
"a copy of the `godot-cpp repository <https://github.com/GodotNativeTools/"
"godot-cpp>`__."
msgstr ""
"`godot-cpp 저장소 <https://github.com/GodotNativeTools/godot-cpp>`_ 의 사본."

#: ../../docs/tutorials/plugins/gdnative/gdnative-cpp-example.rst:38
msgid ""
"See also :ref:`Compiling <toc-devel-compiling>` as the build tools are "
"identical to the ones you need to compile Godot from source."
msgstr ""

#: ../../docs/tutorials/plugins/gdnative/gdnative-cpp-example.rst:41
msgid ""
"You can download these repositories from GitHub or let Git do the work for "
"you. Note that these repositories now have different branches for different "
"versions of Godot. GDNative modules written for an earlier version of Godot "
"will work in newer versions (with the exception of one breaking change in "
"ARVR interfaces between 3.0 and 3.1) but not vice versa so make sure you "
"download the correct branch. Also note that the version of Godot you use to "
"generate the ``api.json`` with becomes your minimum version."
msgstr ""

#: ../../docs/tutorials/plugins/gdnative/gdnative-cpp-example.rst:49
msgid ""
"If you are versioning your project using Git, it is a good idea to add them "
"as Git submodules:"
msgstr ""

#: ../../docs/tutorials/plugins/gdnative/gdnative-cpp-example.rst:71
msgid ""
"If you decide to just download the repositories or clone them into your "
"project folder, make sure to keep the folder layout identical to the one "
"described here, as much of the code we'll be showcasing here assumes the "
"project follows this layout."
msgstr ""

#: ../../docs/tutorials/plugins/gdnative/gdnative-cpp-example.rst:76
msgid "Do make sure you clone recursive to pull in both repositories:"
msgstr ""

#: ../../docs/tutorials/plugins/gdnative/gdnative-cpp-example.rst:93
msgid ""
"``godot-cpp`` now includes ``godot_headers`` as a nested submodule, if "
"you've manually downloaded them please make sure to place ``godot_headers`` "
"inside of the ``godot-cpp`` folder."
msgstr ""

#: ../../docs/tutorials/plugins/gdnative/gdnative-cpp-example.rst:97
msgid ""
"You don't have to do it this way but we've found it easiest to manage. If "
"you decide to just download the repositories or just clone them into your "
"folder, make sure to keep the folder layout the same as we've setup here as "
"much of the code we'll be showcasing here assumes the project has this "
"layout."
msgstr ""

#: ../../docs/tutorials/plugins/gdnative/gdnative-cpp-example.rst:102
msgid ""
"If you cloned the example from the link specified in the introduction, the "
"submodules are not automatically initialized. You will need to execute the "
"following commands:"
msgstr ""

#: ../../docs/tutorials/plugins/gdnative/gdnative-cpp-example.rst:111
msgid "This will clone these two repositories into your project folder."
msgstr ""

#: ../../docs/tutorials/plugins/gdnative/gdnative-cpp-example.rst:114
msgid "Building the C++ bindings"
msgstr ""

#: ../../docs/tutorials/plugins/gdnative/gdnative-cpp-example.rst:116
msgid ""
"Now that we've downloaded our prerequisites, it is time to build the C++ "
"bindings."
msgstr ""

#: ../../docs/tutorials/plugins/gdnative/gdnative-cpp-example.rst:119
msgid ""
"The repository contains a copy of the metadata for the current Godot "
"release, but if you need to build these bindings for a newer version of "
"Godot, simply call the Godot executable:"
msgstr ""

#: ../../docs/tutorials/plugins/gdnative/gdnative-cpp-example.rst:127
msgid ""
"Place the resulting ``api.json`` file in the project folder and add "
"``use_custom_api_file=yes custom_api_file=../api.json`` to the scons command "
"below."
msgstr ""

#: ../../docs/tutorials/plugins/gdnative/gdnative-cpp-example.rst:131
msgid ""
"To generate and compile the bindings, use this command (replacing "
"``<platform>`` with ``windows``, ``linux`` or ``osx`` depending on your OS):"
msgstr ""

#: ../../docs/tutorials/plugins/gdnative/gdnative-cpp-example.rst:134
msgid ""
"To speed up compilation, add `-jN` at the end of the SCons command line "
"where `N` is the number of CPU threads you have on your system. The example "
"below uses 4 threads."
msgstr ""

#: ../../docs/tutorials/plugins/gdnative/gdnative-cpp-example.rst:142
msgid ""
"This step will take a while. When it is completed, you should have static "
"libraries that can be compiled into your project stored in ``godot-cpp/bin/"
"``."
msgstr ""

#: ../../docs/tutorials/plugins/gdnative/gdnative-cpp-example.rst:145
msgid ""
"At some point in the future, compiled binaries will be available, making "
"this step optional."
msgstr ""

#: ../../docs/tutorials/plugins/gdnative/gdnative-cpp-example.rst:150
msgid ""
"You may need to add ``bits=64`` to the command on Windows or Linux. We're "
"still working on better auto detection."
msgstr ""

#: ../../docs/tutorials/plugins/gdnative/gdnative-cpp-example.rst:154
msgid "Creating a simple plugin"
msgstr "간단한 플러그인 만들기"

#: ../../docs/tutorials/plugins/gdnative/gdnative-cpp-example.rst:156
msgid ""
"Now it's time to build an actual plugin. We'll start by creating an empty "
"Godot project in which we'll place a few files."
msgstr ""

#: ../../docs/tutorials/plugins/gdnative/gdnative-cpp-example.rst:159
msgid ""
"Open Godot and create a new project. For this example, we will place it in a "
"folder called ``demo`` inside our GDNative module's folder structure."
msgstr ""

#: ../../docs/tutorials/plugins/gdnative/gdnative-cpp-example.rst:162
msgid ""
"In our demo project, we'll create a scene containing a Node called \"Main\" "
"and we'll save it as ``main.tscn``. We'll come back to that later."
msgstr ""

#: ../../docs/tutorials/plugins/gdnative/gdnative-cpp-example.rst:165
msgid ""
"Back in the top-level GDNative module folder, we're also going to create a "
"subfolder called ``src`` in which we'll place our source files."
msgstr ""

#: ../../docs/tutorials/plugins/gdnative/gdnative-cpp-example.rst:168
msgid ""
"You should now have ``demo``, ``godot-cpp``, ``godot_headers``, and ``src`` "
"directories in your GDNative module."
msgstr ""

#: ../../docs/tutorials/plugins/gdnative/gdnative-cpp-example.rst:171
msgid ""
"In the ``src`` folder, we'll start with creating our header file for the "
"GDNative node we'll be creating. We will name it ``gdexample.h``:"
msgstr ""

#: ../../docs/tutorials/plugins/gdnative/gdnative-cpp-example.rst:235
msgid ""
"There are a few things of note to the above. We're including ``Godot.hpp`` "
"which contains all our basic definitions. After that, we include ``Sprite."
"hpp`` which contains bindings to the Sprite class. We'll be extending this "
"class in our module."
msgstr ""

#: ../../docs/tutorials/plugins/gdnative/gdnative-cpp-example.rst:240
msgid ""
"We're using the namespace ``godot``, since everything in GDNative is defined "
"within this namespace."
msgstr ""

#: ../../docs/tutorials/plugins/gdnative/gdnative-cpp-example.rst:243
msgid ""
"Then we have our class definition, which inherits from our Sprite through a "
"container class. We'll see a few side effects of this later on. The "
"``GODOT_CLASS`` macro sets up a few internal things for us."
msgstr ""

#: ../../docs/tutorials/plugins/gdnative/gdnative-cpp-example.rst:247
msgid "After that, we declare a single member variable called ``time_passed``."
msgstr ""

#: ../../docs/tutorials/plugins/gdnative/gdnative-cpp-example.rst:249
msgid ""
"In the next block we're defining our methods, we obviously have our "
"constructor and destructor defined, but there are two other functions that "
"will likely look familiar to some, and one new method."
msgstr ""

#: ../../docs/tutorials/plugins/gdnative/gdnative-cpp-example.rst:253
msgid ""
"The first is ``_register_methods``, which is a static function that Godot "
"will call to find out which methods can be called on our NativeScript and "
"which properties it exposes. The second is our ``_process`` function, which "
"will work exactly the same as the ``_process`` function you're used to in "
"GDScript. The third is our ``_init`` function which is called after Godot "
"has properly set up our object. It has to exist even if you don't place any "
"code in it."
msgstr ""

#: ../../docs/tutorials/plugins/gdnative/gdnative-cpp-example.rst:260
msgid "Let's implement our functions by creating our ``gdexample.cpp`` file:"
msgstr ""

#: ../../docs/tutorials/plugins/gdnative/gdnative-cpp-example.rst:320
msgid ""
"This one should be straightforward. We're implementing each method of our "
"class that we defined in our header file. Note that the ``register_method`` "
"call **must** expose the ``_process`` method, otherwise Godot will not be "
"able to use it. However, we do not have to tell Godot about our constructor, "
"destructor and ``_init`` functions."
msgstr ""

#: ../../docs/tutorials/plugins/gdnative/gdnative-cpp-example.rst:326
msgid ""
"The other method of note is our ``_process`` function, which simply keeps "
"track of how much time has passed and calculates a new position for our "
"sprite using a simple sine and cosine function. What stands out is calling "
"``owner->set_position`` to call one of the build in methods of our Sprite. "
"This is because our class is a container class; ``owner`` points to the "
"actual Sprite node our script relates to. In the upcoming NativeScript 1.1, "
"``set_position`` can be called directly on our class."
msgstr ""

#: ../../docs/tutorials/plugins/gdnative/gdnative-cpp-example.rst:334
msgid ""
"There is one more C++ file we need; we'll name it ``gdlibrary.cpp``. Our "
"GDNative plugin can contain multiple NativeScripts, each with their own "
"header and source file like we've implemented ``GDExample`` up above. What "
"we need now is a small bit of code that tells Godot about all the "
"NativeScripts in our GDNative plugin."
msgstr ""

#: ../../docs/tutorials/plugins/gdnative/gdnative-cpp-example.rst:358
msgid ""
"Note that we are not using the ``godot`` namespace here, since the three "
"functions implemented here need to be defined without a namespace."
msgstr ""

#: ../../docs/tutorials/plugins/gdnative/gdnative-cpp-example.rst:361
msgid ""
"The ``godot_gdnative_init`` and ``godot_gdnative_terminate`` functions get "
"called respectively when Godot loads our plugin and when it unloads it. All "
"we're doing here is parse through the functions in our bindings module to "
"initialize them, but you might have to set up more things depending on your "
"needs."
msgstr ""

#: ../../docs/tutorials/plugins/gdnative/gdnative-cpp-example.rst:367
msgid ""
"The important function is the third function called "
"``godot_nativescript_init``. We first call a function in our bindings "
"library that does its usual stuff. After that, we call the function "
"``register_class`` for each of our classes in our library."
msgstr ""

#: ../../docs/tutorials/plugins/gdnative/gdnative-cpp-example.rst:373
msgid "Compiling the plugin"
msgstr ""

#: ../../docs/tutorials/plugins/gdnative/gdnative-cpp-example.rst:375
msgid ""
"We cannot easily write by hand a ``SConstruct`` file that SCons would use "
"for building. For the purpose of this example, just use :download:`this "
"hardcoded SConstruct file <files/cpp_example/SConstruct>` we've prepared. "
"We'll cover a more customizable, detailed example on how to use these build "
"files in a subsequent tutorial."
msgstr ""

#: ../../docs/tutorials/plugins/gdnative/gdnative-cpp-example.rst:383
msgid ""
"This ``SConstruct`` file was written to be used with the latest ``godot-"
"cpp`` master, you may need to make small changes using it with older "
"versions or refer to the ``SConstruct`` file in the Godot 3.0 documentation."
msgstr ""

#: ../../docs/tutorials/plugins/gdnative/gdnative-cpp-example.rst:387
msgid ""
"Once you've downloaded the ``SConstruct`` file, place it in your GDNative "
"module folder besides ``godot-cpp``, ``godot_headers`` and ``demo``, then "
"run:"
msgstr ""

#: ../../docs/tutorials/plugins/gdnative/gdnative-cpp-example.rst:394
msgid "You should now be able to find the module in ``demo/bin/<platform>``."
msgstr ""

#: ../../docs/tutorials/plugins/gdnative/gdnative-cpp-example.rst:398
msgid ""
"Here, we've compiled both godot-cpp and our gdexample library as debug "
"builds. For optimized builds, you should compile them using the "
"``target=release`` switch."
msgstr ""

#: ../../docs/tutorials/plugins/gdnative/gdnative-cpp-example.rst:403
msgid "Using the GDNative module"
msgstr ""

#: ../../docs/tutorials/plugins/gdnative/gdnative-cpp-example.rst:405
msgid ""
"Before we jump back into Godot, we need to create two more files in ``demo/"
"bin/``. Both can be created using the Godot editor, but it may be faster to "
"create them directly."
msgstr ""

#: ../../docs/tutorials/plugins/gdnative/gdnative-cpp-example.rst:409
msgid ""
"The first one is a file that lets Godot know what dynamic libraries should "
"be loaded for each platform and is called ``gdexample.gdnlib``."
msgstr ""

#: ../../docs/tutorials/plugins/gdnative/gdnative-cpp-example.rst:433
msgid ""
"This file contains a ``general`` section that controls how the module is "
"loaded. It also contains a prefix section which should be left on ``godot_`` "
"for now. If you change this, you'll need to rename various functions that "
"are used as entry points. This was added for the iPhone platform because it "
"doesn't allow dynamic libraries to be deployed, yet GDNative modules are "
"linked statically."
msgstr ""

#: ../../docs/tutorials/plugins/gdnative/gdnative-cpp-example.rst:439
msgid ""
"The ``entry`` section is the important bit: it tells Godot the location of "
"the dynamic library in the project's filesystem for each supported platform. "
"It will also result in *just* that file being exported when you export the "
"project, which means the data pack won't contain libraries that are "
"incompatible with the target platform."
msgstr ""

#: ../../docs/tutorials/plugins/gdnative/gdnative-cpp-example.rst:445
msgid ""
"Finally, the ``dependencies`` section allows you to name additional dynamic "
"libraries that should be included as well. This is important when your "
"GDNative plugin implements someone else's library and requires you to supply "
"a third-party dynamic library with your project."
msgstr ""

#: ../../docs/tutorials/plugins/gdnative/gdnative-cpp-example.rst:450
msgid ""
"If you double click on the ``gdexample.gdnlib`` file within Godot, you'll "
"see there are far more options to set:"
msgstr ""

#: ../../docs/tutorials/plugins/gdnative/gdnative-cpp-example.rst:455
msgid ""
"The second file we need to create is a file used by each NativeScript we've "
"added to our plugin. We'll name it ``gdexample.gdns`` for our gdexample "
"NativeScript."
msgstr ""

#: ../../docs/tutorials/plugins/gdnative/gdnative-cpp-example.rst:471
msgid ""
"This is a standard Godot resource; you could just create it directly in your "
"scene, but saving it to a file makes it much easier to reuse it in other "
"places. This resource points to our gdnlib file, so that Godot can know "
"which dynamic library contains our NativeScript. It also defines the "
"``class_name`` which identifies the NativeScript in our plugin we want to "
"use."
msgstr ""

#: ../../docs/tutorials/plugins/gdnative/gdnative-cpp-example.rst:477
msgid ""
"Time to jump back into Godot. We load up the main scene we created way back "
"in the beginning and now add a Sprite to our scene:"
msgstr ""

#: ../../docs/tutorials/plugins/gdnative/gdnative-cpp-example.rst:482
msgid ""
"We're going to assign the Godot logo to this sprite as our texture, disable "
"the ``centered`` property and drag our ``gdexample.gdns`` file onto the "
"``script`` property of the sprite:"
msgstr ""

#: ../../docs/tutorials/plugins/gdnative/gdnative-cpp-example.rst:488
msgid "We're finally ready to run the project:"
msgstr ""

#: ../../docs/tutorials/plugins/gdnative/gdnative-cpp-example.rst:493
#, fuzzy
msgid "Adding properties"
msgstr "노드 속성"

#: ../../docs/tutorials/plugins/gdnative/gdnative-cpp-example.rst:495
msgid ""
"GDScript allows you to add properties to your script using the ``export`` "
"keyword. In GDNative you have to register the properties and there are two "
"ways of doing this. You can either bind directly to a member or use a setter "
"and getter function."
msgstr ""

#: ../../docs/tutorials/plugins/gdnative/gdnative-cpp-example.rst:502
msgid ""
"There is a third option, just like in GDScript you can directly implement "
"the ``_get_property_list``, ``_get`` and ``_set`` methods of an object but "
"that goes far beyond the scope of this tutorial."
msgstr ""

#: ../../docs/tutorials/plugins/gdnative/gdnative-cpp-example.rst:506
msgid ""
"We'll examine both starting with the direct bind. Lets add a property that "
"allows us to control the amplitude of our wave."
msgstr ""

#: ../../docs/tutorials/plugins/gdnative/gdnative-cpp-example.rst:509
msgid ""
"In our ``gdexample.h`` file we simply need to add a member variable like so:"
msgstr ""

#: ../../docs/tutorials/plugins/gdnative/gdnative-cpp-example.rst:519
msgid ""
"In our ``gdexample.cpp`` file we need to make a number of changes, we will "
"only show the methods we end up changing, don't remove the lines we're "
"omitting:"
msgstr ""

#: ../../docs/tutorials/plugins/gdnative/gdnative-cpp-example.rst:571
msgid ""
"Once you compile the module with these changes in place you will see that a "
"property has been added to our interface. You can now change this property "
"and when you run your project, you will see that our Godot icon travels "
"along a larger figure."
msgstr ""

#: ../../docs/tutorials/plugins/gdnative/gdnative-cpp-example.rst:578
msgid ""
"The ``reloadable`` property in the ``gdexample.gdnlib`` file must be set to "
"``true`` for the Godot editor to automatically pick up the newly added "
"property."
msgstr ""

#: ../../docs/tutorials/plugins/gdnative/gdnative-cpp-example.rst:582
msgid ""
"However, this setting should be used with care especially when tool classes "
"are used, as the editor might hold objects then that have script instances "
"attached to them that are managed by a GDNative library."
msgstr ""

#: ../../docs/tutorials/plugins/gdnative/gdnative-cpp-example.rst:586
msgid ""
"Lets do the same but for the speed of our animation and use a setter and "
"getter function. Our ``gdexample.h`` header file again only needs a few more "
"lines of code:"
msgstr ""

#: ../../docs/tutorials/plugins/gdnative/gdnative-cpp-example.rst:601
msgid ""
"This requires a few more changes to our ``gdexample.cpp`` file, again we're "
"only showing the methods that have changed so don't remove anything we're "
"omitting:"
msgstr ""

#: ../../docs/tutorials/plugins/gdnative/gdnative-cpp-example.rst:673
msgid ""
"Now when the project is compiled we'll see another property called speed. "
"Changing its value will make the animation go faster or slower."
msgstr ""

#: ../../docs/tutorials/plugins/gdnative/gdnative-cpp-example.rst:676
msgid ""
"For this example there is no obvious advantage of using a setter and getter. "
"It is just more code to write. For a simple example as this there may be a "
"good reason for a setter if you want to react on the variable being changed "
"but in many cases just binding the variable will be enough."
msgstr ""

#: ../../docs/tutorials/plugins/gdnative/gdnative-cpp-example.rst:681
msgid ""
"Getters and setters become far more useful in more complex scenarios where "
"you need to make additional choices based on the state of your object."
msgstr ""

#: ../../docs/tutorials/plugins/gdnative/gdnative-cpp-example.rst:686
msgid ""
"For simplicity we've left out the optional parameters in the "
"register_property<class, type> method call. These parameters are "
"``rpc_mode``, ``usage``, ``hint`` and ``hint_string``. These can be used to "
"further configure how properties are displayed and set on the Godot side."
msgstr ""

#: ../../docs/tutorials/plugins/gdnative/gdnative-cpp-example.rst:691
msgid ""
"Modern C++ compilers are able to infer the class and variable type and allow "
"you to omit the ``<GDExample, float>`` part of our ``register_property`` "
"method. We've had mixed experiences with this however."
msgstr ""

#: ../../docs/tutorials/plugins/gdnative/gdnative-cpp-example.rst:698
msgid ""
"Last but not least, signals fully work in GDNative as well. Having your "
"module react to a signal given out by another object requires you to call "
"``connect`` on that object. We can't think of a good example for our "
"wobbling Godot icon, we would need to showcase a far more complete example."
msgstr ""

#: ../../docs/tutorials/plugins/gdnative/gdnative-cpp-example.rst:703
msgid "This however is the required syntax:"
msgstr ""

#: ../../docs/tutorials/plugins/gdnative/gdnative-cpp-example.rst:714
msgid ""
"Note that you can only call ``my_method`` if you've previously registered it "
"in your ``_register_methods`` method."
msgstr ""

#: ../../docs/tutorials/plugins/gdnative/gdnative-cpp-example.rst:717
msgid ""
"Having your object sending out signals is far more common. For our wobbling "
"Godot icon we'll do something silly just to show how it works. We're going "
"to emit a signal every time a second has passed and pass the new location "
"along."
msgstr ""

#: ../../docs/tutorials/plugins/gdnative/gdnative-cpp-example.rst:721
msgid ""
"In our ``gdexample.h`` header file we just need to define a new member "
"``time_emit``:"
msgstr ""

#: ../../docs/tutorials/plugins/gdnative/gdnative-cpp-example.rst:732
msgid ""
"The changes in ``gdexample.cpp`` are a bit more elaborate this time. First "
"you'll need to set ``time_emit = 0.0;`` in either our ``_init`` method or in "
"our constructor. But the other two needed changes we'll look at one by one."
msgstr ""

#: ../../docs/tutorials/plugins/gdnative/gdnative-cpp-example.rst:736
msgid ""
"In our ``_register_methods`` method we need to declare our signal and we do "
"this as follows:"
msgstr ""

#: ../../docs/tutorials/plugins/gdnative/gdnative-cpp-example.rst:763
msgid ""
"Here we see a nice improvement in the latest version of godot-cpp where our "
"``register_signal`` method can be a single call first taking the signals "
"name, then having pairs of values specifying the parameter name and type of "
"each parameter we'll send along with this signal."
msgstr ""

#: ../../docs/tutorials/plugins/gdnative/gdnative-cpp-example.rst:768
msgid ""
"For NativeScript 1.0 we first build a dictionary in which we tell Godot "
"about the types of arguments we will pass to our signal, and then register "
"it."
msgstr ""

#: ../../docs/tutorials/plugins/gdnative/gdnative-cpp-example.rst:771
msgid "Next we'll need to change our ``_process`` method:"
msgstr ""

#: ../../docs/tutorials/plugins/gdnative/gdnative-cpp-example.rst:817
msgid ""
"After a second has passed we emit our signal and reset our counter. Again in "
"the new version of godot-cpp we can add our parameter values directly to "
"``emit_signal``. In NativeScript 1.0 We first build an array of values and "
"then call ``emit_signal``."
msgstr ""

#: ../../docs/tutorials/plugins/gdnative/gdnative-cpp-example.rst:822
msgid ""
"Once compiled we can go into Godot and select our sprite node. On our "
"``Node`` tab we find our new signal and link it up by pressing connect. "
"We've added a script on our main node and implemented our signal like this:"
msgstr ""

#: ../../docs/tutorials/plugins/gdnative/gdnative-cpp-example.rst:833
msgid "Every second we simply output our position to the console."
msgstr ""

#: ../../docs/tutorials/plugins/gdnative/gdnative-cpp-example.rst:836
msgid "NativeScript 1.1 vs NativeScript 1.0"
msgstr ""

#: ../../docs/tutorials/plugins/gdnative/gdnative-cpp-example.rst:838
msgid ""
"So far in our example above there doesn't seem to be a lot of difference "
"between the old and new syntax. The class is defined slightly differently "
"and we no longer use the ``owner`` member to call methods on the Godot side "
"of our object. A lot of the improvements are hidden under the hood."
msgstr ""

#: ../../docs/tutorials/plugins/gdnative/gdnative-cpp-example.rst:843
msgid ""
"This example only deals with simple variables and simple methods. Especially "
"once you start passing references to other objects or when you start calling "
"methods that require more complex parameters, NativeScript 1.1 does start to "
"show its benefits."
msgstr ""

#: ../../docs/tutorials/plugins/gdnative/gdnative-cpp-example.rst:849
msgid "Next steps"
msgstr ""

#: ../../docs/tutorials/plugins/gdnative/gdnative-cpp-example.rst:851
msgid ""
"The above is only a simple example, but we hope it shows you the basics. You "
"can build upon this example to create full-fledged scripts to control nodes "
"in Godot using C++."
msgstr ""

#: ../../docs/tutorials/plugins/gdnative/gdnative-cpp-example.rst:855
msgid ""
"You should be able to edit and recompile the plugin while the Godot editor "
"remains open; just rerun the project after the library has finished building."
msgstr ""

#: ../../docs/tutorials/plugins/android/index.rst:2
#, fuzzy
msgid "Android plugins"
msgstr "플러그인에 대해서"

#: ../../docs/tutorials/plugins/android/android_plugin.rst:4
#, fuzzy
msgid "Creating Android plugins (Godot 4.0+)"
msgstr "간단한 플러그인 만들기"

#: ../../docs/tutorials/plugins/android/android_plugin.rst:9
msgid ""
"Android plugins are powerful tools to extend the capabilities of the Godot "
"engine by tapping into the functionality provided by the Android platform "
"and ecosystem."
msgstr ""

#: ../../docs/tutorials/plugins/android/android_plugin.rst:12
msgid ""
"Mobile gaming monetization is one such example since it requires features "
"and capabilities that don't belong to the core feature set of a game engine:"
msgstr ""

#: ../../docs/tutorials/plugins/android/android_plugin.rst:15
msgid "Analytics"
msgstr ""

#: ../../docs/tutorials/plugins/android/android_plugin.rst:16
msgid "In-app purchases"
msgstr ""

#: ../../docs/tutorials/plugins/android/android_plugin.rst:17
msgid "Receipt validation"
msgstr ""

#: ../../docs/tutorials/plugins/android/android_plugin.rst:18
msgid "Install tracking"
msgstr ""

#: ../../docs/tutorials/plugins/android/android_plugin.rst:19
msgid "Ads"
msgstr ""

#: ../../docs/tutorials/plugins/android/android_plugin.rst:20
msgid "Video ads"
msgstr ""

#: ../../docs/tutorials/plugins/android/android_plugin.rst:21
msgid "Cross-promotion"
msgstr ""

#: ../../docs/tutorials/plugins/android/android_plugin.rst:22
msgid "In-game soft & hard currencies"
msgstr ""

#: ../../docs/tutorials/plugins/android/android_plugin.rst:23
msgid "Promo codes"
msgstr ""

#: ../../docs/tutorials/plugins/android/android_plugin.rst:24
msgid "A/B testing"
msgstr ""

#: ../../docs/tutorials/plugins/android/android_plugin.rst:25
msgid "Login"
msgstr ""

#: ../../docs/tutorials/plugins/android/android_plugin.rst:26
msgid "Cloud saves"
msgstr ""

#: ../../docs/tutorials/plugins/android/android_plugin.rst:27
msgid "Leaderboards and scores"
msgstr ""

#: ../../docs/tutorials/plugins/android/android_plugin.rst:28
msgid "User support & feedback"
msgstr ""

#: ../../docs/tutorials/plugins/android/android_plugin.rst:29
msgid "Posting to Facebook, Twitter, etc."
msgstr ""

#: ../../docs/tutorials/plugins/android/android_plugin.rst:30
msgid "Push notifications"
msgstr ""

#: ../../docs/tutorials/plugins/android/android_plugin.rst:32
msgid ""
"Making modifications to the Android export template is another use-case "
"since using a plugin for that task allows the project to remain compatible "
"with newer Godot versions."
msgstr ""

#: ../../docs/tutorials/plugins/android/android_plugin.rst:36
#, fuzzy
msgid "Android plugin"
msgstr "Android"

#: ../../docs/tutorials/plugins/android/android_plugin.rst:38
msgid ""
"While introduced in Godot 3.2.0, the Android plugin system got a significant "
"architecture update starting with Godot 3.2.2. In Godot 4.0, the new "
"architecture became the default, rendering plugins for Godot 3.2.0 "
"incompatible with Godot 4.0."
msgstr ""

#: ../../docs/tutorials/plugins/android/android_plugin.rst:41
msgid ""
"As a prerequisite, make sure you understand how to set up a :ref:`custom "
"build environment<doc_android_custom_build>` for Android."
msgstr ""

#: ../../docs/tutorials/plugins/android/android_plugin.rst:43
msgid ""
"At its core, a Godot Android plugin is a `Android archive library <https://"
"developer.android.com/studio/projects/android-library#aar-contents>`_ (*aar* "
"archive file) with the following caveats:"
msgstr ""

#: ../../docs/tutorials/plugins/android/android_plugin.rst:46
msgid ""
"The library must have a dependency on the Godot engine library (``godot-lib."
"x.y.aar``). A stable version is made available for each Godot release."
msgstr ""

#: ../../docs/tutorials/plugins/android/android_plugin.rst:48
msgid ""
"The library must include a specifically configured ``<meta-data>`` tag in "
"its manifest file."
msgstr ""

#: ../../docs/tutorials/plugins/android/android_plugin.rst:51
#, fuzzy
msgid "Building a Android plugin"
msgstr "간단한 플러그인 만들기"

#: ../../docs/tutorials/plugins/android/android_plugin.rst:53
msgid ""
"**Prerequisite:** `Android Studio <https://developer.android.com/studio>`_ "
"is strongly recommended as the IDE to use to create Android plugins. The "
"instructions below assumes that you're using Android Studio."
msgstr ""

#: ../../docs/tutorials/plugins/android/android_plugin.rst:56
msgid ""
"Follow `these instructions <https://developer.android.com/studio/projects/"
"android-library>`__ to create an Android library module for your plugin."
msgstr ""

#: ../../docs/tutorials/plugins/android/android_plugin.rst:58
msgid "Add the Godot engine library as a dependency to your plugin module:"
msgstr ""

#: ../../docs/tutorials/plugins/android/android_plugin.rst:60
msgid "Download the Godot engine library (godot-lib.x.y.aar)"
msgstr ""

#: ../../docs/tutorials/plugins/android/android_plugin.rst:62
msgid ""
"Follow `these instructions <https://developer.android.com/studio/projects/"
"android-library#AddDependency>`__ to add the Godot engine library as a "
"dependency for your plugin."
msgstr ""

#: ../../docs/tutorials/plugins/android/android_plugin.rst:65
msgid ""
"In the plugin module's ``build.gradle`` file, replace ``implementation`` "
"with ``compileOnly`` for the dependency line for the Godot engine library."
msgstr ""

#: ../../docs/tutorials/plugins/android/android_plugin.rst:67
msgid ""
"Create a new class in the plugin module and make sure it extends ``org."
"godotengine.godot.plugin.GodotPlugin``. At runtime, it will be used to "
"instantiate a singleton object that will be used by the Godot engine to "
"load, initialize and run the plugin."
msgstr ""

#: ../../docs/tutorials/plugins/android/android_plugin.rst:70
msgid "Update the plugin ``AndroidManifest.xml`` file:"
msgstr ""

#: ../../docs/tutorials/plugins/android/android_plugin.rst:72
msgid "Open the plugin ``AndroidManifest.xml`` file."
msgstr ""

#: ../../docs/tutorials/plugins/android/android_plugin.rst:74
msgid "Add the ``<application></application>`` tag if it's missing."
msgstr ""

#: ../../docs/tutorials/plugins/android/android_plugin.rst:76
msgid ""
"In the ``<application>`` tag, add a ``<meta-data>`` tag setup as follow::"
msgstr ""

#: ../../docs/tutorials/plugins/android/android_plugin.rst:82
msgid ""
"Where ``PluginName`` is the name of the plugin, and ``plugin.init."
"ClassFullName`` is the full name (package + class name) of the plugin "
"loading class."
msgstr ""

#: ../../docs/tutorials/plugins/android/android_plugin.rst:84
msgid ""
"Add the remaining logic for your plugin and run the ``gradlew build`` "
"command to generate the plugin's ``aar`` file. The build will likely "
"generate both a ``debug`` and ``release`` ``aar`` files. Depending on your "
"need, pick only one version (usually the ``release`` one) which to provide "
"your users with."
msgstr ""

#: ../../docs/tutorials/plugins/android/android_plugin.rst:87
msgid ""
"**Note:** The plugin's ``aar`` filename must match the following pattern: "
"``[PluginName]*.aar`` where ``PluginName`` is the name of the plugin in "
"camel case (e.g: ``GodotPayment.release.aar``)."
msgstr ""

#: ../../docs/tutorials/plugins/android/android_plugin.rst:91
#, fuzzy
msgid "Loading and using a Android plugin"
msgstr "간단한 플러그인 만들기"

#: ../../docs/tutorials/plugins/android/android_plugin.rst:93
msgid ""
"Once you have access to the plugin ``aar`` file, move it to the Godot "
"project ``res://android/plugins`` directory."
msgstr ""

#: ../../docs/tutorials/plugins/android/android_plugin.rst:95
#, fuzzy
msgid "From your script::"
msgstr "스크립트의 역할"

#: ../../docs/tutorials/plugins/android/android_plugin.rst:101
msgid ""
"**When exporting the project**, you need to add the plugin's name to the "
"``Custom Template`` -> ``Plugins`` section. If trying to add multiple "
"plugins, separate their names by a comma (``,``)."
msgstr ""

#: ../../docs/tutorials/plugins/android/android_plugin.rst:105
#, fuzzy
msgid "Bundling GDNative resources"
msgstr "리소스 해제(Free)하기"

#: ../../docs/tutorials/plugins/android/android_plugin.rst:106
msgid ""
"A Android plugin can define and provide C/C++ GDNative resources, either to "
"provide and/or access functionality from the game logic. The GDNative "
"resources can be bundled within the plugin ``aar`` file which simplifies the "
"distribution and deployment process:"
msgstr ""

#: ../../docs/tutorials/plugins/android/android_plugin.rst:109
msgid ""
"The shared libraries (``.so``) for the defined GDNative libraries will be "
"automatically bundled by the ``aar`` build system."
msgstr ""

#: ../../docs/tutorials/plugins/android/android_plugin.rst:111
msgid ""
"Godot ``*.gdnlib`` and ``*.gdns`` resource files must be manually defined in "
"the plugin ``assets`` directory. The recommended path for these resources "
"relative to the ``assets`` directory should be: ``godot/plugin/v1/"
"[PluginName]/``."
msgstr ""

#: ../../docs/tutorials/plugins/android/android_plugin.rst:114
msgid ""
"For GDNative libraries, the plugin singleton object must override the ``org."
"godotengine.godot.plugin.GodotPlugin::getPluginGDNativeLibrariesPaths()`` "
"method, and return the paths to the bundled GDNative libraries config files "
"(``*.gdnlib``). The paths must be relative to the ``assets`` directory. At "
"runtime, the plugin will provide these paths to Godot core which will use "
"them to load and initialize the bundled GDNative libraries."
msgstr ""

#: ../../docs/tutorials/plugins/android/android_plugin.rst:119
#, fuzzy
msgid "Reference implementations"
msgstr "구현"

#: ../../docs/tutorials/plugins/android/android_plugin.rst:120
msgid ""
"`Godot Oculus Mobile plugin <https://github.com/m4gr3d/godot_oculus_mobile/"
"tree/2.0>`_"
msgstr ""

#: ../../docs/tutorials/plugins/android/android_plugin.rst:122
msgid ""
"`Bundled gdnative resources <https://github.com/m4gr3d/godot_oculus_mobile/"
"tree/2.0/plugin/src/main/assets/addons/godot_ovrmobile>`_"
msgstr ""

#: ../../docs/tutorials/plugins/android/android_plugin.rst:124
msgid ""
"`Godot Payment plugin <https://github.com/m4gr3d/godot/tree/"
"rearch_godot_android_plugin/platform/android/java/plugins/godotpayment>`_"
msgstr ""

#: ../../docs/tutorials/plugins/android/android_plugin.rst:128
#: ../../docs/development/compiling/compiling_for_windows.rst:212
#: ../../docs/development/compiling/compiling_for_android.rst:195
#: ../../docs/development/editor/creating_icons.rst:86
msgid "Troubleshooting"
msgstr ""

#: ../../docs/tutorials/plugins/android/android_plugin.rst:131
msgid "Godot crashes upon load"
msgstr ""

#: ../../docs/tutorials/plugins/android/android_plugin.rst:133
msgid "Check ``adb logcat`` for possible problems, then:"
msgstr ""

#: ../../docs/tutorials/plugins/android/android_plugin.rst:135
msgid ""
"Check that the methods used in the Java singleton only use simple Java "
"datatypes. More complex datatypes are not supported."
msgstr ""

#: ../../docs/tutorials/platform/android_in_app_purchases.rst:4
msgid "Android in-app purchases"
msgstr ""

#: ../../docs/tutorials/platform/android_in_app_purchases.rst:8
msgid ""
"Godot engine has integrated GooglePaymentsV3 module with which we can "
"implement in-app purchases in our game."
msgstr ""

#: ../../docs/tutorials/platform/android_in_app_purchases.rst:10
msgid ""
"The Godot engine demo project repository has an android-iap example project. "
"It includes a gdscript interface for android IAP."
msgstr ""

#: ../../docs/tutorials/platform/android_in_app_purchases.rst:12
msgid ""
"Check the repository here https://github.com/godotengine/godot-demo-projects"
msgstr ""

#: ../../docs/tutorials/platform/android_in_app_purchases.rst:14
msgid "Find the iap.gd script in"
msgstr ""

#: ../../docs/tutorials/platform/android_in_app_purchases.rst:21
msgid ""
"Add it to the Autoload list and name it as IAP so that we can reference it "
"anywhere in the game."
msgstr ""

#: ../../docs/tutorials/platform/android_in_app_purchases.rst:24
msgid "Getting the product details"
msgstr ""

#: ../../docs/tutorials/platform/android_in_app_purchases.rst:26
msgid ""
"When starting our game, we will need to get the item details from Google "
"such as the product price, description and localized price string etc."
msgstr ""

#: ../../docs/tutorials/platform/android_in_app_purchases.rst:42
msgid ""
"We can use the IAP details to display the title, price and/or description on "
"our shop scene."
msgstr ""

#: ../../docs/tutorials/platform/android_in_app_purchases.rst:45
msgid "Check if user purchased an item"
msgstr ""

#: ../../docs/tutorials/platform/android_in_app_purchases.rst:47
msgid ""
"When starting our game, we can check if the user has purchased any product. "
"YOU SHOULD DO THIS ONLY AFTER 2/3 SECONDS AFTER YOUR GAME IS LOADED. If we "
"do this as the first thing when the game is launched, IAP might not be "
"initialized and our game will crash on start."
msgstr ""

#: ../../docs/tutorials/platform/android_in_app_purchases.rst:60
msgid ""
"Google IAP policy says the game should restore the user's purchases if the "
"user replaces their phone or reinstalls the same app. We can use the above "
"code to check what products the user has purchased and we can make our game "
"respond accordingly."
msgstr ""

#: ../../docs/tutorials/platform/android_in_app_purchases.rst:63
msgid "Simple Purchase"
msgstr ""

#: ../../docs/tutorials/platform/android_in_app_purchases.rst:65
msgid "We can put this purchase logic on a product's buy button."
msgstr ""

#: ../../docs/tutorials/platform/android_in_app_purchases.rst:80
msgid ""
"We can also implement other signals for the purchase flow and improve the "
"user experience as you needed."
msgstr ""

#: ../../docs/tutorials/platform/android_in_app_purchases.rst:82
msgid "``purchase_fail`` - When the purchase is failed due to any reason"
msgstr ""

#: ../../docs/tutorials/platform/android_in_app_purchases.rst:84
msgid "``purchase_cancel`` - When the user cancels the purchase"
msgstr ""

#: ../../docs/tutorials/platform/android_in_app_purchases.rst:86
msgid "``purchase_owned`` - When the user already bought the product earlier"
msgstr ""

#: ../../docs/tutorials/platform/android_in_app_purchases.rst:90
msgid "Consumables and Non-Consumables"
msgstr ""

#: ../../docs/tutorials/platform/android_in_app_purchases.rst:92
msgid ""
"There are two types of products - consumables and non-consumables. "
"**Consumables** are purchased and used, for eg: healing potions which can be "
"purchased again and again. **Non-consumables** are one time purchases, for "
"eg: Level packs."
msgstr ""

#: ../../docs/tutorials/platform/android_in_app_purchases.rst:96
msgid ""
"Google doesn't have this separation in their dashboard. If our product is a "
"consumable, and if a user has purchased it, it will not be available for "
"purchase until it is consumed. So we should call the consume method for our "
"consumables and don't call consume for your non-consumables."
msgstr ""

#: ../../docs/tutorials/platform/android_in_app_purchases.rst:106
msgid ""
"If our game has only consumables, we don't have to do this. We can set it to "
"consume the item automatically after a purchase."
msgstr ""

#: ../../docs/tutorials/platform/android_in_app_purchases.rst:112
msgid "If our game has only non-consumables, we can"
msgstr ""

#: ../../docs/tutorials/platform/android_in_app_purchases.rst:118
msgid "We should set the auto consume value only once when the game starts."
msgstr ""

#: ../../docs/tutorials/platform/android_in_app_purchases.rst:121
msgid "Testing"
msgstr "시험"

#: ../../docs/tutorials/platform/android_in_app_purchases.rst:123
msgid ""
"If we add a gmail id as a tester in Google dashboard, that tester can "
"purchase items and they will not be charged. Another way to test IAP is "
"using redeem codes generated by us for our game because the purchase flow is "
"the same."
msgstr ""

#: ../../docs/tutorials/platform/android_in_app_purchases.rst:125
msgid ""
"Third way of testing is in development side. If we put the product ids as "
"shown below, we will get a static fixed response according to the product "
"id. This is a quick way of testing things before going to the dashboard."
msgstr ""

#: ../../docs/tutorials/platform/android_in_app_purchases.rst:127
msgid "android.test.purchased"
msgstr ""

#: ../../docs/tutorials/platform/android_in_app_purchases.rst:128
msgid "android.test.canceled"
msgstr ""

#: ../../docs/tutorials/platform/android_in_app_purchases.rst:129
msgid "android.test.refunded"
msgstr ""

#: ../../docs/tutorials/platform/android_in_app_purchases.rst:130
msgid "android.test.item_unavailable"
msgstr ""

#: ../../docs/tutorials/platform/services_for_ios.rst:6
msgid ""
"At the moment, there are two iOS APIs partially implemented, GameCenter and "
"Storekit. Both use the same model of asynchronous calls explained below."
msgstr ""

#: ../../docs/tutorials/platform/services_for_ios.rst:11
msgid "Asynchronous methods"
msgstr ""

#: ../../docs/tutorials/platform/services_for_ios.rst:13
msgid ""
"When requesting an asynchronous operation, the method will look like this:"
msgstr ""

#: ../../docs/tutorials/platform/services_for_ios.rst:20
msgid ""
"The parameter will usually be a Dictionary, with the information necessary "
"to make the request, and the call will have two phases. First, the method "
"will immediately return an Error value. If the Error is not 'OK', the call "
"operation is completed, with an error probably caused locally (no internet "
"connection, API incorrectly configured, etc). If the error value is 'OK', a "
"response event will be produced and added to the 'pending events' queue. "
"Example:"
msgstr ""

#: ../../docs/tutorials/platform/services_for_ios.rst:47
msgid ""
"Remember that when a call returns OK, the API will *always* produce an event "
"through the pending_event interface, even if it's an error, or a network "
"timeout, etc. You should be able to, for example, safely block the interface "
"waiting for a reply from the server. If any of the APIs don't behave this "
"way it should be treated as a bug."
msgstr ""

#: ../../docs/tutorials/platform/services_for_ios.rst:53
msgid "The pending event interface consists of two methods:"
msgstr ""

#: ../../docs/tutorials/platform/services_for_ios.rst:55
msgid ""
"``get_pending_event_count()`` Returns the number of pending events on the "
"queue."
msgstr ""

#: ../../docs/tutorials/platform/services_for_ios.rst:58
msgid ""
"``Variant pop_pending_event()`` Pops the first event from the queue and "
"returns it."
msgstr ""

#: ../../docs/tutorials/platform/services_for_ios.rst:62
msgid "Store Kit"
msgstr ""

#: ../../docs/tutorials/platform/services_for_ios.rst:64
msgid "Implemented in ``platform/iphone/in_app_store.mm``."
msgstr ""

#: ../../docs/tutorials/platform/services_for_ios.rst:66
msgid ""
"The Store Kit API is accessible through the \"InAppStore\" singleton (will "
"always be available from gdscript). It is initialized automatically. It has "
"three methods for purchasing:"
msgstr ""

#: ../../docs/tutorials/platform/services_for_ios.rst:70
msgid "``Error purchase(Variant p_params);``"
msgstr ""

#: ../../docs/tutorials/platform/services_for_ios.rst:71
msgid "``Error request_product_info(Variant p_params);``"
msgstr ""

#: ../../docs/tutorials/platform/services_for_ios.rst:72
msgid "``Error restore_purchases();``"
msgstr ""

#: ../../docs/tutorials/platform/services_for_ios.rst:74
msgid "and the pending_event interface"
msgstr ""

#: ../../docs/tutorials/platform/services_for_ios.rst:82
msgid "purchase"
msgstr ""

#: ../../docs/tutorials/platform/services_for_ios.rst:84
msgid "Purchases a product id through the Store Kit API."
msgstr ""

#: ../../docs/tutorials/platform/services_for_ios.rst:89
msgid ""
"Takes a Dictionary as a parameter, with one field, ``product_id``, a string "
"with your product id. Example:"
msgstr ""

#: ../../docs/tutorials/platform/services_for_ios.rst:97
#: ../../docs/tutorials/platform/services_for_ios.rst:137
#: ../../docs/tutorials/platform/services_for_ios.rst:161
#: ../../docs/tutorials/platform/services_for_ios.rst:212
#: ../../docs/tutorials/platform/services_for_ios.rst:259
#: ../../docs/tutorials/platform/services_for_ios.rst:288
#: ../../docs/tutorials/platform/services_for_ios.rst:318
#: ../../docs/tutorials/platform/services_for_ios.rst:350
#: ../../docs/tutorials/platform/services_for_ios.rst:407
msgid "Response event"
msgstr ""

#: ../../docs/tutorials/platform/services_for_ios.rst:99
#: ../../docs/tutorials/platform/services_for_ios.rst:139
#: ../../docs/tutorials/platform/services_for_ios.rst:214
#: ../../docs/tutorials/platform/services_for_ios.rst:261
#: ../../docs/tutorials/platform/services_for_ios.rst:290
#: ../../docs/tutorials/platform/services_for_ios.rst:320
#: ../../docs/tutorials/platform/services_for_ios.rst:352
#: ../../docs/tutorials/platform/services_for_ios.rst:409
msgid "The response event will be a dictionary with the following fields:"
msgstr ""

#: ../../docs/tutorials/platform/services_for_ios.rst:101
#: ../../docs/tutorials/platform/services_for_ios.rst:216
#: ../../docs/tutorials/platform/services_for_ios.rst:263
#: ../../docs/tutorials/platform/services_for_ios.rst:292
#: ../../docs/tutorials/platform/services_for_ios.rst:322
#: ../../docs/tutorials/platform/services_for_ios.rst:354
msgid "On error:"
msgstr ""

#: ../../docs/tutorials/platform/services_for_ios.rst:111
#: ../../docs/tutorials/platform/services_for_ios.rst:227
#: ../../docs/tutorials/platform/services_for_ios.rst:273
#: ../../docs/tutorials/platform/services_for_ios.rst:302
#: ../../docs/tutorials/platform/services_for_ios.rst:332
#: ../../docs/tutorials/platform/services_for_ios.rst:364
msgid "On success:"
msgstr ""

#: ../../docs/tutorials/platform/services_for_ios.rst:122
msgid "request_product_info"
msgstr ""

#: ../../docs/tutorials/platform/services_for_ios.rst:124
msgid "Requests the product info on a list of product IDs."
msgstr ""

#: ../../docs/tutorials/platform/services_for_ios.rst:129
msgid ""
"Takes a Dictionary as a parameter, with one field, ``product_ids``, a string "
"array with a list of product ids. Example:"
msgstr ""

#: ../../docs/tutorials/platform/services_for_ios.rst:155
msgid "restore_purchases"
msgstr ""

#: ../../docs/tutorials/platform/services_for_ios.rst:157
msgid ""
"Restores previously made purchases on user's account. This will create "
"response events for each previously purchased product id."
msgstr ""

#: ../../docs/tutorials/platform/services_for_ios.rst:163
msgid "The response events will be dictionaries with the following fields:"
msgstr "응답 이벤트는 다음 필드가 있는 딕셔너리일 것입니다:"

#: ../../docs/tutorials/platform/services_for_ios.rst:174
msgid "Game Center"
msgstr ""

#: ../../docs/tutorials/platform/services_for_ios.rst:176
msgid "Implemented in ``platform/iphone/game_center.mm``."
msgstr ""

#: ../../docs/tutorials/platform/services_for_ios.rst:178
msgid ""
"The Game Center API is available through the \"GameCenter\" singleton. It "
"has 8 methods:"
msgstr ""

#: ../../docs/tutorials/platform/services_for_ios.rst:181
msgid "``bool is_authenticated();``"
msgstr ""

#: ../../docs/tutorials/platform/services_for_ios.rst:182
msgid "``Error post_score(Variant p_score);``"
msgstr ""

#: ../../docs/tutorials/platform/services_for_ios.rst:183
msgid "``Error award_achievement(Variant p_params);``"
msgstr ""

#: ../../docs/tutorials/platform/services_for_ios.rst:184
msgid "``void reset_achievements();``"
msgstr ""

#: ../../docs/tutorials/platform/services_for_ios.rst:185
msgid "``void request_achievements();``"
msgstr ""

#: ../../docs/tutorials/platform/services_for_ios.rst:186
msgid "``void request_achievement_descriptions();``"
msgstr ""

#: ../../docs/tutorials/platform/services_for_ios.rst:187
msgid "``Error show_game_center(Variant p_params);``"
msgstr ""

#: ../../docs/tutorials/platform/services_for_ios.rst:188
msgid "``Error request_identity_verification_signature();``"
msgstr ""

#: ../../docs/tutorials/platform/services_for_ios.rst:190
msgid "plus the standard pending event interface."
msgstr ""

#: ../../docs/tutorials/platform/services_for_ios.rst:193
msgid "post_score"
msgstr ""

#: ../../docs/tutorials/platform/services_for_ios.rst:195
msgid "Posts a score to a Game Center leaderboard."
msgstr ""

#: ../../docs/tutorials/platform/services_for_ios.rst:200
#: ../../docs/tutorials/platform/services_for_ios.rst:389
msgid "Takes a Dictionary as a parameter, with two fields:"
msgstr ""

#: ../../docs/tutorials/platform/services_for_ios.rst:202
msgid "``score`` a float number"
msgstr ""

#: ../../docs/tutorials/platform/services_for_ios.rst:203
msgid "``category`` a string with the category name"
msgstr ""

#: ../../docs/tutorials/platform/services_for_ios.rst:237
msgid "award_achievement"
msgstr ""

#: ../../docs/tutorials/platform/services_for_ios.rst:239
msgid "Modifies the progress of a Game Center achievement."
msgstr ""

#: ../../docs/tutorials/platform/services_for_ios.rst:244
msgid "Takes a Dictionary as a parameter, with 3 fields:"
msgstr ""

#: ../../docs/tutorials/platform/services_for_ios.rst:246
msgid "``name`` (string) the achievement name"
msgstr ""

#: ../../docs/tutorials/platform/services_for_ios.rst:247
msgid ""
"``progress`` (float) the achievement progress from 0.0 to 100.0 (passed to "
"``GKAchievement::percentComplete``)"
msgstr ""

#: ../../docs/tutorials/platform/services_for_ios.rst:249
msgid ""
"``show_completion_banner`` (bool) whether Game Center should display an "
"achievement banner at the top of the screen"
msgstr ""

#: ../../docs/tutorials/platform/services_for_ios.rst:283
msgid "reset_achievements"
msgstr ""

#: ../../docs/tutorials/platform/services_for_ios.rst:285
msgid "Clears all Game Center achievements. The function takes no parameters."
msgstr ""

#: ../../docs/tutorials/platform/services_for_ios.rst:312
msgid "request_achievements"
msgstr ""

#: ../../docs/tutorials/platform/services_for_ios.rst:314
msgid ""
"Request all the Game Center achievements the player has made progress on. "
"The function takes no parameters."
msgstr ""

#: ../../docs/tutorials/platform/services_for_ios.rst:344
msgid "request_achievement_descriptions"
msgstr ""

#: ../../docs/tutorials/platform/services_for_ios.rst:346
msgid ""
"Request the descriptions of all existing Game Center achievements regardless "
"of progress. The function takes no parameters."
msgstr ""

#: ../../docs/tutorials/platform/services_for_ios.rst:381
msgid "show_game_center"
msgstr ""

#: ../../docs/tutorials/platform/services_for_ios.rst:383
msgid ""
"Displays the built in Game Center overlay showing leaderboards, "
"achievements, and challenges."
msgstr ""

#: ../../docs/tutorials/platform/services_for_ios.rst:391
msgid ""
"``view`` (string) (optional) the name of the view to present. Accepts "
"\"default\", \"leaderboards\", \"achievements\", or \"challenges\". Defaults "
"to \"default\"."
msgstr ""

#: ../../docs/tutorials/platform/services_for_ios.rst:394
msgid ""
"``leaderboard_name`` (string) (optional) the name of the leaderboard to "
"present. Only used when \"view\" is \"leaderboards\" (or \"default\" is "
"configured to show leaderboards). If not specified, Game Center will display "
"the aggregate leaderboard."
msgstr ""

#: ../../docs/tutorials/platform/services_for_ios.rst:411
msgid "On close:"
msgstr ""

#: ../../docs/tutorials/platform/services_for_ios.rst:421
msgid "Multi-platform games"
msgstr ""

#: ../../docs/tutorials/platform/services_for_ios.rst:423
msgid ""
"When working on a multi-platform game, you won't always have the \"GameCenter"
"\" singleton available (for example when running on PC or Android). Because "
"the gdscript compiler looks up the singletons at compile time, you can't "
"just query the singletons to see and use what you need inside a conditional "
"block, you need to also define them as valid identifiers (local variable or "
"class member). This is an example of how to work around this in a class:"
msgstr ""

#: ../../docs/tutorials/platform/customizing_html5_shell.rst:4
msgid "Customizing the Web export HTML page"
msgstr ""

#: ../../docs/tutorials/platform/customizing_html5_shell.rst:6
msgid ""
"Rather than the default HTML page that comes with the export templates, it "
"is also possible to use a custom HTML page. This allows drastic "
"customization of the final web presentation and behavior. The path to the "
"custom HTML page is specified in the export options as ``Html/Custom Html "
"Shell``."
msgstr ""

#: ../../docs/tutorials/platform/customizing_html5_shell.rst:11
msgid ""
"The default HTML page is available in the Godot Engine repository at `/misc/"
"dist/html/full-size.html <https://github.com/godotengine/godot/blob/master/"
"misc/dist/html/full-size.html>`__. Some simple use-cases where customizing "
"the default page is useful include:"
msgstr ""

#: ../../docs/tutorials/platform/customizing_html5_shell.rst:15
msgid "Loading files from a different directory"
msgstr ""

#: ../../docs/tutorials/platform/customizing_html5_shell.rst:16
msgid "Loading a ``.zip`` file instead of a ``.pck`` file as main pack"
msgstr ""

#: ../../docs/tutorials/platform/customizing_html5_shell.rst:17
msgid "Loading engine files from a different directory than the main pack file"
msgstr ""

#: ../../docs/tutorials/platform/customizing_html5_shell.rst:18
msgid ""
"Adding a click-to-play button so games can be started in full-screen mode"
msgstr ""

#: ../../docs/tutorials/platform/customizing_html5_shell.rst:19
msgid ""
"Loading some extra files before the engine starts, so they are available in "
"the file system later"
msgstr ""

#: ../../docs/tutorials/platform/customizing_html5_shell.rst:21
msgid ""
"Passing custom \"command line\" arguments, e.g. ``-s`` to start a MainLoop "
"script"
msgstr ""

#: ../../docs/tutorials/platform/customizing_html5_shell.rst:23
msgid ""
"Another sample HTML page is available at `/misc/dist/html/fixed-size.html "
"<https://github.com/godotengine/godot/blob/master/misc/dist/html/fixed-size."
"html>`__. This page uses a fixed size canvas with an output widget below. "
"However, the F12 browser console should be preferred as it can display "
"additional information, such as WebGL errors."
msgstr ""

#: ../../docs/tutorials/platform/customizing_html5_shell.rst:29
msgid "Placeholder substitution"
msgstr ""

#: ../../docs/tutorials/platform/customizing_html5_shell.rst:31
msgid ""
"When exporting the game, several placeholders in the HTML page are replaced "
"with values depending on the export:"
msgstr ""

#: ../../docs/tutorials/platform/customizing_html5_shell.rst:35
msgid "Placeholder"
msgstr ""

#: ../../docs/tutorials/platform/customizing_html5_shell.rst:35
msgid "Substituted by"
msgstr ""

#: ../../docs/tutorials/platform/customizing_html5_shell.rst:37
msgid "``$GODOT_BASENAME``"
msgstr ""

#: ../../docs/tutorials/platform/customizing_html5_shell.rst:37
msgid ""
"Basename of exported files without suffixes, e.g. ``game`` when exporting "
"``game.html``"
msgstr ""

#: ../../docs/tutorials/platform/customizing_html5_shell.rst:40
msgid "``$GODOT_DEBUG_ENABLED``"
msgstr ""

#: ../../docs/tutorials/platform/customizing_html5_shell.rst:40
msgid "``true`` if debugging, ``false`` otherwise"
msgstr ""

#: ../../docs/tutorials/platform/customizing_html5_shell.rst:42
msgid "``$GODOT_HEAD_INCLUDE``"
msgstr ""

#: ../../docs/tutorials/platform/customizing_html5_shell.rst:42
msgid ""
"Custom string to include just before the end of the HTML ``<head>`` element"
msgstr ""

#: ../../docs/tutorials/platform/customizing_html5_shell.rst:46
msgid ""
"The HTML file must evaluate the JavaScript file ``$GODOT_BASENAME.js``. This "
"file defines a global ``Engine`` object used to start the engine, :ref:`see "
"below <doc_javascript_engine_object>` for details."
msgstr ""

#: ../../docs/tutorials/platform/customizing_html5_shell.rst:50
msgid ""
"The boot splash image is exported as ``$GODOT_BASENAME.png`` and can be used "
"e.g. in ``<img />`` elements."
msgstr ""

#: ../../docs/tutorials/platform/customizing_html5_shell.rst:53
msgid ""
"``$GODOT_DEBUG_ENABLED`` can be useful to optionally display e.g. an output "
"console or other debug tools."
msgstr ""

#: ../../docs/tutorials/platform/customizing_html5_shell.rst:56
msgid ""
"``$GODOT_HEAD_INCLUDE`` is replaced with the string specified by the export "
"option ``Html/Head Include``."
msgstr ""

#: ../../docs/tutorials/platform/customizing_html5_shell.rst:62
msgid "The ``Engine`` object"
msgstr ""

#: ../../docs/tutorials/platform/customizing_html5_shell.rst:64
msgid ""
"The JavaScript global object ``Engine`` is defined by ``$GODOT_BASENAME.js`` "
"and serves as an interface to the engine start-up process."
msgstr ""

#: ../../docs/tutorials/platform/customizing_html5_shell.rst:67
msgid ""
"The API is based on and requires basic understanding of `Promises <https://"
"developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Using_promises>`__."
msgstr ""

#: ../../docs/tutorials/platform/customizing_html5_shell.rst:69
#, fuzzy
msgid "The object itself has only the following methods:"
msgstr "적 씬은 다음 노드들을 사용할 것입니다:"

#: ../../docs/tutorials/platform/customizing_html5_shell.rst:73
msgid "Load the engine from the passed base path."
msgstr ""

#: ../../docs/tutorials/platform/customizing_html5_shell.rst:0
msgid "Arguments"
msgstr ""

#: ../../docs/tutorials/platform/customizing_html5_shell.rst:75
msgid "Base path of the engine to load."
msgstr ""

#: ../../docs/tutorials/platform/customizing_html5_shell.rst:0
#, fuzzy
msgid "Returns"
msgstr "Return(반환)"

#: ../../docs/tutorials/platform/customizing_html5_shell.rst:76
msgid "Promise which resolves once the engine is loaded."
msgstr ""

#: ../../docs/tutorials/platform/customizing_html5_shell.rst:80
msgid "Unload the engine to free memory."
msgstr ""

#: ../../docs/tutorials/platform/customizing_html5_shell.rst:82
msgid ""
"This is called automatically once the engine is started unless explicitly "
"disabled using :js:func:`engine.setUnloadAfterInit`."
msgstr ""

#: ../../docs/tutorials/platform/customizing_html5_shell.rst:87
msgid "Check whether WebGL is available."
msgstr ""

#: ../../docs/tutorials/platform/customizing_html5_shell.rst:89
msgid "The major WebGL version to check for. Defaults to 1 for *WebGL 1.0*."
msgstr ""

#: ../../docs/tutorials/platform/customizing_html5_shell.rst:92
msgid ""
"``true`` if the given major version of WebGL is available, ``false`` "
"otherwise."
msgstr ""

#: ../../docs/tutorials/platform/customizing_html5_shell.rst:98
msgid ""
"When loading the engine, the filename extension of the WebAssembly module is "
"assumed to be ``wasm``. This function allows usage of an alternate extension."
msgstr ""

#: ../../docs/tutorials/platform/customizing_html5_shell.rst:108
msgid ""
"This is useful for outdated hosts that only accept uploads of files with "
"certain filename extensions."
msgstr ""

#: ../../docs/tutorials/platform/customizing_html5_shell.rst:111
msgid "Filename extension without preceding dot."
msgstr ""

#: ../../docs/tutorials/platform/customizing_html5_shell.rst:115
msgid ""
"Depending on the host, using an alternate filename extension can prevent "
"some start-up optimizations. This occurs when the file is delivered with a "
"MIME-type other than :mimetype:`application/wasm`."
msgstr ""

#: ../../docs/tutorials/platform/customizing_html5_shell.rst:120
msgid "Starting an ``Engine`` instance"
msgstr ""

#: ../../docs/tutorials/platform/customizing_html5_shell.rst:122
msgid ":js:class:`Engine` also acts a class:"
msgstr ""

#: ../../docs/tutorials/platform/customizing_html5_shell.rst:126
msgid "An instance of the engine that can be started, usually a game."
msgstr ""

#: ../../docs/tutorials/platform/customizing_html5_shell.rst:128
msgid "Instantiate the class using the ``new`` operator:"
msgstr ""

#: ../../docs/tutorials/platform/customizing_html5_shell.rst:134
msgid ""
"This yields an :js:class:`Engine` instance, referred to as ``engine`` with a "
"lower-case ``e`` from here."
msgstr ""

#: ../../docs/tutorials/platform/customizing_html5_shell.rst:137
msgid ""
"To start such an instance, the global ``Engine`` object must be loaded, then "
"the ``engine`` instance must be initialized and finally started."
msgstr ""

#: ../../docs/tutorials/platform/customizing_html5_shell.rst:142
msgid ""
"Initialize the instance. The instance can then be started with one of the "
"``start`` functions, usually :js:func:`engine.startGame`."
msgstr ""

#: ../../docs/tutorials/platform/customizing_html5_shell.rst:145
msgid ""
"The base path to the engine, same as in :js:func:`Engine.load`. Must be "
"passed only if the engine hasn't been loaded yet."
msgstr ""

#: ../../docs/tutorials/platform/customizing_html5_shell.rst:149
msgid "Promise that resolves once the engine is loaded and initialized."
msgstr ""

#: ../../docs/tutorials/platform/customizing_html5_shell.rst:153
msgid ""
"Load a file so it is available in the file system once the instance runs. "
"Must be called **before** starting the instance."
msgstr ""

#: ../../docs/tutorials/platform/customizing_html5_shell.rst:156
msgid ""
"If type is string, the file will be loaded from that path.  If type is "
"``ArrayBuffer`` or a view on one, the buffer will used as the content of the "
"file."
msgstr ""

#: ../../docs/tutorials/platform/customizing_html5_shell.rst:157
msgid "If type is string, the file will be loaded from that path."
msgstr ""

#: ../../docs/tutorials/platform/customizing_html5_shell.rst:159
msgid ""
"If type is ``ArrayBuffer`` or a view on one, the buffer will used as the "
"content of the file."
msgstr ""

#: ../../docs/tutorials/platform/customizing_html5_shell.rst:162
msgid ""
"Path by which the file will be available. Mandatory if ``file`` is not a "
"string. If not passed, the path is derived from the URL of the loaded file."
msgstr ""

#: ../../docs/tutorials/platform/customizing_html5_shell.rst:167
msgid "Promise that resolves once the file is preloaded."
msgstr ""

#: ../../docs/tutorials/platform/customizing_html5_shell.rst:171
msgid ""
"Starts the instance of the engine, using the passed strings as command line "
"arguments. This allows great control over how the engine is started, but "
"usually the other methods starting with ``engine.start`` are simpler and "
"should be used instead."
msgstr ""

#: ../../docs/tutorials/platform/customizing_html5_shell.rst:176
msgid ""
"If the instance has not yet been initialized with :js:func:`engine.init`, it "
"will be."
msgstr ""

#: ../../docs/tutorials/platform/customizing_html5_shell.rst:179
msgid "The engine must be loaded beforehand."
msgstr ""

#: ../../docs/tutorials/platform/customizing_html5_shell.rst:181
msgid ""
"Requires that the engine has been loaded, and that a canvas can be found on "
"the page."
msgstr ""

#: ../../docs/tutorials/platform/customizing_html5_shell.rst:184
msgid "Command line arguments."
msgstr "명령줄 인수."

#: ../../docs/tutorials/platform/customizing_html5_shell.rst:186
msgid "Promise that resolves once the engine started."
msgstr ""

#: ../../docs/tutorials/platform/customizing_html5_shell.rst:190
msgid ""
"Initializes the engine if not yet initialized, loads the executable, and "
"starts the game with the main pack loaded from the passed URL."
msgstr ""

#: ../../docs/tutorials/platform/customizing_html5_shell.rst:193
msgid ""
"If the engine isn't loaded yet, the base path of the passed executable name "
"will be used to load the engine."
msgstr ""

#: ../../docs/tutorials/platform/customizing_html5_shell.rst:196
msgid ""
"Executable's name (URL) to start. Also used as base path to load the engine "
"if not loaded already. Should not contain the file's extension."
msgstr ""

#: ../../docs/tutorials/platform/customizing_html5_shell.rst:200
msgid "Path (URL) to the main pack to start."
msgstr ""

#: ../../docs/tutorials/platform/customizing_html5_shell.rst:203
msgid "Promise that resolves once the game started."
msgstr ""

#: ../../docs/tutorials/platform/customizing_html5_shell.rst:206
msgid "Configuring start-up behaviour"
msgstr ""

#: ../../docs/tutorials/platform/customizing_html5_shell.rst:208
msgid ""
"Beside starting the engine, other methods of the engine instance allow "
"configuring the behavior:"
msgstr ""

#: ../../docs/tutorials/platform/customizing_html5_shell.rst:213
msgid ""
"Specify whether the Engine will be unloaded automatically after the instance "
"is initialized."
msgstr ""

#: ../../docs/tutorials/platform/customizing_html5_shell.rst:216
msgid ""
"This frees browser memory by unloading files that are no longer needed once "
"the instance is initialized. However, if more instances of the engine will "
"be started, the Engine will have to be loaded again."
msgstr ""

#: ../../docs/tutorials/platform/customizing_html5_shell.rst:220
#: ../../docs/tutorials/platform/customizing_html5_shell.rst:239
msgid "Enabled by default."
msgstr ""

#: ../../docs/tutorials/platform/customizing_html5_shell.rst:222
msgid ""
"``true`` if the engine shall be unloaded after initializing, ``false`` "
"otherwise."
msgstr ""

#: ../../docs/tutorials/platform/customizing_html5_shell.rst:228
msgid "Specify a canvas to use."
msgstr ""

#: ../../docs/tutorials/platform/customizing_html5_shell.rst:230
msgid "By default, the first canvas element on the page is used for rendering."
msgstr ""

#: ../../docs/tutorials/platform/customizing_html5_shell.rst:232
msgid "The canvas to use."
msgstr ""

#: ../../docs/tutorials/platform/customizing_html5_shell.rst:236
msgid ""
"Specifies whether the canvas will be resized to the width and height "
"specified in the project settings on start."
msgstr ""

#: ../../docs/tutorials/platform/customizing_html5_shell.rst:241
msgid "``true`` if the canvas shall be resized on start, ``false`` otherwise."
msgstr ""

#: ../../docs/tutorials/platform/customizing_html5_shell.rst:246
msgid ""
"By default, the engine will try to guess the locale to use from the "
"JavaScript environment. It is usually preferable to use a server-side user-"
"specified locale, or at least use the locale requested in the HTTP ``Accept-"
"Language`` header. This method allows specifying such a custom locale string."
msgstr ""

#: ../../docs/tutorials/platform/customizing_html5_shell.rst:252
msgid "For example, with PHP:"
msgstr ""

#: ../../docs/tutorials/platform/customizing_html5_shell.rst:258
#, fuzzy
msgid "Locale."
msgstr "로케일"

#: ../../docs/tutorials/platform/customizing_html5_shell.rst:261
msgid "List of :ref:`locales <doc_locales>`."
msgstr ""

#: ../../docs/tutorials/platform/customizing_html5_shell.rst:265
msgid "Specify the virtual filename of the executable."
msgstr ""

#: ../../docs/tutorials/platform/customizing_html5_shell.rst:267
msgid ""
"A real executable file doesn't exist for the HTML5 platform. However, a "
"virtual filename is stored by the engine for compatibility with other "
"platforms."
msgstr ""

#: ../../docs/tutorials/platform/customizing_html5_shell.rst:271
msgid ""
"By default, the base name of the loaded engine files is used. This method "
"allows specifying another name."
msgstr ""

#: ../../docs/tutorials/platform/customizing_html5_shell.rst:274
msgid ""
"This affects the output of :ref:`OS.get_executable_path() "
"<class_OS_method_get_executable_path>` and the automatically started main "
"pack, :file:`{ExecutableName}.pck`."
msgstr ""

#: ../../docs/tutorials/platform/customizing_html5_shell.rst:277
msgid "Executable name."
msgstr ""

#: ../../docs/tutorials/platform/customizing_html5_shell.rst:280
msgid "Customizing the presentation"
msgstr ""

#: ../../docs/tutorials/platform/customizing_html5_shell.rst:282
msgid "The following methods are used to implement the presentation:"
msgstr ""

#: ../../docs/tutorials/platform/customizing_html5_shell.rst:286
msgid "Set the callback for displaying download progress."
msgstr ""

#: ../../docs/tutorials/platform/customizing_html5_shell.rst:288
msgid ""
"Callback called once per frame with two number arguments: bytes loaded so "
"far, and total bytes to load."
msgstr ""

#: ../../docs/tutorials/platform/customizing_html5_shell.rst:299
msgid "If the total is 0, it couldn't be calculated. Possible reasons include:"
msgstr ""

#: ../../docs/tutorials/platform/customizing_html5_shell.rst:302
msgid "Files are delivered with server-side chunked compression"
msgstr ""

#: ../../docs/tutorials/platform/customizing_html5_shell.rst:303
msgid "Files are delivered with server-side compression on Chromium"
msgstr ""

#: ../../docs/tutorials/platform/customizing_html5_shell.rst:304
msgid ""
"Not all file downloads have started yet (usually on servers without multi-"
"threading)"
msgstr ""

#: ../../docs/tutorials/platform/customizing_html5_shell.rst:308
msgid ""
"For ease of use, the callback is only called once per frame, so that usage "
"of ``requestAnimationFrame()`` is not necessary."
msgstr ""

#: ../../docs/tutorials/platform/customizing_html5_shell.rst:313
msgid "Specify the standard output stream callback."
msgstr ""

#: ../../docs/tutorials/platform/customizing_html5_shell.rst:315
#: ../../docs/tutorials/platform/customizing_html5_shell.rst:334
msgid "Callback function called with one argument, the string to print."
msgstr ""

#: ../../docs/tutorials/platform/customizing_html5_shell.rst:325
#: ../../docs/tutorials/platform/customizing_html5_shell.rst:344
msgid ""
"This method should usually only be used in debug pages. The ``"
"$GODOT_DEBUG_ENABLED`` placeholder can be used to check for this."
msgstr ""

#: ../../docs/tutorials/platform/customizing_html5_shell.rst:328
msgid "By default, ``console.log()`` is used."
msgstr ""

#: ../../docs/tutorials/platform/customizing_html5_shell.rst:332
msgid "Specify the standard error stream callback."
msgstr ""

#: ../../docs/tutorials/platform/customizing_html5_shell.rst:347
msgid "By default, ``console.warn()`` is used."
msgstr ""

#: ../../docs/tutorials/platform/customizing_html5_shell.rst:350
msgid "Accessing the Emscripten ``Module``"
msgstr ""

#: ../../docs/tutorials/platform/customizing_html5_shell.rst:352
msgid ""
"If you know what you're doing, you can access the runtime environment "
"(Emscripten's ``Module``) as ``engine.rtenv``. Check the official Emscripten "
"documentation for information on how to use it: https://kripken.github.io/"
"emscripten-site/docs/api_reference/module.html"
msgstr ""

#: ../../docs/tutorials/platform/consoles.rst:4
msgid "Console support in Godot"
msgstr "Godot의 콘솔 지원"

#: ../../docs/tutorials/platform/consoles.rst:7
msgid "Official support"
msgstr ""

#: ../../docs/tutorials/platform/consoles.rst:9
msgid ""
"Godot currently does not officially support consoles (except the Xbox One "
"using UWP)."
msgstr ""

#: ../../docs/tutorials/platform/consoles.rst:12
msgid "The reasons for this are:"
msgstr ""

#: ../../docs/tutorials/platform/consoles.rst:14
msgid ""
"To develop for consoles, one must be licensed as a company. As an open "
"source project, Godot does not have such a legal figure."
msgstr ""

#: ../../docs/tutorials/platform/consoles.rst:16
msgid ""
"Console SDKs are secret and covered by non-disclosure agreements. Even if we "
"could get access to them, we could not publish the platform-specific code "
"under an open source license."
msgstr ""

#: ../../docs/tutorials/platform/consoles.rst:19
msgid ""
"Consoles require specialized hardware to develop for, so regular individuals "
"can't create games for them anyway."
msgstr ""

#: ../../docs/tutorials/platform/consoles.rst:22
msgid ""
"However, it is still possible to port your games to consoles thanks to "
"services provided by third-party companies."
msgstr ""

#: ../../docs/tutorials/platform/consoles.rst:26
msgid "Third-party support"
msgstr ""

#: ../../docs/tutorials/platform/consoles.rst:28
msgid ""
"Console ports of Godot are offered by third-party companies (which have "
"ported Godot on their own). These companies also offer publishing of your "
"games to various consoles."
msgstr ""

#: ../../docs/tutorials/platform/consoles.rst:32
msgid "Following is the list of providers:"
msgstr ""

#: ../../docs/tutorials/platform/consoles.rst:34
msgid ""
"`Lone Wolf Technology <http://www.lonewolftechnology.com/>`_ offers Switch, "
"PS4 and Xbox One porting and publishing of Godot games."
msgstr ""

#: ../../docs/tutorials/platform/consoles.rst:36
msgid ""
"`Pineapple Works <https://pineapple.works/>`_ offers Switch and Xbox One "
"porting and publishing of Godot games."
msgstr ""

#: ../../docs/tutorials/platform/consoles.rst:39
msgid ""
"If your company offers porting and/or publishing services for Godot games, "
"feel free to `open an issue or pull request <https://github.com/godotengine/"
"godot-docs>`_ to add your company to the list above."
msgstr ""

#: ../../docs/tutorials/threads/using_multiple_threads.rst:9
msgid ""
"Threads allow simultaneous execution of code. It allows off-loading work "
"from the main thread."
msgstr ""

#: ../../docs/tutorials/threads/using_multiple_threads.rst:12
msgid "Godot supports threads and provides many handy functions to use them."
msgstr ""

#: ../../docs/tutorials/threads/using_multiple_threads.rst:14
msgid ""
"If using other languages (C#, C++), it may be easier to use the threading "
"classes they support."
msgstr ""

#: ../../docs/tutorials/threads/using_multiple_threads.rst:18
#, fuzzy
msgid "Creating a Thread"
msgstr "프로젝트 생성하기"

#: ../../docs/tutorials/threads/using_multiple_threads.rst:20
#, fuzzy
msgid "Creating a thread is very simple, just use the following code:"
msgstr "인터페이스를 활성화하기 위해, 다음 코드를 실행합니다:"

#: ../../docs/tutorials/threads/using_multiple_threads.rst:45
msgid ""
"Your function will, then, run in a separate thread until it returns. Even if "
"the function has returned already, the thread must collect it, so call :ref:"
"`Thread.wait_to_finish()<class_Thread_method_wait_to_finish>`, which will "
"wait until the thread is done (if not done yet), then properly dispose of it."
msgstr ""

#: ../../docs/tutorials/threads/using_multiple_threads.rst:51
msgid "Mutexes"
msgstr ""

#: ../../docs/tutorials/threads/using_multiple_threads.rst:53
msgid ""
"Accessing objects or data from multiple threads is not always supported (if "
"you do it, it will cause unexpected behaviors or crashes). Read the :ref:"
"`Thread safe APIs<doc_thread_safe_apis>` to understand which engine APIs "
"support multiple thread access."
msgstr ""

#: ../../docs/tutorials/threads/using_multiple_threads.rst:57
msgid ""
"When processing your own data or calling your own functions, as a rule, try "
"to avoid accessing the same data directly from different threads. You may "
"run into synchronization problems, as the data is not always updated between "
"CPU cores when modified. Always use a :ref:`Mutex<class_Mutex>` when "
"accessing a piece of data from different threads."
msgstr ""

#: ../../docs/tutorials/threads/using_multiple_threads.rst:63
msgid ""
"When calling :ref:`Mutex.lock()<class_Mutex_method_lock>`, a thread ensures "
"that all other threads will be blocked (put on suspended state) if they try "
"to *lock* the same mutex. When the mutex is unlocked by calling :ref:`Mutex."
"unlock()<class_Mutex_method_unlock>`, the other threads will be allowed to "
"proceed with the lock (but only one at a time)."
msgstr ""

#: ../../docs/tutorials/threads/using_multiple_threads.rst:69
#, fuzzy
msgid "Here is an example of using a Mutex:"
msgstr "어떻게 작동하는 지의 예제입니다:"

#: ../../docs/tutorials/threads/using_multiple_threads.rst:101
msgid "Semaphores"
msgstr ""

#: ../../docs/tutorials/threads/using_multiple_threads.rst:103
msgid ""
"Sometimes you want your thread to work *\"on demand\"*. In other words, tell "
"it when to work and let it suspend when it isn't doing anything. For this, :"
"ref:`Semaphores<class_Semaphore>` are used. The function :ref:`Semaphore."
"wait()<class_Semaphore_method_wait>` is used in the thread to suspend it "
"until some data arrives."
msgstr ""

#: ../../docs/tutorials/threads/using_multiple_threads.rst:109
msgid ""
"The main thread, instead, uses :ref:`Semaphore."
"post()<class_Semaphore_method_post>` to signal that data is ready to be "
"processed:"
msgstr ""

#: ../../docs/tutorials/threads/thread_safe_apis.rst:4
msgid "Thread safe APIs"
msgstr ""

#: ../../docs/tutorials/threads/thread_safe_apis.rst:9
msgid ""
"Threads are used to balance processing power across CPUs and cores. Godot "
"supports multithreading, but not in the whole engine."
msgstr ""

#: ../../docs/tutorials/threads/thread_safe_apis.rst:12
msgid ""
"Below is a list of ways multithreading can be used in different areas of "
"Godot."
msgstr ""

#: ../../docs/tutorials/threads/thread_safe_apis.rst:17
msgid ""
":ref:`Global Scope<class_@GlobalScope>` singletons are all thread safe. "
"Accessing servers from threads is supported (for VisualServer and Physics "
"servers, ensure threaded or thread safe operation is enabled in the project "
"settings!)."
msgstr ""

#: ../../docs/tutorials/threads/thread_safe_apis.rst:19
msgid ""
"This makes them ideal for code that creates dozens of thousands of instances "
"in servers and controls them from threads. Of course, it requires a bit more "
"code, as this is used directly and not within the scene tree."
msgstr ""

#: ../../docs/tutorials/threads/thread_safe_apis.rst:24
msgid ""
"Interacting with the active scene tree is **NOT** thread safe. Make sure to "
"use mutexes when sending data between threads. If you want to call functions "
"from a thread, the *call_deferred* function may be used:"
msgstr ""

#: ../../docs/tutorials/threads/thread_safe_apis.rst:33
msgid ""
"However, creating scene chunks (nodes in tree arrangement) outside the "
"active tree is fine. This way, parts of a scene can be built or instantiated "
"in a thread, then added in the main thread:"
msgstr ""

#: ../../docs/tutorials/threads/thread_safe_apis.rst:42
msgid ""
"Still, this is only really useful if you have **one** thread loading data. "
"Attempting to load or create scene chunks from multiple threads may work, "
"but you risk resources (which are only loaded once in Godot) tweaked by the "
"multiple threads, resulting in unexpected behaviors or crashes."
msgstr ""

#: ../../docs/tutorials/threads/thread_safe_apis.rst:47
msgid ""
"Only use more than one thread to generate scene data if you *really* know "
"what you are doing and you are sure that a single resource is not being used "
"or set in multiple ones. Otherwise, you are safer just using the servers API "
"(which is fully thread-safe) directly and not touching scene or resources."
msgstr ""

#: ../../docs/tutorials/threads/thread_safe_apis.rst:53
msgid "GDScript arrays, dictionaries"
msgstr "GDScript 배열(arrays), 딕셔너리(dictionaries)"

#: ../../docs/tutorials/threads/thread_safe_apis.rst:55
msgid ""
"In GDScript, reading and writing elements from multiple threads is ok, but "
"anything that changes the container size (resizing, adding or removing "
"elements) requires locking a mutex."
msgstr ""

#: ../../docs/tutorials/threads/thread_safe_apis.rst:60
msgid ""
"Modifying a unique resource from multiple threads is not supported, but "
"loading them on threads or handling a reference is perfectly supported. "
"Scenes, textures, meshes, etc. Can be loaded and manipulated on threads, "
"then added to the active scene in the main thread."
msgstr ""

#: ../../docs/tutorials/content/procedural_geometry/index.rst:2
#, fuzzy
msgid "Procedural geometry"
msgstr ":ref:`Particle 셰이더 <doc_particle_shader>`"

#: ../../docs/tutorials/content/procedural_geometry/index.rst:4
msgid ""
"There are many ways to procedurally generate geometry in Godot. In this "
"tutorial series we will explore a few of them. Each technique has its own "
"benefits and drawbacks, so it is best to understand each one and how it can "
"be useful in a given situation."
msgstr ""

#: ../../docs/tutorials/content/procedural_geometry/index.rst:18
#, fuzzy
msgid "What is geometry?"
msgstr "리지드 바디(rigid body)란?"

#: ../../docs/tutorials/content/procedural_geometry/index.rst:20
msgid ""
"Geometry is a fancy way of saying shape. In computer graphics, geometry is "
"typically represented by an array of positions called \"vertices\". In "
"Godot, geometry is represented by Meshes."
msgstr ""

#: ../../docs/tutorials/content/procedural_geometry/index.rst:24
#, fuzzy
msgid "What is a Mesh?"
msgstr "파티클(Particles)"

#: ../../docs/tutorials/content/procedural_geometry/index.rst:26
msgid ""
"Many things in Godot have mesh in their name: the :ref:`Mesh <class_Mesh>`, "
"the :ref:`ArrayMesh <class_ArrayMesh>`, the :ref:`MeshInstance "
"<class_MeshInstance>`, the :ref:`MultiMesh <class_MultiMesh>`, and the :ref:"
"`MultiMeshInstance <class_MultiMeshInstance>`. While they are all related, "
"they have slightly different uses."
msgstr ""

#: ../../docs/tutorials/content/procedural_geometry/index.rst:30
msgid ""
"Meshes and ArrayMeshes are resources that are drawn using a MeshInstance "
"node. Resources like Meshes and ArrayMeshes cannot be added to the scene "
"directly. A MeshInstance represents one instance of a mesh in your scene. "
"You can reuse a single mesh in multiple MeshInstances to draw it in "
"different parts of your scene with different materials or transformations "
"(scale, rotation, position etc.)."
msgstr ""

#: ../../docs/tutorials/content/procedural_geometry/index.rst:36
msgid ""
"If you are going to draw the same object many times, it can be helpful to "
"use a MultiMesh with a MultiMeshInstance. The MultiMeshInstance draws meshes "
"thousands of times very cheaply. It takes advantage of hardware instancing "
"in order to do so. The drawback with using a MultiMeshInstance is that you "
"are limited to one material for all instances. It uses an instance array to "
"store different colors and transformations for each instance, but all the "
"instances use the same material."
msgstr ""

#: ../../docs/tutorials/content/procedural_geometry/index.rst:44
#, fuzzy
msgid "What a Mesh is"
msgstr "파티클(Particles)"

#: ../../docs/tutorials/content/procedural_geometry/index.rst:46
msgid ""
"A Mesh is composed of one or more surfaces. A surface is an array composed "
"of multiple sub-arrays containing vertices, normals, UVs, etc. Normally the "
"process of constructing surfaces and meshes is hidden from the user in the :"
"ref:`VisualServer <class_VisualServer>`, but with ArrayMeshes, the user can "
"construct a Mesh manually by passing in an array containing the surface "
"information."
msgstr ""

#: ../../docs/tutorials/content/procedural_geometry/index.rst:52
msgid "Surfaces"
msgstr ""

#: ../../docs/tutorials/content/procedural_geometry/index.rst:54
msgid ""
"Each surface has its own material. Alternatively, you can override the "
"material for all surfaces in the Mesh when you use a MeshInstance using "
"``MeshInstance.override_material``."
msgstr ""

#: ../../docs/tutorials/content/procedural_geometry/index.rst:58
msgid "Surface array"
msgstr ""

#: ../../docs/tutorials/content/procedural_geometry/index.rst:60
msgid ""
"The surface array is an array of length ``ArrayMesh.ARRAY_MAX``. Each "
"position in the array is filled with a sub-array containing per-vertex "
"information. For example, the array located at ``ArrayMesh.ARRAY_NORMAL`` is "
"a :ref:`PoolVector3Array <class_PoolVector3Array>` of vertex normals."
msgstr ""

#: ../../docs/tutorials/content/procedural_geometry/index.rst:64
msgid ""
"The surface array can be indexed or non-indexed. Creating a non-indexed "
"array is as easy as not assigning an array at the index ``ArrayMesh."
"ARRAY_INDEX``. A non-indexed array stores unique vertex information for "
"every triangle, meaning that when two triangle share a vertex, the vertex is "
"duplicated in the array. An indexed surface array only stores vertex "
"information for each unique vertex and then also stores an array of indices "
"which maps out how to construct the triangles from the vertex array. In "
"general, using an indexed array is faster, but it means you have to share "
"vertex data between triangles, which is not always desired (e.g. when you "
"want per-face normals)."
msgstr ""

#: ../../docs/tutorials/content/procedural_geometry/index.rst:75
msgid ""
"Godot provides different ways of accessing and working with geometry. More "
"information on each will be provided in the following tutorials."
msgstr ""

#: ../../docs/tutorials/content/procedural_geometry/index.rst:79
#: ../../docs/tutorials/content/procedural_geometry/arraymesh.rst:48
#: ../../docs/development/file_formats/tscn.rst:321
msgid "ArrayMesh"
msgstr "ArrayMesh"

#: ../../docs/tutorials/content/procedural_geometry/index.rst:81
msgid ""
"The ArrayMesh resource extends Mesh to add a few different quality of life "
"functions, and most importantly, the ability to construct a Mesh surface "
"through scripting."
msgstr ""

#: ../../docs/tutorials/content/procedural_geometry/index.rst:84
#, fuzzy
msgid ""
"For more information about the ArrayMesh, please see the :ref:`ArrayMesh "
"tutorial <doc_arraymesh>`."
msgstr ":ref:`셰이딩 언어 <doc_shading_language>`"

#: ../../docs/tutorials/content/procedural_geometry/index.rst:87
msgid "MeshDataTool"
msgstr ""

#: ../../docs/tutorials/content/procedural_geometry/index.rst:89
msgid ""
"The MeshDataTool is a resource that converts Mesh data into arrays of "
"vertices, faces, and edges that can be modified at runtime."
msgstr ""

#: ../../docs/tutorials/content/procedural_geometry/index.rst:92
#, fuzzy
msgid ""
"For more information about the MeshDataTool, please see the :ref:"
"`MeshDataTool tutorial <doc_meshdatatool>`."
msgstr ":ref:`셰이딩 언어 <doc_shading_language>`"

#: ../../docs/tutorials/content/procedural_geometry/index.rst:95
msgid "SurfaceTool"
msgstr ""

#: ../../docs/tutorials/content/procedural_geometry/index.rst:97
msgid ""
"The SurfaceTool allows the creation of Meshes using an OpenGL 1.x immediate "
"mode style interface."
msgstr ""

#: ../../docs/tutorials/content/procedural_geometry/index.rst:99
#, fuzzy
msgid ""
"For more information about the SurfaceTool, please see the :ref:`SurfaceTool "
"tutorial <doc_surfacetool>`."
msgstr ":ref:`셰이딩 언어 <doc_shading_language>`"

#: ../../docs/tutorials/content/procedural_geometry/index.rst:102
msgid "ImmediateGeometry"
msgstr ""

#: ../../docs/tutorials/content/procedural_geometry/index.rst:104
msgid ""
"ImmediateGeometry is a node that uses an immediate mode style interface "
"(like SurfaceTool) to draw objects. The difference between ImmediateGeometry "
"and the SurfaceTool is that ImmediateGeometry is a node itself that can be "
"added to the scene tree and is drawn directly from the code. The SurfaceTool "
"generates a Mesh that needs to be added a MeshInstance to be seen."
msgstr ""

#: ../../docs/tutorials/content/procedural_geometry/index.rst:109
msgid ""
"ImmediateGeometry is useful for prototyping because of the straightforward "
"API, but it is slow because the geometry is rebuilt every frame. It is most "
"useful for quickly adding simple geometry to debug visually (e.g. by drawing "
"lines to visualize physics raycasts etc.)."
msgstr ""

#: ../../docs/tutorials/content/procedural_geometry/index.rst:113
#, fuzzy
msgid ""
"For more information about ImmediateGeometry, please see the :ref:"
"`ImmediateGeometry tutorial <doc_immediategeometry>`."
msgstr ":ref:`셰이딩 언어 <doc_shading_language>`"

#: ../../docs/tutorials/content/procedural_geometry/index.rst:116
#, fuzzy
msgid "Which one should I use?"
msgstr "어떤 이동 메서드를 사용해야 할까요?"

#: ../../docs/tutorials/content/procedural_geometry/index.rst:118
msgid ""
"Which method you use depends on what you are trying to do and what kind of "
"procedure you are comfortable with."
msgstr ""

#: ../../docs/tutorials/content/procedural_geometry/index.rst:120
msgid ""
"Both SurfaceTool and ArrayMesh are excellent for generating static geometry "
"(meshes) that don't change over time."
msgstr ""

#: ../../docs/tutorials/content/procedural_geometry/index.rst:122
msgid ""
"Using an ArrayMesh is slightly faster than using a SurfaceTool, but the API "
"is more a little more challenging. Additionally, SurfaceTool has a few "
"quality of life methods such as ``generate_normals()`` and ``index()``."
msgstr ""

#: ../../docs/tutorials/content/procedural_geometry/index.rst:125
msgid ""
"ImmediateGeometry regenerates the mesh every frame, so it is much slower "
"than ArrayMesh or SurfaceTool. However, if you need the geometry to change "
"every frame anyway it provides a much easier interface that may even be a "
"little faster than generating an ArrayMesh every frame."
msgstr ""

#: ../../docs/tutorials/content/procedural_geometry/index.rst:129
msgid ""
"The MeshDataTool is not fast, but it gives you access to all kinds of "
"properties of the mesh that you don't get with the others (edges, faces, "
"etc.). It is incredibly useful when you need that sort of data to transform "
"the mesh, but it is not a good idea to use if that information is not "
"needed. The MeshDataTool is best used if you are going to be using an "
"algorithm that requires access to the face or edge array."
msgstr ""

#: ../../docs/tutorials/content/procedural_geometry/arraymesh.rst:4
#, fuzzy
msgid "Using the ArrayMesh"
msgstr "결과 시험하기"

#: ../../docs/tutorials/content/procedural_geometry/arraymesh.rst:6
msgid ""
"This tutorial will present the basics of using an :ref:`ArrayMesh "
"<class_arraymesh>`"
msgstr ""

#: ../../docs/tutorials/content/procedural_geometry/arraymesh.rst:8
msgid ""
"To do so, we will use the function :ref:`add_surface_from_arrays() "
"<class_ArrayMesh_method_add_surface_from_arrays>`, which takes up to four "
"parameters. The first two are required, while the second two are optional."
msgstr ""

#: ../../docs/tutorials/content/procedural_geometry/arraymesh.rst:11
msgid ""
"The first is the ``PrimitiveType``, this is an OpenGL concept that instructs "
"the GPU how to arrange the primitive based on the vertices given whether it "
"is triangles, lines, points, etc. A complete list can be found under the :"
"ref:`Mesh <class_mesh>` class reference page."
msgstr ""

#: ../../docs/tutorials/content/procedural_geometry/arraymesh.rst:16
msgid ""
"The second is the actual Array that stores the mesh information. The array "
"is a normal Godot array that is constructed with empty brackets ``[]``. It "
"stores a ``Pool**Array`` (e.g. PoolVector3Array, PoolIntArray, etc.) for "
"each type of information."
msgstr ""

#: ../../docs/tutorials/content/procedural_geometry/arraymesh.rst:20
msgid "``ARRAY_VERTEX`` = 0 | PoolVector3Array or PoolVector2Array"
msgstr ""

#: ../../docs/tutorials/content/procedural_geometry/arraymesh.rst:21
#, fuzzy
msgid "``ARRAY_NORMAL`` = 1 | PoolVector3Array"
msgstr "``PoolVector3Array``"

#: ../../docs/tutorials/content/procedural_geometry/arraymesh.rst:22
msgid ""
"``ARRAY_TANGENT`` = 2 | PoolRealArray of groups of 4 floats. first 3 floats "
"determine the tangent, and the last the binormal direction as -1 or 1."
msgstr ""

#: ../../docs/tutorials/content/procedural_geometry/arraymesh.rst:24
msgid "``ARRAY_COLOR`` = 3 | PoolColorArray"
msgstr ""

#: ../../docs/tutorials/content/procedural_geometry/arraymesh.rst:25
msgid "``ARRAY_TEX_UV`` = 4 | PoolVector2Array or PoolVector3Array"
msgstr ""

#: ../../docs/tutorials/content/procedural_geometry/arraymesh.rst:26
msgid "``ARRAY_TEX_UV2`` = 5 | PoolVector2Array or PoolVector3Array"
msgstr ""

#: ../../docs/tutorials/content/procedural_geometry/arraymesh.rst:27
msgid ""
"``ARRAY_BONES`` = 6 | PoolRealArray of groups of 4 floats or PoolIntArray of "
"groups of 4 ints"
msgstr ""

#: ../../docs/tutorials/content/procedural_geometry/arraymesh.rst:28
msgid "``ARRAY_WEIGHTS`` = 7 | PoolRealArray of groups of 4 floats"
msgstr ""

#: ../../docs/tutorials/content/procedural_geometry/arraymesh.rst:29
msgid "``ARRAY_INDEX`` = 8 | PoolIntArray"
msgstr ""

#: ../../docs/tutorials/content/procedural_geometry/arraymesh.rst:31
msgid ""
"The Array of vertices is always required. All the others are optional and "
"will only be used if included."
msgstr ""

#: ../../docs/tutorials/content/procedural_geometry/arraymesh.rst:33
msgid ""
"Each array needs to have the same number of elements as the vertex array "
"except for the index array. For arrays like tangents, an element is a group "
"of 4 floats. So the array size will be four times the size of the vertex "
"array size, but they will have the same number of elements"
msgstr ""

#: ../../docs/tutorials/content/procedural_geometry/arraymesh.rst:37
msgid "The index array is unique."
msgstr ""

#: ../../docs/tutorials/content/procedural_geometry/arraymesh.rst:39
msgid ""
"The third parameter is an array of blendshapes for the Mesh to use. While "
"this tutorial does not cover using blendshapes, it is possible to specify "
"them when creating a surface from arrays."
msgstr ""

#: ../../docs/tutorials/content/procedural_geometry/arraymesh.rst:42
msgid ""
"The last parameter is the compress flags which specifies which arrays to "
"store with half as many bits. The values can be found in the classref for :"
"ref:`VisualServer <class_visualserver>` under :ref:`ArrayFormat "
"<enum_visualserver_arrayformat>`."
msgstr ""

#: ../../docs/tutorials/content/procedural_geometry/arraymesh.rst:45
msgid ""
"For normal usage you will find it is best to leave the last two parameters "
"empty."
msgstr ""

#: ../../docs/tutorials/content/procedural_geometry/arraymesh.rst:50
msgid ""
"Add an :ref:`ArrayMesh <class_arraymesh>` to a MeshInstance. Normally, "
"adding an ArrayMesh in the editor is not useful, but in this case it allows "
"as to access the ArrayMesh from code without creating one."
msgstr ""

#: ../../docs/tutorials/content/procedural_geometry/arraymesh.rst:54
#, fuzzy
msgid "Next, add a script to the MeshInstance."
msgstr "노드에 스크립트를 추가하기."

#: ../../docs/tutorials/content/procedural_geometry/arraymesh.rst:56
msgid "Under ``_ready()``, create a new Array."
msgstr ""

#: ../../docs/tutorials/content/procedural_geometry/arraymesh.rst:63
msgid ""
"This will be the array that we keep our surface information in, it will hold "
"all the arrays of data that the surface needs. Godot will expect it to be of "
"size ``Mesh.ARRAY_MAX``, so resize it accordingly."
msgstr ""

#: ../../docs/tutorials/content/procedural_geometry/arraymesh.rst:73
msgid "Next create the arrays for each data type you will use."
msgstr ""

#: ../../docs/tutorials/content/procedural_geometry/arraymesh.rst:83
msgid ""
"Once you have filled your data arrays with your geometry you can create a "
"mesh by adding each array to ``surface_array`` and then committing to the "
"mesh."
msgstr ""

#: ../../docs/tutorials/content/procedural_geometry/arraymesh.rst:96
msgid ""
"In this example, we used ``Mesh.PRIMITIVE_TRIANGLES``, but you can use any "
"primitive type available from mesh."
msgstr ""

#: ../../docs/tutorials/content/procedural_geometry/arraymesh.rst:99
msgid "Put together the full code looks like:"
msgstr ""

#: ../../docs/tutorials/content/procedural_geometry/arraymesh.rst:130
msgid ""
"The code that goes in the middle can be whatever you want. Below we will "
"present some example code that could go in the middle."
msgstr ""

#: ../../docs/tutorials/content/procedural_geometry/arraymesh.rst:134
#, fuzzy
msgid "Generating geometry"
msgstr "Keystore 생성하기"

#: ../../docs/tutorials/content/procedural_geometry/arraymesh.rst:136
msgid ""
"Here is sample code for generating a sphere. Although the code is presented "
"in GDScript, there is nothing Godot specific about the approach to "
"generating it. This implementation has nothing in particular to do with "
"ArrayMeshes and is just a generic approach to generating a sphere. If you "
"are having trouble understanding it or want to learn more about procedural "
"geometry in general, you can use any tutorial that you find online."
msgstr ""

#: ../../docs/tutorials/content/procedural_geometry/arraymesh.rst:203
msgid "Combined with the code above, this code will generate a sphere."
msgstr ""

#: ../../docs/tutorials/content/procedural_geometry/arraymesh.rst:205
msgid ""
"When it comes to generating geometry with the ArrayMesh you need to "
"understand what goes in each array and then you can follow tutorials for any "
"language/engine and convert it into Godot."
msgstr ""

#: ../../docs/tutorials/content/procedural_geometry/arraymesh.rst:209
msgid "Saving"
msgstr ""

#: ../../docs/tutorials/content/procedural_geometry/arraymesh.rst:211
msgid ""
"Finally, Godot provides a single method to save ArrayMeshes using the :ref:"
"`ResourceSaver <class_resourcesaver>` class. This is useful when you want to "
"generate a mesh and then use it later without having to re-generate."
msgstr ""

#: ../../docs/tutorials/content/procedural_geometry/meshdatatool.rst:4
#, fuzzy
msgid "Using the MeshDataTool"
msgstr "결과 시험하기"

#: ../../docs/tutorials/content/procedural_geometry/meshdatatool.rst:6
msgid ""
"The MeshDataTool is not used to generate geometry. But it is helpful for "
"dynamically altering geometry, for example if you want to write a script to "
"tessellate, simplify, or deform meshes."
msgstr ""

#: ../../docs/tutorials/content/procedural_geometry/meshdatatool.rst:9
msgid ""
"The MeshDataTool is not as fast as altering arrays directly using ArrayMesh. "
"However, it provides more information and tools to work with meshes than the "
"ArrayMesh does. When the MeshDataTool is used, it calculates mesh data that "
"is not available in ArrayMeshes such as faces and edges, which are necessary "
"for certain mesh algorithms. If you do not need this extra information then "
"it may be better to use an ArrayMesh."
msgstr ""

#: ../../docs/tutorials/content/procedural_geometry/meshdatatool.rst:14
msgid ""
"MeshDataTool can only be used on Meshes that use the PrimitiveType ``Mesh."
"PRIMITIVE_TRIANGLES``."
msgstr ""

#: ../../docs/tutorials/content/procedural_geometry/meshdatatool.rst:16
msgid ""
"As an example, let's walk through the process of deforming the mesh "
"generated in the :ref:`ArrayMesh tutorial <doc_arraymesh>`."
msgstr ""

#: ../../docs/tutorials/content/procedural_geometry/meshdatatool.rst:18
msgid ""
"Assume the mesh is stored in an ArrayMesh named ``mesh``. We then initialize "
"the MeshDataTool from ``mesh`` by calling ``create_from_surface()``. If "
"there is already data initialized in the MeshDataTool calling "
"``create_from_surface()`` will clear it for you. Alternatively, you can call "
"``clear()`` yourself before re-using the MeshDataTool"
msgstr ""

#: ../../docs/tutorials/content/procedural_geometry/meshdatatool.rst:29
msgid ""
"``create_from_surface()`` uses the vertex arrays from the ArrayMesh to "
"calculate two additional arrays, one for edges and one for faces."
msgstr ""

#: ../../docs/tutorials/content/procedural_geometry/meshdatatool.rst:32
msgid ""
"An edge is a connection between any two vertices. Each edge in the edge "
"array contains a reference to the two vertices it is composed of, and up to "
"two faces that it is contained within."
msgstr ""

#: ../../docs/tutorials/content/procedural_geometry/meshdatatool.rst:35
msgid ""
"A face is a triangle made up of three vertices and three corresponding "
"edges. Each face in the face array contains a reference to the three "
"triangles and three edges it is composed of."
msgstr ""

#: ../../docs/tutorials/content/procedural_geometry/meshdatatool.rst:38
msgid ""
"The vertex array contains edges, faces, normals, color, tangent, uv, uv2, "
"bones, and weight information connected with each vertex."
msgstr ""

#: ../../docs/tutorials/content/procedural_geometry/meshdatatool.rst:41
msgid ""
"To access information from these arrays you use a function of the form "
"``get_****()``:"
msgstr ""

#: ../../docs/tutorials/content/procedural_geometry/meshdatatool.rst:51
msgid ""
"What you choose to do with these functions is up to you. A common use case "
"is to iterate over all vertices and transform them in some way:"
msgstr ""

#: ../../docs/tutorials/content/procedural_geometry/meshdatatool.rst:62
msgid ""
"Finally, ``commit_to_surface()`` adds a new surface to the ArrayMesh. So if "
"you are dynamically updating an existing ArrayMesh, first delete the "
"existing surface before adding a new one."
msgstr ""

#: ../../docs/tutorials/content/procedural_geometry/meshdatatool.rst:71
msgid ""
"Below is a complete example that creates a pulsing blob complete with new "
"normals and vertex colors."
msgstr ""

#: ../../docs/tutorials/content/procedural_geometry/surfacetool.rst:4
#, fuzzy
msgid "Using the SurfaceTool"
msgstr "결과 시험하기"

#: ../../docs/tutorials/content/procedural_geometry/surfacetool.rst:6
msgid ""
"The :ref:`SurfaceTool <doc_surfacetool>` provides a useful interface for "
"constructing geometry. The interface is similar to the :ref:"
"`ImmediateGeometry <class_immediategeometry>` node. You set each per-vertex "
"attribute (e.g. normal, uv, color) and then when you add a vertex it "
"captures the attributes."
msgstr ""

#: ../../docs/tutorials/content/procedural_geometry/surfacetool.rst:11
msgid ""
"The SurfaceTool also provides some useful helper functions like ``index()`` "
"and ``generate_normals()``."
msgstr ""

#: ../../docs/tutorials/content/procedural_geometry/surfacetool.rst:13
msgid "Attributes are added before each vertex is added:"
msgstr ""

#: ../../docs/tutorials/content/procedural_geometry/surfacetool.rst:24
msgid ""
"When finished generating your geometry with the :ref:`SurfaceTool "
"<class_surfacetool>` call ``commit()`` to finished generating the mesh. If "
"an :ref:`ArrayMesh <class_ArrayMesh>` is passed to ``commit()`` then it "
"appends a new surface to the end of the ArrayMesh. While if nothing is "
"passed in, ``commit()`` returns an ArrayMesh."
msgstr ""

#: ../../docs/tutorials/content/procedural_geometry/surfacetool.rst:36
msgid "Code creates a triangle with indices"
msgstr ""

#: ../../docs/tutorials/content/procedural_geometry/surfacetool.rst:62
msgid ""
"You can optionally add an index array, either by calling ``add_index()`` and "
"adding vertices to the index array or by calling ``index()`` which shrinks "
"the vertex array to remove duplicate vertices."
msgstr ""

#: ../../docs/tutorials/content/procedural_geometry/surfacetool.rst:82
msgid ""
"Similarly, if you have an index array, but you want each vertex to be unique "
"(e.g. because you want to use unique normals or colors per face instead of "
"per-vertex), you can call ``deindex()``."
msgstr ""

#: ../../docs/tutorials/content/procedural_geometry/surfacetool.rst:90
msgid ""
"If you don't add custom normals yourself, you can add them using "
"``generate_normals()``. The same goes for tangents."
msgstr ""

#: ../../docs/tutorials/content/procedural_geometry/surfacetool.rst:98
msgid ""
"By default, when generating normals, they will be calculated on a per-face "
"basis. If you want smooth vertex normals, when adding vertices, call "
"``add_smooth_group()``. ``add_smooth_group()`` needs to be called while "
"building the geometry, e.g. before the call to ``add_vertex()`` (if non-"
"indexed) or ``add_index()`` (if indexed)."
msgstr ""

#: ../../docs/tutorials/content/procedural_geometry/immediategeometry.rst:4
#, fuzzy
msgid "Using ImmediateGeometry"
msgstr "즉각적인 지오메트리(Immediate geometry)"

#: ../../docs/tutorials/content/procedural_geometry/immediategeometry.rst:6
msgid ""
"Unlike the SurfaceTool or ArrayMesh, :ref:`ImmediateGeometry "
"<class_ImmediateGeometry>` is an actual node. Being an node makes it quick "
"to add to a scene and get visual output. It uses an \"OpenGL 1.x\" style API "
"like the SurfaceTool, but it's actually designed to create content on the "
"fly."
msgstr ""

#: ../../docs/tutorials/content/procedural_geometry/immediategeometry.rst:10
msgid ""
"Generating complex geometry (several thousand vertices) with this node is "
"inefficient, even if it's done only once. Instead, it is designed to "
"generate simple geometry that changes every frame."
msgstr ""

#: ../../docs/tutorials/content/procedural_geometry/immediategeometry.rst:13
msgid ""
"Before starting, you should clear the geometry by calling ``clear()``. This "
"ensures that you are not building upon the geometry from the previous frame. "
"If you want to keep geometry between frames, do not call ``clear()``."
msgstr ""

#: ../../docs/tutorials/content/procedural_geometry/immediategeometry.rst:17
msgid ""
"To begin generating geometry you must call ``begin()``. ``begin()`` takes a "
"``PrimitiveType`` as an argument. ``PrimitiveType`` is an OpenGL concept "
"that instructs the GPU how to arrange the primitive based on the vertices "
"given whether it is triangles, lines, points, etc. A complete list can be "
"found under the :ref:`Mesh <class_mesh>` class reference page."
msgstr ""

#: ../../docs/tutorials/content/procedural_geometry/immediategeometry.rst:22
msgid ""
"Once you have called ``begin()`` you are ready to start adding vertices. You "
"add vertices one at a time. First you add vertex specific attributes such as "
"normals or UVs using ``set_****()`` (e.g. ``set_normal()``). Then you call "
"``add_vertex()`` to add a vertex with those attributes. For example:"
msgstr ""

#: ../../docs/tutorials/content/procedural_geometry/immediategeometry.rst:34
msgid ""
"Only attributes added before the call to ``add_vertex()`` will be included "
"in that vertex."
msgstr ""

#: ../../docs/tutorials/content/procedural_geometry/immediategeometry.rst:36
msgid ""
"Finally, once you have added all your vertices call ``end()`` to signal that "
"you have finished generating the mesh."
msgstr ""

#: ../../docs/tutorials/content/procedural_geometry/immediategeometry.rst:38
#, fuzzy
msgid "The example code below draws a single triangle."
msgstr "어떻게 작동하는 지의 예제입니다:"

#: ../../docs/tutorials/content/making_trees.rst:4
msgid "Making trees"
msgstr ""

#: ../../docs/tutorials/content/making_trees.rst:6
msgid ""
"This is a short tutorial on how to make trees and other types of vegetation "
"from scratch."
msgstr ""

#: ../../docs/tutorials/content/making_trees.rst:8
msgid ""
"The aim is to not focus on the modelling techniques (there are plenty of "
"tutorials about that), but how to make them look good in Godot."
msgstr ""

#: ../../docs/tutorials/content/making_trees.rst:13
msgid "Start with a tree"
msgstr ""

#: ../../docs/tutorials/content/making_trees.rst:15
msgid "I took this tree from SketchFab:"
msgstr ""

#: ../../docs/tutorials/content/making_trees.rst:19
msgid "https://sketchfab.com/models/ea5e6ed7f9d6445ba69589d503e8cebf"
msgstr ""

#: ../../docs/tutorials/content/making_trees.rst:21
msgid "and opened it in Blender."
msgstr ""

#: ../../docs/tutorials/content/making_trees.rst:24
msgid "Paint with vertex colors"
msgstr ""

#: ../../docs/tutorials/content/making_trees.rst:26
msgid ""
"The first thing you may want to do is to use the vertex colors to paint how "
"much the tree will sway when there is wind. Just use the vertex color "
"painting tool of your favorite 3D modelling program and paint something like "
"this:"
msgstr ""

#: ../../docs/tutorials/content/making_trees.rst:30
msgid ""
"This is a bit exaggerated, but the idea is that color indicates how much "
"sway affects every part of the tree. This scale here represents it better:"
msgstr ""

#: ../../docs/tutorials/content/making_trees.rst:35
msgid "Write a custom shader for the leaves"
msgstr ""

#: ../../docs/tutorials/content/making_trees.rst:37
msgid "This is a simple example of a shader for leaves:"
msgstr ""

#: ../../docs/tutorials/content/making_trees.rst:44
msgid ""
"This is a spatial shader. There is no front/back culling (so leaves can be "
"seen from both sides), and alpha prepass is used, so there are less depth "
"artifacts that result from using transparency (and leaves cast shadow). "
"Finally, for the sway effect, world coordinates are recommended, so the tree "
"can be duplicated, moved, etc. and it will still work together with other "
"trees."
msgstr ""

#: ../../docs/tutorials/content/making_trees.rst:51
msgid ""
"Here, the texture is read, as well as a transmission color, which is used to "
"add some back-lighting to the leaves, simulating subsurface scattering."
msgstr ""

#: ../../docs/tutorials/content/making_trees.rst:67
msgid ""
"This is the code to create the sway of the leaves. It's basic (just uses a "
"sinewave multiplying by the time and axis position, but works well). Notice "
"that the strength is multiplied by the color. Every axis uses a different "
"small near 1.0 multiplication factor so axes don't appear in sync."
msgstr ""

#: ../../docs/tutorials/content/making_trees.rst:70
msgid "Finally all that is left is the fragment shader:"
msgstr ""

#: ../../docs/tutorials/content/making_trees.rst:83
msgid "And this is pretty much it."
msgstr ""

#: ../../docs/tutorials/content/making_trees.rst:85
msgid ""
"The trunk shader is similar, except it does not write to the alpha channel "
"(thus no alpha prepass is needed) and does not require transmission to work. "
"Both shaders can be improved by adding normal mapping, AO and other maps."
msgstr ""

#: ../../docs/tutorials/content/making_trees.rst:88
msgid "Improving the shader"
msgstr "셰이더 개선하기"

#: ../../docs/tutorials/content/making_trees.rst:90
msgid ""
"There are many more resources on how to do this that you can read. Now that "
"you know the basics, a recommended read is the chapter from GPU Gems3 about "
"how Crysis does this (focus mostly on the sway code, as many other "
"techniques shown there are obsolete):"
msgstr ""

#: ../../docs/tutorials/content/making_trees.rst:93
msgid "https://developer.nvidia.com/gpugems/GPUGems3/gpugems3_ch16.html"
msgstr ""

#: ../../docs/tutorials/optimization/using_servers.rst:4
msgid "Optimization using Servers"
msgstr ""

#: ../../docs/tutorials/optimization/using_servers.rst:6
msgid ""
"Engines like Godot provide increased ease of use thanks to their high level "
"constructs and features. Most of them are accessed and used via the :ref:"
"`Scene System<doc_scene_tree>`. Using nodes and resources simplifies project "
"organization and asset management in complex games."
msgstr ""

#: ../../docs/tutorials/optimization/using_servers.rst:10
msgid "There are, of course, always drawbacks:"
msgstr ""

#: ../../docs/tutorials/optimization/using_servers.rst:12
msgid "There is an extra layer of complexity"
msgstr ""

#: ../../docs/tutorials/optimization/using_servers.rst:13
msgid "Performance is lower than using simple APIs directly"
msgstr ""

#: ../../docs/tutorials/optimization/using_servers.rst:14
msgid "It is not possible to use multiple threads to control them"
msgstr ""

#: ../../docs/tutorials/optimization/using_servers.rst:15
msgid "More memory is needed."
msgstr ""

#: ../../docs/tutorials/optimization/using_servers.rst:17
msgid ""
"In many cases, this is not really a problem (Godot is very optimized, and "
"most operations are handled with signals, so no polling is required). Still, "
"sometimes it can be. For example, dealing with tens of thousands of "
"instances for something that needs to be processed every frame can be a "
"bottleneck."
msgstr ""

#: ../../docs/tutorials/optimization/using_servers.rst:21
msgid ""
"This type of situation makes programmers regret they are using a game engine "
"and wish they could go back to a more handcrafted, low level implementation "
"of game code."
msgstr ""

#: ../../docs/tutorials/optimization/using_servers.rst:24
msgid "Still, Godot is designed to work around this problem."
msgstr ""

#: ../../docs/tutorials/optimization/using_servers.rst:27
#, fuzzy
msgid "Servers"
msgstr "**Server**"

#: ../../docs/tutorials/optimization/using_servers.rst:29
msgid ""
"One of the most interesting design decisions for Godot, is the fact that the "
"whole scene system is *optional*. While it is not currently possible to "
"compile it out, it can be completely bypassed."
msgstr ""

#: ../../docs/tutorials/optimization/using_servers.rst:32
msgid ""
"At the core, Godot uses the concept of Servers. They are very low level APIs "
"to control rendering, physics, sound, etc. The scene system is built on top "
"of them and uses them directly. The most common servers are:"
msgstr ""

#: ../../docs/tutorials/optimization/using_servers.rst:36
msgid ""
":ref:`VisualServer <class_VisualServer>`: handles everything related to "
"graphics."
msgstr ""

#: ../../docs/tutorials/optimization/using_servers.rst:37
msgid ""
":ref:`PhysicsServer <class_PhysicsServer>`: handles everything related to 3D "
"physics."
msgstr ""

#: ../../docs/tutorials/optimization/using_servers.rst:38
msgid ""
":ref:`Physics2DServer <class_Physics2DServer>`: handles everything related "
"to 2D physics."
msgstr ""

#: ../../docs/tutorials/optimization/using_servers.rst:39
msgid ""
":ref:`AudioServer <class_AudioServer>`: handles everything related to audio."
msgstr ""

#: ../../docs/tutorials/optimization/using_servers.rst:41
msgid ""
"Just explore their APIs and you will realize that the all functions provided "
"are low-level implementations of everything Godot allows you to do."
msgstr ""

#: ../../docs/tutorials/optimization/using_servers.rst:45
msgid "RIDs"
msgstr ""

#: ../../docs/tutorials/optimization/using_servers.rst:47
msgid ""
"The key to using servers is understanding Resource ID (:ref:`RID "
"<class_RID>`) objects. These are opaque handles to the server "
"implementation. They are allocated and freed manually. Almost every function "
"in the servers requires RIDs to access the actual resource."
msgstr ""

#: ../../docs/tutorials/optimization/using_servers.rst:51
msgid ""
"Most Godot nodes and resources contain these RIDs from the servers "
"internally, and they can be obtained with different functions. In fact, "
"anything that inherits :ref:`Resource <class_Resource>` can be directly "
"casted to an RID (not all resources contain an RID, though, in such cases "
"the RID will be empty). In fact, resources can be passed to server APIs as "
"RIDs. Just make sure to keep references to the resources outside the server, "
"because if the resource is erased, the internal RID is erased too."
msgstr ""

#: ../../docs/tutorials/optimization/using_servers.rst:58
msgid "For nodes, there are many functions available:"
msgstr ""

#: ../../docs/tutorials/optimization/using_servers.rst:60
msgid ""
"For CanvasItem, the :ref:`CanvasItem.get_canvas_item() "
"<class_CanvasItem_method_get_canvas_item>` method will return the canvas "
"item RID in the server."
msgstr ""

#: ../../docs/tutorials/optimization/using_servers.rst:62
msgid ""
"For CanvasLayer, the :ref:`CanvasLayer.get_canvas() "
"<class_CanvasLayer_method_get_canvas>` method will return the canvas RID in "
"the server."
msgstr ""

#: ../../docs/tutorials/optimization/using_servers.rst:64
msgid ""
"For Viewport, the :ref:`Viewport.get_viewport_rid() "
"<class_Viewport_method_get_viewport_rid>` method will return the viewport "
"RID in the server."
msgstr ""

#: ../../docs/tutorials/optimization/using_servers.rst:66
msgid ""
"For 3D, the :ref:`World <class_World>` resource (obtainable in the :ref:"
"`Viewport <class_Viewport>` and :ref:`Spatial <class_Spatial>` nodes) "
"contains functions to get the *VisualServer Scenario*, and the "
"*PhysicsServer Space*. This allows creating 3D objects directly with the "
"server API and using them."
msgstr ""

#: ../../docs/tutorials/optimization/using_servers.rst:70
msgid ""
"For 2D, the :ref:`World2D <class_World2D>` resource (obtainable in the :ref:"
"`Viewport <class_Viewport>` and :ref:`CanvasItem <class_CanvasItem>` nodes) "
"contains functions to get the *VisualServer Canvas*, and the "
"*Physics2DServer Space*. This allows creating 2D objects directly with the "
"server API and using them."
msgstr ""

#: ../../docs/tutorials/optimization/using_servers.rst:74
msgid ""
"The :ref:`VisualInstance<class_VisualInstance>` class, allows getting the "
"scenario *instance* and *instance base* via the :ref:`VisualInstance."
"get_instance() <class_VisualInstance_method_get_instance>` and :ref:"
"`VisualInstance.get_base() <class_VisualInstance_method_get_base>` "
"respectively."
msgstr ""

#: ../../docs/tutorials/optimization/using_servers.rst:78
msgid ""
"Just explore the nodes and resources you are familiar with and find the "
"functions to obtain the server *RIDs*."
msgstr ""

#: ../../docs/tutorials/optimization/using_servers.rst:80
msgid ""
"It is not advised to control RIDs from objects that already have a node "
"associated. Instead, server functions should always be used for creating and "
"controlling new ones and interacting with the existing ones."
msgstr ""

#: ../../docs/tutorials/optimization/using_servers.rst:84
#, fuzzy
msgid "Creating a sprite"
msgstr "스크립트 생성하기"

#: ../../docs/tutorials/optimization/using_servers.rst:86
msgid ""
"This is a simple example of how to create a sprite from code and move it "
"using the low-level :ref:`CanvasItem <class_CanvasItem>` API."
msgstr ""

#: ../../docs/tutorials/optimization/using_servers.rst:111
msgid ""
"The Canvas Item API in the server allows you to add draw primitives to it. "
"Once added, they can't be modified. The Item needs to be cleared and the "
"primitives re-added (this is not the case for setting the transform, which "
"can be done as many times as desired)."
msgstr ""

#: ../../docs/tutorials/optimization/using_servers.rst:115
msgid "Primitives are cleared this way:"
msgstr ""

#: ../../docs/tutorials/optimization/using_servers.rst:124
msgid "Instantiating a Mesh into 3D space"
msgstr ""

#: ../../docs/tutorials/optimization/using_servers.rst:126
msgid ""
"The 3D APIs are different than the 2D ones, so the instantiation API must be "
"used."
msgstr ""

#: ../../docs/tutorials/optimization/using_servers.rst:152
msgid "Creating a 2D RigidBody and moving a sprite with it"
msgstr ""

#: ../../docs/tutorials/optimization/using_servers.rst:154
#, fuzzy
msgid ""
"This creates a :ref:`RigidBody2D <class_RigidBody2D>` using the :ref:"
"`Physics2DServer <class_Physics2DServer>` API, and moves a :ref:`CanvasItem "
"<class_CanvasItem>` when the body moves."
msgstr ""
"결과적인 공간 :ref:`RID <class_RID>`는 3D 및 2D에 대해 각각 :ref:"
"`PhysicsServer <class_PhysicsServer>` 및 :ref:`Physics2DServer "
"<class_Physics2DServer>` 에서 사용할 수 있습니다."

#: ../../docs/tutorials/optimization/using_servers.rst:186
msgid ""
"The 3D version should be very similar, as 2D and 3D physics servers are "
"identical (using :ref:`RigidBody <class_RigidBody>` and :ref:`PhysicsServer "
"<class_PhysicsServer>` respectively)."
msgstr ""

#: ../../docs/tutorials/optimization/using_servers.rst:190
#, fuzzy
msgid "Getting data from the servers"
msgstr "Godot 서버 만들기"

#: ../../docs/tutorials/optimization/using_servers.rst:192
msgid ""
"Try to **never** request any information from ``VisualServer``, "
"``PhysicsServer`` or ``Physics2DServer`` by calling functions unless you "
"know what you are doing. These servers will often run asynchronously for "
"performance and calling any function that returns a value will stall them "
"and force them to process anything pending until the function is actually "
"called. This will severely decrease performance if you call them every frame "
"(and it won't be obvious why)."
msgstr ""

#: ../../docs/tutorials/optimization/using_servers.rst:198
msgid ""
"Because of this, most APIs in such servers are designed so it's not even "
"possible to request information back, until it's actual data that can be "
"saved."
msgstr ""

#: ../../docs/tutorials/optimization/using_multimesh.rst:4
msgid "Optimization using MultiMeshes"
msgstr ""

#: ../../docs/tutorials/optimization/using_multimesh.rst:6
msgid ""
"For large amount of instances (in the thousands), that need to be constantly "
"processed (and certain amount of control needs to be retained), :ref:`using "
"servers directly <doc_using_servers>` is the recommended optimization."
msgstr ""

#: ../../docs/tutorials/optimization/using_multimesh.rst:10
msgid ""
"When the amount of objects reach the hundreds of thousands or millions, none "
"of these approaches are efficient anymore. Still, depending on the "
"requirements, there is one more optimization possible."
msgstr ""

#: ../../docs/tutorials/optimization/using_multimesh.rst:15
#, fuzzy
msgid "MultiMeshes"
msgstr "MultiMesh 설정"

#: ../../docs/tutorials/optimization/using_multimesh.rst:17
msgid ""
"A :ref:`MultiMesh<class_MultiMesh>` is a single draw primitive that can draw "
"up to millions of objects in one go. It's extremely efficient because it "
"uses the GPU hardware to do this (in OpenGL ES 2.0, it's less efficient "
"because there is no hardware support for it, though)."
msgstr ""

#: ../../docs/tutorials/optimization/using_multimesh.rst:21
msgid ""
"The only drawback is that there is no *screen* or *frustum* culling possible "
"for individual instances. This means, that millions of objects will be "
"*always* or *never* drawn, depending on the visibility of the whole "
"MultiMesh. It is possible to provide a custom visibility rect for them, but "
"it will always be *all-or-none* visibility."
msgstr ""

#: ../../docs/tutorials/optimization/using_multimesh.rst:26
msgid ""
"If the objects are simple enough (just a couple of vertices), this is "
"generally not much of a problem as most modern GPUs are optimized for this "
"use case. A workaround is to create several MultiMeshes for different areas "
"of the world."
msgstr ""

#: ../../docs/tutorials/optimization/using_multimesh.rst:30
msgid ""
"It is also possible to execute some logic inside the vertex shader (using "
"the ``INSTANCE_ID`` or ``INSTANCE_CUSTOM`` built-in constants). For an "
"example of animating thousands of objects in a MultiMesh, see the :ref:"
"`Animating thousands of fish <doc_animating_thousands_of_fish>` tutorial. "
"Information to the shader can be provided via textures (there are floating "
"point :ref:`Image<class_Image>` formats which are ideal for this)."
msgstr ""

#: ../../docs/tutorials/optimization/using_multimesh.rst:36
msgid ""
"Another alternative is to use GDNative and C++, which should be extremely "
"efficient (it's possible to set the entire state for all objects using "
"linear memory via the :ref:`VisualServer.multimesh_set_as_bulk_array() "
"<class_VisualServer_method_multimesh_set_as_bulk_array>` function). This "
"way, the array can be created with multiple threads, then set in one call, "
"providing high cache efficiency."
msgstr ""

#: ../../docs/tutorials/optimization/using_multimesh.rst:42
msgid ""
"Finally, it's not required to have all MultiMesh instances visible. The "
"amount of visible ones can be controlled with the :ref:`MultiMesh."
"visible_instance_count <class_MultiMesh_property_visible_instance_count>` "
"property. The typical workflow is to allocate the maximum amount of "
"instances that will be used, then change the amount visible depending on how "
"many are currently needed."
msgstr ""

#: ../../docs/tutorials/optimization/using_multimesh.rst:48
#, fuzzy
msgid "Multimesh example"
msgstr "타이머(Timer) 예제"

#: ../../docs/tutorials/optimization/using_multimesh.rst:50
msgid ""
"Here is an example of using a MultiMesh from code. Languages other than "
"GDScript may be more efficient for millions of objects, but for a few "
"thousands, GDScript should be fine."
msgstr ""

#: ../../docs/tutorials/misc/jitter_stutter.rst:4
msgid "Fixing jitter and stutter"
msgstr ""

#: ../../docs/tutorials/misc/jitter_stutter.rst:7
msgid "What are jitter and stutter?"
msgstr ""

#: ../../docs/tutorials/misc/jitter_stutter.rst:9
msgid ""
"*Jitter* and *stutter* are two different alterations to visible motion of "
"objects on screen that may affect a game, even when running at full speed. "
"These effects are mostly visible in games where the world moves at a "
"constant speed in a fixed direction, like runners or platformers."
msgstr ""

#: ../../docs/tutorials/misc/jitter_stutter.rst:14
msgid "Distinguishing between them"
msgstr ""

#: ../../docs/tutorials/misc/jitter_stutter.rst:16
msgid ""
"A game running at a normal framerate without exhibiting any effect will "
"appear smooth:"
msgstr ""

#: ../../docs/tutorials/misc/jitter_stutter.rst:20
msgid "A game exhibiting *jitter* will shake constantly in a very subtle way:"
msgstr ""

#: ../../docs/tutorials/misc/jitter_stutter.rst:24
msgid ""
"Finally, a game exhibiting *stutter* will appear smooth, but appear to "
"*stop* or *roll back a frame* every few seconds:"
msgstr ""

#: ../../docs/tutorials/misc/jitter_stutter.rst:30
msgid "Jitter"
msgstr ""

#: ../../docs/tutorials/misc/jitter_stutter.rst:32
msgid ""
"There can be many causes of jitter, the most typical one happens when the "
"game *physics frequency* (usually 60 Hz) runs at a different resolution than "
"the monitor refresh rate. Check whether your monitor refresh rate is "
"different from 60 Hz."
msgstr ""

#: ../../docs/tutorials/misc/jitter_stutter.rst:35
msgid ""
"This is generally not a problem, given that refresh rates higher than 60 Hz "
"are barely visible to the human eye, and starting with Godot 3.1, a frame "
"timer was introduced that tries to synchronize with refresh as best as "
"possible."
msgstr ""

#: ../../docs/tutorials/misc/jitter_stutter.rst:38
msgid ""
"Sometimes only some objects appear to jitter (character or background). This "
"happens when they are processed in different time sources (one is processed "
"in the physics step while another is processed in the idle step). Godot 3.1 "
"does some improvements to this, from allowing kinematic bodies to be "
"animated in the regular _process loop, to further fixes in the frame timer."
msgstr ""

#: ../../docs/tutorials/misc/jitter_stutter.rst:44
msgid "Stutter"
msgstr ""

#: ../../docs/tutorials/misc/jitter_stutter.rst:46
msgid ""
"Stutter may happen due to two different reasons. The first, and most obvious "
"one, is the game not being able to keep full framerate performance. Solving "
"this is game specific and will require optimization."
msgstr ""

#: ../../docs/tutorials/misc/jitter_stutter.rst:49
msgid ""
"The second is more complicated, because it is often not associated to the "
"engine or game but the underlying operating system. Here is some information "
"regarding stutter on different OSs."
msgstr ""

#: ../../docs/tutorials/misc/jitter_stutter.rst:55
msgid ""
"Windows is known to cause stutter in windowed games. This mostly depends on "
"the hardware installed, drivers version and processes running in parallel (e."
"g. having many browser tabs open may cause stutter in a running game). To "
"avoid this, starting with 3.1, Godot raises the game priority to \"Above "
"Normal\". This helps considerably but may not completely eliminate stutter."
msgstr ""

#: ../../docs/tutorials/misc/jitter_stutter.rst:60
msgid ""
"Eliminating this completely requires giving your game full privileges to "
"become \"time critical\", which is not advised. Some games may do it, but it "
"is advised to learn to live with this problem, as it is common for Windows "
"games and most users won't play games windowed (games that are played in a "
"window, e.g. puzzle games, will usually not exhibit this problem anyway)."
msgstr ""

#: ../../docs/tutorials/misc/jitter_stutter.rst:64
msgid ""
"For fullscreen, Windows gives special priority to the game so stutter is no "
"longer visible and very rare. This is how most games are played."
msgstr ""

#: ../../docs/tutorials/misc/jitter_stutter.rst:68
msgid "Linux (X11)"
msgstr ""

#: ../../docs/tutorials/misc/jitter_stutter.rst:70
msgid ""
"Stutter may be visible on Desktop Linux, but this is usually associated with "
"different video drivers and compositors. Nouveau drivers often exhibit this, "
"while AMD or NVidia proprietary don't. Some compositors may also trigger "
"this problem (e.g. KWin), so it is advised to try using a different one to "
"rule it out as the cause."
msgstr ""

#: ../../docs/tutorials/misc/jitter_stutter.rst:74
msgid ""
"There is no workaround for driver or compositor stuttering other than "
"reporting it as an issue to the driver or compositor developers."
msgstr ""

#: ../../docs/tutorials/misc/jitter_stutter.rst:80
msgid ""
"Generally, macOS is stutter-free, although recently some bugs were reported "
"when running on fullscreen (this is a macOS bug). If you have a machine "
"exhibiting this behavior, please let us know."
msgstr ""

#: ../../docs/tutorials/misc/jitter_stutter.rst:86
msgid ""
"Generally, Android is stutter and jitter-free because the running activity "
"gets all the priority. That said, there may be problematic devices (older "
"Kindle Fire is known to be one). If you see this problem on Android, please "
"let us know."
msgstr ""

#: ../../docs/tutorials/misc/jitter_stutter.rst:92
msgid ""
"iOS devices are generally stutter-free, but older devices running newer "
"versions of the operating system may exhibit problems. This is generally "
"unavoidable."
msgstr ""

#: ../../docs/tutorials/misc/jitter_stutter.rst:96
msgid "Reporting stutter or jitter problems"
msgstr ""

#: ../../docs/tutorials/misc/jitter_stutter.rst:98
msgid ""
"If you are reporting a stutter or jitter problem (opening an issue) not "
"caused by any of the above reasons, please specify very clearly all the "
"information possible about device, operating system, driver versions, etc. "
"This may help to better troubleshoot it."
msgstr ""

#: ../../docs/tutorials/misc/jitter_stutter.rst:101
msgid ""
"Also make sure to use the correct term (jitter or stutter) based on the "
"exhibited behavior. This will help understand your issue much faster. "
"Provide a project that can be used to reproduce the issue, and if possible a "
"screen capture demonstrating the bug."
msgstr ""

#: ../../docs/tutorials/misc/handling_quit_requests.rst:4
msgid "Handling quit requests"
msgstr ""

#: ../../docs/tutorials/misc/handling_quit_requests.rst:7
msgid "Quitting"
msgstr ""

#: ../../docs/tutorials/misc/handling_quit_requests.rst:9
msgid ""
"Most platforms have the option to request the application to quit. On "
"desktops, this is usually done with the \"x\" icon on the window title bar. "
"On Android, the back button is used to quit when on the main screen (and to "
"go back otherwise)."
msgstr ""

#: ../../docs/tutorials/misc/handling_quit_requests.rst:15
msgid "Handling the notification"
msgstr ""

#: ../../docs/tutorials/misc/handling_quit_requests.rst:17
msgid ""
"On desktop platforms, the :ref:`MainLoop <class_MainLoop>` has a special "
"``MainLoop.NOTIFICATION_WM_QUIT_REQUEST`` notification that is sent to all "
"nodes when quitting is requested."
msgstr ""

#: ../../docs/tutorials/misc/handling_quit_requests.rst:21
msgid ""
"On Android, ``MainLoop.NOTIFICATION_WM_GO_BACK_REQUEST`` is sent instead. "
"Pressing the Back button will exit the application if **Application > Config "
"> Quit On Go Back** is checked in the Project Settings (which is the "
"default)."
msgstr ""

#: ../../docs/tutorials/misc/handling_quit_requests.rst:28
msgid ""
"``MainLoop.NOTIFICATION_WM_GO_BACK_REQUEST`` isn't supported on iOS, as iOS "
"devices don't have a physical Back button."
msgstr ""

#: ../../docs/tutorials/misc/handling_quit_requests.rst:31
msgid "Handling the notification is done as follows (on any node):"
msgstr ""

#: ../../docs/tutorials/misc/handling_quit_requests.rst:48
msgid ""
"When developing mobile apps, quitting is not desired unless the user is on "
"the main screen, so the behavior can be changed."
msgstr ""

#: ../../docs/tutorials/misc/handling_quit_requests.rst:51
msgid ""
"It is important to note that by default, Godot apps have the built-in "
"behavior to quit when quit is requested, this can be changed:"
msgstr ""

#: ../../docs/tutorials/misc/pausing_games.rst:4
msgid "Pausing games"
msgstr ""

#: ../../docs/tutorials/misc/pausing_games.rst:7
msgid "Pause?"
msgstr ""

#: ../../docs/tutorials/misc/pausing_games.rst:9
msgid ""
"In most games it is desirable to, at some point, interrupt the game to do "
"something else, such as taking a break or changing options. However this is "
"not as simple as it seems. The game might be stopped, but it might be "
"desirable that some menus and animations continue working."
msgstr ""

#: ../../docs/tutorials/misc/pausing_games.rst:15
msgid ""
"Implementing a fine-grained control for what can be paused (and what can "
"not) is a lot of work, so a simple framework for pausing is provided in "
"Godot."
msgstr ""

#: ../../docs/tutorials/misc/pausing_games.rst:20
msgid "How pausing works"
msgstr ""

#: ../../docs/tutorials/misc/pausing_games.rst:22
msgid ""
"To set pause mode, the pause state must be set. This is done by assigning "
"``true`` to the :ref:`SceneTree.paused <class_SceneTree_property_paused>` "
"property:"
msgstr ""

#: ../../docs/tutorials/misc/pausing_games.rst:34
msgid "Doing so will have the following behavior:"
msgstr ""

#: ../../docs/tutorials/misc/pausing_games.rst:36
msgid "2D and 3D physics will be stopped."
msgstr ""

#: ../../docs/tutorials/misc/pausing_games.rst:37
msgid ""
"``_process`` and ``_physics_process`` will not be called anymore in nodes."
msgstr ""

#: ../../docs/tutorials/misc/pausing_games.rst:38
msgid "``_input`` and ``_input_event`` will not be called anymore either."
msgstr ""

#: ../../docs/tutorials/misc/pausing_games.rst:40
msgid ""
"This effectively stops the whole game. Calling this function from a script, "
"by default, will result in an unrecoverable state (nothing will work "
"anymore!)."
msgstr ""

#: ../../docs/tutorials/misc/pausing_games.rst:45
msgid "White-listing nodes"
msgstr ""

#: ../../docs/tutorials/misc/pausing_games.rst:47
msgid ""
"Before enabling pause, make sure that nodes that must keep working during "
"pause are white-listed. This is done by editing the \"Pause Mode\" property "
"in a node:"
msgstr ""

#: ../../docs/tutorials/misc/pausing_games.rst:53
msgid "You can achieve the same result in code:"
msgstr ""

#: ../../docs/tutorials/misc/pausing_games.rst:62
msgid ""
"By default all nodes have this property in the \"Inherit\" state. This "
"means, that they will only process (or not) depending on what this same "
"property is set on the parent node. If the parent is set to \"Inherit\" , "
"then the grandparent will be checked and so on. Ultimately, if a state can't "
"be found in any of the grandparents, the pause state in SceneTree is used. "
"This means that, by default, when the game is paused every node will be "
"paused."
msgstr ""

#: ../../docs/tutorials/misc/pausing_games.rst:70
msgid "So the three possible states for a node are:"
msgstr ""

#: ../../docs/tutorials/misc/pausing_games.rst:72
msgid ""
"**Inherit**: Process depending on the state of the parent, grandparent, etc. "
"The first parent that has a non-Inherit state."
msgstr ""

#: ../../docs/tutorials/misc/pausing_games.rst:74
msgid ""
"**Stop**: Stop the node no matter what (and children in Inherit mode). When "
"paused this node will not process."
msgstr ""

#: ../../docs/tutorials/misc/pausing_games.rst:76
msgid ""
"**Process**: Process the node no matter what (and children in Inherit mode). "
"Paused or not this node will process."
msgstr ""

#: ../../docs/tutorials/misc/pausing_games.rst:82
msgid ""
"An example of this is creating a popup or panel with controls inside, and "
"set its pause mode to \"Process\" then hide it:"
msgstr ""

#: ../../docs/tutorials/misc/pausing_games.rst:87
msgid ""
"Just by setting the root of the pause popup to \"Process\", all children and "
"grandchildren will inherit that state. This way, this branch of the scene "
"tree will continue working when paused."
msgstr ""

#: ../../docs/tutorials/misc/pausing_games.rst:91
msgid ""
"Finally, make it so when a pause button is pressed (any button will do), "
"enable the pause and show the pause screen."
msgstr ""

#: ../../docs/tutorials/misc/pausing_games.rst:109
msgid "To remove the pause, do the opposite when the pause screen is closed:"
msgstr ""

#: ../../docs/tutorials/misc/pausing_games.rst:127
msgid "And that should be all!"
msgstr ""

#: ../../docs/tutorials/misc/binary_serialization_api.rst:4
msgid "Binary serialization API"
msgstr ""

#: ../../docs/tutorials/misc/binary_serialization_api.rst:9
msgid ""
"Godot has a simple serialization API based on Variant. It's used for "
"converting data types to an array of bytes efficiently. This API is used in "
"the functions ``get_var`` and ``store_var`` of :ref:`class_File` as well as "
"the packet APIs for :ref:`class_PacketPeer`. This format is not used for "
"binary scenes and resources."
msgstr ""

#: ../../docs/tutorials/misc/binary_serialization_api.rst:16
msgid "Packet specification"
msgstr ""

#: ../../docs/tutorials/misc/binary_serialization_api.rst:18
msgid ""
"The packet is designed to be always padded to 4 bytes. All values are little "
"endian encoded. All packets have a 4 byte header representing an integer, "
"specifying the type of data:"
msgstr ""

#: ../../docs/tutorials/misc/binary_serialization_api.rst:23
msgid "Value"
msgstr "값"

#: ../../docs/tutorials/misc/binary_serialization_api.rst:25
msgid "0"
msgstr ""

#: ../../docs/tutorials/misc/binary_serialization_api.rst:27
#: ../../docs/tutorials/misc/binary_serialization_api.rst:387
msgid "1"
msgstr ""

#: ../../docs/tutorials/misc/binary_serialization_api.rst:29
msgid "integer"
msgstr ""

#: ../../docs/tutorials/misc/binary_serialization_api.rst:35
msgid "vector2"
msgstr ""

#: ../../docs/tutorials/misc/binary_serialization_api.rst:37
msgid "rect2"
msgstr ""

#: ../../docs/tutorials/misc/binary_serialization_api.rst:39
msgid "vector3"
msgstr ""

#: ../../docs/tutorials/misc/binary_serialization_api.rst:41
msgid "transform2d"
msgstr ""

#: ../../docs/tutorials/misc/binary_serialization_api.rst:43
msgid "plane"
msgstr ""

#: ../../docs/tutorials/misc/binary_serialization_api.rst:45
msgid "quat"
msgstr ""

#: ../../docs/tutorials/misc/binary_serialization_api.rst:47
msgid "aabb"
msgstr ""

#: ../../docs/tutorials/misc/binary_serialization_api.rst:49
#: ../../docs/tutorials/misc/binary_serialization_api.rst:149
#: ../../docs/tutorials/misc/binary_serialization_api.rst:164
#: ../../docs/tutorials/misc/binary_serialization_api.rst:177
#: ../../docs/tutorials/misc/binary_serialization_api.rst:196
#: ../../docs/tutorials/misc/binary_serialization_api.rst:211
#: ../../docs/tutorials/misc/binary_serialization_api.rst:226
#: ../../docs/tutorials/misc/binary_serialization_api.rst:245
#: ../../docs/tutorials/misc/binary_serialization_api.rst:270
#: ../../docs/tutorials/misc/binary_serialization_api.rst:301
msgid "12"
msgstr ""

#: ../../docs/tutorials/misc/binary_serialization_api.rst:49
msgid "basis"
msgstr ""

#: ../../docs/tutorials/misc/binary_serialization_api.rst:51
msgid "13"
msgstr ""

#: ../../docs/tutorials/misc/binary_serialization_api.rst:51
msgid "transform"
msgstr ""

#: ../../docs/tutorials/misc/binary_serialization_api.rst:53
msgid "14"
msgstr ""

#: ../../docs/tutorials/misc/binary_serialization_api.rst:53
msgid "color"
msgstr ""

#: ../../docs/tutorials/misc/binary_serialization_api.rst:55
msgid "15"
msgstr ""

#: ../../docs/tutorials/misc/binary_serialization_api.rst:55
msgid "node path"
msgstr ""

#: ../../docs/tutorials/misc/binary_serialization_api.rst:57
#: ../../docs/tutorials/misc/binary_serialization_api.rst:151
#: ../../docs/tutorials/misc/binary_serialization_api.rst:179
#: ../../docs/tutorials/misc/binary_serialization_api.rst:198
#: ../../docs/tutorials/misc/binary_serialization_api.rst:213
#: ../../docs/tutorials/misc/binary_serialization_api.rst:228
#: ../../docs/tutorials/misc/binary_serialization_api.rst:247
#: ../../docs/tutorials/misc/binary_serialization_api.rst:272
#: ../../docs/tutorials/misc/binary_serialization_api.rst:303
msgid "16"
msgstr ""

#: ../../docs/tutorials/misc/binary_serialization_api.rst:57
msgid "rid"
msgstr ""

#: ../../docs/tutorials/misc/binary_serialization_api.rst:59
msgid "17"
msgstr ""

#: ../../docs/tutorials/misc/binary_serialization_api.rst:59
msgid "object"
msgstr ""

#: ../../docs/tutorials/misc/binary_serialization_api.rst:61
msgid "18"
msgstr ""

#: ../../docs/tutorials/misc/binary_serialization_api.rst:61
msgid "dictionary"
msgstr ""

#: ../../docs/tutorials/misc/binary_serialization_api.rst:63
msgid "19"
msgstr ""

#: ../../docs/tutorials/misc/binary_serialization_api.rst:63
msgid "array"
msgstr ""

#: ../../docs/tutorials/misc/binary_serialization_api.rst:65
#: ../../docs/tutorials/misc/binary_serialization_api.rst:181
#: ../../docs/tutorials/misc/binary_serialization_api.rst:230
#: ../../docs/tutorials/misc/binary_serialization_api.rst:249
#: ../../docs/tutorials/misc/binary_serialization_api.rst:274
msgid "20"
msgstr ""

#: ../../docs/tutorials/misc/binary_serialization_api.rst:65
msgid "raw array"
msgstr ""

#: ../../docs/tutorials/misc/binary_serialization_api.rst:67
msgid "21"
msgstr ""

#: ../../docs/tutorials/misc/binary_serialization_api.rst:67
msgid "int array"
msgstr ""

#: ../../docs/tutorials/misc/binary_serialization_api.rst:69
msgid "22"
msgstr ""

#: ../../docs/tutorials/misc/binary_serialization_api.rst:69
msgid "real array"
msgstr ""

#: ../../docs/tutorials/misc/binary_serialization_api.rst:71
msgid "23"
msgstr ""

#: ../../docs/tutorials/misc/binary_serialization_api.rst:71
msgid "string array"
msgstr ""

#: ../../docs/tutorials/misc/binary_serialization_api.rst:73
#: ../../docs/tutorials/misc/binary_serialization_api.rst:183
#: ../../docs/tutorials/misc/binary_serialization_api.rst:232
#: ../../docs/tutorials/misc/binary_serialization_api.rst:251
#: ../../docs/tutorials/misc/binary_serialization_api.rst:276
msgid "24"
msgstr ""

#: ../../docs/tutorials/misc/binary_serialization_api.rst:73
msgid "vector2 array"
msgstr ""

#: ../../docs/tutorials/misc/binary_serialization_api.rst:75
msgid "25"
msgstr ""

#: ../../docs/tutorials/misc/binary_serialization_api.rst:75
msgid "vector3 array"
msgstr ""

#: ../../docs/tutorials/misc/binary_serialization_api.rst:77
msgid "26"
msgstr ""

#: ../../docs/tutorials/misc/binary_serialization_api.rst:77
msgid "color array"
msgstr ""

#: ../../docs/tutorials/misc/binary_serialization_api.rst:79
msgid "27"
msgstr ""

#: ../../docs/tutorials/misc/binary_serialization_api.rst:79
msgid "max"
msgstr ""

#: ../../docs/tutorials/misc/binary_serialization_api.rst:82
msgid ""
"Following this is the actual packet contents, which varies for each type of "
"packet:"
msgstr ""

#: ../../docs/tutorials/misc/binary_serialization_api.rst:86
msgid "0: null"
msgstr ""

#: ../../docs/tutorials/misc/binary_serialization_api.rst:89
msgid "1: :ref:`bool<class_bool>`"
msgstr ""

#: ../../docs/tutorials/misc/binary_serialization_api.rst:92
#: ../../docs/tutorials/misc/binary_serialization_api.rst:101
#: ../../docs/tutorials/misc/binary_serialization_api.rst:110
#: ../../docs/tutorials/misc/binary_serialization_api.rst:119
#: ../../docs/tutorials/misc/binary_serialization_api.rst:132
#: ../../docs/tutorials/misc/binary_serialization_api.rst:143
#: ../../docs/tutorials/misc/binary_serialization_api.rst:158
#: ../../docs/tutorials/misc/binary_serialization_api.rst:171
#: ../../docs/tutorials/misc/binary_serialization_api.rst:190
#: ../../docs/tutorials/misc/binary_serialization_api.rst:205
#: ../../docs/tutorials/misc/binary_serialization_api.rst:220
#: ../../docs/tutorials/misc/binary_serialization_api.rst:239
#: ../../docs/tutorials/misc/binary_serialization_api.rst:264
#: ../../docs/tutorials/misc/binary_serialization_api.rst:295
#: ../../docs/tutorials/misc/binary_serialization_api.rst:310
#: ../../docs/tutorials/misc/binary_serialization_api.rst:319
#: ../../docs/tutorials/misc/binary_serialization_api.rst:330
#: ../../docs/tutorials/misc/binary_serialization_api.rst:340
#: ../../docs/tutorials/misc/binary_serialization_api.rst:359
#: ../../docs/tutorials/misc/binary_serialization_api.rst:371
#: ../../docs/tutorials/misc/binary_serialization_api.rst:383
#: ../../docs/tutorials/misc/binary_serialization_api.rst:396
#: ../../docs/tutorials/misc/binary_serialization_api.rst:407
#: ../../docs/tutorials/misc/binary_serialization_api.rst:418
#: ../../docs/tutorials/misc/binary_serialization_api.rst:426
#: ../../docs/tutorials/misc/binary_serialization_api.rst:439
#: ../../docs/tutorials/misc/binary_serialization_api.rst:452
#: ../../docs/tutorials/misc/binary_serialization_api.rst:467
msgid "Offset"
msgstr ""

#: ../../docs/tutorials/misc/binary_serialization_api.rst:92
#: ../../docs/tutorials/misc/binary_serialization_api.rst:101
#: ../../docs/tutorials/misc/binary_serialization_api.rst:110
#: ../../docs/tutorials/misc/binary_serialization_api.rst:119
#: ../../docs/tutorials/misc/binary_serialization_api.rst:132
#: ../../docs/tutorials/misc/binary_serialization_api.rst:143
#: ../../docs/tutorials/misc/binary_serialization_api.rst:158
#: ../../docs/tutorials/misc/binary_serialization_api.rst:171
#: ../../docs/tutorials/misc/binary_serialization_api.rst:190
#: ../../docs/tutorials/misc/binary_serialization_api.rst:205
#: ../../docs/tutorials/misc/binary_serialization_api.rst:220
#: ../../docs/tutorials/misc/binary_serialization_api.rst:239
#: ../../docs/tutorials/misc/binary_serialization_api.rst:264
#: ../../docs/tutorials/misc/binary_serialization_api.rst:295
#: ../../docs/tutorials/misc/binary_serialization_api.rst:310
#: ../../docs/tutorials/misc/binary_serialization_api.rst:319
#: ../../docs/tutorials/misc/binary_serialization_api.rst:330
#: ../../docs/tutorials/misc/binary_serialization_api.rst:340
#: ../../docs/tutorials/misc/binary_serialization_api.rst:359
#: ../../docs/tutorials/misc/binary_serialization_api.rst:371
#: ../../docs/tutorials/misc/binary_serialization_api.rst:383
#: ../../docs/tutorials/misc/binary_serialization_api.rst:396
#: ../../docs/tutorials/misc/binary_serialization_api.rst:407
#: ../../docs/tutorials/misc/binary_serialization_api.rst:418
#: ../../docs/tutorials/misc/binary_serialization_api.rst:426
#: ../../docs/tutorials/misc/binary_serialization_api.rst:439
#: ../../docs/tutorials/misc/binary_serialization_api.rst:452
#: ../../docs/tutorials/misc/binary_serialization_api.rst:467
msgid "Len"
msgstr ""

#: ../../docs/tutorials/misc/binary_serialization_api.rst:94
msgid "0 for False, 1 for True"
msgstr ""

#: ../../docs/tutorials/misc/binary_serialization_api.rst:98
msgid "2: :ref:`int<class_int>`"
msgstr ""

#: ../../docs/tutorials/misc/binary_serialization_api.rst:103
msgid "Signed, 32-Bit Integer"
msgstr ""

#: ../../docs/tutorials/misc/binary_serialization_api.rst:107
msgid "3: :ref:`float<class_float>`/real"
msgstr ""

#: ../../docs/tutorials/misc/binary_serialization_api.rst:112
#: ../../docs/tutorials/misc/binary_serialization_api.rst:134
#: ../../docs/tutorials/misc/binary_serialization_api.rst:136
#: ../../docs/tutorials/misc/binary_serialization_api.rst:145
#: ../../docs/tutorials/misc/binary_serialization_api.rst:147
#: ../../docs/tutorials/misc/binary_serialization_api.rst:149
#: ../../docs/tutorials/misc/binary_serialization_api.rst:151
#: ../../docs/tutorials/misc/binary_serialization_api.rst:160
#: ../../docs/tutorials/misc/binary_serialization_api.rst:162
#: ../../docs/tutorials/misc/binary_serialization_api.rst:164
#: ../../docs/tutorials/misc/binary_serialization_api.rst:173
#: ../../docs/tutorials/misc/binary_serialization_api.rst:175
#: ../../docs/tutorials/misc/binary_serialization_api.rst:177
#: ../../docs/tutorials/misc/binary_serialization_api.rst:179
#: ../../docs/tutorials/misc/binary_serialization_api.rst:181
#: ../../docs/tutorials/misc/binary_serialization_api.rst:183
#: ../../docs/tutorials/misc/binary_serialization_api.rst:192
#: ../../docs/tutorials/misc/binary_serialization_api.rst:194
#: ../../docs/tutorials/misc/binary_serialization_api.rst:196
#: ../../docs/tutorials/misc/binary_serialization_api.rst:198
#: ../../docs/tutorials/misc/binary_serialization_api.rst:207
#: ../../docs/tutorials/misc/binary_serialization_api.rst:209
#: ../../docs/tutorials/misc/binary_serialization_api.rst:211
#: ../../docs/tutorials/misc/binary_serialization_api.rst:213
#: ../../docs/tutorials/misc/binary_serialization_api.rst:222
#: ../../docs/tutorials/misc/binary_serialization_api.rst:224
#: ../../docs/tutorials/misc/binary_serialization_api.rst:226
#: ../../docs/tutorials/misc/binary_serialization_api.rst:228
#: ../../docs/tutorials/misc/binary_serialization_api.rst:230
#: ../../docs/tutorials/misc/binary_serialization_api.rst:232
#: ../../docs/tutorials/misc/binary_serialization_api.rst:241
#: ../../docs/tutorials/misc/binary_serialization_api.rst:243
#: ../../docs/tutorials/misc/binary_serialization_api.rst:245
#: ../../docs/tutorials/misc/binary_serialization_api.rst:247
#: ../../docs/tutorials/misc/binary_serialization_api.rst:249
#: ../../docs/tutorials/misc/binary_serialization_api.rst:251
#: ../../docs/tutorials/misc/binary_serialization_api.rst:253
#: ../../docs/tutorials/misc/binary_serialization_api.rst:255
#: ../../docs/tutorials/misc/binary_serialization_api.rst:257
#: ../../docs/tutorials/misc/binary_serialization_api.rst:266
#: ../../docs/tutorials/misc/binary_serialization_api.rst:268
#: ../../docs/tutorials/misc/binary_serialization_api.rst:270
#: ../../docs/tutorials/misc/binary_serialization_api.rst:272
#: ../../docs/tutorials/misc/binary_serialization_api.rst:274
#: ../../docs/tutorials/misc/binary_serialization_api.rst:276
#: ../../docs/tutorials/misc/binary_serialization_api.rst:278
#: ../../docs/tutorials/misc/binary_serialization_api.rst:280
#: ../../docs/tutorials/misc/binary_serialization_api.rst:282
#: ../../docs/tutorials/misc/binary_serialization_api.rst:284
#: ../../docs/tutorials/misc/binary_serialization_api.rst:286
#: ../../docs/tutorials/misc/binary_serialization_api.rst:288
#: ../../docs/tutorials/misc/binary_serialization_api.rst:297
#: ../../docs/tutorials/misc/binary_serialization_api.rst:299
#: ../../docs/tutorials/misc/binary_serialization_api.rst:301
#: ../../docs/tutorials/misc/binary_serialization_api.rst:303
#: ../../docs/tutorials/misc/binary_serialization_api.rst:443
#: ../../docs/tutorials/misc/binary_serialization_api.rst:445
#: ../../docs/tutorials/misc/binary_serialization_api.rst:456
#: ../../docs/tutorials/misc/binary_serialization_api.rst:458
#: ../../docs/tutorials/misc/binary_serialization_api.rst:460
#: ../../docs/tutorials/misc/binary_serialization_api.rst:471
#: ../../docs/tutorials/misc/binary_serialization_api.rst:473
#: ../../docs/tutorials/misc/binary_serialization_api.rst:475
#: ../../docs/tutorials/misc/binary_serialization_api.rst:477
msgid "Float"
msgstr ""

#: ../../docs/tutorials/misc/binary_serialization_api.rst:112
msgid "IEE 754 32-Bits Float"
msgstr ""

#: ../../docs/tutorials/misc/binary_serialization_api.rst:116
msgid "4: :ref:`String<class_string>`"
msgstr ""

#: ../../docs/tutorials/misc/binary_serialization_api.rst:121
msgid "String Length (in Bytes)"
msgstr ""

#: ../../docs/tutorials/misc/binary_serialization_api.rst:123
#: ../../docs/tutorials/misc/binary_serialization_api.rst:321
#: ../../docs/tutorials/misc/binary_serialization_api.rst:344
#: ../../docs/tutorials/misc/binary_serialization_api.rst:430
msgid "X"
msgstr ""

#: ../../docs/tutorials/misc/binary_serialization_api.rst:123
#: ../../docs/tutorials/misc/binary_serialization_api.rst:321
#: ../../docs/tutorials/misc/binary_serialization_api.rst:344
#: ../../docs/tutorials/misc/binary_serialization_api.rst:430
msgid "Bytes"
msgstr ""

#: ../../docs/tutorials/misc/binary_serialization_api.rst:123
#: ../../docs/tutorials/misc/binary_serialization_api.rst:321
#: ../../docs/tutorials/misc/binary_serialization_api.rst:344
#: ../../docs/tutorials/misc/binary_serialization_api.rst:430
msgid "UTF-8 Encoded String"
msgstr ""

#: ../../docs/tutorials/misc/binary_serialization_api.rst:126
msgid "This field is padded to 4 bytes."
msgstr ""

#: ../../docs/tutorials/misc/binary_serialization_api.rst:129
msgid "5: :ref:`Vector2<class_vector2>`"
msgstr ""

#: ../../docs/tutorials/misc/binary_serialization_api.rst:134
#: ../../docs/tutorials/misc/binary_serialization_api.rst:145
#: ../../docs/tutorials/misc/binary_serialization_api.rst:160
#: ../../docs/tutorials/misc/binary_serialization_api.rst:222
#: ../../docs/tutorials/misc/binary_serialization_api.rst:443
#: ../../docs/tutorials/misc/binary_serialization_api.rst:456
msgid "X Coordinate"
msgstr ""

#: ../../docs/tutorials/misc/binary_serialization_api.rst:136
#: ../../docs/tutorials/misc/binary_serialization_api.rst:147
#: ../../docs/tutorials/misc/binary_serialization_api.rst:162
#: ../../docs/tutorials/misc/binary_serialization_api.rst:224
#: ../../docs/tutorials/misc/binary_serialization_api.rst:445
#: ../../docs/tutorials/misc/binary_serialization_api.rst:458
msgid "Y Coordinate"
msgstr ""

#: ../../docs/tutorials/misc/binary_serialization_api.rst:140
msgid "6: :ref:`Rect2<class_rect2>`"
msgstr ""

#: ../../docs/tutorials/misc/binary_serialization_api.rst:149
#: ../../docs/tutorials/misc/binary_serialization_api.rst:228
msgid "X Size"
msgstr ""

#: ../../docs/tutorials/misc/binary_serialization_api.rst:151
#: ../../docs/tutorials/misc/binary_serialization_api.rst:230
msgid "Y Size"
msgstr ""

#: ../../docs/tutorials/misc/binary_serialization_api.rst:155
msgid "7: :ref:`Vector3<class_vector3>`"
msgstr ""

#: ../../docs/tutorials/misc/binary_serialization_api.rst:164
#: ../../docs/tutorials/misc/binary_serialization_api.rst:226
#: ../../docs/tutorials/misc/binary_serialization_api.rst:460
msgid "Z Coordinate"
msgstr ""

#: ../../docs/tutorials/misc/binary_serialization_api.rst:168
msgid "8: :ref:`Transform2D<class_transform2d>`"
msgstr ""

#: ../../docs/tutorials/misc/binary_serialization_api.rst:173
#: ../../docs/tutorials/misc/binary_serialization_api.rst:241
#: ../../docs/tutorials/misc/binary_serialization_api.rst:266
msgid "[0][0]"
msgstr ""

#: ../../docs/tutorials/misc/binary_serialization_api.rst:175
#: ../../docs/tutorials/misc/binary_serialization_api.rst:243
#: ../../docs/tutorials/misc/binary_serialization_api.rst:268
msgid "[0][1]"
msgstr ""

#: ../../docs/tutorials/misc/binary_serialization_api.rst:177
#: ../../docs/tutorials/misc/binary_serialization_api.rst:247
#: ../../docs/tutorials/misc/binary_serialization_api.rst:272
msgid "[1][0]"
msgstr ""

#: ../../docs/tutorials/misc/binary_serialization_api.rst:179
#: ../../docs/tutorials/misc/binary_serialization_api.rst:249
#: ../../docs/tutorials/misc/binary_serialization_api.rst:274
msgid "[1][1]"
msgstr ""

#: ../../docs/tutorials/misc/binary_serialization_api.rst:181
#: ../../docs/tutorials/misc/binary_serialization_api.rst:253
#: ../../docs/tutorials/misc/binary_serialization_api.rst:278
msgid "[2][0]"
msgstr ""

#: ../../docs/tutorials/misc/binary_serialization_api.rst:183
#: ../../docs/tutorials/misc/binary_serialization_api.rst:255
#: ../../docs/tutorials/misc/binary_serialization_api.rst:280
msgid "[2][1]"
msgstr ""

#: ../../docs/tutorials/misc/binary_serialization_api.rst:187
msgid "9: :ref:`Plane<class_plane>`"
msgstr ""

#: ../../docs/tutorials/misc/binary_serialization_api.rst:192
msgid "Normal X"
msgstr ""

#: ../../docs/tutorials/misc/binary_serialization_api.rst:194
msgid "Normal Y"
msgstr ""

#: ../../docs/tutorials/misc/binary_serialization_api.rst:196
msgid "Normal Z"
msgstr ""

#: ../../docs/tutorials/misc/binary_serialization_api.rst:198
msgid "Distance"
msgstr ""

#: ../../docs/tutorials/misc/binary_serialization_api.rst:202
msgid "10: :ref:`Quat<class_quat>`"
msgstr ""

#: ../../docs/tutorials/misc/binary_serialization_api.rst:207
msgid "Imaginary X"
msgstr ""

#: ../../docs/tutorials/misc/binary_serialization_api.rst:209
msgid "Imaginary Y"
msgstr ""

#: ../../docs/tutorials/misc/binary_serialization_api.rst:211
msgid "Imaginary Z"
msgstr ""

#: ../../docs/tutorials/misc/binary_serialization_api.rst:213
msgid "Real W"
msgstr ""

#: ../../docs/tutorials/misc/binary_serialization_api.rst:217
msgid "11: :ref:`AABB<class_aabb>`"
msgstr ""

#: ../../docs/tutorials/misc/binary_serialization_api.rst:232
msgid "Z Size"
msgstr ""

#: ../../docs/tutorials/misc/binary_serialization_api.rst:236
msgid "12: :ref:`Basis<class_basis>`"
msgstr ""

#: ../../docs/tutorials/misc/binary_serialization_api.rst:245
#: ../../docs/tutorials/misc/binary_serialization_api.rst:270
msgid "[0][2]"
msgstr ""

#: ../../docs/tutorials/misc/binary_serialization_api.rst:251
#: ../../docs/tutorials/misc/binary_serialization_api.rst:276
msgid "[1][2]"
msgstr ""

#: ../../docs/tutorials/misc/binary_serialization_api.rst:253
#: ../../docs/tutorials/misc/binary_serialization_api.rst:278
msgid "28"
msgstr ""

#: ../../docs/tutorials/misc/binary_serialization_api.rst:255
#: ../../docs/tutorials/misc/binary_serialization_api.rst:280
msgid "32"
msgstr ""

#: ../../docs/tutorials/misc/binary_serialization_api.rst:257
#: ../../docs/tutorials/misc/binary_serialization_api.rst:282
msgid "36"
msgstr ""

#: ../../docs/tutorials/misc/binary_serialization_api.rst:257
#: ../../docs/tutorials/misc/binary_serialization_api.rst:282
msgid "[2][2]"
msgstr ""

#: ../../docs/tutorials/misc/binary_serialization_api.rst:261
msgid "13: :ref:`Transform<class_transform>`"
msgstr ""

#: ../../docs/tutorials/misc/binary_serialization_api.rst:284
msgid "40"
msgstr ""

#: ../../docs/tutorials/misc/binary_serialization_api.rst:284
msgid "[3][0]"
msgstr ""

#: ../../docs/tutorials/misc/binary_serialization_api.rst:286
msgid "44"
msgstr ""

#: ../../docs/tutorials/misc/binary_serialization_api.rst:286
msgid "[3][1]"
msgstr ""

#: ../../docs/tutorials/misc/binary_serialization_api.rst:288
msgid "48"
msgstr ""

#: ../../docs/tutorials/misc/binary_serialization_api.rst:288
msgid "[3][2]"
msgstr ""

#: ../../docs/tutorials/misc/binary_serialization_api.rst:292
msgid "14: :ref:`Color<class_color>`"
msgstr ""

#: ../../docs/tutorials/misc/binary_serialization_api.rst:297
#: ../../docs/tutorials/misc/binary_serialization_api.rst:471
msgid "Red (0..1)"
msgstr ""

#: ../../docs/tutorials/misc/binary_serialization_api.rst:299
#: ../../docs/tutorials/misc/binary_serialization_api.rst:473
msgid "Green (0..1)"
msgstr ""

#: ../../docs/tutorials/misc/binary_serialization_api.rst:301
#: ../../docs/tutorials/misc/binary_serialization_api.rst:475
msgid "Blue (0..1)"
msgstr ""

#: ../../docs/tutorials/misc/binary_serialization_api.rst:303
#: ../../docs/tutorials/misc/binary_serialization_api.rst:477
msgid "Alpha (0..1)"
msgstr ""

#: ../../docs/tutorials/misc/binary_serialization_api.rst:307
msgid "15: :ref:`NodePath<class_nodepath>`"
msgstr ""

#: ../../docs/tutorials/misc/binary_serialization_api.rst:312
msgid ""
"String Length, or New Format (val&0x80000000!=0 and NameCount=val&0x7FFFFFFF)"
msgstr ""

#: ../../docs/tutorials/misc/binary_serialization_api.rst:316
msgid "For old format:"
msgstr ""

#: ../../docs/tutorials/misc/binary_serialization_api.rst:324
msgid "Padded to 4 bytes."
msgstr ""

#: ../../docs/tutorials/misc/binary_serialization_api.rst:327
msgid "For new format:"
msgstr ""

#: ../../docs/tutorials/misc/binary_serialization_api.rst:332
msgid "Sub-Name Count"
msgstr ""

#: ../../docs/tutorials/misc/binary_serialization_api.rst:334
msgid "Flags (absolute: val&1 != 0 )"
msgstr ""

#: ../../docs/tutorials/misc/binary_serialization_api.rst:337
msgid "For each Name and Sub-Name"
msgstr ""

#: ../../docs/tutorials/misc/binary_serialization_api.rst:342
#: ../../docs/tutorials/misc/binary_serialization_api.rst:428
msgid "X+0"
msgstr ""

#: ../../docs/tutorials/misc/binary_serialization_api.rst:342
#: ../../docs/tutorials/misc/binary_serialization_api.rst:428
msgid "String Length"
msgstr ""

#: ../../docs/tutorials/misc/binary_serialization_api.rst:344
#: ../../docs/tutorials/misc/binary_serialization_api.rst:430
msgid "X+4"
msgstr ""

#: ../../docs/tutorials/misc/binary_serialization_api.rst:347
msgid "Every name string is padded to 4 bytes."
msgstr ""

#: ../../docs/tutorials/misc/binary_serialization_api.rst:350
msgid "16: :ref:`RID<class_rid>` (unsupported)"
msgstr ""

#: ../../docs/tutorials/misc/binary_serialization_api.rst:353
msgid "17: :ref:`Object<class_object>` (unsupported)"
msgstr ""

#: ../../docs/tutorials/misc/binary_serialization_api.rst:356
msgid "18: :ref:`Dictionary<class_dictionary>`"
msgstr ""

#: ../../docs/tutorials/misc/binary_serialization_api.rst:361
#: ../../docs/tutorials/misc/binary_serialization_api.rst:373
msgid "val&0x7FFFFFFF = elements, val&0x80000000 = shared (bool)"
msgstr ""

#: ../../docs/tutorials/misc/binary_serialization_api.rst:364
msgid ""
"Then what follows is, for amount of \"elements\", pairs of key and value, "
"one after the other, using this same format."
msgstr ""

#: ../../docs/tutorials/misc/binary_serialization_api.rst:368
msgid "19: :ref:`Array<class_array>`"
msgstr ""

#: ../../docs/tutorials/misc/binary_serialization_api.rst:376
msgid ""
"Then what follows is, for amount of \"elements\", values one after the "
"other, using this same format."
msgstr ""

#: ../../docs/tutorials/misc/binary_serialization_api.rst:380
msgid "20: :ref:`PoolByteArray<class_poolbytearray>`"
msgstr ""

#: ../../docs/tutorials/misc/binary_serialization_api.rst:385
msgid "Array Length (Bytes)"
msgstr ""

#: ../../docs/tutorials/misc/binary_serialization_api.rst:387
msgid "8..8+length"
msgstr ""

#: ../../docs/tutorials/misc/binary_serialization_api.rst:387
msgid "Byte"
msgstr ""

#: ../../docs/tutorials/misc/binary_serialization_api.rst:387
msgid "Byte (0..255)"
msgstr ""

#: ../../docs/tutorials/misc/binary_serialization_api.rst:390
msgid "The array data is padded to 4 bytes."
msgstr ""

#: ../../docs/tutorials/misc/binary_serialization_api.rst:393
msgid "21: :ref:`PoolIntArray<class_poolintarray>`"
msgstr ""

#: ../../docs/tutorials/misc/binary_serialization_api.rst:398
msgid "Array Length (Integers)"
msgstr ""

#: ../../docs/tutorials/misc/binary_serialization_api.rst:400
#: ../../docs/tutorials/misc/binary_serialization_api.rst:411
msgid "8..8+length\\*4"
msgstr ""

#: ../../docs/tutorials/misc/binary_serialization_api.rst:400
msgid "32 Bits Signed Integer"
msgstr ""

#: ../../docs/tutorials/misc/binary_serialization_api.rst:404
msgid "22: :ref:`PoolRealArray<class_poolrealarray>`"
msgstr ""

#: ../../docs/tutorials/misc/binary_serialization_api.rst:409
msgid "Array Length (Floats)"
msgstr ""

#: ../../docs/tutorials/misc/binary_serialization_api.rst:411
msgid "32 Bits IEE 754 Float"
msgstr ""

#: ../../docs/tutorials/misc/binary_serialization_api.rst:415
msgid "23: :ref:`PoolStringArray<class_poolstringarray>`"
msgstr ""

#: ../../docs/tutorials/misc/binary_serialization_api.rst:420
msgid "Array Length (Strings)"
msgstr ""

#: ../../docs/tutorials/misc/binary_serialization_api.rst:423
msgid "For each String:"
msgstr ""

#: ../../docs/tutorials/misc/binary_serialization_api.rst:433
msgid "Every string is padded to 4 bytes."
msgstr ""

#: ../../docs/tutorials/misc/binary_serialization_api.rst:436
msgid "24: :ref:`PoolVector2Array<class_poolvector2array>`"
msgstr ""

#: ../../docs/tutorials/misc/binary_serialization_api.rst:441
#: ../../docs/tutorials/misc/binary_serialization_api.rst:454
#: ../../docs/tutorials/misc/binary_serialization_api.rst:469
msgid "Array Length"
msgstr ""

#: ../../docs/tutorials/misc/binary_serialization_api.rst:443
msgid "8..8+length\\*8"
msgstr ""

#: ../../docs/tutorials/misc/binary_serialization_api.rst:445
msgid "8..12+length\\*8"
msgstr ""

#: ../../docs/tutorials/misc/binary_serialization_api.rst:449
msgid "25: :ref:`PoolVector3Array<class_poolvector3array>`"
msgstr ""

#: ../../docs/tutorials/misc/binary_serialization_api.rst:456
msgid "8..8+length\\*12"
msgstr ""

#: ../../docs/tutorials/misc/binary_serialization_api.rst:458
msgid "8..12+length\\*12"
msgstr ""

#: ../../docs/tutorials/misc/binary_serialization_api.rst:460
msgid "8..16+length\\*12"
msgstr ""

#: ../../docs/tutorials/misc/binary_serialization_api.rst:464
msgid "26: :ref:`PoolColorArray<class_poolcolorarray>`"
msgstr ""

#: ../../docs/tutorials/misc/binary_serialization_api.rst:471
msgid "8..8+length\\*16"
msgstr ""

#: ../../docs/tutorials/misc/binary_serialization_api.rst:473
msgid "8..12+length\\*16"
msgstr ""

#: ../../docs/tutorials/misc/binary_serialization_api.rst:475
msgid "8..16+length\\*16"
msgstr ""

#: ../../docs/tutorials/misc/binary_serialization_api.rst:477
msgid "8..20+length\\*16"
msgstr ""

#: ../../docs/tutorials/misc/running_code_in_the_editor.rst:4
msgid "Running code in the editor"
msgstr "편집기에서 코드 실행하기"

#: ../../docs/tutorials/misc/running_code_in_the_editor.rst:7
msgid "What is ``tool``?"
msgstr ""

#: ../../docs/tutorials/misc/running_code_in_the_editor.rst:9
msgid ""
"``tool`` is a powerful line of code that, when added at the top of your "
"script, makes it execute in the editor. You can also decide which parts of "
"the script execute in the editor, which in game, and which in both."
msgstr ""

#: ../../docs/tutorials/misc/running_code_in_the_editor.rst:11
msgid ""
"You can use it for doing many things, but it is mostly useful in level "
"design for visually presenting things that are hard to predict ourselves. "
"Here are some use cases:"
msgstr ""

#: ../../docs/tutorials/misc/running_code_in_the_editor.rst:13
msgid ""
"If you have a cannon that shoots cannonballs affected by physics (gravity), "
"you can draw cannonball's trajectory in the editor, making level design a "
"lot easier."
msgstr ""

#: ../../docs/tutorials/misc/running_code_in_the_editor.rst:14
msgid ""
"If you have jumppads with varying jump heights, you can draw the maximum "
"jump height a player would reach if it jumped on one, also making level "
"design easier."
msgstr ""

#: ../../docs/tutorials/misc/running_code_in_the_editor.rst:15
msgid ""
"If your player doesn't use a sprite, but draws itself using code, you can "
"make that drawing code execute in the editor to see your player."
msgstr ""

#: ../../docs/tutorials/misc/running_code_in_the_editor.rst:19
msgid ""
"``tool`` scripts run inside the editor, and let you access the scene tree of "
"the currently edited scene. This is a powerful feature which also comes with "
"caveats, as the editor does not include protections for potential misuse of "
"``tool`` scripts. Be **extremely** cautious when manipulating the scene "
"tree, especially via :ref:`Node.queue_free<class_Node_method_queue_free>`, "
"as it can cause crashes if you free a node while the editor runs logic "
"involving it."
msgstr ""

#: ../../docs/tutorials/misc/running_code_in_the_editor.rst:28
msgid "How to use it"
msgstr "사용하는 법"

#: ../../docs/tutorials/misc/running_code_in_the_editor.rst:30
msgid ""
"To turn a script into a tool, add ``tool`` keyword at the top of your code."
msgstr ""

#: ../../docs/tutorials/misc/running_code_in_the_editor.rst:32
msgid ""
"To check if you are currently in the editor, use: ``Engine.editor_hint``."
msgstr ""

#: ../../docs/tutorials/misc/running_code_in_the_editor.rst:34
msgid "For example, if you want to execute some code only in editor, use:"
msgstr ""

#: ../../docs/tutorials/misc/running_code_in_the_editor.rst:42
msgid ""
"On the other hand, if you want to execute code only in game, simply negate "
"previous expression:"
msgstr ""

#: ../../docs/tutorials/misc/running_code_in_the_editor.rst:50
msgid ""
"Pieces of code that are not having any of the 2 conditions above will run "
"both in editor and in game."
msgstr ""

#: ../../docs/tutorials/misc/running_code_in_the_editor.rst:52
msgid "Here is how a ``_process()`` function might look like for you:"
msgstr ""

#: ../../docs/tutorials/misc/running_code_in_the_editor.rst:66
msgid ""
"Modifications in editor are permanent. In our case, when we remove the "
"script, the node will keep its rotation direction. Be careful so that you "
"don't make unwanted modifications."
msgstr ""

#: ../../docs/tutorials/misc/running_code_in_the_editor.rst:69
msgid "Try it out"
msgstr ""

#: ../../docs/tutorials/misc/running_code_in_the_editor.rst:71
msgid ""
"Add a ``Sprite`` node to your scene and set the texture to Godot icon. "
"Attach and open a script, and change it to this:"
msgstr ""

#: ../../docs/tutorials/misc/running_code_in_the_editor.rst:82
msgid ""
"Save the script and return to the editor. You should now see your object "
"rotate. If you run the game, it will also rotate."
msgstr ""

#: ../../docs/tutorials/misc/running_code_in_the_editor.rst:86
msgid ""
"If you don't see the changes, reload the scene (close it and open it again)."
msgstr ""

#: ../../docs/tutorials/misc/running_code_in_the_editor.rst:88
msgid ""
"Now let's choose which code runs when. Modify your ``_process()`` function "
"to look like this:"
msgstr ""

#: ../../docs/tutorials/misc/running_code_in_the_editor.rst:99
msgid ""
"Save the script. Now the object will spin clockwise in the editor, but if "
"you run the game, it will spin counter-clockwise."
msgstr ""

#: ../../docs/tutorials/misc/running_code_in_the_editor.rst:101
msgid ""
"Code from other nodes doesn't run in the editor. Your access to other nodes "
"is limited. You can access the tree and nodes, and their default properties, "
"but you can't access user variables. If you want to do so, other nodes have "
"to run in the editor too. AutoLoad nodes cannot be accessed in the editor at "
"all."
msgstr ""

#: ../../docs/tutorials/misc/running_code_in_the_editor.rst:103
msgid ""
"Using ``tool`` improperly can yield many errors. It is advised to first "
"write the code how you want it, and only then add the ``tool`` keyword to "
"the top. Also make sure you divide your code into part that runs in editor "
"and part that runs in game. This way you can find your bug easier."
msgstr ""

#: ../../docs/tutorials/misc/change_scenes_manually.rst:4
#, fuzzy
msgid "Change scenes manually"
msgstr "수동으로 함수 만들기"

#: ../../docs/tutorials/misc/change_scenes_manually.rst:6
msgid ""
"Sometimes it helps to have more control over how one swaps scenes around. As "
"mentioned above, a :ref:`Viewport <class_Viewport>`'s child nodes will "
"render to the image it generates. This holds true even for nodes outside of "
"the \"current\" scene. Autoloads fall into this category, but so do scenes "
"which one instances and adds to the tree at runtime:"
msgstr ""

#: ../../docs/tutorials/misc/change_scenes_manually.rst:38
msgid ""
"To complete the cycle and swap out the new scene with the old one, "
"developers have a choice to make. Many strategies exist for removing a scene "
"from view of the :ref:`Viewport <class_Viewport>`. The tradeoffs involve "
"balancing operation speed and memory consumption as well as balancing data "
"access and integrity."
msgstr ""

#: ../../docs/tutorials/misc/change_scenes_manually.rst:44
msgid ""
"**We can delete the existing scene.** :ref:`SceneTree.change_scene() "
"<class_SceneTree_method_change_scene>` and :ref:`SceneTree.change_scene_to() "
"<class_SceneTree_method_change_scene_to>` will delete the current scene "
"immediately. Developers can also delete the main scene though. Assuming the "
"root node's name is \"Main\", one could do ``get_node(\"/root/Main\")."
"free()`` to delete the whole scene."
msgstr ""

#: ../../docs/tutorials/misc/change_scenes_manually.rst:51
msgid "Unloads memory."
msgstr ""

#: ../../docs/tutorials/misc/change_scenes_manually.rst:53
msgid "Pro: RAM is no longer dragging the dead weight."
msgstr ""

#: ../../docs/tutorials/misc/change_scenes_manually.rst:55
msgid ""
"Con: Returning to that scene is now more expensive since it must be loaded "
"back into memory again (takes time AND memory). Not a problem if returning "
"soon is unnecessary."
msgstr ""

#: ../../docs/tutorials/misc/change_scenes_manually.rst:59
msgid ""
"Con: No longer have access to that scene's data. Not a problem if using that "
"data soon is unnecessary."
msgstr ""

#: ../../docs/tutorials/misc/change_scenes_manually.rst:62
msgid ""
"Note: It can be useful to preserve the data in a soon-to-be-deleted scene by "
"re-attaching one or more of its nodes to a different scene, or even directly "
"to the :ref:`SceneTree <class_SceneTree>`."
msgstr ""

#: ../../docs/tutorials/misc/change_scenes_manually.rst:66
#, fuzzy
msgid "Processing stops."
msgstr "프로세싱(Processing)"

#: ../../docs/tutorials/misc/change_scenes_manually.rst:68
msgid ""
"Pro: No nodes means no process, physics process, or input handling. The CPU "
"is available to work on the new scene's contents."
msgstr ""

#: ../../docs/tutorials/misc/change_scenes_manually.rst:71
msgid ""
"Con: Those nodes' processing and input handling no longer operate. Not a "
"problem if using the updated data is unnecessary."
msgstr ""

#: ../../docs/tutorials/misc/change_scenes_manually.rst:74
msgid ""
"**We can hide the existing scene.** By changing the visibility or collision "
"detection of the nodes, we can hide the entire node sub-tree from the "
"player's perspective."
msgstr ""

#: ../../docs/tutorials/misc/change_scenes_manually.rst:78
msgid "Memory still exists."
msgstr ""

#: ../../docs/tutorials/misc/change_scenes_manually.rst:80
msgid "Pro: One can still access the data if need be."
msgstr ""

#: ../../docs/tutorials/misc/change_scenes_manually.rst:82
msgid "Pro: There's no need to move any more nodes around to save data."
msgstr ""

#: ../../docs/tutorials/misc/change_scenes_manually.rst:84
msgid ""
"Con: More data is being kept in memory which will be become a problem on "
"memory-sensitive platforms like web or mobile."
msgstr ""

#: ../../docs/tutorials/misc/change_scenes_manually.rst:87
#, fuzzy
msgid "Processing continues."
msgstr "프로세싱(Processing)"

#: ../../docs/tutorials/misc/change_scenes_manually.rst:89
msgid ""
"Pro: Data continues to receive processing updates, so the scene will keep "
"updated any data within it that relies on delta time or frame data."
msgstr ""

#: ../../docs/tutorials/misc/change_scenes_manually.rst:93
msgid ""
"Pro: Nodes are still members of groups (since groups belong to the :ref:"
"`SceneTree <class_SceneTree>`)."
msgstr ""

#: ../../docs/tutorials/misc/change_scenes_manually.rst:96
msgid ""
"Con: The CPU's attention is now divided between both scenes. Too much load "
"could result in low frame rates. One should be sure to test performance as "
"they go to ensure the target platform can support the load they are giving "
"it."
msgstr ""

#: ../../docs/tutorials/misc/change_scenes_manually.rst:101
msgid ""
"**We can remove the existing scene from the tree.** Assign a variable to the "
"existing scene's root node. Then use :ref:`Node.remove_child(Node) "
"<class_Node_method_remove_child>` to detach the entire scene from the tree."
msgstr ""

#: ../../docs/tutorials/misc/change_scenes_manually.rst:106
msgid "Memory still exists (similar pros/cons as with hiding it from view)."
msgstr ""

#: ../../docs/tutorials/misc/change_scenes_manually.rst:108
msgid "Processing stops (similar pros/cons as with deleting it completely)."
msgstr ""

#: ../../docs/tutorials/misc/change_scenes_manually.rst:110
msgid ""
"Pro: This variation of \"hiding\" it is much easier to show/hide. Rather "
"than potentially keeping track of multiple changes to the scene, one must "
"only call the one method add/remove_child pair of methods. It is similar to "
"disabling game objects in other engines."
msgstr ""

#: ../../docs/tutorials/misc/change_scenes_manually.rst:115
msgid ""
"Con: Unlike with hiding it from view only, the data contained within the "
"scene will become stale if it relies on delta time, input, groups, or other "
"data that is derived from :ref:`SceneTree <class_SceneTree>` access."
msgstr ""

#: ../../docs/tutorials/misc/change_scenes_manually.rst:120
msgid ""
"There are also cases where one may wish to have many scenes present at the "
"same time. Perhaps one is adding their own singleton at runtime, or "
"preserving a a scene's data between scene changes (adding the scene to the "
"root node)."
msgstr ""

#: ../../docs/tutorials/misc/change_scenes_manually.rst:133
msgid ""
"Perhaps instead they wish to display multiple scenes at the same time using "
"a :ref:`ViewportContainers <class_ViewportContainer>`. This is optimal in "
"cases where the intent is to render different content in different parts of "
"the screen. Minimaps and split-screen multiplayer are good examples."
msgstr ""

#: ../../docs/tutorials/misc/change_scenes_manually.rst:138
msgid ""
"Each option will have cases where it is best appropriate, so one must "
"examine the effects of each and determine what path best fits their unique "
"situation."
msgstr ""

#: ../../docs/tutorials/misc/gles2_gles3_differences.rst:4
#, fuzzy
msgid "Differences between GLES2 and GLES3"
msgstr "C#과 GDScript와의 일반적인 차이"

#: ../../docs/tutorials/misc/gles2_gles3_differences.rst:6
msgid ""
"This page documents the differences between GLES2 and GLES3 that are by "
"design and are not the result of bugs. There may be differences that are "
"unintentional, but they should be reported as bugs."
msgstr ""

#: ../../docs/tutorials/misc/gles2_gles3_differences.rst:9
msgid ""
"\"GLES2\" and \"GLES3\" are the names used in Godot for the two OpenGL-based "
"rendering backends. In terms of graphics APIs, the GLES2 backend maps to "
"OpenGL 2.1 on desktop, OpenGL ES 2.0 on mobile and WebGL 1.0 on the web. The "
"GLES3 backend maps to OpenGL 3.3 on desktop, OpenGL ES 3.0 on mobile and "
"WebGL 2.0 on the web."
msgstr ""

#: ../../docs/tutorials/misc/gles2_gles3_differences.rst:15
msgid "Particles"
msgstr "파티클"

#: ../../docs/tutorials/misc/gles2_gles3_differences.rst:17
msgid ""
"GLES2 cannot use the :ref:`Particles <class_Particles>` or :ref:`Particles2D "
"<class_Particles2D>` nodes as they require advanced GPU features. Instead, "
"use :ref:`CPUParticles <class_CPUParticles>` or :ref:`CPUParticles2D "
"<class_CPUParticles2D>`, which provides a similar interface to a :ref:"
"`ParticlesMaterial <class_ParticlesMaterial>`."
msgstr ""

#: ../../docs/tutorials/misc/gles2_gles3_differences.rst:22
msgid ""
"Particles and Particles2D can be converted to their CPU equivalent node with "
"the \"Convert to CPUParticles\" option in the editor."
msgstr ""

#: ../../docs/tutorials/misc/gles2_gles3_differences.rst:26
msgid "``SCREEN_TEXTURE`` mip-maps"
msgstr ""

#: ../../docs/tutorials/misc/gles2_gles3_differences.rst:28
msgid ""
"In GLES2, ``SCREEN_TEXTURE`` (accessed via a :ref:`ShaderMaterial "
"<class_ShaderMaterial>`) does not have computed mip-maps. So when accessing "
"at a different LOD, the texture will not appear blurry."
msgstr ""

#: ../../docs/tutorials/misc/gles2_gles3_differences.rst:32
msgid "``DEPTH_TEXTURE``"
msgstr ""

#: ../../docs/tutorials/misc/gles2_gles3_differences.rst:34
msgid ""
"While GLES2 supports ``DEPTH_TEXTURE`` in shaders, it may not work on some "
"old hardware (especially mobile)."
msgstr ""

#: ../../docs/tutorials/misc/gles2_gles3_differences.rst:37
#, fuzzy
msgid "Color space"
msgstr "색깔"

#: ../../docs/tutorials/misc/gles2_gles3_differences.rst:39
msgid ""
"GLES2 and GLES3 are in different color spaces. This means that colors will "
"appear slightly different between them  especially when lighting is used."
msgstr ""

#: ../../docs/tutorials/misc/gles2_gles3_differences.rst:42
msgid ""
"If your game is going to use both GLES2 and GLES3, you can use an ``if`` "
"statement check and see if the output is in sRGB, using ``OUTPUT_IS_SRGB``. "
"``OUTPUT_IS_SRGB`` is ``true`` in GLES2 and ``false`` in GLES3."
msgstr ""

#: ../../docs/tutorials/misc/gles2_gles3_differences.rst:47
#, fuzzy
msgid "HDR"
msgstr "HUD"

#: ../../docs/tutorials/misc/gles2_gles3_differences.rst:49
msgid ""
"GLES2 is not capable of using High Dynamic Range (HDR) rendering features. "
"If HDR is set for your project, or for a given viewport, Godot will still "
"user Low Dynamic Range (LDR) which limits viewport values to the ``0-1`` "
"range."
msgstr ""

#: ../../docs/tutorials/misc/gles2_gles3_differences.rst:54
#, fuzzy
msgid "SpatialMaterial features"
msgstr "킬러 기능"

#: ../../docs/tutorials/misc/gles2_gles3_differences.rst:56
msgid ""
"In GLES2, the following advanced rendering features in the :ref:"
"`SpatialMaterial <class_SpatialMaterial>` are missing:"
msgstr ""

#: ../../docs/tutorials/misc/gles2_gles3_differences.rst:59
msgid "Subsurface scattering"
msgstr ""

#: ../../docs/tutorials/misc/gles2_gles3_differences.rst:62
msgid "Depth mapping"
msgstr ""

#: ../../docs/tutorials/misc/gles2_gles3_differences.rst:64
msgid "When using SpatialMaterials they will not even appear in the editor."
msgstr ""

#: ../../docs/tutorials/misc/gles2_gles3_differences.rst:66
msgid ""
"In custom :ref:`ShaderMaterials <class_ShaderMaterial>`, you can set values "
"for these features but they will be non-functional. For example, you will "
"still be able to set the ``SSS`` built-in (which normally adds subsurface "
"scattering) in your shader, but nothing will happen."
msgstr ""

#: ../../docs/tutorials/misc/gles2_gles3_differences.rst:71
#, fuzzy
msgid "Environment features"
msgstr "환경 옵션"

#: ../../docs/tutorials/misc/gles2_gles3_differences.rst:73
msgid ""
"In GLES2, the following features in the :ref:`Environment "
"<class_Environment>` are missing:"
msgstr ""

#: ../../docs/tutorials/misc/gles2_gles3_differences.rst:75
msgid "Auto exposure"
msgstr ""

#: ../../docs/tutorials/misc/gles2_gles3_differences.rst:76
msgid "Tonemapping"
msgstr ""

#: ../../docs/tutorials/misc/gles2_gles3_differences.rst:77
msgid "Screen space reflections"
msgstr ""

#: ../../docs/tutorials/misc/gles2_gles3_differences.rst:78
msgid "Screen space ambient occlusion"
msgstr ""

#: ../../docs/tutorials/misc/gles2_gles3_differences.rst:80
msgid "That means that in GLES2 environments you can only set:"
msgstr ""

#: ../../docs/tutorials/misc/gles2_gles3_differences.rst:82
msgid "Sky (including procedural sky)"
msgstr ""

#: ../../docs/tutorials/misc/gles2_gles3_differences.rst:83
#, fuzzy
msgid "Ambient light"
msgstr "빛 추가하기"

#: ../../docs/tutorials/misc/gles2_gles3_differences.rst:85
msgid "Depth of field"
msgstr ""

#: ../../docs/tutorials/misc/gles2_gles3_differences.rst:86
msgid "Glow (also known as bloom)"
msgstr ""

#: ../../docs/tutorials/misc/gles2_gles3_differences.rst:87
msgid "Adjustment"
msgstr ""

#: ../../docs/tutorials/misc/gles2_gles3_differences.rst:90
msgid "GIProbes"
msgstr ""

#: ../../docs/tutorials/misc/gles2_gles3_differences.rst:92
msgid ""
":ref:`GIProbes <class_GIProbe>` do not work in GLES2. Instead use :ref:"
"`Baked Lightmaps <class_BakedLightmap>`. For a description of how baked "
"lightmaps work see the :ref:`Baked Lightmaps tutorial <doc_baked_lightmaps>`."
msgstr ""

#: ../../docs/tutorials/misc/gles2_gles3_differences.rst:96
msgid "Contact shadows"
msgstr ""

#: ../../docs/tutorials/misc/gles2_gles3_differences.rst:98
msgid ""
"The ``shadow_contact`` property of :ref:`Lights <class_Light>` is not "
"supported in GLES2 and so does nothing."
msgstr ""

#: ../../docs/tutorials/misc/gles2_gles3_differences.rst:101
#, fuzzy
msgid "Light performance"
msgstr "성능"

#: ../../docs/tutorials/misc/gles2_gles3_differences.rst:103
msgid ""
"In GLES2, performance scales poorly with several lights, as each light is "
"processed in a separate render pass (in opposition to GLES3 which is all "
"done in a single pass). Try to limit scenes to as few lights as possible in "
"order to achieve greatest performance."
msgstr ""

#: ../../docs/tutorials/misc/gles2_gles3_differences.rst:110
msgid ""
"On mobile, GLES2 requires ETC texture compression, while GLES3 requires "
"ETC2. ETC2 is enabled by default, so if exporting to mobile using GLES2 make "
"sure to set the project setting ``rendering/vram_compression/import_etc`` "
"and then reimport textures."
msgstr ""

#: ../../docs/tutorials/misc/gles2_gles3_differences.rst:116
msgid ""
"Since ETC doesn't support transparency, you must reimport textures that "
"contain an alpha channel to use the Uncompressed, Lossy or Lossless "
"compression mode (instead of Video RAM). This can be done in the Import dock "
"after selecting them in the FileSystem dock."
msgstr ""

#: ../../docs/tutorials/misc/gles2_gles3_differences.rst:122
#, fuzzy
msgid "Blend shapes"
msgstr "충돌 모양"

#: ../../docs/tutorials/misc/gles2_gles3_differences.rst:124
msgid "Blend shapes are not supported in GLES2."
msgstr ""

#: ../../docs/tutorials/misc/gles2_gles3_differences.rst:129
msgid ""
"GLES3 provides many built-in functions that GLES2 does not. Below is a list "
"of functions that are not available or are have limited support in GLES2."
msgstr ""

#: ../../docs/tutorials/misc/gles2_gles3_differences.rst:132
msgid ""
"For a complete list of built-in GLSL functions see the :ref:`Shading "
"Language doc <doc_shading_language>`."
msgstr ""

#: ../../docs/tutorials/misc/gles2_gles3_differences.rst:139
msgid "vec_int_type **floatBitsToInt** ( vec_type x )"
msgstr ""

#: ../../docs/tutorials/misc/gles2_gles3_differences.rst:141
msgid "vec_uint_type **floatBitsToUint** ( vec_type x )"
msgstr ""

#: ../../docs/tutorials/misc/gles2_gles3_differences.rst:143
msgid "vec_type **intBitsToFloat** ( vec_int_type x )"
msgstr ""

#: ../../docs/tutorials/misc/gles2_gles3_differences.rst:145
msgid "vec_type **uintBitsToFloat** ( vec_uint_type x )"
msgstr ""

#: ../../docs/tutorials/misc/gles2_gles3_differences.rst:147
#: ../../docs/tutorials/misc/gles2_gles3_differences.rst:149
msgid "See workaround below"
msgstr ""

#: ../../docs/tutorials/misc/gles2_gles3_differences.rst:151
msgid "vec4_type **texture** ( sampler_type s, vec_type uv [, float bias] )"
msgstr ""

#: ../../docs/tutorials/misc/gles2_gles3_differences.rst:151
msgid "**bias** not available in vertex shader"
msgstr ""

#: ../../docs/tutorials/misc/gles2_gles3_differences.rst:153
msgid ""
"vec4_type **textureProj** ( sampler_type s, vec_type uv [, float bias] )"
msgstr ""

#: ../../docs/tutorials/misc/gles2_gles3_differences.rst:155
msgid "vec4_type **textureLod** ( sampler_type s, vec_type uv, float lod )"
msgstr ""

#: ../../docs/tutorials/misc/gles2_gles3_differences.rst:155
msgid "Only available in vertex shader on some hardware"
msgstr ""

#: ../../docs/tutorials/misc/gles2_gles3_differences.rst:157
msgid "vec4_type **textureProjLod** ( sampler_type s, vec_type uv, float lod )"
msgstr ""

#: ../../docs/tutorials/misc/gles2_gles3_differences.rst:159
msgid ""
"vec4_type **textureGrad** ( sampler_type s, vec_type uv, vec_type dPdx, "
"vec_type dPdy)"
msgstr ""

#: ../../docs/tutorials/misc/gles2_gles3_differences.rst:168
msgid ""
"Functions not in GLES2's GLSL were added with Godots own shader standard "
"library. These functions may perform worse in GLES2 compared to GLES3."
msgstr ""

#: ../../docs/tutorials/misc/gles2_gles3_differences.rst:171
msgid "``textureSize()`` workaround"
msgstr ""

#: ../../docs/tutorials/misc/gles2_gles3_differences.rst:173
msgid ""
"GLES2 does not support ``textureSize()``. You can get the size of a texture "
"the old fashioned way by passing in a uniform with the texture size yourself."
msgstr ""

#: ../../docs/tutorials/misc/gles2_gles3_differences.rst:189
msgid "Built in variables and render modes"
msgstr ""

#: ../../docs/tutorials/misc/gles2_gles3_differences.rst:191
msgid ""
"Godot also provides many built-in variables and render modes. Some cannot be "
"supported in GLES2. Below is a list of built-in variables and render modes "
"that, when written to, will have no effect or could even cause issues when "
"using the GLES2 backend."
msgstr ""

#: ../../docs/tutorials/misc/gles2_gles3_differences.rst:196
msgid "Variable / Render Mode"
msgstr ""

#: ../../docs/tutorials/misc/gles2_gles3_differences.rst:198
msgid "``ensure_correct_normals``"
msgstr ""

#: ../../docs/tutorials/misc/gles2_gles3_differences.rst:200
msgid "``INSTANCE_ID``"
msgstr ""

#: ../../docs/tutorials/misc/gles2_gles3_differences.rst:202
msgid "``DEPTH``"
msgstr ""

#: ../../docs/tutorials/misc/gles2_gles3_differences.rst:204
msgid "``ANISOTROPY``"
msgstr ""

#: ../../docs/tutorials/misc/gles2_gles3_differences.rst:206
msgid "``ANISOTROPY_FLOW``"
msgstr ""

#: ../../docs/tutorials/misc/gles2_gles3_differences.rst:208
msgid "``SSS_STRENGTH``"
msgstr ""

#: ../../docs/tutorials/misc/instancing_with_signals.rst:4
#, fuzzy
msgid "Instancing with signals"
msgstr "씬 인스턴스하기"

#: ../../docs/tutorials/misc/instancing_with_signals.rst:6
msgid ""
"Signals provide a way to decouple game objects, allowing you to avoid "
"forcing a fixed arrangement of nodes. One sign that a signal might be called "
"for is when you find yourself using ``get_parent()``. Referring directly to "
"a node's parent means that you can't easily move that node to another "
"location in the scene tree. This can be especially problematic when you are "
"instancing objects at runtime and may want to place them in an arbitrary "
"location in the running scene tree."
msgstr ""

#: ../../docs/tutorials/misc/instancing_with_signals.rst:13
msgid "Below we'll consider an example of such a situation: firing bullets."
msgstr ""

#: ../../docs/tutorials/misc/instancing_with_signals.rst:16
msgid "Shooting example"
msgstr "발사 예제"

#: ../../docs/tutorials/misc/instancing_with_signals.rst:18
#, fuzzy
msgid ""
"Consider a player character that can rotate and shoot towards the mouse. "
"Every time the mouse button is clicked, we create an instance of the bullet "
"at the player's location. See :ref:`doc_instancing` for details."
msgstr ""
"시그널 사용의 다른 예제로, 마우스 방향으로 회전하며 발사할 수 있는 플레이어"
"를 생각해봅시다. 마우스 버튼을 클릭할 때 마다, 플레이어의 위치에 총알의 인스"
"턴스를 만듭니다. 자세한 설명은 :ref:`doc_instancing`\\ 를 참고하세요."

#: ../../docs/tutorials/misc/instancing_with_signals.rst:22
msgid ""
"We'll use an ``Area2D`` for the bullet, which moves in a straight line at a "
"given velocity:"
msgstr ""

#: ../../docs/tutorials/misc/instancing_with_signals.rst:47
msgid ""
"However, if the bullets are added as children of the player, then they will "
"remain \"attached\" to the player as it rotates:"
msgstr ""
"하지만, 총알이 플레이어의 자식으로 추가된다면, 플레이어가 회전하는 것에 따라 "
"\"붙어있는 채로\" 남아있을 것입니다:"

#: ../../docs/tutorials/misc/instancing_with_signals.rst:52
msgid ""
"Instead, we need the bullets to be independent of the player's movement - "
"once fired, they should continue traveling in a straight line and the player "
"can no longer affect them. Instead of being added to the scene tree as a "
"child of the player, it makes more sense to add the bullet as a child of the "
"\"main\" game scene, which may be the player's parent or even further up the "
"tree."
msgstr ""
"대신, 총알을 플레이어의 움직임에 독립하도록 해야 합니다 - 일단 발사가 되면, "
"플레이어가 그것에 영향을 주지 않고 직선으로 계속 나아가야 합니다. 플레이어의 "
"자식으로 씬 트리에 추가하는 대신, 총알을 \"메인\" 게임 씬의 자식으로 추가하"
"는 것이 더 합리적입니다, 이렇게 하면 총알이 플레이어의 부모나 더 위로 올라갈 "
"수도 있습니다."

#: ../../docs/tutorials/misc/instancing_with_signals.rst:58
#, fuzzy
msgid "You could do this by adding the bullet to the main scene directly:"
msgstr "총알에 직접 이 코드를 추가하는 것으로 가능합니다:"

#: ../../docs/tutorials/misc/instancing_with_signals.rst:71
#, fuzzy
msgid ""
"However, this will lead to a different problem. Now if you try to test your "
"\"Player\" scene independently, it will crash on shooting, because there is "
"no parent node to access. This makes it a lot harder to test your player "
"code independently and also means that if you decide to change your main "
"scene's node structure, the player's parent may no longer be the appropriate "
"node to receive the bullets."
msgstr ""
"그러나 이것은 다른 문제를 불러올 수 있습니다. 이제 \"Player\" 씬을 독립적으"
"로 테스트해 보신다면, 액세스할 부모 노드가 없기 때문에, 발사를 할 때 팅길 것"
"입니다. 이는 플레이어 코드를 독립적으로 테스트하기가 더 까다로울 뿐만 아니"
"라, 메인 씬의 노드 구조를 바꾸기로 한다면 플레이어의 부모는 더 이상 총알을 받"
"기에 적절한 노드가 아니게 됩니다."

#: ../../docs/tutorials/misc/instancing_with_signals.rst:78
msgid ""
"The solution to this is to use a signal to \"emit\" the bullets from the "
"player. The player then has no need to \"know\" what happens to the bullets "
"after that - whatever node is connected to the signal can \"receive\" the "
"bullets and take the appropriate action to spawn them."
msgstr ""
"해결책은 플레이어로부터 총알을 \"방출\"하는 시그널을 사용하는 것입니다. 그렇"
"게 하면 플레이어는 총알이 어떻게 되는지 \"알\" 필요가 없습니다 - 이 시그널에 "
"연결된 어떤 노드라도 총알을 \"받을\" 수 있고 총알을 스폰하기 위한 적절한 행동"
"을 취해줄 수 있습니다."

#: ../../docs/tutorials/misc/instancing_with_signals.rst:83
msgid "Here is the code for the player using signals to emit the bullet:"
msgstr "이것이 시그널을 사용해 플레이어가 총알을 방출하는 코드입니다:"

#: ../../docs/tutorials/misc/instancing_with_signals.rst:128
msgid ""
"In the main scene, we then connect the player's signal (it will appear in "
"the \"Node\" tab)."
msgstr ""
"메인 씬에서, 이제 플레이어의 시그널을 연결합니다 (\"노드\" 탭에 나타날 것입니"
"다)."

#: ../../docs/tutorials/misc/instancing_with_signals.rst:152
msgid ""
"Now the bullets will maintain their own movement independent of the player's "
"rotation:"
msgstr ""
"이제 총알은 움직임을 유지한 채로 플레이어의 회전에 독립을 유지할 것입니다:"

#: ../../docs/tutorials/misc/state_design_pattern.rst:4
#, fuzzy
msgid "State design pattern"
msgstr "바인딩 패턴(Binding pattern)"

#: ../../docs/tutorials/misc/state_design_pattern.rst:9
msgid ""
"Scripting a game can be difficult when there are many states that need to "
"handled, but only one script can be attached to a node at a time. Instead of "
"creating a state machine within the player's control script, it would make "
"development simpler if the states were separated out into different classes."
msgstr ""

#: ../../docs/tutorials/misc/state_design_pattern.rst:14
msgid ""
"There are many ways to implement a state machine with Godot, and some other "
"methods are below:"
msgstr ""

#: ../../docs/tutorials/misc/state_design_pattern.rst:16
msgid ""
"The player can have a child node for each state, which are called when "
"utilized."
msgstr ""

#: ../../docs/tutorials/misc/state_design_pattern.rst:17
msgid "Enums can be used in conjunction with a match statement."
msgstr ""

#: ../../docs/tutorials/misc/state_design_pattern.rst:18
msgid ""
"The state scripts themselves could be swapped out from a node dynamically at "
"run-time."
msgstr ""

#: ../../docs/tutorials/misc/state_design_pattern.rst:20
msgid ""
"This tutorial will focus only on adding and removing nodes which have a "
"state script attached. Each state script will be an implementation of a "
"different state."
msgstr ""

#: ../../docs/tutorials/misc/state_design_pattern.rst:24
#, fuzzy
msgid ""
"There is a great resource explaining the concept of the state design pattern "
"here: https://gameprogrammingpatterns.com/state.html"
msgstr ""
"옵저버 패턴에 대해 더 알아보려면 다음 주소를 참고하세요: http://"
"gameprogrammingpatterns.com/observer.html"

#: ../../docs/tutorials/misc/state_design_pattern.rst:28
#, fuzzy
msgid "Script setup"
msgstr "GDScript"

#: ../../docs/tutorials/misc/state_design_pattern.rst:30
msgid ""
"The feature of inheritance is useful for getting started with this design "
"principle. A class should be created that describes the base features of the "
"player. For now, a player will be limited to two actions: **move left**, "
"**move right**. This means there will be two states: **idle** and **run**."
msgstr ""

#: ../../docs/tutorials/misc/state_design_pattern.rst:35
msgid "Below is the generic state, from which all other states will inherit."
msgstr ""

#: ../../docs/tutorials/misc/state_design_pattern.rst:66
msgid ""
"A few notes on the above script. First, this implementation uses a "
"``setup(change_state, animated_sprite, persistent_state)`` method to assign "
"references. These references will be instantiated in the parent of this "
"state. This helps with something in programming known as *cohesion*. The "
"state of the player does not want the responsibility of creating these "
"variables, but does want to be able to use them. However, this does make the "
"state *coupled* to the state's parent. This means that the state is highly "
"reliant on whether it has a parent which contains these variables. So, "
"remember that *coupling* and *cohesion* are important concepts when it comes "
"to code management."
msgstr ""

#: ../../docs/tutorials/misc/state_design_pattern.rst:75
msgid ""
"See the following page for more details on cohesion and coupling: https://"
"courses.cs.washington.edu/courses/cse403/96sp/coupling-cohesion.html"
msgstr ""

#: ../../docs/tutorials/misc/state_design_pattern.rst:78
msgid ""
"Second, there are some methods in the script for moving, but no "
"implementation. The state script just uses ``pass`` to show that it will not "
"execute any instructions when the methods are called. This is important."
msgstr ""

#: ../../docs/tutorials/misc/state_design_pattern.rst:81
msgid ""
"Third, the ``_physics_process(delta)`` method is actually implemented here. "
"This allows the states to have a default ``_phyics_process(delta)`` "
"implementation where ``velocity`` is used to move the player. The way that "
"the states can modify the movement of the player is to use the ``velocity`` "
"variable defined in their base class."
msgstr ""

#: ../../docs/tutorials/misc/state_design_pattern.rst:85
msgid ""
"Finally, this script is actually being designated as a class named "
"``State``. This makes refactoring the code easier, since the file path from "
"using the ``load()`` and ``preload()`` functions in godot will not be needed."
msgstr ""

#: ../../docs/tutorials/misc/state_design_pattern.rst:88
msgid ""
"So, now that there is a base state, the two states discussed earlier can be "
"implemented."
msgstr ""

#: ../../docs/tutorials/misc/state_design_pattern.rst:154
msgid ""
"The since the ``Run`` and ``Idle`` states extend from ``State`` which "
"extends ``Node2D``, the function ``_physics_process(delta)`` is called from "
"the **bottom-up** meaning ``Run`` and ``Idle`` will call their "
"implementation of ``_physics_process(delta)``, then ``State`` will call its "
"implementation, then ``Node2D`` will call its own implementation and so on. "
"This may seem strange, but it is only relevant for predefined functions such "
"as ``_ready()``, ``_process(delta)``, etc. Custom functions use the normal "
"inheritance rules of overriding the base implementation."
msgstr ""

#: ../../docs/tutorials/misc/state_design_pattern.rst:161
msgid ""
"There is a round-about method for obtaining a state instance. A state "
"factory can be used."
msgstr ""

#: ../../docs/tutorials/misc/state_design_pattern.rst:184
msgid ""
"This will look for states in a dictionary and return the state if found."
msgstr ""

#: ../../docs/tutorials/misc/state_design_pattern.rst:186
msgid ""
"Now that all the states are defined with their own scripts, it is time to "
"figure out how those references that passed to them will be instantiated. "
"Since these references will not change it makes sense to call this new "
"script ``persistent_state.gd``."
msgstr ""

#: ../../docs/tutorials/misc/state_design_pattern.rst:229
msgid ""
"The ``persistent_state.gd`` script contains code for detecting input. This "
"was to make the tutorial simple, but it is not usually best practice to do "
"this."
msgstr ""

#: ../../docs/tutorials/misc/state_design_pattern.rst:235
msgid ""
"This tutorial made an assumption that the node it would be attached to "
"contained a child node which is an :ref:`AnimatedSprite "
"<class_AnimatedSprite>`. There is also the assumption that this :ref:"
"`AnimatedSprite <class_AnimatedSprite>` has at least two animations, the "
"idle and run animations. Also, the top-level node is assumed to be a :ref:"
"`KinematicBody2D <class_KinematicBody2D>`."
msgstr ""

#: ../../docs/tutorials/misc/state_design_pattern.rst:242
msgid ""
"The zip file of the llama used in this tutorial is :download:`here <files/"
"llama.zip>`. The source was from `piskel_llama <https://www.piskelapp.com/p/"
"agxzfnBpc2tlbC1hcHByEwsSBlBpc2tlbBiAgICfx5ygCQw/edit>`_, but I couldn't find "
"the original creator information on that page though... There is also a good "
"tutorial for sprite animation already. See :ref:`2D Sprite Animation "
"<doc_2d_sprite_animation>`."
msgstr ""

#: ../../docs/tutorials/misc/state_design_pattern.rst:247
msgid ""
"So, the only script that must be attached is ``persistent_state.gd``, which  "
"should be attached to the top node of the player, which is a :ref:"
"`KinematicBody2D <class_KinematicBody2D>`."
msgstr ""

#: ../../docs/tutorials/misc/state_design_pattern.rst:254
msgid ""
"Now the player has utilized the state design pattern to implement its two "
"different states. The nice part of this pattern is that if one wanted to add "
"another state, then it would involve creating another class that need only "
"focus on itself and how it changes to another state. Each state is "
"functionally separated and instantiated dynamically."
msgstr ""

#: ../../docs/tutorials/debug/index.rst:2
msgid "Debug"
msgstr "디버그"

#: ../../docs/tutorials/debug/overview_of_debugging_tools.rst:4
msgid "Overview of debugging tools"
msgstr ""

#: ../../docs/tutorials/debug/overview_of_debugging_tools.rst:6
msgid ""
"This guide will give you an overview of the available debugging tools in the "
"engine."
msgstr ""

#: ../../docs/tutorials/debug/overview_of_debugging_tools.rst:9
msgid ""
"Godot comes with a powerful debugger and profilers to track down bugs, "
"inspect your game at runtime, monitor essential metrics, and measure "
"performances. It also offers options to visualize collision boxes and "
"navigation polygons in the running game."
msgstr ""

#: ../../docs/tutorials/debug/overview_of_debugging_tools.rst:14
msgid ""
"Finally, you have options to debug the game running on a remote device and "
"to reload changes to your scenes or your code while the game is running."
msgstr ""

#: ../../docs/tutorials/debug/overview_of_debugging_tools.rst:18
#, fuzzy
msgid "Debug menu options"
msgstr "**디버그 설정**"

#: ../../docs/tutorials/debug/overview_of_debugging_tools.rst:20
msgid ""
"There are a few common debug options you can toggle on or off when running "
"your game in the editor, which can help you in debugging your game."
msgstr ""

#: ../../docs/tutorials/debug/overview_of_debugging_tools.rst:23
msgid "You can find these options in the **Debug** editor menu."
msgstr ""

#: ../../docs/tutorials/debug/overview_of_debugging_tools.rst:27
msgid "Here are the descriptions of the options:"
msgstr ""

#: ../../docs/tutorials/debug/overview_of_debugging_tools.rst:30
msgid "Deploy with Remote Debug"
msgstr "원격 디버그와 함께 배포"

#: ../../docs/tutorials/debug/overview_of_debugging_tools.rst:32
msgid ""
"When exporting and deploying, the resulting executable will attempt to "
"connect to the IP of your computer for debugging."
msgstr ""

#: ../../docs/tutorials/debug/overview_of_debugging_tools.rst:36
msgid "Small Deploy with Network FS"
msgstr "네트워크 파일 시스템을 사용하여 작게 배포"

#: ../../docs/tutorials/debug/overview_of_debugging_tools.rst:38
msgid ""
"This option speeds up testing for games with a large footprint on remote "
"devices."
msgstr ""

#: ../../docs/tutorials/debug/overview_of_debugging_tools.rst:40
msgid ""
"When **Small Deploy with Network FS** is on, instead of exporting the full "
"game, deploying the game builds a minimal executable. The editor then "
"provides files from the project over the network."
msgstr ""

#: ../../docs/tutorials/debug/overview_of_debugging_tools.rst:44
msgid ""
"Also, on Android, the game is deployed using the USB cable to speed up "
"deployment."
msgstr ""

#: ../../docs/tutorials/debug/overview_of_debugging_tools.rst:47
msgid "Visible Collision Shapes"
msgstr "충돌 모양 보이기"

#: ../../docs/tutorials/debug/overview_of_debugging_tools.rst:49
msgid ""
"This option makes collision shapes and raycast nodes visible in the running "
"game."
msgstr ""

#: ../../docs/tutorials/debug/overview_of_debugging_tools.rst:52
msgid "Visible Navigation"
msgstr "내비게이션 보이기"

#: ../../docs/tutorials/debug/overview_of_debugging_tools.rst:54
msgid "Navigation meshes and polygons will be visible on the running game."
msgstr ""

#: ../../docs/tutorials/debug/overview_of_debugging_tools.rst:57
msgid "Sync Scene Changes"
msgstr "씬 변경 사항 동기화"

#: ../../docs/tutorials/debug/overview_of_debugging_tools.rst:59
msgid ""
"With this option, any change you make to a scene in the editor at runtime "
"appears instantly. When used remotely on a device, this is more efficient "
"with the network filesystem."
msgstr ""

#: ../../docs/tutorials/debug/overview_of_debugging_tools.rst:64
msgid "Sync Script Changes"
msgstr "스크립트 변경 사항 동기화"

#: ../../docs/tutorials/debug/overview_of_debugging_tools.rst:66
msgid ""
"Any script that is saved will be reloaded on the running game. When used "
"remotely on a device, this is more efficient with the network filesystem."
msgstr ""

#: ../../docs/tutorials/debug/overview_of_debugging_tools.rst:70
msgid "Script editor debug tools and options"
msgstr ""

#: ../../docs/tutorials/debug/overview_of_debugging_tools.rst:72
msgid ""
"The script editor has its own set of debug tools for use with breakpoints "
"and two options. The breakpoint tools can also be found in the **Debugger** "
"tab of the debugger."
msgstr ""

#: ../../docs/tutorials/debug/overview_of_debugging_tools.rst:78
msgid ""
"The **Break** button causes a break in the script like a breakpoint would. "
"**Continue** makes the game continue after pausing at a breakpoint. **Step "
"Over** goes to the next line of code, and **Step Into** goes into a function "
"if possible. Otherwise, it does the same thing as **Step Over**."
msgstr ""

#: ../../docs/tutorials/debug/overview_of_debugging_tools.rst:83
msgid ""
"The **Keep Debugger Open** option keeps the debugger open after a scene has "
"been closed. And the **Debug with External Editor** option lets you debug "
"your game with an external editor."
msgstr ""

#: ../../docs/tutorials/debug/overview_of_debugging_tools.rst:88
#, fuzzy
msgid "Debug project settings"
msgstr "프로젝트 설정 재정의하기"

#: ../../docs/tutorials/debug/overview_of_debugging_tools.rst:90
msgid ""
"In the project settings, there is a **Debug** category with three "
"subcategories which control different things."
msgstr ""

#: ../../docs/tutorials/debug/overview_of_debugging_tools.rst:94
#, fuzzy
msgid "Settings"
msgstr "문자열"

#: ../../docs/tutorials/debug/overview_of_debugging_tools.rst:96
msgid ""
"These are some general settings such as printing the current FPS to the "
"**Output** panel, the maximum amount of functions when profiling and others."
msgstr ""

#: ../../docs/tutorials/debug/overview_of_debugging_tools.rst:103
msgid ""
"These settings allow you to toggle specific GDScript warnings, such as for "
"unused variables. You can also turn off warnings completely."
msgstr ""

#: ../../docs/tutorials/debug/overview_of_debugging_tools.rst:107
#, fuzzy
msgid "Shapes"
msgstr "셰이프 키(Shape Key)"

#: ../../docs/tutorials/debug/overview_of_debugging_tools.rst:109
msgid ""
"Shapes are where you can adjust the color of shapes that only appear for "
"debugging purposes, such as collision and navigation shapes."
msgstr ""

#: ../../docs/tutorials/debug/overview_of_debugging_tools.rst:113
msgid "Debugging tools"
msgstr ""

#: ../../docs/tutorials/debug/overview_of_debugging_tools.rst:115
msgid ""
"You can find the debugger in the bottom panel. Click on **Debugger** to open "
"it."
msgstr ""

#: ../../docs/tutorials/debug/overview_of_debugging_tools.rst:119
msgid ""
"The debugger is split into several tabs, each focusing on a specific task."
msgstr ""

#: ../../docs/tutorials/debug/overview_of_debugging_tools.rst:122
msgid "Debugger"
msgstr "디버거"

#: ../../docs/tutorials/debug/overview_of_debugging_tools.rst:124
msgid ""
"The debugger tab opens automatically when the GDScript compiler reaches a "
"breakpoint in your code."
msgstr ""

#: ../../docs/tutorials/debug/overview_of_debugging_tools.rst:127
msgid ""
"It gives you a `stack trace <https://en.wikipedia.org/wiki/Stack_trace>`__, "
"information about the state of the object, and buttons to control the "
"program's execution."
msgstr ""

#: ../../docs/tutorials/debug/overview_of_debugging_tools.rst:131
msgid "You can use the buttons in the top-right to:"
msgstr ""

#: ../../docs/tutorials/debug/overview_of_debugging_tools.rst:133
msgid ""
"Skip all breakpoints. That way, you can save breakpoints for future "
"debugging sessions."
msgstr ""

#: ../../docs/tutorials/debug/overview_of_debugging_tools.rst:135
msgid "Copy the current error message."
msgstr ""

#: ../../docs/tutorials/debug/overview_of_debugging_tools.rst:136
msgid ""
"**Step Into** the code. This button takes you to the next line of code, and "
"if it's a function, it steps line-by-line through the function."
msgstr ""

#: ../../docs/tutorials/debug/overview_of_debugging_tools.rst:138
msgid ""
"**Step Over** the code. This button goes to the next line of code, but it "
"doesn't step line-by-line through functions."
msgstr ""

#: ../../docs/tutorials/debug/overview_of_debugging_tools.rst:140
msgid "**Break**. This button pauses the game's execution."
msgstr ""

#: ../../docs/tutorials/debug/overview_of_debugging_tools.rst:141
msgid "**Continue**. This button resumes the game after a breakpoint or pause."
msgstr ""

#: ../../docs/tutorials/debug/overview_of_debugging_tools.rst:144
msgid "Errors"
msgstr "오류"

#: ../../docs/tutorials/debug/overview_of_debugging_tools.rst:146
msgid ""
"This is where errors and warning messages are printed while running the game."
msgstr ""

#: ../../docs/tutorials/debug/overview_of_debugging_tools.rst:149
msgid "Profiler"
msgstr "프로파일러"

#: ../../docs/tutorials/debug/overview_of_debugging_tools.rst:151
msgid ""
"The debugger comes with three profilers for your processor, network "
"operations, and video memory."
msgstr ""

#: ../../docs/tutorials/debug/overview_of_debugging_tools.rst:154
msgid ""
"The profiler is used to show why individual frames take as long as they do "
"to process and render."
msgstr ""

#: ../../docs/tutorials/debug/overview_of_debugging_tools.rst:157
msgid ""
"Unlike other debugging tools, the profiler does not start automatically. It "
"can be started at any time during gameplay by pressing the start button. You "
"can even start the profiler before opening the game to profile startup "
"performance. It can also be started and stopped while the game is running "
"without losing information from when it was last running. The information it "
"records won't go away unless you click clear, or close the game, reopen it "
"and start the profiler again."
msgstr ""

#: ../../docs/tutorials/debug/overview_of_debugging_tools.rst:165
msgid ""
"After starting and stopping the profiler you should see things being kept "
"track of on the left and a graph on the right. The items listed on the left "
"are everything that contributes to frame time, and they should each have a "
"value for time and calls for the current frame you are looking at."
msgstr ""

#: ../../docs/tutorials/debug/overview_of_debugging_tools.rst:170
msgid ""
"The frame number in the top right tells you which frame you are currently "
"looking at. You can change this by using the up or down arrows, typing in "
"the frame number, or clicking on the graph."
msgstr ""

#: ../../docs/tutorials/debug/overview_of_debugging_tools.rst:174
msgid ""
"If you want to add something to your graph, or think it looks too cluttered, "
"you can check and uncheck the box next to an item to add or remove it from "
"the graph."
msgstr ""

#: ../../docs/tutorials/debug/overview_of_debugging_tools.rst:179
msgid "Network Profiler"
msgstr "네트워크 프로파일러"

#: ../../docs/tutorials/debug/overview_of_debugging_tools.rst:181
msgid ""
"The Network Profiler contains a list of all the nodes that communicate over "
"the multiplayer API and, for each one, some counters on the amount of "
"incoming and outgoing network interactions. It also features a bandwidth "
"meter that displays the total bandwidth usage at any given moment."
msgstr ""

#: ../../docs/tutorials/debug/overview_of_debugging_tools.rst:187
msgid "Monitors"
msgstr "모니터"

#: ../../docs/tutorials/debug/overview_of_debugging_tools.rst:189
msgid ""
"The monitors are graphs of several aspects of the game while its running "
"such as FPS, memory usage, how many nodes are in a scene and more. All "
"monitors keep track of stats automatically, so even if one monitor isn't "
"open while the game is running, you can open it later and see how the values "
"changed."
msgstr ""

#: ../../docs/tutorials/debug/overview_of_debugging_tools.rst:195
#, fuzzy
msgid "Video Memory"
msgstr "비디오 메모리"

#: ../../docs/tutorials/debug/overview_of_debugging_tools.rst:197
msgid ""
"The **Video Mem** tab lists the video memory usage of the running game and "
"the resources using it."
msgstr ""

#: ../../docs/tutorials/debug/overview_of_debugging_tools.rst:201
msgid "Misc"
msgstr "기타"

#: ../../docs/tutorials/debug/overview_of_debugging_tools.rst:203
msgid ""
"The **Misc** tab contains tools to identify the control nodes you are "
"clicking at runtime:"
msgstr ""

#: ../../docs/tutorials/debug/overview_of_debugging_tools.rst:206
msgid ""
"**Clicked Control** tells you where the clicked node is in the scene tree."
msgstr ""

#: ../../docs/tutorials/debug/overview_of_debugging_tools.rst:207
msgid "**Clicked Control Type** tells you the type of the node you clicked is."
msgstr ""

#: ../../docs/tutorials/debug/overview_of_debugging_tools.rst:210
msgid "Remote in scene dock"
msgstr ""

#: ../../docs/tutorials/debug/overview_of_debugging_tools.rst:212
msgid ""
"When running a game in the editor two options appear at the top of the "
"**Scene** dock, **Remote** and **Local**. While using **Remote** you can "
"inspect or change the nodes' parameters in the running project."
msgstr ""

#: ../../docs/tutorials/debug/overview_of_debugging_tools.rst:218
msgid ""
"Some editor settings related to debugging can be found inside the **Editor "
"Settings**, under the **Network > Debug** and **Debugger** sections."
msgstr ""

#: ../../docs/tutorials/legal/complying_with_licenses.rst:4
#, fuzzy
msgid "Complying with Licenses"
msgstr "뼈대 완성하기"

#: ../../docs/tutorials/legal/complying_with_licenses.rst:7
msgid "What are licenses?"
msgstr ""

#: ../../docs/tutorials/legal/complying_with_licenses.rst:9
msgid ""
"Godot is created and distributed under the `MIT License <https://opensource."
"org/licenses/MIT>`_. It doesn't have a sole owner either, as every "
"contributor that submits code to the project does it under this same license "
"and keeps ownership of the contribution."
msgstr ""

#: ../../docs/tutorials/legal/complying_with_licenses.rst:11
msgid ""
"The license is the legal requirement for you (or your company) to use and "
"distribute the software (and derivative projects, including games made with "
"it). Your game or project can have a different license, but it still needs "
"to comply with the original one."
msgstr ""

#: ../../docs/tutorials/legal/complying_with_licenses.rst:17
msgid ""
"In the case of the MIT license, the only requirement is to include the "
"license text somewhere in your game or derivative project."
msgstr ""

#: ../../docs/tutorials/legal/complying_with_licenses.rst:19
msgid "This text reads as follows:"
msgstr ""

#: ../../docs/tutorials/legal/complying_with_licenses.rst:22
#, fuzzy
msgid "This game uses Godot Engine, available under the following license:"
msgstr "적 씬은 다음 노드들을 사용할 것입니다:"

#: ../../docs/tutorials/legal/complying_with_licenses.rst:24
msgid ""
"Copyright (c) 2007-2020 Juan Linietsky, Ariel Manzur. Copyright (c) "
"2014-2020 Godot Engine contributors."
msgstr ""

#: ../../docs/tutorials/legal/complying_with_licenses.rst:27
#: ../../docs/tutorials/legal/complying_with_licenses.rst:88
msgid ""
"Permission is hereby granted, free of charge, to any person obtaining a copy "
"of this software and associated documentation files (the \"Software\"), to "
"deal in the Software without restriction, including without limitation the "
"rights to use, copy, modify, merge, publish, distribute, sublicense, and/or "
"sell copies of the Software, and to permit persons to whom the Software is "
"furnished to do so, subject to the following conditions:"
msgstr ""

#: ../../docs/tutorials/legal/complying_with_licenses.rst:29
#: ../../docs/tutorials/legal/complying_with_licenses.rst:90
msgid ""
"The above copyright notice and this permission notice shall be included in "
"all copies or substantial portions of the Software."
msgstr ""

#: ../../docs/tutorials/legal/complying_with_licenses.rst:31
#: ../../docs/tutorials/legal/complying_with_licenses.rst:92
msgid ""
"THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR "
"IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, "
"FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE "
"AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER "
"LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING "
"FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS "
"IN THE SOFTWARE."
msgstr ""

#: ../../docs/tutorials/legal/complying_with_licenses.rst:34
msgid ""
"Your games do not need to be under the same license. You are free to release "
"your Godot projects under any license and to create commercial games with "
"the engine."
msgstr ""

#: ../../docs/tutorials/legal/complying_with_licenses.rst:37
#, fuzzy
msgid "Inclusion"
msgstr "결론"

#: ../../docs/tutorials/legal/complying_with_licenses.rst:39
msgid ""
"The license does not specify how it has to be included, so anything is valid "
"as long as it can be displayed under some condition. These are the most "
"common approaches (only need to implement one of them, not all)."
msgstr ""

#: ../../docs/tutorials/legal/complying_with_licenses.rst:42
msgid "Credits screen"
msgstr ""

#: ../../docs/tutorials/legal/complying_with_licenses.rst:44
msgid ""
"Include the above license text somewhere in the credits screen. It can be at "
"the bottom after showing the rest of the credits. Most large studios use "
"this approach with open source licenses."
msgstr ""

#: ../../docs/tutorials/legal/complying_with_licenses.rst:47
#, fuzzy
msgid "Licenses screen"
msgstr "라이선스"

#: ../../docs/tutorials/legal/complying_with_licenses.rst:49
msgid ""
"Some games have a special menu (often in the settings) to display licenses."
msgstr ""

#: ../../docs/tutorials/legal/complying_with_licenses.rst:52
msgid "Output log"
msgstr ""

#: ../../docs/tutorials/legal/complying_with_licenses.rst:54
msgid ""
"Just printing the licensing text using a :ref:`print() "
"<class_@GDScript_method_print>` function may be enough on platforms where a "
"global output log is readable (as an example, mobile devices)."
msgstr ""

#: ../../docs/tutorials/legal/complying_with_licenses.rst:57
msgid "Accompanying file"
msgstr ""

#: ../../docs/tutorials/legal/complying_with_licenses.rst:59
msgid ""
"If the game is distributed on desktop operating systems, a file containing "
"the license can be added to the software that is installed to the user PC."
msgstr ""

#: ../../docs/tutorials/legal/complying_with_licenses.rst:62
#, fuzzy
msgid "Printed manual"
msgstr "편집기 매뉴얼"

#: ../../docs/tutorials/legal/complying_with_licenses.rst:64
msgid ""
"If the game includes printed manuals, license text can be included there."
msgstr ""

#: ../../docs/tutorials/legal/complying_with_licenses.rst:67
#, fuzzy
msgid "Third Party licenses"
msgstr "타사 도구"

#: ../../docs/tutorials/legal/complying_with_licenses.rst:69
msgid ""
"Godot itself contains software written by `third parties <https://github.com/"
"godotengine/godot/blob/master/COPYRIGHT.txt>`_. Most of it does not require "
"license inclusion, but some do. Make sure to do it if you are using them. "
"Here is a list of which ones require it:"
msgstr ""

#: ../../docs/tutorials/legal/complying_with_licenses.rst:72
#, fuzzy
msgid "FreeType"
msgstr "타입"

#: ../../docs/tutorials/legal/complying_with_licenses.rst:74
msgid ""
"Godot uses `FreeType <https://www.freetype.org/>`_ to render fonts. Its "
"license requires attribution, so the following text must be included "
"together with the Godot license:"
msgstr ""

#: ../../docs/tutorials/legal/complying_with_licenses.rst:77
msgid ""
"Portions of this software are copyright © <year> The FreeType Project (www."
"freetype.org).  All rights reserved."
msgstr ""

#: ../../docs/tutorials/legal/complying_with_licenses.rst:81
msgid "ENet"
msgstr ""

#: ../../docs/tutorials/legal/complying_with_licenses.rst:83
msgid ""
"If the project being created is a multiplayer game using the `ENet <http://"
"enet.bespin.org/>`_ driver, ENet has similar licensing terms as Godot"
msgstr ""

#: ../../docs/tutorials/legal/complying_with_licenses.rst:86
msgid "Copyright (c) 2002-2016 Lee Salzman"
msgstr ""

#: ../../docs/tutorials/legal/complying_with_licenses.rst:95
msgid "MBedTLS"
msgstr ""

#: ../../docs/tutorials/legal/complying_with_licenses.rst:97
msgid ""
"If the project is done with Godot 3.1 or above and it utilizes SSL (usually "
"through HTTP requests), the `MBedTLS <https://tls.mbed.org>`_ Apache license "
"needs to be complied by including the following text:"
msgstr ""

#: ../../docs/tutorials/legal/complying_with_licenses.rst:100
msgid "MBedTLS is Copyright (C) 2013-2019 ARM"
msgstr ""

#: ../../docs/tutorials/legal/complying_with_licenses.rst:102
msgid ""
"Licensed under the Apache License, Version 2.0 (the \"License\"); you may "
"not use this file except in compliance with the License. You may obtain a "
"copy of the License at"
msgstr ""

#: ../../docs/tutorials/legal/complying_with_licenses.rst:104
msgid "http://www.apache.org/licenses/LICENSE-2.0"
msgstr ""

#: ../../docs/tutorials/legal/complying_with_licenses.rst:106
msgid ""
"Unless required by applicable law or agreed to in writing, software "
"distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT "
"WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the "
"License for the specific language governing permissions and limitations "
"under the License."
msgstr ""

#: ../../docs/tutorials/legal/complying_with_licenses.rst:108
msgid ""
"Keep in mind that Godot 2.x and 3.0 use `OpenSSL <https://www.openssl.org>`_ "
"instead."
msgstr ""

#: ../../docs/development/compiling/getting_source.rst:4
msgid "Getting the source"
msgstr ""

#: ../../docs/development/compiling/getting_source.rst:7
msgid "Downloading the Godot source code"
msgstr ""

#: ../../docs/development/compiling/getting_source.rst:9
msgid ""
"Before :ref:`getting into the SCons build system "
"<doc_introduction_to_the_buildsystem>` and compiling Godot, you need to "
"actually download the Godot source code."
msgstr ""

#: ../../docs/development/compiling/getting_source.rst:12
msgid ""
"The source code is available on `GitHub <https://github.com/godotengine/"
"godot>`__ and while you can manually download it via the website, in general "
"you want to do it via the ``git`` version control system."
msgstr ""

#: ../../docs/development/compiling/getting_source.rst:16
msgid ""
"If you don't know much about ``git`` yet, there are a great number of "
"`tutorials <https://git-scm.com/book>`__ available on various websites."
msgstr ""

#: ../../docs/development/compiling/getting_source.rst:19
msgid ""
"In general, you need to install ``git`` and/or one of the various GUI "
"clients."
msgstr ""

#: ../../docs/development/compiling/getting_source.rst:21
msgid ""
"Afterwards, to get the latest development version of the Godot source code "
"(the unstable ``master`` branch), you can use ``git clone``."
msgstr ""

#: ../../docs/development/compiling/getting_source.rst:24
msgid ""
"If you are using the ``git`` command line client, this is done by entering "
"the following in a terminal:"
msgstr ""

#: ../../docs/development/compiling/getting_source.rst:31
msgid ""
"For any stable release, visit the `release page <https://github.com/"
"godotengine/godot/releases>`__ and click on the link for the release you "
"want. You can then download and extract the source from the download link on "
"the page."
msgstr ""

#: ../../docs/development/compiling/getting_source.rst:35
msgid ""
"There are also generally branches besides ``master`` for each major version."
msgstr ""

#: ../../docs/development/compiling/getting_source.rst:37
msgid ""
"After downloading the Godot source code, you can :ref:`continue to compiling "
"Godot <doc_introduction_to_the_buildsystem>`."
msgstr ""

#: ../../docs/development/compiling/introduction_to_the_buildsystem.rst:4
msgid "Introduction to the buildsystem"
msgstr ""

#: ../../docs/development/compiling/introduction_to_the_buildsystem.rst:9
msgid "SCons"
msgstr ""

#: ../../docs/development/compiling/introduction_to_the_buildsystem.rst:11
msgid ""
"Godot uses `SCons <https://www.scons.org/>`__ to build. We love it, we are "
"not changing it for anything else. We are not even sure other build systems "
"are up to the task of building Godot. We constantly get requests to move the "
"build system to CMake, or Visual Studio, but this is not going to happen. "
"There are many reasons why we have chosen SCons over other alternatives, for "
"example:"
msgstr ""

#: ../../docs/development/compiling/introduction_to_the_buildsystem.rst:18
msgid ""
"Godot can be compiled for a dozen different platforms: all PC platforms, all "
"mobile platforms, many consoles, and WebAssembly."
msgstr ""

#: ../../docs/development/compiling/introduction_to_the_buildsystem.rst:20
msgid ""
"Developers often need to compile for several of the platforms **at the same "
"time**, or even different targets of the same platform. They can't afford "
"reconfiguring and rebuilding the project each time. SCons can do this with "
"no sweat, without breaking the builds."
msgstr ""

#: ../../docs/development/compiling/introduction_to_the_buildsystem.rst:24
msgid ""
"SCons will *never* break a build no matter how many changes, configurations, "
"additions, removals etc. You have more chances to die struck by lightning "
"than needing to clean and rebuild in SCons."
msgstr ""

#: ../../docs/development/compiling/introduction_to_the_buildsystem.rst:27
msgid ""
"Godot build process is not simple. Several files are generated by code "
"(binders), others are parsed (shaders), and others need to offer "
"customization (plugins). This requires complex logic which is easier to "
"write in an actual programming language (like Python) rather than using a "
"mostly macro-based language only meant for building."
msgstr ""

#: ../../docs/development/compiling/introduction_to_the_buildsystem.rst:32
msgid ""
"Godot build process makes heavy use of cross-compiling tools. Each platform "
"has a specific detection process, and all these must be handled as specific "
"cases with special code written for each."
msgstr ""

#: ../../docs/development/compiling/introduction_to_the_buildsystem.rst:36
msgid ""
"So, please try to keep an open mind and get at least a little familiar with "
"it if you are planning to build Godot yourself."
msgstr ""

#: ../../docs/development/compiling/introduction_to_the_buildsystem.rst:42
msgid ""
"Please refer to the documentation for :ref:`doc_compiling_for_android`, :ref:"
"`doc_compiling_for_ios`, :ref:`doc_compiling_for_osx`, :ref:"
"`doc_compiling_for_uwp`, :ref:`doc_compiling_for_web`, :ref:"
"`doc_compiling_for_windows` and :ref:`doc_compiling_for_x11`."
msgstr ""

#: ../../docs/development/compiling/introduction_to_the_buildsystem.rst:47
msgid ""
"Note that for **Windows/Visual Studio**, you need to use ``x86_x64 Cross "
"Tools Command Prompt for VS 2017`` or similar, depending on your install, "
"instead of the standard Windows command prompt to enter the commands below."
msgstr ""

#: ../../docs/development/compiling/introduction_to_the_buildsystem.rst:52
msgid "Platform selection"
msgstr ""

#: ../../docs/development/compiling/introduction_to_the_buildsystem.rst:54
msgid ""
"Godot's build system will begin by detecting the platforms it can build for. "
"If not detected, the platform will simply not appear on the list of "
"available platforms. The build requirements for each platform are described "
"in the rest of this tutorial section."
msgstr ""

#: ../../docs/development/compiling/introduction_to_the_buildsystem.rst:59
msgid ""
"SCons is invoked by just calling ``scons``. If no platform is specified, "
"SCons will detect the target platform automatically based on the host "
"platform. It will then start building for the target platform right away."
msgstr ""

#: ../../docs/development/compiling/introduction_to_the_buildsystem.rst:63
msgid "To list the available target platforms, use ``scons platform=list``::"
msgstr ""

#: ../../docs/development/compiling/introduction_to_the_buildsystem.rst:77
msgid ""
"To build for a platform (for example, x11), run with the ``platform=`` (or "
"``p=`` to make it short) argument:"
msgstr ""

#: ../../docs/development/compiling/introduction_to_the_buildsystem.rst:84
msgid ""
"This will start the build process, which will take a while. If you want "
"SCons to build faster, use the ``-j <cores>`` parameter to specify how many "
"cores will be used for the build. Or leave it using one core, so you can use "
"your computer for something else :)"
msgstr ""

#: ../../docs/development/compiling/introduction_to_the_buildsystem.rst:89
msgid "Example for using 4 cores:"
msgstr ""

#: ../../docs/development/compiling/introduction_to_the_buildsystem.rst:96
msgid "Resulting binary"
msgstr ""

#: ../../docs/development/compiling/introduction_to_the_buildsystem.rst:98
msgid ""
"The resulting binaries will be placed in the ``bin/`` subdirectory, "
"generally with this naming convention::"
msgstr ""

#: ../../docs/development/compiling/introduction_to_the_buildsystem.rst:103
#, fuzzy
msgid "For the previous build attempt, the result would look like this::"
msgstr "지금까지, update\\_health 메서드는 이렇게 보입니다:"

#: ../../docs/development/compiling/introduction_to_the_buildsystem.rst:108
msgid ""
"This means that the binary is for X11, is not optimized, has tools (the "
"whole editor) compiled in, and is meant for 64 bits."
msgstr ""

#: ../../docs/development/compiling/introduction_to_the_buildsystem.rst:111
#, fuzzy
msgid "A Windows binary with the same configuration will look like this::"
msgstr ""
"그리고 마침내, 씬을 실행시키면, 애니메이션은 이렇게 보여야 할 것입니다:"

#: ../../docs/development/compiling/introduction_to_the_buildsystem.rst:116
msgid ""
"Copy that binary to any location you like, as it contains the project "
"manager, editor and all means to execute the game. However, it lacks the "
"data to export it to the different platforms. For that the export templates "
"are needed (which can be either downloaded from `godotengine.org <https://"
"godotengine.org/>`__, or you can build them yourself)."
msgstr ""

#: ../../docs/development/compiling/introduction_to_the_buildsystem.rst:122
msgid ""
"Aside from that, there are a few standard options that can be set in all "
"build targets, and which will be explained below."
msgstr ""

#: ../../docs/development/compiling/introduction_to_the_buildsystem.rst:130
msgid ""
"Tools are enabled by default in all PC targets (Linux, Windows, macOS), "
"disabled for everything else. Disabling tools produces a binary that can run "
"projects but that does not include the editor or the project manager."
msgstr ""

#: ../../docs/development/compiling/introduction_to_the_buildsystem.rst:142
msgid "Target"
msgstr "Target(대상)"

#: ../../docs/development/compiling/introduction_to_the_buildsystem.rst:144
msgid "Target controls optimization and debug flags. Each mode means:"
msgstr ""

#: ../../docs/development/compiling/introduction_to_the_buildsystem.rst:146
msgid ""
"**debug**: Build with C++ debugging symbols, runtime checks (performs checks "
"and reports error) and none to little optimization."
msgstr ""

#: ../../docs/development/compiling/introduction_to_the_buildsystem.rst:148
msgid ""
"**release_debug**: Build without C++ debugging symbols and optimization, but "
"keep the runtime checks (performs checks and reports errors). Official "
"editor binaries use this configuration."
msgstr ""

#: ../../docs/development/compiling/introduction_to_the_buildsystem.rst:151
msgid ""
"**release**: Build without symbols, with optimization and with little to no "
"runtime checks. This target can't be used together with ``tools=yes``, as "
"the editor requires some debug functionality and run-time checks to run."
msgstr ""

#: ../../docs/development/compiling/introduction_to_the_buildsystem.rst:160
msgid ""
"This flag appends the ``.debug`` suffix (for debug), or ``.tools`` (for "
"debug with tools enabled). When optimization is enabled (release), it "
"appends the ``.opt`` suffix."
msgstr ""

#: ../../docs/development/compiling/introduction_to_the_buildsystem.rst:165
msgid "Bits"
msgstr ""

#: ../../docs/development/compiling/introduction_to_the_buildsystem.rst:167
msgid ""
"Bits is meant to control the CPU or OS version intended to run the binaries. "
"It is focused mostly on desktop platforms and ignored everywhere else."
msgstr ""

#: ../../docs/development/compiling/introduction_to_the_buildsystem.rst:171
msgid "**32**: Build binaries for 32-bit platforms."
msgstr ""

#: ../../docs/development/compiling/introduction_to_the_buildsystem.rst:172
msgid "**64**: Build binaries for 64-bit platforms."
msgstr ""

#: ../../docs/development/compiling/introduction_to_the_buildsystem.rst:173
msgid "**default**: Build for the architecture that matches the host platform."
msgstr ""

#: ../../docs/development/compiling/introduction_to_the_buildsystem.rst:179
msgid ""
"This flag appends ``.32`` or ``.64`` suffixes to resulting binaries when "
"relevant. If ``bits=default`` is used, the suffix will match the detected "
"architecture."
msgstr ""

#: ../../docs/development/compiling/introduction_to_the_buildsystem.rst:184
msgid "Other build options"
msgstr ""

#: ../../docs/development/compiling/introduction_to_the_buildsystem.rst:186
msgid ""
"There are several other build options that you can use to configure the way "
"Godot should be built (compiler, debug options, etc.) as well as the "
"features to include/disable."
msgstr ""

#: ../../docs/development/compiling/introduction_to_the_buildsystem.rst:190
msgid ""
"Check the output of ``scons --help`` for details about each option for the "
"version you are willing to compile."
msgstr ""

#: ../../docs/development/compiling/introduction_to_the_buildsystem.rst:196
msgid ""
"Official export templates are downloaded from the Godot Engine site: "
"`godotengine.org <https://godotengine.org/>`__. However, you might want to "
"build them yourself (in case you want newer ones, you are using custom "
"modules, or simply don't trust your own shadow)."
msgstr ""

#: ../../docs/development/compiling/introduction_to_the_buildsystem.rst:201
msgid ""
"If you download the official export templates package and unzip it, you will "
"notice that most files are optimized binaries or packages for each platform:"
msgstr ""

#: ../../docs/development/compiling/introduction_to_the_buildsystem.rst:224
msgid ""
"To create those yourself, follow the instructions detailed for each platform "
"in this same tutorial section. Each platform explains how to create its own "
"template."
msgstr ""

#: ../../docs/development/compiling/introduction_to_the_buildsystem.rst:228
msgid ""
"The ``version.txt`` file should contain the corresponding Godot version "
"identifier. This file is used to install export templates in a version-"
"specific directory to avoid conflicts. For instance, if you are building "
"export templates for Godot 3.1.1, ``version.txt`` should contain ``3.1.1."
"stable`` on the first line (and nothing else). This version identifier is "
"based on the ``major``, ``minor``, ``patch`` (if present) and ``status`` "
"lines of the `version.py file in the Godot Git repository <https://github."
"com/godotengine/godot/blob/master/version.py>`__."
msgstr ""

#: ../../docs/development/compiling/introduction_to_the_buildsystem.rst:236
msgid ""
"If you are developing for multiple platforms, macOS is definitely the most "
"convenient host platform for cross-compilation, since you can cross-compile "
"for almost every target (except for UWP). Linux and Windows come in second "
"place, but Linux has the advantage of being the easier platform to set this "
"up."
msgstr ""

#: ../../docs/development/compiling/compiling_for_windows.rst:4
msgid "Compiling for Windows"
msgstr ""

#: ../../docs/development/compiling/compiling_for_windows.rst:11
msgid "For compiling under Windows, the following is required:"
msgstr ""

#: ../../docs/development/compiling/compiling_for_windows.rst:13
msgid ""
"`Visual Studio Community <https://www.visualstudio.com/vs/community/>`_, "
"version 2015 (14.0) or later. VS 2019 is recommended. **Make sure to read "
"\"Installing Visual Studio caveats\" below or you will have to run/download "
"the installer again.**"
msgstr ""

#: ../../docs/development/compiling/compiling_for_windows.rst:17
msgid ""
"MinGW-w64 with GCC can be used as an alternative to Visual Studio. Be sure "
"to install/configure it to use the ``posix`` thread model."
msgstr ""

#: ../../docs/development/compiling/compiling_for_windows.rst:19
msgid ""
"`Python 3.5+ (recommended) or Python 2.7+. <https://www.python.org/downloads/"
"windows/>`_"
msgstr ""

#: ../../docs/development/compiling/compiling_for_windows.rst:20
msgid ""
"`SCons <https://www.scons.org>`_ build system. If using Visual Studio 2019, "
"you *must* have SCons 3.1.1 or later."
msgstr ""

#: ../../docs/development/compiling/compiling_for_windows.rst:22
msgid ""
"*Optional* - `yasm <https://yasm.tortall.net/>`_ (for WebM SIMD "
"optimizations)"
msgstr ""

#: ../../docs/development/compiling/compiling_for_windows.rst:24
msgid ""
"If you have `Scoop <https://scoop.sh/>`_ installed, you can easily install "
"MinGW and other dependencies using the following command::"
msgstr ""

#: ../../docs/development/compiling/compiling_for_windows.rst:29
msgid ""
"If you have `MSYS2 <https://www.msys2.org/>`_ installed, you can easily "
"install MinGW and other dependencies using the following command::"
msgstr ""

#: ../../docs/development/compiling/compiling_for_windows.rst:40
#: ../../docs/development/compiling/compiling_for_x11.rst:25
#: ../../docs/development/compiling/compiling_for_osx.rst:27
#: ../../docs/development/compiling/compiling_for_android.rst:37
#: ../../docs/development/compiling/compiling_for_ios.rst:15
#: ../../docs/development/compiling/compiling_for_uwp.rst:29
#: ../../docs/development/compiling/compiling_for_web.rst:19
msgid ""
"For a general overview of SCons usage for Godot, see :ref:"
"`doc_introduction_to_the_buildsystem`."
msgstr ""

#: ../../docs/development/compiling/compiling_for_windows.rst:44
msgid "Setting up SCons"
msgstr ""

#: ../../docs/development/compiling/compiling_for_windows.rst:46
msgid ""
"First, make sure to enable the option to add Python to the ``PATH`` in the "
"Python installer. The SCons installer should then detect and use the "
"existing Python installation."
msgstr ""

#: ../../docs/development/compiling/compiling_for_windows.rst:50
msgid ""
"To check whether you have installed Python and SCons correctly, you can type "
"``python --version`` and ``scons --version`` into a command prompt (``cmd."
"exe``)."
msgstr ""

#: ../../docs/development/compiling/compiling_for_windows.rst:54
msgid ""
"If the commands above don't work, make sure to add Python to your ``PATH`` "
"environment variable after installing it, then check again. You can do so by "
"running the Python installer again and enabling the option to add Python to "
"the ``PATH``."
msgstr ""

#: ../../docs/development/compiling/compiling_for_windows.rst:62
msgid "Installing Visual Studio caveats"
msgstr ""

#: ../../docs/development/compiling/compiling_for_windows.rst:64
msgid ""
"If installing Visual Studio 2017 or 2019, make sure to enable **C++** in the "
"list of workflows to install."
msgstr ""

#: ../../docs/development/compiling/compiling_for_windows.rst:67
msgid ""
"If installing Visual Studio 2015, make sure to run a **Custom** installation "
"instead of **Typical** and select **C++** as a language there."
msgstr ""

#: ../../docs/development/compiling/compiling_for_windows.rst:70
msgid ""
"If you've already made the mistake of installing Visual Studio without C++ "
"support, run the installer again; it should present you a **Modify** button. "
"Running the installer from *Add/Remove Programs* will only give you a "
"**Repair** option, which won't let you install C++ tools."
msgstr ""

#: ../../docs/development/compiling/compiling_for_windows.rst:76
msgid "Downloading Godot's source"
msgstr ""

#: ../../docs/development/compiling/compiling_for_windows.rst:78
msgid ""
"Godot's source code is `hosted on GitHub <https://github.com/godotengine/"
"godot>`_. Downloading it (cloning) using `Git <https://git-scm.com/>`_ is "
"recommended."
msgstr ""

#: ../../docs/development/compiling/compiling_for_windows.rst:81
msgid ""
"The tutorial will assume from now on that you placed the source code in ``C:"
"\\godot``."
msgstr ""

#: ../../docs/development/compiling/compiling_for_windows.rst:88
#, fuzzy
msgid "Selecting a compiler"
msgstr "발사 예제"

#: ../../docs/development/compiling/compiling_for_windows.rst:90
msgid ""
"SCons will automatically find and use an existing Visual Studio "
"installation. If you do not have Visual Studio installed, it will attempt to "
"use MinGW instead. If you already have Visual Studio installed and want to "
"use MinGW, pass ``use_mingw=yes`` to the SCons command line."
msgstr ""

#: ../../docs/development/compiling/compiling_for_windows.rst:95
msgid ""
"During development, using the Visual Studio compiler is usually a better "
"idea, as it links the Godot binary much faster than MinGW. However, MinGW "
"can produce more optimized binaries using link-time optimization (see "
"below), making it a better choice for production use."
msgstr ""

#: ../../docs/development/compiling/compiling_for_windows.rst:101
msgid "Running SCons"
msgstr ""

#: ../../docs/development/compiling/compiling_for_windows.rst:103
msgid ""
"After opening a command prompt, change to the root directory of the engine "
"source code (using ``cd``) and type::"
msgstr ""

#: ../../docs/development/compiling/compiling_for_windows.rst:108
msgid "You can specify a number of CPU threads to use to speed up the build::"
msgstr ""

#: ../../docs/development/compiling/compiling_for_windows.rst:112
msgid ""
"In general, it is OK to have at least as many threads compiling Godot as you "
"have cores in your CPU, if not one or two more. Feel free to add the -j "
"option to any SCons command you see below."
msgstr ""

#: ../../docs/development/compiling/compiling_for_windows.rst:116
msgid ""
"When compiling with multiple CPU threads, SCons may warn about pywin32 being "
"missing. You can safely ignore this warning."
msgstr ""

#: ../../docs/development/compiling/compiling_for_windows.rst:119
msgid ""
"If all goes well, the resulting binary executable will be placed in ``C:"
"\\godot\\bin\\`` with the name ``godot.windows.tools.32.exe`` or ``godot."
"windows.tools.64.exe``."
msgstr ""

#: ../../docs/development/compiling/compiling_for_windows.rst:123
msgid ""
"By default, SCons will build a binary matching your CPU architecture, but "
"this can be overridden using ``bits=64`` or ``bits=32``."
msgstr ""

#: ../../docs/development/compiling/compiling_for_windows.rst:126
msgid ""
"This executable file contains the whole engine and runs without any "
"dependencies. Running it will bring up the Project Manager."
msgstr ""

#: ../../docs/development/compiling/compiling_for_windows.rst:129
#: ../../docs/development/compiling/compiling_for_x11.rst:113
msgid ""
"If you are compiling Godot for production use, then you can make the final "
"executable smaller and faster by adding the SCons option "
"``target=release_debug``."
msgstr ""

#: ../../docs/development/compiling/compiling_for_windows.rst:133
msgid ""
"If you are compiling Godot with MinGW, you can make the binary even smaller "
"and faster by adding the SCons option ``use_lto=yes``. As link-time "
"optimization is a memory-intensive process, this will require about 3 GB of "
"available RAM while compiling."
msgstr ""

#: ../../docs/development/compiling/compiling_for_windows.rst:139
msgid "Development in Visual Studio or other IDEs"
msgstr ""

#: ../../docs/development/compiling/compiling_for_windows.rst:141
msgid ""
"For most projects, using only scripting is enough but when development in C+"
"+ is needed, for creating modules or extending the engine, working with an "
"IDE is usually desirable."
msgstr ""

#: ../../docs/development/compiling/compiling_for_windows.rst:145
msgid ""
"You can create a Visual Studio solution via SCons by running SCons with the "
"``vsproj=yes`` parameter, like this::"
msgstr ""

#: ../../docs/development/compiling/compiling_for_windows.rst:150
msgid ""
"You will be able to open Godot's source in a Visual Studio solution now, and "
"able to build Godot using Visual Studio's **Build** button."
msgstr ""

#: ../../docs/development/compiling/compiling_for_windows.rst:153
msgid ""
"If you need to edit the build commands, they are located in \"Godot\" "
"project settings, NMAKE sheet. SCons is called at the end of the commands. "
"If you make a mistake, copy the command from one of the other build "
"configurations (debug, release_debug, release) or architectures (Win32/x64); "
"they are equivalent."
msgstr ""

#: ../../docs/development/compiling/compiling_for_windows.rst:160
msgid "Cross-compiling for Windows from other operating systems"
msgstr ""

#: ../../docs/development/compiling/compiling_for_windows.rst:162
msgid ""
"If you are a Linux or macOS user, you need to install `MinGW-w64 <https://"
"mingw-w64.org/doku.php>`_, which typically comes in 32-bit and 64-bit "
"variants. The package names may differ based on your distribution, here are "
"some known ones:"
msgstr ""

#: ../../docs/development/compiling/compiling_for_windows.rst:168
#: ../../docs/development/compiling/compiling_for_x11.rst:36
msgid "**Arch Linux**"
msgstr ""

#: ../../docs/development/compiling/compiling_for_windows.rst:168
msgid "Install `mingw-w64-gcc from the AUR`_."
msgstr ""

#: ../../docs/development/compiling/compiling_for_windows.rst:170
#: ../../docs/development/compiling/compiling_for_x11.rst:41
msgid "**Debian** / **Ubuntu**"
msgstr ""

#: ../../docs/development/compiling/compiling_for_windows.rst:174
#: ../../docs/development/compiling/compiling_for_x11.rst:46
msgid "**Fedora**"
msgstr ""

#: ../../docs/development/compiling/compiling_for_windows.rst:179
msgid "**macOS**"
msgstr ""

#: ../../docs/development/compiling/compiling_for_windows.rst:183
#: ../../docs/development/compiling/compiling_for_x11.rst:63
msgid "**Mageia**"
msgstr ""

#: ../../docs/development/compiling/compiling_for_windows.rst:191
msgid ""
"Before attempting the compilation, SCons will check for the following "
"binaries in your ``PATH`` environment variable::"
msgstr ""

#: ../../docs/development/compiling/compiling_for_windows.rst:197
msgid ""
"If the binaries are not located in the ``PATH`` (e.g. ``/usr/bin``), you can "
"define the following environment variables to give a hint to the build "
"system::"
msgstr ""

#: ../../docs/development/compiling/compiling_for_windows.rst:204
msgid ""
"To make sure you are doing things correctly, executing the following in the "
"shell should result in a working compiler (the version output may differ "
"based on your system)::"
msgstr ""

#: ../../docs/development/compiling/compiling_for_windows.rst:214
msgid ""
"Cross-compiling from some Ubuntu versions may lead to `this bug <https://"
"github.com/godotengine/godot/issues/9258>`_, due to a default configuration "
"lacking support for POSIX threading."
msgstr ""

#: ../../docs/development/compiling/compiling_for_windows.rst:218
msgid ""
"You can change that configuration following those instructions, for 64-bit::"
msgstr ""

#: ../../docs/development/compiling/compiling_for_windows.rst:226
msgid "And for 32-bit::"
msgstr ""

#: ../../docs/development/compiling/compiling_for_windows.rst:234
msgid "Creating Windows export templates"
msgstr ""

#: ../../docs/development/compiling/compiling_for_windows.rst:236
msgid ""
"Windows export templates are created by compiling Godot without the editor, "
"with the following flags::"
msgstr ""

#: ../../docs/development/compiling/compiling_for_windows.rst:244
msgid ""
"If you plan on replacing the standard export templates, copy these to the "
"following location, replacing ``<version>`` with the version identifier "
"(such as ``3.1.1.stable`` or ``3.2.dev``)::"
msgstr ""

#: ../../docs/development/compiling/compiling_for_windows.rst:250
#, fuzzy
msgid "With the following names::"
msgstr "다음 예제에서:"

#: ../../docs/development/compiling/compiling_for_windows.rst:257
msgid ""
"However, if you are using custom modules or custom engine code, you may "
"instead want to configure your binaries as custom export templates here:"
msgstr ""

#: ../../docs/development/compiling/compiling_for_windows.rst:263
msgid ""
"You don't need to copy them in this case, just reference the resulting files "
"in the ``bin\\`` directory of your Godot source folder, so the next time you "
"build, you will automatically have the custom templates referenced."
msgstr ""

#: ../../docs/development/compiling/compiling_for_x11.rst:4
msgid "Compiling for X11 (Linux, \\*BSD)"
msgstr ""

#: ../../docs/development/compiling/compiling_for_x11.rst:11
msgid ""
"For compiling under Linux or other Unix variants, the following is required:"
msgstr ""

#: ../../docs/development/compiling/compiling_for_x11.rst:14
msgid "GCC or Clang"
msgstr ""

#: ../../docs/development/compiling/compiling_for_x11.rst:15
msgid "Python 3 or 2.7+"
msgstr ""

#: ../../docs/development/compiling/compiling_for_x11.rst:16
msgid "SCons build system (3.0 or later for Python 3)"
msgstr ""

#: ../../docs/development/compiling/compiling_for_x11.rst:17
msgid "pkg-config (used to detect the dependencies below)"
msgstr ""

#: ../../docs/development/compiling/compiling_for_x11.rst:18
msgid "X11, Xcursor, Xinerama, Xi and XRandR development libraries"
msgstr ""

#: ../../docs/development/compiling/compiling_for_x11.rst:19
msgid "MesaGL development libraries"
msgstr ""

#: ../../docs/development/compiling/compiling_for_x11.rst:20
msgid "ALSA development libraries"
msgstr ""

#: ../../docs/development/compiling/compiling_for_x11.rst:21
#, fuzzy
msgid "PulseAudio development libraries"
msgstr "능동적 개발 고려사항"

#: ../../docs/development/compiling/compiling_for_x11.rst:22
msgid "*Optional* - libudev (build with ``udev=yes``)"
msgstr ""

#: ../../docs/development/compiling/compiling_for_x11.rst:23
msgid "*Optional* - yasm (for WebM SIMD optimizations)"
msgstr ""

#: ../../docs/development/compiling/compiling_for_x11.rst:29
msgid "Distro-specific one-liners"
msgstr ""

#: ../../docs/development/compiling/compiling_for_x11.rst:31
msgid "**Alpine Linux**"
msgstr ""

#: ../../docs/development/compiling/compiling_for_x11.rst:52
msgid "**FreeBSD**"
msgstr ""

#: ../../docs/development/compiling/compiling_for_x11.rst:58
msgid "**Gentoo**"
msgstr ""

#: ../../docs/development/compiling/compiling_for_x11.rst:69
msgid "**OpenBSD**"
msgstr ""

#: ../../docs/development/compiling/compiling_for_x11.rst:73
msgid "**openSUSE**"
msgstr ""

#: ../../docs/development/compiling/compiling_for_x11.rst:78
msgid "**Solus**"
msgstr ""

#: ../../docs/development/compiling/compiling_for_x11.rst:87
msgid ""
"Start a terminal, go to the root dir of the engine source code and type:"
msgstr ""

#: ../../docs/development/compiling/compiling_for_x11.rst:93
msgid ""
"A good rule of thumb for the ``-j`` (*jobs*) flag, is to have at least as "
"many threads compiling Godot as you have cores in your CPU, if not one or "
"two more. Feel free to add the ``-j`` option to any SCons command you see "
"below."
msgstr ""

#: ../../docs/development/compiling/compiling_for_x11.rst:97
msgid ""
"If all goes well, the resulting binary executable will be placed in the \"bin"
"\" subdirectory. This executable file contains the whole engine and runs "
"without any dependencies. Executing it will bring up the project manager."
msgstr ""

#: ../../docs/development/compiling/compiling_for_x11.rst:104
msgid "If you wish to compile using Clang rather than GCC, use this command:"
msgstr ""

#: ../../docs/development/compiling/compiling_for_x11.rst:110
msgid ""
"Using Clang appears to be a requirement for OpenBSD, otherwise fonts would "
"not build."
msgstr ""

#: ../../docs/development/compiling/compiling_for_x11.rst:117
msgid ""
"If you are compiling Godot with GCC, you can make the binary even smaller "
"and faster by adding the SCons option ``use_lto=yes``. As link-time "
"optimization is a memory-intensive process, this will require about 3 GB of "
"available RAM while compiling."
msgstr ""

#: ../../docs/development/compiling/compiling_for_x11.rst:123
#: ../../docs/development/compiling/compiling_for_web.rst:23
msgid "Building export templates"
msgstr ""

#: ../../docs/development/compiling/compiling_for_x11.rst:125
msgid ""
"Linux binaries usually won't run on distributions that are older than the "
"distribution they were built on. If you wish to distribute binaries that "
"work on most distributions, you should build them on an old distribution "
"such as Ubuntu 16.04. You can use a virtual machine or a container to set up "
"a suitable build environment."
msgstr ""

#: ../../docs/development/compiling/compiling_for_x11.rst:133
msgid ""
"To build X11 (Linux, \\*BSD) export templates, run the build system with the "
"following parameters:"
msgstr ""

#: ../../docs/development/compiling/compiling_for_x11.rst:136
msgid "(32 bits)"
msgstr ""

#: ../../docs/development/compiling/compiling_for_x11.rst:143
msgid "(64 bits)"
msgstr ""

#: ../../docs/development/compiling/compiling_for_x11.rst:150
msgid ""
"Note that cross-compiling for the opposite bits (64/32) as your host "
"platform is not always straight-forward and might need a chroot environment."
msgstr ""

#: ../../docs/development/compiling/compiling_for_x11.rst:153
msgid ""
"To create standard export templates, the resulting files must be copied to:"
msgstr ""

#: ../../docs/development/compiling/compiling_for_x11.rst:159
msgid ""
"and named like this (even for \\*BSD which is seen as \"Linux X11\" by "
"Godot):"
msgstr ""

#: ../../docs/development/compiling/compiling_for_x11.rst:168
msgid ""
"However, if you are writing your custom modules or custom C++ code, you "
"might instead want to configure your binaries as custom export templates "
"here:"
msgstr ""

#: ../../docs/development/compiling/compiling_for_x11.rst:174
msgid ""
"You don't even need to copy them, you can just reference the resulting files "
"in the ``bin/`` directory of your Godot source folder, so the next time you "
"build, you automatically have the custom templates referenced."
msgstr ""

#: ../../docs/development/compiling/compiling_for_x11.rst:179
msgid "Using Clang and LLD for faster development"
msgstr ""

#: ../../docs/development/compiling/compiling_for_x11.rst:181
msgid ""
"You can also use Clang and LLD to build Godot. This has two upsides compared "
"to the default GCC + GNU ld setup:"
msgstr ""

#: ../../docs/development/compiling/compiling_for_x11.rst:184
msgid ""
"LLD links Godot significantly faster compared to GNU ld or gold. This leads "
"to faster iteration times."
msgstr ""

#: ../../docs/development/compiling/compiling_for_x11.rst:186
msgid "Clang tends to give more useful error messages compared to GCC."
msgstr ""

#: ../../docs/development/compiling/compiling_for_x11.rst:188
msgid ""
"To do so, install Clang and the ``lld`` package from your distribution's "
"package manager then use the following SCons command::"
msgstr ""

#: ../../docs/development/compiling/compiling_for_x11.rst:193
msgid ""
"It's still recommended to use GCC for production builds as they can be "
"compiled using link-time optimization, making the resulting binaries smaller "
"and faster."
msgstr ""

#: ../../docs/development/compiling/compiling_for_osx.rst:4
msgid "Compiling for macOS"
msgstr ""

#: ../../docs/development/compiling/compiling_for_osx.rst:11
msgid "For compiling under macOS, the following is required:"
msgstr ""

#: ../../docs/development/compiling/compiling_for_osx.rst:13
msgid "Python 3.5+ (recommended) or Python 2.7+."
msgstr ""

#: ../../docs/development/compiling/compiling_for_osx.rst:14
msgid "`SCons <https://www.scons.org>`_ build system."
msgstr ""

#: ../../docs/development/compiling/compiling_for_osx.rst:15
msgid ""
"`Xcode <https://apps.apple.com/us/app/xcode/id497799835>`_ (or the more "
"lightweight Command Line Tools for Xcode)."
msgstr ""

#: ../../docs/development/compiling/compiling_for_osx.rst:17
msgid ""
"*Optional* - `yasm <https://yasm.tortall.net/>`_ (for WebM SIMD "
"optimizations)."
msgstr ""

#: ../../docs/development/compiling/compiling_for_osx.rst:19
msgid ""
"If you have `Homebrew <https://brew.sh/>`_ installed, you can easily install "
"SCons and yasm using the following command::"
msgstr ""

#: ../../docs/development/compiling/compiling_for_osx.rst:24
msgid ""
"Installing Homebrew will also fetch the Command Line Tools for Xcode "
"automatically if you don't have them already."
msgstr ""

#: ../../docs/development/compiling/compiling_for_osx.rst:33
msgid ""
"Start a terminal, go to the root directory of the engine source code and "
"type::"
msgstr ""

#: ../../docs/development/compiling/compiling_for_osx.rst:37
msgid ""
"If all goes well, the resulting binary executable will be placed in the "
"``bin/`` subdirectory. This executable file contains the whole engine and "
"runs without any dependencies. Executing it will bring up the project "
"manager."
msgstr ""

#: ../../docs/development/compiling/compiling_for_osx.rst:42
msgid ""
"To create an .app like in the official builds, you need to use the template "
"located in ``misc/dist/osx_tools.app``. Typically, for an optimized editor "
"binary built with ``scons p=osx target=release_debug``::"
msgstr ""

#: ../../docs/development/compiling/compiling_for_osx.rst:52
msgid "Cross-compiling for macOS from Linux"
msgstr ""

#: ../../docs/development/compiling/compiling_for_osx.rst:54
msgid ""
"It is possible to compile for macOS in a Linux environment (and maybe also "
"in Windows using the Windows Subsystem for Linux). For that, you'll need to "
"install `OSXCross <https://github.com/tpoechtrager/osxcross>`__ to be able "
"to use macOS as a target. First, follow the instructions to install it:"
msgstr ""

#: ../../docs/development/compiling/compiling_for_osx.rst:59
msgid ""
"Clone the `OSXCross repository <https://github.com/tpoechtrager/osxcross>`__ "
"somewhere on your machine (or download a ZIP file and extract it somewhere), "
"e.g.::"
msgstr ""

#: ../../docs/development/compiling/compiling_for_osx.rst:65
msgid ""
"Follow the instructions to package the SDK: https://github.com/tpoechtrager/"
"osxcross#packaging-the-sdk"
msgstr ""

#: ../../docs/development/compiling/compiling_for_osx.rst:67
msgid ""
"Follow the instructions to install OSXCross: https://github.com/tpoechtrager/"
"osxcross#installation"
msgstr ""

#: ../../docs/development/compiling/compiling_for_osx.rst:70
msgid ""
"After that, you will need to define the ``OSXCROSS_ROOT`` as the path to the "
"OSXCross installation (the same place where you cloned the repository/"
"extracted the zip), e.g.::"
msgstr ""

#: ../../docs/development/compiling/compiling_for_osx.rst:76
msgid "Now you can compile with SCons like you normally would::"
msgstr ""

#: ../../docs/development/compiling/compiling_for_osx.rst:80
msgid ""
"If you have an OSXCross SDK version different from the one expected by the "
"SCons buildsystem, you can specify a custom one with the ``osxcross_sdk`` "
"argument::"
msgstr ""

#: ../../docs/development/compiling/compiling_for_android.rst:4
msgid "Compiling for Android"
msgstr ""

#: ../../docs/development/compiling/compiling_for_android.rst:9
msgid "Note"
msgstr ""

#: ../../docs/development/compiling/compiling_for_android.rst:11
msgid ""
"In most cases, using the built-in deployer and export templates is good "
"enough. Compiling the Android APK manually is mostly useful for custom "
"builds or custom packages for the deployer."
msgstr ""

#: ../../docs/development/compiling/compiling_for_android.rst:15
msgid ""
"Also, you still need to follow the steps mentioned in the :ref:"
"`doc_exporting_for_android` tutorial before attempting to build a custom "
"export template."
msgstr ""

#: ../../docs/development/compiling/compiling_for_android.rst:22
msgid "For compiling under Windows, Linux or macOS, the following is required:"
msgstr ""

#: ../../docs/development/compiling/compiling_for_android.rst:24
msgid "`Python 2.7+ or Python 3.5+ <https://www.python.org/downloads/>`_"
msgstr ""

#: ../../docs/development/compiling/compiling_for_android.rst:25
msgid "`SCons <https://scons.org/pages/download.html>`_ build system"
msgstr ""

#: ../../docs/development/compiling/compiling_for_android.rst:26
#, fuzzy
msgid ""
"`Android SDK <https://developer.android.com/studio/#command-tools>`_ "
"(command-line tools are sufficient)"
msgstr "Android SDK: https://developer.android.com/studio/"

#: ../../docs/development/compiling/compiling_for_android.rst:28
msgid ""
"Required SDK components will be automatically installed by Gradle (except "
"the NDK)"
msgstr ""

#: ../../docs/development/compiling/compiling_for_android.rst:30
#, fuzzy
msgid ""
"`Android NDK <https://developer.android.com/ndk/downloads/>`_ r17 or later"
msgstr "Android SDK: https://developer.android.com/studio/"

#: ../../docs/development/compiling/compiling_for_android.rst:31
msgid "Gradle (will be downloaded and installed automatically if missing)"
msgstr ""

#: ../../docs/development/compiling/compiling_for_android.rst:32
msgid "JDK 8 (either OpenJDK or Oracle JDK)"
msgstr ""

#: ../../docs/development/compiling/compiling_for_android.rst:34
msgid "JDK 9 or later are not currently supported"
msgstr ""

#: ../../docs/development/compiling/compiling_for_android.rst:35
msgid ""
"You can download a build from `ojdkbuild <https://github.com/ojdkbuild/"
"ojdkbuild>`_"
msgstr ""

#: ../../docs/development/compiling/compiling_for_android.rst:41
msgid "Setting up the buildsystem"
msgstr ""

#: ../../docs/development/compiling/compiling_for_android.rst:43
msgid ""
"Set the environment variable ``ANDROID_HOME`` to point to the Android SDK. "
"If you downloaded the Android command-line tools, this would be the folder "
"where you extracted the contents of the ZIP archive. Later on, ``gradlew`` "
"will install necessary SDK components in this folder. However, you need to "
"accept the SDK component licenses before they can be downloaded by Gradle. "
"This can be done by running the following command from the root of the SDK "
"directory, then answering all the prompts with ``y``:"
msgstr ""

#: ../../docs/development/compiling/compiling_for_android.rst:57
msgid ""
"Set the environment variable ``ANDROID_NDK_ROOT`` to point to the Android "
"NDK. You also might need to set the variable ``ANDROID_NDK_HOME`` to the "
"same path, especially if you are using custom Android modules, since some "
"Gradle plugins rely on the NDK and use this variable to determine its "
"location."
msgstr ""

#: ../../docs/development/compiling/compiling_for_android.rst:63
msgid ""
"To set those environment variables on Windows, press :kbd:`Windows + R`, "
"type \"control system\", then click on **Advanced system settings** in the "
"left pane, then click on **Environment variables** on the window that "
"appears."
msgstr ""

#: ../../docs/development/compiling/compiling_for_android.rst:68
msgid ""
"To set those environment variables on Linux or macOS, use ``export "
"ANDROID_HOME=/path/to/android-sdk`` and ``export ANDROID_NDK_ROOT=/path/to/"
"android-ndk`` where ``/path/to/android-sdk`` and ``/path/to/android-ndk`` "
"point to the root of the SDK and NDK directories."
msgstr ""

#: ../../docs/development/compiling/compiling_for_android.rst:75
msgid "Building the export templates"
msgstr ""

#: ../../docs/development/compiling/compiling_for_android.rst:77
msgid ""
"Godot needs two export templates for Android: the optimized \"release\" "
"template (``android_release.apk``) and the debug template (``android_debug."
"apk``). As Google will require all APKs to include ARMv8 (64-bit) libraries "
"starting from August 2019, the commands below will build an APK containing "
"both ARMv7 and ARMv8 libraries."
msgstr ""

#: ../../docs/development/compiling/compiling_for_android.rst:83
msgid ""
"Compiling the standard export templates is done by calling SCons with the "
"following arguments:"
msgstr ""

#: ../../docs/development/compiling/compiling_for_android.rst:86
msgid ""
"Release template (used when exporting with **Debugging Enabled** unchecked)"
msgstr ""

#: ../../docs/development/compiling/compiling_for_android.rst:99
msgid "The resulting APK will be located at ``bin/android_release.apk``."
msgstr ""

#: ../../docs/development/compiling/compiling_for_android.rst:101
msgid "Debug template (used when exporting with **Debugging Enabled** checked)"
msgstr ""

#: ../../docs/development/compiling/compiling_for_android.rst:114
msgid "The resulting APK will be located at ``bin/android_debug.apk``."
msgstr ""

#: ../../docs/development/compiling/compiling_for_android.rst:117
msgid "Adding support for x86 devices"
msgstr ""

#: ../../docs/development/compiling/compiling_for_android.rst:119
msgid ""
"If you also want to include support for x86 devices, run the SCons command a "
"third time with the ``android_arch=x86`` argument before building the APK "
"with Gradle. For example, for the release template:"
msgstr ""

#: ../../docs/development/compiling/compiling_for_android.rst:135
msgid ""
"This will create a fat binary that works on all platforms. The final APK "
"size of exported projects will depend on the platforms you choose to support "
"when exporting; in other words, unused platforms will be removed from the "
"APK."
msgstr ""

#: ../../docs/development/compiling/compiling_for_android.rst:141
#, fuzzy
msgid "Cleaning the generated export templates"
msgstr "스켈레톤(Skeleton) 정리하기"

#: ../../docs/development/compiling/compiling_for_android.rst:143
msgid ""
"You can use the following commands to remove the generated export templates:"
msgstr ""

#: ../../docs/development/compiling/compiling_for_android.rst:155
msgid "Using the export templates"
msgstr ""

#: ../../docs/development/compiling/compiling_for_android.rst:157
msgid ""
"Godot needs release and debug APKs that were compiled against the same "
"version/commit as the editor. If you are using official binaries for the "
"editor, make sure to install the matching export templates, or build your "
"own from the same version."
msgstr ""

#: ../../docs/development/compiling/compiling_for_android.rst:162
msgid ""
"When exporting your game, Godot opens the APK, changes a few things inside "
"and adds your files."
msgstr ""

#: ../../docs/development/compiling/compiling_for_android.rst:166
msgid "Installing the templates"
msgstr ""

#: ../../docs/development/compiling/compiling_for_android.rst:168
msgid ""
"The newly-compiled templates (``android_debug.apk`` and ``android_release."
"apk``) must be copied to Godot's templates folder with their respective "
"names. The templates folder can be located in:"
msgstr ""

#: ../../docs/development/compiling/compiling_for_android.rst:172
msgid "Windows: ``%APPDATA%\\Godot\\templates\\<version>\\``"
msgstr ""

#: ../../docs/development/compiling/compiling_for_android.rst:173
msgid "Linux: ``$HOME/.local/share/godot/templates/<version>/``"
msgstr ""

#: ../../docs/development/compiling/compiling_for_android.rst:174
msgid "macOS: ``$HOME/Library/Application Support/Godot/templates/<version>/``"
msgstr ""

#: ../../docs/development/compiling/compiling_for_android.rst:176
msgid ""
"``<version>`` is of the form ``major.minor[.patch].status`` using values "
"from ``version.py`` in your Godot source repository (e.g. ``3.0.5.stable`` "
"or ``3.1.dev``). You also need to write this same version string to a "
"``version.txt`` file located next to your export templates."
msgstr ""

#: ../../docs/development/compiling/compiling_for_android.rst:183
msgid ""
"However, if you are writing your custom modules or custom C++ code, you "
"might instead want to configure your APKs as custom export templates here:"
msgstr ""

#: ../../docs/development/compiling/compiling_for_android.rst:189
msgid ""
"You don't even need to copy them, you can just reference the resulting file "
"in the ``bin\\`` directory of your Godot source folder, so that the next "
"time you build you will automatically have the custom templates referenced."
msgstr ""

#: ../../docs/development/compiling/compiling_for_android.rst:198
msgid "Application not installed"
msgstr ""

#: ../../docs/development/compiling/compiling_for_android.rst:200
msgid ""
"Android might complain the application is not correctly installed. If so:"
msgstr ""

#: ../../docs/development/compiling/compiling_for_android.rst:203
msgid "Check that the debug keystore is properly generated."
msgstr ""

#: ../../docs/development/compiling/compiling_for_android.rst:204
msgid "Check that the jarsigner executable is from JDK 8."
msgstr ""

#: ../../docs/development/compiling/compiling_for_android.rst:206
msgid ""
"If it still fails, open a command line and run `logcat <https://developer."
"android.com/studio/command-line/logcat>`_:"
msgstr ""

#: ../../docs/development/compiling/compiling_for_android.rst:212
msgid ""
"Then check the output while the application is installed; the error message "
"should be presented there. Seek assistance if you can't figure it out."
msgstr ""

#: ../../docs/development/compiling/compiling_for_android.rst:217
msgid "Application exits immediately"
msgstr ""

#: ../../docs/development/compiling/compiling_for_android.rst:219
msgid ""
"If the application runs but exits immediately, this might be due to one of "
"the following reasons:"
msgstr ""

#: ../../docs/development/compiling/compiling_for_android.rst:222
msgid ""
"Make sure to use export templates that match your editor version; if you use "
"a new Godot version, you *have* to update the templates too."
msgstr ""

#: ../../docs/development/compiling/compiling_for_android.rst:224
msgid ""
"``libgodot_android.so`` is not in ``libs/<android_arch>/`` where "
"``<android_arch>`` is the device's architecture."
msgstr ""

#: ../../docs/development/compiling/compiling_for_android.rst:226
msgid ""
"The device's architecture does not match the exported one(s). Make sure your "
"templates were built for that device's architecture, and that the export "
"settings included support for that architecture."
msgstr ""

#: ../../docs/development/compiling/compiling_for_android.rst:230
msgid "In any case, ``adb logcat`` should also show the cause of the error."
msgstr ""

#: ../../docs/development/compiling/compiling_for_ios.rst:4
msgid "Compiling for iOS"
msgstr ""

#: ../../docs/development/compiling/compiling_for_ios.rst:11
msgid ""
"SCons (you can get it from macports, you should be able to run ``scons`` in "
"a terminal when installed)"
msgstr ""

#: ../../docs/development/compiling/compiling_for_ios.rst:13
msgid ""
"Xcode 10.0 (or later) with the iOS (10.0) SDK and the command line tools."
msgstr ""

#: ../../docs/development/compiling/compiling_for_ios.rst:21
msgid "Open a Terminal, go to the root dir of the engine source code and type:"
msgstr ""

#: ../../docs/development/compiling/compiling_for_ios.rst:27
msgid "for a debug build, or:"
msgstr ""

#: ../../docs/development/compiling/compiling_for_ios.rst:33
msgid ""
"for a release build (check ``platform/iphone/detect.py`` for the compiler "
"flags used for each configuration)."
msgstr ""

#: ../../docs/development/compiling/compiling_for_ios.rst:36
msgid "Alternatively, you can run"
msgstr ""

#: ../../docs/development/compiling/compiling_for_ios.rst:42
msgid "for a Simulator executable."
msgstr ""

#: ../../docs/development/compiling/compiling_for_ios.rst:44
msgid ""
"For recent devices, Apple requires 64-bit versions of application binaries "
"when you are uploading to the Apple Store. The best way to provide these is "
"to create a bundle in which there are both 32-bit and 64-bit binaries, so "
"every device will be able to run the game."
msgstr ""

#: ../../docs/development/compiling/compiling_for_ios.rst:47
msgid ""
"It can be done in three steps: first compile the 32-bit version, then "
"compile the 64-bit version and then use ``lipo`` to bundle them into one "
"\"universal\" binary. All those steps can be performed with following "
"commands:"
msgstr ""

#: ../../docs/development/compiling/compiling_for_ios.rst:58
msgid ""
"If you also want to provide a simulator build (reduces the chance of any "
"linker errors with dependencies), you'll need to build and lipo the "
"``x86_64`` architecture as well."
msgstr ""

#: ../../docs/development/compiling/compiling_for_ios.rst:70
msgid "Run"
msgstr "실행"

#: ../../docs/development/compiling/compiling_for_ios.rst:72
msgid ""
"To run on a device or simulator, follow these instructions: :ref:"
"`doc_exporting_for_ios`."
msgstr ""

#: ../../docs/development/compiling/compiling_for_ios.rst:75
msgid ""
"Replace or add your executable to the Xcode project, and change the "
"\"executable name\" property on Info.plist accordingly if you use an "
"alternative build."
msgstr ""

#: ../../docs/development/compiling/cross-compiling_for_ios_on_linux.rst:4
msgid "Cross-compiling for iOS on Linux"
msgstr ""

#: ../../docs/development/compiling/cross-compiling_for_ios_on_linux.rst:8
msgid ""
"The procedure for this is somewhat complex and requires a lot of steps, but "
"once you have the environment properly configured it will be easy to compile "
"Godot for iOS anytime you want."
msgstr ""

#: ../../docs/development/compiling/cross-compiling_for_ios_on_linux.rst:13
msgid "Disclaimer"
msgstr ""

#: ../../docs/development/compiling/cross-compiling_for_ios_on_linux.rst:15
msgid ""
"While it is possible to compile for iOS on a Linux environment, Apple is "
"very restrictive about the tools to be used (especially hardware-wise), "
"allowing pretty much only their products to be used for development. So this "
"is **not official**. However, a `statement from Apple in 2010 <http://www."
"apple.com/pr/library/2010/09/09Statement-by-Apple-on-App-Store-Review-"
"Guidelines.html>`__ says they relaxed some of the `App Store review "
"guidelines <https://developer.apple.com/app-store/review/guidelines/>`__ to "
"allow any tool to be used, as long as the resulting binary does not download "
"any code, which means it should be OK to use the procedure described here "
"and cross-compiling the binary."
msgstr ""

#: ../../docs/development/compiling/cross-compiling_for_ios_on_linux.rst:29
msgid ""
"`XCode with the iOS SDK <https://developer.apple.com/xcode/download>`__ (a "
"dmg image)"
msgstr ""

#: ../../docs/development/compiling/cross-compiling_for_ios_on_linux.rst:31
msgid ""
"`Clang >= 3.5 <http://clang.llvm.org>`__ for your development machine "
"installed and in the ``PATH``. It has to be version >= 3.5 to target "
"``arm64`` architecture."
msgstr ""

#: ../../docs/development/compiling/cross-compiling_for_ios_on_linux.rst:34
msgid ""
"`Fuse <https://github.com/libfuse/libfuse>`__ for mounting and umounting the "
"dmg image."
msgstr ""

#: ../../docs/development/compiling/cross-compiling_for_ios_on_linux.rst:36
msgid ""
"`darling-dmg <https://github.com/darlinghq/darling-dmg>`__, which needs to "
"be built from source. The procedure for that is explained below."
msgstr ""

#: ../../docs/development/compiling/cross-compiling_for_ios_on_linux.rst:40
msgid ""
"For building darling-dmg, you'll need the development packages of the "
"following libraries: fuse, icu, openssl, zlib, bzip2."
msgstr ""

#: ../../docs/development/compiling/cross-compiling_for_ios_on_linux.rst:43
msgid ""
"`cctools-port <https://github.com/tpoechtrager/cctools-port>`__ for the "
"needed build tools. The procedure for building is quite peculiar and is "
"described below."
msgstr ""

#: ../../docs/development/compiling/cross-compiling_for_ios_on_linux.rst:47
msgid "This also has some extra dependencies: automake, autogen, libtool."
msgstr ""

#: ../../docs/development/compiling/cross-compiling_for_ios_on_linux.rst:50
msgid "Configuring the environment"
msgstr ""

#: ../../docs/development/compiling/cross-compiling_for_ios_on_linux.rst:53
msgid "darling-dmg"
msgstr ""

#: ../../docs/development/compiling/cross-compiling_for_ios_on_linux.rst:55
msgid "Clone the repository on your machine:"
msgstr ""

#: ../../docs/development/compiling/cross-compiling_for_ios_on_linux.rst:61
msgid "Build it:"
msgstr ""

#: ../../docs/development/compiling/cross-compiling_for_ios_on_linux.rst:73
msgid "Preparing the SDK"
msgstr ""

#: ../../docs/development/compiling/cross-compiling_for_ios_on_linux.rst:75
msgid "Mount the XCode image:"
msgstr ""

#: ../../docs/development/compiling/cross-compiling_for_ios_on_linux.rst:84
msgid "Extract the iOS SDK:"
msgstr ""

#: ../../docs/development/compiling/cross-compiling_for_ios_on_linux.rst:93
msgid "Pack the SDK:"
msgstr ""

#: ../../docs/development/compiling/cross-compiling_for_ios_on_linux.rst:101
msgid "Toolchain"
msgstr ""

#: ../../docs/development/compiling/cross-compiling_for_ios_on_linux.rst:103
msgid "Build cctools:"
msgstr ""

#: ../../docs/development/compiling/cross-compiling_for_ios_on_linux.rst:111
msgid ""
"Copy the tools to a nicer place. Note that the SCons scripts for building "
"will look under ``usr/bin`` inside the directory you provide for the "
"toolchain binaries, so you must copy to such subdirectory, akin to the "
"following commands:"
msgstr ""

#: ../../docs/development/compiling/cross-compiling_for_ios_on_linux.rst:121
msgid ""
"Now you should have the iOS toolchain binaries in ``/home/user/iostoolchain/"
"usr/bin``."
msgstr ""

#: ../../docs/development/compiling/cross-compiling_for_ios_on_linux.rst:125
msgid "Compiling Godot for iPhone"
msgstr ""

#: ../../docs/development/compiling/cross-compiling_for_ios_on_linux.rst:127
msgid ""
"Once you've done the above steps, you should keep two things in your "
"environment: the built toolchain and the iPhoneOS SDK directory. Those can "
"stay anywhere you want since you have to provide their paths to the SCons "
"build command."
msgstr ""

#: ../../docs/development/compiling/cross-compiling_for_ios_on_linux.rst:132
msgid ""
"For the iPhone platform to be detected, you need the ``OSXCROSS_IOS`` "
"environment variable defined to anything."
msgstr ""

#: ../../docs/development/compiling/cross-compiling_for_ios_on_linux.rst:139
msgid ""
"Now you can compile for iPhone using SCons like the standard Godot way, with "
"some additional arguments to provide the correct paths:"
msgstr ""

#: ../../docs/development/compiling/cross-compiling_for_ios_on_linux.rst:148
msgid "Producing fat binaries"
msgstr ""

#: ../../docs/development/compiling/cross-compiling_for_ios_on_linux.rst:150
msgid ""
"Apple requires a fat binary with both architectures (``armv7`` and "
"``arm64``) in a single file. To do this, use the ``arm-apple-darwin11-lipo`` "
"executable. The following example assumes you are in the root Godot source "
"directory:"
msgstr ""

#: ../../docs/development/compiling/cross-compiling_for_ios_on_linux.rst:162
msgid "Then you will have iOS fat binaries in ``bin`` directory."
msgstr ""

#: ../../docs/development/compiling/compiling_for_uwp.rst:4
msgid "Compiling for Universal Windows Platform"
msgstr ""

#: ../../docs/development/compiling/compiling_for_uwp.rst:11
msgid "SCons (see :ref:`doc_compiling_for_windows` for more details)."
msgstr ""

#: ../../docs/development/compiling/compiling_for_uwp.rst:12
msgid ""
"Visual Studio 2015 Update 2. It may work with earlier versions. See :ref:"
"`doc_compiling_for_windows` about the caveats of installing it and the "
"various prompts."
msgstr ""

#: ../../docs/development/compiling/compiling_for_uwp.rst:15
msgid "Windows 10 SDK (can be selected in Visual Studio installation)."
msgstr ""

#: ../../docs/development/compiling/compiling_for_uwp.rst:16
msgid ""
"`ANGLE source <https://github.com/Microsoft/angle>`__. Use the ``ms_master`` "
"(default) branch. Keep it in a path without spaces to avoid problems."
msgstr ""

#: ../../docs/development/compiling/compiling_for_uwp.rst:20
msgid ""
"The ANGLE repo by Microsoft has been discontinued and the ``ms_master`` "
"branch has been cleared out."
msgstr ""

#: ../../docs/development/compiling/compiling_for_uwp.rst:23
msgid ""
"As a temporary workaround however, it is still possible to download an older "
"state of the source code via commit `c61d048 <https://github.com/microsoft/"
"angle/tree/c61d0488abd9663e0d4d2450db7345baa2c0dfb6>`__."
msgstr ""

#: ../../docs/development/compiling/compiling_for_uwp.rst:26
msgid ""
"This page will eventually be updated in the future to reflect the new build "
"instructions."
msgstr ""

#: ../../docs/development/compiling/compiling_for_uwp.rst:35
msgid ""
"You need to open a proper Visual Studio prompt for the target architecture "
"you want to build. Check :ref:`doc_compiling_for_windows` to see how these "
"prompts work."
msgstr ""

#: ../../docs/development/compiling/compiling_for_uwp.rst:39
msgid ""
"There are three target architectures for UWP: x86 (32-bits), x64 (64-bits) "
"and ARM (32-bits). For the latter, you can run ``vcvarsall.bat`` with "
"``x86_arm`` or ``amd64_arm`` as argument to set the environment."
msgstr ""

#: ../../docs/development/compiling/compiling_for_uwp.rst:43
msgid ""
"Set the ``ANGLE_SRC_PATH`` to the directory where you downloaded the ANGLE "
"source code. The build process will also build ANGLE to produce the required "
"DLLs for the selected architecture."
msgstr ""

#: ../../docs/development/compiling/compiling_for_uwp.rst:47
msgid ""
"Once you're set, run the SCons command similarly to the other platforms::"
msgstr ""

#: ../../docs/development/compiling/compiling_for_uwp.rst:52
msgid "Creating UWP export templates"
msgstr ""

#: ../../docs/development/compiling/compiling_for_uwp.rst:54
msgid ""
"To export using the editor you need to properly build package the templates. "
"You need all three architectures with ``debug`` and ``release`` templates to "
"be able to export."
msgstr ""

#: ../../docs/development/compiling/compiling_for_uwp.rst:58
msgid ""
"Open the command prompt for one architecture and run SCons twice (once for "
"each target)::"
msgstr ""

#: ../../docs/development/compiling/compiling_for_uwp.rst:64
msgid "Repeat for the other architectures."
msgstr ""

#: ../../docs/development/compiling/compiling_for_uwp.rst:66
msgid ""
"In the end your ``bin`` folder will have the ``.exe`` binaries with a name "
"like ``godot.uwp.opt.debug.32.x86.exe`` (with variations for each target/"
"arch)."
msgstr ""

#: ../../docs/development/compiling/compiling_for_uwp.rst:70
msgid ""
"Copy one of these to ``misc/dist/uwp_template`` inside the Godot source "
"folder and rename the binary to ``godot.uwp.exe``. From the ANGLE source, "
"under ``winrt/10/src/Release_%arch%`` (where ``%arch%`` can be ``Win32``, "
"``x64`` or ``ARM``), get the ``libEGL.dll`` and the ``libGLESv2.dll``, "
"putting them along with the executable."
msgstr ""

#: ../../docs/development/compiling/compiling_for_uwp.rst:76
msgid ""
"Add the files in the ``uwp_template`` folder to a ZIP. Rename the resulting "
"Zip according to the target/architecture of the template::"
msgstr ""

#: ../../docs/development/compiling/compiling_for_uwp.rst:86
msgid ""
"Move those templates to the ``[versionstring]\\templates`` folder in Godot "
"settings path, where `versionstring` is the version of Godot you have "
"compiled the export templates for - e.g. `3.0.alpha` for the alpha version "
"of Godot 3. If you don't want to replace the templates, you can set the "
"\"Custom Package\" property in the export window."
msgstr ""

#: ../../docs/development/compiling/compiling_for_uwp.rst:93
msgid "Running UWP apps with Visual Studio"
msgstr ""

#: ../../docs/development/compiling/compiling_for_uwp.rst:95
msgid ""
"If you want to debug the UWP port or simply run your apps without packaging "
"and signing, you can deploy and launch them using Visual Studio. It might be "
"the easiest way if you are testing on a device such as a Windows Phone or an "
"Xbox One."
msgstr ""

#: ../../docs/development/compiling/compiling_for_uwp.rst:100
msgid ""
"Within the ANGLE source folder, open ``templates`` and double-click the "
"``install.bat`` script file. This will install the Visual Studio project "
"templates for ANGLE apps."
msgstr ""

#: ../../docs/development/compiling/compiling_for_uwp.rst:104
msgid ""
"If you have not built Godot yet, open the ``winrt/10/src/angle.sln`` "
"solution from the ANGLE source and build it to Release/Win32 target. You may "
"also need to build it for ARM if you plan to run on a device. You can also "
"use MSBuild if you're comfortable with the command line."
msgstr ""

#: ../../docs/development/compiling/compiling_for_uwp.rst:109
msgid ""
"Create a new Windows App project using the \"App for OpenGL ES (Windows "
"Universal)\" project template, which can be found under the ``Visual C++/"
"Windows/Universal`` category."
msgstr ""

#: ../../docs/development/compiling/compiling_for_uwp.rst:113
msgid ""
"This is a base project with the ANGLE dependencies already set up. However, "
"by default it picks the debug version of the DLLs which usually have poor "
"performance. So in the \"Binaries\" filter, click in each of the DLLs there "
"and in the \"Properties\" window and change the relative path from "
"``Debug_Win32`` to ``Release_Win32`` (or ``Release_ARM`` for devices)."
msgstr ""

#: ../../docs/development/compiling/compiling_for_uwp.rst:119
msgid ""
"In the same \"Binaries\" filter, select \"Add > Existing Item\" and point to "
"the Godot executable for UWP you have. In the \"Properties\" window, set "
"\"Content\" to ``True`` so it's included in the project."
msgstr ""

#: ../../docs/development/compiling/compiling_for_uwp.rst:123
msgid ""
"Right-click the ``Package.appxmanifest`` file and select \"Open With... > "
"XML (Text) Editor\". In the ``Package/Applications/Application`` element, "
"replace the ``Executable`` attribute from ``$targetnametoken$.exe`` to "
"``godot.uwp.exe`` (or whatever your Godot executable is called). Also change "
"the ``EntryPoint`` attribute to ``GodotUWP.App``. This will ensure that the "
"Godot executable is correctly called when the app starts."
msgstr ""

#: ../../docs/development/compiling/compiling_for_uwp.rst:130
msgid ""
"Create a folder (*not* a filter) called ``game`` in your Visual Studio "
"project folder and there you can put either a ``data.pck`` file or your "
"Godot project files. After that, make sure to include it all with the \"Add "
"> Existing Item\" command and set their \"Content\" property to ``True`` so "
"they're copied to the app."
msgstr ""

#: ../../docs/development/compiling/compiling_for_uwp.rst:136
msgid ""
"To ease the workflow, you can open the \"Solution Properties\" and in the "
"\"Configuration\" section untick the \"Build\" option for the app. You still "
"have to build it at least once to generate some needed files, you can do so "
"by right-clicking the project (*not* the solution) in the \"Solution Explorer"
"\" and selecting \"Build\"."
msgstr ""

#: ../../docs/development/compiling/compiling_for_uwp.rst:142
msgid ""
"Now you can just run the project and your app should open. You can also use "
"the \"Start Without Debugging\" option from the \"Debug\" menu (or press :"
"kbd:`Ctrl + F5`) to make it launch faster."
msgstr ""

#: ../../docs/development/compiling/compiling_for_web.rst:4
msgid "Compiling for the Web"
msgstr ""

#: ../../docs/development/compiling/compiling_for_web.rst:11
msgid "To compile export templates for the Web, the following is required:"
msgstr ""

#: ../../docs/development/compiling/compiling_for_web.rst:13
msgid ""
"`Emscripten 1.38.27+ <http://kripken.github.io/emscripten-site>`__: If the "
"version available per package manager is not recent enough, the best "
"alternative is to install using the `Emscripten SDK <http://kripken.github."
"io/emscripten-site/docs/getting_started/downloads.html>`__"
msgstr ""

#: ../../docs/development/compiling/compiling_for_web.rst:16
msgid "`Python 2.7+ or Python 3.5+ <https://www.python.org/>`__"
msgstr ""

#: ../../docs/development/compiling/compiling_for_web.rst:17
msgid "`SCons <https://www.scons.org>`__ build system"
msgstr ""

#: ../../docs/development/compiling/compiling_for_web.rst:25
msgid ""
"Before starting, confirm that the Emscripten configuration file exists and "
"specifies all settings correctly. This file is available as ``~/."
"emscripten`` on UNIX-like systems and ``%USERPROFILE%\\.emscripten`` on "
"Windows. It's usually written by the Emscripten SDK, e.g. when invoking "
"``emsdk activate latest``, or by your package manager. It's also created "
"when starting Emscripten's ``emcc`` program if the file doesn't exist."
msgstr ""

#: ../../docs/development/compiling/compiling_for_web.rst:32
msgid ""
"On Windows, make sure to escape backslashes of paths within the Emscripten "
"configuration file as double backslashes ``\\\\`` or use Unix-style paths "
"with a single forward slash ``/``."
msgstr ""

#: ../../docs/development/compiling/compiling_for_web.rst:36
msgid ""
"Open a terminal and navigate to the root directory of the engine source "
"code. Then instruct SCons to build the JavaScript platform. Specify "
"``target`` as either ``release`` for a release build or ``release_debug`` "
"for a debug build::"
msgstr ""

#: ../../docs/development/compiling/compiling_for_web.rst:43
msgid ""
"By default, the :ref:`JavaScript singleton <doc_javascript_eval>` will be "
"built into the engine. Since ``eval()`` calls can be a security concern, the "
"``javascript_eval`` option can be used to build without the singleton::"
msgstr ""

#: ../../docs/development/compiling/compiling_for_web.rst:50
msgid ""
"The engine will now be compiled to WebAssembly by Emscripten. Once finished, "
"the resulting file will be placed in the ``bin`` subdirectory. Its name is "
"``godot.javascript.opt.zip`` for release or ``godot.javascript.opt.debug."
"zip`` for debug."
msgstr ""

#: ../../docs/development/compiling/compiling_for_web.rst:55
msgid ""
"Finally, rename the zip archive to ``webassembly_release.zip`` for the "
"release template::"
msgstr ""

#: ../../docs/development/compiling/compiling_for_web.rst:60
msgid "And ``webassembly_debug.zip`` for the debug template::"
msgstr ""

#: ../../docs/development/compiling/compiling_for_web.rst:65
msgid "Building per asm.js translation or LLVM backend"
msgstr ""

#: ../../docs/development/compiling/compiling_for_web.rst:67
msgid ""
"WebAssembly can be compiled in two ways: The default is to first compile to "
"asm.js, a highly optimizable subset of JavaScript, using Emscripten's "
"*fastcomp* fork of LLVM. This code is then translated to WebAssembly using a "
"tool called ``asm2wasm``. Emscripten automatically takes care of both "
"processes, we simply run SCons."
msgstr ""

#: ../../docs/development/compiling/compiling_for_web.rst:73
msgid ""
"The other method uses LLVM's WebAssembly backend. This backend is available "
"starting with LLVM 8 or in development builds. Emscripten manages this "
"process as well, so we just invoke SCons."
msgstr ""

#: ../../docs/development/compiling/compiling_for_web.rst:77
msgid ""
"In order to choose one of the two methods, the ``LLVM_ROOT`` variable in the "
"Emscripten configuration file is used. If it points to a directory "
"containing binaries of Emscripten's *fastcomp* fork of clang, ``asm2wasm`` "
"is used. This is the default in a normal Emscripten installation. Otherwise, "
"LLVM binaries built with the WebAssembly backend will be expected and the "
"LLVM's WebAssembly backend is used."
msgstr ""

#: ../../docs/development/compiling/compiling_with_mono.rst:4
msgid "Compiling with Mono"
msgstr ""

#: ../../docs/development/compiling/compiling_with_mono.rst:11
msgid "Mono 5.12.0 or greater"
msgstr ""

#: ../../docs/development/compiling/compiling_with_mono.rst:12
msgid "MSBuild"
msgstr ""

#: ../../docs/development/compiling/compiling_with_mono.rst:13
msgid "NuGet"
msgstr ""

#: ../../docs/development/compiling/compiling_with_mono.rst:14
msgid "pkg-config"
msgstr ""

#: ../../docs/development/compiling/compiling_with_mono.rst:16
msgid ""
"You may need to import necessary certificates for NuGet to perform HTTPS "
"requests."
msgstr ""

#: ../../docs/development/compiling/compiling_with_mono.rst:19
msgid ""
"The recommended method is to use **curl**'s CA (Certificate Autorities) "
"certificate bundle."
msgstr ""

#: ../../docs/development/compiling/compiling_with_mono.rst:21
msgid ""
"Run the following commands to download and import it. On Windows, you can "
"run it from the Mono command line prompt (or the regular prompt if you added "
"Mono's ``bin`` directory to your ``PATH`` environment variable)::"
msgstr ""

#: ../../docs/development/compiling/compiling_with_mono.rst:27
msgid ""
"Alternatively, you can use the following command, though it's deprecated and "
"may not work correctly::"
msgstr ""

#: ../../docs/development/compiling/compiling_with_mono.rst:32
msgid "Environment variables"
msgstr ""

#: ../../docs/development/compiling/compiling_with_mono.rst:34
msgid ""
"By default, SCons will try to find Mono in the Windows Registry on Windows "
"or via ``pkg-config`` on other platforms. You can specify a different "
"installation directory by passing the ``mono_prefix`` command-line option to "
"SCons; e.g. ``scons [...] mono_prefix=%ProgramFiles%/Mono``."
msgstr ""

#: ../../docs/development/compiling/compiling_with_mono.rst:39
msgid ""
"This is the directory that contains the subdirectories ``include`` and "
"``lib``."
msgstr ""

#: ../../docs/development/compiling/compiling_with_mono.rst:42
msgid "Enable the Mono module"
msgstr ""

#: ../../docs/development/compiling/compiling_with_mono.rst:44
msgid ""
"By default, the Mono module is disabled when building. To enable it, add the "
"option ``module_mono_enabled=yes`` to the SCons command line."
msgstr ""

#: ../../docs/development/compiling/compiling_with_mono.rst:48
msgid "Generate the glue"
msgstr ""

#: ../../docs/development/compiling/compiling_with_mono.rst:50
msgid ""
"Glue sources are the wrapper functions that will be called by managed "
"methods. These source files must be generated before building your final "
"binaries. In order to generate them, first, you must build a temporary Godot "
"binary with the options ``tools=yes`` and ``mono_glue=no``::"
msgstr ""

#: ../../docs/development/compiling/compiling_with_mono.rst:57
msgid ""
"After the build finishes, you need to run the compiled executable with the "
"parameter ``--generate-mono-glue`` followed by the path to an output "
"directory. This path must be ``modules/mono/glue`` in the Godot directory::"
msgstr ""

#: ../../docs/development/compiling/compiling_with_mono.rst:63
msgid ""
"This command will tell Godot to generate the file ``modules/mono/glue/"
"mono_glue.gen.cpp`` and the C# solution for the Godot API at ``modules/mono/"
"glue/Managed/Generated``. Once these files are generated, you can build "
"Godot for all the desired targets without having to repeat this process."
msgstr ""

#: ../../docs/development/compiling/compiling_with_mono.rst:68
msgid ""
"``<godot_binary>`` refers to the tools binary you compiled above with the "
"Mono module enabled. Its exact name will differ based on your system and "
"configuration, but should be of the form ``bin/godot.<platform>.tools.<bits>."
"mono``, e.g. ``bin/godot.x11.tools.64.mono`` or ``bin/godot.windows.tools.64."
"exe``. Be especially aware of the **.mono** suffix! If you've previously "
"compiled Godot without Mono support, you might have similarly named binaries "
"without this suffix. These binaries can't be used to generate the Mono glue."
msgstr ""

#: ../../docs/development/compiling/compiling_with_mono.rst:78
#: ../../docs/development/cpp/custom_godot_servers.rst:506
msgid "Notes"
msgstr ""

#: ../../docs/development/compiling/compiling_with_mono.rst:79
msgid ""
"**Do not build your final binaries with** ``mono_glue=no``. This disables C# "
"scripting. This option must be used only for the temporary binary that will "
"generate the glue. Godot will print a warning at startup if it was built "
"without the glue sources."
msgstr ""

#: ../../docs/development/compiling/compiling_with_mono.rst:83
msgid ""
"The glue sources must be regenerated every time the ClassDB-registered API "
"changes. That is, for example, when a new method is registered to the "
"scripting API or one of the parameters of such a method changes. Godot will "
"print an error at startup if there is an API mismatch between ClassDB and "
"the glue sources."
msgstr ""

#: ../../docs/development/compiling/compiling_with_mono.rst:91
msgid "Rebuild with Mono glue"
msgstr ""

#: ../../docs/development/compiling/compiling_with_mono.rst:93
msgid ""
"Once you have generated the Mono glue, you can build the final binary with "
"``mono_glue=yes``. This is the default value for ``mono_glue``, so you can "
"also omit it. To build a Mono-enabled editor::"
msgstr ""

#: ../../docs/development/compiling/compiling_with_mono.rst:99
msgid "And Mono-enabled export templates::"
msgstr ""

#: ../../docs/development/compiling/compiling_with_mono.rst:103
msgid ""
"If everything went well, apart from the normal output, SCons should have "
"created the following files in the ``bin`` directory:"
msgstr ""

#: ../../docs/development/compiling/compiling_with_mono.rst:106
msgid ""
"If you're not linking the Mono runtime statically, the build script will "
"place the Mono runtime shared library (``monosgen-2.0``) next to the Godot "
"binary in the output directory. Make sure to include this library when "
"distributing Godot. When targeting Android, no extra steps are required as "
"this library is automatically copied to ``#platform/android/java/libs`` and "
"Gradle takes care of the rest."
msgstr ""

#: ../../docs/development/compiling/compiling_with_mono.rst:112
msgid ""
"Unlike \"classical\" Godot builds, when building with the Mono module "
"enabled (and depending on the target platform), a data directory may be "
"created both for the editor and for export templates. This directory is "
"important for proper functioning and must be distributed together with "
"Godot. More details about this directory in :ref:`Data "
"directory<compiling_with_mono_data_directory>`."
msgstr ""

#: ../../docs/development/compiling/compiling_with_mono.rst:123
msgid "Example (Windows)"
msgstr ""

#: ../../docs/development/compiling/compiling_with_mono.rst:139
msgid "Example (X11)"
msgstr ""

#: ../../docs/development/compiling/compiling_with_mono.rst:157
msgid "Data directory"
msgstr ""

#: ../../docs/development/compiling/compiling_with_mono.rst:159
msgid ""
"The data directory is a dependency for Godot binaries built with the Mono "
"module enabled. It contains important files for the correct functioning of "
"Godot. It must be distributed together with the Godot executable."
msgstr ""

#: ../../docs/development/compiling/compiling_with_mono.rst:163
msgid ""
"The information below doesn't apply to Android, as there is no data "
"directory for that platform."
msgstr ""

#: ../../docs/development/compiling/compiling_with_mono.rst:169
msgid ""
"The name of the data directory for an export template differs based on the "
"configuration it was built with. The format is ``data.mono.<platform>.<bits>."
"<target>``, e.g. ``data.mono.x11.32.release_debug`` or ``data.mono."
"windows.64.release``."
msgstr ""

#: ../../docs/development/compiling/compiling_with_mono.rst:174
msgid ""
"This directory must be placed with its original name next to the Godot "
"export templates. When exporting a project, Godot will also copy this "
"directory with the game executable but the name will be changed to "
"``data_<APPNAME>``, where ``<APPNAME>`` is the application name as specified "
"in the project setting ``application/config/name``."
msgstr ""

#: ../../docs/development/compiling/compiling_with_mono.rst:180
msgid ""
"In the case of macOS, where the export template is compressed as a ZIP "
"archive, the contents of the data directory can be placed in the following "
"locations inside the ZIP archive:"
msgstr ""

#: ../../docs/development/compiling/compiling_with_mono.rst:185
#: ../../docs/development/compiling/compiling_with_mono.rst:207
msgid "``bin/data.mono.<platform>.<bits>.<target>/Mono/lib``"
msgstr ""

#: ../../docs/development/compiling/compiling_with_mono.rst:185
msgid "``/osx_template.app/Contents/Frameworks/GodotSharp/Mono/lib``"
msgstr ""

#: ../../docs/development/compiling/compiling_with_mono.rst:187
#: ../../docs/development/compiling/compiling_with_mono.rst:209
msgid "``bin/data.mono.<platform>.<bits>.<target>/Mono/etc``"
msgstr ""

#: ../../docs/development/compiling/compiling_with_mono.rst:187
msgid "``/osx_template.app/Contents/Resources/GodotSharp/Mono/etc``"
msgstr ""

#: ../../docs/development/compiling/compiling_with_mono.rst:193
msgid ""
"The name of the data directory for the Godot editor will always be "
"``GodotSharp``. The contents of this directory are the following:"
msgstr ""

#: ../../docs/development/compiling/compiling_with_mono.rst:196
msgid "``Api``"
msgstr "``Api(응용 프로그램 프로그래밍 인터페이스)``"

#: ../../docs/development/compiling/compiling_with_mono.rst:197
msgid "``Mono`` (optional)"
msgstr "``Mono`` (선택)"

#: ../../docs/development/compiling/compiling_with_mono.rst:198
msgid "``Tools``"
msgstr "``Tools(도구)``"

#: ../../docs/development/compiling/compiling_with_mono.rst:200
msgid ""
"The ``Api`` subdirectory contains the Godot API assemblies. On macOS, if the "
"Godot editor is distributed as a bundle, the contents of the data directory "
"may be placed in the following locations:"
msgstr ""

#: ../../docs/development/compiling/compiling_with_mono.rst:205
msgid "``bin/data.mono.<platform>.<bits>.<target>/Api``"
msgstr ""

#: ../../docs/development/compiling/compiling_with_mono.rst:205
msgid "``<bundle_name>.app/Contents/Frameworks/GodotSharp/Api``"
msgstr ""

#: ../../docs/development/compiling/compiling_with_mono.rst:207
msgid "``<bundle_name>.app/Contents/Frameworks/GodotSharp/Mono/lib``"
msgstr ""

#: ../../docs/development/compiling/compiling_with_mono.rst:209
msgid "``<bundle_name>.app/Contents/Resources/GodotSharp/Mono/etc``"
msgstr ""

#: ../../docs/development/compiling/compiling_with_mono.rst:211
msgid "``bin/data.mono.<platform>.<bits>.<target>/Tools``"
msgstr ""

#: ../../docs/development/compiling/compiling_with_mono.rst:211
msgid "``<bundle_name>.app/Contents/Frameworks/GodotSharp/Tools``"
msgstr ""

#: ../../docs/development/compiling/compiling_with_mono.rst:214
msgid ""
"The ``Mono`` subdirectory is optional. It will be needed when distributing "
"the editor, as issues can arise when the user-installed Mono version isn't "
"identical to the one the Godot editor was built with. Pass "
"``copy_mono_root=yes`` to SCons when building the editor in order to create "
"this folder and its contents."
msgstr ""

#: ../../docs/development/compiling/compiling_with_mono.rst:219
msgid ""
"The ``Tools`` subdirectory contains tools required by the editor, like the "
"``GodotTools`` assemblies and its dependencies."
msgstr ""

#: ../../docs/development/compiling/compiling_with_mono.rst:223
#, fuzzy
msgid "Targeting Android"
msgstr "안드로이드로 내보내기"

#: ../../docs/development/compiling/compiling_with_mono.rst:225
msgid ""
"Compiling the Android export templates with Mono is a bit simpler than it is "
"for the desktop platforms, as there are no additional steps required after "
"building. There is no need to worry about run-time dependencies like a data "
"directory or the shared library (when dynamically linking) as those are "
"automatically added to the Gradle project."
msgstr ""

#: ../../docs/development/compiling/compiling_with_mono.rst:231
msgid ""
"Before building Godot, you need to cross compile the Mono runtime for the "
"target architectures. We recommend using these `build scripts <https://"
"github.com/godotengine/godot-mono-builds>`_. They simplify this process but "
"also include some patches needed for proper functioning with Godot. See the "
"README on the link above for instructions on how to use the scripts."
msgstr ""

#: ../../docs/development/compiling/compiling_with_mono.rst:238
msgid ""
"Once you've built Mono, you can proceed to build Godot with the instructions "
"described in this page and the :ref:`Compiling for "
"Android<doc_compiling_for_android>` page. Make sure to let SCons know about "
"the location of the Mono runtime you've just built: ``scons [...] "
"mono_prefix=\"$HOME/mono-installs/android-armeabi-v7a-release\"`` (This path "
"may be different on your system, depending on the options you used to build "
"Mono)."
msgstr ""

#: ../../docs/development/compiling/compiling_with_mono.rst:247
msgid "Command-line options"
msgstr "명령 줄 설정"

#: ../../docs/development/compiling/compiling_with_mono.rst:249
msgid ""
"The following is the list of command-line options available when building "
"with the Mono module:"
msgstr ""

#: ../../docs/development/compiling/compiling_with_mono.rst:252
msgid ""
"**module_mono_enabled**: Build Godot with the Mono module enabled (yes | "
"**no**)"
msgstr ""

#: ../../docs/development/compiling/compiling_with_mono.rst:255
msgid ""
"**mono_glue**: Whether to include the glue source files in the build and "
"define ``MONO_GLUE_DISABLED`` as a preprocessor macro (**yes** | no)"
msgstr ""

#: ../../docs/development/compiling/compiling_with_mono.rst:258
msgid ""
"**mono_prefix**: Path to the Mono installation directory for the target "
"platform and architecture"
msgstr ""

#: ../../docs/development/compiling/compiling_with_mono.rst:261
msgid ""
"**xbuild_fallback**: Whether to fallback to xbuild if MSBuild is not "
"available (yes | **no**)"
msgstr ""

#: ../../docs/development/compiling/compiling_with_mono.rst:264
msgid ""
"**mono_static**: Whether to link the Mono runtime statically (yes | **no**)"
msgstr ""

#: ../../docs/development/compiling/compiling_with_mono.rst:267
msgid ""
"**copy_mono_root**: Whether to copy the Mono framework assemblies and "
"configuration files required by the Godot editor (yes | **no**)"
msgstr ""

#: ../../docs/development/compiling/optimizing_for_size.rst:4
msgid "Optimizing a build for size"
msgstr ""

#: ../../docs/development/compiling/optimizing_for_size.rst:9
msgid "Rationale"
msgstr ""

#: ../../docs/development/compiling/optimizing_for_size.rst:11
msgid ""
"Sometimes, it is desired to optimize a build for size rather than speed. "
"This means not compiling unused functions from the engine, as well as using "
"specific compiler flags to aid on decreasing build size. Common situations "
"include creating builds for mobile and Web platforms."
msgstr ""

#: ../../docs/development/compiling/optimizing_for_size.rst:16
msgid ""
"This tutorial aims to give an overview on different methods to create a "
"smaller binary. Before continuing, it is recommended to read the previous "
"tutorials on compiling Godot for each platform."
msgstr ""

#: ../../docs/development/compiling/optimizing_for_size.rst:21
msgid "Disabling 3D"
msgstr ""

#: ../../docs/development/compiling/optimizing_for_size.rst:23
msgid ""
"For 2D games, having the whole 3D engine available usually makes no sense. "
"Because of this, there is a build flag to disable it:"
msgstr ""

#: ../../docs/development/compiling/optimizing_for_size.rst:29
msgid ""
"Tools must be disabled in order to use this flag, as the editor is not "
"designed to operate without 3D support. Without it, the binary size can be "
"reduced by about 15%."
msgstr ""

#: ../../docs/development/compiling/optimizing_for_size.rst:34
msgid "Disabling advanced GUI nodes"
msgstr ""

#: ../../docs/development/compiling/optimizing_for_size.rst:36
msgid ""
"Most small games don't require complex GUI controls such as Tree, ItemList, "
"TextEditor or GraphEdit. They can be disabled using a build flag:"
msgstr ""

#: ../../docs/development/compiling/optimizing_for_size.rst:44
msgid "Disabling unwanted modules"
msgstr ""

#: ../../docs/development/compiling/optimizing_for_size.rst:46
msgid ""
"A lot of Godot's functions are offered as modules. You can see a list of "
"modules with the following command:"
msgstr ""

#: ../../docs/development/compiling/optimizing_for_size.rst:53
msgid ""
"The list of modules that can be disabled will appear, together with all "
"build options. If you are working on a simple 2D game, you could disable a "
"lot of them:"
msgstr ""

#: ../../docs/development/compiling/optimizing_for_size.rst:61
msgid ""
"If this proves not to work for your use case, you should review the list of "
"modules and see which ones you actually still need for your game (e.g. you "
"might want to keep networking-related modules, regex support, or theora/webm "
"to play videos)."
msgstr ""

#: ../../docs/development/compiling/optimizing_for_size.rst:67
msgid "Optimizing for size instead of speed"
msgstr ""

#: ../../docs/development/compiling/optimizing_for_size.rst:69
msgid ""
"Godot 3.1 onwards allows to compile using size optimizations. To enable "
"this, just set the ``optimize`` flag to ``size``:"
msgstr ""

#: ../../docs/development/compiling/optimizing_for_size.rst:76
msgid "Some platforms such as WebAssembly already use this mode by default."
msgstr ""

#: ../../docs/development/compiling/optimizing_for_size.rst:79
msgid "Compiling with link-time optimization"
msgstr ""

#: ../../docs/development/compiling/optimizing_for_size.rst:81
msgid ""
"Enabling link-time optimization produces more efficient binaries, both in "
"terms of performance and file size. It works by eliminating duplicate "
"template functions and unused code. It can currently be used with the GCC "
"and MSVC compilers:"
msgstr ""

#: ../../docs/development/compiling/optimizing_for_size.rst:90
msgid ""
"Linking becomes much slower with this option, so it should be used only for "
"release builds."
msgstr ""

#: ../../docs/development/compiling/optimizing_for_size.rst:94
msgid "Stripping binaries"
msgstr ""

#: ../../docs/development/compiling/optimizing_for_size.rst:96
msgid ""
"If you build from source, remember to strip debug symbols from binaries:"
msgstr ""

#: ../../docs/development/compiling/optimizing_for_size.rst:103
msgid "Using UPX to compress binaries"
msgstr ""

#: ../../docs/development/compiling/optimizing_for_size.rst:105
msgid ""
"If you are targeting desktop platforms, the `UPX <https://upx.github.io/>`_ "
"compressor can be used. This can reduce binary size considerably."
msgstr ""

#: ../../docs/development/compiling/optimizing_for_size.rst:109
msgid ""
"However, keep in mind that some antivirus programs may detect UPX-packed "
"binaries as a virus. Therefore, if you are releasing a commercial game, make "
"sure to sign your binaries or use a platform that will distribute them."
msgstr ""

#: ../../docs/development/compiling/compiling_with_script_encryption_key.rst:4
msgid "Compiling with script encryption key"
msgstr ""

#: ../../docs/development/compiling/compiling_with_script_encryption_key.rst:8
msgid ""
"The export dialog gives you the option to encrypt your scripts with an "
"256bit AES key, when releasing your game. This will make sure your scripts "
"are not stored in plain text and can not easily be ripped by some script "
"kiddie. Of course the key needs to be stored in the binary, but if it's "
"compiled, optimized and without symbols, it would take some effort to find "
"it."
msgstr ""

#: ../../docs/development/compiling/compiling_with_script_encryption_key.rst:14
msgid ""
"For this to work, you need to build the export templates from source, with "
"that same key."
msgstr ""

#: ../../docs/development/compiling/compiling_with_script_encryption_key.rst:20
msgid ""
"Generate a 256bit AES key in HEX. You can use the aes-256-cbc variant from "
"`this service <https://asecuritysite.com/encryption/keygen>`_."
msgstr ""

#: ../../docs/development/compiling/compiling_with_script_encryption_key.rst:23
msgid "Alternatively, you can generate it yourself by using OpenSSL:"
msgstr ""

#: ../../docs/development/compiling/compiling_with_script_encryption_key.rst:29
msgid "This should output the following to ``godot.gdkey`` file:"
msgstr ""

#: ../../docs/development/compiling/compiling_with_script_encryption_key.rst:37
msgid ""
"You can generate the key without redirecting the output to a file, but that "
"way you can minimize the risk of exposing the key."
msgstr ""

#: ../../docs/development/compiling/compiling_with_script_encryption_key.rst:40
msgid ""
"Set this key as environment variable in the console that you will use to "
"compile Godot, like this:"
msgstr ""

#: ../../docs/development/compiling/compiling_with_script_encryption_key.rst:52
msgid ""
"Compile Godot export templates and set them as custom export templates in "
"the export preset options."
msgstr ""

#: ../../docs/development/compiling/compiling_with_script_encryption_key.rst:55
msgid "Set the encryption key in the ``Script`` tab of the export preset:"
msgstr ""

#: ../../docs/development/compiling/compiling_with_script_encryption_key.rst:59
msgid "Export the project. The game should run with encrypted scripts now."
msgstr ""

#: ../../docs/development/compiling/compiling_with_script_encryption_key.rst:62
msgid "Possible Errors"
msgstr ""

#: ../../docs/development/compiling/compiling_with_script_encryption_key.rst:64
msgid ""
"If you get an error like below, it means the key wasn't properly included in "
"your Godot build. Godot is encrypting the scripts during export, but can't "
"read them at runtime."
msgstr ""

#: ../../docs/development/cpp/introduction_to_godot_development.rst:4
msgid "Introduction to Godot development"
msgstr ""

#: ../../docs/development/cpp/introduction_to_godot_development.rst:6
msgid ""
"This page is meant to introduce the global organization of Godot Engine's "
"source code, and give useful tips for extending/fixing the engine on the C++ "
"side."
msgstr ""

#: ../../docs/development/cpp/introduction_to_godot_development.rst:11
msgid "Architecture diagram"
msgstr ""

#: ../../docs/development/cpp/introduction_to_godot_development.rst:13
msgid ""
"The following diagram describes the architecture used by Godot, from the "
"core components down to the abstracted drivers, via the scene structure and "
"the servers."
msgstr ""

#: ../../docs/development/cpp/introduction_to_godot_development.rst:20
msgid "Debugging the editor with gdb"
msgstr ""

#: ../../docs/development/cpp/introduction_to_godot_development.rst:22
msgid ""
"If you are writing or correcting bugs affecting Godot Engine's editor, "
"remember that the binary will by default run the project manager first, and "
"then only run the editor in another process once you've selected a project. "
"To launch a project directly, you need to run the editor by passing the ``-"
"e`` argument to Godot Engine's binary from within your project's folder. "
"Typically:"
msgstr ""

#: ../../docs/development/cpp/introduction_to_godot_development.rst:35
msgid "Or:"
msgstr ""

#: ../../docs/development/cpp/configuring_an_ide.rst:4
msgid "Configuring an IDE"
msgstr ""

#: ../../docs/development/cpp/configuring_an_ide.rst:6
msgid ""
"We assume that you have already `cloned <https://github.com/godotengine/"
"godot>`_ and :ref:`compiled <toc-devel-compiling>` Godot."
msgstr ""

#: ../../docs/development/cpp/configuring_an_ide.rst:9
msgid ""
"You can easily develop Godot with any text editor and by invoking ``scons`` "
"on the command line, but if you want to work with an IDE (Integrated "
"Development Environment), here are setup instructions for some popular ones:"
msgstr ""

#: ../../docs/development/cpp/configuring_an_ide.rst:13
msgid ""
":ref:`Qt Creator <doc_configuring_an_ide_qtcreator>` (all desktop platforms)"
msgstr ""

#: ../../docs/development/cpp/configuring_an_ide.rst:14
msgid ""
":ref:`Kdevelop <doc_configuring_an_ide_kdevelop>` (all desktop platforms)"
msgstr ""

#: ../../docs/development/cpp/configuring_an_ide.rst:15
msgid ":ref:`Xcode <doc_configuring_an_ide_xcode>` (macOS)"
msgstr ""

#: ../../docs/development/cpp/configuring_an_ide.rst:16
msgid ":ref:`Visual Studio <doc_compiling_for_windows_install_vs>` (Windows)"
msgstr ""

#: ../../docs/development/cpp/configuring_an_ide.rst:17
msgid ""
":ref:`Visual Studio Code<doc_configuring_an_ide_vscode>` (all desktop "
"platforms)"
msgstr ""

#: ../../docs/development/cpp/configuring_an_ide.rst:18
msgid ""
":ref:`Android Studio<doc_configuring_an_ide_android_studio>` (all desktop "
"platforms)"
msgstr ""

#: ../../docs/development/cpp/configuring_an_ide.rst:19
msgid ":ref:`CLion<doc_configuring_an_ide_clion>` (all desktop platforms)"
msgstr ""

#: ../../docs/development/cpp/configuring_an_ide.rst:21
msgid ""
"It is possible to use other IDEs, but their setup is not documented yet."
msgstr ""

#: ../../docs/development/cpp/configuring_an_ide.rst:26
msgid "Qt Creator"
msgstr "Qt Creator"

#: ../../docs/development/cpp/configuring_an_ide.rst:29
msgid "Importing the project"
msgstr ""

#: ../../docs/development/cpp/configuring_an_ide.rst:31
msgid "Choose *New Project* -> *Import Project* -> *Import Existing Project*."
msgstr ""

#: ../../docs/development/cpp/configuring_an_ide.rst:35
msgid "Set the path to your Godot root directory and enter the project name."
msgstr ""

#: ../../docs/development/cpp/configuring_an_ide.rst:39
msgid ""
"Here you can choose which folders and files will be visible to the project. "
"C/C++ files are added automatically. Potentially useful additions: \\*.py "
"for buildsystem files, \\*.java for Android development, \\*.mm for macOS. "
"Click \"Next\"."
msgstr ""

#: ../../docs/development/cpp/configuring_an_ide.rst:45
msgid "Click *Finish*."
msgstr ""

#: ../../docs/development/cpp/configuring_an_ide.rst:46
msgid ""
"Add a line containing ``.`` to *project_name.includes* to get working code "
"completion."
msgstr ""

#: ../../docs/development/cpp/configuring_an_ide.rst:51
msgid "Build and run"
msgstr ""

#: ../../docs/development/cpp/configuring_an_ide.rst:53
msgid "Build configuration:"
msgstr ""

#: ../../docs/development/cpp/configuring_an_ide.rst:55
msgid "Click on *Projects* and open the *Build* tab."
msgstr ""

#: ../../docs/development/cpp/configuring_an_ide.rst:56
msgid "Delete the pre-defined ``make`` build step."
msgstr ""

#: ../../docs/development/cpp/configuring_an_ide.rst:60
msgid "Click *Add Build Step* -> *Custom Process Step*."
msgstr ""

#: ../../docs/development/cpp/configuring_an_ide.rst:64
msgid ""
"Type ``scons`` in the *Command* field. If it fails with 'Could not start "
"process \"scons\"', it can mean that ``scons`` is not in your ``PATH`` "
"environment variable, so you may have to use the full path to the SCons "
"binary."
msgstr ""

#: ../../docs/development/cpp/configuring_an_ide.rst:67
msgid ""
"Fill the *Arguments* field with your compilation options. (e.g.: ``p=x11 "
"target=debug -j 4``)"
msgstr ""

#: ../../docs/development/cpp/configuring_an_ide.rst:71
msgid "Run configuration:"
msgstr ""

#: ../../docs/development/cpp/configuring_an_ide.rst:73
msgid "Open the *Run* tab."
msgstr ""

#: ../../docs/development/cpp/configuring_an_ide.rst:74
msgid ""
"Point the *Executable* to your compiled Godot binary (e.g: ``%{buildDir}/bin/"
"godot.x11.opt.tools.64``)"
msgstr ""

#: ../../docs/development/cpp/configuring_an_ide.rst:75
msgid ""
"If you want to run a specific game or project, point *Working directory* to "
"the game directory."
msgstr ""

#: ../../docs/development/cpp/configuring_an_ide.rst:76
msgid ""
"If you want to run the editor, add ``-e`` to the *Command line arguments* "
"field."
msgstr ""

#: ../../docs/development/cpp/configuring_an_ide.rst:81
msgid "Updating sources after pulling latest commits"
msgstr ""

#: ../../docs/development/cpp/configuring_an_ide.rst:83
msgid ""
"As a developer you usually want to frequently pull the latest commits from "
"the upstream git repository or a specific fork etc. However this brings a "
"little problem with it: as the development continues, source files (and "
"folders) are added or removed. These changes needs to be reflected in your "
"project files for Qt Creator too, so you continue to have a nice experience "
"coding in it. A simple way to check is to right click at your root folder in "
"the \"Projects View\" and click on \"Edit files...\""
msgstr ""

#: ../../docs/development/cpp/configuring_an_ide.rst:93
msgid ""
"Now a new dialog should appear that is similar in functionality to the one "
"in the third step of the \"Importing the project\" section. Here you can "
"check whether you want to add/remove specific files and/or folders. You can "
"chose by clicking with your mouse or just simply by clicking the \"Apply "
"Filter\" button. A simple click on \"Ok\" and you're ready to continue your "
"work."
msgstr ""

#: ../../docs/development/cpp/configuring_an_ide.rst:101
msgid "Code style configuration"
msgstr ""

#: ../../docs/development/cpp/configuring_an_ide.rst:103
msgid ""
"Developers must follow the project's :ref:`code style "
"<doc_code_style_guidelines>` and IDE should help them to do it. By default, "
"Qt Creator does use spaces for indentation which is incorrect for Godot "
"project. You can change this behavior by changing the \"Code Style\" in "
"*Options* -> *C++*."
msgstr ""

#: ../../docs/development/cpp/configuring_an_ide.rst:110
msgid ""
"Click on *Edit* to change the current settings, then click on *Copy Built-in "
"Code Style* button to set a new code style. Set a name for it (e.g. Godot) "
"and change the Tab policy to be *Tabs Only*."
msgstr ""

#: ../../docs/development/cpp/configuring_an_ide.rst:119
msgid "KDevelop"
msgstr "KDevelop"

#: ../../docs/development/cpp/configuring_an_ide.rst:121
msgid ""
"`KDevelop <https://www.kdevelop.org>`_ is a free, open source IDE for all "
"desktop platforms."
msgstr ""

#: ../../docs/development/cpp/configuring_an_ide.rst:123
msgid ""
"You can find a video tutorial `here <https://www.youtube.com/watch?"
"v=yNVoWQi9TJA>`_. Or you may follow this text version tutorial."
msgstr ""

#: ../../docs/development/cpp/configuring_an_ide.rst:126
msgid "Start by opening KDevelop and choosing \"open project\"."
msgstr ""

#: ../../docs/development/cpp/configuring_an_ide.rst:130
msgid "Choose the directory where you cloned Godot."
msgstr ""

#: ../../docs/development/cpp/configuring_an_ide.rst:132
msgid ""
"On the next screen, choose \"Custom Build System\" for the *Project manager*."
msgstr ""

#: ../../docs/development/cpp/configuring_an_ide.rst:136
msgid "Now that the project has been imported, open the project configuration."
msgstr ""

#: ../../docs/development/cpp/configuring_an_ide.rst:140
msgid "Add the following includes/imports:"
msgstr ""

#: ../../docs/development/cpp/configuring_an_ide.rst:153
msgid "Apply the changes."
msgstr ""

#: ../../docs/development/cpp/configuring_an_ide.rst:155
msgid ""
"Switch to the \"Custom Build System\" tab. Add a build configuration and "
"keep the build directory blank. Enable build tools and add ``scons`` as the "
"executable then add ``platform=x11 target=debug`` (``platform=osx`` if "
"you're on macOS) as the arguments."
msgstr ""

#: ../../docs/development/cpp/configuring_an_ide.rst:162
msgid ""
"Next we need to tell KDevelop where to find the binary. From the \"Run\" "
"menu, choose \"Configure Launches\"."
msgstr ""

#: ../../docs/development/cpp/configuring_an_ide.rst:167
msgid ""
"Click \"Add\" if no launcher exists. Then add the path to your executable in "
"the executable section. Your executable should be located in the ``bin/`` "
"sub-directory and should be named something like ``godot.x11.tools.64`` (the "
"name could be different depending on your platform and depending on your "
"build options)."
msgstr ""

#: ../../docs/development/cpp/configuring_an_ide.rst:175
msgid "That's it! Now you should be good to go :)"
msgstr ""

#: ../../docs/development/cpp/configuring_an_ide.rst:181
msgid "Xcode"
msgstr ""

#: ../../docs/development/cpp/configuring_an_ide.rst:186
msgid "Create an Xcode external build project anywhere"
msgstr ""

#: ../../docs/development/cpp/configuring_an_ide.rst:190
msgid "Set the *Build tool* to the path to scons"
msgstr ""

#: ../../docs/development/cpp/configuring_an_ide.rst:192
msgid "Modify Build Target's Xcode Info Tab:"
msgstr ""

#: ../../docs/development/cpp/configuring_an_ide.rst:194
msgid ""
"Set *Arguments* to something like: platform=osx tools=yes bits=64 "
"target=debug"
msgstr ""

#: ../../docs/development/cpp/configuring_an_ide.rst:195
msgid ""
"Set *Directory* to the path to Godot's source folder. Keep it blank if "
"project is already there."
msgstr ""

#: ../../docs/development/cpp/configuring_an_ide.rst:196
msgid "You may uncheck *Pass build settings in environment*"
msgstr ""

#: ../../docs/development/cpp/configuring_an_ide.rst:200
msgid "Add a Command Line Target:"
msgstr ""

#: ../../docs/development/cpp/configuring_an_ide.rst:202
msgid ""
"Go to Xcode File > New > Target... and add a new Xcode command line target"
msgstr ""

#: ../../docs/development/cpp/configuring_an_ide.rst:208
msgid "Name it something so you know not to compile with this target"
msgstr ""

#: ../../docs/development/cpp/configuring_an_ide.rst:209
msgid "e.g. ``GodotXcodeIndex``"
msgstr ""

#: ../../docs/development/cpp/configuring_an_ide.rst:210
msgid ""
"Goto the newly created target's *Build Settings* tab and search for *Header "
"Search Paths*"
msgstr ""

#: ../../docs/development/cpp/configuring_an_ide.rst:211
msgid "Set *Header Search Paths* to an absolute path to Godot's source folder"
msgstr ""

#: ../../docs/development/cpp/configuring_an_ide.rst:212
msgid "Make it recursive by adding two \\*'s to the end of the path"
msgstr ""

#: ../../docs/development/cpp/configuring_an_ide.rst:213
msgid "e.g. ``/Users/me/repos/godot-source/\\**``"
msgstr ""

#: ../../docs/development/cpp/configuring_an_ide.rst:215
msgid "Add Godot Source to the Project:"
msgstr ""

#: ../../docs/development/cpp/configuring_an_ide.rst:217
msgid "Drag and drop Godot source into project file browser."
msgstr ""

#: ../../docs/development/cpp/configuring_an_ide.rst:218
msgid "Uncheck *Create External Build System*"
msgstr ""

#: ../../docs/development/cpp/configuring_an_ide.rst:222
msgid "Click Next"
msgstr ""

#: ../../docs/development/cpp/configuring_an_ide.rst:223
msgid "Select *create groups*"
msgstr ""

#: ../../docs/development/cpp/configuring_an_ide.rst:227
msgid "Check off only your command line target in the *Add to targets* section"
msgstr ""

#: ../../docs/development/cpp/configuring_an_ide.rst:228
msgid "Click finish. Xcode will now index the files."
msgstr ""

#: ../../docs/development/cpp/configuring_an_ide.rst:229
msgid "Grab a cup of coffee... Maybe make something to eat, too"
msgstr ""

#: ../../docs/development/cpp/configuring_an_ide.rst:230
msgid ""
"You should have jump to definition, auto completion, and full syntax "
"highlighting when it is done."
msgstr ""

#: ../../docs/development/cpp/configuring_an_ide.rst:233
#, fuzzy
msgid "Scheme setup"
msgstr "씬 설정하기"

#: ../../docs/development/cpp/configuring_an_ide.rst:235
msgid "Edit Build Scheme of External Build Target:"
msgstr ""

#: ../../docs/development/cpp/configuring_an_ide.rst:237
msgid "Open scheme editor of external build target"
msgstr ""

#: ../../docs/development/cpp/configuring_an_ide.rst:238
msgid "Expand the *Build* menu"
msgstr ""

#: ../../docs/development/cpp/configuring_an_ide.rst:239
msgid "Goto *Post Actions*"
msgstr ""

#: ../../docs/development/cpp/configuring_an_ide.rst:240
msgid ""
"Add a new script run action, select your project in ``Provide build settings "
"from`` as this allows you to use ``${PROJECT_DIR}`` variable."
msgstr ""

#: ../../docs/development/cpp/configuring_an_ide.rst:244
msgid "Write a script that gives the binary a name that Xcode will recognize"
msgstr ""

#: ../../docs/development/cpp/configuring_an_ide.rst:245
msgid ""
"e.g. ``ln -f ${PROJECT_DIR}/godot/bin/godot.osx.tools.64 ${PROJECT_DIR}/"
"godot/bin/godot``"
msgstr ""

#: ../../docs/development/cpp/configuring_an_ide.rst:246
msgid "Build the external build target"
msgstr ""

#: ../../docs/development/cpp/configuring_an_ide.rst:248
msgid "Edit Run Scheme of External Build Target:"
msgstr ""

#: ../../docs/development/cpp/configuring_an_ide.rst:250
msgid "Open the scheme editor again"
msgstr ""

#: ../../docs/development/cpp/configuring_an_ide.rst:251
msgid "Click Run"
msgstr ""

#: ../../docs/development/cpp/configuring_an_ide.rst:255
msgid ""
"Set the *Executable* to the file you linked in your post build action script"
msgstr ""

#: ../../docs/development/cpp/configuring_an_ide.rst:256
msgid "Check *Debug executable* if it isn't already"
msgstr ""

#: ../../docs/development/cpp/configuring_an_ide.rst:257
msgid ""
"You can go to *Arguments* tab and add an -e and a -path to a project to "
"debug the editor not the project selection screen"
msgstr ""

#: ../../docs/development/cpp/configuring_an_ide.rst:260
msgid "Test it:"
msgstr ""

#: ../../docs/development/cpp/configuring_an_ide.rst:262
msgid "Set a breakpoint in platform/osx/godot_main_osx.mm"
msgstr ""

#: ../../docs/development/cpp/configuring_an_ide.rst:263
msgid "It should break at the point!"
msgstr ""

#: ../../docs/development/cpp/configuring_an_ide.rst:271
msgid ""
"Ensure that C/C++ extension is installed. You can find instructions in `docs "
"<https://code.visualstudio.com/docs/languages/cpp>`_."
msgstr ""

#: ../../docs/development/cpp/configuring_an_ide.rst:273
msgid "Open cloned godot folder in VS Code with ``File > Open Folder...``"
msgstr ""

#: ../../docs/development/cpp/configuring_an_ide.rst:275
msgid ""
"In order to build the project, you need two configuration files: *launch."
"json* and *tasks.json*. To create them:"
msgstr ""

#: ../../docs/development/cpp/configuring_an_ide.rst:278
msgid ""
"Open *Debug* view by pressing :kbd:`Ctrl + Shift + D` and select cogwheel "
"with an orange dot:"
msgstr ""

#: ../../docs/development/cpp/configuring_an_ide.rst:282
msgid ""
"Select *C++ (GDB/LLDB)* (it might be named differently on macOS or Windows)"
msgstr ""

#: ../../docs/development/cpp/configuring_an_ide.rst:284
msgid "Update *launch.json* to match:"
msgstr ""

#: ../../docs/development/cpp/configuring_an_ide.rst:288
msgid ""
"(Note that *godot.x11.tools.64* in \"program\" value might be named "
"differently on macOS or Windows)"
msgstr ""

#: ../../docs/development/cpp/configuring_an_ide.rst:290
msgid ""
"Create *tasks.json* by starting the Debug process with :kbd:`F5`. VS Code "
"will show a dialog with a *Configure Task* button. Tap it and select *Create "
"tasks.json file from template*, then select *Others*"
msgstr ""

#: ../../docs/development/cpp/configuring_an_ide.rst:292
msgid "Update *tasks.json* to match:"
msgstr ""

#: ../../docs/development/cpp/configuring_an_ide.rst:296
msgid "(Note that *platform=x11* will be different for macOX and Windows)"
msgstr ""

#: ../../docs/development/cpp/configuring_an_ide.rst:298
msgid ""
"You can now start the Debug process again to test that everything works."
msgstr ""

#: ../../docs/development/cpp/configuring_an_ide.rst:300
msgid ""
"If the build phase fails, check the console for hints. On Linux it's most "
"likely that some dependencies are missing. Check :ref:`Compiling for X11 "
"(Linux, \\*BSD) <doc_compiling_for_x11>`"
msgstr ""

#: ../../docs/development/cpp/configuring_an_ide.rst:306
#, fuzzy
msgid "Android Studio"
msgstr "Android SDK"

#: ../../docs/development/cpp/configuring_an_ide.rst:308
msgid ""
"`Android Studio <https://developer.android.com/studio>`_ is a `JetBrains "
"<https://www.jetbrains.com/>`_ IDE for Android development. It has a feature-"
"rich editor which supports Java and C/C++, so it can be used for development "
"of the Godot core engine, and Android platform codebases."
msgstr ""

#: ../../docs/development/cpp/configuring_an_ide.rst:313
msgid ""
"From the Android Studio *Welcome to Android Studio* window, select *Open an "
"existing Android Studio project*"
msgstr ""

#: ../../docs/development/cpp/configuring_an_ide.rst:317
msgid ""
"Navigate to ``<godot root directory>/platform/android/java`` and select the "
"``settings.gradle`` gradle file."
msgstr ""

#: ../../docs/development/cpp/configuring_an_ide.rst:318
msgid "Android Studio will import and index the project."
msgstr ""

#: ../../docs/development/cpp/configuring_an_ide.rst:319
msgid ""
"To build the project, follow the :ref:`compiling instructions <toc-devel-"
"compiling>`."
msgstr ""

#: ../../docs/development/cpp/configuring_an_ide.rst:324
msgid "CLion"
msgstr ""

#: ../../docs/development/cpp/configuring_an_ide.rst:326
msgid ""
"`CLion <https://www.jetbrains.com/clion/>`_ is a commercial IDE for C++. It "
"requires a ``CMakeLists.txt`` file as a project file, which is problematic "
"for Godot which uses the SCons buildsystem and not CMake. However, there is "
"a ``CMakeLists.txt`` configuration for :ref:`Android Studio "
"<doc_configuring_an_ide_android_studio>` which can also be used by CLion."
msgstr ""

#: ../../docs/development/cpp/configuring_an_ide.rst:328
msgid "Choose *File* -> *Open*."
msgstr ""

#: ../../docs/development/cpp/configuring_an_ide.rst:330
msgid ""
"Navigation to your Godot Git clone, and select the folder ``platform/android/"
"java/lib`` (the ``CMakeLists.txt`` file is located there). Select the "
"folder, not the ``CMakeLists.txt file``. Then click *Ok*."
msgstr ""

#: ../../docs/development/cpp/configuring_an_ide.rst:334
msgid "If this popup window appears, select *This window* to open the project."
msgstr ""

#: ../../docs/development/cpp/configuring_an_ide.rst:338
msgid ""
"Choose *Tools* -> *CMake* -> *Change Project Root* and select the root Godot "
"folder."
msgstr ""

#: ../../docs/development/cpp/configuring_an_ide.rst:342
msgid ""
"You should be now be able to see all the project files. Autocomplete should "
"work, when the project finish indexing."
msgstr ""

#: ../../docs/development/cpp/core_types.rst:4
msgid "Core types"
msgstr ""

#: ../../docs/development/cpp/core_types.rst:6
msgid ""
"Godot has a rich set of classes and templates that compose its core, and "
"everything is built upon them."
msgstr ""

#: ../../docs/development/cpp/core_types.rst:9
msgid ""
"This reference will try to list them in order for their better understanding."
msgstr ""

#: ../../docs/development/cpp/core_types.rst:13
msgid "Definitions"
msgstr ""

#: ../../docs/development/cpp/core_types.rst:15
msgid ""
"Godot uses the standard C98 datatypes, such as ``uint8_t``, ``uint32_t``, "
"``int64_t``, etc. which are nowadays supported by every compiler. "
"Reinventing the wheel for those is not fun, as it makes code more difficult "
"to read."
msgstr ""

#: ../../docs/development/cpp/core_types.rst:20
msgid ""
"In general, care is not taken to use the most efficient datatype for a given "
"task unless using large structures or arrays. ``int`` is used through most "
"of the code unless necessary. This is done because nowadays every device has "
"at least a 32 bits bus and can do such operations in one cycle. It makes "
"code more readable too."
msgstr ""

#: ../../docs/development/cpp/core_types.rst:26
msgid ""
"For files or memory sizes, ``size_t`` is used, which is warranted to be 64 "
"bits."
msgstr ""

#: ../../docs/development/cpp/core_types.rst:29
msgid ""
"For Unicode characters, CharType instead of wchar_t is used, because many "
"architectures have 4 bytes long wchar_t, where 2 bytes might be desired. "
"However, by default, this has not been forced and CharType maps directly to "
"wchar_t."
msgstr ""

#: ../../docs/development/cpp/core_types.rst:35
#: ../../docs/development/cpp/core_types.rst:132
#: ../../docs/development/cpp/core_types.rst:166
#: ../../docs/development/cpp/core_types.rst:182
#: ../../docs/development/cpp/core_types.rst:198
#: ../../docs/development/cpp/core_types.rst:209
#: ../../docs/development/cpp/core_types.rst:220
#: ../../docs/development/cpp/core_types.rst:233
#: ../../docs/development/cpp/variant_class.rst:38
#: ../../docs/development/cpp/variant_class.rst:57
#: ../../docs/development/cpp/object_class.rst:31
#: ../../docs/development/cpp/object_class.rst:89
#: ../../docs/development/cpp/object_class.rst:251
#: ../../docs/development/cpp/object_class.rst:267
#: ../../docs/development/cpp/object_class.rst:288
#: ../../docs/development/cpp/object_class.rst:307
#: ../../docs/development/cpp/custom_audiostreams.rst:23
#: ../../docs/development/cpp/custom_audiostreams.rst:117
#: ../../docs/development/cpp/custom_audiostreams.rst:348
#: ../../docs/development/cpp/custom_godot_servers.rst:475
#: ../../docs/development/editor/creating_icons.rst:96
msgid "References:"
msgstr ""

#: ../../docs/development/cpp/core_types.rst:37
msgid ""
"`core/typedefs.h <https://github.com/godotengine/godot/blob/master/core/"
"typedefs.h>`__"
msgstr ""

#: ../../docs/development/cpp/core_types.rst:40
msgid "Memory model"
msgstr ""

#: ../../docs/development/cpp/core_types.rst:42
msgid ""
"PC is a wonderful architecture. Computers often have gigabytes of RAM, "
"terabytes of storage and gigahertz of CPU, and when an application needs "
"more resources the OS will swap out the inactive ones. Other architectures "
"(like mobile or consoles) are in general more limited."
msgstr ""

#: ../../docs/development/cpp/core_types.rst:47
msgid ""
"The most common memory model is the heap, where an application will request "
"a region of memory, and the underlying OS will try to fit it somewhere and "
"return it. This often works best and is flexible, but over time and with "
"abuse, this can lead to segmentation."
msgstr ""

#: ../../docs/development/cpp/core_types.rst:52
msgid ""
"Segmentation slowly creates holes that are too small for most common "
"allocations, so that memory is wasted. There is a lot of literature about "
"heap and segmentation, so this topic will not be developed further here. "
"Modern operating systems use paged memory, which helps mitigate the problem "
"of segmentation but doesn't solve it."
msgstr ""

#: ../../docs/development/cpp/core_types.rst:58
msgid ""
"However, in many studies and tests, it is shown that given enough memory, if "
"the maximum allocation size is below a given threshold in proportion to the "
"maximum heap size and proportion of memory intended to be unused, "
"segmentation will not be a problem over time as it will remain constant. In "
"other words, leave 10-20% of your memory free and perform all small "
"allocations and you are fine."
msgstr ""

#: ../../docs/development/cpp/core_types.rst:65
msgid ""
"Godot ensures that all objects that can be allocated dynamically are small "
"(less than a few kb at most). But what happens if an allocation is too large "
"(like an image or mesh geometry or large array)? In this case Godot has the "
"option to use a dynamic memory pool. This memory needs to be locked to be "
"accessed, and if an allocation runs out of memory, the pool will be "
"rearranged and compacted on demand. Depending on the need of the game, the "
"programmer can configure the dynamic memory pool size."
msgstr ""

#: ../../docs/development/cpp/core_types.rst:74
msgid "Allocating memory"
msgstr ""

#: ../../docs/development/cpp/core_types.rst:76
msgid ""
"Godot has many tools for tracking memory usage in a game, especially during "
"debug. Because of this, the regular C and C++ library calls should not be "
"used. Instead, a few other ones are provided."
msgstr ""

#: ../../docs/development/cpp/core_types.rst:80
msgid "For C-style allocation, Godot provides a few macros:"
msgstr ""

#: ../../docs/development/cpp/core_types.rst:88
msgid ""
"These are equivalent to the usual malloc, realloc, free of the standard C "
"library."
msgstr ""

#: ../../docs/development/cpp/core_types.rst:91
msgid "For C++-style allocation, special macros are provided:"
msgstr ""

#: ../../docs/development/cpp/core_types.rst:101
msgid "which are equivalent to new, delete, new[] and delete[]."
msgstr ""

#: ../../docs/development/cpp/core_types.rst:103
msgid ""
"memnew/memdelete also use a little C++ magic and notify Objects right after "
"they are created, and right before they are deleted."
msgstr ""

#: ../../docs/development/cpp/core_types.rst:106
msgid ""
"For dynamic memory, the PoolVector<> template is provided. PoolVector is a "
"standard vector class, and is very similar to vector in the C++ standard "
"library. To create a PoolVector buffer, use this:"
msgstr ""

#: ../../docs/development/cpp/core_types.rst:114
msgid ""
"PoolVector can be accessed using the [] operator and a few helpers exist for "
"this:"
msgstr ""

#: ../../docs/development/cpp/core_types.rst:126
msgid ""
"These operations allow fast read/write from PoolVectors and keep it locked "
"until they go out of scope. However, PoolVectors should be used for small, "
"dynamic memory operations, as read() and write() are too slow for a large "
"amount of accesses."
msgstr ""

#: ../../docs/development/cpp/core_types.rst:134
msgid ""
"`core/os/memory.h <https://github.com/godotengine/godot/blob/master/core/os/"
"memory.h>`__"
msgstr ""

#: ../../docs/development/cpp/core_types.rst:135
msgid ""
"`core/pool_vector.h <https://github.com/godotengine/godot/blob/master/core/"
"pool_vector.cpp>`__"
msgstr ""

#: ../../docs/development/cpp/core_types.rst:140
msgid "Godot provides also a set of common containers:"
msgstr ""

#: ../../docs/development/cpp/core_types.rst:142
msgid "Vector"
msgstr "벡터"

#: ../../docs/development/cpp/core_types.rst:143
msgid "List"
msgstr ""

#: ../../docs/development/cpp/core_types.rst:144
msgid "Set"
msgstr "설정"

#: ../../docs/development/cpp/core_types.rst:145
msgid "Map"
msgstr ""

#: ../../docs/development/cpp/core_types.rst:147
msgid ""
"They are simple and aim to be as minimal as possible, as templates in C++ "
"are often inlined and make the binary size much fatter, both in debug "
"symbols and code. List, Set and Map can be iterated using pointers, like "
"this:"
msgstr ""

#: ../../docs/development/cpp/core_types.rst:158
msgid "The Vector<> class also has a few nice features:"
msgstr ""

#: ../../docs/development/cpp/core_types.rst:160
msgid ""
"It does copy on write, so making copies of it is cheap as long as they are "
"not modified."
msgstr ""

#: ../../docs/development/cpp/core_types.rst:162
msgid ""
"It supports multi-threading, by using atomic operations on the reference "
"counter."
msgstr ""

#: ../../docs/development/cpp/core_types.rst:168
msgid ""
"`core/vector.h <https://github.com/godotengine/godot/blob/master/core/vector."
"h>`__"
msgstr ""

#: ../../docs/development/cpp/core_types.rst:169
msgid ""
"`core/list.h <https://github.com/godotengine/godot/blob/master/core/list."
"h>`__"
msgstr ""

#: ../../docs/development/cpp/core_types.rst:170
msgid ""
"`core/set.h <https://github.com/godotengine/godot/blob/master/core/set.h>`__"
msgstr ""

#: ../../docs/development/cpp/core_types.rst:171
msgid ""
"`core/map.h <https://github.com/godotengine/godot/blob/master/core/map.h>`__"
msgstr ""

#: ../../docs/development/cpp/core_types.rst:176
msgid ""
"Godot also provides a String class. This class has a huge amount of "
"features, full Unicode support in all the functions (like case operations) "
"and utf8 parsing/extracting, as well as helpers for conversion and "
"visualization."
msgstr ""

#: ../../docs/development/cpp/core_types.rst:184
msgid ""
"`core/ustring.h <https://github.com/godotengine/godot/blob/master/core/"
"ustring.h>`__"
msgstr ""

#: ../../docs/development/cpp/core_types.rst:187
msgid "StringName"
msgstr ""

#: ../../docs/development/cpp/core_types.rst:189
msgid ""
"StringNames are like a String, but they are unique. Creating a StringName "
"from a string results in a unique internal pointer for all equal strings. "
"StringNames are useful for using strings as identifier, as comparing them is "
"basically comparing a pointer."
msgstr ""

#: ../../docs/development/cpp/core_types.rst:194
msgid ""
"Creation of a StringName (especially a new one) is slow, but comparison is "
"fast."
msgstr ""

#: ../../docs/development/cpp/core_types.rst:200
msgid ""
"`core/string_name.h <https://github.com/godotengine/godot/blob/master/core/"
"string_name.h>`__"
msgstr ""

#: ../../docs/development/cpp/core_types.rst:203
msgid "Math types"
msgstr ""

#: ../../docs/development/cpp/core_types.rst:205
msgid ""
"There are several linear math types available in the core/math directory."
msgstr ""

#: ../../docs/development/cpp/core_types.rst:211
msgid ""
"`core/math <https://github.com/godotengine/godot/tree/master/core/math>`__"
msgstr ""

#: ../../docs/development/cpp/core_types.rst:214
#: ../../docs/development/file_formats/tscn.rst:134
msgid "NodePath"
msgstr ""

#: ../../docs/development/cpp/core_types.rst:216
msgid ""
"This is a special datatype used for storing paths in a scene tree and "
"referencing them fast."
msgstr ""

#: ../../docs/development/cpp/core_types.rst:222
msgid ""
"`core/node_path.h <https://github.com/godotengine/godot/blob/master/core/"
"node_path.h>`__"
msgstr ""

#: ../../docs/development/cpp/core_types.rst:225
msgid "RID"
msgstr ""

#: ../../docs/development/cpp/core_types.rst:227
msgid ""
"RIDs are resource IDs. Servers use these to reference data stored in them. "
"RIDs are opaque, meaning that the data they reference can't be accessed "
"directly. RIDs are unique, even for different types of referenced data."
msgstr ""

#: ../../docs/development/cpp/core_types.rst:235
#: ../../docs/development/cpp/custom_godot_servers.rst:319
msgid ""
"`core/rid.h <https://github.com/godotengine/godot/blob/master/core/rid.h>`__"
msgstr ""

#: ../../docs/development/cpp/variant_class.rst:4
msgid "Variant class"
msgstr ""

#: ../../docs/development/cpp/variant_class.rst:9
msgid ""
"Variant is the most important datatype of Godot, it's the most important "
"class in the engine. A Variant takes up only 20 bytes and can store almost "
"any engine datatype inside of it. Variants are rarely used to hold "
"information for long periods of time, instead they are used mainly for "
"communication, editing, serialization and generally moving data around."
msgstr ""

#: ../../docs/development/cpp/variant_class.rst:16
msgid "A Variant can:"
msgstr ""

#: ../../docs/development/cpp/variant_class.rst:18
msgid "Store almost any datatype"
msgstr ""

#: ../../docs/development/cpp/variant_class.rst:19
msgid ""
"Perform operations between many variants (GDScript uses Variant as its "
"atomic/native datatype)."
msgstr ""

#: ../../docs/development/cpp/variant_class.rst:21
msgid "Be hashed, so it can be compared quickly to other variants"
msgstr ""

#: ../../docs/development/cpp/variant_class.rst:22
msgid "Be used to convert safely between datatypes"
msgstr ""

#: ../../docs/development/cpp/variant_class.rst:23
msgid ""
"Be used to abstract calling methods and their arguments (Godot exports all "
"its functions through variants)"
msgstr ""

#: ../../docs/development/cpp/variant_class.rst:25
msgid "Be used to defer calls or move data between threads."
msgstr ""

#: ../../docs/development/cpp/variant_class.rst:26
msgid "Be serialized as binary and stored to disk, or transferred via network."
msgstr ""

#: ../../docs/development/cpp/variant_class.rst:28
msgid ""
"Be serialized to text and use it for printing values and editable settings."
msgstr ""

#: ../../docs/development/cpp/variant_class.rst:30
msgid "Work as an exported property, so the editor can edit it universally."
msgstr ""

#: ../../docs/development/cpp/variant_class.rst:31
msgid "Be used for dictionaries, arrays, parsers, etc."
msgstr ""

#: ../../docs/development/cpp/variant_class.rst:33
msgid ""
"Basically, thanks to the Variant class, writing Godot itself was a much, "
"much easier task, as it allows for highly dynamic constructs not common of C+"
"+ with little effort. Become a friend of Variant today."
msgstr ""

#: ../../docs/development/cpp/variant_class.rst:40
msgid ""
"`core/variant.h <https://github.com/godotengine/godot/blob/master/core/"
"variant.h>`__"
msgstr ""

#: ../../docs/development/cpp/variant_class.rst:43
msgid "Containers: Dictionary and Array"
msgstr ""

#: ../../docs/development/cpp/variant_class.rst:45
msgid ""
"Both are implemented using variants. A Dictionary can match any datatype "
"used as key to any other datatype. An Array just holds an array of Variants. "
"Of course, a Variant can also hold a Dictionary and an Array inside, making "
"it even more flexible."
msgstr ""

#: ../../docs/development/cpp/variant_class.rst:50
msgid ""
"Modifications to a container will modify all references to it. A Mutex "
"should be created to lock it if multi threaded access is desired."
msgstr ""

#: ../../docs/development/cpp/variant_class.rst:54
msgid ""
"Copy-on-write (COW) mode support for containers was dropped with Godot 3.0."
msgstr ""

#: ../../docs/development/cpp/variant_class.rst:59
msgid ""
"`core/dictionary.h <https://github.com/godotengine/godot/blob/master/core/"
"dictionary.h>`__"
msgstr ""

#: ../../docs/development/cpp/variant_class.rst:60
msgid ""
"`core/array.h <https://github.com/godotengine/godot/blob/master/core/array."
"h>`__"
msgstr ""

#: ../../docs/development/cpp/object_class.rst:4
msgid "Object class"
msgstr ""

#: ../../docs/development/cpp/object_class.rst:7
msgid "General definition"
msgstr ""

#: ../../docs/development/cpp/object_class.rst:9
msgid ""
":ref:`Object <class_object>` is the base class for almost everything. Most "
"classes in Godot inherit directly or indirectly from it. Objects provide "
"reflection and editable properties, and declaring them is a matter of using "
"a single macro like this."
msgstr ""

#: ../../docs/development/cpp/object_class.rst:21
msgid "This makes Objects gain a lot of functionality, like for example"
msgstr ""

#: ../../docs/development/cpp/object_class.rst:33
msgid ""
"`core/object.h <https://github.com/godotengine/godot/blob/master/core/object."
"h>`__"
msgstr ""

#: ../../docs/development/cpp/object_class.rst:36
msgid "Registering an Object"
msgstr ""

#: ../../docs/development/cpp/object_class.rst:38
msgid ""
"ClassDB is a static class that holds the entire list of registered classes "
"that inherit from Object, as well as dynamic bindings to all their methods "
"properties and integer constants."
msgstr ""

#: ../../docs/development/cpp/object_class.rst:42
msgid "Classes are registered by calling:"
msgstr ""

#: ../../docs/development/cpp/object_class.rst:48
msgid ""
"Registering it will allow the class to be instanced by scripts, code, or "
"creating them again when deserializing."
msgstr ""

#: ../../docs/development/cpp/object_class.rst:51
msgid "Registering as virtual is the same but it can't be instanced."
msgstr ""

#: ../../docs/development/cpp/object_class.rst:57
msgid ""
"Object-derived classes can override the static function ``static void "
"_bind_methods()``. When one class is registered, this static function is "
"called to register all the object methods, properties, constants, etc. It's "
"only called once. If an Object derived class is instanced but has not been "
"registered, it will be registered as virtual automatically."
msgstr ""

#: ../../docs/development/cpp/object_class.rst:64
msgid ""
"Inside ``_bind_methods``, there are a couple of things that can be done. "
"Registering functions is one:"
msgstr ""

#: ../../docs/development/cpp/object_class.rst:71
msgid "Default values for arguments can be passed in reverse order:"
msgstr ""

#: ../../docs/development/cpp/object_class.rst:77
msgid ""
"``D_METHOD`` is a macro that converts \"methodname\" to a StringName for "
"more efficiency. Argument names are used for introspection, but when "
"compiling on release, the macro ignores them, so the strings are unused and "
"optimized away."
msgstr ""

#: ../../docs/development/cpp/object_class.rst:82
msgid "Check ``_bind_methods`` of Control or Object for more examples."
msgstr ""

#: ../../docs/development/cpp/object_class.rst:84
msgid ""
"If just adding modules and functionality that is not expected to be "
"documented as thoroughly, the ``D_METHOD()`` macro can safely be ignored and "
"a string passing the name can be passed for brevity."
msgstr ""

#: ../../docs/development/cpp/object_class.rst:91
msgid ""
"`core/class_db.h <https://github.com/godotengine/godot/blob/master/core/"
"class_db.h>`__"
msgstr ""

#: ../../docs/development/cpp/object_class.rst:96
msgid "Classes often have enums such as:"
msgstr ""

#: ../../docs/development/cpp/object_class.rst:105
msgid ""
"For these to work when binding to methods, the enum must be declared "
"convertible to int, for this a macro is provided:"
msgstr ""

#: ../../docs/development/cpp/object_class.rst:112
msgid "The constants can also be bound inside ``_bind_methods``, by using:"
msgstr ""

#: ../../docs/development/cpp/object_class.rst:120
msgid "Properties (set/get)"
msgstr ""

#: ../../docs/development/cpp/object_class.rst:122
msgid "Objects export properties, properties are useful for the following:"
msgstr ""

#: ../../docs/development/cpp/object_class.rst:124
msgid "Serializing and deserializing the object."
msgstr ""

#: ../../docs/development/cpp/object_class.rst:125
msgid "Creating a list of editable values for the Object derived class."
msgstr ""

#: ../../docs/development/cpp/object_class.rst:127
msgid ""
"Properties are usually defined by the PropertyInfo() class. Usually "
"constructed as:"
msgstr ""

#: ../../docs/development/cpp/object_class.rst:134
msgid "For example:"
msgstr ""

#: ../../docs/development/cpp/object_class.rst:140
msgid ""
"This is an integer property, named \"amount\", hint is a range, range goes "
"from 0 to 49 in steps of 1 (integers). It is only usable for the editor "
"(edit value visually) but won't be serialized."
msgstr ""

#: ../../docs/development/cpp/object_class.rst:144
msgid "Another example:"
msgstr ""

#: ../../docs/development/cpp/object_class.rst:150
msgid ""
"This is a string property, can take any string but the editor will only "
"allow the defined hint ones. Since no usage flags were specified, the "
"default ones are PROPERTY_USAGE_STORAGE and PROPERTY_USAGE_EDITOR."
msgstr ""

#: ../../docs/development/cpp/object_class.rst:154
msgid ""
"There are plenty of hints and usage flags available in object.h, give them a "
"check."
msgstr ""

#: ../../docs/development/cpp/object_class.rst:157
msgid ""
"Properties can also work like C# properties and be accessed from script "
"using indexing, but this usage is generally discouraged, as using functions "
"is preferred for legibility. Many properties are also bound with categories, "
"such as \"animation/frame\" which also make indexing impossible unless using "
"operator []."
msgstr ""

#: ../../docs/development/cpp/object_class.rst:163
msgid ""
"From ``_bind_methods()``, properties can be created and bound as long as set/"
"get functions exist. Example:"
msgstr ""

#: ../../docs/development/cpp/object_class.rst:170
msgid "This creates the property using the setter and the getter."
msgstr ""

#: ../../docs/development/cpp/object_class.rst:173
msgid "Binding properties using ``_set``/``_get``/``_get_property_list``"
msgstr ""

#: ../../docs/development/cpp/object_class.rst:175
msgid ""
"An additional method of creating properties exists when more flexibility is "
"desired (i.e. adding or removing properties on context)."
msgstr ""

#: ../../docs/development/cpp/object_class.rst:178
msgid ""
"The following functions can be overridden in an Object derived class, they "
"are NOT virtual, DO NOT make them virtual, they are called for every "
"override and the previous ones are not invalidated (multilevel call)."
msgstr ""

#: ../../docs/development/cpp/object_class.rst:189
msgid ""
"This is also a little less efficient since ``p_property`` must be compared "
"against the desired names in serial order."
msgstr ""

#: ../../docs/development/cpp/object_class.rst:193
msgid "Dynamic casting"
msgstr ""

#: ../../docs/development/cpp/object_class.rst:195
msgid ""
"Godot provides dynamic casting between Object-derived classes, for example:"
msgstr ""

#: ../../docs/development/cpp/object_class.rst:205
msgid ""
"If cast fails, NULL is returned. This system uses RTTI, but it also works "
"fine (although a bit slower) when RTTI is disabled. This is useful on "
"platforms where a small binary size is ideal, such as HTML5 or consoles "
"(with low memory footprint)."
msgstr ""

#: ../../docs/development/cpp/object_class.rst:213
msgid ""
"Objects can have a set of signals defined (similar to Delegates in other "
"languages). Connecting to them is rather easy:"
msgstr ""

#: ../../docs/development/cpp/object_class.rst:222
msgid ""
"The method ``_node_entered_tree`` must be registered to the class using "
"``ClassDB::register_method`` (explained before)."
msgstr ""

#: ../../docs/development/cpp/object_class.rst:225
msgid ""
"Adding signals to a class is done in ``_bind_methods``, using the "
"``ADD_SIGNAL`` macro, for example:"
msgstr ""

#: ../../docs/development/cpp/object_class.rst:233
#: ../../docs/development/cpp/custom_resource_format_loaders.rst:18
#: ../../docs/development/cpp/custom_resource_format_loaders.rst:39
#: ../../docs/development/cpp/custom_resource_format_loaders.rst:303
#: ../../docs/development/cpp/custom_resource_format_loaders.rst:356
#: ../../docs/development/cpp/custom_godot_servers.rst:19
#: ../../docs/development/cpp/custom_godot_servers.rst:316
msgid "References"
msgstr ""

#: ../../docs/development/cpp/object_class.rst:235
msgid ""
":ref:`Reference <class_reference>` inherits from Object and holds a "
"reference count. It is the base for reference counted object types. "
"Declaring them must be done using Ref<> template. For example:"
msgstr ""

#: ../../docs/development/cpp/object_class.rst:247
msgid ""
"``myref`` is reference counted. It will be freed when no more Ref<> "
"templates point to it."
msgstr ""

#: ../../docs/development/cpp/object_class.rst:253
msgid ""
"`core/reference.h <https://github.com/godotengine/godot/blob/master/core/"
"reference.h>`__"
msgstr ""

#: ../../docs/development/cpp/object_class.rst:256
msgid "Resources:"
msgstr "리소스:"

#: ../../docs/development/cpp/object_class.rst:258
msgid ""
":ref:`Resource <class_resource>` inherits from Reference, so all resources "
"are reference counted. Resources can optionally contain a path, which "
"reference a file on disk. This can be set with ``resource.set_path(path)``. "
"This is normally done by the resource loader though. No two different "
"resources can have the same path, attempt to do so will result in an error."
msgstr ""

#: ../../docs/development/cpp/object_class.rst:264
msgid "Resources without a path are fine too."
msgstr ""

#: ../../docs/development/cpp/object_class.rst:269
msgid ""
"`core/resource.h <https://github.com/godotengine/godot/blob/master/core/"
"resource.h>`__"
msgstr ""

#: ../../docs/development/cpp/object_class.rst:272
msgid "Resource loading"
msgstr ""

#: ../../docs/development/cpp/object_class.rst:274
msgid "Resources can be loaded with the ResourceLoader API, like this:"
msgstr ""

#: ../../docs/development/cpp/object_class.rst:280
msgid ""
"If a reference to that resource has been loaded previously and is in memory, "
"the resource loader will return that reference. This means that there can be "
"only one resource loaded from a file referenced on disk at the same time."
msgstr ""

#: ../../docs/development/cpp/object_class.rst:285
msgid "resourceinteractiveloader (TODO)"
msgstr ""

#: ../../docs/development/cpp/object_class.rst:290
msgid ""
"`core/io/resource_loader.h <https://github.com/godotengine/godot/blob/master/"
"core/io/resource_loader.h>`__"
msgstr ""

#: ../../docs/development/cpp/object_class.rst:293
msgid "Resource saving"
msgstr ""

#: ../../docs/development/cpp/object_class.rst:295
msgid "Saving a resource can be done with the resource saver API:"
msgstr ""

#: ../../docs/development/cpp/object_class.rst:301
msgid ""
"Instance will be saved. Sub resources that have a path to a file will be "
"saved as a reference to that resource. Sub resources without a path will be "
"bundled with the saved resource and assigned sub-IDs, like \"res://"
"someresource.res::1\". This also helps to cache them when loaded."
msgstr ""

#: ../../docs/development/cpp/object_class.rst:309
msgid ""
"`core/io/resource_saver.h <https://github.com/godotengine/godot/blob/master/"
"core/io/resource_saver.h>`__"
msgstr ""

#: ../../docs/development/cpp/inheritance_class_tree.rst:2
msgid "Inheritance class tree"
msgstr ""

#: ../../docs/development/cpp/inheritance_class_tree.rst:5
msgid "Object"
msgstr ""

#: ../../docs/development/cpp/inheritance_class_tree.rst:15
msgid "Control"
msgstr ""

#: ../../docs/development/cpp/inheritance_class_tree.rst:20
msgid "Node2D"
msgstr ""

#: ../../docs/development/cpp/inheritance_class_tree.rst:25
msgid "Spatial"
msgstr ""

#: ../../docs/development/cpp/inheritance_class_tree.rst:29
msgid "Source files: :download:`class_tree.zip <files/class_tree.zip>`."
msgstr ""

#: ../../docs/development/cpp/custom_modules_in_cpp.rst:4
msgid "Custom modules in C++"
msgstr ""

#: ../../docs/development/cpp/custom_modules_in_cpp.rst:7
#: ../../docs/development/cpp/binding_to_external_libraries.rst:7
msgid "Modules"
msgstr ""

#: ../../docs/development/cpp/custom_modules_in_cpp.rst:9
msgid ""
"Godot allows extending the engine in a modular way. New modules can be "
"created and then enabled/disabled. This allows for adding new engine "
"functionality at every level without modifying the core, which can be split "
"for use and reuse in different modules."
msgstr ""

#: ../../docs/development/cpp/custom_modules_in_cpp.rst:14
msgid ""
"Modules are located in the ``modules/`` subdirectory of the build system. By "
"default, many different modules exist, such as GDScript (which, yes, is not "
"part of the base engine), the Mono runtime, a regular expressions module, "
"and others. As many new modules as desired can be created and combined, and "
"the SCons build system will take care of it transparently."
msgstr ""

#: ../../docs/development/cpp/custom_modules_in_cpp.rst:22
#: ../../docs/development/cpp/custom_resource_format_loaders.rst:24
#: ../../docs/development/cpp/custom_audiostreams.rst:29
#: ../../docs/development/cpp/custom_godot_servers.rst:26
msgid "What for?"
msgstr ""

#: ../../docs/development/cpp/custom_modules_in_cpp.rst:24
msgid ""
"While it's recommended that most of a game be written in scripting (as it is "
"an enormous time saver), it's perfectly possible to use C++ instead. Adding C"
"++ modules can be useful in the following scenarios:"
msgstr ""

#: ../../docs/development/cpp/custom_modules_in_cpp.rst:28
msgid "Binding an external library to Godot (like PhysX, FMOD, etc)."
msgstr ""

#: ../../docs/development/cpp/custom_modules_in_cpp.rst:29
msgid "Optimize critical parts of a game."
msgstr ""

#: ../../docs/development/cpp/custom_modules_in_cpp.rst:30
msgid "Adding new functionality to the engine and/or editor."
msgstr ""

#: ../../docs/development/cpp/custom_modules_in_cpp.rst:31
msgid "Porting an existing game."
msgstr ""

#: ../../docs/development/cpp/custom_modules_in_cpp.rst:32
msgid "Write a whole, new game in C++ because you can't live without C++."
msgstr ""

#: ../../docs/development/cpp/custom_modules_in_cpp.rst:35
msgid "Creating a new module"
msgstr ""

#: ../../docs/development/cpp/custom_modules_in_cpp.rst:37
msgid ""
"Before creating a module, make sure to download the source code of Godot and "
"manage to compile it. There are tutorials in the documentation for this."
msgstr ""

#: ../../docs/development/cpp/custom_modules_in_cpp.rst:40
msgid ""
"To create a new module, the first step is creating a directory inside "
"``modules/``. If you want to maintain the module separately, you can "
"checkout a different VCS into modules and use it."
msgstr ""

#: ../../docs/development/cpp/custom_modules_in_cpp.rst:44
msgid ""
"The example module will be called \"summator\", and is placed inside the "
"Godot source tree (``C:\\godot`` refers to wherever the Godot sources are "
"located):"
msgstr ""

#: ../../docs/development/cpp/custom_modules_in_cpp.rst:55
msgid "Inside we will create a simple summator class:"
msgstr ""

#: ../../docs/development/cpp/custom_modules_in_cpp.rst:84
msgid "And then the cpp file."
msgstr ""

#: ../../docs/development/cpp/custom_modules_in_cpp.rst:114
msgid ""
"Then, the new class needs to be registered somehow, so two more files need "
"to be created:"
msgstr ""

#: ../../docs/development/cpp/custom_modules_in_cpp.rst:122
#: ../../docs/development/cpp/binding_to_external_libraries.rst:78
msgid "With the following contents:"
msgstr ""

#: ../../docs/development/cpp/custom_modules_in_cpp.rst:149
msgid ""
"Next, we need to create a ``SCsub`` file so the build system compiles this "
"module:"
msgstr ""

#: ../../docs/development/cpp/custom_modules_in_cpp.rst:160
msgid ""
"With multiple sources, you can also add each file individually to a Python "
"string list:"
msgstr ""

#: ../../docs/development/cpp/custom_modules_in_cpp.rst:168
msgid ""
"This allows for powerful possibilities using Python to construct the file "
"list using loops and logic statements. Look at some of the other modules "
"that ship with Godot by default for examples."
msgstr ""

#: ../../docs/development/cpp/custom_modules_in_cpp.rst:172
#: ../../docs/development/cpp/binding_to_external_libraries.rst:157
msgid ""
"To add include directories for the compiler to look at you can append it to "
"the environment's paths:"
msgstr ""

#: ../../docs/development/cpp/custom_modules_in_cpp.rst:180
#: ../../docs/development/cpp/binding_to_external_libraries.rst:168
msgid ""
"If you want to add custom compiler flags when building your module, you need "
"to clone `env` first, so it won't add those flags to whole Godot build "
"(which can cause errors). Example `SCsub` with custom flags:"
msgstr ""

#: ../../docs/development/cpp/custom_modules_in_cpp.rst:195
msgid ""
"And finally, the configuration file for the module, this is a simple python "
"script that must be named ``config.py``:"
msgstr ""

#: ../../docs/development/cpp/custom_modules_in_cpp.rst:208
msgid ""
"The module is asked if it's OK to build for the specific platform (in this "
"case, ``True`` means it will build for every platform)."
msgstr ""

#: ../../docs/development/cpp/custom_modules_in_cpp.rst:211
msgid ""
"And that's it. Hope it was not too complex! Your module should look like "
"this:"
msgstr ""

#: ../../docs/development/cpp/custom_modules_in_cpp.rst:223
msgid ""
"You can then zip it and share the module with everyone else. When building "
"for every platform (instructions in the previous sections), your module will "
"be included."
msgstr ""

#: ../../docs/development/cpp/custom_modules_in_cpp.rst:227
msgid ""
"There is a parameter limit of 5 in C++ modules for things such as "
"subclasses. This can be raised to 13 by including the header file ``core/"
"method_bind_ext.gen.inc``."
msgstr ""

#: ../../docs/development/cpp/custom_modules_in_cpp.rst:232
#: ../../docs/development/cpp/binding_to_external_libraries.rst:201
msgid "Using the module"
msgstr ""

#: ../../docs/development/cpp/custom_modules_in_cpp.rst:234
#: ../../docs/development/cpp/binding_to_external_libraries.rst:203
msgid "You can now use your newly created module from any script:"
msgstr ""

#: ../../docs/development/cpp/custom_modules_in_cpp.rst:245
msgid "The output will be ``60``."
msgstr ""

#: ../../docs/development/cpp/custom_modules_in_cpp.rst:247
msgid ""
"The previous Summator example is great for small, custom modules, but what "
"if you want to use a larger, external library? Refer to :ref:"
"`doc_binding_to_external_libraries` for details about binding to external "
"libraries."
msgstr ""

#: ../../docs/development/cpp/custom_modules_in_cpp.rst:252
msgid ""
"If your module is meant to be accessed from the running project (not just "
"from the editor), you must also recompile every export template you plan to "
"use, then specify the path to the custom template in each export preset. "
"Otherwise, you'll get errors when running the project as the module isn't "
"compiled in the export template. See the :ref:`Compiling <toc-devel-"
"compiling>` pages for more information."
msgstr ""

#: ../../docs/development/cpp/custom_modules_in_cpp.rst:261
msgid "Customizing module types initialization"
msgstr ""

#: ../../docs/development/cpp/custom_modules_in_cpp.rst:263
msgid ""
"Modules can interact with other built-in engine classes during runtime and "
"even affect the way core types are initialized. So far, we've been using "
"``register_summator_types`` as a way to bring in module classes to be "
"available within the engine."
msgstr ""

#: ../../docs/development/cpp/custom_modules_in_cpp.rst:268
msgid ""
"A crude order of the engine setup can be summarized as a list of the "
"following type registration methods:"
msgstr ""

#: ../../docs/development/cpp/custom_modules_in_cpp.rst:287
msgid ""
"Our ``Summator`` class is initialized during the ``register_module_types()`` "
"call. Imagine that we need to satisfy some common module run-time dependency "
"(like singletons), or allow us to override existing engine method callbacks "
"before they can be assigned by the engine itself. In that case, we want to "
"ensure that our module classes are registered *before* any other built-in "
"type."
msgstr ""

#: ../../docs/development/cpp/custom_modules_in_cpp.rst:293
msgid ""
"This is where we can define an optional ``preregister_summator_types()`` "
"method which will be called before anything else during the "
"``preregister_module_types()`` engine setup stage."
msgstr ""

#: ../../docs/development/cpp/custom_modules_in_cpp.rst:297
msgid ""
"We now need to add this method to ``register_types`` header and source files:"
msgstr ""

#: ../../docs/development/cpp/custom_modules_in_cpp.rst:309
msgid ""
"Unlike other register methods, we have to explicitly define "
"``MODULE_SUMMATOR_HAS_PREREGISTER`` to let the build system know what "
"relevant method calls to include at compile time. The module's name has to "
"be converted to uppercase as well."
msgstr ""

#: ../../docs/development/cpp/custom_modules_in_cpp.rst:337
msgid "Improving the build system for development"
msgstr ""

#: ../../docs/development/cpp/custom_modules_in_cpp.rst:339
msgid ""
"So far we defined a clean and simple SCsub that allows us to add the sources "
"of our new module as part of the Godot binary."
msgstr ""

#: ../../docs/development/cpp/custom_modules_in_cpp.rst:342
msgid ""
"This static approach is fine when we want to build a release version of our "
"game given we want all the modules in a single binary."
msgstr ""

#: ../../docs/development/cpp/custom_modules_in_cpp.rst:345
msgid ""
"However the trade-off is every single change means a full recompilation of "
"the game. Even if SCons is able to detect and recompile only the file that "
"have changed, finding such files and eventually linking the final binary is "
"a long and costly part."
msgstr ""

#: ../../docs/development/cpp/custom_modules_in_cpp.rst:350
msgid ""
"The solution to avoid such a cost is to build our own module as a shared "
"library that will be dynamically loaded when starting our game's binary."
msgstr ""

#: ../../docs/development/cpp/custom_modules_in_cpp.rst:383
msgid ""
"Once compiled, we should end up with a ``bin`` directory containing both the "
"``godot*`` binary and our ``libsummator*.so``. However given the .so is not "
"in a standard directory (like ``/usr/lib``), we have to help our binary find "
"it during runtime with the ``LD_LIBRARY_PATH`` environ variable:"
msgstr ""

#: ../../docs/development/cpp/custom_modules_in_cpp.rst:393
msgid ""
"**note**: Pay attention you have to ``export`` the environ variable "
"otherwise you won't be able to play your project from within the editor."
msgstr ""

#: ../../docs/development/cpp/custom_modules_in_cpp.rst:396
msgid ""
"On top of that, it would be nice to be able to select whether to compile our "
"module as shared library (for development) or as a part of the Godot binary "
"(for release). To do that we can define a custom flag to be passed to SCons "
"using the `ARGUMENT` command:"
msgstr ""

#: ../../docs/development/cpp/custom_modules_in_cpp.rst:428
msgid ""
"Now by default ``scons`` command will build our module as part of Godot's "
"binary and as a shared library when passing ``summator_shared=yes``."
msgstr ""

#: ../../docs/development/cpp/custom_modules_in_cpp.rst:431
msgid ""
"Finally you can even speedup build further by explicitly specifying your "
"shared module as target in the scons command:"
msgstr ""

#: ../../docs/development/cpp/custom_modules_in_cpp.rst:439
msgid "Writing custom documentation"
msgstr ""

#: ../../docs/development/cpp/custom_modules_in_cpp.rst:441
msgid ""
"Writing documentation may seem like a boring task, but it is highly "
"recommended to document your newly created module in order to make it easier "
"for users to benefit from it. Not to mention that the code you've written "
"one year ago may become indistinguishable from the code that was written by "
"someone else, so be kind to your future self!"
msgstr ""

#: ../../docs/development/cpp/custom_modules_in_cpp.rst:447
msgid "There are several steps in order to setup custom docs for the module:"
msgstr ""

#: ../../docs/development/cpp/custom_modules_in_cpp.rst:449
msgid ""
"Make a new directory in the root of the module. The directory name can be "
"anything, but we'll be using the ``doc_classes`` name throughout this "
"section."
msgstr ""

#: ../../docs/development/cpp/custom_modules_in_cpp.rst:452
msgid "Append the following code snippet to ``config.py``:"
msgstr ""

#: ../../docs/development/cpp/custom_modules_in_cpp.rst:464
msgid ""
"The ``get_doc_classes()`` method is necessary for the build system to know "
"which documentation classes of the module must be merged, since the module "
"may contain several classes. Replace ``ClassName`` with the name of the "
"class you want to write documentation for. If you need docs for more than "
"one class, append those as well."
msgstr ""

#: ../../docs/development/cpp/custom_modules_in_cpp.rst:470
msgid ""
"The ``get_doc_path()`` method is used by the build system to determine the "
"location of the docs. In our case, they will be located in the "
"``doc_classes`` directory."
msgstr ""

#: ../../docs/development/cpp/custom_modules_in_cpp.rst:474
msgid "Run command:"
msgstr ""

#: ../../docs/development/cpp/custom_modules_in_cpp.rst:480
msgid ""
"This will dump the engine API reference to the given ``<path>`` in XML "
"format. Notice that you'll need to configure your ``PATH`` to locate Godot's "
"executable, and make sure that you have write access rights. If not, you "
"might encounter an error similar to the following:"
msgstr ""

#: ../../docs/development/cpp/custom_modules_in_cpp.rst:490
msgid "Get generated doc file from ``godot/doc/classes/ClassName.xml``"
msgstr ""

#: ../../docs/development/cpp/custom_modules_in_cpp.rst:492
msgid ""
"Copy this file to ``doc_classes``, optionally edit it, then compile the "
"engine."
msgstr ""

#: ../../docs/development/cpp/custom_modules_in_cpp.rst:494
msgid ""
"The build system will fetch the documentation files from the ``doc_classes`` "
"directory and merge them with the base types. Once the compilation process "
"is finished, the docs will become accessible within the engine's built-in "
"documentation system."
msgstr ""

#: ../../docs/development/cpp/custom_modules_in_cpp.rst:498
msgid ""
"In order to keep documentation up-to-date, all you'll have to do is simply "
"modify one of the ``ClassName.xml`` files and recompile the engine from now "
"on."
msgstr ""

#: ../../docs/development/cpp/custom_modules_in_cpp.rst:504
#, fuzzy
msgid "Adding custom editor icons"
msgstr "빛 추가하기"

#: ../../docs/development/cpp/custom_modules_in_cpp.rst:506
msgid ""
"Similarly to how you can write self-contained documentation within a module, "
"you can also create your own custom icons for classes to appear in the "
"editor."
msgstr ""

#: ../../docs/development/cpp/custom_modules_in_cpp.rst:509
msgid ""
"For the actual process of creating editor icons to be integrated within the "
"engine, please refer to :ref:`doc_editor_icons` first."
msgstr ""

#: ../../docs/development/cpp/custom_modules_in_cpp.rst:512
msgid "Once you've created your icon(s), proceed with the following steps:"
msgstr ""

#: ../../docs/development/cpp/custom_modules_in_cpp.rst:514
msgid ""
"Make a new directory in the root of the module named ``icons``. This is the "
"default path for the engine to look for module's editor icons."
msgstr ""

#: ../../docs/development/cpp/custom_modules_in_cpp.rst:517
msgid ""
"Move your newly created ``svg`` icons (optimized or not) into that folder."
msgstr ""

#: ../../docs/development/cpp/custom_modules_in_cpp.rst:519
msgid ""
"Recompile the engine and run the editor. Now the icon(s) will appear in "
"editor's interface where appropriate."
msgstr ""

#: ../../docs/development/cpp/custom_modules_in_cpp.rst:522
msgid ""
"If you'd like to store your icons somewhere else within your module, add the "
"following code snippet to ``config.py`` to override the default path:"
msgstr ""

#: ../../docs/development/cpp/custom_modules_in_cpp.rst:531
msgid "Summing up"
msgstr ""

#: ../../docs/development/cpp/custom_modules_in_cpp.rst:533
msgid "Remember to:"
msgstr ""

#: ../../docs/development/cpp/custom_modules_in_cpp.rst:535
msgid "use ``GDCLASS`` macro for inheritance, so Godot can wrap it"
msgstr ""

#: ../../docs/development/cpp/custom_modules_in_cpp.rst:536
msgid ""
"use ``_bind_methods`` to bind your functions to scripting, and to allow them "
"to work as callbacks for signals."
msgstr ""

#: ../../docs/development/cpp/custom_modules_in_cpp.rst:539
msgid ""
"But this is not all, depending what you do, you will be greeted with some "
"(hopefully positive) surprises."
msgstr ""

#: ../../docs/development/cpp/custom_modules_in_cpp.rst:542
msgid ""
"If you inherit from :ref:`class_Node` (or any derived node type, such as "
"Sprite), your new class will appear in the editor, in the inheritance tree "
"in the \"Add Node\" dialog."
msgstr ""

#: ../../docs/development/cpp/custom_modules_in_cpp.rst:545
msgid ""
"If you inherit from :ref:`class_Resource`, it will appear in the resource "
"list, and all the exposed properties can be serialized when saved/loaded."
msgstr ""

#: ../../docs/development/cpp/custom_modules_in_cpp.rst:548
msgid ""
"By this same logic, you can extend the Editor and almost any area of the "
"engine."
msgstr ""

#: ../../docs/development/cpp/binding_to_external_libraries.rst:4
msgid "Binding to external libraries"
msgstr ""

#: ../../docs/development/cpp/binding_to_external_libraries.rst:9
msgid ""
"The Summator example in :ref:`doc_custom_modules_in_c++` is great for small, "
"custom modules, but what if you want to use a larger, external library? "
"Let's look at an example using Festival, a speech synthesis (text-to-speech) "
"library written in C++."
msgstr ""

#: ../../docs/development/cpp/binding_to_external_libraries.rst:14
msgid ""
"To bind to an external library, set up a module directory similar to the "
"Summator example:"
msgstr ""

#: ../../docs/development/cpp/binding_to_external_libraries.rst:20
msgid "Next, you will create a header file with a simple TTS class:"
msgstr ""

#: ../../docs/development/cpp/binding_to_external_libraries.rst:45
msgid "And then you'll add the cpp file."
msgstr ""

#: ../../docs/development/cpp/binding_to_external_libraries.rst:70
msgid ""
"Just as before, the new class needs to be registered somehow, so two more "
"files need to be created:"
msgstr ""

#: ../../docs/development/cpp/binding_to_external_libraries.rst:105
msgid ""
"Next, you need to create a ``SCsub`` file so the build system compiles this "
"module:"
msgstr ""

#: ../../docs/development/cpp/binding_to_external_libraries.rst:117
msgid ""
"You'll need to install the external library on your machine to get the .a "
"library files.  See the library's official documentation for specific "
"instructions on how to do this for your operation system.  We've included "
"the installation commands for Linux below, for reference."
msgstr ""

#: ../../docs/development/cpp/binding_to_external_libraries.rst:128
msgid ""
"**Important:** The voices that Festival uses (and any other potential "
"external/3rd-party resource) all have varying licenses and terms of use; "
"some (if not most) of them may be be problematic with Godot, even if the "
"Festival Library itself is MIT License compatible. Please be sure to check "
"the licenses and terms of use."
msgstr ""

#: ../../docs/development/cpp/binding_to_external_libraries.rst:133
msgid ""
"The external library will also need to be installed inside your module to "
"make the source files accessible to the compiler, while also keeping the "
"module code self-contained.  The festival and speech_tools libraries can be "
"installed from the modules/tts/ directory via git using the following "
"commands:"
msgstr ""

#: ../../docs/development/cpp/binding_to_external_libraries.rst:143
msgid ""
"If you don't want the external repository source files committed to your "
"repository, you can link to them instead by adding them as submodules (from "
"within the modules/tts/ directory), as seen below:"
msgstr ""

#: ../../docs/development/cpp/binding_to_external_libraries.rst:152
msgid ""
"**Important:** Please note that Git submodules are not used in the Godot "
"repository.  If you are developing a module to be merged into the main Godot "
"repository, you should not use submodules.  If your module doesn't get "
"merged in, you can always try to implement the external library as a "
"GDNative C++ plugin."
msgstr ""

#: ../../docs/development/cpp/binding_to_external_libraries.rst:183
#, fuzzy
msgid "The final module should look like this:"
msgstr "최종 스크립트는 다음과 같아야 합니다:"

#: ../../docs/development/cpp/binding_to_external_libraries.rst:212
msgid "And the output will be ``is_spoken: True`` if the text is spoken."
msgstr ""

#: ../../docs/development/cpp/custom_resource_format_loaders.rst:4
msgid "Custom resource format loaders"
msgstr ""

#: ../../docs/development/cpp/custom_resource_format_loaders.rst:9
msgid ""
"ResourceFormatLoader is a factory interface for loading file assets. "
"Resources are primary containers. When load is called on the same file path "
"again, the previous loaded Resource will be referenced. Naturally, loaded "
"resources must be stateless."
msgstr ""

#: ../../docs/development/cpp/custom_resource_format_loaders.rst:14
msgid ""
"This guide assumes the reader knows how to create C++ modules and Godot data "
"types. If not, refer to this guide :ref:`doc_custom_modules_in_c++`."
msgstr ""

#: ../../docs/development/cpp/custom_resource_format_loaders.rst:20
msgid ":ref:`ResourceLoader<class_resourceloader>`"
msgstr ""

#: ../../docs/development/cpp/custom_resource_format_loaders.rst:21
#: ../../docs/development/cpp/custom_resource_format_loaders.rst:358
#, fuzzy
msgid ""
"`core/io/resource_loader.cpp <https://github.com/godotengine/godot/blob/"
"master/core/io/resource_loader.cpp>`_"
msgstr "https://github.com/godotengine/godot-demo-projects"

#: ../../docs/development/cpp/custom_resource_format_loaders.rst:26
msgid "Adding new support for many file formats"
msgstr ""

#: ../../docs/development/cpp/custom_resource_format_loaders.rst:27
msgid "Audio formats"
msgstr ""

#: ../../docs/development/cpp/custom_resource_format_loaders.rst:28
msgid "Video formats"
msgstr ""

#: ../../docs/development/cpp/custom_resource_format_loaders.rst:29
msgid "Machine learning models"
msgstr ""

#: ../../docs/development/cpp/custom_resource_format_loaders.rst:32
msgid "What not?"
msgstr ""

#: ../../docs/development/cpp/custom_resource_format_loaders.rst:34
msgid "Raster images"
msgstr ""

#: ../../docs/development/cpp/custom_resource_format_loaders.rst:36
msgid "ImageFormatLoader should be used to load images."
msgstr ""

#: ../../docs/development/cpp/custom_resource_format_loaders.rst:41
#, fuzzy
msgid ""
"`core/io/image_loader.h <https://github.com/godotengine/godot/blob/master/"
"core/io/image_loader.h>`_"
msgstr "https://github.com/godotengine/godot-demo-projects"

#: ../../docs/development/cpp/custom_resource_format_loaders.rst:45
msgid "Creating a ResourceFormatLoader"
msgstr ""

#: ../../docs/development/cpp/custom_resource_format_loaders.rst:47
msgid ""
"Each file format consist of a data container and a ``ResourceFormatLoader``."
msgstr ""

#: ../../docs/development/cpp/custom_resource_format_loaders.rst:49
msgid ""
"ResourceFormatLoaders are usually simple classes which return all the "
"necessary metadata for supporting new extensions in Godot. The class must "
"the return the format name and the extension string."
msgstr ""

#: ../../docs/development/cpp/custom_resource_format_loaders.rst:53
msgid ""
"In addition, ResourceFormatLoaders must convert file paths into resources "
"with the ``load`` function. To load a resource, ``load`` must read and "
"handle data serialization."
msgstr ""

#: ../../docs/development/cpp/custom_resource_format_loaders.rst:109
#, fuzzy
msgid "Creating a ResourceFormatSaver"
msgstr "타일셋(TileSet) 내보내기"

#: ../../docs/development/cpp/custom_resource_format_loaders.rst:111
msgid ""
"If you'd like to be able to edit and save a resource, you can implement a "
"``ResourceFormatSaver``:"
msgstr ""

#: ../../docs/development/cpp/custom_resource_format_loaders.rst:158
msgid "Creating custom data types"
msgstr "맞춤 데이터 타입 생성하기"

#: ../../docs/development/cpp/custom_resource_format_loaders.rst:160
msgid ""
"Godot may not have a proper substitute within its :ref:`doc_core_types` or "
"managed resources. Godot needs a new registered data type to understand "
"additional binary formats such as machine learning models."
msgstr ""

#: ../../docs/development/cpp/custom_resource_format_loaders.rst:164
#, fuzzy
msgid "Here is an example of creating a custom datatype:"
msgstr "어떻게 작동하는 지의 예제입니다:"

#: ../../docs/development/cpp/custom_resource_format_loaders.rst:262
msgid "Considerations"
msgstr ""

#: ../../docs/development/cpp/custom_resource_format_loaders.rst:264
msgid ""
"Some libraries may not define certain common routines such as IO handling. "
"Therefore, Godot call translations are required."
msgstr ""

#: ../../docs/development/cpp/custom_resource_format_loaders.rst:267
msgid ""
"For example, here is the code for translating ``FileAccess`` calls into "
"``std::istream``."
msgstr ""

#: ../../docs/development/cpp/custom_resource_format_loaders.rst:305
msgid "`istream <http://www.cplusplus.com/reference/istream/istream/>`_"
msgstr ""

#: ../../docs/development/cpp/custom_resource_format_loaders.rst:306
msgid ""
"`streambuf <http://www.cplusplus.com/reference/streambuf/streambuf/?"
"kw=streambuf>`_"
msgstr ""

#: ../../docs/development/cpp/custom_resource_format_loaders.rst:307
#, fuzzy
msgid ""
"`core/io/fileaccess.h <https://github.com/godotengine/godot/blob/master/core/"
"os/file_access.h>`_"
msgstr "https://github.com/godotengine/godot-demo-projects"

#: ../../docs/development/cpp/custom_resource_format_loaders.rst:310
msgid "Registering the new file format"
msgstr "새 파일 형식 등록"

#: ../../docs/development/cpp/custom_resource_format_loaders.rst:312
msgid ""
"Godot registers ``ResourcesFormatLoader`` with a ``ResourceLoader`` handler. "
"The handler selects the proper loader automatically when ``load`` is called."
msgstr ""

#: ../../docs/development/cpp/custom_resource_format_loaders.rst:361
msgid "Loading it on GDScript"
msgstr ""

#: ../../docs/development/cpp/custom_resource_format_loaders.rst:363
msgid ""
"Save a file called ``demo.json`` with the following contents and place it in "
"the project's root folder:"
msgstr ""

#: ../../docs/development/cpp/custom_resource_format_loaders.rst:379
#, fuzzy
msgid "Then attach the following script to any node::"
msgstr "다음과 같은 주의 사항이 있습니다:"

#: ../../docs/development/cpp/custom_audiostreams.rst:4
msgid "Custom AudioStreams"
msgstr ""

#: ../../docs/development/cpp/custom_audiostreams.rst:9
msgid ""
"AudioStream is the base class of all audio emitting objects. "
"AudioStreamPlayer binds onto an AudioStream to emit PCM data into an "
"AudioServer which manages audio drivers."
msgstr ""

#: ../../docs/development/cpp/custom_audiostreams.rst:13
msgid ""
"All audio resources require two audio based classes: AudioStream and "
"AudioStreamPlayback. As a data container, AudioStream contains the resource "
"and exposes itself to GDScript. AudioStream references its own internal "
"custom AudioStreamPlayback which translates AudioStream into PCM data."
msgstr ""

#: ../../docs/development/cpp/custom_audiostreams.rst:19
msgid ""
"This guide assumes the reader knows how to create C++ modules. If not, refer "
"to this guide :ref:`doc_custom_modules_in_c++`."
msgstr ""

#: ../../docs/development/cpp/custom_audiostreams.rst:25
#: ../../docs/development/cpp/custom_audiostreams.rst:119
#: ../../docs/development/cpp/custom_audiostreams.rst:350
msgid ""
"`servers/audio/audio_stream.h <https://github.com/godotengine/godot/blob/"
"master/servers/audio/audio_stream.h>`__"
msgstr ""

#: ../../docs/development/cpp/custom_audiostreams.rst:26
#: ../../docs/development/cpp/custom_audiostreams.rst:351
msgid ""
"`scene/audio/audioplayer.cpp <https://github.com/godotengine/godot/blob/"
"master/scene/audio/audio_player.cpp>`__"
msgstr ""

#: ../../docs/development/cpp/custom_audiostreams.rst:31
msgid "Binding external libraries (like Wwise, FMOD, etc)."
msgstr ""

#: ../../docs/development/cpp/custom_audiostreams.rst:32
msgid "Adding custom audio queues"
msgstr ""

#: ../../docs/development/cpp/custom_audiostreams.rst:33
msgid "Adding support for more audio formats"
msgstr ""

#: ../../docs/development/cpp/custom_audiostreams.rst:36
msgid "Create an AudioStream"
msgstr ""

#: ../../docs/development/cpp/custom_audiostreams.rst:38
msgid ""
"An AudioStream consists of three components: data container, stream name, "
"and an AudioStreamPlayback friend class generator. Audio data can be loaded "
"in a number of ways such as with an internal counter for a tone generator, "
"internal/external buffer, or a file reference."
msgstr ""

#: ../../docs/development/cpp/custom_audiostreams.rst:43
msgid ""
"Some AudioStreams need to be stateless such as objects loaded from "
"ResourceLoader. ResourceLoader loads once and references the same object "
"regardless how many times ``load`` is called on a specific resource. "
"Therefore, playback state must be self contained in AudioStreamPlayback."
msgstr ""

#: ../../docs/development/cpp/custom_audiostreams.rst:123
msgid "Create an AudioStreamPlayback"
msgstr ""

#: ../../docs/development/cpp/custom_audiostreams.rst:125
msgid ""
"AudioStreamPlayer uses ``mix`` callback to obtain PCM data. The callback "
"must match sample rate and fill the buffer."
msgstr ""

#: ../../docs/development/cpp/custom_audiostreams.rst:127
msgid ""
"Since AudioStreamPlayback is controlled by the audio thread, i/o and dynamic "
"memory allocation are forbidden."
msgstr ""

#: ../../docs/development/cpp/custom_audiostreams.rst:232
msgid "Resampling"
msgstr ""

#: ../../docs/development/cpp/custom_audiostreams.rst:234
msgid ""
"Godot’s AudioServer currently uses 44100 Hz sample rate. When other sample "
"rates are needed such as 48000, either provide one or use "
"AudioStreamPlaybackResampled. Godot provides cubic interpolation for audio "
"resampling."
msgstr ""

#: ../../docs/development/cpp/custom_audiostreams.rst:238
msgid ""
"Instead of overloading ``mix``, AudioStreamPlaybackResampled uses "
"``_mix_internal`` to query AudioFrames and ``get_stream_sampling_rate`` to "
"query current mix rate."
msgstr ""

#: ../../docs/development/cpp/custom_audiostreams.rst:349
msgid ""
"`core/math/audio_frame.h <https://github.com/godotengine/godot/blob/master/"
"core/math/audio_frame.h>`__"
msgstr ""

#: ../../docs/development/cpp/custom_godot_servers.rst:4
msgid "Custom Godot servers"
msgstr ""

#: ../../docs/development/cpp/custom_godot_servers.rst:9
msgid ""
"Godot implements multi-threading as servers. Servers are daemons which "
"manages data, processes, and pushes the result. Servers implement the "
"mediator pattern which interprets resource ID and process data for the "
"engine and other modules. In addition, the server claims ownership for its "
"RID allocations."
msgstr ""

#: ../../docs/development/cpp/custom_godot_servers.rst:15
msgid ""
"This guide assumes the reader knows how to create C++ modules and Godot data "
"types. If not, refer to :ref:`doc_custom_modules_in_c++`."
msgstr ""

#: ../../docs/development/cpp/custom_godot_servers.rst:21
msgid ""
"`Why does Godot use servers and RIDs? <https://godotengine.org/article/why-"
"does-godot-use-servers-and-rids>`__"
msgstr ""

#: ../../docs/development/cpp/custom_godot_servers.rst:22
msgid "`Singleton pattern <https://en.wikipedia.org/wiki/Singleton_pattern>`__"
msgstr ""

#: ../../docs/development/cpp/custom_godot_servers.rst:23
msgid "`Mediator pattern <https://en.wikipedia.org/wiki/Mediator_pattern>`__"
msgstr ""

#: ../../docs/development/cpp/custom_godot_servers.rst:28
msgid "Adding artificial intelligence."
msgstr ""

#: ../../docs/development/cpp/custom_godot_servers.rst:29
msgid "Adding custom asynchronous threads."
msgstr ""

#: ../../docs/development/cpp/custom_godot_servers.rst:30
msgid "Adding support for a new input device."
msgstr ""

#: ../../docs/development/cpp/custom_godot_servers.rst:31
msgid "Adding writing threads."
msgstr ""

#: ../../docs/development/cpp/custom_godot_servers.rst:32
msgid "Adding a custom VoIP protocol."
msgstr ""

#: ../../docs/development/cpp/custom_godot_servers.rst:33
msgid "And more..."
msgstr ""

#: ../../docs/development/cpp/custom_godot_servers.rst:36
msgid "Creating a Godot server"
msgstr "Godot 서버 만들기"

#: ../../docs/development/cpp/custom_godot_servers.rst:38
msgid ""
"At minimum, a server must have a static instance, a sleep timer, a thread "
"loop, an initialization state and a cleanup procedure."
msgstr ""

#: ../../docs/development/cpp/custom_godot_servers.rst:274
msgid "Custom managed resource data"
msgstr ""

#: ../../docs/development/cpp/custom_godot_servers.rst:276
msgid ""
"Godot servers implement a mediator pattern. All data types inherit "
"``RID_Data``. ``RID_Owner<MyRID_Data>`` owns the object when ``make_rid`` is "
"called. During debug mode only, RID_Owner maintains a list of RIDs. In "
"practice, RIDs are similar to writing object-oriented C code."
msgstr ""

#: ../../docs/development/cpp/custom_godot_servers.rst:318
msgid ":ref:`RID<class_rid>`"
msgstr ""

#: ../../docs/development/cpp/custom_godot_servers.rst:322
msgid "Registering the class in GDScript"
msgstr "GDScript에서 클래스 등록"

#: ../../docs/development/cpp/custom_godot_servers.rst:324
msgid ""
"Servers are allocated in ``register_types.cpp``. The constructor sets the "
"static instance and ``init()`` creates the managed thread; "
"``unregister_types.cpp`` cleans up the server."
msgstr ""

#: ../../docs/development/cpp/custom_godot_servers.rst:328
msgid ""
"Since a Godot server class creates an instance and binds it to a static "
"singleton, binding the class might not reference the correct instance. "
"Therefore, a dummy class must be created to reference the proper Godot "
"server."
msgstr ""

#: ../../docs/development/cpp/custom_godot_servers.rst:332
msgid ""
"In ``register_server_types()``, ``Engine::get_singleton()->add_singleton`` "
"is used to register the dummy class in GDScript."
msgstr ""

#: ../../docs/development/cpp/custom_godot_servers.rst:376
msgid ""
"`servers/register_server_types.cpp <https://github.com/godotengine/godot/"
"blob/master/servers/register_server_types.cpp>`__"
msgstr ""

#: ../../docs/development/cpp/custom_godot_servers.rst:379
msgid "Bind methods"
msgstr ""

#: ../../docs/development/cpp/custom_godot_servers.rst:381
msgid ""
"The dummy class binds singleton methods to GDScript. In most cases, the "
"dummy class methods wraps around."
msgstr ""

#: ../../docs/development/cpp/custom_godot_servers.rst:389
msgid "Binding Signals"
msgstr "바인딩 시그널"

#: ../../docs/development/cpp/custom_godot_servers.rst:391
msgid ""
"It is possible to emit signals to GDScript by calling the GDScript dummy "
"object."
msgstr ""

#: ../../docs/development/cpp/custom_godot_servers.rst:466
msgid "MessageQueue"
msgstr ""

#: ../../docs/development/cpp/custom_godot_servers.rst:468
msgid ""
"In order to send commands into SceneTree, MessageQueue is a thread-safe "
"buffer to queue set and call methods for other threads. To queue a command, "
"obtain the target object RID and use either ``push_call``, ``push_set``, or "
"``push_notification`` to execute the desired behavior. The queue will be "
"flushed whenever either ``SceneTree::idle`` or ``SceneTree::iteration`` is "
"executed."
msgstr ""

#: ../../docs/development/cpp/custom_godot_servers.rst:477
msgid ""
"`core/message_queue.cpp <https://github.com/godotengine/godot/blob/master/"
"core/message_queue.cpp>`__"
msgstr ""

#: ../../docs/development/cpp/custom_godot_servers.rst:480
msgid "Summing it up"
msgstr ""

#: ../../docs/development/cpp/custom_godot_servers.rst:482
msgid "Here is the GDScript sample code:"
msgstr "GDScript 샘플 코드입니다:"

#: ../../docs/development/cpp/custom_godot_servers.rst:508
msgid ""
"The actual `Hilbert Hotel <https://en.wikipedia.org/wiki/Hilbert"
"%27s_paradox_of_the_Grand_Hotel>`__ is impossible."
msgstr ""

#: ../../docs/development/cpp/custom_godot_servers.rst:509
msgid "Connecting signal example code is pretty hacky."
msgstr ""

#: ../../docs/development/editor/index.rst:2
#, fuzzy
msgid "Editor development"
msgstr "엔진 개발"

#: ../../docs/development/editor/introduction.rst:6
msgid ""
"As the engine is constantly evolving and new features are being added, it is "
"important to familiarize yourself with the editor and tools development in C+"
"+. Without the editor, some of the engine's internal functionality would "
"become unaccessible and make the development not intuitive."
msgstr ""

#: ../../docs/development/editor/creating_icons.rst:4
#, fuzzy
msgid "Editor icons"
msgstr "편집기"

#: ../../docs/development/editor/creating_icons.rst:6
msgid ""
"When a new class is created and exposed to scripting, the editor's interface "
"will display it with a default icon representing the base class it inherits "
"from. Yet in most cases it is recommended to create icons for new classes to "
"improve the user experience."
msgstr ""

#: ../../docs/development/editor/creating_icons.rst:12
#, fuzzy
msgid "Creating icons"
msgstr "콘텐츠 만들기"

#: ../../docs/development/editor/creating_icons.rst:14
msgid ""
"In order to create new icons, you first need a vector graphics editor "
"installed. For instance, you can use the open-source `Inkscape <https://"
"inkscape.org/>`_ editor."
msgstr ""

#: ../../docs/development/editor/creating_icons.rst:17
msgid ""
"Clone the ``godot-design`` repository containing all the original editor "
"icons:"
msgstr ""

#: ../../docs/development/editor/creating_icons.rst:23
msgid ""
"The icons must be created in a vector graphics editor in ``svg`` format. You "
"can use ``engine/icons/inkscape_template.svg`` with default icon properties "
"already set up."
msgstr ""

#: ../../docs/development/editor/creating_icons.rst:27
msgid ""
"Once you're satisfied with the icon's design, save the icon in ``engine/"
"icons/svg/`` folder. But in order for the engine to automatically pick up "
"the icons, each icon's filename:"
msgstr ""

#: ../../docs/development/editor/creating_icons.rst:31
msgid "Must be prefixed with ``icon_``."
msgstr ""

#: ../../docs/development/editor/creating_icons.rst:33
msgid ""
"``PascalCase`` name should be converted to ``snake_case``, so words are "
"separated by ``_`` whenever case changes, and uppercase acronyms must also "
"have all letters, numbers, and special characters separated as distinct "
"words. Some examples:"
msgstr ""

#: ../../docs/development/editor/creating_icons.rst:39
msgid "Name"
msgstr "이름"

#: ../../docs/development/editor/creating_icons.rst:39
#, fuzzy
msgid "Filename"
msgstr "생성된 파일"

#: ../../docs/development/editor/creating_icons.rst:41
msgid "``Polygon2D``"
msgstr ""

#: ../../docs/development/editor/creating_icons.rst:41
msgid "``icon_polygon_2_d.svg``"
msgstr ""

#: ../../docs/development/editor/creating_icons.rst:43
msgid "``CSGPolygon``"
msgstr ""

#: ../../docs/development/editor/creating_icons.rst:43
msgid "``icon_c_s_g_polygon.svg``"
msgstr ""

#: ../../docs/development/editor/creating_icons.rst:45
#, fuzzy
msgid "``CPUParticles2D``"
msgstr "파티클"

#: ../../docs/development/editor/creating_icons.rst:45
msgid "``icon_c_p_u_particles_2_d.svg``"
msgstr ""

#: ../../docs/development/editor/creating_icons.rst:47
msgid "``C#``"
msgstr ""

#: ../../docs/development/editor/creating_icons.rst:47
msgid "``icon_c_#.svg``"
msgstr ""

#: ../../docs/development/editor/creating_icons.rst:51
#, fuzzy
msgid "Icon optimization"
msgstr "애니메이션"

#: ../../docs/development/editor/creating_icons.rst:53
msgid ""
"Because the editor renders the ``svg``'s at runtime, they need to be small "
"in size, so they can be efficiently parsed. Editor icons must be first "
"optimized before being added to the engine, to do so:"
msgstr ""

#: ../../docs/development/editor/creating_icons.rst:57
msgid "Add them to the ``engine/icons/svg`` folder."
msgstr ""

#: ../../docs/development/editor/creating_icons.rst:59
msgid ""
"Run the ``optimize.py`` script. You must have the ``scour`` package "
"installed:"
msgstr ""

#: ../../docs/development/editor/creating_icons.rst:66
msgid ""
"The optimized icons will be generated in the ``engine/icons/optimized`` "
"folder."
msgstr ""

#: ../../docs/development/editor/creating_icons.rst:69
#, fuzzy
msgid "Integrating and sharing the icons"
msgstr "쿼터니언(quaternions) 으로 보간하기"

#: ../../docs/development/editor/creating_icons.rst:71
msgid ""
"If you're contributing to the engine itself, you should make a pull request "
"to add optimized icons to ``godot/editor/icons`` in the main repository. "
"Recompile the engine to make sure it does pick up new icons for classes. "
"Once merged, don't forget to add the original version of the icons to the "
"``godot-design`` repository so that the icon can be improved upon by other "
"contributors."
msgstr ""

#: ../../docs/development/editor/creating_icons.rst:77
msgid ""
"It's also possible to create custom icons within a module. If you're "
"creating your own module and don't plan to integrate it with Godot, you "
"don't need to make a separate pull request for your icons to be available "
"within the editor as they can be self-contained."
msgstr ""

#: ../../docs/development/editor/creating_icons.rst:82
msgid ""
"For specific instructions on how to create module icons, refer to :ref:"
"`Creating custom module icons<doc_custom_module_icons>`."
msgstr ""

#: ../../docs/development/editor/creating_icons.rst:88
msgid "If icons don't appear in the editor make sure that:"
msgstr ""

#: ../../docs/development/editor/creating_icons.rst:90
msgid ""
"Each icon's filename matches the naming requirement as described previously."
msgstr ""

#: ../../docs/development/editor/creating_icons.rst:92
msgid ""
"``modules/svg`` is enabled (should be enabled by default). Without it, icons "
"won't appear in the editor at all."
msgstr ""

#: ../../docs/development/editor/creating_icons.rst:98
#, fuzzy
msgid ""
"`editor/icons <https://github.com/godotengine/godot/tree/master/editor/"
"icons>`__"
msgstr "https://github.com/godotengine/godot-demo-projects"

#: ../../docs/development/file_formats/index.rst:2
msgid "Godot file formats"
msgstr ""

#: ../../docs/development/file_formats/tscn.rst:2
msgid "TSCN file format"
msgstr ""

#: ../../docs/development/file_formats/tscn.rst:4
msgid ""
"The TSCN (text scene) file format represents a single scene tree inside "
"Godot. TSCN files have the advantage of being mostly human-readable and easy "
"for version control systems to manage. During import, TSCN files are "
"compiled into binary ``.scn`` files stored inside the .import folder. This "
"reduces the data size and speeds up loading."
msgstr ""

#: ../../docs/development/file_formats/tscn.rst:10
msgid ""
"The ESCN (exported scene) file format is identical to the TSCN file format, "
"but is used to indicate to Godot that the file has been exported from "
"another program and should not be edited by the user from within Godot."
msgstr ""

#: ../../docs/development/file_formats/tscn.rst:14
msgid ""
"For those looking for a complete description, the parsing is handled in the "
"file `resource_format_text.cpp <https://github.com/godotengine/godot/blob/"
"master/scene/resources/resource_format_text.cpp>`_ in the "
"``ResourceFormatLoaderText`` class."
msgstr ""

#: ../../docs/development/file_formats/tscn.rst:19
msgid "File structure"
msgstr "파일 구조"

#: ../../docs/development/file_formats/tscn.rst:21
msgid "There are five main sections inside the TSCN file:"
msgstr ""

#: ../../docs/development/file_formats/tscn.rst:23
msgid "File Descriptor"
msgstr ""

#: ../../docs/development/file_formats/tscn.rst:24
#: ../../docs/development/file_formats/tscn.rst:273
msgid "External resources"
msgstr ""

#: ../../docs/development/file_formats/tscn.rst:25
#: ../../docs/development/file_formats/tscn.rst:295
msgid "Internal resources"
msgstr ""

#: ../../docs/development/file_formats/tscn.rst:29
msgid ""
"The file descriptor looks like ``[gd_scene load_steps=1 format=2]`` and "
"should be the first entry in the file. The ``load_steps`` parameter should "
"(in theory) be the number of resources within the file. However, in "
"practice, its value seems not to matter."
msgstr ""

#: ../../docs/development/file_formats/tscn.rst:34
msgid ""
"These sections should appear in order, but it can be hard to distinguish "
"them. The only difference between them is the first element in the heading "
"for all of the items in the section. For example, the heading of all "
"external resources should start with ``[ext_resource .....]``."
msgstr ""

#: ../../docs/development/file_formats/tscn.rst:39
msgid ""
"A TSCN file may contain single-line comments starting with a semicolon (``;"
"``). However, comments will be discarded when saving the file using the "
"Godot editor."
msgstr ""

#: ../../docs/development/file_formats/tscn.rst:43
msgid "Entries inside the file"
msgstr ""

#: ../../docs/development/file_formats/tscn.rst:45
msgid ""
"A heading looks like ``[<resource_type> key=value key=value key=value ...]`` "
"where resource_type is one of:"
msgstr ""

#: ../../docs/development/file_formats/tscn.rst:49
msgid "``ext_resource``"
msgstr ""

#: ../../docs/development/file_formats/tscn.rst:50
msgid "``sub_resource``"
msgstr ""

#: ../../docs/development/file_formats/tscn.rst:51
#, fuzzy
msgid "``node``"
msgstr "``그룹 노드``"

#: ../../docs/development/file_formats/tscn.rst:52
#, fuzzy
msgid "``connection``"
msgstr "연결(Connections)"

#: ../../docs/development/file_formats/tscn.rst:54
msgid ""
"Below every heading comes zero or more ``key = value`` pairs. The values can "
"be complex datatypes such as Arrays, Transforms, Colors, and so on. For "
"example, a spatial node looks like:"
msgstr ""

#: ../../docs/development/file_formats/tscn.rst:65
msgid "The scene tree"
msgstr "씬 트리"

#: ../../docs/development/file_formats/tscn.rst:67
msgid ""
"The scene tree is made up of… nodes! The heading of each node consists of "
"its name, parent and (most of the time) a type. For example ``[node type="
"\"Camera\" name=\"PlayerCamera\" parent=\"Player/Head\"]``"
msgstr ""

#: ../../docs/development/file_formats/tscn.rst:71
msgid "Other valid keywords include:"
msgstr ""

#: ../../docs/development/file_formats/tscn.rst:73
#, fuzzy
msgid "``instance``"
msgstr "``inst2dict``"

#: ../../docs/development/file_formats/tscn.rst:74
#, fuzzy
msgid "``instance_placeholder``"
msgstr "``is_instance_valid(obj)``"

#: ../../docs/development/file_formats/tscn.rst:75
#, fuzzy
msgid "``owner``"
msgstr "``Center``"

#: ../../docs/development/file_formats/tscn.rst:76
msgid "``index`` (if two nodes have the same name)"
msgstr ""

#: ../../docs/development/file_formats/tscn.rst:77
#, fuzzy
msgid "``groups``"
msgstr "``그룹 노드``"

#: ../../docs/development/file_formats/tscn.rst:79
msgid ""
"The first node in the file, which is also the scene root, must not have a "
"``parent=Path/To/Node`` entry in its heading. All scene files should have "
"exactly *one* scene root. If it doesn't, Godot will fail to import the file. "
"The parent path of other nodes should be absolute, but shouldn't contain the "
"scene root's name. If the node is a direct child of the scene root, the path "
"should be ``\".\"``. Here is an example scene tree (but without any node "
"content):"
msgstr ""

#: ../../docs/development/file_formats/tscn.rst:95
msgid ""
"Similar to the internal resource, the document for each node is currently "
"incomplete. Fortunately, it is easy to find out because you can simply save "
"a file with that node in it. Some example nodes are:"
msgstr ""

#: ../../docs/development/file_formats/tscn.rst:136
msgid ""
"A tree structure is not enough to represent the whole scene. Godot uses a "
"``NodePath(Path/To/Node)`` structure to refer to another node or attribute "
"of the node anywhere in the scene tree. For instance, MeshInstance uses "
"``NodePath()`` to point to its skeleton. Likewise, Animation tracks use "
"``NodePath()`` to point to node properties to animate."
msgstr ""

#: ../../docs/development/file_formats/tscn.rst:163
msgid ""
"The Skeleton node inherits the Spatial node, but also may have a list of "
"bones described in key-value pairs in the format ``bones/Id/"
"Attribute=Value``. The bone attributes consist of:"
msgstr ""

#: ../../docs/development/file_formats/tscn.rst:168
msgid "``parent``"
msgstr ""

#: ../../docs/development/file_formats/tscn.rst:169
msgid "``rest``"
msgstr ""

#: ../../docs/development/file_formats/tscn.rst:170
msgid "``pose``"
msgstr ""

#: ../../docs/development/file_formats/tscn.rst:171
#: ../../docs/development/file_formats/tscn.rst:391
#, fuzzy
msgid "``enabled``"
msgstr "``end``"

#: ../../docs/development/file_formats/tscn.rst:172
#, fuzzy
msgid "``bound_children``"
msgstr "``move_and_collide``"

#: ../../docs/development/file_formats/tscn.rst:174
msgid "``name`` must be the first attribute of each bone."
msgstr ""

#: ../../docs/development/file_formats/tscn.rst:175
msgid ""
"``parent`` is the index of parent bone in the bone list, with parent index, "
"the bone list is built to a bone tree."
msgstr ""

#: ../../docs/development/file_formats/tscn.rst:177
msgid "``rest`` is the transform matrix of bone in its \"resting\" position."
msgstr ""

#: ../../docs/development/file_formats/tscn.rst:178
msgid "``pose`` is the pose matrix; use ``rest`` as the basis."
msgstr ""

#: ../../docs/development/file_formats/tscn.rst:179
msgid ""
"``bound_children`` is a list of ``NodePath()`` which point to "
"BoneAttachments belonging to this bone."
msgstr ""

#: ../../docs/development/file_formats/tscn.rst:182
#, fuzzy
msgid "Here's an example of a skeleton node with two bones:"
msgstr "어떻게 작동하는 지의 예제입니다:"

#: ../../docs/development/file_formats/tscn.rst:203
msgid "BoneAttachment"
msgstr ""

#: ../../docs/development/file_formats/tscn.rst:205
msgid ""
"BoneAttachment node is an intermediate node to describe some node being "
"parented to a single bone in a Skeleton node. The BoneAttachment has a "
"``bone_name=NameOfBone`` attribute, and the corresponding bone being the "
"parent has the BoneAttachment node in its ``bound_children`` list."
msgstr ""

#: ../../docs/development/file_formats/tscn.rst:210
msgid "An example of one MeshInstance parented to a bone in Skeleton:"
msgstr ""

#: ../../docs/development/file_formats/tscn.rst:235
msgid "AnimationPlayer"
msgstr "AnimationPlayer"

#: ../../docs/development/file_formats/tscn.rst:237
msgid ""
"AnimationPlayer works as an animation library. It stores animations listed "
"in the format ``anim/Name=SubResource(ResourceId)``; each line refers to an "
"Animation resource. All the animation resources use the root node of "
"AnimationPlayer. The root node is stored as ``root_node=NodePath(Path/To/"
"Node)``."
msgstr ""

#: ../../docs/development/file_formats/tscn.rst:259
msgid ""
"Resources are components that make up the nodes. For example, a MeshInstance "
"node will have an accompanying ArrayMesh resource. The ArrayMesh resource "
"may be either internal or external to the TSCN file."
msgstr ""

#: ../../docs/development/file_formats/tscn.rst:263
msgid ""
"References to the resources are handled by ``id`` numbers in the resource's "
"heading. External resources and internal resources are referred to with "
"``ExtResource(id)`` and ``SubResource(id)``, respectively. Because there "
"have different methods to refer to internal and external resources, you can "
"have the same ID for both an internal and external resource."
msgstr ""

#: ../../docs/development/file_formats/tscn.rst:269
msgid ""
"For example, to refer to the resource ``[ext_resource id=3 type=\"PackedScene"
"\" path=....]``, you would use ``ExtResource(3)``."
msgstr ""

#: ../../docs/development/file_formats/tscn.rst:275
msgid ""
"External resources are links to resources not contained within the TSCN file "
"itself. An external resource consists of a path, a type and an ID."
msgstr ""

#: ../../docs/development/file_formats/tscn.rst:278
msgid ""
"Godot always generates absolute paths relative to the resource directory and "
"thus prefixed with ``res://``, but paths relative to the TSCN file's "
"location are also valid."
msgstr ""

#: ../../docs/development/file_formats/tscn.rst:282
msgid "Some example external resources are:"
msgstr ""

#: ../../docs/development/file_formats/tscn.rst:290
msgid ""
"Like TSCN files, a TRES file may contain single-line comments starting with "
"a semicolon (``;``). However, comments will be discarded when saving the "
"resource using the Godot editor."
msgstr ""

#: ../../docs/development/file_formats/tscn.rst:297
msgid ""
"A TSCN file can contain meshes, materials and other data. These are "
"contained in the *internal resources* section of the file. The heading for "
"an internal resource looks similar to those of external resources, except "
"that it doesn't have a path. Internal resources also have ``key=value`` "
"pairs under each heading. For example, a capsule collision shape looks like:"
msgstr ""

#: ../../docs/development/file_formats/tscn.rst:311
msgid ""
"Some internal resources contain links to other internal resources (such as a "
"mesh having a material). In this case, the referring resource must appear "
"*before* the reference to it. This means that order matters in the file's "
"internal resources section."
msgstr ""

#: ../../docs/development/file_formats/tscn.rst:316
msgid ""
"Unfortunately, documentation on the formats for these subresources isn't "
"complete. Some examples can be found by inspecting saved resource files, but "
"others can only be found by looking through Godot's source."
msgstr ""

#: ../../docs/development/file_formats/tscn.rst:323
msgid ""
"ArrayMesh consists of several surfaces, each in the format ``surface"
"\\Index={}``. Each surface is a set of vertices and a material."
msgstr ""

#: ../../docs/development/file_formats/tscn.rst:326
msgid "TSCN files support two surface formats:"
msgstr ""

#: ../../docs/development/file_formats/tscn.rst:328
msgid "For the old format, each surface has three essential keys:"
msgstr ""

#: ../../docs/development/file_formats/tscn.rst:330
msgid "``primitive``"
msgstr ""

#: ../../docs/development/file_formats/tscn.rst:331
#, fuzzy
msgid "``arrays``"
msgstr "``Array``"

#: ../../docs/development/file_formats/tscn.rst:332
#, fuzzy
msgid "``morph_arrays``"
msgstr "``Array``"

#: ../../docs/development/file_formats/tscn.rst:334
msgid ""
"``primitive`` is an enumerate variable, ``primitive=4`` which is "
"``PRIMITIVE_TRIANGLES`` is frequently used."
msgstr ""

#: ../../docs/development/file_formats/tscn.rst:337
msgid "``arrays`` is a two-dimensional array, it contains:"
msgstr ""

#: ../../docs/development/file_formats/tscn.rst:339
#, fuzzy
msgid "Vertex positions array"
msgstr "``x.attribute``"

#: ../../docs/development/file_formats/tscn.rst:340
msgid "Tangents array"
msgstr ""

#: ../../docs/development/file_formats/tscn.rst:341
msgid "Vertex colors array"
msgstr ""

#: ../../docs/development/file_formats/tscn.rst:342
msgid "UV array 1"
msgstr ""

#: ../../docs/development/file_formats/tscn.rst:343
msgid "UV array 2"
msgstr ""

#: ../../docs/development/file_formats/tscn.rst:344
msgid "Bone indexes array"
msgstr ""

#: ../../docs/development/file_formats/tscn.rst:345
#, fuzzy
msgid "Bone weights array"
msgstr "본 무게값"

#: ../../docs/development/file_formats/tscn.rst:346
msgid "Vertex indexes array"
msgstr ""

#: ../../docs/development/file_formats/tscn.rst:348
msgid ""
"``morph_arrays`` is an array of morphs. Each morph is exactly an ``arrays`` "
"without the vertex indexes array."
msgstr ""

#: ../../docs/development/file_formats/tscn.rst:351
msgid "An example of ArrayMesh:"
msgstr ""

#: ../../docs/development/file_formats/tscn.rst:377
msgid ""
"An animation resource consists of tracks. Besides, it has ``length``, "
"``loop`` and ``step`` applied to all the tracks."
msgstr ""

#: ../../docs/development/file_formats/tscn.rst:380
msgid "``length`` and ``step`` are both durations in seconds."
msgstr ""

#: ../../docs/development/file_formats/tscn.rst:382
msgid ""
"Each track is described by a list of key-value pairs in the format ``tracks/"
"Id/Attribute``. Each track includes:"
msgstr ""

#: ../../docs/development/file_formats/tscn.rst:385
msgid "``type``"
msgstr ""

#: ../../docs/development/file_formats/tscn.rst:386
#, fuzzy
msgid "``path``"
msgstr "``$NodePath``"

#: ../../docs/development/file_formats/tscn.rst:387
#, fuzzy
msgid "``interp``"
msgstr "``Center``"

#: ../../docs/development/file_formats/tscn.rst:388
msgid "``keys``"
msgstr ""

#: ../../docs/development/file_formats/tscn.rst:389
msgid "``loop_wrap``"
msgstr ""

#: ../../docs/development/file_formats/tscn.rst:390
msgid "``imported``"
msgstr ""

#: ../../docs/development/file_formats/tscn.rst:393
msgid ""
"The ``type`` must be the first attribute of each track. The value of "
"``type`` can be:"
msgstr ""

#: ../../docs/development/file_formats/tscn.rst:396
#, fuzzy
msgid "``transform``"
msgstr "'변형'"

#: ../../docs/development/file_formats/tscn.rst:397
#, fuzzy
msgid "``value``"
msgstr "'값'"

#: ../../docs/development/file_formats/tscn.rst:398
#, fuzzy
msgid "``method``"
msgstr "메서드"

#: ../../docs/development/file_formats/tscn.rst:400
msgid ""
"The ``path`` has the format ``NodePath(Path/To/Node:attribute)``. It's the "
"path to the animated node or attribute, relative to the root node defined in "
"the AnimationPlayer."
msgstr ""

#: ../../docs/development/file_formats/tscn.rst:404
msgid ""
"The ``interp`` is the method to interpolate frames from the keyframes. it is "
"a enum variable and can has value:"
msgstr ""

#: ../../docs/development/file_formats/tscn.rst:407
msgid "0 (constant)"
msgstr "0 (상수)"

#: ../../docs/development/file_formats/tscn.rst:408
msgid "1 (linear)"
msgstr ""

#: ../../docs/development/file_formats/tscn.rst:409
msgid "2 (cubic)"
msgstr ""

#: ../../docs/development/file_formats/tscn.rst:411
msgid ""
"The ``keys`` correspond to the keyframes. It appears as a "
"``PoolRealArray()``, but may have a different structure for tracks with "
"different types."
msgstr ""

#: ../../docs/development/file_formats/tscn.rst:414
msgid ""
"A Transform track uses every 12 real numbers in the ``keys`` to describe a "
"keyframe. The first number is the timestamp. The second number is the "
"transition followed by a 3-number translation vector, followed by a 4-number "
"rotation quaternion (X, Y, Z, W) and finally a 3-number scale vector. The "
"default transition in a Transform track is 1.0."
msgstr ""

#: ../../docs/community/contributing/index.rst:2
msgid "Contributing"
msgstr ""

#: ../../docs/community/contributing/ways_to_contribute.rst:4
msgid "Ways to contribute"
msgstr ""

#: ../../docs/community/contributing/ways_to_contribute.rst:6
msgid ""
"Godot Engine is a non-profit, community-driven free and open source project. "
"Almost all (but our lead dev Juan, more on that below) developers are "
"working *pro bono* on their free time, out of personal interest and for the "
"love of creating a libre engine of exceptional quality."
msgstr ""

#: ../../docs/community/contributing/ways_to_contribute.rst:11
msgid ""
"This means that to thrive, Godot needs as many users as possible to get "
"involved by contributing to the engine. There are many ways to contribute to "
"such a big project, making it possible for everybody to bring something "
"positive to the engine, regardless of their skill set:"
msgstr ""

#: ../../docs/community/contributing/ways_to_contribute.rst:16
msgid ""
"**Be part of the community.** The best way to contribute to Godot and help "
"it become ever better is simply to use the engine and promote it by word-of-"
"mouth, in the credits or splash screen of your games, blog posts, tutorials, "
"videos, demos, gamedev or free software events, support on the Q&A, IRC, "
"forums, Discord, etc. Participate! Being a user and advocate helps spread "
"the word about our great engine, which has no marketing budget and can "
"therefore only rely on its community to become more mainstream."
msgstr ""

#: ../../docs/community/contributing/ways_to_contribute.rst:25
msgid ""
"**Make games.** It's no secret that, to convince new users and especially "
"the industry at large that Godot is a relevant market player, we need great "
"games made with Godot. We know that the engine has a lot of potential, both "
"for 2D and 3D games, but given its young age we still lack big releases that "
"will draw attention to Godot. So keep working on your awesome projects, each "
"new game increases our credibility on the gamedev market!"
msgstr ""

#: ../../docs/community/contributing/ways_to_contribute.rst:32
msgid ""
"**Get involved in the engine's development.** This can be by contributing "
"code via pull requests, testing the development snapshots or directly the "
"git *master* branch, report bugs or suggest enhancements on the issue "
"tracker, improve the official documentation (both the class reference and "
"tutorials) and its translations. The following sections will cover each of "
"those \"direct\" ways of contributing to the engine."
msgstr ""

#: ../../docs/community/contributing/ways_to_contribute.rst:40
msgid ""
"**Donate.** Godot is a non-profit project, but it can still benefit from "
"user donations for many things. Apart from usual expenses such as hosting "
"costs or promotional material on events, we also use donation money to "
"acquire hardware when necessary (e.g. we used donation money to buy a "
"Macbook Pro to implement Retina/HiDPI support and various other macOS-"
"related features). Most importantly, we also used donation money to hire "
"core developers so they can work full-time on the engine. Even with a low "
"monthly wage, we need a steady donation income to continue doing this, which "
"has been very beneficial to the project so far. So if you want to donate "
"some money to the project, check `our website <https://godotengine.org/"
"donate>`_ for details."
msgstr ""

#: ../../docs/community/contributing/ways_to_contribute.rst:54
msgid "Contributing code"
msgstr ""

#: ../../docs/community/contributing/ways_to_contribute.rst:56
msgid ""
"The possibility to study, use, modify and redistribute modifications of the "
"engine's source code are the fundamental rights that Godot's `MIT <https://"
"tldrlegal.com/license/mit-license>`_ license grants you, making it `free and "
"open source software <https://en.wikipedia.org/wiki/Free_and_open-"
"source_software>`_."
msgstr ""

#: ../../docs/community/contributing/ways_to_contribute.rst:61
msgid ""
"As such, everyone is entitled to modify `Godot's source code <https://github."
"com/godotengine/godot>`_, and send those modifications back to the upstream "
"project in the form of a patch (a text file describing the changes in a "
"ready-to-apply manner) or - in the modern workflow that we use - via a so-"
"called \"pull request\" (PR), i.e. a proposal to directly merge one or more "
"git commits (patches) into the main development branch."
msgstr ""

#: ../../docs/community/contributing/ways_to_contribute.rst:68
msgid "Contributing code changes upstream has two big advantages:"
msgstr ""

#: ../../docs/community/contributing/ways_to_contribute.rst:70
msgid ""
"Your own code will be reviewed and improved by other developers, and will be "
"further maintained directly in the upstream project, so you won't have to "
"reapply your own changes every time you move to a newer version. On the "
"other hand it comes with a responsibility, as your changes have to be "
"generic enough to be beneficial to all users, and not just your project; so "
"in some cases it might still be relevant to keep your changes only for your "
"own project, if they are too specific."
msgstr ""

#: ../../docs/community/contributing/ways_to_contribute.rst:78
msgid ""
"The whole community will benefit from your work, and other contributors will "
"behave the same way, contributing code that will be beneficial to you. At "
"the time of this writing, more than 300 developers have contributed code "
"changes to the engine!"
msgstr ""

#: ../../docs/community/contributing/ways_to_contribute.rst:83
msgid ""
"To ensure good collaboration and overall quality, the Godot developers "
"enforce some rules for code contributions, for example regarding the style "
"to use in the C++ code (indentation, brackets, etc.) or the git and PR "
"workflow."
msgstr ""

#: ../../docs/community/contributing/ways_to_contribute.rst:87
msgid ""
"A good place to start is by searching for issues tagged as `junior jobs "
"<https://github.com/godotengine/godot/issues?q=is%3Aissue+is%3Aopen+label%3A"
"%22junior+job%22>`_ (or `Hacktoberfest <https://github.com/godotengine/godot/"
"issues?utf8=%E2%9C%93&q=is%3Aissue+is%3Aopen+label%3AHacktoberfest+>`_ "
"during October) on GitHub."
msgstr ""

#: ../../docs/community/contributing/ways_to_contribute.rst:89
msgid ""
"Technical details about the PR workflow are outlined in a specific section, :"
"ref:`doc_pr_workflow`."
msgstr ""

#: ../../docs/community/contributing/ways_to_contribute.rst:92
msgid ""
"Details about the code style guidelines and the ``clang-format`` tool used "
"to enforce them are outlined in :ref:`doc_code_style_guidelines`."
msgstr ""

#: ../../docs/community/contributing/ways_to_contribute.rst:97
msgid "Testing and reporting issues"
msgstr ""

#: ../../docs/community/contributing/ways_to_contribute.rst:99
msgid ""
"Another great way of contributing to the engine is to test development "
"releases or the development branch and to report issues. It is also helpful "
"to report issues discovered in stable releases, so that they can be fixed in "
"the development branch and in future maintenance releases."
msgstr ""

#: ../../docs/community/contributing/ways_to_contribute.rst:105
msgid "Testing development versions"
msgstr ""

#: ../../docs/community/contributing/ways_to_contribute.rst:107
msgid "To help with the testing, you have several possibilities:"
msgstr ""

#: ../../docs/community/contributing/ways_to_contribute.rst:109
msgid ""
"Compile the engine from source yourself, following the instructions of the :"
"ref:`Compiling <toc-devel-compiling>` page for your platform."
msgstr ""

#: ../../docs/community/contributing/ways_to_contribute.rst:112
msgid ""
"Test official pre-release binaries when they are announced (usually on the "
"blog and other community platforms), such as alpha, beta and release "
"candidate (RC) builds."
msgstr ""

#: ../../docs/community/contributing/ways_to_contribute.rst:115
msgid ""
"Test \"trusted\" unofficial builds of the development branch; just ask "
"community members for reliable providers. Whenever possible, it's best to "
"use official binaries or to compile yourself though, to be sure about the "
"provenance of your binaries."
msgstr ""

#: ../../docs/community/contributing/ways_to_contribute.rst:120
msgid ""
"As mentioned previously, it is also helpful to keep your eyes peeled for "
"potential bugs that might still be present in the stable releases, "
"especially when using some niche features of the engine which might get less "
"testing by the developers."
msgstr ""

#: ../../docs/community/contributing/ways_to_contribute.rst:126
msgid "Filing an issue on GitHub"
msgstr ""

#: ../../docs/community/contributing/ways_to_contribute.rst:128
msgid ""
"Godot uses `GitHub's issue tracker <https://github.com/godotengine/godot/"
"issues>`_ for bug reports and enhancement suggestions. You will need a "
"GitHub account to be able to open a new issue there, and click on the \"New "
"issue\" button."
msgstr ""

#: ../../docs/community/contributing/ways_to_contribute.rst:132
msgid ""
"When you report a bug, you should keep in mind that the process is similar "
"to an appointment with your doctor. You noticed *symptoms* that make you "
"think that something might be wrong (the engine crashes, some features don't "
"work as expected, etc.). It's the role of the bug triaging team and the "
"developers to then help make the diagnosis of the issue you met, so that the "
"actual cause of the bug can be identified and addressed."
msgstr ""

#: ../../docs/community/contributing/ways_to_contribute.rst:139
msgid ""
"You should therefore always ask yourself: what is relevant information to "
"give so that other Godot contributors can understand the bug, identify it "
"and hopefully fix it. Here are some of the most important infos that you "
"should always provide:"
msgstr ""

#: ../../docs/community/contributing/ways_to_contribute.rst:144
msgid ""
"**Operating system.** Sometimes bugs are system-specific, i.e. they happen "
"only on Windows, or only on Linux, etc. That's particularly relevant for all "
"bugs related to OS interfaces, such as file management, input, window "
"management, audio, etc."
msgstr ""

#: ../../docs/community/contributing/ways_to_contribute.rst:149
msgid ""
"**Hardware.** Sometimes bugs are hardware-specific, i.e. they happen only on "
"certain processors, graphic cards, etc. If you are able to, it can be "
"helpful to include information on your hardware."
msgstr ""

#: ../../docs/community/contributing/ways_to_contribute.rst:153
msgid ""
"**Godot version.** This is a must have. Some issues might be relevant in the "
"current stable release, but fixed in the development branch, or the other "
"way around. You might also be using an obsolete version of Godot and "
"experiencing a known issue fixed in a later version, so knowing this from "
"the start helps to speed up the diagnosis."
msgstr ""

#: ../../docs/community/contributing/ways_to_contribute.rst:159
msgid ""
"**How to reproduce the bug.** In the majority of cases, bugs are "
"reproducible, i.e. it is possible to trigger them reliably by following some "
"steps. Please always describe those steps as clearly as possible, so that "
"everyone can try to reproduce the issue and confirm it. Ideally, make a demo "
"project that reproduces this issue out of the box, zip it and attach it to "
"the issue (you can do this by drag and drop). Even if you think that the "
"issue is trivial to reproduce, adding a minimal project that lets reproduce "
"it is a big added value. You have to keep in mind that there are thousands "
"of issues in the tracker, and developers can only dedicate little time to "
"each issue."
msgstr ""

#: ../../docs/community/contributing/ways_to_contribute.rst:170
msgid ""
"When you click the \"New issue\" button, you should be presented with a text "
"area prefilled with our issue template. Please try to follow it so that all "
"issues are consistent and provide the required information."
msgstr ""

#: ../../docs/community/contributing/ways_to_contribute.rst:175
msgid "Contributing to the documentation"
msgstr ""

#: ../../docs/community/contributing/ways_to_contribute.rst:177
msgid ""
"There are two separate resources referred to as \"documentation\" in Godot:"
msgstr ""

#: ../../docs/community/contributing/ways_to_contribute.rst:179
msgid ""
"**The class reference.** This is the documentation for the complete Godot "
"API as exposed to GDScript and the other scripting languages. It can be "
"consulted offline, directly in Godot's code editor, or online at :ref:`Godot "
"API <toc-class-ref>`. To contribute to the class reference, you have to edit "
"the `doc/base/classes.xml` in Godot's git repository, and make a pull "
"request. See :ref:`doc_updating_the_class_reference` for more details."
msgstr ""

#: ../../docs/community/contributing/ways_to_contribute.rst:187
msgid ""
"**The tutorials and engine documentation and its translations.** This is the "
"part you are reading now, which is distributed in the HTML, PDF and EPUB "
"formats. Its contents are generated from plain text files in the "
"reStructured Text (rst) format, to which you can contribute via pull "
"requests on the `godot-docs <https://github.com/godotengine/godot-docs>`_ "
"GitHub repository. See :ref:`doc_documentation_guidelines` for more details."
msgstr ""

#: ../../docs/community/contributing/best_practices_for_engine_contributors.rst:4
msgid "Best practices for engine contributors"
msgstr ""

#: ../../docs/community/contributing/best_practices_for_engine_contributors.rst:9
msgid ""
"Godot has a large amount of users who have the ability to contribute, given "
"the project itself is aimed mainly at users with the ability to do "
"programming. Despite this, not all of them have the same level of experience "
"working in large projects or in software engineering, which can lead to "
"common misunderstandings and bad practices during the process of "
"contributing code to the project."
msgstr ""

#: ../../docs/community/contributing/best_practices_for_engine_contributors.rst:14
msgid ""
"The scope of this document is to be a list of best practices for "
"contributors to follow, as well as to creating a language they can use to "
"refer to common situations that arise in the process of submitting their "
"contributions."
msgstr ""

#: ../../docs/community/contributing/best_practices_for_engine_contributors.rst:16
msgid ""
"While some may find it useful to extend this to general software "
"development, our intention is to just restrict to situations that are most "
"common in our project."
msgstr ""

#: ../../docs/community/contributing/best_practices_for_engine_contributors.rst:18
msgid ""
"Contributions are most of the time categorized as bug fixes, enhancements or "
"new features. To abstract this idea, we will call them *Solutions*, because "
"they always seek to solve something that can be described as a *Problem*."
msgstr ""

#: ../../docs/community/contributing/best_practices_for_engine_contributors.rst:21
#, fuzzy
msgid "Best Practices"
msgstr "모범 사례:"

#: ../../docs/community/contributing/best_practices_for_engine_contributors.rst:24
msgid "#1: The problem always comes first"
msgstr ""

#: ../../docs/community/contributing/best_practices_for_engine_contributors.rst:26
msgid ""
"Many contributors are extremely creative and just enjoy the process of "
"designing abstract data structures, creating nice user interfaces,or simply "
"love programming. Whatever the case may be, they come up with cool ideas, "
"which may not be actually solving any actual problems."
msgstr ""

#: ../../docs/community/contributing/best_practices_for_engine_contributors.rst:30
msgid ""
"These are usually called *Solutions in search of a problem*. In an ideal "
"world, they would not be harmful but, in reality, code takes time to write, "
"takes space as source and binary and requires maintenance once it exists. "
"Avoiding the addition of anything unnecessary is always considered a good "
"practice in software development."
msgstr ""

#: ../../docs/community/contributing/best_practices_for_engine_contributors.rst:33
msgid "#2: The problem has to exist"
msgstr ""

#: ../../docs/community/contributing/best_practices_for_engine_contributors.rst:35
msgid ""
"This is a variation of the previous practice. I believe most developers "
"agree that adding anything unnecessary is not a good idea, but what "
"constitutes what is necessary and what isn't?"
msgstr ""

#: ../../docs/community/contributing/best_practices_for_engine_contributors.rst:39
msgid ""
"The answer to this question is that the problem needs to *exist*. It must "
"not be speculation or a belief. The user must be using the software as "
"intended to create something they *need*. In this process, the user may "
"stumble into a problem that requires a solution in order to continue, or in "
"order to achieve greater productivity. In this case, *a solution is needed*."
msgstr ""

#: ../../docs/community/contributing/best_practices_for_engine_contributors.rst:41
msgid ""
"Believing that problems may arise in the future and that the software needs "
"to be ready to solve them by the time they appear is called *\"Future "
"proofing\"* and its characterized by lines of thought such as:"
msgstr ""

#: ../../docs/community/contributing/best_practices_for_engine_contributors.rst:43
msgid "I think it would be useful for users to..."
msgstr ""

#: ../../docs/community/contributing/best_practices_for_engine_contributors.rst:44
#, fuzzy
msgid "I think users will eventually need to..."
msgstr "걱정된다면, 이렇게 해보죠..."

#: ../../docs/community/contributing/best_practices_for_engine_contributors.rst:46
msgid ""
"This is generally considered a bad habit, because trying to solve problems "
"that *don't actually exist* in the present will very often lead to code that "
"will be written but never used, or to code that is considerably more complex "
"to use and maintain than it needs to be."
msgstr ""

#: ../../docs/community/contributing/best_practices_for_engine_contributors.rst:49
msgid "#3: The problem has to be complex or frequent"
msgstr ""

#: ../../docs/community/contributing/best_practices_for_engine_contributors.rst:51
msgid ""
"Software is designed to solve problems, but we can't expect it to solve "
"*every problem that exists under the sun*. As a game engine, Godot will "
"solve problems for you, so it helps you to make games better and faster, but "
"it won't make the *entire game* for you. A line must be drawn somewhere."
msgstr ""

#: ../../docs/community/contributing/best_practices_for_engine_contributors.rst:55
msgid ""
"Whether a problem is worth solving is determined by the difficulty the user "
"has to work around it. This difficulty can be expressed as:"
msgstr ""

#: ../../docs/community/contributing/best_practices_for_engine_contributors.rst:57
#, fuzzy
msgid "The complexity of the problem"
msgstr "스크립트의 역할"

#: ../../docs/community/contributing/best_practices_for_engine_contributors.rst:58
msgid "The frequency the problem"
msgstr ""

#: ../../docs/community/contributing/best_practices_for_engine_contributors.rst:60
msgid ""
"If the problem is *too complex* for most users to solve, the software must "
"offer a ready made solution for it. Likewise, if the problem is easy for the "
"user to workaround, offering such a solution is unnecessary and it's up to "
"the user to do it."
msgstr ""

#: ../../docs/community/contributing/best_practices_for_engine_contributors.rst:62
msgid ""
"The exception, however, is when the user stumbles into this problem "
"*frequently enough* that having to do the simple solution every time becomes "
"an annoyance. In this case, the software must offer a solution to simplify "
"this use case."
msgstr ""

#: ../../docs/community/contributing/best_practices_for_engine_contributors.rst:64
msgid ""
"In our experience, in most cases it's usually obvious to tell when a problem "
"is complex or frequent, but cases may arise where drawing this line is "
"difficult. This is why discussing with other developers (next point) is "
"always advised."
msgstr ""

#: ../../docs/community/contributing/best_practices_for_engine_contributors.rst:67
msgid "#4: The solution must be discussed with others"
msgstr ""

#: ../../docs/community/contributing/best_practices_for_engine_contributors.rst:69
msgid ""
"It is often the case that, when users stumble upon problems, they are only "
"immersed in their own project, so they will naturally try to solve the "
"problem from their own perspective, thinking only about their use case."
msgstr ""

#: ../../docs/community/contributing/best_practices_for_engine_contributors.rst:71
msgid ""
"Because of this, user proposed solutions don't always contemplate other use "
"cases that developers are often aware of, so they are often biased towards "
"their own requirements."
msgstr ""

#: ../../docs/community/contributing/best_practices_for_engine_contributors.rst:75
msgid ""
"For developers, the perspective is different. They may find the user's "
"problem too unique to justify a solution (instead of an user workaround), or "
"maybe they will suggest a partial (usually simpler or lower level) solution "
"that applies to a wider range of known problems, and leave the rest of the "
"solution up to the user."
msgstr ""

#: ../../docs/community/contributing/best_practices_for_engine_contributors.rst:77
msgid ""
"In any case, before attempting a contribution, it is important to discuss "
"the actual problems with the other developers or contributors, so a better "
"agreement on implementation can be reached."
msgstr ""

#: ../../docs/community/contributing/best_practices_for_engine_contributors.rst:79
msgid ""
"The only exception, in this case, is when an area of code has a clear owner "
"(agreed by the other contributors), who talks to users directly and has the "
"most knowledge to implement a solution directly."
msgstr ""

#: ../../docs/community/contributing/best_practices_for_engine_contributors.rst:82
msgid "#5: To each problem, its own solution"
msgstr ""

#: ../../docs/community/contributing/best_practices_for_engine_contributors.rst:84
msgid ""
"For programmers, it is always a most enjoyable challenge to find the most "
"optimal solutions to problems. Things, however, may go overboard sometimes "
"and programmers will try to come up with solutions that solve as many "
"problems as possible."
msgstr ""

#: ../../docs/community/contributing/best_practices_for_engine_contributors.rst:86
msgid ""
"The situation will often take a turn for the worse when, in order to make "
"this solution appear even more fantastic and flexible, the pure speculation-"
"based problems (as described in #2) also make their appearance on stage."
msgstr ""

#: ../../docs/community/contributing/best_practices_for_engine_contributors.rst:90
msgid ""
"The main problem is that, in reality, it rarely works this way. Most of the "
"time, just writing an individual solution to each problem results in code "
"that is simpler and more maintainable."
msgstr ""

#: ../../docs/community/contributing/best_practices_for_engine_contributors.rst:92
msgid ""
"Additionally, solutions that target individual problems are better for the "
"users, as they find something that does exactly what they need, without "
"having to learn and remember a more complex system they will only need for "
"simple tasks."
msgstr ""

#: ../../docs/community/contributing/best_practices_for_engine_contributors.rst:94
msgid ""
"Big and flexible solutions also have an additional drawback which is that, "
"over time, they rarely are flexible enough for all users, which keep "
"requesting more functions added (and making the API and codebase more and "
"more complex)."
msgstr ""

#: ../../docs/community/contributing/best_practices_for_engine_contributors.rst:97
msgid "#6: Cater to common use cases, leave the door open for the rare ones"
msgstr ""

#: ../../docs/community/contributing/best_practices_for_engine_contributors.rst:99
msgid ""
"This is a continuation of the previous point, which further explains why "
"this way of thinking and designing software is preferred."
msgstr ""

#: ../../docs/community/contributing/best_practices_for_engine_contributors.rst:101
msgid ""
"As mentioned before (in point #2), it is very difficult for us (as human "
"beings who design software) to actually understand all future user needs. "
"Trying to write very flexible structures that cater to many use cases at "
"once is often a mistake."
msgstr ""

#: ../../docs/community/contributing/best_practices_for_engine_contributors.rst:103
msgid ""
"We may come up with something we believe is brilliant, but when it's "
"actually used, we will find that users will never even use half of it, or "
"that they will require features that don't quite accommodate our original "
"design, forcing us to either throw it away or make it even more complex."
msgstr ""

#: ../../docs/community/contributing/best_practices_for_engine_contributors.rst:105
msgid ""
"The question is then, how to design software that gives users what *we know "
"they need*, but that is flexible enough to allow them to do *what we don't "
"know they might need* in the future?"
msgstr ""

#: ../../docs/community/contributing/best_practices_for_engine_contributors.rst:109
msgid ""
"The answer to this question is that, to ensure users still can do what they "
"want to do, we need to give them access to a *low level API* that they can "
"use to achieve what they want, even if it's more work for them because it "
"means reimplementing some of the logic that already exists."
msgstr ""

#: ../../docs/community/contributing/best_practices_for_engine_contributors.rst:111
msgid ""
"In real-life scenarios, these use cases will be at most rare and uncommon "
"anyway, so it makes sense a custom solution needs to be written. This is why "
"it's important to still provide users the basic building blocks to do it."
msgstr ""

#: ../../docs/community/contributing/best_practices_for_engine_contributors.rst:114
msgid "#7: Solutions must be local"
msgstr ""

#: ../../docs/community/contributing/best_practices_for_engine_contributors.rst:116
msgid ""
"When looking for a solution to a problem, be it implementing a new feature "
"or fixing a bug, sometimes the easiest path is to add data or a new function "
"in the core layers of code."
msgstr ""

#: ../../docs/community/contributing/best_practices_for_engine_contributors.rst:118
msgid ""
"The main problem here is, adding something to the core layers that will only "
"be used from a single location far away will not only make the code more "
"difficult to follow (split in two), but also make the core API larger, more "
"complex, more difficult to understand in general."
msgstr ""

#: ../../docs/community/contributing/best_practices_for_engine_contributors.rst:120
msgid ""
"This is bad, because readability and cleanness of core APIs is always of "
"extreme importance given how much code relies from it, and because it's key "
"for new contributors as a starting point to learning the codebase."
msgstr ""

#: ../../docs/community/contributing/best_practices_for_engine_contributors.rst:126
msgid ""
"The common reasoning for wanting to do this is that it's usually less code "
"to simply add a hack in the core layers."
msgstr ""

#: ../../docs/community/contributing/best_practices_for_engine_contributors.rst:128
msgid ""
"Despite this, this practice is not advised. Generally, the code for a "
"solution should be closer to where the problem originates, even if it "
"involves more code, duplicated, more complex or is less efficient. More "
"creativity might be needed, but this path is always the advised one."
msgstr ""

#: ../../docs/community/contributing/best_practices_for_engine_contributors.rst:131
msgid "#8: Don't use complex canned solutions for simple problems"
msgstr ""

#: ../../docs/community/contributing/best_practices_for_engine_contributors.rst:133
msgid ""
"Not every problem has a simple solution and, many times, the right choice is "
"to use a third party library to solve the problem."
msgstr ""

#: ../../docs/community/contributing/best_practices_for_engine_contributors.rst:135
msgid ""
"As Godot requires to be shipped in a large amount of platforms, we just "
"can't link libraries dynamically. Instead, we bundle them in our source tree."
msgstr ""

#: ../../docs/community/contributing/best_practices_for_engine_contributors.rst:139
msgid ""
"As a result, we are very picky with what goes in, and we tend to prefer "
"smaller libraries (in fact, single header ones are our favorite). Only in "
"cases where there is no other choice we end up bundling something larger."
msgstr ""

#: ../../docs/community/contributing/pr_workflow.rst:4
msgid "Pull request workflow"
msgstr ""

#: ../../docs/community/contributing/pr_workflow.rst:8
msgid ""
"The so-called \"PR workflow\" used by Godot is common to many projects using "
"Git, and should be familiar to veteran free software contributors. The idea "
"is that only a small number (if any) commit directly to the *master* branch. "
"Instead, contributors *fork* the project (i.e. create a copy of it, which "
"they can modify as they wish), and then use the GitHub interface to request "
"a *pull* from one of their fork's branches to one branch of the original "
"(often named *upstream*) repository."
msgstr ""

#: ../../docs/community/contributing/pr_workflow.rst:16
msgid ""
"The resulting *pull request* (PR) can then be reviewed by other "
"contributors, which might approve it, reject it, or most often request that "
"modifications be done. Once approved, the PR can then be merged by one of "
"the core developers, and its commit(s) will become part of the target branch "
"(usually the *master* branch)."
msgstr ""

#: ../../docs/community/contributing/pr_workflow.rst:22
msgid ""
"We will go together through an example to show the typical workflow and "
"associated Git commands. But first, let's have a quick look at the "
"organisation of Godot's Git repository."
msgstr ""

#: ../../docs/community/contributing/pr_workflow.rst:27
msgid "Git source repository"
msgstr ""

#: ../../docs/community/contributing/pr_workflow.rst:29
msgid ""
"The `repository on GitHub <https://github.com/godotengine/godot>`_ is a `Git "
"<https://git-scm.com>`_ code repository together with an embedded issue "
"tracker and PR system."
msgstr ""

#: ../../docs/community/contributing/pr_workflow.rst:33
msgid ""
"If you are contributing to the documentation, its repository can be found "
"`here <https://github.com/godotengine/godot-docs>`_."
msgstr ""
"이 문서에 기여하고 싶다면, 문서의 저장소를 `여기서 <https://github.com/"
"godotengine/godot-docs>`_ 알아보실 수 있습니다."

#: ../../docs/community/contributing/pr_workflow.rst:36
msgid ""
"The Git version control system is the tool used to keep track of successive "
"edits to the source code - to contribute efficiently to Godot, learning the "
"basics of the Git command line is *highly* recommended. There exist some "
"graphical interfaces for Git, but they usually encourage users to take bad "
"habits regarding the Git and PR workflow, and we therefore recommend not to "
"use them. In particular, we advise not to use GitHub's online editor for "
"code contributions (although it's tolerated for small fixes or documentation "
"changes) as it enforces one commit per file and per modification, which "
"quickly leads to PRs with an unreadable Git history (especially after peer "
"review)."
msgstr ""

#: ../../docs/community/contributing/pr_workflow.rst:46
msgid ""
"The first sections of Git's \"Book\" are a good introduction to the tool's "
"philosophy and the various commands you need to master in your daily "
"workflow. You can read them online on the `Git SCM <https://git-scm.com/book/"
"en/v2>`_ website."
msgstr ""

#: ../../docs/community/contributing/pr_workflow.rst:51
msgid "The branches on the Git repository are organized as follows:"
msgstr ""

#: ../../docs/community/contributing/pr_workflow.rst:53
msgid ""
"The ``master`` branch is where the development of the next major version "
"occurs. As a development branch, it can be unstable and is not meant for use "
"in production. This is where PRs should be done in priority."
msgstr ""

#: ../../docs/community/contributing/pr_workflow.rst:57
msgid ""
"The stable branches are named after their version, e.g. ``3.1`` and ``2.1``. "
"They are used to backport bugfixes and enhancements from the ``master`` "
"branch to the currently maintained stable release (e.g. 3.1.2 or 2.1.6). As "
"a rule of thumb, the last stable branch is maintained until the next major "
"version (e.g. the ``3.0`` branch was maintained until the release of Godot "
"3.1). If you want to make PRs against a maintained stable branch, you will "
"have to check if your changes are also relevant for the ``master`` branch."
msgstr ""

#: ../../docs/community/contributing/pr_workflow.rst:65
msgid ""
"There might be feature branches at time, usually meant to be merged into the "
"``master`` branch at some time."
msgstr ""

#: ../../docs/community/contributing/pr_workflow.rst:69
msgid "Forking and cloning"
msgstr ""

#: ../../docs/community/contributing/pr_workflow.rst:71
msgid ""
"The first step is to *fork* the `godotengine/godot <https://github.com/"
"godotengine/godot>`_ repository on GitHub. To do so, you will need to have a "
"GitHub account and to be logged in. In the top right corner of the "
"repository's GitHub page, you should see the \"Fork\" button as shown below:"
msgstr ""

#: ../../docs/community/contributing/pr_workflow.rst:78
msgid ""
"Click it, and after a while you should be redirected to your own fork of the "
"Godot repo, with your GitHub username as namespace:"
msgstr ""

#: ../../docs/community/contributing/pr_workflow.rst:83
msgid ""
"You can then *clone* your fork, i.e. create a local copy of the online "
"repository (in Git speak, the *origin remote*). If you haven't already, "
"download Git from `its website <https://git-scm.com>`_ if you're using "
"Windows or macOS, or install it through your package manager if you're using "
"Linux."
msgstr ""

#: ../../docs/community/contributing/pr_workflow.rst:88
msgid ""
"If you are on Windows, open Git Bash to type commands. macOS and Linux users "
"can use their respective terminals."
msgstr ""

#: ../../docs/community/contributing/pr_workflow.rst:91
msgid "To clone your fork from GitHub, use the following command:"
msgstr ""

#: ../../docs/community/contributing/pr_workflow.rst:97
msgid ""
"In our examples, the \"$\" character denotes the command line prompt on "
"typical UNIX shells. It is not part of the command and should not be typed."
msgstr ""

#: ../../docs/community/contributing/pr_workflow.rst:101
msgid ""
"After a little while, you should have a ``godot`` directory in your current "
"working directory. Move into it using the ``cd`` command:"
msgstr ""

#: ../../docs/community/contributing/pr_workflow.rst:108
msgid ""
"We will start by setting up a reference to the original repository that we "
"forked:"
msgstr ""

#: ../../docs/community/contributing/pr_workflow.rst:115
msgid ""
"This will create a reference named ``upstream`` pointing to the original "
"godotengine/godot repository. This will be useful when you want to pull new "
"commits from its ``master`` branch to update your fork. You have another "
"``remote`` reference named ``origin``, which points to your fork."
msgstr ""

#: ../../docs/community/contributing/pr_workflow.rst:120
msgid ""
"You only need to do the above steps once, as long as you keep that local "
"``godot`` folder (which you can move around if you want, the relevant "
"metadata is hidden in its ``.git`` subfolder)."
msgstr ""

#: ../../docs/community/contributing/pr_workflow.rst:124
msgid ""
"*Branch it, pull it, code it, stage it, commit, push it, rebase it... "
"technologic.*"
msgstr ""

#: ../../docs/community/contributing/pr_workflow.rst:127
msgid ""
"This bad take on Daft Punk's *Technologic* shows the general conception Git "
"beginners have of its workflow: lots of strange commands to learn by copy "
"and paste, hoping they will work as expected. And that's actually not a bad "
"way to learn, as long as you're curious and don't hesitate to question your "
"search engine when lost, so we will give you the basic commands to know when "
"working in Git."
msgstr ""

#: ../../docs/community/contributing/pr_workflow.rst:135
msgid ""
"In the following, we will assume that you want to implement a feature in "
"Godot's project manager, which is coded in the ``editor/project_manager."
"cpp`` file."
msgstr ""

#: ../../docs/community/contributing/pr_workflow.rst:140
msgid "Branching"
msgstr ""

#: ../../docs/community/contributing/pr_workflow.rst:142
msgid ""
"By default, the ``git clone`` should have put you on the ``master`` branch "
"of your fork (``origin``). To start your own feature development, we will "
"create a feature branch:"
msgstr ""

#: ../../docs/community/contributing/pr_workflow.rst:154
msgid "This command is equivalent:"
msgstr ""

#: ../../docs/community/contributing/pr_workflow.rst:161
msgid "If you want to go back to the ``master`` branch, you'd use:"
msgstr ""

#: ../../docs/community/contributing/pr_workflow.rst:167
msgid ""
"You can see which branch you are currently on with the ``git branch`` "
"command:"
msgstr ""

#: ../../docs/community/contributing/pr_workflow.rst:178
msgid "Updating your branch"
msgstr ""

#: ../../docs/community/contributing/pr_workflow.rst:180
msgid ""
"This would not be needed the first time (just after you forked the upstream "
"repository). However, the next time you want to work on something, you will "
"notice that your fork's ``master`` is several commits behind the upstream "
"``master`` branch: pull requests from other contributors would have been "
"merged in the meantime."
msgstr ""

#: ../../docs/community/contributing/pr_workflow.rst:186
msgid ""
"To ensure there won't be conflicts between the feature you develop and the "
"current upstream ``master`` branch, you will have to update your branch by "
"*pulling* the upstream branch."
msgstr ""

#: ../../docs/community/contributing/pr_workflow.rst:194
msgid ""
"However, if you had local commits, this method will create a so-called "
"\"merge commit\", and you will soon hear from fellow contributors that those "
"are not wanted in PRs. To update the branch without creating a merge commit, "
"you will have to use the ``--rebase`` option, so that your local commits are "
"replayed on top of the updated upstream ``master`` branch. It will "
"effectively modify the Git history of your branch, but that is for the "
"greater good."
msgstr ""

#: ../../docs/community/contributing/pr_workflow.rst:201
msgid "Therefore, the command that you should (almost) always use is:"
msgstr ""

#: ../../docs/community/contributing/pr_workflow.rst:208
msgid ""
"If you have already pushed the merge commit without using ``rebase``, or "
"have made any other changes that have resulted in undesired history, you may "
"use a hard reset to revert to a specific commit and try again:"
msgstr ""

#: ../../docs/community/contributing/pr_workflow.rst:216
msgid ""
"Once you have done this, you may run ``--rebase`` to merge master correctly."
msgstr ""

#: ../../docs/community/contributing/pr_workflow.rst:218
msgid ""
"If you have already pushed the wrong commits to your remote branch, you will "
"have to force push by using ``git push --force``."
msgstr ""

#: ../../docs/community/contributing/pr_workflow.rst:221
msgid ""
"``git reset --hard`` can be a dangerous operation, especially if you have "
"untracked or uncommitted changes. However, if you have committed changes "
"that you reset using ``git reset --hard``, you may still be able to recover "
"them by resetting to a commit ID found with the ``git reflog`` command."
msgstr ""

#: ../../docs/community/contributing/pr_workflow.rst:228
msgid "Making changes"
msgstr ""

#: ../../docs/community/contributing/pr_workflow.rst:230
msgid ""
"You would then do your changes to our example's ``editor/project_manager."
"cpp`` file with your usual development environment (text editor, IDE, etc.)."
msgstr ""

#: ../../docs/community/contributing/pr_workflow.rst:234
msgid ""
"By default, those changes are *unstaged*. The staging area is a layer "
"between your working directory (where you make your modifications) and the "
"local git repository (the commits and all the metadata in the ``.git`` "
"folder). To bring changes from the working directory to the Git repository, "
"you need to *stage* them with the ``git add`` command, and then to commit "
"them with the ``git commit`` command."
msgstr ""

#: ../../docs/community/contributing/pr_workflow.rst:241
msgid ""
"There are various commands you should know to review your current work, "
"before staging it, while it is staged, and after it has been committed."
msgstr ""

#: ../../docs/community/contributing/pr_workflow.rst:244
msgid ""
"``git diff`` will show you the current unstaged changes, i.e. the "
"differences between your working directory and the staging area."
msgstr ""

#: ../../docs/community/contributing/pr_workflow.rst:246
msgid ""
"``git checkout -- <files>`` will undo the unstaged changes to the given "
"files."
msgstr ""

#: ../../docs/community/contributing/pr_workflow.rst:248
msgid "``git add <files>`` will *stage* the changes on the listed files."
msgstr ""

#: ../../docs/community/contributing/pr_workflow.rst:249
msgid ""
"``git diff --staged`` will show the current staged changes, i.e. the "
"differences between the staging area and the last commit."
msgstr ""

#: ../../docs/community/contributing/pr_workflow.rst:251
msgid "``git reset HEAD <files>`` will *unstage* changes to the listed files."
msgstr ""

#: ../../docs/community/contributing/pr_workflow.rst:252
msgid ""
"``git status`` will show you what are the currently staged and unstaged "
"modifications."
msgstr ""

#: ../../docs/community/contributing/pr_workflow.rst:254
msgid ""
"``git commit`` will commit the staged files. It will open a text editor (you "
"can define the one you want to use with the ``GIT_EDITOR`` environment "
"variable or the ``core.editor`` setting in your Git configuration) to let "
"you write a commit log. You can use ``git commit -m \"Cool commit log\"`` to "
"write the log directly."
msgstr ""

#: ../../docs/community/contributing/pr_workflow.rst:259
msgid ""
"``git log`` will show you the last commits of your current branch. If you "
"did local commits, they should be shown at the top."
msgstr ""

#: ../../docs/community/contributing/pr_workflow.rst:261
msgid ""
"``git show`` will show you the changes of the last commit. You can also "
"specify a commit hash to see the changes for that commit."
msgstr ""

#: ../../docs/community/contributing/pr_workflow.rst:264
msgid ""
"That's a lot to memorize! Don't worry, just check this cheat sheet when you "
"need to make changes, and learn by doing."
msgstr ""

#: ../../docs/community/contributing/pr_workflow.rst:267
msgid "Here's how the shell history could look like on our example:"
msgstr ""

#: ../../docs/community/contributing/pr_workflow.rst:299
msgid ""
"With this, we should have two new commits in our ``better-project-manager`` "
"branch which were not in the ``master`` branch. They are still only local "
"though, the remote fork does not know about them, nor does the upstream repo."
msgstr ""

#: ../../docs/community/contributing/pr_workflow.rst:304
msgid "Pushing changes to a remote"
msgstr ""

#: ../../docs/community/contributing/pr_workflow.rst:306
msgid ""
"That's where ``git push`` will come into play. In Git, a commit is always "
"done in the local repository (unlike Subversion where a commit will modify "
"the remote repository directly). You need to *push* the new commits to a "
"remote branch to share them with the world. The syntax for this is:"
msgstr ""

#: ../../docs/community/contributing/pr_workflow.rst:315
msgid ""
"The part about the remote branch can be omitted if you want it to have the "
"same name as the local branch, which is our case in this example, so we will "
"do:"
msgstr ""

#: ../../docs/community/contributing/pr_workflow.rst:323
msgid ""
"Git will ask you for your username and password, and the changes will be "
"sent to your remote. If you check the fork's page on GitHub, you should see "
"a new branch with your added commits."
msgstr ""

#: ../../docs/community/contributing/pr_workflow.rst:328
msgid "Issuing a pull request"
msgstr ""

#: ../../docs/community/contributing/pr_workflow.rst:330
msgid ""
"When you load your fork's branch on GitHub, you should see a line saying *"
"\"This branch is 2 commits ahead of godotengine:master.\"* (and potentially "
"some commits behind, if your ``master`` branch was out of sync with the "
"upstream ``master`` branch."
msgstr ""

#: ../../docs/community/contributing/pr_workflow.rst:337
msgid ""
"On that line, there is a \"Pull request\" link. Clicking it will open a form "
"that will let you issue a pull request on the godotengine/godot upstream "
"repository. It should show you your two commits, and state \"Able to merge"
"\". If not (e.g. it has way more commits, or says there are merge "
"conflicts), don't create the PR, something went wrong. Go to IRC and ask for "
"support :)"
msgstr ""

#: ../../docs/community/contributing/pr_workflow.rst:343
msgid ""
"Use an explicit title for the PR and put the necessary details in the "
"comment area. You can drag and drop screenshots, GIFs or zipped projects if "
"relevant, to showcase what your work implements. Click \"Create a pull "
"request\", and tadaa!"
msgstr ""

#: ../../docs/community/contributing/pr_workflow.rst:349
msgid "Modifying a pull request"
msgstr ""

#: ../../docs/community/contributing/pr_workflow.rst:351
msgid ""
"While it is reviewed by other contributors, you will often need to make "
"changes to your yet-unmerged PR, either because contributors requested them, "
"or because you found issues yourself while testing."
msgstr ""

#: ../../docs/community/contributing/pr_workflow.rst:355
msgid ""
"The good news is that you can modify a pull request simply by acting on the "
"branch you made the pull request from. You can e.g. make a new commit on "
"that branch, push it to your fork, and the PR will be updated automatically:"
msgstr ""

#: ../../docs/community/contributing/pr_workflow.rst:370
msgid "That should do the trick, but..."
msgstr ""

#: ../../docs/community/contributing/pr_workflow.rst:373
msgid "Mastering the PR workflow: the rebase"
msgstr ""

#: ../../docs/community/contributing/pr_workflow.rst:375
msgid ""
"On the situation outlined above, your fellow contributors who are "
"particularly pedantic regarding the Git history might ask your to *rebase* "
"your branch to *squash* or *meld* the last two commits together (i.e. the "
"two related to the project manager), as the second commit basically fixes an "
"issue in the first one."
msgstr ""

#: ../../docs/community/contributing/pr_workflow.rst:380
msgid ""
"Once the PR is merged, it is not relevant for a changelog reader that the PR "
"author made mistakes; instead, we want to keep only commits that bring from "
"one working state to another working state."
msgstr ""

#: ../../docs/community/contributing/pr_workflow.rst:384
msgid ""
"To squash those two commits together, we will have to *rewrite history*. "
"Right, we have that power. You may read that it's a bad practice, and it's "
"true when it comes to branches of the upstream repo. But in your fork, you "
"can do whatever you want, and everything is allowed to get neat PRs :)"
msgstr ""

#: ../../docs/community/contributing/pr_workflow.rst:389
msgid ""
"We will use the *interactive rebase* ``git rebase -i`` to do this. This "
"command takes a commit hash as argument, and will let you modify all commits "
"between that commit hash and the last one of the branch, the so-called "
"*HEAD*. In our example, we want to act on the last two commits, so we will "
"do:"
msgstr ""

#: ../../docs/community/contributing/pr_workflow.rst:400
msgid "This will open a text editor with:"
msgstr ""

#: ../../docs/community/contributing/pr_workflow.rst:407
msgid ""
"The editor will also show instructions regarding how you can act on those "
"commits. In particular, it should tell you that \"pick\" means to use that "
"commit (do nothing), and that \"squash\" and \"fixup\" can be used to *meld* "
"the commit in its parent commit. The difference between \"squash\" and "
"\"fixup\" is that \"fixup\" will discard the commit log from the squashed "
"commit. In our example, we are not interested in keeping the log of the "
"\"Fix a typo\" commit, so we use:"
msgstr ""

#: ../../docs/community/contributing/pr_workflow.rst:420
msgid ""
"Upon saving and quitting the editor, the rebase will occur. The second "
"commit will be melded into the first one, and ``git log`` and ``git show`` "
"should now confirm that you have only one commit with the changes from both "
"previous commits."
msgstr ""

#: ../../docs/community/contributing/pr_workflow.rst:425
msgid ""
"You could have avoided this rebase by using ``git commit --amend`` when "
"fixing the typo. This command will write the staged changes directly into "
"the *last* commit (``HEAD``), instead of creating a new commit like we did "
"in this example. So it is equivalent to what we did with a new commit and "
"then a rebase to mark it as \"fixup\"."
msgstr ""

#: ../../docs/community/contributing/pr_workflow.rst:431
msgid ""
"But! You rewrote the history, and now your local and remote branches have "
"diverged. Indeed, commit 1b4aad7 in the above example will have changed, and "
"therefore got a new commit hash. If you try to push to your remote branch, "
"it will raise an error:"
msgstr ""

#: ../../docs/community/contributing/pr_workflow.rst:445
msgid ""
"This is a sane behaviour, Git will not let you push changes that would "
"override remote content. But that's actually what we want to do here, so we "
"will have to *force* it:"
msgstr ""

#: ../../docs/community/contributing/pr_workflow.rst:453
msgid ""
"And tadaa! Git will happily *replace* your remote branch with what you had "
"locally (so make sure that's what you wanted, using ``git log``). This will "
"also update the PR accordingly."
msgstr ""

#: ../../docs/community/contributing/pr_workflow.rst:458
msgid "Deleting a Git branch"
msgstr ""

#: ../../docs/community/contributing/pr_workflow.rst:460
msgid ""
"After your pull request gets merged, there's one last thing you should do: "
"delete your Git branch for the PR. There won't be issues if you don't delete "
"your branch, but it's good practice to do so. You'll need to do this twice, "
"once for the local branch and another for the remote branch on GitHub."
msgstr ""

#: ../../docs/community/contributing/pr_workflow.rst:465
msgid "To delete our better project manager branch locally, use this command:"
msgstr ""

#: ../../docs/community/contributing/pr_workflow.rst:471
msgid ""
"Alternatively, if the branch hadn't been merged yet and we wanted to delete "
"it anyway, instead of ``-d`` you would use ``-D``."
msgstr ""

#: ../../docs/community/contributing/pr_workflow.rst:474
msgid "Next, to delete the remote branch on GitHub use this command:"
msgstr ""

#: ../../docs/community/contributing/code_style_guidelines.rst:4
msgid "Code style guidelines"
msgstr ""

#: ../../docs/community/contributing/code_style_guidelines.rst:8
msgid ""
"When contributing to Godot's source code, you will be expected to follow the "
"style guidelines outlined below. Some of them are checked via the Continuous "
"Integration process and reviewers will ask you to fix potential issues, so "
"best setup your system as outlined below to ensure all your commits follow "
"the guidelines."
msgstr ""

#: ../../docs/community/contributing/code_style_guidelines.rst:15
msgid "C++ and Objective-C"
msgstr ""

#: ../../docs/community/contributing/code_style_guidelines.rst:17
msgid ""
"There are no written guidelines, but the code style agreed upon by the "
"developers is enforced via the `clang-format <http://clang.llvm.org/docs/"
"ClangFormat.html>`__ code beautifier, which takes care for you of all our "
"conventions. To name a few:"
msgstr ""

#: ../../docs/community/contributing/code_style_guidelines.rst:22
msgid ""
"Indentation and alignment are both tab based (respectively one and two tabs)"
msgstr ""

#: ../../docs/community/contributing/code_style_guidelines.rst:23
msgid "One space around math and assignments operators as well as after commas"
msgstr ""

#: ../../docs/community/contributing/code_style_guidelines.rst:24
msgid ""
"Pointer and reference operators are affixed to the variable identifier, not "
"to the type name"
msgstr ""

#: ../../docs/community/contributing/code_style_guidelines.rst:26
msgid "See further down regarding header includes"
msgstr ""

#: ../../docs/community/contributing/code_style_guidelines.rst:28
msgid ""
"The rules used by clang-format are outlined in the `.clang-format <https://"
"github.com/godotengine/godot/blob/master/.clang-format>`__ file of the Godot "
"repository."
msgstr ""

#: ../../docs/community/contributing/code_style_guidelines.rst:32
msgid ""
"As long as you ensure that your style matches the surrounding code and that "
"you not introducing trailing whitespace or space-based indentation, you "
"should be fine. If you plan to contribute regularly however, we strongly "
"advise that you setup clang-format locally to check and automatically fix "
"all your commits."
msgstr ""

#: ../../docs/community/contributing/code_style_guidelines.rst:37
msgid ""
"Godot's code style should *not* be applied to thirdparty code, i.e. that is "
"included in Godot's source tree but was not written specifically for our "
"project. Such code usually come from different upstream projects with their "
"own style guides (or lack thereof), and don't want to introduce differences "
"that would make syncing with upstream repositories harder."
msgstr ""

#: ../../docs/community/contributing/code_style_guidelines.rst:44
msgid ""
"Thirdparty code is usually included in the ``thirdparty/`` folder and can "
"thus easily be excluded from formatting scripts. For the rare cases where a "
"thirdparty code snippet needs to be included directly within a Godot file, "
"you can use ``/* clang-format off */`` and ``/* clang-format on */`` to tell "
"clang-format to ignore a chunk of code."
msgstr ""

#: ../../docs/community/contributing/code_style_guidelines.rst:52
msgid "Using clang-format locally"
msgstr ""

#: ../../docs/community/contributing/code_style_guidelines.rst:54
msgid ""
"First of all, you will need to install clang-format. As of now, you need to "
"use **clang-format 8.x** to be compatible with Godot's format. Later "
"versions might be suitable, but previous versions had bugs that will cause "
"formatting changes to the current code base."
msgstr ""

#: ../../docs/community/contributing/code_style_guidelines.rst:60
msgid "Installation"
msgstr ""

#: ../../docs/community/contributing/code_style_guidelines.rst:62
msgid "Here's how to install clang-format:"
msgstr ""

#: ../../docs/community/contributing/code_style_guidelines.rst:64
msgid ""
"Linux: It will usually be available out-of-the-box with the clang toolchain "
"packaged by your distribution. If your distro version is not the required "
"one, you can download a pre-compiled version from the `LLVM website <http://"
"releases.llvm.org/download.html>`__, or if you are on a Debian derivative, "
"use the `upstream repos <http://apt.llvm.org/>`__."
msgstr ""

#: ../../docs/community/contributing/code_style_guidelines.rst:69
msgid ""
"macOS and Windows: You can download precompiled binaries from the `LLVM "
"website <http://releases.llvm.org/download.html>`__. You may need to add the "
"path to the binary's folder to your system's ``PATH`` environment variable "
"to be able to call ``clang-format`` out of the box."
msgstr ""

#: ../../docs/community/contributing/code_style_guidelines.rst:74
msgid ""
"You then have different possibilities to apply clang-format to your changes:"
msgstr ""

#: ../../docs/community/contributing/code_style_guidelines.rst:77
msgid "Manual usage"
msgstr ""

#: ../../docs/community/contributing/code_style_guidelines.rst:79
msgid ""
"You can apply clang-format manually one or more files with the following "
"command:"
msgstr ""

#: ../../docs/community/contributing/code_style_guidelines.rst:86
msgid ""
"``-i`` means that the changes should be written directly to the file (by "
"default clang-format would only output the fixed version to the terminal)."
msgstr ""

#: ../../docs/community/contributing/code_style_guidelines.rst:88
msgid ""
"The path can point to several files, either one after the other or using "
"wildcards like in a typical Unix shell. Be careful when globbing so that you "
"don't run clang-format on compiled objects (.o and .a files) that are in "
"Godot's tree. So better use ``core/*.{cpp,h}`` than ``core/*``."
msgstr ""

#: ../../docs/community/contributing/code_style_guidelines.rst:94
msgid "Pre-commit hook"
msgstr ""

#: ../../docs/community/contributing/code_style_guidelines.rst:96
msgid ""
"For ease of use, we provide a pre-commit hook for Git that will run clang-"
"format automatically on all your commits to check them, and let you apply "
"its changes in the final commit."
msgstr ""

#: ../../docs/community/contributing/code_style_guidelines.rst:100
msgid ""
"This \"hook\" is a script which can be found in ``misc/hooks``, refer to "
"that folder's README.md for installation instructions."
msgstr ""

#: ../../docs/community/contributing/code_style_guidelines.rst:103
msgid ""
"If your clang-format is not in the ``PATH``, you may have to edit the ``pre-"
"commit-clang-format`` to point to the correct binary for it to work. The "
"hook was tested on Linux and macOS, but should also work in the Git Shell on "
"Windows."
msgstr ""

#: ../../docs/community/contributing/code_style_guidelines.rst:109
msgid "IDE plugin"
msgstr ""

#: ../../docs/community/contributing/code_style_guidelines.rst:111
msgid ""
"Most IDEs or code editors have beautifier plugins that can be configured to "
"run clang-format automatically, for example each time you save a file."
msgstr ""

#: ../../docs/community/contributing/code_style_guidelines.rst:114
msgid "Here is a non-exhaustive list of beautifier plugins for some IDEs:"
msgstr ""

#: ../../docs/community/contributing/code_style_guidelines.rst:116
msgid ""
"Qt Creator: `Beautifier plugin <http://doc.qt.io/qtcreator/creator-"
"beautifier.html>`__"
msgstr ""

#: ../../docs/community/contributing/code_style_guidelines.rst:117
msgid ""
"Visual Studio Code: `Clang-Format <https://marketplace.visualstudio.com/"
"items?itemName=xaver.clang-format>`__"
msgstr ""

#: ../../docs/community/contributing/code_style_guidelines.rst:118
msgid ""
"Visual Studio: `ClangFormat <https://marketplace.visualstudio.com/items?"
"itemName=LLVMExtensions.ClangFormat>`__"
msgstr ""

#: ../../docs/community/contributing/code_style_guidelines.rst:119
msgid "vim: `vim-clang-format <https://github.com/rhysd/vim-clang-format>`__"
msgstr ""

#: ../../docs/community/contributing/code_style_guidelines.rst:121
msgid "(Pull requests welcome to extend this list with tested plugins.)"
msgstr ""

#: ../../docs/community/contributing/code_style_guidelines.rst:124
msgid "Header includes"
msgstr ""

#: ../../docs/community/contributing/code_style_guidelines.rst:126
msgid ""
"When adding new C++ or Objective-C files or including new headers in "
"existing ones, the following rules should be followed:"
msgstr ""

#: ../../docs/community/contributing/code_style_guidelines.rst:129
msgid ""
"The first lines in the file should be Godot's copyright header and MIT "
"license, copy-pasted from another file. Make sure to adjust the filename."
msgstr ""

#: ../../docs/community/contributing/code_style_guidelines.rst:131
msgid ""
"In a ``.h`` header, include guards should be used with the form "
"``FILENAME_H``."
msgstr ""

#: ../../docs/community/contributing/code_style_guidelines.rst:134
msgid ""
"In a ``.cpp`` file (e.g. ``filename.cpp``), the first include should be the "
"one where the class is declared (e.g. ``#include \"filename.h\"``), followed "
"by an empty line for separation."
msgstr ""

#: ../../docs/community/contributing/code_style_guidelines.rst:137
msgid ""
"Then come headers from Godot's own code base, included in alphabetical order "
"(enforced by ``clang-format``) with paths relative to the root folder. Those "
"includes should be done with quotes, e.g. ``#include \"core/object.h\"``. "
"The block of Godot header includes should then be followed by an empty line "
"for separation."
msgstr ""

#: ../../docs/community/contributing/code_style_guidelines.rst:142
msgid ""
"Finally, thirdparty headers (either from ``thirdparty`` or from the system's "
"include paths) come next and should be included with the < and > symbols, e."
"g. ``#include <png.h>``. The block of thirdparty headers should also be "
"followed by an empty line for separation."
msgstr ""

#: ../../docs/community/contributing/code_style_guidelines.rst:146
msgid ""
"Godot and thirdparty headers should be included in the file that requires "
"them, i.e. in the `.h` header if used in the declarative code or in the `."
"cpp` if used only in the imperative code."
msgstr ""

#: ../../docs/community/contributing/code_style_guidelines.rst:238
msgid "Java"
msgstr ""

#: ../../docs/community/contributing/code_style_guidelines.rst:240
msgid ""
"Godot's Java code (mostly in ``platform/android``) is also enforced via "
"``clang-format``, so see the instructions above to set it up. Keep in mind "
"that this style guide only applies to code written and maintained by Godot, "
"not thirdparty code such as the ``java/src/com/google`` subfolder."
msgstr ""

#: ../../docs/community/contributing/code_style_guidelines.rst:246
msgid "Python"
msgstr ""

#: ../../docs/community/contributing/code_style_guidelines.rst:248
msgid ""
"Godot's SCons buildsystem is written in Python, and various scripts included "
"in the source tree are also using Python."
msgstr ""

#: ../../docs/community/contributing/code_style_guidelines.rst:251
msgid ""
"For those, we follow the `PEP-8 style guide <https://www.python.org/dev/peps/"
"pep-0008/>`__, this is however not as strongly enforced as for the C++ code. "
"If you are so inclined, you can check and format your Python changes using "
"`autopep8 <https://pypi.org/project/autopep8/>`__."
msgstr ""

#: ../../docs/community/contributing/bug_triage_guidelines.rst:4
msgid "Bug triage guidelines"
msgstr ""

#: ../../docs/community/contributing/bug_triage_guidelines.rst:6
msgid ""
"This page describes the typical workflow of the bug triage team aka bugsquad "
"when handling issues and pull requests on Godot's `GitHub <https://github."
"com/godotengine/godot>`_ repository. It is bound to evolve together with the "
"bugsquad, so do not hesitate to propose modifications to the following "
"guidelines."
msgstr ""

#: ../../docs/community/contributing/bug_triage_guidelines.rst:12
msgid "Issues management"
msgstr ""

#: ../../docs/community/contributing/bug_triage_guidelines.rst:14
msgid "GitHub proposes various features to manage issues:"
msgstr ""

#: ../../docs/community/contributing/bug_triage_guidelines.rst:16
msgid "Set one or several labels from a predefined list"
msgstr ""

#: ../../docs/community/contributing/bug_triage_guidelines.rst:17
msgid "Set one milestone from a predefined list"
msgstr ""

#: ../../docs/community/contributing/bug_triage_guidelines.rst:18
msgid "Keep track of the issue in the project dashboard"
msgstr ""

#: ../../docs/community/contributing/bug_triage_guidelines.rst:19
msgid ""
"Define one contributor as \"assignee\" among the Godot engine organization "
"members"
msgstr ""

#: ../../docs/community/contributing/bug_triage_guidelines.rst:22
msgid ""
"As the Godot engine organization on GitHub currently has a restricted number "
"of contributors, we do not use assignees extensively for now. All "
"contributors are welcome to take on any issue, if relevant after mentioning "
"it on the issue ticket and/or discussing the best way to resolve it with "
"other developers."
msgstr ""

#: ../../docs/community/contributing/bug_triage_guidelines.rst:28
msgid "For the time being we do not use the project dashboard feature either."
msgstr ""

#: ../../docs/community/contributing/bug_triage_guidelines.rst:30
msgid ""
"As far as possible, we try to assign labels (and milestones, when relevant) "
"to both issues and pull requests."
msgstr ""

#: ../../docs/community/contributing/bug_triage_guidelines.rst:34
msgid "Labels"
msgstr ""

#: ../../docs/community/contributing/bug_triage_guidelines.rst:36
msgid "The following labels are currently defined in the Godot repository:"
msgstr ""

#: ../../docs/community/contributing/bug_triage_guidelines.rst:38
msgid "**Categories:**"
msgstr ""

#: ../../docs/community/contributing/bug_triage_guidelines.rst:40
msgid ""
"*Archived*: either a duplicate of another issue, or invalid. Such an issue "
"would also be closed."
msgstr ""

#: ../../docs/community/contributing/bug_triage_guidelines.rst:42
msgid "*Bug*: describes something that is not working properly."
msgstr ""

#: ../../docs/community/contributing/bug_triage_guidelines.rst:43
msgid ""
"*Confirmed*: has been confirmed by at least one other contributor than the "
"bug reporter (typically for *Bug* reports). The purpose of this label is to "
"let developers know which issues are still reproducible when they want to "
"select what to work on. It is therefore a good practice to add in a comment "
"on what platform and what version or commit of Godot the issue could be "
"reproduced; if a developer looks at the issue one year later, the "
"*Confirmed* label may not be relevant anymore."
msgstr ""

#: ../../docs/community/contributing/bug_triage_guidelines.rst:51
msgid ""
"*Discussion*: the issue is not consensual and needs further discussion to "
"define what exactly should be done to address the topic."
msgstr ""

#: ../../docs/community/contributing/bug_triage_guidelines.rst:54
msgid ""
"*Documentation*: issue related to the documentation. Mainly to request "
"enhancements in the API documentation. Issues related to the ReadTheDocs "
"documentation should be filed on the `godot-docs <https://github.com/"
"godotengine/godot-docs>`_ repository."
msgstr ""

#: ../../docs/community/contributing/bug_triage_guidelines.rst:58
msgid ""
"*Enhancement*: describes a proposed enhancement to an existing functionality."
msgstr ""

#: ../../docs/community/contributing/bug_triage_guidelines.rst:60
msgid ""
"*Feature proposal*: describes a wish for a new feature to be implemented."
msgstr ""

#: ../../docs/community/contributing/bug_triage_guidelines.rst:62
msgid ""
"*Junior job*: the issue is *assumed* to be an easy one to fix, which makes "
"it a great fit for junior contributors who need to become familiar with the "
"code base."
msgstr ""

#: ../../docs/community/contributing/bug_triage_guidelines.rst:65
msgid "*Needs rebase*: the issue need a git rebase to be merged."
msgstr ""

#: ../../docs/community/contributing/bug_triage_guidelines.rst:66
msgid ""
"*Needs testing*: the issue/pull request could not be completely tested and "
"thus need further testing. This can mean that it needs to be tested on "
"different hardware/software configurations or even that the steps to "
"reproduce are not certain."
msgstr ""

#: ../../docs/community/contributing/bug_triage_guidelines.rst:70
msgid ""
"*PR welcome / hero wanted!*: Contributions for issues with these labels are "
"especially welcome. Note that this **doesn't** mean you can't work on issues "
"without these labels."
msgstr ""

#: ../../docs/community/contributing/bug_triage_guidelines.rst:73
msgid ""
"*Tracker*: issue used to track other issues (like all issues related to the "
"plugin system)."
msgstr ""

#: ../../docs/community/contributing/bug_triage_guidelines.rst:75
msgid "*Usability*: issues that directly impact user usability."
msgstr ""

#: ../../docs/community/contributing/bug_triage_guidelines.rst:77
msgid ""
"The categories are used for general triage of the issues. They can be "
"combined in some way when relevant, e.g. an issue can be labelled "
"*Enhancement* and *Usability* at the same time if it's an issue to improve "
"usability. Or *Feature proposal* and *Discussion* if it's a non-consensual "
"feature request, or one that is not precise enough to be worked on."
msgstr ""

#: ../../docs/community/contributing/bug_triage_guidelines.rst:83
msgid "**Topics:**"
msgstr ""

#: ../../docs/community/contributing/bug_triage_guidelines.rst:85
msgid "*Assetlib*: relates to issues with the asset library."
msgstr ""

#: ../../docs/community/contributing/bug_triage_guidelines.rst:86
msgid "*Audio*: relates to the audio features (low and high level)."
msgstr ""

#: ../../docs/community/contributing/bug_triage_guidelines.rst:87
msgid ""
"*Buildsystem*: relates to building issues, either linked to the SCons "
"buildsystem or to compiler peculiarities."
msgstr ""

#: ../../docs/community/contributing/bug_triage_guidelines.rst:89
msgid ""
"*Core*: anything related to the core engine. It might be further split later "
"on as it's a pretty big topic."
msgstr ""

#: ../../docs/community/contributing/bug_triage_guidelines.rst:91
msgid "*Drivers*: relates to issues with the drivers used by the engine."
msgstr ""

#: ../../docs/community/contributing/bug_triage_guidelines.rst:92
msgid "*Editor*: relates to issues in the editor (mainly UI)."
msgstr ""

#: ../../docs/community/contributing/bug_triage_guidelines.rst:93
msgid "*GDNative*: relates to the GDNative module."
msgstr ""

#: ../../docs/community/contributing/bug_triage_guidelines.rst:94
msgid "*GDScript*: relates to GDScript."
msgstr ""

#: ../../docs/community/contributing/bug_triage_guidelines.rst:95
msgid "*Mono*: relates to the C# / Mono bindings."
msgstr ""

#: ../../docs/community/contributing/bug_triage_guidelines.rst:96
msgid "*Network*: relates to networking."
msgstr ""

#: ../../docs/community/contributing/bug_triage_guidelines.rst:97
msgid "*Physics*: relates to the physics engine (2D/3D)."
msgstr ""

#: ../../docs/community/contributing/bug_triage_guidelines.rst:98
msgid "*Plugin*: relates to problems encountered while writing plugins."
msgstr ""

#: ../../docs/community/contributing/bug_triage_guidelines.rst:99
msgid "*Porting*: relates to some specific platforms."
msgstr ""

#: ../../docs/community/contributing/bug_triage_guidelines.rst:100
msgid "*Rendering*: relates to the 2D and 3D rendering engines."
msgstr ""

#: ../../docs/community/contributing/bug_triage_guidelines.rst:101
msgid "*VisualScript*: relates to issues with the visual scripting language."
msgstr ""

#: ../../docs/community/contributing/bug_triage_guidelines.rst:103
msgid ""
"Issues would typically correspond to only one topic, though it's not "
"unthinkable to see issues that fit two bills. The general idea is that there "
"will be specialized contributors teams behind all topics, so they can focus "
"on the issues labelled with their team's topic."
msgstr ""

#: ../../docs/community/contributing/bug_triage_guidelines.rst:108
msgid "**Platforms:**"
msgstr ""

#: ../../docs/community/contributing/bug_triage_guidelines.rst:110
msgid "*Android*, *HTML5*, *iOS*, *Linux*, *macOS*, *Windows*, *UWP*"
msgstr ""

#: ../../docs/community/contributing/bug_triage_guidelines.rst:112
msgid ""
"By default, it is assumed that a given issue applies to all platforms. If "
"one of the platform labels is used, it is then exclusive and the previous "
"assumption doesn't stand anymore (so if it's a bug on e.g. Android and Linux "
"exclusively, select those two platforms)."
msgstr ""

#: ../../docs/community/contributing/bug_triage_guidelines.rst:118
msgid "Milestones"
msgstr ""

#: ../../docs/community/contributing/bug_triage_guidelines.rst:120
msgid ""
"`Milestones <https://github.com/godotengine/godot/milestones>`_ correspond "
"to planned future versions of Godot for which there is an existing roadmap. "
"Issues that fit in the said roadmap should be filed under the corresponding "
"milestone; if they don't correspond to any current roadmap, they should be "
"left without milestone. As a rule of thumb, an issue corresponds to a given "
"milestone if it concerns a feature that is new in the milestone, or a "
"critical bug that can't be accepted in any future stable release, or "
"anything that Juan wants to work on right now :)"
msgstr ""

#: ../../docs/community/contributing/bug_triage_guidelines.rst:129
msgid ""
"Contributors are free to pick issues regardless of their assigned milestone; "
"if a fix is proposed for a bug that was not deemed urgent and thus without "
"milestone, it would likely still be very welcome."
msgstr ""

#: ../../docs/community/contributing/documentation_guidelines.rst:4
msgid "Documentation guidelines"
msgstr ""

#: ../../docs/community/contributing/documentation_guidelines.rst:6
msgid ""
"This page describes the rules to follow if you want to contribute to Godot "
"Engine by writing or reviewing documentation, or by translating existing "
"documentation. Also have a look at README of the `godot-docs GitHub "
"repository <https://github.com/godotengine/godot-docs>`_ and the `docs front "
"page <https://docs.godotengine.org>`_ on what steps to follow and how to "
"contact the docs team."
msgstr ""

#: ../../docs/community/contributing/documentation_guidelines.rst:14
#: ../../docs/community/contributing/updating_the_class_reference.rst:19
msgid "How to contribute"
msgstr ""

#: ../../docs/community/contributing/documentation_guidelines.rst:16
msgid ""
"Creating or modifying documentation pages is mainly done via the `godot-docs "
"GitHub repository <https://github.com/godotengine/godot-docs>`_. The HTML "
"(or PDF and EPUB) documentation is generated from the .rst files "
"(reStructuredText markup language) in that repository. Modifying those pages "
"in a pull request and getting it merged will trigger a rebuild of the online "
"documentation."
msgstr ""

#: ../../docs/community/contributing/documentation_guidelines.rst:23
msgid ""
"For details on Git usage and the pull request workflow, please refer to the :"
"ref:`doc_pr_workflow` page. Most of what it describes regarding the main "
"godotengine/godot repository is also valid for the docs repository."
msgstr ""

#: ../../docs/community/contributing/documentation_guidelines.rst:28
msgid ""
"The README.md file contains all the information you need to get you started, "
"please read it. In particular, it contains some tips and tricks and links to "
"reference documentation about the reStructuredText markup language."
msgstr ""

#: ../../docs/community/contributing/documentation_guidelines.rst:32
msgid ""
"If you want to edit the **API reference**, please note that it should *not* "
"be done in the godot-docs repository. Instead, you should edit the ``doc/"
"classes/*`` XML files of Godot's main repository. These files are then later "
"used to generate the in-editor documentation as well as the API reference of "
"the online docs. Read more here: :ref:`doc_updating_the_class_reference`."
msgstr ""

#: ../../docs/community/contributing/documentation_guidelines.rst:40
msgid "The 'Edit on GitHub' link"
msgstr ""

#: ../../docs/community/contributing/documentation_guidelines.rst:42
msgid ""
"If you're reading documentation on ``docs.godotengine.org``, you'll see an "
"**Edit on GitHub** hyperlink at the top right of the page. Once you've "
"created a GitHub account, you can propose changes to a page you're reading "
"as follows:"
msgstr ""

#: ../../docs/community/contributing/documentation_guidelines.rst:46
msgid "Click the **Edit on GitHub** button."
msgstr ""

#: ../../docs/community/contributing/documentation_guidelines.rst:48
msgid ""
"On the GitHub page you're taken to, click the pencil icon in the top-right "
"corner near the **Raw**, **Blame** and **History** buttons. It has the "
"tooltip \"Edit the file in a fork of this project\"."
msgstr ""

#: ../../docs/community/contributing/documentation_guidelines.rst:52
msgid "Complete all the edits you want to make for that page."
msgstr ""

#: ../../docs/community/contributing/documentation_guidelines.rst:54
msgid ""
"Summarise the changes you made in the form at the bottom of the page and "
"click the button labelled **Propose file change** when done."
msgstr ""

#: ../../docs/community/contributing/documentation_guidelines.rst:57
msgid ""
"On the following screens, click the **Create pull request** button until you "
"see a message like ``Open. yourGitHubUsername wants to merge 1 commit into "
"godotengine:master from yourGitHubUsername:patch-6``."
msgstr ""

#: ../../docs/community/contributing/documentation_guidelines.rst:61
msgid ""
"A reviewer will evaluate your changes and incorporate them into the docs if "
"they're judged to improve them. You might also be asked to make "
"modifications to your changes before they're included."
msgstr ""

#: ../../docs/community/contributing/documentation_guidelines.rst:66
msgid "What makes good documentation?"
msgstr ""

#: ../../docs/community/contributing/documentation_guidelines.rst:68
msgid ""
"Documentation should be well written in plain English, using well-formed "
"sentences and various levels of sections and subsections. It should be clear "
"and objective. Also have a look at the :ref:`doc_docs_writing_guidelines`."
msgstr ""

#: ../../docs/community/contributing/documentation_guidelines.rst:72
msgid ""
"We differentiate tutorial pages from other documentation pages by these "
"definitions:"
msgstr ""

#: ../../docs/community/contributing/documentation_guidelines.rst:75
msgid ""
"Tutorial: a page aiming at explaining how to use one or more concepts in the "
"editor or scripts in order to achieve a specific goal with a learning "
"purpose (e.g. \"Making a simple 2d Pong game\", \"Applying forces to an "
"object\")."
msgstr ""

#: ../../docs/community/contributing/documentation_guidelines.rst:79
msgid ""
"Documentation: a page describing precisely one and only one concept at a "
"time, if possible exhaustively (e.g. the list of methods of the Sprite "
"class, or an overview of the input management in Godot)."
msgstr ""

#: ../../docs/community/contributing/documentation_guidelines.rst:83
msgid ""
"You are free to write the kind of documentation you wish, as long as you "
"respect the following rules (and the ones on the repo)."
msgstr ""

#: ../../docs/community/contributing/documentation_guidelines.rst:87
msgid "Titles"
msgstr ""

#: ../../docs/community/contributing/documentation_guidelines.rst:89
msgid "Always begin pages with their title and a Sphinx reference name:"
msgstr ""

#: ../../docs/community/contributing/documentation_guidelines.rst:98
msgid ""
"The reference allows to link to this page using the ``:ref:`` format, e.g. "
"``:ref:`doc_insert_your_title_here``` would link to the above example page "
"(note the lack of leading underscore in the reference)."
msgstr ""

#: ../../docs/community/contributing/documentation_guidelines.rst:102
msgid ""
"Also, avoid American CamelCase titles: title's first word should begin with "
"a capitalized letter, and every following word should not. Thus, this is a "
"good example:"
msgstr ""

#: ../../docs/community/contributing/documentation_guidelines.rst:106
msgid "Insert your title here"
msgstr ""

#: ../../docs/community/contributing/documentation_guidelines.rst:108
msgid "And this is a bad example:"
msgstr ""

#: ../../docs/community/contributing/documentation_guidelines.rst:110
msgid "Insert Your Title Here"
msgstr ""

#: ../../docs/community/contributing/documentation_guidelines.rst:112
msgid ""
"Only project, people and node class names should have capitalized first "
"letter."
msgstr ""

#: ../../docs/community/contributing/documentation_guidelines.rst:116
msgid "Translating existing pages"
msgstr ""

#: ../../docs/community/contributing/documentation_guidelines.rst:118
msgid ""
"You can help to translate the official Godot documentation on our `Hosted "
"Weblate <https://hosted.weblate.org/engage/godot-engine/>`_."
msgstr ""

#: ../../docs/community/contributing/documentation_guidelines.rst:125
msgid ""
"There also is the official `Godot I18N repository <https://github.com/"
"godotengine/godot-docs-l10n>`_. where you can see when the data was last "
"synced."
msgstr ""

#: ../../docs/community/contributing/documentation_guidelines.rst:130
msgid ""
"This documentation and every page it contains is published under the terms "
"of the `Creative Commons Attribution 3.0 license (CC-BY-3.0) <https://"
"tldrlegal.com/license/creative-commons-attribution-(cc)>`_, with attribution "
"to \"Juan Linietsky, Ariel Manzur and the Godot community\"."
msgstr ""
"이 문서의 모든 내용은 `크리에이티브 커먼스 저작자 표시 3.0 라이선스 (`CC-BY "
"3.0 <https://creativecommons.org/licenses/by/3.0/>`_로 사용할 수 있고, 저작"
"자 표시는 \"Juan Linietsky, Ariel Manzur, Godot Engine 커뮤니티\"로 하면 됩니"
"다."

#: ../../docs/community/contributing/documentation_guidelines.rst:133
msgid ""
"By contributing to the documentation on the GitHub repository, you agree "
"that your changes are distributed under this license."
msgstr ""

#: ../../docs/community/contributing/docs_writing_guidelines.rst:4
msgid "Docs writing guidelines"
msgstr ""

#: ../../docs/community/contributing/docs_writing_guidelines.rst:6
msgid ""
"The Godot community is rich and international. Users come from all around "
"the world. Some of them are young, and many aren't native English speakers. "
"That's why we must all write using a clear and a common language. For the "
"class reference, the goal is to make it easy to read for everyone and "
"precise."
msgstr ""

#: ../../docs/community/contributing/docs_writing_guidelines.rst:12
msgid "In summary, always try to:"
msgstr ""

#: ../../docs/community/contributing/docs_writing_guidelines.rst:14
#: ../../docs/community/contributing/docs_writing_guidelines.rst:39
msgid "Use the direct voice"
msgstr ""

#: ../../docs/community/contributing/docs_writing_guidelines.rst:15
#: ../../docs/community/contributing/docs_writing_guidelines.rst:74
msgid "Use precise action verbs"
msgstr ""

#: ../../docs/community/contributing/docs_writing_guidelines.rst:16
#: ../../docs/community/contributing/docs_writing_guidelines.rst:96
msgid "Avoid verbs that end in -ing"
msgstr ""

#: ../../docs/community/contributing/docs_writing_guidelines.rst:17
msgid "Remove unnecessary adverbs and adjectives."
msgstr ""

#: ../../docs/community/contributing/docs_writing_guidelines.rst:18
msgid ""
"Ban these 8 words: obvious, simple, basic, easy, actual, just, clear, and "
"however"
msgstr ""

#: ../../docs/community/contributing/docs_writing_guidelines.rst:19
#: ../../docs/community/contributing/docs_writing_guidelines.rst:210
msgid "Use explicit references"
msgstr ""

#: ../../docs/community/contributing/docs_writing_guidelines.rst:20
#: ../../docs/community/contributing/docs_writing_guidelines.rst:231
msgid "Use 's to show possession"
msgstr ""

#: ../../docs/community/contributing/docs_writing_guidelines.rst:21
msgid "Use the Oxford comma"
msgstr ""

#: ../../docs/community/contributing/docs_writing_guidelines.rst:23
msgid "There are 3 rules to describe classes:"
msgstr ""

#: ../../docs/community/contributing/docs_writing_guidelines.rst:25
#: ../../docs/community/contributing/docs_writing_guidelines.rst:368
msgid "Give an overview of the node in the brief description"
msgstr ""

#: ../../docs/community/contributing/docs_writing_guidelines.rst:26
#: ../../docs/community/contributing/docs_writing_guidelines.rst:397
msgid "Mention what methods return if it's useful"
msgstr ""

#: ../../docs/community/contributing/docs_writing_guidelines.rst:27
#: ../../docs/community/contributing/docs_writing_guidelines.rst:422
msgid "Use \"if true\" to describe booleans"
msgstr ""

#: ../../docs/community/contributing/docs_writing_guidelines.rst:31
msgid ""
"A technical writer's job is to pack as much information as possible into the "
"smallest and clearest sentences possible. These guidelines will help you "
"work towards that goal."
msgstr ""

#: ../../docs/community/contributing/docs_writing_guidelines.rst:36
msgid "7 rules for clear English"
msgstr ""

#: ../../docs/community/contributing/docs_writing_guidelines.rst:41
msgid ""
"Use the direct voice when possible. Take the classes, methods, and constants "
"you describe as the subject. It's natural to write using the passive voice, "
"but it's harder to read and produces longer sentences."
msgstr ""

#: ../../docs/community/contributing/docs_writing_guidelines.rst:47
msgid "Passive:"
msgstr ""

#: ../../docs/community/contributing/docs_writing_guidelines.rst:53
msgid "Active:"
msgstr ""

#: ../../docs/community/contributing/docs_writing_guidelines.rst:59
#: ../../docs/community/contributing/docs_writing_guidelines.rst:403
msgid "**Don't** use the passive voice:"
msgstr ""

#: ../../docs/community/contributing/docs_writing_guidelines.rst:66
msgid "**Do** use the node's name as a noun:"
msgstr ""

#: ../../docs/community/contributing/docs_writing_guidelines.rst:76
msgid ""
"Favor precise yet common verbs over generic ones like ``make``, ``set``, and "
"any expression you can replace with a single word."
msgstr ""

#: ../../docs/community/contributing/docs_writing_guidelines.rst:79
msgid ""
"**Don't** repeat the method's name. It already states it sets the pivot "
"value to a new one:"
msgstr ""

#: ../../docs/community/contributing/docs_writing_guidelines.rst:87
msgid ""
"**Do** explain what's the consequence of this \"set\": use precise verbs "
"like ``place``, ``position``, ``rotate``, ``fade``, etc."
msgstr ""

#: ../../docs/community/contributing/docs_writing_guidelines.rst:98
msgid ""
"The progressive forms describe continuous actions. E.g. \"is calling\", \"is "
"moving\"."
msgstr ""

#: ../../docs/community/contributing/docs_writing_guidelines.rst:101
msgid "**Don't** use the progressive form for instant changes."
msgstr ""

#: ../../docs/community/contributing/docs_writing_guidelines.rst:108
msgid "**Do** use simple present, preterit or future."
msgstr ""

#: ../../docs/community/contributing/docs_writing_guidelines.rst:115
msgid ""
"You may use the progressive tense to describe actions that are continuous in "
"time. Anything like animation or coroutines."
msgstr ""

#: ../../docs/community/contributing/docs_writing_guidelines.rst:120
msgid ""
"Verbs can turn into adjectival nouns with -ing. This is not a conjugation, "
"so you may use them: ``the remaining movement``, ``the missing file``, etc."
msgstr ""

#: ../../docs/community/contributing/docs_writing_guidelines.rst:125
msgid "Remove unnecessary adverbs and adjectives"
msgstr ""

#: ../../docs/community/contributing/docs_writing_guidelines.rst:127
msgid ""
"Write as few adjectives and adverbs as possible. Only use them if they add "
"key information to the description."
msgstr ""

#: ../../docs/community/contributing/docs_writing_guidelines.rst:130
msgid ""
"**Don't** use redundant or meaningless adverbs. Words that lengthen the "
"documentation but don't add any information:"
msgstr ""

#: ../../docs/community/contributing/docs_writing_guidelines.rst:137
msgid "**Do** write short sentences in a simple, descriptive language:"
msgstr ""

#: ../../docs/community/contributing/docs_writing_guidelines.rst:144
msgid "Ban these 8 words"
msgstr ""

#: ../../docs/community/contributing/docs_writing_guidelines.rst:146
msgid "**Don't** ever use these 8 banned words:"
msgstr ""

#: ../../docs/community/contributing/docs_writing_guidelines.rst:148
msgid "obvious"
msgstr ""

#: ../../docs/community/contributing/docs_writing_guidelines.rst:149
msgid "simple"
msgstr ""

#: ../../docs/community/contributing/docs_writing_guidelines.rst:150
msgid "basic"
msgstr ""

#: ../../docs/community/contributing/docs_writing_guidelines.rst:151
msgid "easy"
msgstr ""

#: ../../docs/community/contributing/docs_writing_guidelines.rst:152
msgid "actual"
msgstr ""

#: ../../docs/community/contributing/docs_writing_guidelines.rst:153
msgid "just"
msgstr ""

#: ../../docs/community/contributing/docs_writing_guidelines.rst:154
msgid "clear"
msgstr ""

#: ../../docs/community/contributing/docs_writing_guidelines.rst:155
msgid "however (some uses)"
msgstr ""

#: ../../docs/community/contributing/docs_writing_guidelines.rst:157
msgid ""
"Game creation and programming aren't simple, and nothing's easy to someone "
"learning to use the API for the first time. Other words in the list, like "
"``just`` or ``actual`` won't add any info to the sentence. Don't use "
"corresponding adverbs either: obviously, simply, basically, easily, "
"actually, clearly."
msgstr ""

#: ../../docs/community/contributing/docs_writing_guidelines.rst:163
msgid ""
"**Don't** example. The banned words lengthen the description and take "
"attention away from the most important info:"
msgstr ""

#: ../../docs/community/contributing/docs_writing_guidelines.rst:171
msgid "**Do** remove them:"
msgstr ""

#: ../../docs/community/contributing/docs_writing_guidelines.rst:178
msgid ""
"\"Simple\" never helps. Remember, for other users, anything could be complex "
"or frustrate them. There's nothing like a good old *it's simple* to make you "
"cringe. Here's the old brief description, the first sentence on the Timer "
"node's page:"
msgstr ""

#: ../../docs/community/contributing/docs_writing_guidelines.rst:188
msgid "**Do** explain what the node does instead:"
msgstr ""

#: ../../docs/community/contributing/docs_writing_guidelines.rst:195
msgid "**Don't** use \"basic\", it is too vague:"
msgstr ""

#: ../../docs/community/contributing/docs_writing_guidelines.rst:202
msgid "**Do** use the brief description to offer an overview of the node:"
msgstr ""

#: ../../docs/community/contributing/docs_writing_guidelines.rst:212
msgid "Favor explicit references over implicit ones."
msgstr ""

#: ../../docs/community/contributing/docs_writing_guidelines.rst:214
msgid ""
"**Don't** use words like \"the former\", \"the latter\", etc. They're not "
"the most common in English, and they require you to check the reference."
msgstr ""

#: ../../docs/community/contributing/docs_writing_guidelines.rst:221
msgid "**Do** repeat words. They remove all ambiguity:"
msgstr ""

#: ../../docs/community/contributing/docs_writing_guidelines.rst:227
msgid ""
"If you need to repeat the same variable name 3 or 4 times, you probably need "
"to rephrase your description."
msgstr ""

#: ../../docs/community/contributing/docs_writing_guidelines.rst:233
msgid ""
"Avoid \"The milk **of** the cow\". It feels unnatural in English. Write "
"\"The cow's milk\" instead."
msgstr ""

#: ../../docs/community/contributing/docs_writing_guidelines.rst:236
msgid "**Don't** write \"of the X\":"
msgstr ""

#: ../../docs/community/contributing/docs_writing_guidelines.rst:242
msgid ""
"**Do** use ``'s``. It lets you put the main subject at the start of the "
"sentence, and keep it short:"
msgstr ""

#: ../../docs/community/contributing/docs_writing_guidelines.rst:250
msgid "Use the Oxford comma to enumerate anything"
msgstr ""

#: ../../docs/community/contributing/docs_writing_guidelines.rst:252
msgid "From the Oxford dictionary:"
msgstr ""

#: ../../docs/community/contributing/docs_writing_guidelines.rst:254
msgid ""
"The 'Oxford comma' is an optional comma before the word 'and' at the end of "
"a list: *We sell books, videos, and magazines.*"
msgstr ""

#: ../../docs/community/contributing/docs_writing_guidelines.rst:257
msgid ""
"[...] Not all writers and publishers use it, but it can clarify the meaning "
"of a sentence when the items in a list are not single words: *These items "
"are available in black and white, red and yellow, and blue and green.*"
msgstr ""

#: ../../docs/community/contributing/docs_writing_guidelines.rst:260
msgid "**Don't** leave the last element of a list without a comma:"
msgstr ""

#: ../../docs/community/contributing/docs_writing_guidelines.rst:266
msgid ""
"**Do** add a comma before `and` or `or`, for the last element of a list with "
"more than two elements."
msgstr ""

#: ../../docs/community/contributing/docs_writing_guidelines.rst:275
msgid "How to write methods and classes"
msgstr ""

#: ../../docs/community/contributing/docs_writing_guidelines.rst:278
#, fuzzy
msgid "Dynamic vs static typing"
msgstr "그리고 정적 타입형에서는 이렇습니다:"

#: ../../docs/community/contributing/docs_writing_guidelines.rst:280
msgid ""
"The code examples in the documentation should follow a consistent style not "
"to confuse users. As static type hints are an optional feature of GDScript, "
"we chose to stick to writing dynamic code. This leads to writing GDScript "
"that is concise and accessible."
msgstr ""

#: ../../docs/community/contributing/docs_writing_guidelines.rst:285
msgid "The exception is topics that explain static typing concepts to users."
msgstr ""

#: ../../docs/community/contributing/docs_writing_guidelines.rst:287
msgid "**Don't** add a type hint with a colon or by casting:"
msgstr ""

#: ../../docs/community/contributing/docs_writing_guidelines.rst:297
msgid "**Do** write constants variables with dynamic typing:"
msgstr ""

#: ../../docs/community/contributing/docs_writing_guidelines.rst:307
msgid "**Don't** write functions with inferred arguments or return types:"
msgstr ""

#: ../../docs/community/contributing/docs_writing_guidelines.rst:318
#, fuzzy
msgid "**Do** write functions using dynamic typing:"
msgstr "동적 타이핑의 장단점"

#: ../../docs/community/contributing/docs_writing_guidelines.rst:330
msgid "Use real-world code examples where appropriate"
msgstr ""

#: ../../docs/community/contributing/docs_writing_guidelines.rst:332
msgid ""
"Real-world examples are more accessible to beginners than abstract ``foos`` "
"and ``bars``. You can also copy them directly from your game projects, "
"ensuring that any code snippet compiles without errors."
msgstr ""

#: ../../docs/community/contributing/docs_writing_guidelines.rst:336
msgid ""
"Writing ``var speed = 10`` rather than ``var my_var = 10`` allows beginners "
"to understand code better. It gives them a frame of reference as to where "
"they could use the code snippets in a live project."
msgstr ""

#: ../../docs/community/contributing/docs_writing_guidelines.rst:340
msgid "**Don't** write made-up examples:"
msgstr ""

#: ../../docs/community/contributing/docs_writing_guidelines.rst:351
msgid "**Do** write concrete examples:"
msgstr ""

#: ../../docs/community/contributing/docs_writing_guidelines.rst:363
msgid ""
"Of course, there are times when using real-world examples is impractical. In "
"those situations, you should still avoid using names such as ``my_var``, "
"``foo()`` or ``my_func()`` and consider more meaningful names for your "
"examples."
msgstr ""

#: ../../docs/community/contributing/docs_writing_guidelines.rst:370
msgid ""
"The brief description is the reference's most important sentence. It's the "
"user's first contact with a node:"
msgstr ""

#: ../../docs/community/contributing/docs_writing_guidelines.rst:373
msgid "It's the only description in the \"Create New Node\" dialog."
msgstr ""

#: ../../docs/community/contributing/docs_writing_guidelines.rst:374
msgid "It's at the top of every page in the reference"
msgstr ""

#: ../../docs/community/contributing/docs_writing_guidelines.rst:376
msgid ""
"The brief description should explain the node's role and its functionality, "
"in up to 200 characters."
msgstr ""

#: ../../docs/community/contributing/docs_writing_guidelines.rst:379
msgid "**Don't** write tiny and vague summaries:"
msgstr ""

#: ../../docs/community/contributing/docs_writing_guidelines.rst:386
msgid "**Do** give an overview of the node's functionality:"
msgstr ""

#: ../../docs/community/contributing/docs_writing_guidelines.rst:393
msgid ""
"Use the node's full description to provide more information, and a code "
"example, if possible."
msgstr ""

#: ../../docs/community/contributing/docs_writing_guidelines.rst:399
msgid ""
"Some methods return important values. Describe them at the end of the "
"description, ideally on a new line. No need to mention the return values for "
"any method whose name starts with ``set`` or ``get``."
msgstr ""

#: ../../docs/community/contributing/docs_writing_guidelines.rst:410
msgid "**Do** always use \"Returns\"."
msgstr ""

#: ../../docs/community/contributing/docs_writing_guidelines.rst:417
msgid ""
"Notice the exception to the \"direct voice\" rule: with the move method, an "
"external collider can influence the method and the body that calls ``move``. "
"In this case, you can use the passive voice."
msgstr ""

#: ../../docs/community/contributing/docs_writing_guidelines.rst:424
msgid ""
"For boolean member variables, always use ``if true`` and/or ``if false``, to "
"stay explicit. ``Controls whether or not`` may be ambiguous and won't work "
"for every member variable."
msgstr ""

#: ../../docs/community/contributing/docs_writing_guidelines.rst:428
msgid ""
"Also surround boolean values, variable names and methods with ``[code][/"
"code]``."
msgstr ""

#: ../../docs/community/contributing/docs_writing_guidelines.rst:430
msgid "**Do** start with \"if true\":"
msgstr ""

#: ../../docs/community/contributing/docs_writing_guidelines.rst:439
msgid "Use ``[code]`` around arguments"
msgstr ""

#: ../../docs/community/contributing/docs_writing_guidelines.rst:441
msgid ""
"In the class reference, always surround arguments with ``[code][/code]``. In "
"the documentation and in Godot, it will display like ``this``. When you edit "
"XML files in the Godot repository, replace existing arguments written like "
"'this' or \\`this\\` with ``[code]this[/code]``."
msgstr ""

#: ../../docs/community/contributing/docs_writing_guidelines.rst:448
msgid "Common vocabulary to use in Godot's documentation"
msgstr ""

#: ../../docs/community/contributing/docs_writing_guidelines.rst:450
msgid ""
"The developers chose some specific words to refer to areas of the interface. "
"They're used in the sources, in the documentation, and you should always use "
"them instead of synonyms, so the users know what you're talking about."
msgstr ""

#: ../../docs/community/contributing/docs_writing_guidelines.rst:458
msgid "Overview of the interface and common vocabulary"
msgstr ""

#: ../../docs/community/contributing/docs_writing_guidelines.rst:460
msgid ""
"In the top left corner of the editor lie the ``main menus``. In the center, "
"the buttons change the ``workspace``. And together the buttons in the top "
"right are the ``playtest buttons``. The area in the center, that displays "
"the 2D or the 3D space, is the ``viewport``. At its top, you find a list of "
"``tools`` inside the ``toolbar``."
msgstr ""

#: ../../docs/community/contributing/docs_writing_guidelines.rst:466
msgid ""
"The tabs or dockable panels on either side of the viewport are ``docks``. "
"You have the ``FileSystem dock``, the ``Scene dock`` that contains your "
"scene tree, the ``Import dock``, the ``Node dock``, and the ``Inspector`` or "
"``Inspector dock``. With the default layout you may call the tabbed docks "
"``tabs``: the ``Scene tab``, the ``Node tab``..."
msgstr ""

#: ../../docs/community/contributing/docs_writing_guidelines.rst:472
msgid ""
"The Animation, Debugger, etc. at the bottom of the viewport are ``panels``. "
"Together they make up the ``bottom panels``."
msgstr ""

#: ../../docs/community/contributing/docs_writing_guidelines.rst:475
msgid ""
"Foldable areas of the Inspector are ``sections``. The node's parent class "
"names, which you can't fold, are ``Classes`` e.g. the ``KinematicBody2D "
"class``. And individual lines with key-value pairs are ``properties``. E.g. "
"``position`` or ``modulate color`` are both ``properties``."
msgstr ""

#: ../../docs/community/contributing/docs_writing_guidelines.rst:482
#, fuzzy
msgid "Keyboard shortcut guidelines"
msgstr "키보드 단축키"

#: ../../docs/community/contributing/docs_writing_guidelines.rst:484
msgid ""
"Keyboard and mouse shortcuts should make use of the ``:kbd:`` tag, which "
"allows shortcuts to stand out from the rest of the text and inline code. Use "
"the compact form for modifier keys (:kbd:`Ctrl`/:kbd:`Cmd`) instead of their "
"spelled out form (:kbd:`Control`/:kbd:`Command`). For combinations, use the "
"``+`` symbol with a space on either side of the symbol."
msgstr ""

#: ../../docs/community/contributing/docs_writing_guidelines.rst:490
msgid ""
"Make sure to mention shortcuts that differ on macOS compared to other "
"platforms. On macOS, ``Cmd`` often replaces ``Ctrl`` in keyboard shortcuts."
msgstr ""

#: ../../docs/community/contributing/docs_writing_guidelines.rst:493
msgid ""
"Try to integrate the shortcut into sentences the best you can. Here are some "
"examples with the ``:kbd:`` tag left as-is for better visibility:"
msgstr ""

#: ../../docs/community/contributing/docs_writing_guidelines.rst:496
msgid ""
"Press ``:kbd:`Ctrl + Alt + T``` to toggle the panel (``:kbd:`Cmd + Alt + "
"T``` on macOS)."
msgstr ""

#: ../../docs/community/contributing/docs_writing_guidelines.rst:497
msgid ""
"Press ``:kbd:`Space``` and hold the left mouse button to pan in the 2D "
"editor."
msgstr ""

#: ../../docs/community/contributing/docs_writing_guidelines.rst:498
msgid "Press ``:kbd:`Shift + Up Arrow``` to move the node upwards by 8 pixels."
msgstr ""

#: ../../docs/community/contributing/docs_writing_guidelines.rst:501
msgid "Image contribution guidelines"
msgstr ""

#: ../../docs/community/contributing/docs_writing_guidelines.rst:503
msgid ""
"A significant part of the documentation is images, and there are several "
"important guidelines to follow."
msgstr ""

#: ../../docs/community/contributing/docs_writing_guidelines.rst:506
msgid ""
"First, you should always be using the default editor theme and text when "
"taking screenshots."
msgstr ""

#: ../../docs/community/contributing/docs_writing_guidelines.rst:509
msgid ""
"To improve the apperance of 3D screenshots, use 4× MSAA, enable anisotropic "
"filtering on the project's textures, and set the anisotropic filter quality "
"to 16× in Project Settings."
msgstr ""

#: ../../docs/community/contributing/docs_writing_guidelines.rst:513
msgid ""
"Screenshot sizes should not exceed 1920×1080 to ensure fast loading on "
"slower connections."
msgstr ""

#: ../../docs/community/contributing/docs_writing_guidelines.rst:516
msgid ""
"When you need to highlight an area of the editor to show something, like a "
"button or option, use a 2 pixel thick outline without a bevel."
msgstr ""

#: ../../docs/community/contributing/docs_writing_guidelines.rst:519
msgid ""
"Before you add or replace any images in the documentation, they should be "
"run through a PNG compressor to save size. The built in lossless compressor "
"in programs like Krita or Photoshop should be enough. For heavier images, "
"also look into using a lossy compressor, such as `pngquant <https://pngquant."
"org/>`_ where almost no image quality is lost during compression."
msgstr ""

#: ../../docs/community/contributing/updating_the_class_reference.rst:4
msgid "Contribute to the Class Reference"
msgstr ""

#: ../../docs/community/contributing/updating_the_class_reference.rst:6
msgid ""
"Godot ships with many nodes and singletons to help you develop your games. "
"Each is a class, documented in the :ref:`class reference <toc-class-ref>`. "
"This reference is essential for anyone learning the engine: it is available "
"both online and in the engine."
msgstr ""

#: ../../docs/community/contributing/updating_the_class_reference.rst:9
msgid ""
"But it's incomplete. Some methods, variables and signals lack descriptions. "
"Others changed with recent releases and need updates. The developers can't "
"write the entire reference on their own. Godot needs you, and all of us, to "
"contribute."
msgstr ""

#: ../../docs/community/contributing/updating_the_class_reference.rst:12
msgid ""
"**Important:** If you are planning to make larger changes or a more "
"substantial contribution, it is usually a good idea to create an issue (or a "
"comment in an existing one) to let others know so they don't start working "
"on the same thing too."
msgstr ""

#: ../../docs/community/contributing/updating_the_class_reference.rst:15
#, fuzzy
msgid ""
"This guide is available as a `video tutorial on YouTube <https://www.youtube."
"com/watch?v=5jeHXxeX-JY>`_."
msgstr ""
"이 튜토리얼을 `유튜브에서 <https://www.youtube.com/watch?v=y1E_y9AIqow>`_ 보"
"실 수 있습니다."

#: ../../docs/community/contributing/updating_the_class_reference.rst:21
msgid ""
"The class reference lies in the following XML files, in Godot's GitHub "
"repository: `doc/classes/ <https://github.com/godotengine/godot/tree/master/"
"doc/classes>`_."
msgstr ""

#: ../../docs/community/contributing/updating_the_class_reference.rst:23
msgid "There are 5 steps to update the class reference (full guide below):"
msgstr ""

#: ../../docs/community/contributing/updating_the_class_reference.rst:25
msgid "Fork `Godot's repository <https://github.com/godotengine/godot>`_"
msgstr ""

#: ../../docs/community/contributing/updating_the_class_reference.rst:26
msgid "Clone your fork on your computer"
msgstr ""

#: ../../docs/community/contributing/updating_the_class_reference.rst:27
msgid "Edit the class file in ``doc/classes/`` to write documentation"
msgstr ""

#: ../../docs/community/contributing/updating_the_class_reference.rst:28
msgid "Commit your changes and push them to your fork"
msgstr ""

#: ../../docs/community/contributing/updating_the_class_reference.rst:29
msgid "Make a pull request on the Godot repository"
msgstr ""

#: ../../docs/community/contributing/updating_the_class_reference.rst:31
msgid ""
"Always use these XML files to edit the API reference. Do not edit the "
"generated .rst files :ref:`in the online documentation <toc-class-ref>`, "
"hosted in the `godot-docs <https://github.com/godotengine/godot-docs>`_ "
"repository."
msgstr ""

#: ../../docs/community/contributing/updating_the_class_reference.rst:34
msgid "Get started with GitHub"
msgstr ""

#: ../../docs/community/contributing/updating_the_class_reference.rst:36
msgid ""
"If you're new to git and GitHub, this guide will help you get started. "
"You'll learn to:"
msgstr ""

#: ../../docs/community/contributing/updating_the_class_reference.rst:38
msgid "Fork and clone Godot's repository"
msgstr ""

#: ../../docs/community/contributing/updating_the_class_reference.rst:39
msgid "Keep your fork up to date with other contributors"
msgstr ""

#: ../../docs/community/contributing/updating_the_class_reference.rst:40
msgid "Create a pull request so your improvements end in the official docs"
msgstr ""

#: ../../docs/community/contributing/updating_the_class_reference.rst:42
msgid ""
"If you're new to git, the version-control system Godot uses, go through "
"`GitHub's interactive guide <https://try.github.io/levels/1/challenges/1>`_. "
"You'll learn some essential vocabulary and get a sense for the tool."
msgstr ""

#: ../../docs/community/contributing/updating_the_class_reference.rst:45
msgid "Fork Godot"
msgstr ""

#: ../../docs/community/contributing/updating_the_class_reference.rst:47
msgid "Fork the Godot Engine into a GitHub repository of your own."
msgstr ""

#: ../../docs/community/contributing/updating_the_class_reference.rst:49
msgid "Clone the repository on your computer:"
msgstr ""

#: ../../docs/community/contributing/updating_the_class_reference.rst:55
msgid ""
"Create a new branch to make your changes. It makes it a lot easier to sync "
"your improvements with other docs writers, and it's easier to cleanup your "
"repository clean if you have any issues with git."
msgstr ""

#: ../../docs/community/contributing/updating_the_class_reference.rst:61
msgid ""
"The new branch is the same as your master branch, until you start to write "
"API docs. In the ``doc/`` folder, you'll find the class reference."
msgstr ""

#: ../../docs/community/contributing/updating_the_class_reference.rst:64
msgid "How to keep your local clone up-to-date"
msgstr ""

#: ../../docs/community/contributing/updating_the_class_reference.rst:66
msgid ""
"Other writers contribute to Godot's documentation. Your local repository "
"will fall behind it, and you'll have to synchronize it. Especially if other "
"contributors update the class reference while you work on it."
msgstr ""

#: ../../docs/community/contributing/updating_the_class_reference.rst:68
msgid ""
"First add an ``upstream`` git *remote* to work with. Remotes are links to "
"online repositories you can download new files from."
msgstr ""

#: ../../docs/community/contributing/updating_the_class_reference.rst:74
msgid "You can check the list of all remote servers with:"
msgstr ""

#: ../../docs/community/contributing/updating_the_class_reference.rst:80
msgid ""
"You should have two: ``origin``, your fork on github, that git adds by "
"default, and ``upstream``, that you just added:"
msgstr ""

#: ../../docs/community/contributing/updating_the_class_reference.rst:90
msgid ""
"Each time you want to sync your branch to the state of the upstream "
"repository, enter:"
msgstr ""

#: ../../docs/community/contributing/updating_the_class_reference.rst:96
msgid ""
"This command will first ``fetch``, or download the latest version of the "
"Godot repository. Then, it will reapply your local changes on top."
msgstr ""

#: ../../docs/community/contributing/updating_the_class_reference.rst:98
msgid ""
"If you made changes you don't want to keep in your local branch, use the "
"following commands instead:"
msgstr ""

#: ../../docs/community/contributing/updating_the_class_reference.rst:105
msgid ""
"**Warning:** The above command will reset your branch to the state of the "
"``upstream master`` branch. It will discard all local changes. Make sure to "
"only run this *before* you make important changes."
msgstr ""

#: ../../docs/community/contributing/updating_the_class_reference.rst:107
msgid ""
"Another option is to delete the branch you're working on, synchronize the "
"master branch with the Godot repository, and create a brand new branch:"
msgstr ""

#: ../../docs/community/contributing/updating_the_class_reference.rst:116
msgid ""
"If you're feeling lost by now, come to our `IRC channels <http://webchat."
"freenode.net/?channels=#godotengine>`_ and ask for help. Experienced git "
"users will give you a hand."
msgstr ""

#: ../../docs/community/contributing/updating_the_class_reference.rst:119
msgid "Updating the documentation template"
msgstr ""

#: ../../docs/community/contributing/updating_the_class_reference.rst:121
msgid ""
"When classes are modified in the source code, the documentation template "
"might become outdated. To make sure that you are editing an up-to-date "
"version, you first need to compile Godot (you can follow the :ref:"
"`doc_introduction_to_the_buildsystem` page), and then run the following "
"command (assuming 64-bit Linux):"
msgstr ""

#: ../../docs/community/contributing/updating_the_class_reference.rst:127
msgid ""
"The xml files in doc/classes should then be up-to-date with current Godot "
"Engine features. You can then check what changed using the ``git diff`` "
"command. If there are changes to other classes than the one you are planning "
"to document, please commit those changes first before starting to edit the "
"template:"
msgstr ""

#: ../../docs/community/contributing/updating_the_class_reference.rst:134
msgid "You are now ready to edit this file to add stuff."
msgstr ""

#: ../../docs/community/contributing/updating_the_class_reference.rst:136
msgid ""
"**Note:** If this has been done recently by another contributor, you don't "
"forcefully need to go through these steps (unless you know that the class "
"you plan to edit *has* been modified recently)."
msgstr ""

#: ../../docs/community/contributing/updating_the_class_reference.rst:139
msgid "Push and request a pull of your changes"
msgstr ""

#: ../../docs/community/contributing/updating_the_class_reference.rst:141
msgid ""
"Once your modifications are finished, push your changes on your GitHub "
"repository:"
msgstr ""

#: ../../docs/community/contributing/updating_the_class_reference.rst:150
msgid ""
"When it's done, you can ask for a Pull Request via the GitHub UI of your "
"Godot fork."
msgstr ""

#: ../../docs/community/contributing/updating_the_class_reference.rst:154
msgid ""
"Although you can edit files on GitHub, it's not recommended. As hundreds of "
"contributors work on Godot, the git history must stay clean. Each commit "
"should bundle all related improvements you make to the class reference, a "
"new feature, bug fixes... When you edit from GitHub, it will create a new "
"branch and a Pull Request every time you want to save it. If a few days pass "
"before your changes get a review, you won't be able to update to the latest "
"version of the repository cleanly. Also, it's harder to keep clean indents "
"from GitHub. And they're very important in the docs."
msgstr ""

#: ../../docs/community/contributing/updating_the_class_reference.rst:156
msgid ""
"TL;DR: If you don't know what you're doing exactly, do not edit files from "
"GitHub."
msgstr ""

#: ../../docs/community/contributing/updating_the_class_reference.rst:159
msgid "How to edit class XML"
msgstr ""

#: ../../docs/community/contributing/updating_the_class_reference.rst:161
msgid ""
"Edit the file for your chosen class in ``doc/classes/`` to update the class "
"reference. The folder contains an XML file for each class. The XML lists the "
"constants and methods you'll find in the class reference. Godot generates "
"and updates the XML automatically."
msgstr ""

#: ../../docs/community/contributing/updating_the_class_reference.rst:163
msgid ""
"Edit it using your favourite text editor. If you use a code editor, make "
"sure that it doesn't change the indent style: tabs for the XML, and 4 spaces "
"inside BBcode-style blocks. More on that below."
msgstr ""

#: ../../docs/community/contributing/updating_the_class_reference.rst:165
msgid ""
"If you need to check that the modifications you've made are correct in the "
"generated documentation, build Godot as described :ref:`here <toc-devel-"
"compiling>`, run the editor and open the help for the page you modified."
msgstr ""

#: ../../docs/community/contributing/updating_the_class_reference.rst:168
msgid "How to write the class reference"
msgstr ""

#: ../../docs/community/contributing/updating_the_class_reference.rst:170
msgid ""
"Each class has a brief and a long description. The brief description is "
"always at the top of the page, while the full description lies below the "
"list of methods, variables and constants. Methods, member variables, "
"constants and signals are in separate categories or XML nodes. For each, "
"learn how they work in Godot's source code, and fill their <description>."
msgstr ""

#: ../../docs/community/contributing/updating_the_class_reference.rst:172
msgid "Our job is to add the missing text between these marks:"
msgstr ""

#: ../../docs/community/contributing/updating_the_class_reference.rst:174
msgid "<description></description>"
msgstr ""

#: ../../docs/community/contributing/updating_the_class_reference.rst:175
msgid "<brief_description></brief_description>"
msgstr ""

#: ../../docs/community/contributing/updating_the_class_reference.rst:176
msgid "<constant></constant>"
msgstr ""

#: ../../docs/community/contributing/updating_the_class_reference.rst:177
msgid "<method></method>"
msgstr ""

#: ../../docs/community/contributing/updating_the_class_reference.rst:178
msgid "<member></member>"
msgstr ""

#: ../../docs/community/contributing/updating_the_class_reference.rst:179
msgid "<signal></signal>"
msgstr ""

#: ../../docs/community/contributing/updating_the_class_reference.rst:181
msgid ""
"Write in a clear and simple language. Always follow the :ref:`writing "
"guidelines <doc_docs_writing_guidelines>` to keep your descriptions short "
"and easy to read. **Do not leave empty lines** in the descriptions: each "
"line in the XML file will result in a new paragraph."
msgstr ""

#: ../../docs/community/contributing/updating_the_class_reference.rst:183
msgid "Here's how a class looks like in XML:"
msgstr ""

#: ../../docs/community/contributing/updating_the_class_reference.rst:222
msgid ""
"Use a code editor like Vim, Atom, Code, Notepad++ or anything similar to "
"edit the file quickly. Use the search function to find classes fast."
msgstr ""

#: ../../docs/community/contributing/updating_the_class_reference.rst:226
msgid "Improve formatting with BBcode style tags"
msgstr ""

#: ../../docs/community/contributing/updating_the_class_reference.rst:228
msgid ""
"Godot's class reference supports BBcode-like tags. They add nice formatting "
"to the text. Here's the list of available tags:"
msgstr ""

#: ../../docs/community/contributing/updating_the_class_reference.rst:231
msgid "Effect"
msgstr ""

#: ../../docs/community/contributing/updating_the_class_reference.rst:231
msgid "Result"
msgstr ""

#: ../../docs/community/contributing/updating_the_class_reference.rst:233
msgid "[Class]"
msgstr ""

#: ../../docs/community/contributing/updating_the_class_reference.rst:233
msgid "Link a class"
msgstr ""

#: ../../docs/community/contributing/updating_the_class_reference.rst:233
msgid "Move the [Sprite]."
msgstr ""

#: ../../docs/community/contributing/updating_the_class_reference.rst:233
msgid "Move the :ref:`class_sprite`."
msgstr ""

#: ../../docs/community/contributing/updating_the_class_reference.rst:235
msgid "[method methodname]"
msgstr ""

#: ../../docs/community/contributing/updating_the_class_reference.rst:235
msgid "Link to a method in this class"
msgstr ""

#: ../../docs/community/contributing/updating_the_class_reference.rst:235
msgid "Call [method hide]."
msgstr ""

#: ../../docs/community/contributing/updating_the_class_reference.rst:235
#: ../../docs/community/contributing/updating_the_class_reference.rst:237
#, fuzzy
msgid "See :ref:`hide <class_spatial_method_hide>`."
msgstr ":ref:`Sprite <class_Sprite>`"

#: ../../docs/community/contributing/updating_the_class_reference.rst:237
msgid "[method Class.methodname]"
msgstr ""

#: ../../docs/community/contributing/updating_the_class_reference.rst:237
msgid "Link to another class's method"
msgstr ""

#: ../../docs/community/contributing/updating_the_class_reference.rst:237
msgid "Call [method Spatial.hide]."
msgstr ""

#: ../../docs/community/contributing/updating_the_class_reference.rst:239
msgid "[member membername]"
msgstr ""

#: ../../docs/community/contributing/updating_the_class_reference.rst:239
msgid "Link to a member in this class"
msgstr ""

#: ../../docs/community/contributing/updating_the_class_reference.rst:239
msgid "Get [member scale]."
msgstr ""

#: ../../docs/community/contributing/updating_the_class_reference.rst:239
#: ../../docs/community/contributing/updating_the_class_reference.rst:241
msgid "Get :ref:`scale <class_node2d_property_scale>`."
msgstr ""

#: ../../docs/community/contributing/updating_the_class_reference.rst:241
msgid "[member Class.membername]"
msgstr ""

#: ../../docs/community/contributing/updating_the_class_reference.rst:241
msgid "Link to another class's member"
msgstr ""

#: ../../docs/community/contributing/updating_the_class_reference.rst:241
msgid "Get [member Node2D.scale]."
msgstr ""

#: ../../docs/community/contributing/updating_the_class_reference.rst:243
msgid "[signal signalname]"
msgstr ""

#: ../../docs/community/contributing/updating_the_class_reference.rst:243
msgid "Link to a signal in this class"
msgstr ""

#: ../../docs/community/contributing/updating_the_class_reference.rst:243
msgid "Emit [signal renamed]."
msgstr ""

#: ../../docs/community/contributing/updating_the_class_reference.rst:243
#: ../../docs/community/contributing/updating_the_class_reference.rst:245
msgid "Emit :ref:`renamed <class_node_signal_renamed>`."
msgstr ""

#: ../../docs/community/contributing/updating_the_class_reference.rst:245
msgid "[signal Class.signalname]"
msgstr ""

#: ../../docs/community/contributing/updating_the_class_reference.rst:245
msgid "Link to another class's signal"
msgstr ""

#: ../../docs/community/contributing/updating_the_class_reference.rst:245
msgid "Emit [signal Node.renamed]."
msgstr ""

#: ../../docs/community/contributing/updating_the_class_reference.rst:247
msgid "[b] [/b]"
msgstr ""

#: ../../docs/community/contributing/updating_the_class_reference.rst:247
msgid "Bold"
msgstr ""

#: ../../docs/community/contributing/updating_the_class_reference.rst:247
msgid "Some [b]bold[/b] text."
msgstr ""

#: ../../docs/community/contributing/updating_the_class_reference.rst:247
msgid "Some **bold** text."
msgstr ""

#: ../../docs/community/contributing/updating_the_class_reference.rst:249
msgid "[i] [/i]"
msgstr ""

#: ../../docs/community/contributing/updating_the_class_reference.rst:249
msgid "Italic"
msgstr ""

#: ../../docs/community/contributing/updating_the_class_reference.rst:249
msgid "Some [i]italic[/i] text."
msgstr ""

#: ../../docs/community/contributing/updating_the_class_reference.rst:249
msgid "Some *italic* text."
msgstr ""

#: ../../docs/community/contributing/updating_the_class_reference.rst:251
msgid "[code] [/code]"
msgstr ""

#: ../../docs/community/contributing/updating_the_class_reference.rst:251
msgid "Monospace"
msgstr ""

#: ../../docs/community/contributing/updating_the_class_reference.rst:251
msgid "Some [code]monospace[/code] text."
msgstr ""

#: ../../docs/community/contributing/updating_the_class_reference.rst:251
msgid "Some ``monospace`` text."
msgstr ""

#: ../../docs/community/contributing/updating_the_class_reference.rst:253
msgid "[codeblock] [/codeblock]"
msgstr ""

#: ../../docs/community/contributing/updating_the_class_reference.rst:253
msgid "Multiline preformatted block"
msgstr ""

#: ../../docs/community/contributing/updating_the_class_reference.rst:253
msgid "*See below.*"
msgstr ""

#: ../../docs/community/contributing/updating_the_class_reference.rst:256
msgid ""
"Use ``[codeblock]`` for pre-formatted code blocks. Inside ``[codeblock]``, "
"always use **four spaces** for indentation (the parser will delete tabs). "
"Example:"
msgstr ""

#: ../../docs/community/contributing/updating_the_class_reference.rst:266
msgid "Will display as:"
msgstr ""

#: ../../docs/community/contributing/updating_the_class_reference.rst:276
msgid "I don't know what this method does!"
msgstr ""

#: ../../docs/community/contributing/updating_the_class_reference.rst:278
msgid ""
"No problem. Leave it behind, and list the methods you skipped when you "
"request a pull of your changes. Another writer will take care of it."
msgstr ""

#: ../../docs/community/contributing/updating_the_class_reference.rst:280
msgid ""
"You can still have a look at the methods' implementation in Godot's source "
"code on GitHub. Also, if you have doubts, feel free to ask on the `Q&A "
"website <https://godotengine.org/qa/>`__ and on IRC (freenode, #godotengine)."
msgstr ""

#: ../../docs/community/contributing/updating_the_class_reference.rst:284
msgid "Localization"
msgstr "현지화"

#: ../../docs/community/contributing/updating_the_class_reference.rst:286
msgid ""
"The documentation can be translated in any language on `Hosted Weblate "
"<https://hosted.weblate.org/projects/godot-engine/godot-docs/>`__."
msgstr ""

#: ../../docs/community/contributing/updating_the_class_reference.rst:289
msgid ""
"Translated strings are synced manually by documentation maintainers in the "
"`godot-docs-l10n <https://github.com/godotengine/godot-docs-l10n>`__ "
"repository."
msgstr ""

#: ../../docs/community/contributing/updating_the_class_reference.rst:293
msgid ""
"Languages with a good level of completion have their own localized instances "
"of ReadTheDocs. Open an issue on the ``godot-docs-l10n`` repository if you "
"think that a new language is complete enough to get its own instance."
msgstr ""

#: ../../docs/community/channels.rst:4
#, fuzzy
msgid "Community channels"
msgstr "커뮤니티"

#: ../../docs/community/channels.rst:6
msgid ""
"So, where is the Godot community and where can you ask questions and get "
"help?"
msgstr ""

#: ../../docs/community/channels.rst:8
msgid ""
"Note that some of these channels are run and moderated by members of the "
"Godot community or third parties."
msgstr ""

#: ../../docs/community/channels.rst:10
#, fuzzy
msgid ""
"A brief overview over these and other channels is also available on the "
"`Godot website <https://godotengine.org/community>`_."
msgstr ""
"같은 `Godot 웹사이트 <https://godotengine.org/contact>`_ 페이지에서 참고하세"
"요."

#: ../../docs/community/channels.rst:13
msgid "Q&A"
msgstr "Q&A"

#: ../../docs/community/channels.rst:15
msgid "`Official Godot Questions & Answers <https://godotengine.org/qa/>`_"
msgstr ""

#: ../../docs/community/channels.rst:18
msgid "IRC on Freenode"
msgstr ""

#: ../../docs/community/channels.rst:20
msgid ""
"`General: #godotengine <http://webchat.freenode.net/?channels=#godotengine>`_"
msgstr ""

#: ../../docs/community/channels.rst:21
msgid ""
"`Engine development: #godotengine-devel <http://webchat.freenode.net/?"
"channels=#godotengine-devel>`_"
msgstr ""

#: ../../docs/community/channels.rst:22
msgid ""
"`Documentation: #godotengine-doc <http://webchat.freenode.net/?"
"channels=#godotengine-doc>`_"
msgstr ""

#: ../../docs/community/channels.rst:23
msgid ""
"`Pull request meetings: #godotengine-meeting <http://webchat.freenode.net/?"
"channels=#godotengine-meeting>`_"
msgstr ""

#: ../../docs/community/channels.rst:24
msgid ""
"`GDNative: #godotengine-gdnative <http://webchat.freenode.net/?"
"channels=#godotengine-gdnative>`_"
msgstr ""

#: ../../docs/community/channels.rst:25
msgid ""
"`Website and public relations: #godotengine-atelier <http://webchat.freenode."
"net/?channels=#godotengine-atelier>`_"
msgstr ""

#: ../../docs/community/channels.rst:26
msgid "`IRC logs <https://godot.eska.me/irc-logs/>`_"
msgstr ""

#: ../../docs/community/channels.rst:29
msgid "Other chats"
msgstr ""

#: ../../docs/community/channels.rst:31
msgid "`Discord Server <https://discordapp.com/invite/zH7NUgz>`_"
msgstr ""

#: ../../docs/community/channels.rst:32
msgid ""
"`Matrix (IRC compatible) <https://matrix.to/#/#godotengine:matrix.org>`_"
msgstr ""

#: ../../docs/community/channels.rst:35
#, fuzzy
msgid "Language-based communities"
msgstr "거대한 커뮤니티"

#: ../../docs/community/channels.rst:37
msgid ""
"Brazilian Portuguese: `Godot Brasil (Discord) <https://discord.gg/gWmQKBv>`_"
msgstr ""

#: ../../docs/community/channels.rst:38
msgid ""
"French: `Godot Francophone Officiel (Discord) <https://discord.gg/3jvf3XN>`_"
msgstr ""

#: ../../docs/community/channels.rst:39
msgid "French: `SoloCode Godot (Discord) <https://discord.gg/gZ3QJ5T>`_"
msgstr ""

#: ../../docs/community/channels.rst:40
msgid ""
"German: `Deutsche Godot Community (Discord) <https://discord.gg/Tr7Ma6E>`_"
msgstr ""

#: ../../docs/community/channels.rst:41
msgid ""
"Swedish: `Swedish Godot Community (Discord) <https://discord.gg/6ZsgWmH>`_"
msgstr ""

#: ../../docs/community/channels.rst:44
msgid "Social networks"
msgstr ""

#: ../../docs/community/channels.rst:46
msgid "`GitHub <https://github.com/godotengine/>`_"
msgstr ""

#: ../../docs/community/channels.rst:47
msgid "`Facebook group <https://www.facebook.com/groups/godotengine/>`_"
msgstr ""

#: ../../docs/community/channels.rst:48
msgid "`Twitter (also, #godotengine) <https://twitter.com/godotengine>`_"
msgstr ""

#: ../../docs/community/channels.rst:49
msgid "`Reddit <https://www.reddit.com/r/godot>`_"
msgstr ""

#: ../../docs/community/channels.rst:50
msgid "`Youtube <https://www.youtube.com/c/GodotEngineOfficial>`_"
msgstr ""

#: ../../docs/community/channels.rst:51
msgid "`Steam <https://steamcommunity.com/app/404790>`_"
msgstr ""

#: ../../docs/community/channels.rst:54
msgid "Forum"
msgstr ""

#: ../../docs/community/channels.rst:56
msgid "`Forum (godotforums.org) <https://godotforums.org/>`_"
msgstr ""

#: ../../docs/community/tutorials.rst:4
#, fuzzy
msgid "Tutorials and resources"
msgstr "노드와 리소스"

#: ../../docs/community/tutorials.rst:6
msgid ""
"This is a list of third-party tutorials and resources created by the Godot "
"community. For resources, remember that there is the official `Godot Asset "
"Library <https://godotengine.org/asset-library/asset>`_ full of official and "
"community resources too! Also have a look at this `huge list over at Reddit "
"<https://www.reddit.com/r/godot/comments/an0iq5/"
"godot_tutorials_list_of_video_and_written/>`_."
msgstr ""

#: ../../docs/community/tutorials.rst:8
msgid ""
"Think there is something missing here? Feel free to submit a `Pull Request "
"<https://github.com/godotengine/godot-docs/blob/master/community/tutorials."
"rst>`_ as always."
msgstr ""

#: ../../docs/community/tutorials.rst:11
msgid "Where to start"
msgstr ""

#: ../../docs/community/tutorials.rst:13
msgid ""
"The Godot video tutorials by `GDQuest <https://www.youtube.com/channel/"
"UCxboW7x0jZqFdvMdCFKTMsQ/playlists>`_, `Game from Scratch <https://www."
"youtube.com/watch?v=iDEcP8Mc-7s&list=PLS9MbmO_ssyDk79j9ewONxV88fD5e_o5d>`_ "
"and `KidsCanCode <https://www.youtube.com/channel/UCNaPQ5uLX5iIEHUCLmfAgKg/"
"playlists>`_ are well-regarded in the community and often recommended as a "
"gentle introduction to beginners."
msgstr ""

#: ../../docs/community/tutorials.rst:15
msgid ""
"If you're interested in Visual Scripting, `Emilio's tutorials <https://www."
"youtube.com/channel/UC9DR22-qohBDtZ74R3FxOZg>`_ may be worth a look."
msgstr ""

#: ../../docs/community/tutorials.rst:17
msgid ""
"Some of the others mentioned below provide more advanced tutorials, e.g. on "
"3D or shaders."
msgstr ""

#: ../../docs/community/tutorials.rst:20
msgid "Video tutorials"
msgstr ""

#: ../../docs/community/tutorials.rst:22
msgid ""
"`Emilio <https://www.youtube.com/channel/UC9DR22-qohBDtZ74R3FxOZg>`_ (2D, "
"GDScript and VisualScript)."
msgstr ""

#: ../../docs/community/tutorials.rst:23
msgid ""
"`GDQuest <https://www.youtube.com/channel/UCxboW7x0jZqFdvMdCFKTMsQ/"
"playlists>`_ (2D and 3D, GDScript, VisualScript and C#)."
msgstr ""

#: ../../docs/community/tutorials.rst:24
msgid ""
"`Game Endeavor <https://www.youtube.com/channel/UCLweX1UtQjRjj7rs_0XQ2Eg/"
"videos>`_ (2D, GDScript)."
msgstr ""

#: ../../docs/community/tutorials.rst:25
msgid ""
"`Game from Scratch <https://www.youtube.com/watch?"
"v=iDEcP8Mc-7s&list=PLS9MbmO_ssyDk79j9ewONxV88fD5e_o5d>`_ (2D and 3D, "
"GDScript and C#)."
msgstr ""

#: ../../docs/community/tutorials.rst:26
msgid ""
"`HeartBeast <https://www.youtube.com/watch?v=wETY5_9kFtA&list=PL9FzW-"
"m48fn2jlBu_0DRh7PvAt-GULEmd>`_ (2D, GDScript)."
msgstr ""

#: ../../docs/community/tutorials.rst:27
msgid ""
"`Jeremy Bullock <https://www.youtube.com/channel/UCwJw2-V5S1TkBjLQ3_Ws54g>`_ "
"(2D and 3D, GDScript, VisualScript and C#)."
msgstr ""

#: ../../docs/community/tutorials.rst:28
msgid ""
"`KidsCanCode <https://www.youtube.com/channel/UCNaPQ5uLX5iIEHUCLmfAgKg/"
"playlists>`__ (2D and 3D, GDScript and VisualScript)."
msgstr ""

#: ../../docs/community/tutorials.rst:29
msgid ""
"`Mister Taft Creates <https://www.youtube.com/playlist?"
"list=PL4vbr3u7UKWqwQlvwvgNcgDL1p_3hcNn2>`_ (2D, GDScript)."
msgstr ""

#: ../../docs/community/tutorials.rst:30
msgid ""
"`Miziziziz <https://www.youtube.com/playlist?"
"list=PLmugv6_kd0qN6AyjG245_Pdak4MXKUx88>`_ (2D, GDScript)."
msgstr ""

#: ../../docs/community/tutorials.rst:31
msgid ""
"`P1X / Krzysztof Jankowski <https://www.youtube.com/playlist?"
"list=PLvDk7UKhld4xGPovdB4IFtAHYMYjx_-3K>`_ (3D)."
msgstr ""

#: ../../docs/community/tutorials.rst:32
msgid ""
"`Pigdev <https://www.youtube.com/playlist?"
"list=PLPMN4vCRFdordS3E-3zi0Hdh7pAsbWQ6a>`_ (2D, GDScript)."
msgstr ""

#: ../../docs/community/tutorials.rst:33
msgid ""
"`Steincodes <https://www.youtube.com/c/steincodes/playlists>`__ (2D, "
"GDScript and VisualScript)."
msgstr ""

#: ../../docs/community/tutorials.rst:34
msgid ""
"`TheBuffED <https://www.youtube.com/watch?"
"v=ygGaN1EOQEA&list=PLvN5Z3tTxXEDfQkt4Frg6ALirespSwZd7>`_ (2D, GDScript)."
msgstr ""

#: ../../docs/community/tutorials.rst:35
msgid ""
"`Code with Tom <https://www.youtube.com/playlist?"
"list=PLiUQR4U_J9ec0k91iHPme_qtfS1nrWF3W>`_ (2D and 3D, GDScript)."
msgstr ""

#: ../../docs/community/tutorials.rst:36
msgid ""
"`BornCG <https://www.youtube.com/playlist?"
"list=PLda3VoSoc_TSBBOBYwcmlamF1UrjVtccZ>`_ (3D, GDScript)."
msgstr ""

#: ../../docs/community/tutorials.rst:39
#, fuzzy
msgid "Text tutorials"
msgstr "튜토리얼"

#: ../../docs/community/tutorials.rst:41
msgid "`Godot Recipes by KidsCanCode <http://godotrecipes.com/>`__"
msgstr ""

#: ../../docs/community/tutorials.rst:42
msgid "`Steincodes <https://steincodes.tumblr.com>`__"
msgstr ""

#: ../../docs/community/tutorials.rst:45
msgid "Devlogs"
msgstr ""

#: ../../docs/community/tutorials.rst:47
#, fuzzy
msgid ""
"`Andrea Catania (Physics & AI) <https://www.youtube.com/channel/"
"UCm4RuvYtgpgFDTCgaEUT5uQ/videos>`_"
msgstr ""
"`Andrea Catania (Physics & AI) <https://www.youtube.com/channel/"
"UCm4RuvYtgpgFDTCgaEUT5uQ/videos>`_"

#: ../../docs/community/tutorials.rst:48
#, fuzzy
msgid ""
"`Bastiaan Olij (AR & VR) <https://www.youtube.com/channel/UCrbLJYzJjDf2p-"
"vJC011lYw/videos>`_"
msgstr ""
"`Bastiaan Olij (AR & VR) <https://www.youtube.com/channel/UCrbLJYzJjDf2p-"
"vJC011lYw/videos>`_"

#: ../../docs/community/tutorials.rst:53
msgid ""
"`awesome-godot: A curated list of resources by Calinou <https://github.com/"
"Calinou/awesome-godot>`_"
msgstr ""
"awesome-godot: Calinou 의 선별된 리소스 목록 <https://github.com/Calinou/"
"awesome-godot>"

#: ../../docs/community/tutorials.rst:54
msgid ""
"`Zeef Godot Engine: A curated directory of resources by Andre Schmitz "
"<https://godot-engine.zeef.com/andre.antonio.schmitz>`_"
msgstr ""
"Zeef Godot Engine: Andre Schmitz 의 선별된 리소스 디렉토리입니다. <https://"
"godot-engine.zeef.com/andre.antonio.schmitz>"

#~ msgid ""
#~ "Welcome to Godot! With your project open, you should see the editor’s "
#~ "interface with empty docks on the right side."
#~ msgstr ""
#~ "Godot에 온 것을 환영합니다! 프로젝트를 열었으니 편집기의 인터페이스와 오른"
#~ "쪽의 빈 독이 있는 것을 확인할 수 있습니다."

#~ msgid "Windows, macOS, Linux (unofficial and unsupported)"
#~ msgstr "Windows, macOS, Linux (비공식이고 지원되지 않음)"

#~ msgid "The *adb* executable (adb.exe on Windows)"
#~ msgstr "*adb* 실행 파일 (Windows에서는 adb.exe)"

#~ msgid "The *jarsigner* executable (from JDK 6 or 8)"
#~ msgstr "*jarsigner* 실행 파일 (JDK 6 또는 8에서)"

#~ msgid "The debug *keystore*"
#~ msgstr "디버그 *keystore*"

#~ msgid ""
#~ "This tutorial will be about *transformations* and will cover a little "
#~ "about matrices (but not in-depth)."
#~ msgstr ""
#~ "본 튜토리얼에서는 *변환* 에 대해 다루며 행렬에 대해 설명합니다(심층적이지"
#~ "는 않음)."

#~ msgid ""
#~ "Transformations are most of the time applied as translation, rotation and "
#~ "scale so they will be considered as priority here."
#~ msgstr ""
#~ "변환은 변환, 회전 및 척도로 사용되는 대부분의 시간이기 때문에 여기서는 변"
#~ "환이 우선으로 간주됩니다."

#~ msgid "Oriented coordinate system (OCS)"
#~ msgstr "OCS(주요 좌표계)"

#~ msgid ""
#~ "Imagine we have a spaceship somewhere in space. In Godot this is easy, "
#~ "just move the ship somewhere and rotate it:"
#~ msgstr ""
#~ "우주 어딘가에 우주선이 있다고 상상해 보세요. Godot에서 이것은 쉽습니다. 배"
#~ "를 어딘가로 옮겨서 돌리십시오:"

#~ msgid ""
#~ "Ok, so in 2D this looks simple, a position and an angle for a rotation. "
#~ "But remember, we are grown ups here and don't use angles (plus, angles "
#~ "are not even that useful when working in 3D)."
#~ msgstr ""
#~ "2D에서는 단순한 위치 및 회전각으로 보입니다. 하지만 기억하세요, 우리는 여"
#~ "기서 더 나아갔고, 각도는 사용하지 않습니다."

#~ msgid ""
#~ "We should realize that at some point, someone *designed* this spaceship. "
#~ "Be it for 2D in a drawing such as Paint.net, Gimp, Photoshop, etc. or in "
#~ "3D through a 3D DCC tool such as Blender, Max, Maya, etc."
#~ msgstr ""
#~ "우리는 언젠가 누군가가 이 우주선을 *설계* 했다는 것을 깨달아야 합니다.  "
#~ "Paint.net, Gimp, Photoshop 등과 같은 도면에서 2D로 제작하거나 Blender, "
#~ "Max, Maya 등과 같은 3D DCC 도구를 통해 3D로 제작해야 합니다."

#~ msgid ""
#~ "When it was designed, it was not rotated. It was designed in its own "
#~ "*coordinate system*."
#~ msgstr ""
#~ "이것은 설계 시 회전하지 않았습니다. 그것은 자체적인 *좌표계 시스템* 으로 "
#~ "설계되었습니다."

#~ msgid ""
#~ "This means that the tip of the ship has a coordinate, the fin has "
#~ "another, etc. Be it in pixels (2D) or vertices (3D)."
#~ msgstr ""
#~ "이것은 우주선의 끝이 좌표를 가지고 있고 판부분은 다른 것을 가지고 있다는 "
#~ "것을 의미합니다. 픽셀(2D) 또는 정점(3D)으로 지정합니다."

#~ msgid "So, let's recall again that the ship was somewhere in space:"
#~ msgstr "그러면, 우주 어딘가에 우주선이 있었다는 것을 회상해봅시다:"

#~ msgid ""
#~ "How did it get there? What moved it and rotated it from the place it was "
#~ "designed to its current position? The answer is... a **transform**, the "
#~ "ship was *transformed* from their original position to the new one. This "
#~ "allows the ship to be displayed where it is."
#~ msgstr ""
#~ "그건 어떻게 그곳에 도착했나요? 무엇을 움직여서 디자인된 위치에서 현재 위치"
#~ "로 회전시킨건가요? 답은... **변환** 입니다. 우주선은 원래 위치에서 새 위치"
#~ "로 *변환* 되었습니다. 이렇게 하면 우주선이 있는 곳에 표시될 수 있습니다."

#~ msgid ""
#~ "But transform is too generic of a term to describe this process. To solve "
#~ "this puzzle, we will superimpose the ship's original design position at "
#~ "their current position:"
#~ msgstr ""
#~ "그러나 변환은 이 과정을 설명하기에는 너무 일반적인 용어입니다. 이 퍼즐을 "
#~ "해결하기 위해 우주선의 원래 설계 위치를 현재 위치에 겹치게 됩니다:"

#~ msgid ""
#~ "So, we can see that the \"design space\" has been transformed too. How "
#~ "can we best represent this transformation? Let's use 3 vectors for this "
#~ "(in 2D), a unit vector pointing towards X positive, a unit vector "
#~ "pointing towards Y positive and a translation."
#~ msgstr ""
#~ "\"설계된 우주\"도 바뀌었습니다. 이러한 변화를 가장 잘 표현할 수 있는 방법"
#~ "은 무엇일까요? 이를 위해 (2D 단위) 3개의 벡터를 사용하겠습니다. X 양수를 "
#~ "가리키는 단위 벡터, Y 양수를 가리키는 단위 벡터 및 변환을 사용합니다."

#~ msgid ""
#~ "Let's call the 3 vectors \"X\", \"Y\" and \"Origin\", and let's also "
#~ "superimpose them over the ship so it makes more sense:"
#~ msgstr ""
#~ "이 세 벡터를 \"X\", \"Y\" 및 \"Origin\"이라고 부르고, 이 세 벡터를 우주선 "
#~ "위에 겹쳐보자:"

#~ msgid ""
#~ "Ok, this is nicer, but it still does not make sense. What do X,Y and "
#~ "Origin have to do with how the ship got there?"
#~ msgstr ""
#~ "좋아요, 이게 더 좋긴 한데, 그래도 말이 안 돼요. X,Y,Origin이 우주선이 어떻"
#~ "게 그곳에 도착했는지와 무슨 관계가 있는걸까요?"

#~ msgid "Well, let's take the point from top tip of the ship as reference:"
#~ msgstr "자, 우주선으로부터 참고할 수 있는 요점부터 말씀드리겠습니다:"

#~ msgid ""
#~ "And let's apply the following operation to it (and to all the points in "
#~ "the ship too, but we'll track the top tip as our reference point):"
#~ msgstr ""
#~ "다음 작업을 여기에 적용해 보겠습니다(그리고 우주선의 모든 지점에도 적용하"
#~ "되, 맨위의 꼭지 부분을 기준점으로 추적해 보겠습니다):"

#~ msgid "Doing this to the selected point will move it back to the center:"
#~ msgstr "이렇게 하면 선택한 지점으로 다시 이동합니다:"

#~ msgid ""
#~ "This was expected, but then let's do something more interesting. Use the "
#~ "dot product of X and the point, and add it to the dot product of Y and "
#~ "the point:"
#~ msgstr ""
#~ "이것은 예상된 것이지만, 좀 더 흥미로운 것을 해봅시다. X와 점의 내적에 Y와 "
#~ "점의 내적을 더해보는 것을 사용합시다:"

#~ msgid ""
#~ "Then what we have is.. wait a minute, it's the ship in its design "
#~ "position!"
#~ msgstr "그럼 우리가 얻는 건.. 잠깐만, 우주선이 설계된 위치에 있습니다!"

#~ msgid ""
#~ "How did this black magic happen? The ship was lost in space, and now it's "
#~ "back home!"
#~ msgstr ""
#~ "어떻게 이런 일이 일어난거죠? 우주선을 우주에서 잃어버렸는데 지금은 돌아왔"
#~ "어요!"

#~ msgid ""
#~ "It might seem strange, but it does have plenty of logic. Remember, as we "
#~ "have seen in the :ref:`doc_vector_math`, what happened is that the "
#~ "distance to X axis, and the distance to Y axis were computed. Calculating "
#~ "distance in a direction or plane was one of the uses for the dot product. "
#~ "This was enough to obtain back the design coordinates for every point in "
#~ "the ship."
#~ msgstr ""
#~ "이상하게 보일지 모르지만, 그것은 많은 논리를 가지고 있습니다. :ref:"
#~ "`doc_vector_math` 에서 보았던 바와 같이 X축까지의 거리와 Y축까지의 거리가 "
#~ "계산되었다는 것을 기억하세요. 방향 또는 평면에서 거리를 계산하는 것은 내적"
#~ "을 사용하는 방법 중 하나입니다. 이것은 우주선 안의 모든 지점에 대한 설계 "
#~ "좌표를 다시 얻기에 충분했습니다."

#~ msgid ""
#~ "So, what we have been working with so far (with X, Y and Origin) is an "
#~ "*Oriented Coordinate System*. X an Y are the **Basis**, and *Origin* is "
#~ "the offset."
#~ msgstr ""
#~ "지금까지 X, Y, 원점과 함께 작업한 것은 *지향적 좌표계* 입니다. X, Y는 "
#~ "**Basis** 이고 *원점* 은 오프셋입니다."

#~ msgid ""
#~ "We know what the Origin is. It's where the 0,0 (origin) of the design "
#~ "coordinate system ended up after being transformed to a new position. "
#~ "This is why it's called *Origin*, But in practice, it's just an offset to "
#~ "the new position."
#~ msgstr ""
#~ "우리는 원점이 무엇인지 압니다. 그것은 설계 좌표계의 0,0(원래)이 새로운 위"
#~ "치로 변환된 후에 종료되는 곳입니다. 이것이 바로 *원점*이라고 불리는 이유지"
#~ "만 실제로는 새로운 위치로의 상쇄에 불과합니다."

#~ msgid ""
#~ "The Basis is more interesting. The basis is the direction of X and Y in "
#~ "the OCS from the new, transformed location. It tells what has changed, in "
#~ "either 2D or 3D. The Origin (offset) and Basis (direction) communicate "
#~ "\"Hey, the original X and Y axes of your design are *right here*, "
#~ "pointing towards *these directions*.\""
#~ msgstr ""
#~ "기저는 더 흥미롭습니다. 기저는 새로운 변환된 위치에서 OCS의 X와 Y의 방향입"
#~ "니다. 그것은 2D나 3D로 무엇이 바뀌었는지 말해줍니다. 원점(오프셋)과 베이스"
#~ "(방향)는 \"너의 설계된 원래 X와 Y 축은 바로 *여기에 있어* *이러한 방향* "
#~ "을 가리킵니다.\""

#~ msgid ""
#~ "So, let's change the representation of the basis. Instead of 2 vectors, "
#~ "let's use a *matrix*."
#~ msgstr ""
#~ "그러면, 기저의 표현을 바꿔보겠습니다. 2개의 벡터 대신에 *matrix* 를 사용합"
#~ "니다."

#~ msgid ""
#~ "The vectors are up there in the matrix, horizontally. The next problem "
#~ "now is that.. what is this matrix thing? Well, we'll assume you've never "
#~ "heard of a matrix."
#~ msgstr ""
#~ "벡터는 위쪽에 수평으로 있습니다. 다음 문제는.. 이 매트릭스란 무엇일까요?? "
#~ "음, 우리는 당신이 매트릭스에 대해 들어본 적이 없다고 가정하겠습니다."

#~ msgid "Transforms in Godot"
#~ msgstr "Godot 에서의 변환"

#~ msgid ""
#~ "This tutorial will not explain matrix math (and their operations) in "
#~ "depth, only its practical use. There is plenty of material for that, "
#~ "which should be a lot simpler to understand after completing this "
#~ "tutorial. We'll just explain how to use transforms."
#~ msgstr ""
#~ "본 튜토리얼에서는 행렬 수학(및 그 연산)을 실제로 사용하기만 하고 자세히 설"
#~ "명하지는 않습니다. 이 튜토리얼을 완수한 후 이해하기 훨씬 더 간단할 수 있습"
#~ "니다. 변환 사용법에 대해 설명하겠습니다."

#, fuzzy
#~ msgid ""
#~ ":ref:`class_Transform2D` is a 3x2 matrix. It has 3 Vector2 elements and "
#~ "it's used for 2D. The \"X\" axis is the element 0, \"Y\" axis is the "
#~ "element 1 and \"Origin\" is element 2. It's not divided in basis/origin "
#~ "for convenience, due to its simplicity."
#~ msgstr ""
#~ ":ref:`class_Transform2D` 는 3x2 행렬입니다. 이것은 세 가지 Vector2 원소들"
#~ "이 있고 2D에 사용됩니다. \"X\" 축은 원소 0, \"Y\" 축은 원소 1이고 \"원점"
#~ "\"은 원소 2입니다. 단순성 때문에 편의상 기저/원점으로 구분되지 않습니다."

#~ msgid ""
#~ "Most operations will be explained with this datatype (Transform2D), but "
#~ "the same logic applies to 3D."
#~ msgstr ""
#~ "대부분의 연산들은 이 데이터 타입(Transform2D)으로 설명되지만 3D에도 동일"
#~ "한 논리가 적용됩니다."

#~ msgid "Identity"
#~ msgstr "항등성"

#~ msgid "An important transform is the \"identity\" matrix. This means:"
#~ msgstr "중요한 변환은 항등행렬이다. 이것의 의미는:"

#~ msgid "'X' Points right: Vector2(1,0)"
#~ msgstr "X점 오른쪽: 벡터2(1.0)"

#~ msgid "'Y' Points up (or down in pixels): Vector2(0,1)"
#~ msgstr "'Y' 점 위(또는 픽셀 단위 아래): Vector2(0,1)"

#~ msgid "'Origin' is the origin Vector2(0,0)"
#~ msgstr "'원점'은 원점 벡터2(0,0)입니다"

#~ msgid ""
#~ "It's easy to guess that an *identity* matrix is just a matrix that aligns "
#~ "the transform to its parent coordinate system. It's an *OCS* that hasn't "
#~ "been translated, rotated or scaled."
#~ msgstr ""
#~ "*항등* 행렬은 상위 좌표계에 대한 변환을 조정하는 행렬일 뿐입니다. *OCS*는 "
#~ "변환, 회전 또는 스케일링되지 않았습니다."

#~ msgid "Operations"
#~ msgstr "연산"

#~ msgid "Rotation"
#~ msgstr "Rotation"

#~ msgid "Rotating Transform2D is done by using the \"rotated\" function:"
#~ msgstr "Rotated(회전) 기능을 사용하여 Transform2D를 회전합니다:"

#~ msgid "Translation"
#~ msgstr "변환"

#~ msgid ""
#~ "There are two ways to translate a Transform2D, the first one is moving "
#~ "the origin:"
#~ msgstr ""
#~ "Transform2D를 변환하는 두 가지 방법이 있습니다. 첫 번째 방법은 원점을 이동"
#~ "하는 것입니다:"

#~ msgid "This will always work in global coordinates."
#~ msgstr "이 기능은 항상 전반적인 좌표에 적용됩니다."

#~ msgid ""
#~ "If instead, translation is desired in *local* coordinates of the matrix "
#~ "(towards where the *basis* is oriented), there is the :ref:`Transform2D."
#~ "translated() <class_Transform2D_method_translated>` method:"
#~ msgstr ""
#~ "대신 행렬의 *지역* 좌표에 변환을 원하는 경우(*기저* 가 있는 위치), :ref:"
#~ "`Transform2D.translated() <class_Transform2D_method_translated>`방법이 있"
#~ "다:"

#~ msgid ""
#~ "You could also transform the global coordinates to local coordinates "
#~ "manually:"
#~ msgstr "전역 좌표를 수동으로 지역 좌표로 변환할 수도 있습니다:"

#~ msgid ""
#~ "But even better, there are helper functions for this as you can read in "
#~ "the next sections."
#~ msgstr ""
#~ "더군다나, 다음 섹션에서 읽을 수 있는 것처럼 이것에 대한 도우미 기능도 있"
#~ "다."

#~ msgid "Local to global coordinates and vice versa"
#~ msgstr "지역에서 전역 좌표로 또는 그 반대로"

#~ msgid ""
#~ "There are helper methods for converting between local and global "
#~ "coordinates."
#~ msgstr "지역 좌표와 전역 좌표 사이를 변환하는 도우미 방법이 있습니다."

#~ msgid ""
#~ "There are :ref:`Node2D.to_local() <class_Node2D_method_to_local>` and :"
#~ "ref:`Node2D.to_global() <class_Node2D_method_to_global>` for 2D as well "
#~ "as :ref:`Spatial.to_local() <class_Spatial_method_to_local>` and :ref:"
#~ "`Spatial.to_global() <class_Spatial_method_to_global>` for 3D."
#~ msgstr ""
#~ "2D를 위한 것에는 :ref:`Node2D.to_local() <class_Node2D_to_local>` 와 :ref:"
#~ "`Node2D.to_global() <class_Node2D_method_to_global>` , 뿐만 아니라 3D를 위"
#~ "한 :ref:`Spatial.to_local() <class_Spatial_to_local>` 와 :ref:`Spatial."
#~ "to_global() <class_Spatial_method_to_global>` 방법들이 있습니다."

#~ msgid ""
#~ "A matrix can be scaled too. Scaling will multiply the basis vectors by a "
#~ "vector (X vector by x component of the scale, Y vector by y component of "
#~ "the scale). It will leave the origin alone:"
#~ msgstr ""
#~ "행렬도 스케일링할 수 있습니다. 스케일링은 기저에 벡터를 곱할 것입니다(스케"
#~ "일링의 X 성분별 X 벡터, 스케일의 y 성분별 Y 벡터). 원점은 그대로 둡니다:"

#~ msgid ""
#~ "These kind of operations in matrices are accumulative. It means every one "
#~ "starts relative to the previous one. For those who have been living on "
#~ "this planet long enough, a good reference of how transform works is this:"
#~ msgstr ""
#~ "이런 종류의 행렬에서의 연산들은 축적되어 있습니다. 이것은 모든 사람들이 이"
#~ "전 것과 비교하여 시작한다는 것을 의미합니다. 이 지구에서 충분히 오래 살아"
#~ "온 사람들에게, 변환이 어떻게 작용하는지에 대한 좋은 참조는 다음과 같습니"
#~ "다:"

#~ msgid ""
#~ "A matrix is used similarly to a turtle. The turtle most likely had a "
#~ "matrix inside (and you are likely learning this many years *after* "
#~ "discovering Santa is not real)."
#~ msgstr ""
#~ "행렬은 거북이와 비슷하게 사용됩니다. 거북이는 안에 행렬을 가지고 있을 가능"
#~ "성이 높습니다. (그리고 여러분은 산타는 진짜가 아니라는 것을 알게 된 후 수"
#~ "년 동안 이 사실을 배우게 될 것입니다)."

#~ msgid ""
#~ "Transform is the act of switching between coordinate systems. To convert "
#~ "a position (either 2D or 3D) from \"designer\" coordinate system to the "
#~ "OCS, the \"xform\" method is used."
#~ msgstr ""
#~ "변환은 좌표계 사이를 전환하는 행위입니다. 위치(2D 또는 3D)를 \"설계자\" 좌"
#~ "표계에서 OCS로 변환하려면 \"xform\" 방법을 사용합니다."

#~ msgid "And only for basis (no translation):"
#~ msgstr "그리고 오직 기저를 위한(변환 없음):"

#~ msgid "Inverse transform"
#~ msgstr "역변환"

#~ msgid ""
#~ "To do the opposite operation (what we did up there with the rocket), the "
#~ "\"xform_inv\" method is used:"
#~ msgstr ""
#~ "반대되는 연산을 하기 위해 (우리가 위에서 로켓 가지고 했던 것) \"xform_inv"
#~ "\" 방법이 사용됩니다:"

#~ msgid "Only for Basis:"
#~ msgstr "기저에만 해당:"

#~ msgid "Orthonormal matrices"
#~ msgstr "직교 행렬"

#~ msgid ""
#~ "However, if the matrix has been scaled (vectors are not unit length), or "
#~ "the basis vectors are not orthogonal (90°), the inverse transform will "
#~ "not work."
#~ msgstr ""
#~ "그러나 만약 행렬의 벡터가 단위 길이가 아니거나 기본 벡터가 직교(90°)가 아"
#~ "닌 경우 역변환이 작동하지 않습니다."

#~ msgid ""
#~ "In other words, inverse transform is only valid in *orthonormal* "
#~ "matrices. For this, these cases an affine inverse must be computed."
#~ msgstr ""
#~ "즉, 역변환은 *직교* 행렬에서만 유효합니다.  이러한 경우, 아핀 역을 계산해"
#~ "야만 한다."

#~ msgid ""
#~ "The transform, or inverse transform of an identity matrix will return the "
#~ "position unchanged:"
#~ msgstr "항등 행렬의 변환 또는 역 변환은 위치를 변경하지 않고 반환합니다:"

#~ msgid "Affine inverse"
#~ msgstr "아핀 역"

#~ msgid ""
#~ "The affine inverse is a matrix that does the inverse operation of another "
#~ "matrix, no matter if the matrix has scale or the axis vectors are not "
#~ "orthogonal. The affine inverse is calculated with the affine_inverse() "
#~ "method:"
#~ msgstr ""
#~ "아핀 역은 행렬에 축척이 있거나 축 벡터가 직교하지 않더라도 다른 행렬의 역 "
#~ "연산을 수행하는 행렬입니다. 아핀 역은 the affine_inverse() 방법으로 계산됩"
#~ "니다:"

#~ msgid "If the matrix is orthonormal, then:"
#~ msgstr "만약 행렬이 직교한다면:"

#~ msgid "Matrix multiplication"
#~ msgstr "행렬 곱"

#~ msgid ""
#~ "Matrices can be multiplied. Multiplication of two matrices \"chains"
#~ "\" (concatenates) their transforms."
#~ msgstr "행렬은 곱해질 수 있습니다. 두 행렬의 곱은 그들의 변환을 연결합니다."

#~ msgid ""
#~ "However, as per convention, multiplication takes place in reverse order."
#~ msgstr "그러나 관례에 따라 곱은 역순으로 진행됩니다."

#~ msgid "To make it a little clearer, this:"
#~ msgstr "조금 더 깔끔하게 만들면, 이것이다:"

#~ msgid "Is the same as:"
#~ msgstr "이것은 다음과 같다:"

#~ msgid "However, this is not the same:"
#~ msgstr "그러나 이것은 같지 않다:"

#~ msgid "Because in matrix math, A * B is not the same as B * A."
#~ msgstr "왜냐하면 행렬 연산에서, A*B는 B*A와 같지 않다."

#~ msgid "Multiplication by inverse"
#~ msgstr "역 곱하기"

#~ msgid "Multiplying a matrix by its inverse, results in identity:"
#~ msgstr "행렬에 그것의 역을 곱하는 것의 결과는 그것의 항등행렬이다:"

#~ msgid "Multiplication by identity"
#~ msgstr "항등행렬 곱하기"

#~ msgid ""
#~ "Multiplying a matrix by identity, will result in the unchanged matrix:"
#~ msgstr "항등행렬을 행렬에 곱하면 결과는 원래 행렬에서 변화가 없을 것이다:"

#~ msgid "Matrix tips"
#~ msgstr "행렬 팁"

#~ msgid ""
#~ "When using a transform hierarchy, remember that matrix multiplication is "
#~ "reversed! To obtain the global transform for a hierarchy, do:"
#~ msgstr ""
#~ "변환 층을 사용할 때 행렬 곱셈이 반전된다는 점을 기억하세요! 층에 대한 전"
#~ "역 변환을 얻으려면 다음을 수행합니다:"

#~ msgid "For 3 levels:"
#~ msgstr "3단계:"

#~ msgid ""
#~ "To make a matrix relative to the parent, use the affine inverse (or "
#~ "regular inverse for orthonormal matrices)."
#~ msgstr ""
#~ "상위에 상대적인 행렬을 만들려면 항렬 역(또는 직교 행렬의 경우 정규 역)을 "
#~ "사용합니다."

#~ msgid "Revert it just like the example above:"
#~ msgstr "위의 예와 같이 되돌리시오:"

#~ msgid ""
#~ "OK, hopefully this should be enough! Let's complete the tutorial by "
#~ "moving to 3D matrices."
#~ msgstr ""
#~ "좋아요, 이 정도면 됐어요! 튜토리얼을 완료하고 3D 행렬로 이동하겠습니다."

#~ msgid "Matrices & transforms in 3D"
#~ msgstr "3D에서의 행렬과 변환"

#~ msgid ""
#~ "As mentioned before, for 3D, we deal with 3 :ref:`Vector3 "
#~ "<class_Vector3>` vectors for the rotation matrix, and an extra one for "
#~ "the origin."
#~ msgstr ""
#~ "앞서 언급한 바와 같이 3D의 경우 :ref:`Vector3 <class_Vector3>`  회전 행렬"
#~ "용 벡터 3개와 원점용 벡터 1개를 추가로 취급합니다."

#, fuzzy
#~ msgid ""
#~ "Godot has a special type for a 3x3 matrix, named :ref:`Basis "
#~ "<class_Basis>`. It can be used to represent a 3D rotation and scale. Sub "
#~ "vectors can be accessed as:"
#~ msgstr ""
#~ "고도는 3x3 매트릭스의 특별한 유형을 가지고 있습니다. 이름 :ref:`Basis "
#~ "<class_basis>`. 이것은 3D 회전 및 스케일을 나타내는 데 사용할 수 있습니"
#~ "다. 다음과 같이 하위 벡터에 접근할 수 있습니다:"

#~ msgid "Or, alternatively as:"
#~ msgstr "또는 대신에:"

#~ msgid "The Identity Basis has the following values:"
#~ msgstr "항등 기저는 다음과 같은 값을 가집니다:"

#~ msgid "And can be accessed like this:"
#~ msgstr "다음과 같이 접근할 수 있습니다:"

#~ msgid "Rotation in 3D"
#~ msgstr "3D에서의 회전"

#~ msgid ""
#~ "Rotation in 3D is more complex than in 2D (translation and scale are the "
#~ "same), because rotation is an implicit 2D operation. To rotate in 3D, an "
#~ "*axis*, must be picked. Rotation, then, happens around this axis."
#~ msgstr ""
#~ "3D에서의 회전은 암시적인 2D 연산이므로 3D 회전은 2D보다 더 복잡합니다(변"
#~ "환 및 배율은 동일). 3D로 회전하려면 *축* 을 선택해야 합니다. 그런 다음 이 "
#~ "축을 중심으로 회전합니다."

#~ msgid ""
#~ "The axis for the rotation must be a *normal vector*. As in, a vector that "
#~ "can point to any direction, but length must be one (1.0)."
#~ msgstr ""
#~ "회전 축은 *법선 벡터* 이어야 합니다. 임의의 방향을 가리킬 수 있지만 길이"
#~ "는 하나(1.0)여야 합니다."

#~ msgid ""
#~ "To add the final component to the mix, Godot provides the :ref:`Transform "
#~ "<class_Transform>` type. Transform has two members:"
#~ msgstr ""
#~ "믹스에 최종 구성요소를 추가하기 위해 고도는 :ref:\"Transform "
#~ "<class_Transform> 유형을 제공합니다. Transform에는 두 개의 멤버가 있습니"
#~ "다:"

#~ msgid "*basis* (of type :ref:`Basis <class_Basis>`)"
#~ msgstr "*기저* (of type :ref:`Basis <class_Basis>`)"

#~ msgid "*origin* (of type :ref:`Vector3 <class_Vector3>`)"
#~ msgstr "*원점* (of type :ref:`Vector3 <class_Vector3>`)"

#~ msgid ""
#~ "Any 3D transform can be represented with Transform, and the separation of "
#~ "basis and origin makes it easier to work translation and rotation "
#~ "separately."
#~ msgstr ""
#~ "모든 3D 변환은 Transform(변환)으로 나타낼 수 있으며, 기준 및 원점을 분리하"
#~ "면 변환 및 회전을 개별적으로 더 쉽게 수행할 수 있습니다."

#~ msgid "An example:"
#~ msgstr "예:"

#, fuzzy
#~ msgid "Android directories"
#~ msgstr "벡터의 합"

#, fuzzy
#~ msgid "Using it from GDScript"
#~ msgstr "GDScript에서 사용법"

#~ msgid "Future"
#~ msgstr "미래"

#~ msgid ""
#~ "Godot supports Collada via the `OpenCollada <https://github.com/"
#~ "KhronosGroup/OpenCOLLADA/wiki/OpenCOLLADA-Tools>`_ exporter (Maya, "
#~ "3DSMax)."
#~ msgstr ""
#~ "Godot는 `OpenCollada <https://github.com/KhronosGroup/OpenCOLLADA/wiki/"
#~ "OpenCOLLADA-Tools>`_ 내보내기를 통해 Collada를 지원합니다 (Maya, 3DSMax)."

#~ msgid ""
#~ "If you are using Blender, take a look at our own `Better Collada Exporter "
#~ "<https://godotengine.org/download>`_."
#~ msgstr ""
#~ "Blender를 사용한다면, 우리의 `Better Collada Exporter <https://"
#~ "godotengine.org/download>`_\\ 를 참고하세요."

#~ msgid ""
#~ "FBX SDK has a `restrictive license <https://www.blender.org/bf/"
#~ "Autodesk_FBX_License.rtf>`_, that is incompatible with the `open license "
#~ "<https://opensource.org/licenses/MIT>`_ provided by Godot. That being "
#~ "said, FBX support could still be provided by third parties as a plugin. "
#~ "(See Plugins question below.)"
#~ msgstr ""
#~ "FBX SDK는 `제한적인 라이센스 <http://www.blender.org/bf/"
#~ "Autodesk_FBX_License.rtf>`_\\ 를 갖고 있기 때문에, Godot의 `오픈 라이선스 "
#~ "<http://opensource.org/licenses/MIT>`_\\ 와 맞지 않습니다. 즉, FBX 지원은 "
#~ "아직 제 3자의 플러그인으로만 사용할 수 있습니다. (아래의 플러그인 질문을 "
#~ "참고하세요.)"

#~ msgid ""
#~ "Lossy Compression: For games with lots of large 2D assets, lossy "
#~ "compression can be a great choice. It has some artifacting, but less than "
#~ "VRAM and the file size is almost a tenth of Lossless."
#~ msgstr ""
#~ "손실 압축: 많은 양의 2D 애셋을 가진 게임에게, 손실 압축은 좋은 선택일 수 "
#~ "있습니다. 인위적 처리를 갖지만, VRAM보다 더 약하면서 파일 크기는 거의 무손"
#~ "실의 10분의 1이 됩니다."

#~ msgid "|image15|"
#~ msgstr "|image15|"

#~ msgid "|image16|"
#~ msgstr "|image16|"

#~ msgid "|image20|"
#~ msgstr "|image20|"

#~ msgid "|image17|"
#~ msgstr "|image17|"

#~ msgid "|image18|"
#~ msgstr "|image18|"

#~ msgid "|image19|"
#~ msgstr "|image19|"

#~ msgid "Creating a new project"
#~ msgstr "새 프로젝트 만들기"

#~ msgid ""
#~ "Let's make these abstract concepts more concrete with an example. "
#~ "Following a long tradition in tutorials, we'll start with a \"Hello World"
#~ "\" project. This will introduce us to using the editor."
#~ msgstr ""
#~ "예제를 통해 이런 추상적인 개념들을 더 구체화해봅시다. 튜토리얼의 오랜 전통"
#~ "에 따라 \"Hello World\" 프로젝트를 시작하겠습니다. 이를 통해 편집기를 사용"
#~ "하는 법을 알게 될 것입니다."

#~ msgid ""
#~ "If you run the Godot executable outside of a project, the Project Manager "
#~ "appears. This helps developers manage their projects."
#~ msgstr ""
#~ "프로젝트 외부에서 Godot 실행 파일을 실행하면, 프로젝트 매니저가 뜹니다. 개"
#~ "발자는 프로젝트 매니저로 프로젝트들을 관리할 수 있습니다."

#~ msgid ""
#~ "To create a new project, click the \"New Project\" option. Choose and "
#~ "create a path for the project and specify the project name."
#~ msgstr ""
#~ "새 프로젝트를 만들려면 \"새 프로젝트(New Project)\" 버튼을 클릭하세요. 프"
#~ "로젝트의 경로를 지정하고 프로젝트 이름을 지정하세요."

#~ msgid ""
#~ "Once you've created the \"New Project\", then open it. This will open the "
#~ "Godot editor:"
#~ msgstr ""
#~ "\"Nee Project\"를 만들고 프로젝트를 엽니다. 그러면 Godot 편집기가 열립니"
#~ "다:"

#~ msgid "int"
#~ msgstr "int"

#~ msgid "Code structure"
#~ msgstr "코드 구조"

#~ msgid "Indent type: Tabs *(editor default)*"
#~ msgstr "들여쓰기 유형: Tabs *(편집기 기본)*"

#~ msgid "Indent size: 4 *(editor default)*"
#~ msgstr "들여쓰기 크기: 4 *(편집기 기본)*"

#~ msgid "**NEVER**:"
#~ msgstr "**절대 금지**:"

#~ msgid "Use PascalCase: ``extends KinematicBody``"
#~ msgstr "파스칼 표기법(PascalCase)을 사용: ``extends KinematicBody``"

#~ msgid "Use snake\\_case: ``get_node()``"
#~ msgstr "스네이크 표기법(snake\\_case)을 사용: ``get_node()``"

#~ msgid ""
#~ "These signals can then be connected either in the editor or from code "
#~ "with ``Connect``."
#~ msgstr ""
#~ "이 시그널들은 ``Connect``\\ 로 코드나 편집기에서 한 쪽으로 연결될 수 있습"
#~ "니다."

#~ msgid "Formatting conventions"
#~ msgstr "형식 규칙"

#~ msgid ""
#~ "**global resource allocation**: If all objects' data and processing is "
#~ "centralized from the start, then one must either..."
#~ msgstr ""
#~ "**전역 리소스 할당**: 모든 객체의 데이터와 처리가 처음부터 중앙 집중화 된"
#~ "다면, 다음 중 하나를 거쳐야 합니다..."

#~ msgid "risk under-allocating resources which might lead to faulty behavior."
#~ msgstr "결함있는 행동으로 이어질 수 있는 자원을 과소 할당하게 됩니다."

#~ msgid ""
#~ "Ex: Have too few AudioStreamPlayers in the object pool. Sound doesn't "
#~ "play or it interrupts another sound."
#~ msgstr ""
#~ "예: 객체 풀에 AudioStreamPlayer가 너무 적게 있습니다. 소리가 재생되지 않거"
#~ "나 다른 소리를 방해할 수 있습니다."

#~ msgid ""
#~ "over-allocate resources and use more memory/processing than it needs."
#~ msgstr "과다 할당한 리소스로 필요보다 많은 메모리/처리를 사용합니다."

#~ msgid ""
#~ "Ex: Have an arbitrarily large number of AudioStreamPlayers, with many of "
#~ "them idling away and not doing anything."
#~ msgstr ""
#~ "예: 임의로 많은 수의 AudioStreamPlayer가 있습니다, 이들 중 대부분이 휴식 "
#~ "상태이고 아무 것도 하지 않습니다."

#~ msgid ""
#~ "have each object that needs an AudioStreamPlayer register exactly how "
#~ "many it needs and for which sounds. This defeats the purpose of using a "
#~ "3rd party though; it is now coupled to each object, just as a child node "
#~ "would have been. One has added an unnecessary middleman to the equation."
#~ msgstr ""
#~ "AudioStreamPlayer이 필요한 각 객체마다 얼마나 많이, 그리고 어떤 소리가 필"
#~ "요한지 등록하게 됩니다. 이것은 제 3자를 사용하는 목적을 없애버립니다; 이"
#~ "제 소리는 자식 노드처럼 각 객체에 연결되어버립니다. 누군가는 여기에 불필요"
#~ "한 중개자를 추가합니다."

#~ msgid ""
#~ "Each scene accesses only its own nodes. Now, if there is a bug, tracing "
#~ "which node is responsible (probably the root node of the scene), and "
#~ "where in the code it's making the problematic call (locate where the code "
#~ "references the given node) is going to be much easier."
#~ msgstr ""
#~ "각 씬은 자체 노드에만 접근합니다. 이제 버그가 나타나면 (아마 씬의 루트 노"
#~ "드이겠지만) 어떤 노드에 책임이 있는 지를 추적하기 쉬워지고, 코드에서 문제"
#~ "가 되는 호출 (주어진 코드를 참조하는 코드가 위치한 곳)을 훨씬 더 쉽게 찾"
#~ "을 수 있습니다."

#~ msgid ""
#~ "Each scene knows exactly how many resources it needs for the task it "
#~ "performs. No waste of memory or processing due to a lack of information."
#~ msgstr ""
#~ "각 씬은 실행하기 위해 얼마나 많은 리소스가 필요한지 확실하게 압니다. 정보 "
#~ "부족으로 인한 메모리나 처리의 낭비가 없습니다."

#~ msgid ""
#~ "The typical justifications for the Autoload include, \"I have common Xs "
#~ "that involve many nodes across many scenes, and I want each scene to have "
#~ "X.\""
#~ msgstr ""
#~ "오토로드의 일반적인 정당성은 이런 것입니다, \"나는 여러 씬에 많은 노드가 "
#~ "있는 X들을 갖고 있습니다, 그리고 각 씬이 X를 갖고 있도록 하고 싶습니다.\""

#~ msgid ""
#~ "If X is a function, then the solution is to create a new type of :ref:"
#~ "`Node <class_Node>` that deals with providing that feature for an "
#~ "individual scene or node subtree."
#~ msgstr ""
#~ "X가 함수라면, 각 씬이나 노드 하위 트리에 기능을 제공하는 :ref:`Node "
#~ "<class_Node>`\\ 의 새로운 타입을 만드는 것으로 해결합니다."

#~ msgid ""
#~ "If X is data, then the solution is either 1) to create a new type of :ref:"
#~ "`Resource <class_Resource>` to share the data, or 2) to store the data in "
#~ "an object to which each node has access (nodes within a scene can use "
#~ "`get_owner()` to fetch the scene root for example)."
#~ msgstr ""
#~ "X가 데이터라면, 해결 방법은 두 가지로, 1) :ref:`Resource <class_Resource>`"
#~ "\\ 의 새로운 타입을 만들어 데이터를 공유하거나, 2) 각 노드가 접근할 수 있"
#~ "는 객체에 데이터를 저장하는 것입니다 (예를 들어 씬이 있는 노드는 "
#~ "`get_owner()`\\ 를 사용하여 씬 루트를 가져올 수 있습니다)."

#~ msgid ""
#~ "**Static Data**: if you need static data, i.e. data that should be "
#~ "associated with a class (so there is only ever one copy of the data), "
#~ "then autoloads are good opportunities for that. Static data doesn't exist "
#~ "in Godot's scripting API, so autoload singletons are the next best thing. "
#~ "If one creates a class as an autoload, and never creates another copy of "
#~ "that class within a scene, then it will function in place of a formal "
#~ "singleton API."
#~ msgstr ""
#~ "**정적 데이터**: 클래스에 반드시 연관되어야 하는 (그래서 오직 하나의 데이"
#~ "터 사본만 있는) 정적 데이터가 필요하다면, 오토로드가 좋은 기회입니다. 정"
#~ "적 데이터는 Godot의 스크립팅 API에 존재하지 않기 때문에, 오토로드 싱글톤"
#~ "이 차선책이 됩니다. 클래스를 오토로드로 생성하고, 씬 내에서 클래스의 사본"
#~ "을 생성하지 않는다면, 그것은 형식적인 싱글톤 API를 대신할 것입니다."

#~ msgid ""
#~ "**Convenience**: autoloaded nodes have a global variable for their name "
#~ "generated in GDScript. This can be very convenient for defining objects "
#~ "that should always exist, but which need object instance information. The "
#~ "alternative is to create a namespace script: a script that's purpose is "
#~ "only to load and create constants to access other Script or PackedScene "
#~ "resources, resulting in something like ``MyAutoload.MyNode.new()``."
#~ msgstr ""
#~ "**편의**: 오토로드된 노드는 GDScript에 그들의 이름으로 된 전역 변수를 갖습"
#~ "니다. 이것은 항상 존재해야 하지만 객체 인스턴스 정보가 필요한 객체를 정의"
#~ "하는 데 매우 편리합니다. 대안은 네임스페이스 스크립트를 만드는 것입니다: "
#~ "스크립트는 다른 스크립트나 PackedScene 리소스에 접근하기 위해 상수를 불러"
#~ "오고 생성하는 것으로도, ``MyAutoload.MyNode.new()``\\ 와 같은 결과를 낳습"
#~ "니다."

#~ msgid ""
#~ "Note that the introduction of script classes in Godot 3.1 questions the "
#~ "validity of this reason. With them, one can access scripts using an "
#~ "explicit name from GDScript. Using an autoload to get to a namespace "
#~ "script becomes unnecessary, e.g. ``MyScriptClass.MyPreloadedScript."
#~ "new()``."
#~ msgstr ""
#~ "Godot 3.1에서 스크립트 클래스를 도입하면서 이런 이유의 정당성은 의문이 됩"
#~ "니다. 스크립트 클래스로 GDScript에서 명시적 이름을 사용해 스크립트에 접근"
#~ "할 수 있습니다. 오토로드를 사용하여 네임스페이스 스크립트를 갖는 행위는 불"
#~ "필요해졌습니다, 예시:  ``MyScriptClass.MyPreloadedScript.new()``."

#~ msgid ""
#~ "See the `animation panel reference <#animation-panel-reference>`__ below "
#~ "for details."
#~ msgstr ""
#~ "자세한 설명은 아래의 `animation panel reference <#animation-panel-"
#~ "reference>`__ 를 보세요."

#~ msgid ""
#~ "The methods ``object Object.Call(string method, params object[] args)``, "
#~ "``object Object.Get(string field)`` and ``object Object.Set(string field, "
#~ "object value)`` are provided to communicate with instances of other "
#~ "scripting languages via the Variant API."
#~ msgstr ""
#~ "메서드 ``object Object.call(string method, params object[] args)``, "
#~ "``object Object.get(string field)`` 그리고 ``object Object.set(string "
#~ "field, object value)``\\ 는 Variant API를 통해 다른 스크립팅 언어의 인스턴"
#~ "스와 소통하기 위해 제공됩니다."

#, fuzzy
#~ msgid "VR Starter Tutorial Part Two"
#~ msgstr "VR 초심자 튜토리얼"

#~ msgid ""
#~ "In the bottom-left are the key things you need to create a connection: a "
#~ "node which implements the method you want to trigger (represented here as "
#~ "a NodePath) and the name of the method to trigger."
#~ msgstr ""
#~ "왼쪽 아래는 연결을 만들기 위한 핵심 사항이 있습니다: (노드 경로(NodePath)"
#~ "로 표현된) 조절하고 싶은 메서드가 있는 노드와 그 메서드의 이름입니다."

#~ msgid ""
#~ "The top-left section displays a list of your scene's nodes with the "
#~ "emitting node's name highlighted in red. Select the \"Panel\" node here. "
#~ "When you select a node, the NodePath at the bottom will automatically "
#~ "update to point to a relative path from the emitting node to the selected "
#~ "node."
#~ msgstr ""
#~ "왼쪽 위 구역은 씬 노드 목록을 보여주며 방출하는 노드의 이름은 빨갛게 강조"
#~ "됩니다. \"Panel\" 노드를 선택하세요. 노드를 선택하면 아래의 노드 경로"
#~ "(NodePath)가 자동으로 업데이트됩니다. 방출하는 노드부터 선택한 노드까지 상"
#~ "대적인 경로를 가리킵니다."

#~ msgid ""
#~ "By default, the method name will contain the emitting node's name "
#~ "(\"Button\" in this case), resulting in "
#~ "``_on_[EmitterNode]_[signal_name]``. If you do have the \"Make Function\" "
#~ "check button checked, then the editor will generate the function for you "
#~ "before setting up the connection."
#~ msgstr ""
#~ "기본적으로 메서드의 이름은 방출하는 노드의 이름을 포함합니다. "
#~ "``_on_[EmitterNode]_[signal_name]``\\ 으로 표시됩니다 (이 경우에 "
#~ "[EmitterNode]는 \"Button\"이죠). 만일 \"함수 만들기(Make Function)\" 버튼"
#~ "이 체크되어 있다면, 편집기는 연결을 설정하기 전에 함수를 만듭니다."

#~ msgid ""
#~ "Now click on ``MobTimer`` in the scene window then head to inspector "
#~ "window, switch to node view then click on ``timeout()`` and connect the "
#~ "signal."
#~ msgstr ""
#~ "이제 씬 창에서 ``MobTimer`` 를 클릭하고 인스펙터 창으로 가서, 노드 화면으"
#~ "로 바꾼 후 ``timeout()`` 을 클릭하고 시그널을 연결합니다."

#~ msgid ""
#~ "If a folder shouldn't be imported into Godot, an exception can be made "
#~ "with a .gdignore file."
#~ msgstr ""
#~ "Godot로 폴더를 가져오지 않는다면, .gdignore 파일과 함께 예외가 만들어질 "
#~ "수 있습니다."

#~ msgid "DAE (COLLADA), which is currently the most mature workflow."
#~ msgstr "DAE (COLLADA), 현재 가장 성숙한 워크플로입니다."

#, fuzzy
#~ msgid ""
#~ "glTF 2.0. Both text and binary formats are supported. Godot has full "
#~ "support for it, but the format is new and gaining traction."
#~ msgstr ""
#~ "GLTF 2.0. 텍스트와 이진 형식 모두 지원됩니다. Godot는 이를 완벽하게 지원하"
#~ "지만, 형식은 이제 막 추진력을 얻고 있습니다."

#~ msgid "Why not FBX?"
#~ msgstr "FBX는 왜 안 되죠?"

#~ msgid ""
#~ "Most game engines use the FBX format for importing 3D scenes, which is "
#~ "definitely one of the most standardized in the industry. However, this "
#~ "format requires the use of a closed library from Autodesk, which is "
#~ "distributed with more restrictive licensing terms than Godot."
#~ msgstr ""
#~ "대부분의 게임 엔진은 3D 씬을 가져오기 위해 FBX 형식을 사용합니다, 확실하"
#~ "게 업계에서 가장 표준화된 형식이죠. 하지만 이 형식은 Autodesk에서 닫힌 라"
#~ "이브러리를 사용해야 하는데, Godot보다 더 제한적인 라이선스 제약에서 배포됩"
#~ "니다."

#~ msgid ""
#~ "The plan is, sometime in the future, to offer a binary plug-in using "
#~ "GDNative."
#~ msgstr ""
#~ "언젠가 미래에 세운 계획은, GDNative를 사용해 이진 플러그인을 제공하는 것입"
#~ "니다."

#~ msgid "How to make various items that can be used in VR."
#~ msgstr "VR에서 사용할 수 있는 다양한 아이템을 만드는 법."

#~ msgid ""
#~ "This tutorial assumes you have experience working with the Godot editor, "
#~ "have basic programming experience in GDScript, and have basic 3D game "
#~ "development experience."
#~ msgstr ""
#~ "이 튜토리얼은 당신이 Godot 편집기로 작업하면서, GDScript에 대한 기초 프로"
#~ "그래밍 경험과 기초 3D 게임 개발 경험이 있다고 가정합니다."

#~ msgid ""
#~ "You can find the start assets for this tutorial here: :download:"
#~ "`VR_Starter_Tutorial_Start.zip <files/VR_Starter_Tutorial_Start.zip>`"
#~ msgstr ""
#~ "다음은 이 튜토리얼을 위한 시작 애셋입니다: :download:"
#~ "`VR_Starter_Tutorial_Start.zip <files/VR_Starter_Tutorial_Start.zip>`"

#~ msgid ""
#~ "The provided starter assets contain some 3D models, sounds, and a few "
#~ "scenes already set up and configured for this tutorial."
#~ msgstr ""
#~ "제공되는 시작 애셋은 몇 가지 3D 모델, 소리, 그리고 미리 설정되고 이 튜토리"
#~ "얼에 맞게 구성된 씬들이 있습니다."

#, fuzzy
#~ msgid ""
#~ "Firstly, open up ``Game.gd`` and add the following additional class "
#~ "variables:"
#~ msgstr "먼저 ``Game.gd`` 를 열고 다음의 멤버 변수를 추가해주세요:"

#~ msgid ""
#~ "To do this, press the \"New Node\" button (which looks like a plus "
#~ "symbol):"
#~ msgstr ""
#~ "그러기 위해, \"새 노드(New node)\" 버튼을 누르세요 (더하기 기호처럼 생겼습"
#~ "니다):"

#~ msgid "*Clamping* a value means restricting it to a given range."
#~ msgstr ""
#~ "*클램핑(Clamping)* 값은 주어진 범위로 그것을 제한한다는 것을 의미합니다."

#~ msgid ""
#~ "Use the ``[Export]`` attribute instead of the GDScript ``export`` keyword."
#~ msgstr "GDScript의 ``export`` 키워드 대신 ``[Export]`` 속성을 사용합니다."

#~ msgid ""
#~ "Go to Google's website for downloading the Android SDK. A search will "
#~ "take you to the *Android Studio* download page. You don't want it, so "
#~ "don't download (if you do want it, read further down for instructions for "
#~ "doing the same using Android Studio)."
#~ msgstr ""
#~ "Android SDK를 다운로드하기 위해 구글 웹사이트로 갑니다. 검색을 통해 "
#~ "*Android 스튜디오* 다운로드 페이지로 갑니다. Android 스튜디오를 원한 것은 "
#~ "아니므로, 다운로드하지 않습니다 (원한다면, 하단에서 Android 스튜디오를 사"
#~ "용해 같은 작업을 하는 설명을 읽으세요)."

#~ msgid ""
#~ "(again, right-click, then open the image in a new tab if this appears too "
#~ "small)"
#~ msgstr "(또 이미지가 너무 작으면, 우클릭하고 새 탭에서 이미지를 여세요)"

#~ msgid ""
#~ "You thought that by going the Android Studio way you could escape the "
#~ "Keystore generation, but no. It's back to haunt you."
#~ msgstr ""
#~ "Android 스튜디오 방식으로는 Keystore 생성에서 벗어날 수 있다고 생각했을텐"
#~ "데요, 아닙니다. 다시 돌아왔습니다."

#, fuzzy
#~ msgid "which is exactly the same."
#~ msgstr "그러나 이것은 같지 않다:"

#~ msgid ""
#~ "Multi-line comments can be created using \"\"\" (three quotes in a row) "
#~ "at the beginning and end of a block of text. Note that this creates a "
#~ "string, therefore, it will not be stripped away when the script is "
#~ "compiled."
#~ msgstr ""
#~ "여러 줄 주석은 \"\"\" (3 행 따옴표)를 시작과 끝에 사용해서 만들 수 있습니"
#~ "다. 이렇게 하면 문자열이 만들어지므로 스크립트를 컴파일할 때 문자열이 제거"
#~ "되지 않습니다."

#~ msgid ""
#~ "The integer data type can only contain integer numbers, (both negative "
#~ "and positive)."
#~ msgstr ""
#~ "정수 데이터 타입은 오직 정수 값만 가질 수 있습니다, (음수와 양수 둘 다)."

#~ msgid "Used to contain a floating point value (real numbers)."
#~ msgstr "부동 소수점 값 (실수)을 갖기 위해 사용됩니다."

#~ msgid "Every subpattern has to be comma separated. ::"
#~ msgstr "모든 하위 패턴은 쉼표로 분리되어야 합니다. ::"

#~ msgid ""
#~ "The ``assert`` keyword can be used to check conditions in debug builds. "
#~ "These assertions are ignored in non-debug builds."
#~ msgstr ""
#~ "``assert`` 키워드는 디버그 빌드에서 정황을 확인하는 데 사용할 수 있습니"
#~ "다. 디버그가 아닌 빌드에서는 무시됩니다."

#~ msgid "576kb"
#~ msgstr "576kb"

#~ msgid "88kb"
#~ msgstr "88kb"

#~ msgid "22kb"
#~ msgstr "22kb"

#~ msgid "OGG 128kbps, Stereo"
#~ msgstr "OGG 128kbps, 스테레오"

#~ msgid "16kb"
#~ msgstr "16kb"

#~ msgid "12kb"
#~ msgstr "12kb"

#~ msgid "the export preset is not marked as runnable,"
#~ msgstr "내보내기 프리셋이 실행 가능으로 표시되지 않고,"

#~ msgid "the target name ends with ``.pck`` or ``.zip``."
#~ msgstr "대상 이름이 ``.pck``\\ 이나 ``.zip``\\ 으로 끝나는 경우."

#, fuzzy
#~ msgid "White and blue diamond shapes represent keyframes in the timeline."
#~ msgstr "흰색과 파란 다이아몬드 모양은 타임라인에서 키프레임을 나타냅니다."

#, fuzzy
#~ msgid "Global constants"
#~ msgstr "상수"

#, fuzzy
#~ msgid "Step by step (Linux)"
#~ msgstr "단계별"

#~ msgid ""
#~ "This tutorial series aims to illustrate intended Godot workflows, i.e. "
#~ "the \"best practices\" of defining one's game API. Godot allows for a "
#~ "great amount of flexibility in how one designs a project's code and scene "
#~ "structure. Each method will have its own advantages and disadvantages, so "
#~ "outlining the best practices should help users feel less confused as they "
#~ "further explore Godot's depth."
#~ msgstr ""
#~ "이 튜토리얼 시리즈는 의도된 Godot 워크플로를 설명하는 데 초점을 맞추고 있"
#~ "습니다, 예를 들면 무언가의 게임 API를 정의하는 \"모범 사례\"가 있죠. Godot"
#~ "는 프로젝트의 코드와 씬 구조를 설계하는 방식에 대한 많은 유연성을 제공합니"
#~ "다. 각 방식은 각각의 장점과 단점이 있기 때문에 모범 사례를 요약해, 사용자"
#~ "로 하여금 Godot의 깊이를 더 깊이 탐구하면서 혼동을 덜 느끼게됩니다."

#~ msgid ""
#~ "This series is also designed to help get users thinking about the best "
#~ "way to reason about best practices. It would be impossible to give a "
#~ "comprehensive overview of what one should do for any arbitrary design "
#~ "decision. As such, each article breaks problems down into the fundamental "
#~ "questions they pose, suggests the available solutions, analyzes the "
#~ "advantages and disadvantages of each option, and then highlights the best "
#~ "course of action depending on the circumstances."
#~ msgstr ""
#~ "이 시리즈은 또한 사용자들이 모범 사례를 통해 최선의 방법에 대해 생각하도"
#~ "록 해줍니다. 이것이 어떤 임의의 디자인 결정을 위해 해야할 것을 알려주는 포"
#~ "괄적인 개요가 될 수는 없을 것입니다. 이와 같이 각 문서에서의 문제는 이것"
#~ "의 근본적인 의문으로 나뉩니다, 가능한 해결책의 제안하고, 각 방식의 장단점"
#~ "을 분석하고, 그렇게 하여 상황에 맞는 최선의 행동 방침을 강조합니다."

#~ msgid ""
#~ "While the articles in this series are largely topic-directed, it is "
#~ "recommended that users begin with the :ref:`doc_what_are_godot_classes` "
#~ "article. It is from there that the \"best practices\" for the rest of the "
#~ "engine become more clear, based on established OOP practices."
#~ msgstr ""
#~ "이 시리즈의 문서가 큰 주제로 되어있기 때문에, 사용자는 :ref:"
#~ "`doc_what_are_godot_classes` 문서로 시작하기를 추천합니다. 이 문서는 정착"
#~ "한 객체 지향 프로그래밍 사례를 기반으로 하여, 엔진의 나머지 부분의 \"모범 "
#~ "사례\"를 더 명확하게 해줍니다."

#~ msgid "What are Godot classes really?"
#~ msgstr "Godot 클래스는 정말 무엇입니까?"

#~ msgid ""
#~ "Godot offers two main means of creating types: scripts and scenes. Both "
#~ "of these represent a \"class\" since Godot revolves around Object-"
#~ "Oriented design. *How* they do this may not be clear to beginner or "
#~ "intermediate users though."
#~ msgstr ""
#~ "Godot는 생성 타입에 있어 두가지 중심 의미가 있습니다: 스크립트와 씬입니"
#~ "다. Godot를 객체 지향 디자인 중심으로 전개할 때, 둘은 모두 \"클래스\"를 나"
#~ "타냅니다. 초보자나 중급자에게 이것이 *어떻게* 가능한 지를 분명하게 알기는 "
#~ "어렵습니다."

#~ msgid ""
#~ "So, if the engine provides all of this data at startup, then how does a "
#~ "user define their own data? It'd be nice if users could define a custom "
#~ "set of data to be appended to an object's data. That way, users could "
#~ "inject their own properties and methods into the engine's Object query "
#~ "requests."
#~ msgstr ""
#~ "따라서 엔진이 시작할 때 이 모든 데이터를 제공한다면, 사용자는 어떻게 고유"
#~ "의 데이터를 정의할까요? 사용자가 객체의 데이터에 추가하는 커스텀 데이터 세"
#~ "트를 정의하는 것이 좋습니다. 이 방법으로 사용자는 고유의 속성과 메서드를 "
#~ "엔진의 객체 쿼리 요청에 넣을 수 있습니다."

#~ msgid ""
#~ "This can lead to some users' confusion when they see a script as being a "
#~ "class unto itself. In reality, the engine just auto-instantiates the base "
#~ "engine class and then adds the script to that object. This then allows "
#~ "the Object to defer to the Script's content where the engine logic deems "
#~ "appropriate."
#~ msgstr ""
#~ "스크립트가 그 자체로 하나의 클래스가 되는 것을 보면 일부 사용자는 혼란에 "
#~ "빠질 수 있습니다. 사실 엔진은 기본 엔진 클래스를 자동으로 인스턴스화한 뒤 "
#~ "그 객체에 스크립트를 추가합니다. 이것으로 객체는 엔진 논리에 적절하다고 판"
#~ "단하는 스크립트의 내용을 이행합니다."

#~ msgid "let's see a simple example of creating a single Node as a child."
#~ msgstr "한 노드를 자식으로 만드는 예제를 알아봅시다."

#~ msgid ""
#~ "Notice that only two pieces of declarative code are involved in the "
#~ "creation of this child node: the variable declaration and the constructor "
#~ "declaration. Everything else about the child must be setup using "
#~ "imperative code. However, script code is much slower than engine C++ "
#~ "code. Each change must make a separate call to the scripting API which "
#~ "means a lot of C++ \"lookups\" within data structures to find the "
#~ "corresponding logic to execute."
#~ msgstr ""
#~ "선언 노드의 두 부분만 자식 노드를 생성하는데 관여합니다: 변수 선언과 생성"
#~ "자 선언입니다. 자식에 관한 다른 나머지는 명령형 코드를 사용해 설정해야 합"
#~ "니다. 하지만 스크립트 코드는 엔진 C++ 코드보더 훨씬 더 느립니다. 각 변경사"
#~ "항은 스크립팅 API로의 호출을 만들게 되고, 이는 즉 데이터 구조 내 실행하기 "
#~ "위한 해당 논리를 찾는 많은 C++ \"lookup들\"을 의미합니다."

#~ msgid ""
#~ "To help offload the work, it would be convenient if one could batch up "
#~ "all operations involved in creating and setting up node hierarchies. The "
#~ "engine could then handle the construction using its fast C++ code, and "
#~ "the script code would be free from the perils of imperative code."
#~ msgstr ""
#~ "작업량을 줄이기 위해 무언가가 노드 계층 구조를 만들고 설정하는 데 관련된 "
#~ "모든 작업을 처리할 수 있다면 편리할 것입니다. 그러면 엔진은 빠른 C++ 코드"
#~ "를 사용해 그 구조를 다룰 수 있을 것이고, 스크립트 코드는 명령형 코드의 위"
#~ "험으로부터 벗어날 수 있을 것입니다."

#~ msgid ""
#~ "*This* is what a scene (:ref:`PackedScene <class_PackedScene>`) is: a "
#~ "resource that provides an advanced \"constructor\" serialization which is "
#~ "offloaded to the engine for batch processing."
#~ msgstr ""
#~ "*이것*\\ 이 바로 씬입니다 (:ref:`PackedScene <class_PackedScene>`): 고급 "
#~ "\"생성자\" 직렬화를 제공하는 리소스로 일괄 처리를 위해 엔진이 오프로드하도"
#~ "록 합니다."

#~ msgid "It helps to define..."
#~ msgstr "씬이 정의하는 것은..."

#~ msgid "what connections to each other do they have, if any?"
#~ msgstr "그렇다면 서로에게 어떤 연결이 있는지?"

#~ msgid ""
#~ "As such, many Object-Oriented principles which apply to \"programming\", "
#~ "i.e. scripts, *also* apply to scenes. Some scripts are designed to only "
#~ "work in one scene (which are often bundled into the scene itself). Other "
#~ "scripts are meant to be re-used between scenes."
#~ msgstr ""
#~ "이처럼 많은 객체 지향 원칙들이 \"프로그래밍\"에 적용됩니다, 즉 스크립트 *"
#~ "또한* 씬에 적용됩니다. 어떤 스크립트는 오직 하나의 씬에서만 작동하도록 설"
#~ "계됩니다 (보통은 씬 자체에서 번들로 제공됩니다). 그렇지 않은 스크립트는 "
#~ "씬 사이에서 재사용될 수 있습니다."

#~ msgid ""
#~ "**Regardless, the scene is always an extension of the root script, and "
#~ "can therefore be interpreted as a part of the class.** Most of the points "
#~ "covered in this series will build on this point, so keep it in mind."
#~ msgstr ""
#~ "**그럼에도 불구하고 씬은 항상 루트 스크립트의 확장이고, 그렇기에 클래스의 "
#~ "일부로 해석될 수 있습니다.** 이 시리즈의 대부분은 이러한 시점에서 다루게 "
#~ "될 것입니다, 그러니 명심하세요."

#, fuzzy
#~ msgid "Godot Engine"
#~ msgstr "Godot 엔진에 대하여"

#~ msgid "Step-by-step"
#~ msgstr "단계별"

#~ msgid "After a comma."
#~ msgstr "반점 이후."

#~ msgid ""
#~ ":ref:`Animating thousands of fish with MultiMesh "
#~ "<doc_animating_thousands_of_fish>`"
#~ msgstr ""
#~ ":ref:`MultiMesh로 수천개의 물고기를 움직이게 하기 "
#~ "<doc_animating_thousands_of_fish>`"

#~ msgid "Killer features"
#~ msgstr "킬러 기능"

#~ msgid ""
#~ "Note that Godot editor allows you to dock each panel at the side of the "
#~ "scene editor you wish."
#~ msgstr ""
#~ "Godot 에디터는 당신이 원하는 씬 에디터 옆에 각 패널을 고정할 수 있습니다."

#~ msgid ""
#~ "These are the most important concepts you need to remember: \"node\", "
#~ "\"parent node\", and \"child node\"."
#~ msgstr ""
#~ "기억해야 할 가장 중요한 개념들 입니다: \"노드\", \"부모 노드\" 그리고 \"자"
#~ "식 노드\"."

#~ msgid ""
#~ "We previously observed that there is no perfect solution to set a project "
#~ "architecture. Any solution will work for Unity and Godot, so this point "
#~ "has a lesser importance."
#~ msgstr ""
#~ "우리는 이전에 프로젝트 구조를 설정하는 완벽한 해결책이 없다는 것을 인지하"
#~ "였습니다. 어떤 해결책이든 유니티와 Godot를 위해 작동할 것이기에, 이 점은 "
#~ "덜 중요합니다."

#~ msgid "Prefab -> Externalized branch"
#~ msgstr "프리펩 -> 외부화된 분기"

#~ msgid ""
#~ "Here's an example that creates a custom signal in one script and connects "
#~ "the custom signal to a method in a separate script, using the :ref:"
#~ "`Object.connect() <class_Object_method_connect>` method:"
#~ msgstr ""
#~ "다음은 :ref:`Object.connect() <class_Object_method_connect>` 메서드를 이용"
#~ "해 한 스크립트에 커스텀 시그널을 만들고 이를 다른 스크립트에 연결하는 예시"
#~ "입니다:"

#~ msgid ""
#~ "Here is an example that creates a connection between a button's "
#~ "``pressed`` signal and a method, binding the button instance to the "
#~ "connection. The handler uses the bound argument to print which button "
#~ "instance was pressed."
#~ msgstr ""
#~ "다음은 버튼을 연결에 묶어서, 버튼의 ``pressed`` 시그널과 메서드를 연결하"
#~ "는 예제입니다. handler는 눌린 버튼 인스턴스와 묶인 인수를 프린트 합니다."

#~ msgid ""
#~ "Signals are generated by the :ref:`Object.emit_signal() "
#~ "<class_Object_method_emit_signal>` method which broadcasts the signal and "
#~ "arguments."
#~ msgstr ""
#~ "시그널은 시그널과 인수를 뿌리는 :ref:`Object.emit_signal() "
#~ "<class_Object_method_emit_signal>` 메서드로 생성됩니다."

#~ msgid ""
#~ "Extending a previous example to use all the features of GDScript signals:"
#~ msgstr ""
#~ "다음은 GDScript 시그널의 모든 기능을 사용하기 위해 이전 예제에서 확장된 것"
#~ "입니다:"

#~ msgid ""
#~ "Consider breaking a line when it's longer than 100 characters. And it's "
#~ "also a good practice to insert a line feed (LF) character at the end of a "
#~ "file because some utilities have trouble recognizing the last line "
#~ "without it (e.g. the *cat* command on Linux)."
#~ msgstr ""
#~ "문자 수가 100개가 넘으면 줄 바꿈을 생각해보세요. 그리고 파일의 마지막에 라"
#~ "인피드 (LF) 문자를 넣는 것은 좋은 경험이 될 것입니다, 일부 유틸리티는 마지"
#~ "막 줄을 인식하지 못하기 때문이죠 (예: Linux에서 *cat* 커맨드)."

#~ msgid "Translators also usually prefer to work with spreadsheets."
#~ msgstr "번역가는 보통 스프레드시트로 작업하는 것을 선호합니다."

#, fuzzy
#~ msgid ""
#~ "Collision shapes can be added to the tiles in a tileset to create solid "
#~ "geometry. Tilemaps can be used for both side view and top-down 2D games."
#~ msgstr ""
#~ "충돌 효과를 타일에 추가할 수도 있어 2D 사이드 스크롤링과 탑 다운 게임을 "
#~ "할 수 있습니다."

#, fuzzy
#~ msgid ""
#~ "Here are some tiles for a tileset. They are all part of the same image "
#~ "file. This is helpful for a game's performance. There are so-called "
#~ "*texture packers* that will generate these spritesheets out of several "
#~ "separate tile images. But keeping them as separate images also works."
#~ msgstr ""
#~ "타일셋을 만들어야 합니다. 여기에 만들기 위한 약간의 타일이 있습니다. 최적"
#~ "화의 이유로 동일한 이미지에 모두 담겨있습니다. 각각의 텍스쳐 파일들을 이러"
#~ "한 스프라이트시트로 생성한 것을 *texture packers*라 불립니다. 또한 별도의 "
#~ "이미지로 가지고 있어도 효과가 있습니다"

#, fuzzy
#~ msgid ""
#~ "Create a new project and move the above PNG image into the project "
#~ "directory. Next, go into the image's import settings and turn off "
#~ "``Filter``. Keeping it on will cause issues later. ``Mipmaps`` should "
#~ "already be disabled; if not, disable this too."
#~ msgstr ""
#~ "새 프로젝트를 만들고 위 PNG 이미지를 프로젝트 위치에 옮겨 봅시다. 다음으"
#~ "로 이미지 가져오기 설정에 가서 ``Filter``를 끕니다, keeping it on will "
#~ "cause issues later.. ``Mipmaps`` 옵션은 이미 비활성화되어 있지만 그렇지 않"
#~ "다면 이것도 끄도록 합니다."

#, fuzzy
#~ msgid ""
#~ "Create a new scene with a regular Node or Node2D as root. For each "
#~ "reference tile you want to define, add a sprite node as a child. Since "
#~ "our tiles measure 50x50 pixels, you should turn on the grid (``View -> "
#~ "Show Grid`` or ``G`` key) and enable snap (``Use Snap`` icon or ``Shift + "
#~ "S`` keys). Moving tiles with the mouse might still be inaccurate, so use "
#~ "your arrow keys as well."
#~ msgstr ""
#~ "새 씬을 만들고 루트 노드는 Node 또는 Node2D로 합니다. 정의하려는 각 타일"
#~ "에 대해 스프라이트 노드를 자식 노드로 추가합니다. Since tiles here are "
#~ "50x50, you should turn on the grid (``보기 -> 격자 보기`` 또는 ``G`` 키) "
#~ "그리고 스냅을 활성화합니다 (``스냅 사용`` 아이콘 또는 ``Shift + S`` 키). "
#~ "마우스로 타일들을 움직이려면 여전히 약간 부정확할 수 있으므로 방향키를 사"
#~ "용합니다."

#, fuzzy
#~ msgid ""
#~ "If more than one tile is present in the source image, make sure to use "
#~ "the region property of the sprite to adjust which part of the texture is "
#~ "being used."
#~ msgstr ""
#~ "원본 이미지에 두 개 이상의 타일이 있다면 사용 중인 텍스쳐 부분을 조정하기 "
#~ "위해서 스프라이트의 Region 속성을 사용해야 합니다."

#, fuzzy
#~ msgid ""
#~ "Give the sprite node an appropriate and unique name. This will ensure "
#~ "that, in subsequent edits to the tileset (for example, if you've added "
#~ "collision, changed the region, etc), the tile will still be **identified "
#~ "correctly and updated**."
#~ msgstr ""
#~ "마지막으로 스프라이트 노드 이름을 올바르게 지어야 합니다. 그래야 다음의 타"
#~ "일셋 편집(예를 들어 충돌효과를 주거나 Region을 변경하는 등)에서 타일이 **"
#~ "정확하게 식별되고 업데이트** 됩니다. 이름은 유일해야 합니다."

#, fuzzy
#~ msgid "Here's a screenshot that shows where everything of relevance is:"
#~ msgstr ""
#~ "아까 말한 필요사항이 어디에 있는지 보여주는 스크린샷이 여기에 있습니다:"

#, fuzzy
#~ msgid ""
#~ "Add all the reference tiles in the way described above, adjusting the "
#~ "offsets as needed (that is, if you have multiple tiles in a single source "
#~ "image). Again, *remember that their names must be unique*."
#~ msgstr ""
#~ "모든 타일을 계속 추가하고 필요한 경우 오프셋을 조정하세요(즉, 단일 원본 이"
#~ "미지에 여러 타일이 있는 경우). 다시 말하자면 *타일 이름이 유일해야 한다는 "
#~ "것을 기억하세요*."

#, fuzzy
#~ msgid ""
#~ "To add collision shapes to the tiles, create a StaticBody2D child for "
#~ "each sprite. This is a static collision node. Then create a "
#~ "CollisionShape2D or CollisionPolygon as a child of the StaticBody2D. The "
#~ "CollisionPolygon is easier to edit."
#~ msgstr ""
#~ "타일에 충돌효과를 넣기 위해서 스프라이트 자식 노드로 StaticBody2D 노드를 "
#~ "만듭니다. StaticBody2D는 static collision 노드입니다. 그런 다음 "
#~ "CollisionShape2D 또는 CollisionPolygon를  StaticBody2D 자식 노드로 만듭니"
#~ "다. CollisionPolygon이 편집하기 쉬우므로 추천합니다."

#, fuzzy
#~ msgid ""
#~ "Edit the polygon; this will give the tile a collision shape and remove "
#~ "the warning icon next to the CollisionPolygon node. **Remember to use "
#~ "snap!** Using snap will make sure collision polygons are aligned "
#~ "properly, allowing a character to walk seamlessly from tile to tile. Also "
#~ "**do not scale or move** the collision and/or collision polygon nodes. "
#~ "Leave them at offset 0,0, with scale 1,1 and rotation 0 with respect to "
#~ "the parent sprite."
#~ msgstr ""
#~ "마지막으로, CollisionPolygon2D를 편집해서 타일에 충돌효과를 주고 "
#~ "CollisionPolygon node 옆 경고 아이콘을 고칩니다. **스냅 사용하는 것을 기억"
#~ "하세요!** 스냅 사용은 충돌 폴리곤(collision polygons)이 확실하게 제대로 정"
#~ "렬되어 캐릭터가 타일 간에 매끄럽게 이동할 수 있습니다. 또한 충돌 노드 및 "
#~ "충돌 폴리곤 노드 **크기를 조정하거나 움직이지 마세요**. 부모 스프라이트에 "
#~ "대하여 오프셋 0,0과 스케일 1,1 회전 0으로 두세요."

#, fuzzy
#~ msgid ""
#~ "Keep adding collision shapes to all tiles that need them. Note that BG is "
#~ "a background tile, so it should not have a collision shape."
#~ msgstr ""
#~ "다 할 때까지 충돌 효과를 추가합니다. BG는 그냥 배경이므로 충돌효과를 주어"
#~ "선 안되는 것을 유의하세요."

#, fuzzy
#~ msgid ""
#~ "Then save this scene for future editing. \"tileset_edit.scn\" would be a "
#~ "sensible name for it."
#~ msgstr ""
#~ "됐습니다! 우리는 해냈습니다! 나중에 편집할 수 있도록 이 씬을 저장하십시"
#~ "오. 씬을 \"tileset_edit.scn\" 또는 비슷한 이름으로 짓습니다."

#, fuzzy
#~ msgid ""
#~ "With the scene created and still open in the editor, use Scene > Convert "
#~ "To > Tile Set from the Scene Menu:"
#~ msgstr ""
#~ "에디터에서 만들었던 씬을 연 다음 타일셋을 만들겁니다. 씬 메뉴에서 씬 > 변"
#~ "환... > 타일 셋... 을 이용하여 만듭니다:"

#, fuzzy
#~ msgid ""
#~ "Then choose a filename, like \"mytiles.tres\". Make sure the \"Merge With "
#~ "Existing\" option is toggled on. This way, every time the tileset "
#~ "resource file is overwritten, existing tiles are merged and updated (they "
#~ "are referenced by their unique name, so again, **name your tiles "
#~ "properly**)."
#~ msgstr ""
#~ "\"mytiles.tres\"와 같은 파일이름으로 내보내십시오. 내보낼 때 \"기존과 병합"
#~ "\" 옵션을 켜져 있는지 확인하십시오. 이렇게 하면 매번 타일셋 리소스 파일을 "
#~ "덮어쓸 때마다 기존 파일이 병합되고 업데이트 됩니다. 타일들은 고유한 이름"
#~ "에 의하여 참조되므로 **타일 이름을 올바르게 지어주십시오**."

#~ msgid "Using the TileSet in a TileMap"
#~ msgstr "타일맵에서 타일셋을 사용하기"

#~ msgid ""
#~ "Create a new scene, using any node or node2d as root, and then create a :"
#~ "ref:`TileMap <class_TileMap>` as a child."
#~ msgstr ""
#~ "새 씬을 만드십시오. 루트는 Node 또는 Node2D로 합니다. 그런 다음 자식 노드"
#~ "로 :ref:`TileMap <class_TileMap>`을 만드십시오."

#~ msgid ""
#~ "Go to the TileSet property of this node and assign the one created in "
#~ "previous steps:"
#~ msgstr ""
#~ "타일맵 노드의 타일셋 속성으로 가서 이전 단계에서 만든 타일셋을 할당하십시"
#~ "오:"

#, fuzzy
#~ msgid ""
#~ "Also set the cell size to '50', since that is the size used by the tiles. "
#~ "Quadrant size is a tuning value. The default value of 16 means that the "
#~ "engine will draw and cull (erase) the tilemap in blocks of 16x16 tiles. "
#~ "This value is usually fine, but can be used to fine tune performance in "
#~ "specific cases if you know what you're doing."
#~ msgstr ""
#~ "또한 타일에 사용되는 크기인 셀 크기를 50으로 설정하세요. . 사분면 크기"
#~ "(Quadrant size)는 엔진이 16x16 타일 블록으로 타일맵을 그리고 도려내는 것"
#~ "을 의미하는 튜닝(tuning) 값입니다. 이 값은 대개 양호하고 바꿀 필요는 없지"
#~ "만 특정 사례(무엇을 하고 있는지 알고 있는 경우)에서 성능을 미세조정하는데 "
#~ "사용될 수 있습니다."

#, fuzzy
#~ msgid ""
#~ "Make sure the TileMap node is selected. A red grid will appear on the "
#~ "screen, allowing you to paint on it with the tile currently selected in "
#~ "the left palette."
#~ msgstr ""
#~ "모두 설정이 된 상태에서 타일맵 노드가 선택되었는지 확인하십시오. 왼쪽 팔레"
#~ "트에 선택된 타일로 칠할 수 있는 빨간 격자가 화면에 나타날 겁니다."

#~ msgid ""
#~ "If you accidentally place a tile somewhere you don't want it to be, you "
#~ "can delete it with ``RMB`` (the right mouse button) while in the tilemap "
#~ "editor."
#~ msgstr ""
#~ "만약 실수로 원하지 않은 곳에 타일을 놓았다면 타일맵 에디터에서 ``RMB`` (마"
#~ "우스 오른쪽 버튼)으로 제거할 수 있습니다."

#, fuzzy
#~ msgid ""
#~ "You can flip and rotate sprites in the TileMap editor (note: flipping the "
#~ "sprite in the TileSet will have no effect). Icons at the top right of the "
#~ "editor allow flipping and rotating of the currently selected sprite - you "
#~ "can also use the A and S keys to flip the sprite horizontally and "
#~ "vertically. With a brick pattern like this tutorial uses, flipping the "
#~ "sprites would create unpleasant discontinuities unless you're flipping an "
#~ "entire region of bricks. But for some kinds of tiles, flipping can be a "
#~ "convenient and space-saving feature."
#~ msgstr ""
#~ "타일맵 에디터에서 스프라이트를 뒤집고 회전할 수 있습니다(타일셋에서 스프라"
#~ "이트를 뒤집는 것은 효과가 없음). 에디터 상단 오른쪽에 있는 아이콘으로 선택"
#~ "한 스프라이트를 뒤집고 회전할 수 있습니다. 또한 A키와 S키로 상하 또는 좌우"
#~ "로 뒤집을 수 있습니다. With a brick pattern like this tutorial uses, "
#~ "flipping the sprites would create unpleasant discontinuities unless "
#~ "you're flipping an entire region of bricks. 하지만 이러한 유형의 타일들이 "
#~ "뒤집기가 편리하고 공간을 절약하는 특징이 될 수 있습니다."

#, fuzzy
#~ msgid ""
#~ "When using a single texture for all the tiles, scaling the tileset or "
#~ "moving it to a non pixel-aligned location can cause filtering artifacts:"
#~ msgstr ""
#~ "모든 타일에 단일 텍스쳐를 사용할 때 타일셋을 스케일링(scaling)하는 것은(또"
#~ "는 심지어 픽셀이 정렬되지 않은 위치로 이동하는 경우에도) 다음과 같은 필터"
#~ "링 아티팩트(filtering artifacts)가 대부분 발생할 것이다."

#, fuzzy
#~ msgid ""
#~ "Disable filtering and mipmaps for either the tileset texture or all tile "
#~ "textures if using separate images (see the :ref:`doc_import_images` asset "
#~ "pipeline tutorial)."
#~ msgstr ""
#~ "타일셋 텍스쳐 또는 만약 별도의 이미지를 사용한다면 모든 타일 텍스쳐에 대해"
#~ "서 filtering과 mipmaps를 비활성화하십시오 (see the :ref:"
#~ "`doc_import_images` asset pipeline tutorial)."

#~ msgid ""
#~ "Enable pixel snap (Set ``Project > Project Settings > Rendering > Quality "
#~ "> 2d > Use Pixel Snap`` to true; you can also search for ``Pixel Snap``)."
#~ msgstr ""
#~ "픽셀 스냅을 활성화하세요. (``프로젝트 > 프로젝트 설정 > Rendering > "
#~ "Quality > 2d > Use Pixel Snap`` 또는  ``Pixel Snap`` 검색해서 사용으로 체"
#~ "크합니다)."

#, fuzzy
#~ msgid ""
#~ "You can use a single, separate image for each tile. This will remove all "
#~ "artifacts, but can be more cumbersome to implement and is less optimized."
#~ msgstr ""
#~ "각 타일마다 별도의 이미지를 하나씩 사용할 수 있습니다. 이렇게 하면 모든 아"
#~ "티팩트(artifacts)를 없앨 수 있겠지만 구현하기가 더 번거로울 수 있고 최적화"
#~ "가 덜 됩니다."

#~ msgid "arrays"
#~ msgstr "arrays"

#~ msgid ""
#~ ":ref:`Vertex displacement with shaders "
#~ "<doc_vertex_displacement_with_shaders>`"
#~ msgstr ""
#~ ":ref:`셰이더를 사용한 정점 디스플레이스먼트"
#~ "<doc_vertex_displacement_with_shaders>`"

#~ msgid ""
#~ "This method will be called every time a frame is drawn, so it's fully "
#~ "dependent on how many frames per second (FPS) the application is running "
#~ "at:"
#~ msgstr ""
#~ "이 메서드는 프레임을 들일 때 호출됩니다, 따라서 애플리케이션이 실행 중인 "
#~ "초당 프레임 수 (FPS) 에 전적으로 의존합니다:"

#~ msgid ""
#~ "And the second way is from code. One example would be to tag nodes which "
#~ "are enemies:"
#~ msgstr ""
#~ "두 번째 방법은 코드를 사용하는 것입니다. 예를 들어 적으로 사용되는 노드에 "
#~ "태그를 지정할 수 있습니다:"

#~ msgid "The five most common containers"
#~ msgstr "가장 일반적인 다섯 가지 컨테이너"

#~ msgid ""
#~ "Only use Control nodes when you design your interfaces. They have unique "
#~ "properties that allow them to work with one another. Other nodes, like "
#~ "Node2D, Sprite, etc. will not work. You can still use some nodes that "
#~ "work with others, like the AnimationPlayer, Tween or the StreamPlayer. "
#~ "Control nodes are CanvasItems like Node2D, so you can apply shaders to "
#~ "them."
#~ msgstr ""
#~ "인터페이스를 설계할 때 오직 컨트롤 노드만 사용하세요. 그들은 서로 상호작용"
#~ "하는 독특한 속성을 지닙니다. Node2D, Sprite 등 과 같은 다른 노드들은 할 "
#~ "수 없습니다. 당신은 AnimationPlayer나 Tween, StreamPlayer같은 다른 노드들"
#~ "과 작동하는 일부 노드들을 사용할 수 있습니다. 컨트롤 노드는 Node2D와 같은 "
#~ "CanvasItems이므로, 그것들에 쉐이더를 적용할 수 있습니다."

#, fuzzy
#~ msgid ""
#~ "Changing the canvas transform is useful because it is a lot more "
#~ "efficient than moving the root canvas item (and hence the whole scene). "
#~ "Canvas transform is a simple matrix that offsets the whole 2D drawing, so "
#~ "it's the most efficient way to do scrolling."
#~ msgstr ""
#~ "캔버스를 변형하는 것은 루트 캔버스 아이템(전체 씬)을 움직이는 것보다 많은 "
#~ "효율이 있으므로 유용합니다. 캔버스 변형은 전체 2D 그림을 상쇄하는 간단한 "
#~ "행렬입니다. 그래서 스크롤 하기에 대부분 효율적인 방법입니다."

#~ msgid ""
#~ "**HUD**: Heads-up display, or user interface. If the world moves, the "
#~ "life counter, score, etc. must stay static."
#~ msgstr ""
#~ "**HUD**: 전방 표시 장치(Heads-up display) 또는 사용자 인터페이스. 세상이 "
#~ "움직이면 목숨, 점수와 같은 것은 정적인 상태를 유지해야 합니다."

#, fuzzy
#~ msgid ""
#~ "Even though there shouldn't be any performance limitation, it is not "
#~ "advised to use excessive amount of layers to arrange drawing order of "
#~ "nodes. The most optimal way will always be arranging them by tree order. "
#~ "2d nodes also have a property for controlling their drawing order (see :"
#~ "ref:`Node2D.z_index <class_Node2D_property_z_index>`)."
#~ msgstr ""
#~ "Even though there shouldn't be any performance limitation, 노드의 그리기 "
#~ "순서를 정렬하기 위해 과도한 양의 레이어를 사용하는 것은 권장하지 않습니"
#~ "다. 대부분 최적의 방법은 항상 트리 순서에 따라 정렬해야 합니다. 또한 2d 노"
#~ "드들은 그리기 순서를 제어할 수 있는 속성이 있습니다(:ref:`Node2D.z_index "
#~ "<class_Node2D_property_z_index>`를 참고하세요)."

#~ msgid ""
#~ "Tilemaps are a simple and quick way to make 2D game levels. Basically, "
#~ "you start with a bunch of reference tiles (or pieces) that can be put on "
#~ "a grid, as many times each as desired - think of it like a map editor:"
#~ msgstr ""
#~ "타일맵은 2D 게임 레벨들을 만들기에 간단하고 빠른 방법입니다. 기본적으로 격"
#~ "자에 원하는 횟수만큼 놓을 수 있는 참조 타일(또는 조각) 뭉치로 시작합니다. "
#~ "지도 편집기와 같은 것이라 생각하세요:"

#, fuzzy
#~ msgid ""
#~ "We will be creating a :ref:`TileSet <class_TileSet>` resource. While this "
#~ "resource exports properties, it's pretty difficult to get complex data "
#~ "into it and maintain it. Here is what it would look like to manually edit "
#~ "the resource:"
#~ msgstr ""
#~ "우리는 :ref:`TileSet <class_TileSet>` 리소스를 만들겁니다. While this "
#~ "resource exports properties, it's pretty difficult to get complex data "
#~ "into it and maintain it. Here is what it would look like to manually edit "
#~ "the resource:"

#~ msgid "Collision"
#~ msgstr "충돌 효과(Collision)"

#, fuzzy
#~ msgid ""
#~ "To avoid accidentally moving and selecting the tilemap node (something "
#~ "common, given it's a huge node), it is recommended that you lock it, "
#~ "using the lock button:"
#~ msgstr ""
#~ "실수로 타일맵 노드를 이동하고 선택하지 않으려면 (something common, given "
#~ "it's a huge node), 잠금 버튼을 이용하여 노드를 잠그는 것을 권장합니다:"

#, fuzzy
#~ msgid ""
#~ "This is unavoidable, as it is the way the hardware bilinear filter works. "
#~ "To avoid this situation, there are a few workarounds. Try the one that "
#~ "looks better for you:"
#~ msgstr ""
#~ "하드웨어 이선형 필터의 작동 방식이므로 이는 피할 수 없다. 이런 상황을 피하"
#~ "기 위해 몇 가지 해결책이 있다. 자신에게 더 잘 어울리는 것을 시도해 보십시"
#~ "오."

#, fuzzy
#~ msgid ""
#~ "Cut-out is a technique of animating in 2D where pieces of paper (or "
#~ "similar material) are cut in special shapes and laid one over the other. "
#~ "The papers are animated and photographed, frame by frame using a stop "
#~ "motion technique (more info `here <https://en.wikipedia.org/wiki/"
#~ "Cutout_animation>`__)."
#~ msgstr ""
#~ "컷아웃(cut-out)은 종이 조각(또는 이와 유사한 재료)을 특수 모양으로 잘라 다"
#~ "른 한 조각 위에 놓는 2D 애니메이션 기법입니다. The papers are animated "
#~ "and photographed, frame by frame using a stop motion technique(더 많은 정"
#~ "보는 `여기 <https://en.wikipedia.org/wiki/Cutout_animation>`__)."

#~ msgid "Cutout in Godot"
#~ msgstr "Godot에서의 컷아웃"

#, fuzzy
#~ msgid ""
#~ "Godot provides a few tools for working with these kind of assets, but its "
#~ "overall design makes it ideal for the workflow. The reason is that, "
#~ "unlike other tools meant for this, Godot has the following advantages:"
#~ msgstr ""
#~ "Godot은 이러한 유형의 에셋을 작업하기 위한 몇가지 도구를 제공합니다, but "
#~ "its overall design makes it ideal for th workflow. The reason is that, "
#~ "unlike other tools meant for this, Godot은 다음과 같은 이점을 가집니다."

#, fuzzy
#~ msgid ""
#~ "**Mix with Traditional**: AnimatedSprite allows traditional animation to "
#~ "be mixed, useful for complex objects, such as shape of hands and foot, "
#~ "changing facial expression, etc."
#~ msgstr ""
#~ "**기존 방식과 혼합**: AnimatedSprite는 전통적인 애니메이션을 혼합할 수 있"
#~ "게 해줍니다. 손과 발의 모양, 얼굴 표정 변화 등과 같은 복잡한 물체에 유용"
#~ "함."

#~ msgid ""
#~ "Right. In 2D, parent nodes appear below children nodes. Well, this sucks. "
#~ "But how can this problem be solved? We want the left arm to appear behind "
#~ "the hip and the torso. For this, we can move the nodes behind the hip "
#~ "(note that you can bypass this by setting the Node2D Z property, but then "
#~ "you won't learn about all this!):"
#~ msgstr ""
#~ "맞습니다. 2D에서 상위 노드는 하위 노드 아래에 표시됩니다. 음, 이건 형편없"
#~ "습니다. 하지만 어떻게 이 문제가 해결될 수 있을까요? 우리는 왼쪽 팔이 엉덩"
#~ "이와 몸통 뒤에 표시되기를 원합니다. 이를 위해 우리는 노드를 엉덩이 뒤로 이"
#~ "동할 수 있습니다(Node2D Z 속성을 설정하여 이를 우회할 수 있지만 그러면 이 "
#~ "모든 것에 대해 배울 수 없다는 점에 유의하세요!):"

#~ msgid ""
#~ "Simply create two more nodes as children from torso, remote_arm_l and "
#~ "remote_hand_l and link them to the actual sprites:"
#~ msgstr ""
#~ "몸통으로부터 remote_arm_l 및 remote_hand_l 자식 노드를 두 개 더 만들고 실"
#~ "제 스프라이트에 연결하세요:"

#~ msgid ""
#~ "Godot doesn't actually support *true* Skeletons, but it does feature a "
#~ "helper to create \"bones\" between nodes. This is enough for most cases, "
#~ "but the way it works is not completely obvious."
#~ msgstr ""
#~ "Godot은 실제로 *진정한* 골격을 지원하지 않지만 노드 사이에 \"뼈\"를 만드"
#~ "는 도우미가 있습니다. 대부분의 경우 이 정도면 충분하지만 작동 방식이 완전"
#~ "히 명확하지는 않습니다."

#~ msgid "2D animation"
#~ msgstr "2D 애니메이션"

#~ msgid ""
#~ "Initial versions of the Godot engine (and previous iterations before it "
#~ "was named Godot) used a database. Assets were stored in it and assigned "
#~ "an ID. Other approaches were tried as well, such as local databases, "
#~ "files with metadata, etc. In the end, the simple approach won and now "
#~ "Godot stores all assets as files in the file system."
#~ msgstr ""
#~ "Godot 엔진의 초기 버전에는 (그리고 아직 Godot라는 이름이 붙기 전) 데이터베"
#~ "이스를 사용했습니다. 에셋은 그곳에 있었고 ID가 지정되었습니다. 다른 접근"
#~ "도 시도해보았습니다, 지역 데이터베이스나, 메타데이터가 있는 파일 등등을 말"
#~ "이죠. 결국 간단한 접근법을 얻게 되었고 지금 Godot는 모든 에셋을 파일 시스"
#~ "템에 저장합니다."

#~ msgid ""
#~ "This is where things start getting abstract, but don't panic. There's not "
#~ "much more depth than this."
#~ msgstr ""
#~ "여기서 내용이 추상적으로 되기 시작합니다, 하지만 당황하지 마세요. 여기보"
#~ "다 훨씬 더 깊게 보는 곳은 없습니다."

#~ msgid ""
#~ "This concept deserves going into a little more detail. In fact, the scene "
#~ "system is not even a core component of Godot as it is possible to skip it "
#~ "and write a script (or C++ code) that talks directly to the servers, but "
#~ "making a game that way would be a lot of work."
#~ msgstr ""
#~ "이 개념은 조금 더 자세히 설명할 가치가 있습니다. 사실, 씬 시스템은 Godot"
#~ "의 핵심 구성 요소도 아니기에 넘어가서 바로 서버와 직접 대화하는 스크립트"
#~ "를 (혹은 C++ 코드를) 쓸 수 있습니다, 하지만 그런 방식으로 게임을 만드는 일"
#~ "은 많은 작업이 될 것입니다."

#~ msgid ""
#~ "The first step is to open \"Project Settings\" and find the *Handheld* "
#~ "section. Enable the *Emulate Touchscreen* option. This lets you treat "
#~ "mouse click events the same as touch events, so you can test the game on "
#~ "a computer without a touchscreen. Also, make sure to select \"portrait\" "
#~ "under *Orientation*."
#~ msgstr ""
#~ "첫 단계에서는 \"프로젝트 설정\"을 열고 *Handheld* 섹션으로 가세요. "
#~ "*Emulate Touchscreen* 설정을 키세요. 이것이 마우스 클릭 이벤트를 터치 이벤"
#~ "트로 만들어 줍니다, 따라서 당신은 터치 스크린없이도 게임을 테스트 할 수 있"
#~ "습니다. 또한, *Orientation*을 \"portrait\"으로 선택하세요."

#~ msgid ""
#~ "As mentioned in the comments above, we need to avoid the situation of "
#~ "deleting the current scene while it is still being used (i.e. its code is "
#~ "still running), so using :ref:`Object.call_deferred() "
#~ "<class_Object_method_call_deferred>` is required at this point. The "
#~ "result is that the second function will run at a later time when any code "
#~ "from the current scene has completed."
#~ msgstr ""
#~ "위의 설명에서 언급했듯이, 우리는 현재 씬을 사용하는 도중 (즉 코드가 여전"
#~ "히 실행하는 도중) 삭제하는 상황을 피해야 합니다, 이 점에서 :ref:`Object."
#~ "call_deferred() <class_Object_method_call_deferred>`\\ 를 사용해야 합니"
#~ "다. 결과는 현재 씬의 코드가 완료될 때 두 번째 함수가 나중에 실행하는 것입"
#~ "니다."

#~ msgid ""
#~ "This tutorial aims to propose a simple workflow on how to organize "
#~ "projects. Since Godot allows the programmer to use the filesystem as they "
#~ "please, figuring out a way to organize projects when starting to use the "
#~ "engine can be a little challenging. Because of this, the tutorial "
#~ "describes a simple workflow, which should work as a starting point, "
#~ "regardless of whether it is used."
#~ msgstr ""
#~ "이 튜토리얼은 어떻게 프로젝트를 구성하는 지에 대한 간단한 워크플로우 제안"
#~ "에 중점을 둡니다. Godot로 프로그래머가 원하는 대로 파일 시스템을 사용할 "
#~ "수 있기 때문에, 엔진을 사용하기 시작할 때, 프로젝트를 구성하는 법을 알아내"
#~ "는 일은 좀 까다로워졌습니다. 이 때문에, 튜토리얼은 시작 여부와 관계없이, "
#~ "출발점으로서 간단한 워크플로우를 설명하겠습니다."

#~ msgid ""
#~ "Additionally, using version control can be challenging, so this "
#~ "proposition will include that too."
#~ msgstr ""
#~ "추가적으로, 버전 제어를 사용하는 일은 힘들 수도 있으므로, 이것도 포함되었"
#~ "습니다."

#~ msgid "Creating 3D content"
#~ msgstr "3D 내용물 만들기"

#~ msgid "do"
#~ msgstr "do"

#~ msgid "Reserved for future implementation of ``do... while`` loops."
#~ msgstr "이후 ``do... while`` 루프 구현을 위해 예약됩니다."

#~ msgid "switch"
#~ msgstr "switch"

#~ msgid "Reserved for future implementation. See match_."
#~ msgstr "향후 구현을 위해 예약됩니다. match_\\ 를 참고하세요."

#~ msgid "case"
#~ msgstr "case"

#~ msgid ""
#~ "Available under ``Godot.GD``. Some things were moved to their own "
#~ "classes, like Math and Random. See below."
#~ msgstr ""
#~ "``Godot.GD``\\ 하에 사용할 수 있습니다. 어떤 것은 자체적인 클래스로 옮겨졌"
#~ "습니다, Math나 Random같이 말이죠. 아래를 참고하세요."

#~ msgid "``ERR_*`` constants were moved to ``Godot.Error``."
#~ msgstr "``ERR_*`` 상수는 ``Godot.Error``\\ 로 옮겨졌습니다."

#~ msgid "Random"
#~ msgstr "Random(랜덤)"

#~ msgid "get_origin()"
#~ msgstr "get_origin()"

#~ msgid "Origin"
#~ msgstr "Origin"

#~ msgid "end"
#~ msgstr "end"

#~ msgid "End"
#~ msgstr "End"

#~ msgid "object[]"
#~ msgstr "object[]"

#~ msgid "int[]"
#~ msgstr "int[]"

#~ msgid ""
#~ "In some exceptional cases, a raw array (``type[]``) may be required "
#~ "instead of a ``List``."
#~ msgstr ""
#~ "일부 예외적인 경우로, ``List`` 대신 미가공 배열 (``type[]``)이 필요할 수"
#~ "도 있습니다."

#~ msgid ""
#~ "*This is temporary. Array is ref-counted, so it will need its own type "
#~ "that wraps the native side.*"
#~ msgstr ""
#~ "*이것은 일시적인 것입니다. 배열은 ref를 셀 수 있고, 네이티브 측을 감싸는 "
#~ "타입이 필요할 것입니다.*"

#~ msgid ""
#~ "``preload``, ``assert`` and ``yield``, as they work in GDScript, are "
#~ "currently not available in C#."
#~ msgstr ""
#~ "``preload``, ``assert`` 그리고 ``yield``\\ 가 GDScript에서는 작동하지만, "
#~ "현재로써 C#에서는 이용할 수 없습니다."

#~ msgid "load"
#~ msgstr "load"

#~ msgid "GD.load, which is the same as ResourceLoader.load"
#~ msgstr "GD.load, which is the same as ResourceLoader.load"

#~ msgid ""
#~ "Export of Blender materials is currently very primitive. However, it is "
#~ "the focus of a current GSoC project"
#~ msgstr ""
#~ "블렌더 머티리얼의 내보내기는 현재는 매우 원시적입니다. 하지만 현재 GSoC 프"
#~ "로젝트의 초점입니다"

#~ msgid ""
#~ "Materials are currently exported using their \"Blender Render\" settings. "
#~ "When Blender 2.8 is released, this will be removed and this part of the "
#~ "exporter will change."
#~ msgstr ""
#~ "머티리얼은 현재 \"Blender Render(블렌더 렌더)\" 설정을 사용하는 동안 내보"
#~ "낼 수 있습니다. 블렌더 2.8이 출시될 때, 이것은 제거되고 내보내기의 이 부분"
#~ "이 바뀔 것입니다."

#~ msgid "**1. Switch workspace to 'Dope Sheet'**"
#~ msgstr "**1. 작업 공간을 'Dope Sheet(도프시트)'로 바꾸기**"

#~ msgid "The stashed action, while not active, will still be exported."
#~ msgstr "숨겨진 동작은 활성화되지 않지만, 내보내집니다."

#~ msgid "**3. Check stashed actions in 'NLA Editor' [optional]**"
#~ msgstr "**3. 'NLA Editor(NLA 에디터)'에서 숨겨진 동작 확인하기 [선택]**"

#~ msgid "Switch workspace to 'NLA Editor'."
#~ msgstr "작업 공간을 'NLA Editor'로 바꿉니다."

#~ msgid "Make sure all stashed actions are muted."
#~ msgstr "모든 숨겨진 동작이 음소거인지 확인하세요."

#~ msgid ""
#~ "Download and install the `Mono <http://www.mono-project.com/download/>`_ "
#~ "SDK."
#~ msgstr ""
#~ "`Mono <http://www.mono-project.com/download/>`_ SDK를 다운로드 하고 설치합"
#~ "니다."

#~ msgid "If you are using Godot 3.0.2, you must use Mono 5.4."
#~ msgstr "Godot 3.0.2를 사용한다면, Mono 5.4를 사용해야 합니다."

#~ msgid "Godot 3.0.3+ requires Mono 5.12 on all platforms."
#~ msgstr "Godot 3.0.3 이상은 모든 플랫폼에서 Mono 5.12가 필요합니다."

#~ msgid ""
#~ "You also need MSBuild (at least version 15.0), which should come with the "
#~ "Mono installation."
#~ msgstr ""
#~ "또한 (적어도 15.0 버전 이상인) MSBuild가 필요한데, Mono 설치와 함께 제공됩"
#~ "니다."

#~ msgid ""
#~ "For instructions on installing older versions of Mono on Linux, see `this "
#~ "page <http://www.mono-project.com/docs/getting-started/install/linux/"
#~ "#accessing-older-releases>`_. Older versions of Mono for macOS and "
#~ "Windows can be found `here <https://download.mono-project.com/archive/>`_."
#~ msgstr ""
#~ "Linux에서 이전 버전의 Mono 설치에 대한 설명은, `이 페이지 <http://www."
#~ "mono-project.com/docs/getting-started/install/linux/#accessing-older-"
#~ "releases>`_\\ 를 참고하세요. macOS와 윈도우에서 이전 버전의 Mono 설치에 대"
#~ "한 설명은 `여기서 <https://download.mono-project.com/archive/>`_ 찾을 수 "
#~ "있습니다."

#~ msgid ""
#~ "Additionally, your Godot version must have Mono support enabled, so "
#~ "ensure you download the **Mono version** of Godot."
#~ msgstr ""
#~ "또한, Godot가 Mono 지원이 되는 버전이어야 합니다, 따라서 Godot의 **Mono 버"
#~ "전**\\ 을 다운로드 해야 합니다."

#~ msgid ""
#~ "If you are using Visual Studio Code, ensure you download and install the ."
#~ "NET tools extension. Without this, Godot will crash when trying to create "
#~ "a new C# project or edit a C# script."
#~ msgstr ""
#~ "Visual Studio Code를 사용한다면, .NET tools extension을 다운로드 하고 설치"
#~ "해야 합니다. 이것이 없으면 Godot가 새로운 C# 프로젝트를 만들고 C# 스크립트"
#~ "를 만들려 하면 팅길 것입니다."

#~ msgid ""
#~ "Attached C# scripts should refer to a class that has a class name that "
#~ "matches the file name and is unique within the project assembly (`#7402 "
#~ "comment <https://github.com/godotengine/godot/"
#~ "issues/7402#issuecomment-269910926>`_)"
#~ msgstr ""
#~ "붙인 C# 스크립트는 파일 이름과 일치한 이름의 클래스를 참조해야 하며 프로젝"
#~ "트 어셈블리 내에서 고유합니다 (`#7402 comment <https://github.com/"
#~ "godotengine/godot/issues/7402#issuecomment-269910926>`_)"

#~ msgid ""
#~ "It is often desired to send a notification that something happened in an "
#~ "instance. GDScript supports creation of built-in Godot signals. Declaring "
#~ "a signal in GDScript is easy using the `signal` keyword."
#~ msgstr ""
#~ "인스턴스에 어떤 일이 발생했다는 알림을 보내는 것이 종종 요구됩니다. "
#~ "GDScript는 내장 Godot 시그널을 지원합니다. `signal` 키워드를 사용하여 "
#~ "GDScript에 쉽게 시그널을 선언할 수 있습니다."

#~ msgid ""
#~ "These signals can be connected in the editor or from code like regular "
#~ "signals. Take the instance of a class where the signal was declared and "
#~ "connect it to the method of another instance:"
#~ msgstr ""
#~ "이 시그널은 에디터나 다른 코드에서 정규 시그널처럼 연결될 수 있습니다. 시"
#~ "그널이 선언된 인스턴스에서 시그널을 가져와 다른 인스턴스의 메서드에 연결합"
#~ "니다:"

#~ msgid ""
#~ "It is also possible to bind arguments to a signal that lacks them with "
#~ "your custom values:"
#~ msgstr ""
#~ "또한 커스텀 값으로 인수가 없는 시그널에 인수를 바인딩 할 수 있습니다:"

#~ msgid ""
#~ "This is useful when a signal from many objects is connected to a single "
#~ "callback and the sender must be identified:"
#~ msgstr ""
#~ "다양한 객체들의 시그널이 단일 콜백함수에 연결되어 있고, 보내는 자(sender)"
#~ "가 식별되야 할 때 유용합니다:"

#~ msgid ""
#~ "Finally, emitting a custom signal is done by using the Object.emit_signal "
#~ "method:"
#~ msgstr ""
#~ "마지막으로, 커스텀 시그널은 Object.emit_signal 메서드를 사용해 방출됩니다:"

#~ msgid ""
#~ "Don't scale the shape's outline! Only use the size handles (circled in "
#~ "red) to adjust the shape!"
#~ msgstr ""
#~ "모양의 겉 테두리를 조정하지 마세요! 모양을 맞추기 위해 크기 핸들만 (빨간 "
#~ "동그라미 부분) 사용합니다!"

#~ msgid ""
#~ "Disabling the area's collision shape means it won't detect collisions. By "
#~ "turning it off, we make sure we don't trigger the ``hit`` signal more "
#~ "than once."
#~ msgstr ""
#~ "영역의 충돌 모양을 사라지게 하는 것은 충돌을 감지하지 않는다를 의미합니"
#~ "다. 그것을 끈다면, ``hit`` 시그널을 두 번 이상 울리지 않게 됩니다."

#~ msgid "``Layout``: \"Center Top\""
#~ msgstr "``레이아웃``: \"Center Top\""

#~ msgid "``Margin``:"
#~ msgstr "``Margin``:"

#~ msgid "Left: ``-25``"
#~ msgstr "Left: ``-25``"

#~ msgid "Top: ``0``"
#~ msgstr "Top: ``0``"

#~ msgid "Right: ``25``"
#~ msgstr "Right: ``25``"

#~ msgid "Bottom: ``100``"
#~ msgstr "Bottom: ``100``"

#~ msgid "Left: ``-200``"
#~ msgstr "Left: ``-200``"

#~ msgid "Top: ``-150``"
#~ msgstr "Top: ``-150``"

#~ msgid "Right: ``200``"
#~ msgstr "Right: ``200``"

#~ msgid "Bottom: ``0``"
#~ msgstr "Bottom: ``0``"

#~ msgid "Left: ``-100``"
#~ msgstr "Left: ``-100``"

#~ msgid "Right: ``100``"
#~ msgstr "Right: ``100``"

#~ msgid ""
#~ "For one last bit of visual appeal, let's add a trail effect to the "
#~ "player's movement. Choose your ``Player`` scene and add a :ref:"
#~ "`Particles2D <class_Particles2D>` node named ``Trail``."
#~ msgstr ""
#~ "마지막 시각적 효과를 위해, 플레이어의 움직임에 꼬리를 추가합시다. "
#~ "``Player`` 씬을 선택하고 :ref:`Particles2D <class_Particles2D>` 노드를 추"
#~ "가하고 ``Trail`` 이라고 이름지으세요."

#~ msgid ""
#~ "There are a large number of properties to choose from when configuring "
#~ "particles. Feel free to experiment and create different effects. For the "
#~ "effect in this example, use the following settings:"
#~ msgstr ""
#~ "파티클을 구성할 땐 많은 고를 수 있는 속성들이 있습니다. 다양한 이펙트들을 "
#~ "만들고 자유롭게 경험해보세요. 이 예시의 이펙트를 위해서는, 다음의 설정을 "
#~ "사용하세요:"

#~ msgid ""
#~ "You also need to create a ``Material`` by clicking on ``<null>`` and then "
#~ "\"New ParticlesMaterial\". The settings for that are below:"
#~ msgstr ""
#~ "당신은 또한 ``<null>`` 에서 \"새 ParticlesMaterial\"을 클릭해서 "
#~ "``Material`` 을 추가할 수도 있습니다. 이 설정은 다음과 같습니다:"

#~ msgid ""
#~ "To make the gradient for the \"Color Ramp\" setting, we want a gradient "
#~ "taking the alpha (transparency) of the sprite from 0.5 (semi-transparent) "
#~ "to 0.0 (fully transparent)."
#~ msgstr ""
#~ "\"Color Ramp\" 설정에 그라디언트를 만들려면, 알파 (투명도)를 0.5 (반투명) "
#~ "에서 0.0 (완전 투명) 으로 설정하는 그라디언트가 필요합니다."

#~ msgid ""
#~ "Click \"New GradientTexture\", then under \"Gradient\", click \"New "
#~ "Gradient\". You'll see a window like this:"
#~ msgstr ""
#~ "\"새 GradientTexture\"를 클릭하고, \"Gradient\" 아래에, \"새 Gradient\"를 "
#~ "클릭하세요. 이렇게 생긴 창이 뜰 것입니다:"

#~ msgid ""
#~ "The left and right boxes represent the start and end colors. Click on "
#~ "each and then click the large square on the right to choose the color. "
#~ "For the first color, set the ``A`` (alpha) value to around halfway. For "
#~ "the second, set it all the way to ``0``."
#~ msgstr ""
#~ "왼쪽과 오른쪽 상자는 시작과 끝 색상을 나타냅니다. 각각을 클릭하고 오른쪽 "
#~ "넓은 사각형을 클릭해서 색상을 선택합니다. 첫 색상으로, ``A`` (알파) 값을 "
#~ "거의 절반으로 설정합니다. 두 번째 색상으로 \n"
#~ " ``0`` 으로 끝까지 설정합니다."

#~ msgid ""
#~ "See :ref:`Particles2D <class_Particles2D>` for more details on using "
#~ "particle effects."
#~ msgstr ""
#~ "파티클 이펙트를 사용하는 더 많은 정보는 :ref:`Particles2D "
#~ "<class_Particles2D>` 를 참고하세요."

#~ msgid ""
#~ "A more flexible alternative to prefabs you might know from Unity (and "
#~ "much more powerful given that instances can be nested)."
#~ msgstr ""
#~ "유니티의 프리펩보다 더 유연한 대안 (그리고 인스턴스가 중첩될 수 있기에 훨"
#~ "씬 더 강력함)."

#~ msgid ""
#~ "GameObject -> Node Add a component -> Inheriting Prefab -> Externalized "
#~ "branch"
#~ msgstr "GameObject -> 노드 구성 요소 추가  -> 상속 프리펩 -> 표면화 된 분기"

#~ msgid "In this guide you will learn:"
#~ msgstr "이 가이드에서는 다음 사항에 대해 알아봅니다:"

#~ msgid "Look at function"
#~ msgstr "기능 보기"

#~ msgid "Project Setup"
#~ msgstr "프로젝트 설정"

#~ msgid ""
#~ "If you're using C#, you need to restart Godot editor temporarily to see "
#~ "exported variables in the editor until it's fixed."
#~ msgstr ""
#~ "C#을 사용하신다면, 에디터에 내보낸 값을 보기 위해 값이 고정될 때까지 "
#~ "Godot 에디터를 일시적으로 다시 시작해야 합니다."

#~ msgid ""
#~ "NOTE: The result of these operations depends on the operands types. If "
#~ "both are Integers, then the result will be an Integer. That means 1/10 "
#~ "returns 0 instead of 0.1. If at least one of the operands is a float, "
#~ "then the result is a float: float(1)/10 or 1.0/10 return both 0.1. NOTE2: "
#~ "Remainder/Modulo only works on int. For floats use built in fmod()"
#~ msgstr ""
#~ "주석: 이러한 연산은 피연산자의 타입에 따라 다릅니다. 정수로 연산하면, 결과"
#~ "는 정수가 될 것입니다. 즉 1/10은 0.1이 아닌 0을 반환합니다. 둘 중 하나가 "
#~ "실수라면, 결과는 실수가 됩니다: 실수(1)/10 아니면 1.0/10으로 둘 다 0.1을 "
#~ "반환합니다. 주석 2: 나머지/모듈로(Modulo)는 오직 정수에서만 작동합니다. 실"
#~ "수에는 내장 fmod() 를 사용합니다"

#~ msgid "There is a few things to note here."
#~ msgstr "적어 놓을 만한 사항들이 있습니다."

#~ msgid "Mac OS X"
#~ msgstr "맥 OS X"

#~ msgid ""
#~ "C# is usually the best choice for companies. The large amount of "
#~ "programmers familiar with it means less time can be spent learning Godot "
#~ "and more time can be spent programming with it."
#~ msgstr ""
#~ "C#은 보통 회사에게 잘 쓰입니다. 많은 프로그래머들이 Godot을 배우는 대신 이"
#~ "걸 가지고 프로그래밍하는데 시간을 투자 할 수 있습니다."

#~ msgid ""
#~ "Where *Nodes* focus on behaviors, such as drawing a sprite, drawing a 3D "
#~ "model, physics, GUI controls, etc,"
#~ msgstr ""
#~ "스프라이트 그리기, 3D 모델 그리기, 물리, GUI 제어, 등과 같이, *노드* 가 행"
#~ "동에 중점을 둔다면,"

#~ msgid ""
#~ "**Resources** are mere **data containers**. This means that they don't do "
#~ "any action nor process any information. Resources just contain data."
#~ msgstr ""
#~ "**리소스** 는 단순한 **데이터 컨테이너** 입니다. 즉 그들은 어떤 행동을 취"
#~ "하지 않을 뿐더러 어떤 정보도 출력하지 않습니다. 리소스는 단지 데이터를 담"
#~ "습니다."

#~ msgid ""
#~ "When Godot saves or loads (from disk) a scene (.tscn or .scn), an image "
#~ "(png, jpg), a script (.gd) or pretty much anything, that file is "
#~ "considered a resource."
#~ msgstr ""
#~ "고도가 씬 (.tscn 이나 .scn), 이미지 (png, jpg), 스크립트 (.gd) 혹은 거의 "
#~ "모든 것을 저장하고 불러올 때 (디스크에서), 파일은 리소스로 간주됩니다."

#~ msgid ""
#~ "The resource properties can reference resources in two ways, *external* "
#~ "(on disk) or **built-in**."
#~ msgstr ""
#~ "리소스 속성은 두 가지 방법으로 리소스를 참조할 수 있습니다, *외부* (디스크"
#~ "에서) 혹은 **내장** 입니다."

#~ msgid ""
#~ "Pressing the \">\" button on the right side of the preview allows us to "
#~ "view and edit the resources properties. One of the properties (path) "
#~ "shows where it comes from. In this case, it comes from a png image."
#~ msgstr ""
#~ "미리보기의 오른쪽 모서리에 \">\" 버튼을 눌러서 리소스 속성을 보고 편집할 "
#~ "수 있습니다. 속성 중 하나 (path) 는 어디서 그것이 오는 지를 보여줍니다. "
#~ "이 경우에, 그것은 png 이미지에서 왔습니다."

#~ msgid ""
#~ "When the resource comes from a file, it is considered an *external* "
#~ "resource. If the path property is erased (or it never had a path to begin "
#~ "with), it is considered a built-in resource."
#~ msgstr ""
#~ "리소스가 파일에서 오는 경우, 그것은 *외부* 리소스로 간주됩니다. 경로 속성"
#~ "이 지워지면 (혹은 경로조차 갖고 있지 않다면), 그것은 내장 리소스로 간주됩"
#~ "니다."

#~ msgid ""
#~ "For example, if the path \\`\"res://robi.png\"\\` is erased from the "
#~ "\"path\" property in the above example, and then the scene is saved, the "
#~ "resource will be saved inside the .tscn scene file, no longer referencing "
#~ "the external \"robi.png\". However, even if saved as built-in, and even "
#~ "though the scene can be instanced multiple times, the resource will "
#~ "always be loaded only once. That means, different Robi robot scenes "
#~ "instanced at the same time will still share the same image."
#~ msgstr ""
#~ "예를 들어, 위 예시에서 \"path\" 속성의 \\`\"res://robi.png\"\\` 경로가 지"
#~ "워지면, 그리고 씬을 저장하면, 리소스는 더 이상 외부 \"robi.png\"를 참조하"
#~ "지 않고, .tscn 씬 파일에 저장될 것입니다. 하지만, 내장으로 저장되더라도, "
#~ "그리고 비록 씬이 여러 번 인스턴스 되더라도, 리소스는 오직 한번만 로드될 것"
#~ "입니다. 이는 즉, 동시에 인스턴스 된 다른 Robi robot 씬은 여전히 같은 이미"
#~ "지를 공유합니다."

#~ msgid ""
#~ "Loading resources from code is easy. There are two ways to do it. The "
#~ "first is to use load(), like this:"
#~ msgstr ""
#~ "코드를 통해 리소스를 불러오는 것은 쉽습니다. 두 가지 방법이 있습니다. 첫 "
#~ "번째 방법은 load()를 사용하는 것입니다, 이처럼 말이죠:"

#~ msgid ""
#~ "The second way is more optimal, but only works with a string constant "
#~ "parameter because it loads the resource at compile-time."
#~ msgstr ""
#~ "두 번째 방법이 더 최적이지만, 리소스를 컴파일 시간에 불러오기 때문에 오직 "
#~ "문자열 상수 매개 변수에서만 작동합니다."

#~ msgid ""
#~ "Like any object in Godot, not just nodes, resources can be scripted, too. "
#~ "However, there isn't generally much of an advantage, as resources are "
#~ "just data containers."
#~ msgstr ""
#~ "단지 노드 뿐만 아니라, 고도에서 어떤 물체와 마찬가지로, 리소스도 스크립트"
#~ "를 쓸 수 있습니다. 하지만, 리소스가 단지 데이터 컨테이너이므로, 일반적으"
#~ "로 큰 이점은 없습니다."

#~ msgid "Or even simpler using the name directly:"
#~ msgstr "혹은 직접 이름을 사용하면 더 간단합니다:"

#~ msgid "slave"
#~ msgstr "slave"

#~ msgid "sync"
#~ msgstr "sync"

#~ msgid "Code Structure"
#~ msgstr "코드 구조"

#~ msgid ""
#~ "Click \"Play Scene\" (``F6``) and confirm you can move the player around "
#~ "the screen in all directions."
#~ msgstr ""
#~ "\"씬 실행\" (``F6``) 을 누르고 플레이어가 화면 내에서 모든 방향으로 움직"
#~ "일 수 있는지 확인하세요."

#~ msgid "Placing of AnimationPlayer"
#~ msgstr "AnimationPlayer 배치"

#~ msgid ""
#~ "This means it is free as in \"free speech\" as well as in \"free beer\"."
#~ msgstr ""
#~ "여기서 자유란 \"공짜 맥주\"에서 공짜의 의미만이 아니라 \"표현의 자유\"에"
#~ "서 자유의 의미까지 있습니다."

#~ msgid "There are no usage restrictions on Godot"
#~ msgstr "고도를 사용하는 데 제약이 없습니다"

#~ msgid ""
#~ "This means you can use it for any game or application, commercially or "
#~ "non-commercially, in any industry"
#~ msgstr ""
#~ "즉, 어떤 업계에서 어떤 종류의 게임 혹은 응용 프로그램을 만들든 상업 혹은 "
#~ "비상업용으로 사용할 수 있습니다"

#~ msgid ""
#~ "For more, see `here <https://tldrlegal.com/license/mit-license>`_ or ask "
#~ "your lawyer of choice."
#~ msgstr ""
#~ "자세한 내용은 `여기 <https://tldrlegal.com/license/mit-license>`_ 를 참고"
#~ "하거나 변호사에게 문의하세요."

#~ msgid ""
#~ "Note that C# and Visual Scripting support is comparatively young and "
#~ "GDScript still has some advantages as outlined below."
#~ msgstr ""
#~ "다만 C#과 Visual Scripting 지원은 비교적 역사가 짧기 때문에 GDScript가 여"
#~ "전히 뒤에서 설명할 이점을 가지고 있습니다."

#~ msgid ""
#~ "Support for new languages can be added by third parties using the "
#~ "GDNative / NativeScript / PluginScript facilities. (See question about "
#~ "plugins below.)"
#~ msgstr ""
#~ "서드파티가 GDNative / NativeScript / PluginScript 기능을 사용해 새로운 언"
#~ "어 지원을 추가할 수도 있습니다. (아래 플러그인에 관한 문답을 참고하세요.)"

#~ msgid ""
#~ "GDScript? Why use a custom scripting language instead of my language of "
#~ "choice?"
#~ msgstr ""
#~ "GDScript요? 왜 내가 사용하는 언어가 아니라 독자적인 스크립트 언어를 사용하"
#~ "나요?"

#~ msgid ""
#~ "GDScript is designed to integrate from the ground to the way Godot works, "
#~ "more than any other language, and is simple and easy to learn. Takes at "
#~ "most a day or two to get comfortable and it's easy to see the benefits "
#~ "once you do. Please make the effort to learn GDScript, you will not "
#~ "regret it."
#~ msgstr ""
#~ "GDScript는 다른 언어들과 달리 그 기반부터 고도의 구조와 작동에 긴밀하게 연"
#~ "결되도록 설계됐습니다. GDScript는 아주 간단하고 배우기 쉽습니다. 하루 이"
#~ "틀 시간을 들여 익히면 그 장점을 쉽게 발견할 수 있습니다. GDScript를 배워보"
#~ "세요. 후회하지 않을 겁니다."

#~ msgid ""
#~ "Godot C++ API is also efficient and easy to use (the entire Godot editor "
#~ "is made with this API), and an excellent tool to optimize parts of a "
#~ "project, but trying to use it instead of GDScript for an entire game is, "
#~ "in most cases, a waste of time."
#~ msgstr ""
#~ "고도의 C++ API 역시 효율적이며 사용하기 쉽고 (고도 에디터 전체가 이 API로 "
#~ "만들어졌습니다.) 게임에서 최적화가 필요한 부분에 사용하기에 좋은 도구지"
#~ "만, 게임 전체를 GDScript 없이 C++ API로 만드는 것은 대부분의 경우 시간 낭"
#~ "비입니다."

#~ msgid ""
#~ "Yes, for more than a decade we tried in the past integrating several VMs "
#~ "(and even shipped games using them), such as Python, Squirrel and Lua (in "
#~ "fact we authored tolua++ in the past, one of the most popular C++ "
#~ "binders). None of them worked as well as GDScript does now."
#~ msgstr ""
#~ "과거 우리는 10년 넘게 Python, Squirrel, Lua (우리는 인기 있는 C++ 바인더 "
#~ "중 하나인 tolua++를 만들기도 했습니다) 등 여러가지 가상 머신을 통합하려고 "
#~ "시도했습니다. 심지어 그중 몇 가지를 사용해 출시한 게임들도 있습니다. 하지"
#~ "만 그 어느 것도 지금 GDScript처럼 잘 결합되지 않았습니다."

#~ msgid "For the more technically versed, proceed to the next item."
#~ msgstr "더 기술적인 설명을 듣고 싶다면 다음 항목을 참고하세요."

#~ msgid ""
#~ "I don't believe you. What are the technical reasons for the item above?"
#~ msgstr "납득할 수 없습니다. GDScript를 만든 기술적인 이유가 뭔가요?"

#~ msgid ""
#~ "GDScript was designed to solve the issues above, and performs well in all "
#~ "the above scenarios. Please learn GDScript and enjoy a smooth integration "
#~ "of scripting with the game engine (yes, it's a rare but enjoyable "
#~ "situation when things just work). It's worth it, give it a try!"
#~ msgstr ""
#~ "GDScript는 위 문제들을 해결하려고 설계되었고 위 모든 상황에서 아주 잘 작동"
#~ "합니다. GDScript를 배워서 스크립팅과 게임 엔진의 부드러운 결합을 경험해보"
#~ "세요. (이렇게 제대로 작동한다는 것은 매우 즐거운 경험입니다.) 배울 가치가 "
#~ "있습니다. 시도해보세요!"

#~ msgid "I want to extend Godot. What are my options for creating plugins?"
#~ msgstr ""
#~ "고도를 확장시키고 싶습니다. 어떤 방법으로 플러그인을 만들 수 있나요?"

#~ msgid ""
#~ "Additional languages could be added via PluginScript or the more low-"
#~ "level NativeScript."
#~ msgstr ""
#~ "언어 추가는 PluginScript나 더 낮은 단계로 NativeScript를 통해 가능합니다."

#~ msgid ""
#~ "If you want to add a certain native library, your best bet is GDNative "
#~ "and custom C++ modules."
#~ msgstr ""
#~ "특정 네이티브 라이브러리를 추가하고 싶다면, GDNative와 커스텀 C++ 모듈이 "
#~ "가장 좋은 방법입니다."

#~ msgid "Why is FBX not supported for import?"
#~ msgstr "왜 FBX 가져오기를 지원하지 않나요?"

#~ msgid "Also, glTF support was added in Godot 3.0."
#~ msgstr "또한, Godot 3.0에서는 glTF 지원이 추가됐습니다."

#~ msgid ""
#~ "FBX support could still be provided by third parties as a plugin. (See "
#~ "Plugins question above.)"
#~ msgstr ""
#~ "FBX 지원은 서드 파티 플러그인으로 개발될 수도 있습니다. (위의 플러그인 질"
#~ "문을 참고하세요.)"

#~ msgid ""
#~ "No, the aim of Godot is to create a complete open source engine licensed "
#~ "under MIT, so you have complete control over every single piece of it. "
#~ "Open versions of functionality or features from such SDKs may be "
#~ "eventually added though."
#~ msgstr ""
#~ "아뇨, 고도의 목표는 MIT 라이선스 하에서 완전히 오픈 소스인 엔진, 여러분이 "
#~ "모든 코드를 마음대로 할 수 있는 엔진입니다. 하지만 그런 SDK들이 제공하는 "
#~ "기능이나 특징의 오픈 소스 버전이 있다면 추가될 수도 있습니다."

#~ msgid "I have a great idea that will make Godot better. What do you think?"
#~ msgstr "고도를 더 좋게 만들 아이디어가 떠올랐어요. 어떻게 생각하세요?"

#~ msgid ""
#~ "Your idea will most certainly be ignored. Examples of stuff that is "
#~ "ignored by the developers:"
#~ msgstr ""
#~ "이런 아이디어들은 개발자들이 무시할 수도 있어요. 몇가지 예를 들자면:"

#~ msgid "Let's do this because it will make Godot better"
#~ msgstr "이게 있다면 고도가 더 좋아질 겁니다"

#~ msgid "Let's do this in Godot because another game engine does it"
#~ msgstr "다른 게임엔진에도 있는 거니까 고도에도 추가합시다"

#~ msgid "Let's remove this because I think it's not needed"
#~ msgstr "이건 쓸모없을 것 같은데 삭제합시다"

#~ msgid "Let's remove clutter and bloat and make Godot look nicer"
#~ msgstr "고도가 깔끔하게 보이기 위해 난잡한 것들은 치워버립시다"

#~ msgid "Let's add an alternative workflow for people who prefer it"
#~ msgstr "사람들이 더 좋아할만한 워크플로우를 추가합시다"

#~ msgid ""
#~ "Godot developers are always willing to talk to you and listen to your "
#~ "feedback very openly, to an extent rarely seen in open source projects, "
#~ "but they will care mostly about real issues you have while using Godot, "
#~ "not ideas solely based on personal belief. Developers are interested in "
#~ "(for example):"
#~ msgstr ""
#~ "고도 개발자들은 어느 오픈 소스 프로젝트들에서도 보기 힘들정도로 여러분들"
#~ "과 의견을 주고 받습니다, 하지만 아이디어나 개인적인 의견이 아닌 고도를 사"
#~ "용하면서 불편한 점에 관심을 둡니다. 그러니까 이런 것에 흥미를 가집니다 (예"
#~ "시):"

#~ msgid ""
#~ "Once one of the above points is stated, we can work together on a "
#~ "solution and this is where your ideas and suggestions are most valuable "
#~ "and welcome, they need to be in context of a real issue."
#~ msgstr ""
#~ "위의 것들이 제안되면, 우리는 해결책을 찾기위해 함께 일할 것이고 여기서 아"
#~ "이디어나 의견들이 필요할 것입니다, 이것들은 말그대로 진짜 문제이기 때문입"
#~ "니다."

#~ msgid "Examples of how NOT to state problems generally and vaguely are:"
#~ msgstr "문제점들을 일반적이고 막연히 제시하면 안 되는 예시들이 있습니다:"

#~ msgid "Certain feature is ugly"
#~ msgstr "어떤 기능은 나빠요"

#~ msgid "Certain workflow is slow"
#~ msgstr "일부 워크플로우가 느려요"

#~ msgid "Certain feature needs optimization"
#~ msgstr "어떤 기능들은 최적화가 필요해요"

#~ msgid "Certain aspect of the UI looks cluttered"
#~ msgstr "특정 UI가 어수선해보여요"

#~ msgid ""
#~ "Associating something with an adjective will not get you much attention "
#~ "and developers will most likely not understand you. Instead, try to "
#~ "reformulate your problem as a story such as:"
#~ msgstr ""
#~ "형용사나 다른 말들을 붙인다고 눈에 띄진 않으며 오히려 개발자들이 이해하지 "
#~ "못 할 수도 있습니다. 따라서, 이후 예시처럼 문제점을 상황으로 표현해보세요:"

#~ msgid "I try to move objects around but always end up picking the wrong one"
#~ msgstr "오브젝트를 옮기려고 했지만 계속 다른 것들이 선택됩니다"

#~ msgid ""
#~ "I tried to make a game like Battlefield but I'm not managing to "
#~ "understand how to get lighting to look the same."
#~ msgstr ""
#~ "저는 배틀필드같은 게임을 만들려고 하지만 똑같은 조명 효과를 넣는 방법을 이"
#~ "해하지 못했습니다."

#~ msgid ""
#~ "I always forget which script I was editing, and it takes me too many "
#~ "steps to go back to it."
#~ msgstr ""
#~ "저는 편집했던 스크립트를 깜박해서, 다시 새 것으로 돌아가서 만듭니다."

#~ msgid ""
#~ "This will allow you to convey what you are thinking much better and set a "
#~ "common ground for discussion. Please try your best to state your problems "
#~ "as stories to the developers and the community, before discussing any "
#~ "idea. Be specific and concrete."
#~ msgstr ""
#~ "이것으로 여러분들의 생각이 훨씬 더 잘 전달되고 토론의 쟁점을 마련해 줄 것"
#~ "입니다. 어떤 아이디어를 개발자와 커뮤니티가 토론하기 위한 문제점을 위 형식"
#~ "에 맞추기 위해 최선을 다해 주십시오. 구체적이고 명확해야 합니다."

#~ msgid "Export Templates"
#~ msgstr "템플릿 내보내기"
